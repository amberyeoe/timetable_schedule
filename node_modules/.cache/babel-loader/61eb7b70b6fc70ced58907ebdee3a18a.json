{"ast":null,"code":"import { startTime, convertToDayDateTime } from './days.js';\n\nconst parseCSVFile = file => {\n  const reader = new FileReader();\n\n  reader.onload = e => {\n    const csvContent = e.target.result; // Split rows, remove any empty lines\n\n    const rows = csvContent.split(\"\\n\").filter(row => row.trim() !== \"\"); // Get the first row (headers)\n\n    const headers = rows[0].replace(/\\r$/, \"\").split(\",\").map(col => col.trim().replace(/^\"|\"$/g, \"\"));\n    console.log(\"Headers:\", headers); // Debugging headers\n    // Parse the remaining rows into objects using the headers\n\n    const parsedRows = rows.slice(1).map((row, index) => {\n      const columns = row.replace(/\\r$/, \"\").split(\",\").map(col => col.trim().replace(/^\"|\"$/g, \"\")); // Remove leading and trailing quotes\n\n      if (columns.length !== headers.length) {\n        console.error(`Row ${index + 2} has a different number of columns`, columns);\n        return null;\n      } // Create an object where the keys are the headers and values are the corresponding columns\n\n\n      const rowObject = headers.reduce((obj, header, i) => {\n        obj[header] = columns[i];\n        return obj;\n      }, {});\n      return rowObject;\n    }).filter(row => row !== null);\n    console.log(\"Parsed Rows:\", parsedRows); // Debugging parsed rows\n    // Process the rows for sorting or merging\n\n    const rowsForSorting = parsedRows.map(event => {\n      // Ensure the correct property names match those in the parsedRows\n      const {\n        Working_Day: timeslotDay,\n        start_time: timeslotStart,\n        end_time: timeslotEnd,\n        Module: module,\n        Lecturer: lecturer,\n        Class_Type: classType,\n        Class: classInfo,\n        Room: room\n      } = event;\n      return {\n        timeslotDay,\n        // Day of the week\n        timeslotStart,\n        // Start time\n        timeslotEnd,\n        // End time\n        module,\n        // Module name\n        lecturer,\n        // lecturer name\n        classInfo: classInfo || 'N/A',\n        // Class, default to 'N/A' if missing\n        classType: classType || 'N/A',\n        // Class type, default to 'N/A' if missing\n        room: room || 'N/A' // Classroom, default to 'N/A' if missing\n\n      };\n    }); // Sort the rows by day of the week and then by start time\n\n    rowsForSorting.sort((a, b) => {\n      const dayComparison = getDayValue(a.timeslotDay) - getDayValue(b.timeslotDay); // Compare by day of the week\n\n      if (dayComparison !== 0) {\n        return dayComparison; // If days are different, sort by day\n      } // If days are the same, compare by start time\n\n\n      return a.timeslotStart.localeCompare(b.timeslotStart); // Use localeCompare for time comparison\n    }); // Helper function to check if two rows should be merged\n\n    const shouldMerge = (row1, row2) => {\n      return row1.module === row2.module && row1.classInfo === row2.classInfo && row1.classType === row2.classType && row1.room === row2.room && row1.timeslotDay === row2.timeslotDay && row1.timeslotEnd === row2.timeslotStart;\n    }; // Merge consecutive rows into single events\n\n\n    const mergedEvents = [];\n    let currentEvent = null;\n    rowsForSorting.forEach((row, index) => {\n      if (!currentEvent) {\n        currentEvent = { ...row\n        };\n      } else {\n        if (shouldMerge(currentEvent, row)) {\n          currentEvent.timeslotEnd = row.timeslotEnd;\n        } else {\n          mergedEvents.push(currentEvent);\n          currentEvent = { ...row\n          };\n        }\n      }\n\n      if (index === rowsForSorting.length - 1) {\n        mergedEvents.push(currentEvent);\n      }\n    });\n    console.log(\"Merged Events:\", mergedEvents);\n    const parsedEvents = mergedEvents.map(event => {\n      const {\n        startDateTime,\n        endDateTime\n      } = toDateTime(event.timeslotDay, event.timeslotStart, event.timeslotEnd);\n      return {\n        id: DayPilot.guid(),\n        start: new DayPilot.Date(startDateTime),\n        end: new DayPilot.Date(endDateTime),\n        text: event.module,\n        classroom: event.room,\n        class: event.classInfo,\n        classType: event.classType\n      };\n    });\n    setEvents(parsedEvents);\n    console.log(\"Parsed and Merged Events:\", parsedEvents);\n    calendar.update(); // Force the calendar to update\n  };\n\n  reader.readAsText(file); // Read the CSV file as text\n}; // time slot id look up\n\n\nconst timeSlotLookup = {\n  \"Monday\": {\n    \"08:00\": \"TS1\",\n    \"09:00\": \"TS2\",\n    \"10:00\": \"TS3\",\n    \"11:00\": \"TS4\",\n    \"12:00\": \"BREAK\",\n    \"13:00\": \"TS5\",\n    \"14:00\": \"TS6\",\n    \"15:00\": \"TS7\",\n    \"16:00\": \"TS8\",\n    \"17:00\": \"TS9\"\n  },\n  \"Tuesday\": {\n    \"08:00\": \"TS10\",\n    \"09:00\": \"TS11\",\n    \"10:00\": \"TS12\",\n    \"11:00\": \"TS13\",\n    \"12:00\": \"BREAK\",\n    \"13:00\": \"TS14\",\n    \"14:00\": \"TS15\",\n    \"15:00\": \"TS16\",\n    \"16:00\": \"TS17\",\n    \"17:00\": \"TS18\"\n  },\n  \"Wednesday\": {\n    \"08:00\": \"TS19\",\n    \"09:00\": \"TS20\",\n    \"10:00\": \"TS21\",\n    \"11:00\": \"TS22\",\n    \"12:00\": \"BREAK\",\n    \"13:00\": \"TS23\",\n    \"14:00\": \"TS24\",\n    \"15:00\": \"TS25\",\n    \"16:00\": \"TS26\",\n    \"17:00\": \"TS27\"\n  },\n  \"Thursday\": {\n    \"08:00\": \"TS28\",\n    \"09:00\": \"TS29\",\n    \"10:00\": \"TS30\",\n    \"11:00\": \"TS31\",\n    \"12:00\": \"BREAK\",\n    \"13:00\": \"TS32\",\n    \"14:00\": \"TS33\",\n    \"15:00\": \"TS34\",\n    \"16:00\": \"TS35\",\n    \"17:00\": \"TS36\"\n  },\n  \"Friday\": {\n    \"08:00\": \"TS37\",\n    \"09:00\": \"TS38\",\n    \"10:00\": \"TS39\",\n    \"11:00\": \"TS40\",\n    \"12:00\": \"BREAK\",\n    \"13:00\": \"TS41\",\n    \"14:00\": \"TS42\",\n    \"15:00\": \"TS43\",\n    \"16:00\": \"TS44\",\n    \"17:00\": \"TS45\"\n  }\n};\nexport const convertToCSV = events => {\n  const getDayValue = day => {\n    const dayValues = {\n      Monday: 1,\n      Tuesday: 2,\n      Wednesday: 3,\n      Thursday: 4,\n      Friday: 5\n    };\n    return dayValues[day] || 6; // Default to 6 for any invalid day\n  }; // Convert events to CSV format\n\n\n  const header = \"Module,Class,Class_Type,Time_Slot,Room,timeslot_day,timeslot_start,timeslot_end\\n\";\n  const rows = events.flatMap(event => {\n    const {\n      dayOfWeek,\n      time: startTime\n    } = convertToDayDateTime(event.start, 2);\n    const startDateTime = new Date(event.start);\n    const endDateTime = new Date(event.end);\n    const eventRows = []; // Loop through each hour from start to end\n\n    for (let dt = startDateTime; dt < endDateTime; dt.setHours(dt.getHours() + 1)) {\n      const currentStartTime = dt.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      });\n      const currentEndTime = new Date(dt);\n      currentEndTime.setHours(currentEndTime.getHours() + 1);\n      const formattedEndTime = currentEndTime.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      }); // Lookup the time_slot_id based on the day and current start time\n\n      const timeSlotId = timeSlotLookup[dayOfWeek] && timeSlotLookup[dayOfWeek][currentStartTime] ? timeSlotLookup[dayOfWeek][currentStartTime] : \"\";\n      eventRows.push([event.text, // Module\n      event.class || 'N/A', // Class\n      event.classType || 'N/A', // Class Type\n      timeSlotId, // Time Slot\n      event.classroom.replace(/[\\u200B-\\u200D\\uFEFF]/g, '').trim(), // Remove zero-width spaces and trim\n      dayOfWeek, // timeslot_day\n      currentStartTime, // timeslot_start\n      formattedEndTime // timeslot_end\n      ].join(\",\"));\n    }\n\n    return eventRows; // Return all rows generated for this event\n  }); // Sort the rows based on the day of the week and then by start time\n\n  rows.sort((a, b) => {\n    const dayComparison = getDayValue(a.split(\",\")[5]) - getDayValue(b.split(\",\")[5]); // Compare by day of the week\n\n    if (dayComparison !== 0) {\n      return dayComparison; // If days are different, sort by day\n    } // If days are the same, compare by start time\n\n\n    return a.split(\",\")[6].localeCompare(b.split(\",\")[6]); // Use localeCompare for time comparison\n  });\n  return header + rows.join(\"\\n\"); // Return the complete CSV content\n}; // Function to trigger CSV file download\n\nexport const downloadCSV = (csvContent, filename) => {\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.setAttribute('download', filename);\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}; // export const downloadCSV = (csvContent, filename) => {\n//     // Encode CSV content as a URI component\n//     const csvDataUri = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csvContent);\n//     // Create an anchor element\n//     const link = document.createElement('a');\n//     link.href = csvDataUri;\n//     link.setAttribute('download', filename); // Set the filename for download\n//     // Append the anchor to the document, trigger the click, and remove the anchor\n//     document.body.appendChild(link);\n//     link.click();\n//     document.body.removeChild(link);\n// };\n// Testing \n// export const downloadCSV = (csvContent, filename) => {\n//     const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n//     // Check if the iframe sandbox allows downloads\n//     if (window.parent === window) {\n//         // If no iframe, proceed with normal download\n//         const url = URL.createObjectURL(blob);\n//         const link = document.createElement('a');\n//         link.href = url;\n//         link.setAttribute('download', filename);\n//         document.body.appendChild(link);\n//         link.click();\n//         document.body.removeChild(link);\n//     } else {\n//         // If inside an iframe, try to communicate with parent window\n//         try {\n//             const data = { csvContent, filename, type: 'csvDownload' };\n//             window.parent.postMessage(data, '*');\n//         } catch (error) {\n//             console.error('Unable to trigger download within SAS VA:', error);\n//         }\n//     }\n// };","map":{"version":3,"names":["startTime","convertToDayDateTime","parseCSVFile","file","reader","FileReader","onload","e","csvContent","target","result","rows","split","filter","row","trim","headers","replace","map","col","console","log","parsedRows","slice","index","columns","length","error","rowObject","reduce","obj","header","i","rowsForSorting","event","Working_Day","timeslotDay","start_time","timeslotStart","end_time","timeslotEnd","Module","module","Lecturer","lecturer","Class_Type","classType","Class","classInfo","Room","room","sort","a","b","dayComparison","getDayValue","localeCompare","shouldMerge","row1","row2","mergedEvents","currentEvent","forEach","push","parsedEvents","startDateTime","endDateTime","toDateTime","id","DayPilot","guid","start","Date","end","text","classroom","class","setEvents","calendar","update","readAsText","timeSlotLookup","convertToCSV","events","day","dayValues","Monday","Tuesday","Wednesday","Thursday","Friday","flatMap","dayOfWeek","time","eventRows","dt","setHours","getHours","currentStartTime","toLocaleTimeString","hour","minute","hour12","currentEndTime","formattedEndTime","timeSlotId","join","downloadCSV","filename","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild"],"sources":["C:/Users/amyeoz/Downloads/timetable_schedule/src/calendar/handledata.js"],"sourcesContent":["import { startTime, convertToDayDateTime } from './days.js';\r\n\r\nconst parseCSVFile = (file) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const csvContent = e.target.result;\r\n  \r\n      // Split rows, remove any empty lines\r\n      const rows = csvContent.split(\"\\n\").filter(row => row.trim() !== \"\");\r\n      \r\n      // Get the first row (headers)\r\n      const headers = rows[0].replace(/\\r$/, \"\").split(\",\").map(col => col.trim().replace(/^\"|\"$/g, \"\"));\r\n      console.log(\"Headers:\", headers); // Debugging headers\r\n  \r\n      // Parse the remaining rows into objects using the headers\r\n      const parsedRows = rows.slice(1).map((row, index) => {\r\n        const columns = row.replace(/\\r$/, \"\").split(\",\").map(col => col.trim().replace(/^\"|\"$/g, \"\")); // Remove leading and trailing quotes\r\n  \r\n        if (columns.length !== headers.length) {\r\n          console.error(`Row ${index + 2} has a different number of columns`, columns);\r\n          return null;\r\n        }\r\n  \r\n        // Create an object where the keys are the headers and values are the corresponding columns\r\n        const rowObject = headers.reduce((obj, header, i) => {\r\n          obj[header] = columns[i];\r\n          return obj;\r\n        }, {});\r\n  \r\n        return rowObject;\r\n      }).filter(row => row !== null);\r\n  \r\n      console.log(\"Parsed Rows:\", parsedRows); // Debugging parsed rows\r\n  \r\n      // Process the rows for sorting or merging\r\n      const rowsForSorting = parsedRows.map(event => {\r\n        // Ensure the correct property names match those in the parsedRows\r\n        const { Working_Day: timeslotDay, start_time: timeslotStart, end_time: timeslotEnd, Module: module, Lecturer: lecturer, Class_Type: classType, Class: classInfo, Room: room } = event;\r\n  \r\n        return {\r\n          timeslotDay,          // Day of the week\r\n          timeslotStart,        // Start time\r\n          timeslotEnd,          // End time\r\n          module,               // Module name\r\n          lecturer,             // lecturer name\r\n          classInfo: classInfo || 'N/A',   // Class, default to 'N/A' if missing\r\n          classType: classType || 'N/A',   // Class type, default to 'N/A' if missing\r\n          room: room || 'N/A'              // Classroom, default to 'N/A' if missing\r\n        };\r\n      });\r\n  \r\n      // Sort the rows by day of the week and then by start time\r\n      rowsForSorting.sort((a, b) => {\r\n        const dayComparison = getDayValue(a.timeslotDay) - getDayValue(b.timeslotDay); // Compare by day of the week\r\n        if (dayComparison !== 0) {\r\n          return dayComparison; // If days are different, sort by day\r\n        }\r\n        // If days are the same, compare by start time\r\n        return a.timeslotStart.localeCompare(b.timeslotStart); // Use localeCompare for time comparison\r\n      });\r\n  \r\n      // Helper function to check if two rows should be merged\r\n      const shouldMerge = (row1, row2) => {\r\n        return (\r\n          row1.module === row2.module &&\r\n          row1.classInfo === row2.classInfo &&\r\n          row1.classType === row2.classType &&\r\n          row1.room === row2.room &&\r\n          row1.timeslotDay === row2.timeslotDay &&\r\n          row1.timeslotEnd === row2.timeslotStart\r\n        );\r\n      };\r\n  \r\n      // Merge consecutive rows into single events\r\n      const mergedEvents = [];\r\n      let currentEvent = null;\r\n  \r\n      rowsForSorting.forEach((row, index) => {\r\n        if (!currentEvent) {\r\n          currentEvent = { ...row };\r\n        } else {\r\n          if (shouldMerge(currentEvent, row)) {\r\n            currentEvent.timeslotEnd = row.timeslotEnd;\r\n          } else {\r\n            mergedEvents.push(currentEvent);\r\n            currentEvent = { ...row };\r\n          }\r\n        }\r\n        if (index === rowsForSorting.length - 1) {\r\n          mergedEvents.push(currentEvent);\r\n        }\r\n      });\r\n  \r\n      console.log(\"Merged Events:\", mergedEvents);\r\n  \r\n      const parsedEvents = mergedEvents.map(event => {\r\n        const { startDateTime, endDateTime } = toDateTime(event.timeslotDay, event.timeslotStart, event.timeslotEnd);\r\n        return {\r\n          id: DayPilot.guid(),\r\n          start: new DayPilot.Date(startDateTime),\r\n          end: new DayPilot.Date(endDateTime),\r\n          text: event.module,\r\n          classroom: event.room,\r\n          class: event.classInfo,\r\n          classType: event.classType\r\n        };\r\n      });\r\n  \r\n      setEvents(parsedEvents);\r\n      console.log(\"Parsed and Merged Events:\", parsedEvents);\r\n  \r\n      calendar.update(); // Force the calendar to update\r\n    };\r\n  \r\n    reader.readAsText(file); // Read the CSV file as text\r\n  };\r\n  \r\n\r\n// time slot id look up\r\nconst timeSlotLookup = {\r\n    \"Monday\": {\r\n      \"08:00\": \"TS1\",\r\n      \"09:00\": \"TS2\",\r\n      \"10:00\": \"TS3\",\r\n      \"11:00\": \"TS4\",\r\n      \"12:00\": \"BREAK\",\r\n      \"13:00\": \"TS5\",\r\n      \"14:00\": \"TS6\",\r\n      \"15:00\": \"TS7\",\r\n      \"16:00\": \"TS8\",\r\n      \"17:00\": \"TS9\"\r\n    },\r\n    \"Tuesday\": {\r\n      \"08:00\": \"TS10\",\r\n      \"09:00\": \"TS11\",\r\n      \"10:00\": \"TS12\",\r\n      \"11:00\": \"TS13\",\r\n      \"12:00\": \"BREAK\",\r\n      \"13:00\": \"TS14\",\r\n      \"14:00\": \"TS15\",\r\n      \"15:00\": \"TS16\",\r\n      \"16:00\": \"TS17\",\r\n      \"17:00\": \"TS18\"\r\n    },\r\n    \"Wednesday\": {\r\n      \"08:00\": \"TS19\",\r\n      \"09:00\": \"TS20\",\r\n      \"10:00\": \"TS21\",\r\n      \"11:00\": \"TS22\",\r\n      \"12:00\": \"BREAK\",\r\n      \"13:00\": \"TS23\",\r\n      \"14:00\": \"TS24\",\r\n      \"15:00\": \"TS25\",\r\n      \"16:00\": \"TS26\",\r\n      \"17:00\": \"TS27\"\r\n    },\r\n    \"Thursday\": {\r\n      \"08:00\": \"TS28\",\r\n      \"09:00\": \"TS29\",\r\n      \"10:00\": \"TS30\",\r\n      \"11:00\": \"TS31\",\r\n      \"12:00\": \"BREAK\",\r\n      \"13:00\": \"TS32\",\r\n      \"14:00\": \"TS33\",\r\n      \"15:00\": \"TS34\",\r\n      \"16:00\": \"TS35\",\r\n      \"17:00\": \"TS36\"\r\n    },\r\n    \"Friday\": {\r\n      \"08:00\": \"TS37\",\r\n      \"09:00\": \"TS38\",\r\n      \"10:00\": \"TS39\",\r\n      \"11:00\": \"TS40\",\r\n      \"12:00\": \"BREAK\",\r\n      \"13:00\": \"TS41\",\r\n      \"14:00\": \"TS42\",\r\n      \"15:00\": \"TS43\",\r\n      \"16:00\": \"TS44\",\r\n      \"17:00\": \"TS45\"\r\n    }\r\n  };\r\n  \r\n\r\n  export const convertToCSV = (events) => {\r\n    const getDayValue = (day) => {\r\n        const dayValues = {\r\n            Monday: 1,\r\n            Tuesday: 2,\r\n            Wednesday: 3,\r\n            Thursday: 4,\r\n            Friday: 5,\r\n        };\r\n        return dayValues[day] || 6; // Default to 6 for any invalid day\r\n    };\r\n\r\n    // Convert events to CSV format\r\n    const header = \"Module,Class,Class_Type,Time_Slot,Room,timeslot_day,timeslot_start,timeslot_end\\n\";\r\n    \r\n    const rows = events.flatMap(event => {\r\n        const { dayOfWeek, time: startTime } = convertToDayDateTime(event.start, 2);\r\n        const startDateTime = new Date(event.start);\r\n        const endDateTime = new Date(event.end);\r\n\r\n        const eventRows = [];\r\n        \r\n        // Loop through each hour from start to end\r\n        for (let dt = startDateTime; dt < endDateTime; dt.setHours(dt.getHours() + 1)) {\r\n            const currentStartTime = dt.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });\r\n            const currentEndTime = new Date(dt);\r\n            currentEndTime.setHours(currentEndTime.getHours() + 1);\r\n            const formattedEndTime = currentEndTime.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });\r\n\r\n            // Lookup the time_slot_id based on the day and current start time\r\n            const timeSlotId = timeSlotLookup[dayOfWeek] && timeSlotLookup[dayOfWeek][currentStartTime] ? timeSlotLookup[dayOfWeek][currentStartTime] : \"\";\r\n\r\n            eventRows.push([\r\n                event.text, // Module\r\n                event.class || 'N/A', // Class\r\n                event.classType || 'N/A', // Class Type\r\n                timeSlotId, // Time Slot\r\n                event.classroom.replace(/[\\u200B-\\u200D\\uFEFF]/g, '').trim(), // Remove zero-width spaces and trim\r\n                dayOfWeek, // timeslot_day\r\n                currentStartTime, // timeslot_start\r\n                formattedEndTime // timeslot_end\r\n            ].join(\",\"));\r\n        }\r\n\r\n        return eventRows; // Return all rows generated for this event\r\n    });\r\n\r\n    // Sort the rows based on the day of the week and then by start time\r\n    rows.sort((a, b) => {\r\n        const dayComparison = getDayValue(a.split(\",\")[5]) - getDayValue(b.split(\",\")[5]); // Compare by day of the week\r\n        if (dayComparison !== 0) {\r\n            return dayComparison; // If days are different, sort by day\r\n        }\r\n        // If days are the same, compare by start time\r\n        return a.split(\",\")[6].localeCompare(b.split(\",\")[6]); // Use localeCompare for time comparison\r\n    });\r\n\r\n    return header + rows.join(\"\\n\"); // Return the complete CSV content\r\n};\r\n\r\n  \r\n  // Function to trigger CSV file download\r\n  export const downloadCSV = (csvContent, filename) => {\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', filename);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n// export const downloadCSV = (csvContent, filename) => {\r\n//     // Encode CSV content as a URI component\r\n//     const csvDataUri = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csvContent);\r\n    \r\n//     // Create an anchor element\r\n//     const link = document.createElement('a');\r\n//     link.href = csvDataUri;\r\n//     link.setAttribute('download', filename); // Set the filename for download\r\n    \r\n//     // Append the anchor to the document, trigger the click, and remove the anchor\r\n//     document.body.appendChild(link);\r\n//     link.click();\r\n//     document.body.removeChild(link);\r\n// };\r\n\r\n  // Testing \r\n// export const downloadCSV = (csvContent, filename) => {\r\n//     const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    \r\n//     // Check if the iframe sandbox allows downloads\r\n//     if (window.parent === window) {\r\n//         // If no iframe, proceed with normal download\r\n//         const url = URL.createObjectURL(blob);\r\n//         const link = document.createElement('a');\r\n//         link.href = url;\r\n//         link.setAttribute('download', filename);\r\n//         document.body.appendChild(link);\r\n//         link.click();\r\n//         document.body.removeChild(link);\r\n//     } else {\r\n//         // If inside an iframe, try to communicate with parent window\r\n//         try {\r\n//             const data = { csvContent, filename, type: 'csvDownload' };\r\n//             window.parent.postMessage(data, '*');\r\n//         } catch (error) {\r\n//             console.error('Unable to trigger download within SAS VA:', error);\r\n//         }\r\n//     }\r\n// };\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}