{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amyeoz\\\\Downloads\\\\timetable_schedule\\\\src\\\\calendar\\\\Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { DayPilotCalendar, DayPilot } from \"@daypilot/daypilot-lite-react\"; // Import DayPilot\n\nimport \"./Calendar.css\";\nimport { convertToDayDateTime, processFormDates, convertToCSV, downloadCSV, getDateForSelectedDay } from './days.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  wrap: {\n    display: \"flex\"\n  },\n  main: {\n    flexGrow: \"1\"\n  }\n};\n\nconst Calendar = () => {\n  _s();\n\n  const [calendar, setCalendar] = useState(null);\n  const [events, setEvents] = useState([]);\n  const startDate = \"2024-10-07\"; // Fixed start date for the week (Monday)\n\n  const config = {\n    viewType: \"days\",\n    durationBarVisible: false,\n    days: 5,\n    // Show only Monday to Friday\n    timeRangeSelectedHandling: \"Enabled\",\n    businessBeginsHour: 8,\n    businessEndsHour: 18,\n    cellDuration: 60,\n    events: events,\n    onTimeRangeSelected: async args => {\n      const {\n        dayOfWeek,\n        time: startTime\n      } = convertToDayDateTime(args.start, 2);\n      const endTime = convertToDayDateTime(args.end, 1); // Check if the selected time range falls within 12:00 - 13:00\n\n      if (startTime < 13 && endTime > 12) {\n        alert(\"This time range is not available for selection.\");\n        calendar.clearSelection();\n        return; // Prevent selection\n      } // Prompt user to enter event details\n\n\n      const form = await DayPilot.Modal.form([{\n        name: \"Module Name\",\n        id: \"ModuleName\",\n        type: \"text\"\n      }, {\n        name: \"Class\",\n        id: \"Class\",\n        type: \"text\"\n      }, {\n        name: \"Class Type\",\n        id: \"ClassType\",\n        type: \"text\"\n      }, {\n        name: \"Classroom\",\n        id: \"Classroom\",\n        type: \"text\"\n      }, {\n        name: \"Day of the Week\",\n        id: \"Day\",\n        type: \"select\",\n        options: [{\n          name: \"Monday\",\n          id: \"Monday\"\n        }, {\n          name: \"Tuesday\",\n          id: \"Tuesday\"\n        }, {\n          name: \"Wednesday\",\n          id: \"Wednesday\"\n        }, {\n          name: \"Thursday\",\n          id: \"Thursday\"\n        }, {\n          name: \"Friday\",\n          id: \"Friday\"\n        }]\n      }, {\n        name: \"Start Time\",\n        id: \"StartTime\",\n        type: \"time\"\n      }, // Default start time\n      {\n        name: \"End Time\",\n        id: \"EndTime\",\n        type: \"time\"\n      } // Default end time\n      ], {\n        ModuleName: \"\",\n        // You can set this if needed\n        Class: \"\",\n        ClassType: \"\",\n        Classroom: \"\",\n        Day: dayOfWeek,\n        // Initialize with the extracted day of the week\n        StartTime: startTime,\n        // Set the initial value for Start Time\n        EndTime: endTime // Set the initial value for End Time\n\n      });\n\n      if (!form.result) {\n        return; // If form is cancelled, do nothing\n      }\n\n      const {\n        startDateTime,\n        endDateTime\n      } = processFormDates(form.result.Day, form.result.StartTime, form.result.EndTime); // Clear the selection on the calendar\n\n      calendar.clearSelection(); // Add the event to the calendar\n\n      calendar.events.add({\n        start: new DayPilot.Date(startDateTime),\n        // Set start date and time\n        end: new DayPilot.Date(endDateTime),\n        // Set end date and time\n        id: DayPilot.guid(),\n        // Generate a unique ID for the event\n        text: form.result.ModuleName,\n        // Module name entered by the user\n        classroom: form.result.Classroom,\n        // Classroom entered by the user\n        class: form.result.Class,\n        classType: form.result.ClassType\n      });\n    },\n    onEventClick: async args => {\n      await editEvent(args.e);\n    },\n    contextMenu: new DayPilot.Menu({\n      items: [{\n        text: \"Delete\",\n        onClick: async args => {\n          calendar.events.remove(args.source);\n        }\n      }, {\n        text: \"-\"\n      }, {\n        text: \"Edit...\",\n        onClick: async args => {\n          await editEvent(args.source);\n        }\n      }]\n    }),\n    onBeforeEventRender: args => {\n      args.data.areas = [{\n        top: 3,\n        right: 3,\n        width: 20,\n        height: 20,\n        symbol: \"icons/daypilot.svg#minichevron-down-2\",\n        fontColor: \"#fff\",\n        toolTip: \"Show context menu\",\n        action: \"ContextMenu\"\n      }, {\n        top: 3,\n        right: 25,\n        width: 20,\n        height: 20,\n        symbol: \"icons/daypilot.svg#x-circle\",\n        fontColor: \"#fff\",\n        action: \"None\",\n        toolTip: \"Delete event\",\n        onClick: async args => {\n          calendar.events.remove(args.source);\n        }\n      }]; // Display classroom information visually in the event text\n\n      args.data.html = `<div>\n        <strong>Module: ${args.data.text}</strong><br/>\n        <span style=\"font-size: 12px; color: #FFF;\">Class: ${args.data.class || 'N/A'} <br/> Class Type: ${args.data.classType || 'N/A'} <br/> Classroom: ${args.data.classroom || 'N/A'}</span>\n      </div>`;\n    },\n    onBeforeHeaderRender: args => {\n      // Override header to only show the day names (Monday, Tuesday, etc.)\n      const dayNames = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n      const dayIndex = args.header.start.getDayOfWeek() - 1; // Monday is index 0\n\n      args.header.html = dayNames[dayIndex];\n    }\n  };\n\n  const editEvent = async e => {\n    const {\n      dayOfWeek,\n      time: startTime\n    } = convertToDayDateTime(e.data.start, 2);\n    const endTime = convertToDayDateTime(e.data.end, 1); // Open modal form with dropdown for day selection and time inputs\n\n    const form = await DayPilot.Modal.form([{\n      name: \"Module Name\",\n      id: \"ModuleName\",\n      type: \"text\"\n    }, {\n      name: \"Class\",\n      id: \"Class\",\n      type: \"text\"\n    }, {\n      name: \"Class Type\",\n      id: \"ClassType\",\n      type: \"text\"\n    }, {\n      name: \"Classroom\",\n      id: \"Classroom\",\n      type: \"text\"\n    }, {\n      name: \"Day of the Week\",\n      id: \"Day\",\n      type: \"select\",\n      options: [{\n        name: \"Monday\",\n        id: \"Monday\"\n      }, {\n        name: \"Tuesday\",\n        id: \"Tuesday\"\n      }, {\n        name: \"Wednesday\",\n        id: \"Wednesday\"\n      }, {\n        name: \"Thursday\",\n        id: \"Thursday\"\n      }, {\n        name: \"Friday\",\n        id: \"Friday\"\n      }]\n    }, {\n      name: \"Start Time\",\n      id: \"StartTime\",\n      type: \"time\"\n    }, {\n      name: \"End Time\",\n      id: \"EndTime\",\n      type: \"time\"\n    }], {\n      ModuleName: e.data.text,\n      Class: e.data.class,\n      ClassType: e.data.classType,\n      Classroom: e.data.classroom,\n      Day: dayOfWeek,\n      // Initialize with the extracted day of the week\n      StartTime: startTime,\n      // Set the initial value for Start Time\n      EndTime: endTime // Set the initial value for End Time    }\n\n    }); // If the form was canceled, stop the process\n\n    if (!form.result) {\n      return;\n    }\n\n    const {\n      startDateTime,\n      endDateTime\n    } = processFormDates(form.result.Day, form.result.StartTime, form.result.EndTime); // Update event data\n\n    e.data.text = form.result.ModuleName;\n    e.data.classroom = form.result.Classroom;\n    e.data.start = startDateTime;\n    e.data.end = endDateTime;\n    e.data.class = form.result.Class;\n    e.data.classType = form.result.ClassType; // Update the event in the calendar\n\n    calendar.events.update(e);\n  }; // Helper function to read the CSV file and parse it into event objects\n\n\n  const parseCSVFile = file => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      const csvContent = e.target.result;\n      console.log(\"CSV Content:\", csvContent); // Log the CSV content for debugging\n      // Split rows, remove any empty lines, and skip the first row (header)\n\n      const rows = csvContent.split(\"\\n\").filter(row => row.trim() !== \"\").slice(1); // Skip the first row\n      // Parse the rows into objects and sort them by day and start time\n\n      const parsedRows = rows.map((row, index) => {\n        // Remove the trailing '\\r' from each row and split it into columns\n        const columns = row.replace(/\\r$/, \"\").split(\",\").map(col => col.trim());\n\n        if (columns.length < 8) {\n          console.error(`Row ${index + 2} has missing columns`, columns);\n          return null;\n        }\n\n        const [module, classInfo, classType, timeSlot, room, timeslotDay, timeslotStart, timeslotEnd] = columns;\n        return {\n          module,\n          classInfo,\n          classType,\n          timeSlot,\n          room,\n          timeslotDay,\n          timeslotStart,\n          timeslotEnd\n        };\n      }).filter(row => row !== null).sort((a, b) => {\n        // Sort by day and start time\n        if (a.timeslotDay === b.timeslotDay) {\n          return a.timeslotStart.localeCompare(b.timeslotStart);\n        }\n\n        return a.timeslotDay.localeCompare(b.timeslotDay);\n      }); // Helper function to check if two rows should be merged\n\n      const shouldMerge = (row1, row2) => {\n        // Check if the same module, class, classType, room, and day\n        if (row1.module === row2.module && row1.classInfo === row2.classInfo && row1.classType === row2.classType && row1.room === row2.room && row1.timeslotDay === row2.timeslotDay) {\n          // Check if row2 starts exactly when row1 ends\n          return row1.timeslotEnd === row1.timeslotStart;\n        }\n\n        return false;\n      }; // Merge consecutive rows into single events\n\n\n      const mergedEvents = [];\n      let currentEvent = null;\n      parsedRows.forEach((row, index) => {\n        if (!currentEvent) {\n          // Start a new event\n          currentEvent = {\n            module: row.module,\n            classInfo: row.classInfo,\n            classType: row.classType,\n            room: row.room,\n            timeslotDay: row.timeslotDay,\n            timeslotStart: row.timeslotStart,\n            timeslotEnd: row.timeslotEnd\n          };\n        } else {\n          // Check if the current row should be merged with the current event\n          if (shouldMerge(currentEvent, row)) {\n            // Extend the current event's end time\n            currentEvent.timeslotEnd = row.timeslotEnd;\n          } else {\n            // Save the current event and start a new one\n            mergedEvents.push(currentEvent);\n            currentEvent = {\n              module: row.module,\n              classInfo: row.classInfo,\n              classType: row.classType,\n              room: row.room,\n              timeslotDay: row.timeslotDay,\n              timeslotStart: row.timeslotStart,\n              timeslotEnd: row.timeslotEnd\n            };\n          }\n        } // Push the last event when done iterating\n\n\n        if (index === parsedRows.length - 1) {\n          mergedEvents.push(currentEvent);\n        }\n      }); // Convert the merged events to DayPilot events\n\n      const parsedEvents = mergedEvents.map(event => {\n        const {\n          startDateTime,\n          endDateTime\n        } = processFormDates(event.timeslotDay, event.timeslotStart, event.timeslotEnd);\n        return {\n          id: DayPilot.guid(),\n          start: new DayPilot.Date(startDateTime),\n          end: new DayPilot.Date(endDateTime),\n          text: event.module,\n          classroom: event.room,\n          class: event.classInfo,\n          classType: event.classType\n        };\n      });\n      setEvents(parsedEvents); // Update the events state\n\n      console.log(\"Parsed and Merged Events:\", parsedEvents); // Log merged events for debugging\n\n      calendar.update(); // Force the calendar to update\n    };\n\n    reader.readAsText(file); // Read the CSV file as text\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.buttonWrap,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        onChange: e => {\n          const file = e.target.files[0];\n\n          if (file) {\n            parseCSVFile(file);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const csvContent = convertToCSV(events); // Convert events to CSV format\n\n          downloadCSV(csvContent, 'schedule.csv'); // Trigger the download\n        },\n        children: \"Export to CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.main,\n      children: /*#__PURE__*/_jsxDEV(DayPilotCalendar, { ...config,\n        startDate: startDate,\n        controlRef: setCalendar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calendar, \"zuRJhdDuPNajtmGWqS48/Wqf5uw=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useEffect","useState","DayPilotCalendar","DayPilot","convertToDayDateTime","processFormDates","convertToCSV","downloadCSV","getDateForSelectedDay","styles","wrap","display","main","flexGrow","Calendar","calendar","setCalendar","events","setEvents","startDate","config","viewType","durationBarVisible","days","timeRangeSelectedHandling","businessBeginsHour","businessEndsHour","cellDuration","onTimeRangeSelected","args","dayOfWeek","time","startTime","start","endTime","end","alert","clearSelection","form","Modal","name","id","type","options","ModuleName","Class","ClassType","Classroom","Day","StartTime","EndTime","result","startDateTime","endDateTime","add","Date","guid","text","classroom","class","classType","onEventClick","editEvent","e","contextMenu","Menu","items","onClick","remove","source","onBeforeEventRender","data","areas","top","right","width","height","symbol","fontColor","toolTip","action","html","onBeforeHeaderRender","dayNames","dayIndex","header","getDayOfWeek","update","parseCSVFile","file","reader","FileReader","onload","csvContent","target","console","log","rows","split","filter","row","trim","slice","parsedRows","map","index","columns","replace","col","length","error","module","classInfo","timeSlot","room","timeslotDay","timeslotStart","timeslotEnd","sort","a","b","localeCompare","shouldMerge","row1","row2","mergedEvents","currentEvent","forEach","push","parsedEvents","event","readAsText","buttonWrap","files"],"sources":["C:/Users/amyeoz/Downloads/timetable_schedule/src/calendar/Calendar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { DayPilotCalendar, DayPilot } from \"@daypilot/daypilot-lite-react\"; // Import DayPilot\nimport \"./Calendar.css\";\nimport { convertToDayDateTime, processFormDates, convertToCSV, downloadCSV, getDateForSelectedDay } from './days.js';\n\nconst styles = {\n  wrap: {\n    display: \"flex\"\n  },\n  main: {\n    flexGrow: \"1\"\n  }\n};\n\nconst Calendar = () => {\n  const [calendar, setCalendar] = useState(null);\n  const [events, setEvents] = useState([]);\n\n  const startDate = \"2024-10-07\"; // Fixed start date for the week (Monday)\n\n  const config = {\n    viewType: \"days\",\n    durationBarVisible: false,\n    days: 5, // Show only Monday to Friday\n    timeRangeSelectedHandling: \"Enabled\",\n    businessBeginsHour: 8,\n    businessEndsHour: 18,\n    cellDuration: 60,\n    events: events,\n    onTimeRangeSelected: async args => {\n      const { dayOfWeek, time: startTime } = convertToDayDateTime(args.start, 2);\n      const endTime = convertToDayDateTime(args.end, 1);\n\n      // Check if the selected time range falls within 12:00 - 13:00\n      if (startTime < 13 && endTime > 12) {\n        alert(\"This time range is not available for selection.\");\n        calendar.clearSelection();\n        return; // Prevent selection\n      }\n\n      // Prompt user to enter event details\n      const form = await DayPilot.Modal.form([\n        { name: \"Module Name\", id: \"ModuleName\", type: \"text\" },\n        { name: \"Class\", id: \"Class\", type: \"text\" },\n        { name: \"Class Type\", id: \"ClassType\", type: \"text\" },\n        { name: \"Classroom\", id: \"Classroom\", type: \"text\" },\n        { \n          name: \"Day of the Week\", \n          id: \"Day\", \n          type: \"select\", \n          options: [\n            { name: \"Monday\", id: \"Monday\" },\n            { name: \"Tuesday\", id: \"Tuesday\" },\n            { name: \"Wednesday\", id: \"Wednesday\" },\n            { name: \"Thursday\", id: \"Thursday\" },\n            { name: \"Friday\", id: \"Friday\" }\n          ]\n        },\n        { name: \"Start Time\", id: \"StartTime\", type: \"time\" }, // Default start time\n        { name: \"End Time\", id: \"EndTime\", type: \"time\" } // Default end time\n      ], \n      { \n        ModuleName: \"\",  // You can set this if needed\n        Class: \"\",\n        ClassType: \"\",\n        Classroom: \"\",\n        Day: dayOfWeek,  // Initialize with the extracted day of the week\n        StartTime: startTime,  // Set the initial value for Start Time\n        EndTime: endTime        // Set the initial value for End Time\n      });\n    \n      if (!form.result) {\n        return; // If form is cancelled, do nothing\n      }\n\n      const {startDateTime, endDateTime} = processFormDates(form.result.Day, form.result.StartTime, form.result.EndTime)\n    \n      // Clear the selection on the calendar\n      calendar.clearSelection();\n    \n      // Add the event to the calendar\n      calendar.events.add({\n        start: new DayPilot.Date(startDateTime), // Set start date and time\n        end: new DayPilot.Date(endDateTime),     // Set end date and time\n        id: DayPilot.guid(),                 // Generate a unique ID for the event\n        text: form.result.ModuleName,         // Module name entered by the user\n        classroom: form.result.Classroom,     // Classroom entered by the user\n        class: form.result.Class,\n        classType: form.result.ClassType\n      });\n    },\n    \n    \n    onEventClick: async args => {\n      await editEvent(args.e);\n    },\n    contextMenu: new DayPilot.Menu({\n      items: [\n        {\n          text: \"Delete\",\n          onClick: async args => {\n            calendar.events.remove(args.source);\n          },\n        },\n        {\n          text: \"-\"\n        },\n        {\n          text: \"Edit...\",\n          onClick: async args => {\n            await editEvent(args.source);\n          }\n        }\n      ]\n    }),\n    onBeforeEventRender: args => {\n      args.data.areas = [\n        {\n          top: 3,\n          right: 3,\n          width: 20,\n          height: 20,\n          symbol: \"icons/daypilot.svg#minichevron-down-2\",\n          fontColor: \"#fff\",\n          toolTip: \"Show context menu\",\n          action: \"ContextMenu\",\n        },\n        {\n          top: 3,\n          right: 25,\n          width: 20,\n          height: 20,\n          symbol: \"icons/daypilot.svg#x-circle\",\n          fontColor: \"#fff\",\n          action: \"None\",\n          toolTip: \"Delete event\",\n          onClick: async args => {\n            calendar.events.remove(args.source);\n          }\n        }\n      ];\n\n      // Display classroom information visually in the event text\n      args.data.html = `<div>\n        <strong>Module: ${args.data.text}</strong><br/>\n        <span style=\"font-size: 12px; color: #FFF;\">Class: ${args.data.class || 'N/A'} <br/> Class Type: ${args.data.classType || 'N/A'} <br/> Classroom: ${args.data.classroom || 'N/A'}</span>\n      </div>`;\n    },\n    onBeforeHeaderRender: args => {\n      // Override header to only show the day names (Monday, Tuesday, etc.)\n      const dayNames = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n      const dayIndex = args.header.start.getDayOfWeek() - 1; // Monday is index 0\n      args.header.html = dayNames[dayIndex];\n    }\n  };\n\n  const editEvent = async (e) => {\n    const { dayOfWeek, time: startTime } = convertToDayDateTime(e.data.start, 2);\n    const endTime = convertToDayDateTime(e.data.end, 1);\n\n    // Open modal form with dropdown for day selection and time inputs\n    const form = await DayPilot.Modal.form([\n      { name: \"Module Name\", id: \"ModuleName\", type: \"text\" },\n      { name: \"Class\", id: \"Class\", type: \"text\" },\n      { name: \"Class Type\", id: \"ClassType\", type: \"text\" },\n      { name: \"Classroom\", id: \"Classroom\", type: \"text\" },\n\n      { \n        name: \"Day of the Week\", \n        id: \"Day\", \n        type: \"select\", \n        options: [\n          { name: \"Monday\", id: \"Monday\" },\n          { name: \"Tuesday\", id: \"Tuesday\" },\n          { name: \"Wednesday\", id: \"Wednesday\" },\n          { name: \"Thursday\", id: \"Thursday\" },\n          { name: \"Friday\", id: \"Friday\" }\n        ], \n      },\n      { \n        name: \"Start Time\", \n        id: \"StartTime\", \n        type: \"time\", \n      },\n      { \n        name: \"End Time\", \n        id: \"EndTime\", \n        type: \"time\", \n      },\n    ], {\n      ModuleName: e.data.text,\n      Class: e.data.class ,\n      ClassType: e.data.classType ,\n      Classroom: e.data.classroom ,\n      Day: dayOfWeek,  // Initialize with the extracted day of the week\n      StartTime: startTime,  // Set the initial value for Start Time\n      EndTime: endTime        // Set the initial value for End Time    }\n    });\n  \n    // If the form was canceled, stop the process\n    if (!form.result) {\n      return;\n    }\n\n    const {startDateTime, endDateTime} = processFormDates(form.result.Day, form.result.StartTime, form.result.EndTime)\n  \n    // Update event data\n    e.data.text = form.result.ModuleName;\n    e.data.classroom = form.result.Classroom;\n    e.data.start = startDateTime;\n    e.data.end = endDateTime;\n    e.data.class = form.result.Class;\n    e.data.classType = form.result.ClassType;\n  \n    // Update the event in the calendar\n    calendar.events.update(e);\n  };\n  // Helper function to read the CSV file and parse it into event objects\n  const parseCSVFile = (file) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const csvContent = e.target.result;\n      console.log(\"CSV Content:\", csvContent); // Log the CSV content for debugging\n  \n      // Split rows, remove any empty lines, and skip the first row (header)\n      const rows = csvContent.split(\"\\n\").filter(row => row.trim() !== \"\").slice(1); // Skip the first row\n  \n      // Parse the rows into objects and sort them by day and start time\n      const parsedRows = rows.map((row, index) => {\n        // Remove the trailing '\\r' from each row and split it into columns\n        const columns = row.replace(/\\r$/, \"\").split(\",\").map(col => col.trim());\n  \n        if (columns.length < 8) {\n          console.error(`Row ${index + 2} has missing columns`, columns);\n          return null;\n        }\n  \n        const [module, classInfo, classType, timeSlot, room, timeslotDay, timeslotStart, timeslotEnd] = columns;\n  \n        return {\n          module,\n          classInfo,\n          classType,\n          timeSlot,\n          room,\n          timeslotDay,\n          timeslotStart,\n          timeslotEnd\n        };\n      }).filter(row => row !== null).sort((a, b) => {\n        // Sort by day and start time\n        if (a.timeslotDay === b.timeslotDay) {\n          return a.timeslotStart.localeCompare(b.timeslotStart);\n        }\n        return a.timeslotDay.localeCompare(b.timeslotDay);\n      });\n  \n      // Helper function to check if two rows should be merged\n      const shouldMerge = (row1, row2) => {\n        // Check if the same module, class, classType, room, and day\n        if (\n          row1.module === row2.module &&\n          row1.classInfo === row2.classInfo &&\n          row1.classType === row2.classType &&\n          row1.room === row2.room &&\n          row1.timeslotDay === row2.timeslotDay\n        ) {\n          // Check if row2 starts exactly when row1 ends\n          return row1.timeslotEnd === row1.timeslotStart;\n        }\n        return false;\n      };\n  \n      // Merge consecutive rows into single events\n      const mergedEvents = [];\n      let currentEvent = null;\n  \n      parsedRows.forEach((row, index) => {\n        if (!currentEvent) {\n          // Start a new event\n          currentEvent = {\n            module: row.module,\n            classInfo: row.classInfo,\n            classType: row.classType,\n            room: row.room,\n            timeslotDay: row.timeslotDay,\n            timeslotStart: row.timeslotStart,\n            timeslotEnd: row.timeslotEnd\n          };\n        } else {\n          // Check if the current row should be merged with the current event\n          if (shouldMerge(currentEvent, row)) {\n            // Extend the current event's end time\n            currentEvent.timeslotEnd = row.timeslotEnd;\n          } else {\n            // Save the current event and start a new one\n            mergedEvents.push(currentEvent);\n            currentEvent = {\n              module: row.module,\n              classInfo: row.classInfo,\n              classType: row.classType,\n              room: row.room,\n              timeslotDay: row.timeslotDay,\n              timeslotStart: row.timeslotStart,\n              timeslotEnd: row.timeslotEnd\n            };\n          }\n        }\n  \n        // Push the last event when done iterating\n        if (index === parsedRows.length - 1) {\n          mergedEvents.push(currentEvent);\n        }\n      });\n  \n      // Convert the merged events to DayPilot events\n      const parsedEvents = mergedEvents.map(event => {\n        const { startDateTime, endDateTime } = processFormDates(event.timeslotDay, event.timeslotStart, event.timeslotEnd);\n  \n        return {\n          id: DayPilot.guid(),\n          start: new DayPilot.Date(startDateTime),\n          end: new DayPilot.Date(endDateTime),\n          text: event.module,\n          classroom: event.room,\n          class: event.classInfo,\n          classType: event.classType\n        };\n      });\n  \n      setEvents(parsedEvents); // Update the events state\n      console.log(\"Parsed and Merged Events:\", parsedEvents); // Log merged events for debugging\n  \n      calendar.update(); // Force the calendar to update\n    };\n  \n    reader.readAsText(file); // Read the CSV file as text\n  };\n  \n  \n  \n\n  return (\n    <div>\n      <div style={styles.buttonWrap}>\n\n        {/* Add the file input for CSV import */}\n        <input\n          type=\"file\"\n          accept=\".csv\"\n          onChange={(e) => {\n            const file = e.target.files[0];\n            if (file) {\n              parseCSVFile(file);\n            }\n          }}\n        />\n\n      <button onClick={() => {\n          const csvContent = convertToCSV(events);  // Convert events to CSV format\n          downloadCSV(csvContent, 'schedule.csv');  // Trigger the download\n        }}>\n          Export to CSV\n        </button>\n        {/* <button>Import from CSV</button> */}\n      </div>\n\n      <div style={styles.main}>\n        <DayPilotCalendar\n          {...config}\n          startDate={startDate}\n          controlRef={setCalendar}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Calendar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}