import e, { createElement as t, Fragment as o, useState as n, useEffect as a, useMemo as r, useCallback as s, createContext as i, useContext as l, useRef as c, useLayoutEffect as d, forwardRef as u, useReducer as m, lazy as p, memo as f, useImperativeHandle as g, Suspense as h, cloneElement as b, Children as v, isValidElement as y, useSyncExternalStore as x, createRef as S, PureComponent as w, Component as C } from "react";

import { createRoot as E } from "react-dom/client";

import { __extends as I, __assign as _, __awaiter as D, __generator as L, __rest as T } from "tslib";

import { BehaviorSubject as R, ReplaySubject as k, Subject as A, combineLatest as M, asyncScheduler as N, using as O, throwError as P, fromEventPattern as B, of as z, merge as F, animationFrameScheduler as j, EMPTY as V, from as H, concat as U, AsyncSubject as G, firstValueFrom as K } from "rxjs";

import { takeUntil as W, filter as $, take as Y, distinctUntilChanged as q, skip as X, debounceTime as Z, map as J, mergeMap as Q, withLatestFrom as ee, tap as te, ignoreElements as oe, publish as ne, delay as ae, switchMap as re, concatMap as se, first as ie, shareReplay as le, share as ce, mergeMapTo as de, finalize as ue, startWith as me, endWith as pe, skipWhile as fe, last as ge, find as he, scan as be, distinct as ve, groupBy as ye, toArray as xe } from "rxjs/operators";

import Se from "i18next";

import { useTranslation as we, initReactI18next as Ce } from "react-i18next";

import Ee from "@babel/runtime/helpers/extends";

import Ie, { createPortal as _e } from "react-dom";

import De, { FreeFocusInside as Le, AutoFocusInside as Te, MoveFocusInside as Re } from "react-focus-lock";

import ke from "classnames";

import { MotionConfig as Ae, AnimatePresence as Me, motion as Ne, useMotionValue as Oe, useDragControls as Pe, useAnimate as Be } from "framer-motion";

import { hsl as ze, parseToHsl as Fe, opacify as je, transparentize as Ve, rgba as He, toColorString as Ue, hslToColorString as Ge, grayscale as Ke, mix as We, parseToRgb as $e, rgb as Ye, getContrast as qe, lighten as Xe, darken as Ze } from "polished";

import Je from "axios";

import { createSelector as Qe, defaultMemoize as et } from "reselect";

import { b as tt, a as ot, c as nt, d as at, e as rt, f as st, g as it, h as lt, i as ct, j as dt, k as ut, l as mt, m as pt, n as ft, o as gt, p as ht, q as bt, r as vt, s as yt, t as xt, u as St, v as wt, w as Ct, x as Et, y as It, z as _t, A as Dt, B as Lt, C as Tt, D as Rt, E as kt, F as At, G as Mt, H as Nt, I as Ot, J as Pt, K as Bt, L as zt, M as Ft, N as jt, O as Vt, P as Ht, Q as Ut, R as Gt, S as Kt, T as Wt, U as $t, V as Yt, W as qt, X as Xt, Y as Zt, Z as Jt, _ as Qt, $ as eo, a0 as to, a1 as oo } from "./i18n/nova_i18n.mjs";

import { usePopper as no } from "react-popper";

import "@popperjs/core";

import ao from "memoize-one";

import "handlebars";

import { z as ro } from "zod";

import { useCallback as so } from "use-memo-one";

import { useQuery as io, QueryClient as lo } from "@tanstack/react-query";

import co from "react-cropper";

import { ofType as uo, createEpicMiddleware as mo, combineEpics as po } from "redux-observable";

import { combineReducers as fo, createStore as go, applyMiddleware as ho, bindActionCreators as bo } from "redux";

import { composeWithDevTools as vo } from "@redux-devtools/extension";

import { connect as yo, shallowEqual as xo } from "react-redux";

let So;

let wo = new Map;

function Co() {
    return So;
}

async function Eo(e) {
    const t = await (e?.importType === "mobile" ? import("./chunk2.mjs").then((e => ({
        type: "mobile",
        ...e
    }))) : import("./chunk7.mjs").then((e => ({
        type: "dynamic",
        ...e
    }))));
    if (e?.initialize) {
        await (e?.initialize(t));
    }
    So = t;
    if (wo) {
        for (const e of wo.values()) {
            e();
        }
    }
    wo = undefined;
}

function Io(e, t) {
    wo?.set(e, t);
}

function _o(e) {
    wo?.delete(e);
}

let Do = 0;

function Lo() {
    return `vaReportComponentContainer${Do++}`;
}

class To extends HTMLElement {
    constructor(...e) {
        super(...e);
        this._validationTimerId = 0;
        this._root = void 0;
        this._needsUnmount = false;
        this._connected = false;
        this._render = () => {
            if (this._needsUnmount) {
                this._root?.unmount();
                this._root = undefined;
                this._needsUnmount = false;
            }
            if (this._connected && !this._root) {
                this._root = E(this);
            }
            const e = this._getRenderer();
            if (!e) {
                if (this._root) {
                    this._root.render(t(o));
                }
                return;
            }
            const n = this._root && this.getRenderProps();
            clearTimeout(this._validationTimerId);
            this._validationTimerId = 0;
            if (n) {
                this._root.render(t(e, n));
            } else if (this._root) {
                this._root.render(t(o));
            }
        };
    }
    _getConnected() {
        return this._connected;
    }
    _invalidateProps() {
        if (this._getConnected()) {
            this._queueRender();
        }
    }
    _queueRender() {
        if (this._validationTimerId === 0) {
            this._validationTimerId = window.setTimeout((() => {
                this._validationTimerId = 0;
                this._render();
            }), 0);
        }
    }
    connectedCallback() {
        this._connected = true;
        this._queueRender();
    }
    disconnectedCallback() {
        this._connected = false;
        this._needsUnmount = true;
        this._queueRender();
    }
    attributeChangedCallback(e, t, o) {
        this._invalidateProps();
    }
    static get observedAttributes() {
        return [];
    }
}

function Ro(e) {
    if (!e) {
        return;
    }
    switch (e.toLowerCase()) {
      case "guest":
        return "guest";

      case "credentials":
        return "credentials";
    }
}

class ko extends To {
    constructor(...e) {
        super(...e);
        this._elementKey = Lo();
        this._stateRetained = false;
        this._initialized = false;
        this._menuItemProvider = void 0;
        this._contextKey = void 0;
        this._refHandle = void 0;
        this._isHandleValid = false;
        this._handle = void 0;
        this._handlePromise = void 0;
        this._handlePromiseCallbacks = void 0;
        this._setRef = e => {
            this._handle = e;
            if (e) {
                this._acceptHandlePromise();
            }
        };
    }
    _acceptHandlePromise() {
        this._isHandleValid = true;
        if (this._handle) {
            this._handlePromiseCallbacks?.accept(this._handle);
            this._handlePromiseCallbacks = undefined;
        } else {
            console.warn("_acceptHandlePromise called when no report handle was available");
        }
    }
    _invalidateHandleRequests(e) {
        this._isHandleValid = false;
        this._handlePromiseCallbacks?.reject(e);
        this._handlePromiseCallbacks = undefined;
        this._handlePromise = undefined;
    }
    getReportHandle() {
        if (!this._handlePromise) {
            this._handlePromise = this._handle && this._isHandleValid ? Promise.resolve(this._handle) : new Promise(((e, t) => {
                this._handlePromiseCallbacks = {
                    accept: e,
                    reject: t
                };
            }));
        }
        return this._handlePromise;
    }
    _getContextKey(e) {
        return "url" in e ? `${e.url}:${e.reportUri}:${this._elementKey}` : `${e.packageUri}:${this._elementKey}`;
    }
    _invalidateProps() {
        let e = undefined;
        const t = this.getRenderProps();
        if (t) {
            e = this._getContextKey(t);
        }
        if (this._contextKey !== e) {
            this._refHandle = undefined;
            this._invalidateHandleRequests("An element attribute was changed and the handle request has been cancelled");
        }
        this._contextKey = e;
        super._invalidateProps();
    }
    static get observedAttributes() {
        return [ ...super.observedAttributes, "url", "reporturi", "authenticationtype", "packageuri", "popoverrootid", "restrictviewportgestures" ];
    }
    attributeChangedCallback(e, t, o) {
        super.attributeChangedCallback(e, t, o);
        if (e === "authenticationType" && this.hasAttribute("authenticationType") && !Ro(o)) {
            console.warn(`Invalid AuthenticationType: ${o}`);
        }
    }
    connectedCallback() {
        Io(this, (() => {
            if (this._initialized) {
                return;
            }
            this._initialized = true;
            this._initializeWithImports();
        }));
        super.connectedCallback();
    }
    disconnectedCallback() {
        if (!this.preserveStateOnUnmount) {
            this._invalidateHandleRequests("The element was removed from the DOM and the handle request has been cancelled");
        }
        if (this._stateRetained) {
            _o(this);
        }
        super.disconnectedCallback();
    }
    _initializeWithImports() {
        super._invalidateProps();
        const e = this._stateRetained;
        this._stateRetained = false;
        this.preserveStateOnUnmount = e;
    }
    get preserveStateOnUnmount() {
        return this._stateRetained;
    }
    set preserveStateOnUnmount(e) {
        if (this._stateRetained === !!e) {
            return;
        }
        if (!this._stateRetained && !this._getConnected()) {
            _o(this);
        }
        const {extendStoreLifetime: t, releaseStoreLifetime: o} = this._getDynamicImports() ?? {};
        this._stateRetained = !!e;
        if (this._stateRetained) {
            t?.(this._elementKey);
        } else {
            o?.(this._elementKey);
            if (!this._getConnected()) {
                this._invalidateHandleRequests("preserveStateOnUnmount was set to false while the element was removed from the DOM");
            }
        }
    }
    _getDynamicImports() {
        const e = Co();
        if (e?.type === "dynamic") {
            return e;
        }
        return;
    }
    getCommonProps() {
        if (!this._refHandle) {
            this._refHandle = e => this._setRef(e);
        }
        const e = {
            elementKey: this._elementKey,
            ref: this._refHandle,
            menuItemProvider: this._menuItemProvider,
            popoverRootId: this.popoverRootId ?? undefined,
            restrictViewportGestures: this.restrictViewportGestures
        };
        if (this.reportUri && this.url) {
            return {
                ...e,
                authenticationType: this.authenticationType,
                reportUri: this.reportUri,
                url: this.url
            };
        } else if (this.packageUri) {
            return {
                ...e,
                packageUri: this.packageUri
            };
        }
        return null;
    }
    get url() {
        return this.getAttribute("url");
    }
    set url(e) {
        if (e && typeof e === "string") {
            this.setAttribute("url", e);
        } else {
            this.removeAttribute("url");
        }
    }
    get packageUri() {
        return this.getAttribute("packageUri");
    }
    set packageUri(e) {
        if (e && typeof e === "string") {
            this.setAttribute("packageUri", e);
        } else {
            this.removeAttribute("packageUri");
        }
    }
    get reportUri() {
        return this.getAttribute("reportUri");
    }
    set reportUri(e) {
        if (e && typeof e === "string") {
            this.setAttribute("reportUri", e);
        } else {
            this.removeAttribute("reportUri");
        }
    }
    get authenticationType() {
        return Ro(this.getAttribute("authenticationType")) || "credentials";
    }
    set authenticationType(e) {
        if (e) {
            if (typeof e !== "string" || !Ro(e)) {
                console.warn(`Invalid AuthenticationType: ${e}`);
                this.removeAttribute("authenticationType");
            } else {
                this.setAttribute("authenticationType", e.toLowerCase());
            }
        } else {
            this.removeAttribute("authenticationType");
        }
    }
    get popoverRootId() {
        return this.getAttribute("popoverRootId");
    }
    set popoverRootId(e) {
        if (e && typeof e === "string") {
            this.setAttribute("popoverRootId", e);
        } else {
            this.removeAttribute("popoverRootId");
        }
    }
    get restrictViewportGestures() {
        const e = this.getAttribute("restrictViewportGestures");
        if (!e) {
            return undefined;
        }
        const t = e.toLowerCase();
        if (t === "true") {
            return true;
        } else if (t === "false") {
            return false;
        }
        return undefined;
    }
    set restrictViewportGestures(e) {
        if (typeof e === "boolean") {
            this.setAttribute("restrictViewportGestures", e.toString());
            return;
        } else if (!e) {
            this.removeAttribute("restrictViewportGestures");
        } else {
            console.warn(`Invalid value for restrictViewportGestures: ${e}`);
            this.removeAttribute("restrictViewportGestures");
        }
    }
    _resetElementKey() {
        this._invalidateProps();
        const e = this._elementKey;
        this._elementKey = Lo();
        if (this._stateRetained) {
            const t = this._getDynamicImports();
            t?.extendStoreLifetime?.(this._elementKey);
            setTimeout((() => t?.releaseStoreLifetime?.(e)), 0);
        }
    }
    set menuItemProvider(e) {
        e = e ?? undefined;
        if (e === this._menuItemProvider) {
            return;
        }
        this._invalidateProps();
        this._menuItemProvider = e;
    }
    get menuItemProvider() {
        return this._menuItemProvider;
    }
}

function Ao(e) {
    if (e && typeof e === "string") {
        const t = e.toLocaleLowerCase();
        return [ "true", "false", "auto" ].indexOf(t) > -1;
    }
    return true;
}

class Mo extends ko {
    constructor(...e) {
        super(...e);
        this._graphCSS = void 0;
        this._themeOverrides = null;
        this._unprocessedOverrides = void 0;
    }
    _getRenderer() {
        return Co()?.SASReport;
    }
    static get observedAttributes() {
        return [ ...super.observedAttributes, "hidenavigation" ];
    }
    attributeChangedCallback(e, t, o) {
        super.attributeChangedCallback(e, t, o);
        if (e === "hideNavigation" && this.hasAttribute("hideNavigation") && !Ao(o)) {
            console.warn(`Invalid value for hideNavigation: ${o}`);
        }
    }
    _initializeWithImports() {
        super._initializeWithImports();
        if (this._unprocessedOverrides) {
            this.unsafe_setCustomReportTheme(this._unprocessedOverrides);
            this._unprocessedOverrides = undefined;
        }
    }
    getRenderProps() {
        const e = this.getCommonProps();
        return e && {
            ...e,
            hideNavigation: this.hideNavigation,
            themeOverrides: this._themeOverrides || undefined,
            graphCSS: this._graphCSS
        };
    }
    get hideNavigation() {
        if (!this.hasAttribute("hideNavigation")) return "auto";
        const e = this.getAttribute("hideNavigation");
        if (typeof e === "string") {
            switch (e.toLocaleLowerCase()) {
              case "true":
              case "":
                return true;

              case "false":
                return false;

              case "auto":
              default:
                return "auto";
            }
        }
        return true;
    }
    set hideNavigation(e) {
        if (typeof e === "string") {
            if (!Ao(e)) {
                console.warn(`Invalid value for hideNavigation: ${e}`);
                this.removeAttribute("hideNavigation");
            } else {
                this.setAttribute("hideNavigation", e);
            }
        } else if (typeof e === "boolean") {
            this.setAttribute("hideNavigation", e.toString());
            return;
        } else if (!e) {
            this.removeAttribute("hideNavigation");
        } else {
            console.warn(`Invalid value for hideNavigation: ${e}`);
            this.removeAttribute("hideNavigation");
        }
    }
    unsafe_setCustomReportTheme(e) {
        const t = Co();
        if (!t) {
            this._unprocessedOverrides = e;
            return;
        }
        if (t.type === "mobile") {
            console.error("customReportThemes not supported in this render mode.");
            return;
        }
        let o;
        if (typeof e === "object" && e !== null) {
            const n = e;
            const a = {
                baseThemeId: "light",
                styleData: {}
            };
            if (typeof n.baseThemeId === "string") {
                a.baseThemeId = n.baseThemeId;
            } else {
                console.error("Objects passed to unsafe_setCustomReportTheme must have a string for the baseThemeId property");
            }
            if (typeof n.styleData === "object" && n.styleData !== null) {
                a.styleData = n.styleData;
            } else {
                console.error("Objects passed to unsafe_setCustomReportTheme must have an object for the styleData property");
            }
            o = t.convertThemeServiceResponseToThemeParameterOverrides(a);
        } else if (e === null || e === undefined) {
            o = null;
        } else {
            o = null;
            console.error("Invalid value passed to unsafe_setCustomReportTheme: " + e);
        }
        if (this._themeOverrides === o) {
            return;
        }
        this._themeOverrides = o;
        this._invalidateProps();
    }
    unsafe_setGraphCSS(e) {
        let t;
        if (typeof e === "string") {
            t = e;
        } else if (e === null || e === undefined) {
            t = undefined;
        } else {
            t = undefined;
            console.error("Invalid value passed to unsafe_setGraphCSS: " + e);
        }
        if (this._graphCSS === t) {
            return;
        }
        this._graphCSS = t;
        this._resetElementKey();
        this._invalidateProps();
    }
}

function No(e) {
    if (e && typeof e === "string") {
        const t = e.toLocaleLowerCase();
        return [ "true", "false" ].indexOf(t) > -1;
    }
    return true;
}

class Oo extends ko {
    constructor(...e) {
        super(...e);
        this._objectHandlePromise = void 0;
        this._rejectObjectHandleCallback = void 0;
    }
    _getRenderer() {
        return Co()?.SASReportObject;
    }
    static get observedAttributes() {
        return [ ...super.observedAttributes, "objectname", "reportcontextkey", "hideloadimage" ];
    }
    _getContextKey(e) {
        return "url" in e ? `${e.url}:${e.reportUri}:${e.reportContextKey}:${e.objectName}` : `${e.packageUri}:${e.reportContextKey}:${e.objectName}`;
    }
    getRenderProps() {
        const e = this.getCommonProps();
        if (e && this.objectName) {
            return {
                ...e,
                objectName: this.objectName,
                reportContextKey: this.reportContextKey,
                hideLoadImage: this.hideLoadImage
            };
        } else {
            return null;
        }
    }
    get objectName() {
        return this.getAttribute("objectName");
    }
    set objectName(e) {
        if (e && typeof e === "string") {
            this.setAttribute("objectName", e);
        } else {
            this.removeAttribute("objectName");
        }
    }
    get reportContextKey() {
        return this.getAttribute("reportContextKey") || undefined;
    }
    set reportContextKey(e) {
        if (e && typeof e === "string") {
            this.setAttribute("reportContextKey", e);
        } else {
            this.removeAttribute("reportContextKey");
        }
    }
    get hideLoadImage() {
        if (!this.hasAttribute("hideLoadImage")) return false;
        const e = this.getAttribute("hideLoadImage");
        if (typeof e === "string") {
            switch (e.toLocaleLowerCase()) {
              case "true":
              case "":
                return true;

              case "false":
                return false;

              default:
                return false;
            }
        }
        return true;
    }
    set hideLoadImage(e) {
        if (typeof e === "string") {
            if (!No(e)) {
                console.warn(`Invalid value for hideLoadImage: ${e}`);
                this.removeAttribute("hideLoadImage");
            } else {
                this.setAttribute("hideLoadImage", e);
            }
        } else if (typeof e === "boolean") {
            this.setAttribute("hideLoadImage", e.toString());
            return;
        } else if (!e) {
            this.removeAttribute("hideLoadImage");
        } else {
            console.warn(`Invalid value for hideLoadImage: ${e}`);
            this.removeAttribute("hideLoadImage");
        }
    }
    _invalidateHandleRequests(e) {
        super._invalidateHandleRequests(e);
        this._rejectObjectHandleCallback?.(e);
        this._rejectObjectHandleCallback = undefined;
        this._objectHandlePromise = undefined;
    }
    getObjectHandle() {
        const e = this.objectName;
        if (!e) {
            return Promise.reject("Cannot get an ObjectHandle before setting objectName");
        }
        if (!this._objectHandlePromise) {
            this._objectHandlePromise = Promise.race([ this.getReportHandle().then((t => t.getObjectHandle(e))), new Promise(((e, t) => {
                this._rejectObjectHandleCallback = t;
            })) ]);
        }
        return this._objectHandlePromise;
    }
}

class Po extends ko {
    _getRenderer() {
        return Co()?.SASReportPage;
    }
    static get observedAttributes() {
        return [ ...super.observedAttributes, "pagename", "pageindex", "reportcontextkey" ];
    }
    _getContextKey(e) {
        if (!e.reportContextKey) {
            return super._getContextKey(e);
        }
        return "url" in e ? `${e.url}:${e.reportUri}:${e.reportContextKey}` : `${e.packageUri}:${e.reportContextKey}`;
    }
    getRenderProps() {
        const e = this.getCommonProps();
        if (!e) {
            return null;
        }
        const t = this.pageIndex;
        if (this.pageName) {
            return {
                ...e,
                pageName: this.pageName,
                reportContextKey: this.reportContextKey
            };
        } else if (t !== null) {
            return {
                ...e,
                pageIndex: t,
                reportContextKey: this.reportContextKey
            };
        }
        return null;
    }
    get pageName() {
        return this.getAttribute("pageName");
    }
    set pageName(e) {
        if (e && typeof e === "string") {
            this.setAttribute("pageName", e);
        } else {
            this.removeAttribute("pageName");
        }
    }
    get pageIndex() {
        const e = this.getAttribute("pageIndex");
        return Bo(e);
    }
    set pageIndex(e) {
        const t = Bo(e);
        if (t !== null) {
            this.setAttribute("pageIndex", t.toString());
        } else {
            this.removeAttribute("pageIndex");
        }
    }
    get reportContextKey() {
        return this.getAttribute("reportContextKey") || undefined;
    }
    set reportContextKey(e) {
        if (e && typeof e === "string") {
            this.setAttribute("reportContextKey", e);
        } else {
            this.removeAttribute("reportContextKey");
        }
    }
}

function Bo(e) {
    if (typeof e === "string" && /^\d+$/.test(e)) {
        return Number(e);
    } else if (typeof e === "number" && e >= 0 && Number.isSafeInteger(e)) {
        return Math.abs(e);
    } else {
        return null;
    }
}

function zo(e) {
    Eo(e);
    if (!customElements.get("sas-report")) {
        customElements.define("sas-report", Mo);
    }
    if (!customElements.get("sas-report-object")) {
        customElements.define("sas-report-object", Oo);
    }
    if (!customElements.get("sas-report-page")) {
        customElements.define("sas-report-page", Po);
    }
}

function Fo() {
    Fo = Object.assign ? Object.assign.bind() : function(e) {
        for (var t = 1; t < arguments.length; t++) {
            var o = arguments[t];
            for (var n in o) {
                if (Object.prototype.hasOwnProperty.call(o, n)) {
                    e[n] = o[n];
                }
            }
        }
        return e;
    };
    return Fo.apply(this, arguments);
}

function jo(e, t, o, n) {
    if (!o) return;
    Object.defineProperty(e, t, {
        enumerable: o.enumerable,
        configurable: o.configurable,
        writable: o.writable,
        value: o.initializer ? o.initializer.call(n) : void 0
    });
}

function Vo(e, t, o, n, a) {
    var r = {};
    Object.keys(n).forEach((function(e) {
        r[e] = n[e];
    }));
    r.enumerable = !!r.enumerable;
    r.configurable = !!r.configurable;
    if ("value" in r || r.initializer) {
        r.writable = true;
    }
    r = o.slice().reverse().reduce((function(o, n) {
        return n(e, t, o) || o;
    }), r);
    if (a && r.initializer !== void 0) {
        r.value = r.initializer ? r.initializer.call(a) : void 0;
        r.initializer = undefined;
    }
    if (r.initializer === void 0) {
        Object.defineProperty(e, t, r);
        r = null;
    }
    return r;
}

var Ho = globalThis;

Ho.sas = Ho.sas || {};

sas.ltjs = sas.ltjs || {};

sas.ltjslib = sas.ltjslib || {};

sas.ltjslib.ltjs = sas.ltjslib.ltjs || {};

var Uo = sas.ltjs;

var Go = sas.ltjslib.ltjs;

var Ko = /sas\/ltjs\/([^\/]+).*\/([^\/]+)/;

function Wo(e) {
    var t = e.match(Ko);
    if (t && t.length === 3) {
        var o = t[1];
        var n = t[2];
        return "".concat(o, "::").concat(n);
    }
    throw new Error("Unexpected LTJS module path structure: ".concat(e));
}

var $o = function() {
    function e() {
        this._typeMap = new Map;
        this._moduleMap = new Map;
    }
    e.prototype.initFromModuleTypeMap = function(e) {
        var t = e.length;
        for (var o = 0; o < t; o++) {
            var n = e[o];
            if (n) {
                var a = n[0], r = n[1];
                var s = Wo(a);
                this._typeMap.set(o, {
                    typeId: o,
                    moduleName: s,
                    modulePath: a,
                    parentTypeId: r
                });
            }
        }
    };
    e.prototype.getTypeEntry = function(e) {
        return this._typeMap.get(e);
    };
    e.prototype.addClassToModuleMap = function(e, t) {
        this._moduleMap.set(e, t);
    };
    e.prototype.getModuleByName = function(e) {
        return this._moduleMap.get(e);
    };
    return e;
}();

var Yo = [ 1, 2, 4, 8, 16, 32, 64, 128 ];

function qo(e) {
    if (e) {
        for (var t = 0, o = e.length; t < o; t++) {
            e[t] = e[t] >>> 0;
        }
    }
    return e;
}

function Xo(e) {
    if (e) {
        for (var t = 0, o = e.length; t < o; t++) {
            e[t] = !!e[t];
        }
    }
    return e;
}

var Zo = function() {
    function e(e) {
        var t = this;
        this.wasmCrashed = false;
        this.abortCallbacks = [];
        this._module = e;
        this.runtime.onAborts.push(this.onAbort.bind(this));
        if (!this._module.onAbort) {
            this._module.onAbort = function() {
                for (var e = 0, o = t.runtime.onAborts; e < o.length; e++) {
                    var n = o[e];
                    n();
                }
            };
        }
    }
    Object.defineProperty(e.prototype, "runtime", {
        get: function() {
            if (!this.module._ltjsRuntime) {
                var e = {
                    ltjsInitialized: false,
                    wrappersInitialized: false,
                    wrapperInitFunctions: [],
                    platformInitialized: false,
                    onPlatformInitialized: [],
                    onReadyFunctions: [],
                    initializeWrappers: function() {
                        e.wrappersInitialized = true;
                        for (var t = 0, o = e.wrapperInitFunctions; t < o.length; t++) {
                            var n = o[t];
                            n();
                        }
                        e.wrapperInitFunctions.length = 0;
                    },
                    executeRunWhenInitializedCallbacks: function() {
                        e.ltjsInitialized = true;
                        for (var t = 0, o = e.onReadyFunctions; t < o.length; t++) {
                            var n = o[t];
                            n();
                        }
                        e.onReadyFunctions.length = 0;
                    },
                    onAborts: [],
                    typeMapAvailable: false,
                    typeMapInitializers: [],
                    initializedTypemap: function() {
                        e.typeMapAvailable = true;
                        for (var t = 0, o = e.typeMapInitializers; t < o.length; t++) {
                            var n = o[t];
                            n();
                        }
                        e.typeMapInitializers = [];
                    },
                    activeVisualizationManagers: new Set,
                    themeOverrideCallbacks: new Set,
                    dispatchBridgeMap: new Map
                };
                this.module._ltjsRuntime = e;
            }
            return this.module._ltjsRuntime;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(e.prototype, "module", {
        get: function() {
            return this._module;
        },
        enumerable: false,
        configurable: true
    });
    e.prototype.onAbort = function() {
        this.wasmCrashed = true;
        for (var e = 0, t = this.abortCallbacks; e < t.length; e++) {
            var o = t[e];
            o();
        }
        this.abortCallbacks = [];
    };
    e.prototype.addAbortCallback = function(e) {
        if (this.wasmCrashed) {
            e();
        } else {
            this.abortCallbacks.push(e);
        }
    };
    e.prototype.removeAbortCallback = function(e) {
        this.abortCallbacks = this.abortCallbacks.filter((function(t) {
            return t !== e;
        }));
    };
    Object.defineProperty(e.prototype, "exports", {
        get: function() {
            return this._module.exports;
        },
        enumerable: false,
        configurable: true
    });
    e.prototype.getStringContentsOfFile = function(e) {
        return this._module.getStringContentsOfFile(e);
    };
    e.prototype.writeNLSBundleToFS = function(e, t) {
        return this._module.writeNLSBundleToFS(e, t);
    };
    e.prototype.setInstantiateWasmCallback = function(e) {
        this._module.instantiateWasm = e;
    };
    e.prototype.setMemoryInitializerRequest = function(e) {
        this._module.memoryInitializerRequest = e;
    };
    e.prototype.setUseAsm = function() {
        this._module.wasmJSMethod = "asmjs";
    };
    e.prototype.removeBlockingDependency = function(e) {
        if (this._module.removeBlockingDependency) {
            this._module.removeBlockingDependency(e);
        }
    };
    Object.defineProperty(e.prototype, "deps", {
        set: function(e) {
            this._module.deps = e;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(e.prototype, "libraryLoadingCompleted", {
        set: function(e) {
            this._module.libraryLoadingCompleted = e;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(e.prototype, "onRuntimeInitialized", {
        set: function(e) {
            this._module.onRuntimeInitialized = e;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(e.prototype, "ltjsRuntimeInitialized", {
        set: function(e) {
            this._module.ltjsRuntimeInitialized = e;
        },
        enumerable: false,
        configurable: true
    });
    e.prototype.setIsShuttingDown = function(e) {
        if (this._module.setIsShuttingDown) {
            this._module.setIsShuttingDown(e);
        }
    };
    e.prototype.getTypeId = function(e) {
        return this._module._ltjs_commons_Closet_getTypeID(e);
    };
    e.prototype.commitStagedObject = function(e) {
        return this._module._ltjs_commons_Closet_commitStagedObject(e);
    };
    e.prototype.discardStagedObject = function(e) {
        this._module._ltjs_commons_Closet_discardStagedObject(e);
    };
    e.prototype.getStagedVectorSize = function(e) {
        return this._module._ltjs_commons_Closet_getStagedVectorSize(e);
    };
    e.prototype.stageObjectAt = function(e) {
        return this._module._ltjs_commons_Closet_stageObjectAt(e);
    };
    e.prototype.discardStagedVector = function(e) {
        this._module._ltjs_commons_Closet_discardStagedVector(e);
    };
    e.prototype._copyValuesIntoCloset = function(e, t, o, n, a) {
        if (a === void 0) {
            a = false;
        }
        if (!e || !o || !n) {
            return 0;
        }
        var r = e.length;
        var s = this._module._malloc(r * t);
        if (a) {
            for (var i = 0; i < r; ++i) {
                var l = NaN;
                var c = e[i];
                if (typeof c === "number") {
                    l = c;
                } else if (!isNaN(c)) {
                    var d = parseFloat(c);
                    if (!isNaN(d)) {
                        l = d;
                    }
                }
                this._module.setValue(s + i * t, l, o);
            }
        } else {
            for (var i = 0; i < r; ++i) {
                this._module.setValue(s + i * t, e[i], o);
            }
        }
        var u = n(r, s);
        this._module._free(s);
        return u;
    };
    e.prototype._copyValuesFromCloset = function(e, t, o, n) {
        if (n === 0) {
            return [];
        }
        if (!t || e <= 0 || o === 0 || n < 0) {
            return null;
        }
        var a = [];
        for (var r = 0; r < n; ++r) {
            a[r] = this._module.getValue(o + r * e, t);
        }
        return a;
    };
    e.prototype.convertStringToC = function(e) {
        if (typeof e !== "string") {
            return 0;
        }
        var t = this._module.stringToNewUTF8(e);
        var o = this._module._ltjs_commons_Closet_createString(t);
        this._module._free(t);
        return o;
    };
    e.prototype.convertStringFromC = function(e) {
        if (!e) {
            return null;
        }
        var t = this._module._ltjs_commons_Closet_getCString(e);
        return this._module.UTF8ToString(t);
    };
    e.prototype.convertStringArrayToC = function(e) {
        if (!e) {
            return 0;
        }
        var t = [];
        for (var o = 0, n = e.length; o < n; ++o) {
            var a = this.convertStringToC(e[o]);
            if (a < 0) {
                console.error("Conversion error for: " + e[o]);
            }
            t[o] = a;
        }
        return this.convertIntArrayToC(t);
    };
    e.prototype.convertStringArrayFromC = function(e) {
        var t = this.convertIntArrayFromC(e);
        if (!t) {
            return null;
        }
        var o = [];
        var n = t ? t.length : 0;
        for (var a = 0; a < n; ++a) {
            o[a] = this.convertStringFromC(t[a]);
        }
        this._module._ltjs_commons_Closet_releaseAllPrimitives(e);
        return o;
    };
    e.prototype.convertIntArrayToC = function(e) {
        if (!e) {
            return 0;
        }
        return this._copyValuesIntoCloset(e, 4, "i32", this._module._ltjs_commons_Closet_createIntVector, true);
    };
    e.prototype.convertIntArrayFromC = function(e) {
        if (!e) {
            return null;
        }
        return this._copyValuesFromCloset(4, "i32", this._module._ltjs_commons_Closet_getAddressOfIntVector(e), this._module._ltjs_commons_Closet_getSizeOfIntVector(e));
    };
    e.prototype.convertIntMVectorFromC = function(e) {
        if (!e) {
            return null;
        }
        return this._copyValuesFromCloset(4, "i32", this._module._ltjs_commons_Closet_getAddressOfIntMVector(e), this._module._ltjs_commons_Closet_getSizeOfIntMVector(e));
    };
    e.prototype.convertUnsignedArrayToC = function(e) {
        if (!e) {
            return 0;
        }
        return this._copyValuesIntoCloset(e, 4, "i32", this._module._ltjs_commons_Closet_createUnsignedVector, true);
    };
    e.prototype.convertUnsignedArrayFromC = function(e) {
        if (!e) {
            return null;
        }
        return qo(this._copyValuesFromCloset(4, "i32", this._module._ltjs_commons_Closet_getAddressOfUnsignedVector(e), this._module._ltjs_commons_Closet_getSizeOfUnsignedVector(e)));
    };
    e.prototype.convertUnsignedMVectorFromC = function(e) {
        if (!e) {
            return null;
        }
        return qo(this._copyValuesFromCloset(4, "i32", this._module._ltjs_commons_Closet_getAddressOfUnsignedMVector(e), this._module._ltjs_commons_Closet_getSizeOfUnsignedMVector(e)));
    };
    e.prototype.convertDoubleArrayToC = function(e) {
        if (!e) {
            return 0;
        }
        return this._copyValuesIntoCloset(e, 8, "double", this._module._ltjs_commons_Closet_createDoubleVector, true);
    };
    e.prototype.convertDoubleArrayFromC = function(e) {
        if (!e) {
            return null;
        }
        return this._copyValuesFromCloset(8, "double", this._module._ltjs_commons_Closet_getAddressOfDoubleVector(e), this._module._ltjs_commons_Closet_getSizeOfDoubleVector(e));
    };
    e.prototype.convertDoubleMVectorFromC = function(e) {
        if (!e) {
            return null;
        }
        return this._copyValuesFromCloset(8, "double", this._module._ltjs_commons_Closet_getAddressOfDoubleMVector(e), this._module._ltjs_commons_Closet_getSizeOfDoubleMVector(e));
    };
    e.prototype.convertFloatArrayToC = function(e) {
        if (!e) {
            return 0;
        }
        return this._copyValuesIntoCloset(e, 4, "float", this._module._ltjs_commons_Closet_createFloatVector, true);
    };
    e.prototype.convertFloatArrayFromC = function(e) {
        if (!e) {
            return null;
        }
        return this._copyValuesFromCloset(4, "float", this._module._ltjs_commons_Closet_getAddressOfFloatVector(e), this._module._ltjs_commons_Closet_getSizeOfFloatVector(e));
    };
    e.prototype.convertFloatMVectorFromC = function(e) {
        if (!e) {
            return null;
        }
        return this._copyValuesFromCloset(4, "float", this._module._ltjs_commons_Closet_getAddressOfFloatMVector(e), this._module._ltjs_commons_Closet_getSizeOfFloatMVector(e));
    };
    e.prototype.convertBoolArrayToC = function(e) {
        e = Xo(e);
        if (!e) {
            return 0;
        }
        return this._copyValuesIntoCloset(e, 1, "i8", this._module._ltjs_commons_Closet_createBoolVector);
    };
    e.prototype.convertBoolArrayFromC = function(e) {
        if (!e) {
            return null;
        }
        var t = this._module._ltjs_commons_Closet_getBoolVectorAsBitset(e);
        var o = this._module._ltjs_commons_Closet_getAddressOfBitset(t);
        var n = this._module._ltjs_commons_PrimitiveCloset_getSizeOfBoolVector(e);
        var a = this.convertBitsetToBoolArray(o, n);
        this._module._ltjs_commons_Closet_releasePrimitive(t);
        return a;
    };
    e.prototype.convertBoolMVectorFromC = function(e) {
        if (!e) {
            return null;
        }
        var t = this._module._ltjs_commons_Closet_getBoolMVectorAsBitset(e);
        var o = this._module._ltjs_commons_Closet_getAddressOfBitset(t);
        var n = this._module._ltjs_commons_PrimitiveCloset_getSizeOfBoolMVector(e);
        var a = this.convertBitsetToBoolArray(o, n);
        this._module._ltjs_commons_Closet_releasePrimitive(t);
        return a;
    };
    e.prototype.convertBitsetToBoolArray = function(e, t) {
        if (t === 0) {
            return [];
        }
        var o = this._module.HEAP8;
        if (!o || e === 0 || t < 0) {
            return null;
        }
        var n = [];
        for (var a = 0; a < t; ++a) {
            var r = o[e + Math.floor(a / 8)];
            n[a] = !!(r & Yo[a % 8]);
        }
        return n;
    };
    e.prototype.convertObjectToC = function(e) {
        return e ? e.getClosetAddress() : 0;
    };
    e.prototype.convertObjectArrayToC = function(e) {
        if (!e) {
            return 0;
        }
        var t = [];
        for (var o = 0, n = e.length; o < n; ++o) {
            t[o] = this.convertObjectToC(e[o]);
        }
        return this.convertIntArrayToC(t);
    };
    e.prototype.convertGeometryArrayFromC = function(e) {
        var t = this.convertIntArrayFromC(e);
        if (!t) {
            return null;
        }
        var o = [];
        for (var n = 0, a = t.length; n < a; ++n) {
            o[n] = this.convertFloatArrayFromC(t[n]);
        }
        this.releaseAllPrimitives(e);
        return o;
    };
    e.prototype.convertGeometryArrayToC = function(e) {
        if (!e) {
            return 0;
        }
        var t = [];
        for (var o = 0, n = e.length; o < n; ++o) {
            t[o] = this.convertFloatArrayToC(e[o]);
        }
        return this.convertIntArrayToC(t);
    };
    e.prototype.getWrappableClosetSize = function() {
        return this._module._ltjs_commons_Closet_getWrappableClosetSize();
    };
    e.prototype.getPrimitiveClosetSize = function() {
        return this._module._ltjs_commons_Closet_getPrimitiveClosetSize();
    };
    e.prototype.releaseWrappable = function(e) {
        this._module._ltjs_commons_Closet_releaseWrappable(e);
    };
    e.prototype.releasePrimitive = function(e) {
        this._module._ltjs_commons_Closet_releasePrimitive(e);
    };
    e.prototype.releaseAllPrimitives = function(e) {
        this._module._ltjs_commons_Closet_releaseAllPrimitives(e);
    };
    e.prototype.releaseAllWrappables = function(e) {
        var t = this.convertIntArrayToC(e);
        this._module._ltjs_commons_Closet_releaseAllWrappables(t);
    };
    e.prototype.getClosetKey = function(e) {
        return this._module._ltjs_commons_Closet_getAddress(e);
    };
    e.prototype.closetObjectsEqual = function(e, t) {
        return this._module._ltjs_commons_Closet_equals(e, t);
    };
    return e;
}();

var Jo = new Zo(Go);

var Qo = Jo;

var en = [];

var tn;

var on = 0;

var nn = [];

var an = new Map;

var rn = new $o;

if (Qo.runtime.typeMapAvailable) {
    rn.initFromModuleTypeMap(Go.typeMap);
} else {
    Qo.runtime.typeMapInitializers.push((function() {
        rn.initFromModuleTypeMap(Go.typeMap);
    }));
}

function sn() {
    on--;
    if (on <= 0) {
        Jo.runtime.executeRunWhenInitializedCallbacks();
    }
}

function ln() {
    Jo.runtime.initializeWrappers();
    var e = nn.concat(Jo.runtime.onPlatformInitialized);
    Jo.runtime.platformInitialized = true;
    Jo.runtime.onPlatformInitialized = [];
    nn.length = 0;
    on = e.length;
    for (var t = 0, o = e; t < o.length; t++) {
        var n = o[t];
        n(sn);
    }
    if (on <= 0) {
        Jo.runtime.executeRunWhenInitializedCallbacks();
    }
}

function cn() {
    if (!dn()) {
        return;
    }
    if (Jo.removeBlockingDependency) {
        Jo.removeBlockingDependency("librariesLoaded");
    }
    Jo.libraryLoadingCompleted = true;
}

function dn() {
    var e = sas.ltjs.loaderRuntime;
    var t = sas.ltjs.runtime;
    return !e || t === e;
}

function un(e, t) {
    if (e && en.indexOf(e) < 0) {
        en.push(e);
    }
    if (sas.ltjs.registerDependency) {
        sas.ltjs.registerDependency(e);
    }
    an.set(e, t);
}

function mn() {
    return en;
}

function pn() {
    var e = [];
    for (var t = 0, o = en; t < o.length; t++) {
        var n = o[t];
        var a = an.get(n);
        if (a) {
            e = e.concat(a);
        }
    }
    return e;
}

function fn(e) {
    if (hn()) {
        e();
    } else {
        Jo.runtime.onReadyFunctions.push(e);
    }
}

function gn() {
    if (hn()) {
        return Promise.resolve();
    } else {
        if (!tn) {
            tn = new Promise((function(e) {
                Jo.runtime.onReadyFunctions.push(e);
            }));
        }
        return tn;
    }
}

function hn() {
    return Jo.runtime.ltjsInitialized || bn();
}

function bn() {
    return !!sas.ltjs.jest && sas.ltjs.jest.isInitialized;
}

function vn(e, t) {
    if (t === void 0) {
        t = false;
    }
    if (Jo.runtime.platformInitialized || bn()) {
        e();
    } else if (t) {
        nn.push(e);
    } else {
        Jo.runtime.onPlatformInitialized.push(e);
    }
}

function yn(e) {
    if (Jo.runtime.wrappersInitialized || bn()) {
        e();
    } else {
        Jo.runtime.wrapperInitFunctions.push(e);
    }
}

function xn(e) {
    var t = rn.getModuleByName(e);
    if (t === undefined) {
        throw new Error("Module is not defined for name: ".concat(e));
    }
    return t;
}

function Sn(e, t) {
    if (t && t.default) {
        return t.default;
    }
    return xn(e);
}

function wn(e) {
    return function(e) {
        I(t, e);
        function t() {
            return e !== null && e.apply(this, arguments) || this;
        }
        return t;
    }(e);
}

function Cn(e, t) {
    var o = rn.getModuleByName(e);
    if (!o) {
        o = wn(t);
        rn.addClassToModuleMap(e, o);
    }
    return o;
}

function En(e, t, o) {
    var n = o;
    for (var a = 0, r = t; a < r.length; a++) {
        var s = r[a];
        n = Cn(s, n);
    }
    return Cn(e, n);
}

function In() {
    rn.initFromModuleTypeMap(Go.typeMap);
}

var _n = Object.freeze({
    __proto__: null,
    _ltjsModule: Qo,
    createModule: En,
    currentRuntimeIsLoaderRuntime: dn,
    getRegisteredModules: mn,
    getRegisteredPortablePackages: pn,
    initialize: ln,
    initializeWrapper: yn,
    isInitialized: hn,
    ltjsModule: Jo,
    moduleLookup: xn,
    moduleLookupAsDefault: Sn,
    registerModule: un,
    reinitializeTypemap: In,
    runWhenInitialized: fn,
    runWhenPlatformInitialized: vn,
    setupLtjsEnvironment: cn,
    typeMap: rn,
    whenInitialized: gn
});

function Dn(e) {
    if (!e) {
        return 0;
    }
    if (!Array.isArray(e)) {
        return e.getClosetAddress();
    }
    return e.map(Dn);
}

function Ln(e) {
    if (!e) {
        return 0;
    }
    if (!Array.isArray(e)) {
        return Jo.getClosetKey(e.getClosetAddress());
    }
    return e.map(Ln);
}

var Tn;

(function(e) {
    e[e["IE"] = 1] = "IE";
    e[e["EDGE"] = 2] = "EDGE";
    e[e["FIREFOX"] = 3] = "FIREFOX";
    e[e["CHROME"] = 4] = "CHROME";
    e[e["SAFARI"] = 5] = "SAFARI";
    e[e["UNKNOWN"] = 6] = "UNKNOWN";
})(Tn || (Tn = {}));

function Rn(e) {
    if (/Edge\/[\w\.]*/.test(e)) {
        return Tn.EDGE;
    } else if (/Chrome\/[\w\.]*/.test(e)) {
        return Tn.CHROME;
    } else if (/Firefox\/[\w\.]*/.test(e)) {
        return Tn.FIREFOX;
    } else if (/Safari\/[\w\.]*/.test(e)) {
        return Tn.SAFARI;
    } else if (/MSIE /.test(e) || /Trident\//.test(e)) {
        return Tn.IE;
    }
    return Tn.UNKNOWN;
}

var kn = null;

function An() {
    if (kn === null) {
        kn = Rn(window.navigator.userAgent);
    }
    return kn;
}

function Mn(e, t, o) {
    if (!e || e.length === 0) {
        return;
    }
    for (var n = 0, a = e.length; n < a; ++n) {
        e[n].apply(t, o);
    }
}

var Nn = function() {
    function e(t, o) {
        var n = this;
        this.callbacks = {};
        this.status = 0;
        var a;
        if (typeof t === "object") {
            a = t;
        } else {
            a = o || {};
            a.url = t;
        }
        var r = _({
            url: "",
            headers: null,
            data: null,
            dataType: "*",
            contentType: null,
            type: "GET",
            async: true
        }, a);
        if (r.contentType !== null) {
            r.headers = _(_({}, r.headers), {
                "Content-Type": r.contentType
            });
        }
        if (r.extraOptions && r.extraOptions.credentials === "omit") {
            fetch(r.url, {
                method: r.type,
                headers: r.headers || undefined,
                body: r.type !== "GET" ? r.data : undefined
            }).then((function(e) {
                return e.text().then((function(t) {
                    n.state = null;
                    n.status = e.status;
                    n.statusText = e.statusText;
                    n.data = t;
                    n.responseText = t;
                    n._responseHeaders = e.headers;
                    var o;
                    if (e.status === 200) {
                        n.state = "done";
                        o = [ t, e.statusText, n ];
                        Mn(n.callbacks.done, n, o);
                    } else {
                        n.state = "fail";
                        o = [ n, null, e.statusText ];
                        Mn(n.callbacks.fail, n, o);
                    }
                    Mn(n.callbacks.always, n, o);
                }));
            }));
            return;
        }
        var s = new XMLHttpRequest;
        this.xhr = s;
        s.onreadystatechange = function() {
            n.state = null;
            n.status = s.status;
            n.statusText = s.statusText;
            n.data = s.response;
            n.responseText = s.responseText;
            if (s.readyState === 4) {
                if (An() === Tn.EDGE && s.status === 0 && r.extraOptions && r.extraOptions.credentials === "include" && !r.extraOptions._ignoreFailedRequest) {
                    var t = new URL(r.url);
                    var o = t.origin + t.pathname.substr(0, t.pathname.indexOf("/", 1) + 1);
                    var a = new e(o, {
                        extraOptions: {
                            credentials: "include",
                            _ignoreFailedRequest: true
                        }
                    });
                    a.always((function() {
                        var t = new e(_(_({}, r), {
                            extraOptions: _(_({}, r.extraOptions), {
                                _ignoreFailedRequest: true
                            })
                        }));
                        t.callbacks = n.callbacks;
                    }));
                    return;
                }
                var i = void 0;
                if (s.status === 200) {
                    n.state = "done";
                    i = [ s.response, s.statusText, n ];
                    Mn(n.callbacks.done, n, i);
                } else {
                    n.state = "fail";
                    i = [ n, null, s.statusText ];
                    Mn(n.callbacks.fail, n, i);
                }
                Mn(n.callbacks.always, n, i);
                n.callbacks.args = i;
            }
        };
        if (r.async && r.dataType !== "*" && r.dataType !== "") {
            if (r.dataType === undefined || r.dataType === null) {
                s.responseType = "";
            } else {
                s.responseType = r.dataType;
            }
        }
        if (r.extraOptions && r.extraOptions.credentials === "include") {
            s.withCredentials = true;
        }
        s.open(r.type, r.url, r.async);
        if (r.headers) {
            for (var i in r.headers) {
                if (r.headers.hasOwnProperty(i)) {
                    s.setRequestHeader(i, r.headers[i]);
                }
            }
        }
        if (r.data !== null) {
            s.send(r.data);
        } else {
            s.send();
        }
        return this;
    }
    e.prototype.done = function(e) {
        if (this.state === "done") {
            e.apply(this, this.callbacks.args);
        } else {
            if (!this.callbacks.done) {
                this.callbacks.done = [];
            }
            this.callbacks.done.push(e);
        }
        return this;
    };
    e.prototype.fail = function(e) {
        if (this.state === "fail") {
            e.apply(this, this.callbacks.args);
        } else {
            if (!this.callbacks.fail) {
                this.callbacks.fail = [];
            }
            this.callbacks.fail.push(e);
        }
        return this;
    };
    e.prototype.always = function(e) {
        if (this.callbacks.args) {
            e.apply(this, this.callbacks.args);
        } else {
            if (!this.callbacks.always) {
                this.callbacks.always = [];
            }
            this.callbacks.always.push(e);
        }
        return this;
    };
    e.prototype.then = function() {
        return this.done.apply(this, arguments);
    };
    e.prototype.error = function() {
        return this.fail.apply(this, arguments);
    };
    e.prototype.getAllResponseHeaders = function() {
        if (this.xhr) {
            return this.xhr.getAllResponseHeaders();
        }
        if (this._responseHeaders) {
            var e = "";
            this._responseHeaders.forEach((function(t, o) {
                e += "".concat(o, ": ").concat(t, "\r\n");
            }));
            return e;
        }
        return "";
    };
    return e;
}();

var On = sas.ltjs.isOpenUI;

var Pn;

var Bn;

function zn(e) {
    if (Fn(e)) {
        if (On) {
            return sas.hc.ui.core.util.getProxyUrl(e, false);
        }
        return e;
    }
    if (e.startsWith("http://") || e.startsWith("https://")) {
        return e;
    }
    if (e.startsWith("./resources/")) {
        e = e.substring(12);
    } else if (e.startsWith("/resources/")) {
        e = e.substring(11);
    }
    if (e.startsWith("/")) {
        e = e.substring(1);
    }
    if (sas.ltjs.getResourceUrl) {
        var t = sas.ltjs.getResourceUrl(e);
        if (t) {
            return t;
        }
    }
    var o;
    if (On) {
        o = jQuery.sap.getResourcePath(e, "");
        if (e.endsWith("/") && !o.endsWith("/")) {
            o += "/";
        }
        return o;
    }
    if (!sas.ltjs.resourceUrl) {
        console.warn('sas.ltjs.resourceUrl not configured, defaulting to "/"');
        sas.ltjs.resourceUrl = "/";
    }
    return "".concat(sas.ltjs.resourceUrl).concat(sas.ltjs.resourceUrl.endsWith("/") ? "" : "/").concat(e);
}

function Fn(e) {
    if (sas.ltjs.node) {
        return false;
    }
    if (On) {
        return sas.hc.ui.core.util.isUrlCrossDomain(e);
    }
    if (!Pn) {
        Pn = document.createElement("a");
    }
    try {
        Pn.href = e;
    } catch (t) {
        console.warn("Failed to parse url: ", e);
        return true;
    }
    if (!Pn.protocol) {
        return false;
    }
    if (Pn.protocol !== location.protocol || Pn.hostname !== location.hostname) {
        return true;
    }
    var t = Pn.port === "80" || Pn.port === "443" ? "" : Pn.port;
    if (t !== null && t !== location.port || t === null && location.port !== "") {
        return true;
    }
    return false;
}

function jn(e, t) {
    if (!globalThis.location) {
        return t;
    }
    if (!Bn) {
        Bn = {};
        var o = globalThis.location.search.substring(1);
        var n = o.split("&");
        for (var a = 0; a < n.length; a++) {
            var r = n[a].split("=");
            Bn[r[0]] = decodeURIComponent(r[1]);
        }
    }
    var s = Bn[e];
    return s || t;
}

function Vn(e, t) {
    if (e) {
        e = e.toLowerCase();
        if (e === "true" || e === "yes" || e === "1") {
            t = true;
        } else if (e === "false" || e === "no" || e === "0") {
            t = false;
        }
    }
    return t;
}

function Hn(e, t) {
    var o = jn(e);
    return Vn(o, t);
}

var Un = Nn;

var Gn = sas.ltjs.isOpenUI;

var Kn = function() {
    function e() {
        var t = this;
        this.callbacks = [];
        setTimeout((function() {
            for (var o = 0, n = t.callbacks; o < n.length; o++) {
                var a = n[o];
                a(e.response);
            }
        }), 0);
    }
    e.prototype.always = function(e) {
        this.callbacks.push(e);
    };
    e.response = {
        status: 200,
        getAllResponseHeaders: function() {
            return "";
        },
        responseText: JSON.stringify({
            description: "__FAKE_DESCRIPTION__",
            id: "__FAKE_ID__",
            links: [],
            name: "__FAKE_NAME__",
            providerId: "__FAKE_PROVIDERID__",
            state: "active",
            version: 1
        })
    };
    return e;
}();

function Wn() {
    if (console.warn) {
        console.warn.apply(console, arguments);
    } else {
        console.log.apply(console, arguments);
    }
}

function $n(e, t) {
    if (Gn) {
        jQuery.sap.assert(e, t);
    } else if (globalThis.console) {
        if (console.assert) {
            console.assert(!!e, t);
        } else if (!e) {
            console.log(t);
        }
    }
}

function Yn(e) {
    if (!e && !sas.ltjs.node) {
        if (window.navigator.languages) {
            e = window.navigator.languages[0];
        } else if (window.navigator.language) {
            e = window.navigator.language;
        } else {
            e = window.navigator.userLanguage;
        }
    }
    if (!e || e === "en") {
        e = "en-US";
    }
    return e;
}

function qn(e) {
    e = Yn(e);
    var t = xn("commons::LanguageTag");
    return new t(e);
}

function Xn(e) {
    if (!hn()) {
        e = Yn(e);
        e = e.replace("_", "-");
        var t = e.split("-");
        var o = t[0].toLowerCase();
        var n = t.length > 1 ? "-" + t[1].toUpperCase() : "";
        var a = t.length > 2 ? "-" + t[2].toLowerCase() : "";
        if (n === "" && o === "en") {
            return "en-US";
        }
        if (n === "" && o === "zh") {
            return "zh-CN";
        }
        return o + n + a;
    } else {
        var r = qn(e);
        return r.asCanonicalString();
    }
}

function Zn(e) {
    var t = qn(e);
    if (t.isPseudo()) {
        return t.asCanonicalString();
    }
    return t.getSASLegacyLocale();
}

function Jn(e, t, o) {
    var n = xn("commons::ResourceManager");
    var a = n.getLocalizedString(e, t);
    if (a && o) {
        for (var r = 0, s = o.length; r < s; ++r) {
            a = a.replace("{".concat(r, "}"), o[r]);
        }
    }
    return a || t;
}

var Qn = null;

function ea(e) {
    Qn = e;
    var t = xn("commons::ResourceManager");
    t.setLocale(e);
}

function ta() {
    var e;
    if (!Qn) {
        if (Gn) {
            if (sas.registry && sas.registry.wip) {
                Qn = aa();
            } else {
                Qn = sap.ui.getCore().getConfiguration().getLanguageTag();
            }
        } else if (sas.ltjs.node) {
            Qn = (e = sas.ltjs.node.locale) !== null && e !== void 0 ? e : null;
        } else {
            Qn = jn("nova-language") || null;
        }
        Qn = Xn(Qn);
    }
    return Qn;
}

var oa = null;

function na(e) {
    oa = e;
    var t = xn("commons::ResourceManager");
    t.setFormatterLocale(e);
}

function aa() {
    var e;
    if (!oa) {
        if (Gn) {
            oa = sap.ui.getCore().getConfiguration().getFormatLocale();
        } else if (sas.ltjs.node) {
            oa = (e = sas.ltjs.node.formatLocale) !== null && e !== void 0 ? e : null;
        }
        oa = Xn(oa);
    }
    return oa;
}

function ra() {
    if (Gn) {
        var e = arguments[0];
        if (jn("sas-commons-configUrl")) {
            var t = e.url;
            if (t && t.indexOf("http://localhost") === 0) {
                e.crossOrigin = true;
                return jQuery.ajax(e);
            }
        }
        var o = !e.type || e.type.toLowerCase() === "get";
        var n = An();
        if ((n === Tn.IE || n === Tn.EDGE) && o) {
            e.cache = false;
        }
        return sas.ajax.apply(window, arguments);
    } else {
        var a = arguments[0];
        var r = arguments[1] || {};
        if (a instanceof Object && a.url && a.url.endsWith("/identities/users/@currentUser")) {
            return new Kn;
        }
        return new Un(a, r);
    }
}

function sa(e, t, o) {
    var n = new Image;
    if (Fn(e)) {
        n.crossOrigin = "anonymous";
    }
    if (e && e.indexOf("http://localhost") === 0) {
        n.crossOrigin = "";
    }
    if (o) {
        n.crossOrigin = "use-credentials";
    }
    for (var a in t) {
        if (t.hasOwnProperty(a)) {
            n[a] = t[a];
        }
    }
    n.src = e;
    return n;
}

var ia = false;

function la(e) {
    var t = {};
    if (sas.ltjs.forceCrossDomainAuthentication) {
        t.crossDomain = true;
        t.authenticate = true;
    } else if (!ia) {
        if (e.indexOf("getUserCapabilities") > -1) {
            t.crossDomain = true;
            t.authenticate = true;
            ia = true;
        }
    }
    return t;
}

function ca(e) {
    var t = e.attributes;
    if (t) {
        for (var o = t.length - 1; o >= 0; o -= 1) {
            var n = t[o].name;
            if (typeof e[n] === "function") {
                e[n] = null;
            }
        }
    }
    var a = e.childNodes;
    if (a) {
        var r = a.length;
        for (var o = 0; o < r; o += 1) {
            ca(a[o]);
        }
    }
}

var da = Hn("debugTrace", false);

var ua;

function ma(e) {
    if (!ua) {
        ua = new WeakMap;
    }
    var t = ua.get(e);
    if (!t) {
        t = {
            retain: [],
            release: []
        };
        ua.set(e, t);
    }
    return t;
}

function pa(e) {
    var t = ma(e);
    var o = (new Error).stack;
    if (o) {
        t.retain.push(o);
    }
}

function fa(e) {
    var t = ma(e);
    var o = (new Error).stack;
    if (o) {
        t.release.push(o);
    }
}

var ga = [ /EventDispatcher\.attachEventOnce.*\s.*/, /EventDispatcher.attachEvent.*\s.*/, /EventDispatcher.attachPropertyChangeEvent.*\s.*/, /ClosetObject.retain.*\s.*/ ];

var ha = [ /ClosetObject.release.*\s.*/ ];

function ba(e, t) {
    if (!t) {
        return e;
    }
    for (var o = 0, n = t; o < n.length; o++) {
        var a = n[o];
        var r = e.match(a);
        if (r && r.length > 0) {
            return r[r.length - 1];
        }
    }
    return e;
}

function va(e) {
    var t = ua ? ua.get(e) : undefined;
    if (!t) {
        console.log("There is no retain/release trace information for this object.");
        return;
    }
    var o = "\n**************************************************\n";
    o += "Type: ".concat(e.getWrapperType(), "\n");
    o += "Address: ".concat(e.getClosetAddress(), "\n");
    o += "Retain count: ".concat(e.getRetainCount(), "\n");
    o += "\nRetain\n--------------------------------------------------\n";
    var n = t.retain;
    if (n) {
        for (var a = 0; a < n.length; a++) {
            o += "".concat(a, ")\t").concat(ba(n[a], ga), "\n");
        }
    }
    o += "\nRelease\n--------------------------------------------------\n";
    var r = t.release;
    if (r) {
        for (var a = 0; a < r.length; a++) {
            o += "".concat(a, ")\t").concat(ba(r[a], ha), "\n");
        }
    }
    o += "\n**************************************************\n";
    console.log(o);
}

function ya() {
    var e = [];
    for (var t = 0; t < arguments.length; t++) {
        e[t] = arguments[t];
    }
    if (da) {
        console.log.apply(console, [ "TRACE" ].concat(Array.from(e)));
    }
}

var xa = function(e) {
    var t = new e(1);
    return function(e) {
        t[0] = e;
        return t[0];
    };
};

var Sa = {
    convertInt: xa(Int32Array),
    convertUnsigned: xa(Uint32Array),
    convertFloat: xa(Float32Array),
    convertDouble: xa(Float64Array),
    convertEnum: xa(Int32Array),
    convertBool: function(e) {
        return !!e;
    },
    convertPoint: function(e) {
        if (!e) return [ NaN, NaN ];
        return Sa.convertArray(e, Sa.convertFloat);
    },
    convertRectangle: function(e) {
        if (!e) return [ NaN, NaN, NaN, NaN ];
        return Sa.convertArray(e, Sa.convertFloat);
    },
    convertString: function(e) {
        return typeof e === "string" ? e : null;
    },
    convertModel: function(e) {
        return Ln(e) || null;
    },
    convertArray: function(e, t) {
        return Array.isArray(e) ? e.map(t) : null;
    }
};

var wa = Object.freeze({
    __proto__: null,
    log: ya,
    logRetainReleaseTrace: va,
    traceConversions: Sa,
    traceEnabled: da,
    traceRelease: fa,
    traceRetain: pa
});

var Ca = new Map;

var Ea = null;

var Ia = 0;

var _a = {};

function Da(e) {
    return _a === e;
}

function La() {
    Ea = null;
    var e = [];
    var t = [];
    Ca.forEach((function(o, n) {
        if (!o.isRetained()) {
            e.push(o.getClosetAddress());
            t.push(n);
            Ca.delete(n);
            o._resetClosetAddress();
        }
    }));
    var o = e.length;
    if (o > 0) {
        Jo.releaseAllWrappables(e);
    }
    if (da) {
        var n = Jo.getWrappableClosetSize();
        console.log("TRACE", "WrappableCloset: Running garbage collection. ".concat(o, " objects released. ").concat(n, " objects retained."));
        if (o) {
            console.log("TRACE", t);
        }
        var a = Jo.getPrimitiveClosetSize();
        if (a !== 0) {
            console.log("TRACE", "ERROR: The PrimitiveCloset should be empty, but has ".concat(a, " items!"));
        }
        var r = o + n;
        if (r > Ia) {
            Ia = r;
            console.log("TRACE", "WrappableCloset size has peaked at ".concat(Ia, " objects (").concat(n, " retained, ").concat(o, " temporary)."));
        }
    }
}

function Ta(e) {
    var t = Jo.commitStagedObject(e);
    var o = Jo.getTypeId(t);
    if (o < 0) {
        throw new Error("Closet object resolved to invalid typeID " + o);
    }
    var n = Ra(o);
    return new n(_a, t, e);
}

function Ra(e) {
    var t = rn.getTypeEntry(e);
    if (!t) {
        throw new Error("Error: typeid ".concat(e, " is not a valid type."));
    }
    var o = rn.getModuleByName(t.moduleName);
    if (!o) {
        if (sas.ltjs.isOpenUI && !window["sas-ui5-build"] && !sas.ltjs.webpack) {
            if (!t.modulePath) {
                throw new Error("Error: typeid ".concat(e, " does not define a valid module path."));
            }
            o = sas.ltjs.require(t.modulePath);
        } else {
            return Ra(t.parentTypeId);
        }
    }
    return o;
}

function ka() {
    return Ca.size;
}

function Aa(e) {
    return Ca.get(e);
}

function Ma(e) {
    if (e === 0) {
        Jo.discardStagedObject(e);
        return null;
    }
    var t = Ca.get(e);
    if (t) {
        Jo.discardStagedObject(e);
    } else {
        t = Ta(e);
    }
    if (t) {
        return t;
    }
    throw new Error("A ClosetObject could not be constructed for the Wrappable with closetKey ".concat(e));
}

function Na(e) {
    if (e === 0) {
        Jo.discardStagedObject(e);
        return null;
    }
    var t = [];
    var o = Jo.getStagedVectorSize(e);
    for (var n = 0; n < o; n++) {
        var a = Jo.stageObjectAt(n);
        t[n] = Ma(a);
    }
    Jo.discardStagedVector(e);
    return t;
}

function Oa(e, t) {
    if (!t || !e || e.isExpired()) {
        throw new Error("Attempting to insert invalid ClosetObject into the closet.");
    }
    if (Ca.has(t)) {
        throw new Error("Attempting to insert ClosetObject with a duplicate closet key.");
    }
    Ca.set(t, e);
    Pa();
}

function Pa() {
    if (Ea === null) {
        Ea = setTimeout(La, 0);
    }
}

function Ba(e) {
    Ca.forEach(e);
}

function za(e, t) {
    var o = Jo.runtime.dispatchBridgeMap.get(e);
    var n = o === null || o === void 0 ? void 0 : o.getWrapper(t);
    if (!n) {
        console.log("commons_DispatchBridge_handleEvent -- eventClosetKey(" + t + ") is invalid.");
        return;
    }
    var a = o === null || o === void 0 ? void 0 : o.getExistingWrapper(e);
    if (!a) {
        console.log("commons_DispatchBridge_handleEvent -- bridgeClosetKey(" + e + ") is invalid.");
        return;
    }
    a.handleEvent(n);
}

function Fa(e) {
    if (Ea !== null) {
        clearTimeout(Ea);
        Ea = null;
    }
    if (e) {
        Ca.forEach((function(e) {
            while (e.isRetained()) {
                e.release();
            }
        }));
    }
    La();
}

function ja() {
    Ca.forEach((function(e) {
        var t = rn.getModuleByName("commons::DispatchBridge");
        if (!t) throw new Error("Unable to get DispatchBridge module!");
        if (e instanceof t) {
            Jo.module._ltjs_commons_EventDispatcher_removeEventListener(Jo.module._ltjs_commons_EventDispatcher_ALL(), e.getClosetAddress());
        }
    }));
    Fa(true);
}

var Va = Object.freeze({
    __proto__: null,
    _releaseAndRemoveAllClosetObjects: ja,
    _runGarbageCollection: Fa,
    forAllObjectsInCloset: Ba,
    getExistingWrapper: Aa,
    getSize: ka,
    getWrapper: Ma,
    getWrapperArray: Na,
    handleEvent: za,
    insertWrapper: Oa,
    isToken: Da,
    scheduleGarbageCollection: Pa
});

function Ha(e, t) {
    if (e.hasOwnProperty(t)) {
        var o = e[t];
        if (typeof o === "function") {
            return o;
        }
    }
    return undefined;
}

function Ua(e, t) {
    if (t in e) {
        var o = e[t];
        if (typeof o === "function") {
            return o;
        }
    }
    return undefined;
}

function Ga(e) {
    var t = "_";
    var o = e.length;
    if (o === 0) {
        t += "v";
    } else {
        for (var n = 0; n < o; n++) {
            var a = e[n];
            if (a === undefined) {
                t += "o";
            } else {
                t += (typeof a).charAt(0);
            }
        }
    }
    return t;
}

var Ka = function() {
    function e(e, t, o) {
        this._retainCount = 0;
        this._closetAddress = 0;
        if (Da(e)) {
            if (!t || !o) {
                throw new Error("Object can not be instantiated");
            }
            this._closetAddress = t;
            Oa(this, o);
        } else {
            var n = Ha(this.constructor, "_create");
            if (n === undefined) {
                throw new Error("Object can not be instantiated");
            }
            var a = n.apply(this, arguments);
            this._closetAddress = Jo.commitStagedObject(a);
            Oa(this, a);
        }
    }
    e.prototype.getClosetAddress = function() {
        return this._closetAddress;
    };
    e.prototype._resetClosetAddress = function() {
        this._closetAddress = 0;
    };
    e.prototype.isRetained = function() {
        return this._retainCount > 0;
    };
    e.prototype.isAutoReleased = function() {
        return !this.isRetained();
    };
    e.prototype.getRetainCount = function() {
        return this._retainCount;
    };
    e.prototype._getValidClosetAddress = function() {
        this._assertNotExpired();
        return this._closetAddress;
    };
    e._getValidClosetAddress = function(e) {
        return e ? e._getValidClosetAddress() : 0;
    };
    e.prototype.isExpired = function() {
        return this._closetAddress === 0;
    };
    e.prototype.isNull = function() {
        return this.isExpired();
    };
    e.prototype._assertNotExpired = function() {
        if (this.isExpired()) {
            throw new Error("This ClosetObject has gone out of scope and is no longer usable. ClosetObjects must be retained if they are to be used outside of local scope.");
        }
    };
    e.prototype.equals = function(t) {
        if (t === null) {
            return false;
        }
        return e.equals(this, t);
    };
    e.equals = function(t, o) {
        if (t === o) {
            return true;
        }
        if (t instanceof e && o instanceof e) {
            return Jo.closetObjectsEqual(t._getValidClosetAddress(), o._getValidClosetAddress());
        }
        return false;
    };
    e.prototype.getWrapperType = function() {
        if (!this.isExpired()) {
            var e = Jo.getTypeId(this._closetAddress);
            var t = rn.getTypeEntry(e);
            if (t) {
                return t.modulePath;
            }
        }
        return null;
    };
    e.prototype.retain = function() {
        this._assertNotExpired();
        ++this._retainCount;
        if (da) {
            pa(this);
        }
        return this;
    };
    e.prototype.release = function() {
        this._assertNotExpired();
        if (this._retainCount === 0) {
            throw new Error("This ClosetObject is not retained and therefore cannot be released. You may have mismatched retain/release calls.");
        }
        --this._retainCount;
        if (this._retainCount === 0) {
            Pa();
        }
        if (da) {
            fa(this);
        }
        return this;
    };
    e.getClosetAddress = function(e) {
        return Dn(e);
    };
    e.getAddress = function(e) {
        return Ln(e);
    };
    e.callOverloadedFunction = function(e, t, o) {
        var n = undefined;
        var a = Ga(o);
        if (a) {
            var r = typeof e;
            if (r === "object") {
                n = Ua(e, t + a);
            } else if (r === "function") {
                n = Ha(e, t + a);
            }
        }
        if (!n) {
            throw new Error("Function " + t + " not available for specified arguments");
        }
        return n.apply(e, o);
    };
    e.logRetainReleaseTrace = function(e) {
        va(e);
    };
    e.logAllRetainReleaseTraces = function() {
        Ba((function(e) {
            va(e);
        }));
    };
    return e;
}();

var Wa = {
    VOID: 0,
    WRAPPER: 1,
    BOOLEAN: 2,
    UNSIGNED: 3,
    INT: 4,
    FLOAT: 5,
    DOUBLE: 6,
    STRING: 7,
    SASDATE: 8,
    SASDATETIME: 9,
    SASCOLOR: 10,
    POINT: 11,
    RECTANGLE: 12,
    SIZE: 13
};

function $a(e, t) {
    if (t === void 0) {
        t = false;
    }
    if (Array.isArray(e)) {
        if (t) {
            return Er[e[0]];
        } else {
            return Cr[e[0]];
        }
    } else {
        return wr[e];
    }
}

function Ya(e) {
    if (Array.isArray(e)) {
        return _r[e[0]];
    } else {
        return Ir[e];
    }
}

var qa = Jo.releasePrimitive.bind(Jo);

var Xa = Jo.releaseAllPrimitives.bind(Jo);

var Za = {
    convert: function(e) {
        return e;
    }
};

var Ja = {
    convert: function(e) {
        return !!e;
    }
};

var Qa = {
    convert: function(e) {
        return e >>> 0;
    }
};

var er = {
    convert: Jo.convertStringFromC.bind(Jo),
    cleanup: qa
};

var tr = {
    convert: Jo.convertFloatArrayFromC.bind(Jo),
    cleanup: qa
};

var or = {
    convert: Jo.convertBoolArrayFromC.bind(Jo),
    cleanup: qa
};

var nr = {
    convert: Jo.convertUnsignedArrayFromC.bind(Jo),
    cleanup: qa
};

var ar = {
    convert: Jo.convertIntArrayFromC.bind(Jo),
    cleanup: qa
};

var rr = {
    convert: Jo.convertDoubleArrayFromC.bind(Jo),
    cleanup: qa
};

var sr = {
    convert: Jo.convertStringArrayFromC.bind(Jo)
};

var ir = {
    convert: Jo.convertGeometryArrayFromC.bind(Jo)
};

var lr = {
    convert: Jo.convertBoolMVectorFromC.bind(Jo),
    cleanup: qa
};

var cr = {
    convert: Jo.convertUnsignedMVectorFromC.bind(Jo),
    cleanup: qa
};

var dr = {
    convert: Jo.convertIntMVectorFromC.bind(Jo),
    cleanup: qa
};

var ur = {
    convert: Jo.convertFloatMVectorFromC.bind(Jo),
    cleanup: qa
};

var mr = {
    convert: Jo.convertDoubleMVectorFromC.bind(Jo),
    cleanup: qa
};

var pr = {
    convert: Jo.convertStringToC.bind(Jo),
    cleanup: qa
};

var fr = {
    convert: Jo.convertFloatArrayToC.bind(Jo),
    cleanup: qa
};

var gr = {
    convert: Jo.convertObjectArrayToC.bind(Jo),
    cleanup: qa
};

var hr = {
    convert: Jo.convertBoolArrayToC.bind(Jo),
    cleanup: qa
};

var br = {
    convert: Jo.convertUnsignedArrayToC.bind(Jo),
    cleanup: qa
};

var vr = {
    convert: Jo.convertIntArrayToC.bind(Jo),
    cleanup: qa
};

var yr = {
    convert: Jo.convertDoubleArrayToC.bind(Jo),
    cleanup: qa
};

var xr = {
    convert: Jo.convertStringArrayToC.bind(Jo),
    cleanup: Xa
};

var Sr = {
    convert: Jo.convertGeometryArrayToC.bind(Jo),
    cleanup: Xa
};

var wr = [];

wr[Wa.VOID] = Za;

wr[Wa.WRAPPER] = {
    convert: Ma
};

wr[Wa.BOOLEAN] = Ja;

wr[Wa.UNSIGNED] = Qa;

wr[Wa.INT] = Za;

wr[Wa.FLOAT] = Za;

wr[Wa.DOUBLE] = Za;

wr[Wa.STRING] = er;

wr[Wa.SASDATE] = Za;

wr[Wa.SASDATETIME] = Za;

wr[Wa.SASCOLOR] = Qa;

wr[Wa.POINT] = tr;

wr[Wa.RECTANGLE] = tr;

wr[Wa.SIZE] = tr;

var Cr = [];

Cr[Wa.WRAPPER] = {
    convert: Na
};

Cr[Wa.BOOLEAN] = or;

Cr[Wa.UNSIGNED] = nr;

Cr[Wa.INT] = ar;

Cr[Wa.FLOAT] = tr;

Cr[Wa.DOUBLE] = rr;

Cr[Wa.STRING] = sr;

Cr[Wa.SASDATE] = rr;

Cr[Wa.SASDATETIME] = rr;

Cr[Wa.SASCOLOR] = nr;

Cr[Wa.POINT] = ir;

Cr[Wa.RECTANGLE] = ir;

Cr[Wa.SIZE] = ir;

var Er = [];

Er[Wa.WRAPPER] = {
    convert: Na
};

Er[Wa.BOOLEAN] = lr;

Er[Wa.UNSIGNED] = cr;

Er[Wa.INT] = dr;

Er[Wa.FLOAT] = ur;

Er[Wa.DOUBLE] = mr;

Er[Wa.STRING] = sr;

Er[Wa.SASDATE] = mr;

Er[Wa.SASDATETIME] = mr;

Er[Wa.SASCOLOR] = cr;

var Ir = [];

Ir[Wa.WRAPPER] = {
    convert: Ka._getValidClosetAddress
};

Ir[Wa.BOOLEAN] = Ja;

Ir[Wa.UNSIGNED] = Za;

Ir[Wa.INT] = Za;

Ir[Wa.FLOAT] = Za;

Ir[Wa.DOUBLE] = Za;

Ir[Wa.STRING] = pr;

Ir[Wa.SASDATE] = Za;

Ir[Wa.SASDATETIME] = Za;

Ir[Wa.SASCOLOR] = Za;

Ir[Wa.POINT] = fr;

Ir[Wa.RECTANGLE] = fr;

Ir[Wa.SIZE] = fr;

var _r = [];

_r[Wa.WRAPPER] = gr;

_r[Wa.BOOLEAN] = hr;

_r[Wa.UNSIGNED] = br;

_r[Wa.INT] = vr;

_r[Wa.FLOAT] = fr;

_r[Wa.DOUBLE] = yr;

_r[Wa.STRING] = xr;

_r[Wa.SASDATE] = yr;

_r[Wa.SASDATETIME] = yr;

_r[Wa.SASCOLOR] = br;

_r[Wa.POINT] = Sr;

_r[Wa.RECTANGLE] = Sr;

_r[Wa.SIZE] = Sr;

function Dr(e, t, o, n) {
    var a = En(e, t, o);
    var r = e.replace("::", "_");
    Lr(a, r, n);
    return a;
}

function Lr(e, t, o) {
    Tr(e, o[0]);
    Rr(e, o[1]);
    kr(e, o[2]);
    Or(e, t, o[3]);
    zr(e, t, o[4]);
    jr(e, t, o[5]);
    Hr(e, o[6]);
    Gr(e, o[7]);
}

function Tr(e, t) {
    if (e && t) {
        for (var o = 0, n = Object.entries(t); o < n.length; o++) {
            var a = n[o], r = a[0], s = a[1];
            e[r] = s;
        }
    }
}

function Rr(e, t) {
    if (e && t) {
        for (var o = 0, n = Object.entries(t); o < n.length; o++) {
            var a = n[o], r = a[0], s = a[1];
            var i = Wr("get", r);
            e.prototype[i] = Mr(qr(s, "get"), r, $a(s, true));
            var l = Wr("set", r);
            e.prototype[l] = Nr(qr(s, "set"), r, Ya(s));
        }
    }
}

function kr(e, t) {
    if (e && t) {
        for (var o = 0, n = Object.entries(t); o < n.length; o++) {
            var a = n[o], r = a[0], s = a[1];
            var i = Wr("get", r);
            e.prototype[i] = Mr(qr(s, "get"), r, $a(s, true));
        }
    }
}

var Ar = Ya(Wa.STRING);

function Mr(e, t, o) {
    return function() {
        var n, a;
        var r = Ar.convert(t);
        var s = Jo.module[e](this._getValidClosetAddress(), r);
        var i = o.convert(s);
        (n = Ar.cleanup) === null || n === void 0 ? void 0 : n.call(Ar, r);
        (a = o.cleanup) === null || a === void 0 ? void 0 : a.call(o, s);
        return i;
    };
}

function Nr(e, t, o) {
    return function(n) {
        var a, r;
        var s = o.convert(n);
        var i = Ar.convert(t);
        Jo.module[e](this._getValidClosetAddress(), s, i);
        (a = o.cleanup) === null || a === void 0 ? void 0 : a.call(o, s);
        (r = Ar.cleanup) === null || r === void 0 ? void 0 : r.call(Ar, i);
        return this;
    };
}

function Or(e, t, o) {
    if (e && o) {
        for (var n = 0, a = Object.entries(o); n < a.length; n++) {
            var r = a[n], s = r[0], i = r[1];
            var l = Wr("get", s);
            e.prototype[l] = Pr("_ltjs_".concat(t, "_").concat(l), $a(i));
            var c = Wr("set", s);
            e.prototype[c] = Br("_ltjs_".concat(t, "_").concat(c), Ya(i));
        }
    }
}

function Pr(e, t) {
    return function() {
        var o;
        var n = Jo.module[e](this._getValidClosetAddress());
        var a = t.convert(n);
        (o = t.cleanup) === null || o === void 0 ? void 0 : o.call(t, n);
        return a;
    };
}

function Br(e, t) {
    return function(o) {
        var n;
        var a = t.convert(o);
        Jo.module[e](this._getValidClosetAddress(), a);
        (n = t.cleanup) === null || n === void 0 ? void 0 : n.call(t, a);
        return this;
    };
}

function zr(e, t, o) {
    if (e && o) {
        for (var n = 0, a = Object.entries(o); n < a.length; n++) {
            var r = a[n], s = r[0], i = r[1];
            var l = i[0], c = i.slice(1);
            e.prototype[s] = Fr("_ltjs_".concat(t).concat($r(s)), l, $a(l), c.map(Ya));
        }
    }
}

function Fr(e, t, o, n) {
    return function() {
        var a;
        var r = [];
        for (var s = 0; s < arguments.length; s++) {
            r[s] = arguments[s];
        }
        var i = n.map((function(e, t) {
            return e.convert(r[t]);
        }));
        var l = Jo.module[e].apply(null, [ this._getValidClosetAddress() ].concat(i));
        var c = t === Wa.VOID ? this : o.convert(l);
        (a = o.cleanup) === null || a === void 0 ? void 0 : a.call(o, l);
        n.forEach((function(e, t) {
            var o;
            return (o = e.cleanup) === null || o === void 0 ? void 0 : o.call(e, i[t]);
        }));
        return c;
    };
}

function jr(e, t, o) {
    if (e && o) {
        for (var n = 0, a = Object.entries(o); n < a.length; n++) {
            var r = a[n], s = r[0], i = r[1];
            var l = i[0], c = i.slice(1);
            e[s] = Vr("_ltjs_".concat(t).concat($r(s)), $a(l), c.map(Ya));
        }
    }
}

function Vr(e, t, o) {
    return function() {
        var n;
        var a = [];
        for (var r = 0; r < arguments.length; r++) {
            a[r] = arguments[r];
        }
        var s = o.map((function(e, t) {
            return e.convert(a[t]);
        }));
        var i = Jo.module[e].apply(null, s);
        var l = t.convert(i);
        (n = t.cleanup) === null || n === void 0 ? void 0 : n.call(t, i);
        o.forEach((function(e, t) {
            var o;
            return (o = e.cleanup) === null || o === void 0 ? void 0 : o.call(e, s[t]);
        }));
        return l;
    };
}

function Hr(e, t) {
    if (e && t) {
        for (var o = 0, n = t; o < n.length; o++) {
            var a = n[o];
            e.prototype[a] = Ur($r(a));
        }
    }
}

function Ur(e) {
    return function() {
        return Ka.callOverloadedFunction(this, e, Array.prototype.slice.call(arguments));
    };
}

function Gr(e, t) {
    if (e && t) {
        for (var o = 0, n = t; o < n.length; o++) {
            var a = n[o];
            e[a] = Kr(e, $r(a));
        }
    }
}

function Kr(e, t) {
    return function() {
        return Ka.callOverloadedFunction(e, t, Array.prototype.slice.call(arguments));
    };
}

function Wr(e, t) {
    return "".concat(e).concat(t.charAt(0).toUpperCase()).concat(t.substring(1));
}

function $r(e) {
    return e.charAt(0) === "_" ? e : "_".concat(e);
}

var Yr = [];

Yr[Wa.WRAPPER] = "Wrappable";

Yr[Wa.BOOLEAN] = "Boolean";

Yr[Wa.UNSIGNED] = "Unsigned";

Yr[Wa.INT] = "Int";

Yr[Wa.FLOAT] = "Float";

Yr[Wa.DOUBLE] = "Double";

Yr[Wa.STRING] = "String";

Yr[Wa.SASDATE] = "SASDate";

Yr[Wa.SASDATETIME] = "SASDatetime";

Yr[Wa.SASCOLOR] = "SASColor";

function qr(e, t) {
    if (Array.isArray(e)) {
        return "_ltjs_commons_Closet_".concat(t).concat(Yr[e[0]], "VectorProperty");
    } else {
        return "_ltjs_commons_Closet_".concat(t).concat(Yr[e], "Property");
    }
}

var Xr = function() {
    function e(e) {
        this._detachFunction = e;
    }
    e.prototype.detach = function() {
        this._detachFunction();
    };
    e.createHandle = function(t, o) {
        o.retain();
        var n = o;
        return new e((function() {
            if (n) {
                Jo.module._ltjs_commons_EventDispatcher_removeEventListener(t, n.getClosetAddress());
                n.release();
                n = null;
            }
        }));
    };
    e.createPropertyChangeHandle = function(t, o) {
        o.retain();
        var n = o;
        return new e((function() {
            if (n) {
                var e = Jo.convertStringToC(t);
                Jo.module._ltjs_commons_EventDispatcher_removePropertyChangeEventListener(e, n.getClosetAddress());
                Jo.releasePrimitive(e);
                n.release();
                n = null;
            }
        }));
    };
    return e;
}();

var Zr = function(e) {
    I(t, e);
    function t(t, o) {
        var n = e.call(this, arguments[0], arguments[1], arguments[2]) || this;
        n._context = t;
        n._callback = o;
        return n;
    }
    t.prototype.handleEvent = function(e) {
        if (this._callback) {
            this._callback.call(this._context, e);
        }
    };
    t.prototype._resetClosetAddress = function() {
        Jo.runtime.dispatchBridgeMap.delete(Ka.getAddress(this));
        e.prototype._resetClosetAddress.call(this);
    };
    t._create = function() {
        var e = arguments[2];
        var t = Ka.getClosetAddress(e);
        var o = Jo.module._ltjs_commons_DispatchBridge_create(t);
        Jo.runtime.dispatchBridgeMap.set(o, {
            getWrapper: Ma,
            getExistingWrapper: Aa
        });
        return o;
    };
    return t;
}(Ka);

var Jr = -1;

var Qr = -1;

yn((function() {
    Jr = Jo.module._ltjs_commons_EventDispatcher_ALL();
    Qr = Jo.module._ltjs_commons_EventDispatcher_NONE();
}));

var es = function(e) {
    I(t, e);
    function t() {
        return e !== null && e.apply(this, arguments) || this;
    }
    Object.defineProperty(t, "ALL", {
        get: function() {
            return Jr;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(t, "NONE", {
        get: function() {
            return Qr;
        },
        enumerable: false,
        configurable: true
    });
    t.prototype.attachEvent = function(e, t, o) {
        var n = new Zr(o, t, this);
        Jo.module._ltjs_commons_EventDispatcher_addEventListener(this._getValidClosetAddress(), e, n.getClosetAddress());
        return Xr.createHandle(e, n);
    };
    t.prototype.attachEventOnce = function(e, t, o) {
        var n = this.attachEvent(e, (function(e) {
            n.detach();
            t.call(o, e);
        }));
        return n;
    };
    t.prototype.dispatchEvent = function(e) {
        Jo.module._ltjs_commons_EventDispatcher_dispatchEvent(this._getValidClosetAddress(), Ka.getClosetAddress(e));
        return this;
    };
    t.prototype.attachPropertyChangeEvent = function(e, t, o) {
        var n = new Zr(o, t, this);
        var a = Jo.convertStringToC(e);
        Jo.module._ltjs_commons_EventDispatcher_addPropertyChangeEventListener(this._getValidClosetAddress(), a, n.getClosetAddress());
        Jo.releasePrimitive(a);
        return Xr.createPropertyChangeHandle(e, n);
    };
    return t;
}(Ka);

var ts = Dr("commons::CommonsPackage", [ "commons::PortablePackage" ], Ka, [ , , , , , {
    instance: [ 1 ]
}, ,  ]);

var os = Dr("commons::CommonsUIPackage", [ "commons::PortablePackage" ], Ka, [ , , , , , {
    instance: [ 1 ],
    TOGGLE_ON_TAP: [ 7 ]
}, ,  ]);

var ns = {
    NONE: 0,
    DARK: 1,
    DARK_2: 2,
    HIGH_CONTRAST: 3,
    HTML_ENCORE: 4,
    LIGHT: 5,
    MIDNIGHT: 6,
    OPAL: 7,
    RAVEN: 8,
    RAVEN_2: 9,
    UMSTEAD: 10
};

var as = sas.ltjs.isOpenUI;

var rs = as ? "sas/ltjslib" : "ltjslib";

function ss(e, t) {
    var o = window["sap-ui-config"];
    if (!o || !e) {
        return t;
    }
    var n = e.split(".");
    var a = o;
    for (var r = 0, s = n; r < s.length; r++) {
        var i = s[r];
        if (!a) {
            return t;
        }
        a = a[i];
    }
    return a === undefined ? t : a;
}

var is = false;

if (sas.ltjs.__deferredLoading) {
    is = true;
}

var ls = function() {
    var e;
    var t;
    var o = function(e, t) {
        return e.then((function(e) {
            return e.arrayBuffer();
        })).then((function(e) {
            return WebAssembly.instantiate(e, t);
        }));
    };
    var n = Promise.all([ new Promise((function(t) {
        e = t;
    })), new Promise((function(e) {
        t = e;
    })) ]).then((function(e) {
        var t = e[0];
        var n = e[1];
        if (t.binary) {
            return WebAssembly.instantiate(t.binary, n);
        } else if (t.responsePromise) {
            var a = t.responsePromise;
            if (WebAssembly.instantiateStreaming) {
                return WebAssembly.instantiateStreaming(t.responsePromise, n).catch((function(e) {
                    console.error("LTJS load: ".concat(e));
                    return o(a, n);
                }));
            } else {
                return o(t.responsePromise, n);
            }
        }
        throw new Error("wasmPromise was resolved with an invalid result");
    }));
    return {
        instantiateFromStream: function(t) {
            var o = {
                binary: undefined,
                responsePromise: t
            };
            e(o);
            return n;
        },
        instantiateFromBinary: function(t) {
            var o = {
                binary: t,
                responsePromise: undefined
            };
            e(o);
            return n;
        },
        instantiateFromImports: function(e) {
            t(e);
            return n;
        }
    };
}();

function cs(e) {
    return new Promise((function(t) {
        var o = new XMLHttpRequest;
        o.open("GET", e, true);
        o.responseType = "arraybuffer";
        o.onload = function() {
            t(new Uint8Array(o.response));
        };
        o.send(null);
    }));
}

function ds(e) {
    if (sas.ltjs.node) {
        return sas.ltjs.node.fs.promises.readFile(e).then((function(e) {
            return ls.instantiateFromBinary(e);
        }));
    } else if (ss("sas.servicePlatform") === "WIP") {
        return cs(e).then((function(e) {
            return ls.instantiateFromBinary(e);
        }));
    } else {
        return ls.instantiateFromStream(fetch(e));
    }
}

function us(e, t, o, n, a) {
    if (sas.ltjs.node) {
        sas.ltjs.node.import(t).then(n, a);
        return {};
    }
    var r = document.getElementById(e);
    if (!r) {
        var s = document.createElement("script");
        s.id = e;
        s.type = "text/javascript";
        s.async = true;
        if (jn("sas-commons-configUrl") || jn("sas-commons-url")) {
            s.crossOrigin = "anonymous";
        }
        s.src = t;
        if (n) {
            s.addEventListener("load", n);
        }
        if (a) {
            s.addEventListener("error", a);
        }
        if (!o) {
            o = document.getElementsByTagName("script")[0];
        }
        var i = o.parentNode;
        if (i) {
            i.insertBefore(s, o.nextSibling);
        }
        return s;
    } else if (r instanceof HTMLScriptElement) {
        return r;
    }
    throw new Error("The element #".concat(e, " does not have type HTMLScriptElement"));
}

function ms() {
    if (!!Go.locateFile) {
        return;
    }
    Go.locateFile = function(e, t) {
        if (sas.ltjs.ltjslibPath) {
            return "".concat(sas.ltjs.ltjslibPath).concat(e.startsWith("ltjs-wasm") ? "" : "assets/").concat(e);
        }
        var o = e.startsWith("ltjs-wasm") ? "".concat(rs, "/").concat(e) : "".concat(hs()).concat(e);
        return zn(o);
    };
}

function ps() {
    Go.instantiateWasm = function(e, t) {
        ls.instantiateFromImports(e).then((function(e) {
            t(e.instance);
        }));
        return {};
    };
    ms();
    us("ltjs-script", Go.locateFile("ltjs-wasm.js", ""));
    var e = performance.now();
    return ds(Go.locateFile("ltjs-wasm.wasm", "")).then((function(t) {
        var o = performance.now() - e;
        console.log("LTJS load: WASM load time: ".concat(o, " ms"));
        return t;
    }));
}

function fs() {
    sas.ltjslib.ltjs.ltjsNLSPropertiesInitialized = true;
    if (sas.ltjslib.ltjs.removeBlockingDependency) {
        sas.ltjslib.ltjs.removeBlockingDependency("ltjsNLSPropertiesInitialized");
    }
}

function gs() {
    if (sas.ltjs.__hasNLSPropertyLoadStarted) {
        return;
    }
    if (sas.ltjs.jest || sas.ltjs.node) {
        fs();
        return;
    }
    sas.ltjs.__hasNLSPropertyLoadStarted = true;
    ms();
    var e = [];
    var t = function(o) {
        var n = o.match(/(?:[^-]+)/g) || [];
        o = n.length > 1 ? n[0] + "-" + n[1] : n[0];
        if (e.indexOf(o) !== -1 || o.endsWith("pseudo") || o.endsWith("-XX")) {
            return;
        }
        e.push(o);
        var a = Jo.module;
        var r = function() {
            var e = null;
            var t = "";
            var n = Go.locateFile("NLS/".concat(o, "-metadata.json"), "");
            var r = Go.locateFile("NLS/".concat(o, "-properties.txt"), "");
            a.addBlockingDependency(n);
            a.addBlockingDependency(r);
            ra({
                url: n,
                dataType: "text"
            }).done((function(o) {
                if (o) {
                    e = JSON.parse(o);
                }
                if (e && t) {
                    Jo.writeNLSBundleToFS(t, e);
                }
                a.removeBlockingDependency(n);
            })).fail((function() {
                if (o === "en-US") {
                    throw new Error("Unable to load en-US locale");
                }
                a.removeBlockingDependency(n);
            }));
            ra({
                url: r,
                dataType: "text"
            }).done((function(o) {
                t = o;
                if (e && t) {
                    Jo.writeNLSBundleToFS(t, e);
                }
                a.removeBlockingDependency(r);
            })).fail((function() {
                if (o === "en-US") {
                    throw new Error("Unable to load en-US locale");
                }
                a.removeBlockingDependency(r);
            }));
        };
        if (a.calledRun) {
            r();
        } else {
            if (!a["preRun"]) {
                a["preRun"] = [];
            }
            a["preRun"].push(r);
        }
        if (n.length > 1 && n[0] !== "en" && n[0] !== "zh") {
            t(n[0]);
        }
    };
    t("en-US");
    t(ta());
    t(aa());
    fs();
}

function hs() {
    return rs + "/assets/";
}

function bs(e) {
    if (sas.ltjs.ltjslibPath || !sas.ltjs.isOpenUI || sas.ltjs.__useBaseResourceLocation) {
        return;
    }
    var t = "commons";
    if (e.indexOf("graphbuilder") !== -1) {
        t = "graphbuilder";
    } else if (e.indexOf("vav") !== -1) {
        t = "vav";
    } else if (e.indexOf("gtl") !== -1) {
        t = "gtl";
    }
    var o = jQuery.sap.getResourcePath(rs, "") + "/ltjslib-" + t;
    jQuery.sap.registerResourcePath(rs, o);
}

function vs(e) {
    if (sas.ltjs.jest) {
        return;
    }
    if (!is) {
        bs(e);
        if (sas.ltjs.__hasBootStarted || !sas.ltjs.node && document.getElementById("ltjs-script")) {
            return;
        }
        sas.ltjs.__hasBootStarted = true;
        if (sas.ltjs.isOpenUI && sas && sas.eventBus && sas.eventBus.publish) {
            sas.eventBus.publish("ltjs", "loading_started");
        }
        ps().catch((function(e) {
            throw new Error("WebAssembly loading failed: ".concat(e));
        }));
    }
}

var ys = sas.ltjs.isOpenUI;

var xs = !!sas.ltjs.jest;

var Ss = sas.ltjs.theme || "sas_corporate";

var ws = "";

var Cs = undefined;

var Es = "";

Jo.runtime.themeOverrideCallbacks.add((function(e) {
    if (!e) {
        return;
    }
    var t = xn("commons::Style");
    if (!Cs) {
        Cs = new t(ns.NONE).retain();
    }
    Cs.clear();
    Cs.addAttributeBundlesDefinedInCSSString(e);
    var o = t.instance();
    Cs.setParentStyle(o);
}));

var Is = function() {
    if (!ys) {
        return undefined;
    }
    var e = sas.ltjs.require("sas/hc/ui/core/theme/ThemeUtil");
    sas.eventBus.subscribe("Themes", "applicationThemeChanged", (function() {
        if (hn()) {
            Ds();
        }
    }));
    return e;
}();

var _s = function() {
    if (!ys) {
        return undefined;
    }
    var e = sas.ltjs.require("sas/hc/ui/core/settings/GlobalSettingsHelper");
    var t = sas.ltjs.require("sas/hc/ui/core/library");
    sas.eventBus.subscribe(t.SETTINGS_CHANNEL, t.SETTINGS_CHANGE, Ns);
    return e;
}();

function Ds(e) {
    if (xs && e) {
        e();
        return;
    }
    var t = "";
    var o = 1;
    var n = function() {
        o--;
        if (o === 0 && e && typeof e === "function") {
            e();
        }
    };
    if (ys) {
        t = (new Is).getGraphStylesheetUrl();
    } else {
        var a = ys ? "sas/hc/graph/themes/" : "".concat(rs, "/themes/");
        var r = zn("".concat(a).concat(Ss, "/library.css"));
        t = zn("".concat(a).concat(Ss, "/graph.css"));
        if (!sas.ltjs.node) {
            var s = document.getElementById("graph-library-css");
            if (!s || s.href !== t) {
                o++;
                s = s || document.createElement("link");
                s.id = "graph-library-css";
                s.rel = "stylesheet";
                s.type = "text/css";
                s.href = r;
                var i = function() {
                    s.removeEventListener("load", i);
                    s.removeEventListener("error", l);
                    n();
                };
                var l = function() {
                    $n(false, "Graph themes failed to load");
                    s.removeEventListener("load", i);
                    s.removeEventListener("error", l);
                    n();
                };
                s.addEventListener("load", i);
                s.addEventListener("error", l);
                document.head.appendChild(s);
            }
        }
    }
    if (t && ws !== t) {
        if (sas.ltjs.node) {
            sas.ltjs.node.fs.promises.readFile(t).then((function(e) {
                Ls(e.toString());
                n();
            }), (function() {
                console.error("Failed to load application theme from ".concat(t));
                n();
            }));
        } else {
            ra({
                url: t,
                dataType: "*",
                processData: false,
                type: "GET",
                headers: {
                    Accept: "text/css"
                }
            }).done((function(e) {
                Ls(e);
                if (ys) {
                    Os();
                    Ns();
                }
            })).always((function() {
                n();
            }));
        }
    }
    ws = t;
}

function Ls(e) {
    Jo.runtime.themeOverrideCallbacks.forEach((function(t) {
        return t(e);
    }));
}

function Ts(e) {
    if (ys) {
        $n(false, "OpenUI apps rely on the OpenUI config and the preference service for graph themes.");
        return;
    }
    Ss = e || "sas_corporate";
    if (hn()) {
        Ds();
    }
}

function Rs() {
    if (ys) {
        $n(false, "OpenUI apps rely on the OpenUI config and the preference service for graph themes.");
        return null;
    }
    return Ss;
}

function ks() {
    return Cs;
}

function As(e) {
    var t = e.toString(16);
    return t.length === 1 ? "0" + t : t;
}

function Ms(e, t, o) {
    return "#" + As(e) + As(t) + As(o);
}

function Ns() {
    if (!Cs) return;
    if (!_s.getFocusOverride()) {
        if (!Es) return;
        Cs.addAttributeBundlesDefinedInCSSString(Es);
        return;
    }
    var e = _s.getFocusColor();
    if (!e) return;
    var t = Ms(e.red, e.green, e.blue);
    var o = _s.getFocusThickness();
    if (!o) return;
    var n = ".Focus{line-color:".concat(t, ";line-thickness:").concat(o, "px;line-style:2}");
    Cs.addAttributeBundlesDefinedInCSSString(n);
}

function Os() {
    if (!Cs) return;
    var e = sas.ltjs.require("sas/ltjs/commons/styles/StyleElement");
    var t = sas.ltjs.require("sas/ltjs/commons/styles/StyleAttribute");
    var o = sas.ltjs.require("sas/ltjs/commons/util/ColorUtilities");
    var n = Cs.getAttributeBundleForStyleElement(e.GRAPH_FOCUS);
    if (!n) return;
    var a = o.getHexStringFromColor(n.getStyleAttributeUnsignedValue(t.LINE_COLOR, 0));
    if (!a) return;
    var r = n.getStyleAttributeDimensionValue(t.LINE_THICKNESS, null);
    if (!r) return;
    var s = r.getValue();
    if (!s) return;
    var i = n.getStyleAttributeUnsignedValue(t.LINE_STYLE, 0);
    if (!i) return;
    Es = ".Focus{line-color:".concat(a, ";line-thickness:").concat(s, "px;line-style:").concat(i, "}");
}

un("commons", [ ts, os ]);

function Ps() {
    return D(this, void 0, void 0, (function() {
        var e;
        return L(this, (function(t) {
            switch (t.label) {
              case 0:
                if (sas.ltjs.node) {
                    return [ 2 ];
                }
                t.label = 1;

              case 1:
                t.trys.push([ 1, 3, , 4 ]);
                return [ 4, document.fonts.load("12px sas-icons") ];

              case 2:
                e = t.sent();
                return [ 2, e.length > 0 ];

              case 3:
                t.sent();
                return [ 2, false ];

              case 4:
                return [ 2 ];
            }
        }));
    }));
}

Ps();

vn((function(e) {
    Promise.all([ new Promise((function(e) {
        return Ds(e);
    })), Ps() ]).then((function() {
        var t;
        e === null || e === void 0 ? void 0 : e();
        if (!sas.ltjs.node) {
            (t = document.fonts) === null || t === void 0 ? void 0 : t.addEventListener("loadingdone", (function(e) {
                if (window.FontFaceSetLoadEvent && e instanceof window.FontFaceSetLoadEvent && e.fontfaces.some((function(e) {
                    return e.family === "sas-icons";
                }))) {
                    Jo.module._ltjs_commons_ViewManager_invalidateAllViews();
                }
            }));
        }
    }));
}), true);

Dr("commons::PortablePackage", [], Ka, [ , , , , {
    getSupportedLocales: [ [ 7 ] ],
    getName: [ 7 ],
    getBundleNames: [ [ 7 ] ],
    getRelativeAssetPaths: [ [ 7 ] ],
    getBundlePaths: [ [ 7 ], 7, 7 ],
    initialize: [ 4 ]
}, {
    getRegisteredPackages: [ [ 1 ] ],
    getVersion: [ 7 ],
    getAllBundlePaths: [ [ 7 ], 7 ]
}, ,  ]);

var Bs = Dr("transport::TransportPackage", [ "commons::PortablePackage" ], Ka, [ , , , , , {
    instance: [ 1 ]
}, ,  ]);

var zs = Dr("gtl::GTLFoundationPackage", [ "commons::PortablePackage" ], Ka, [ , , , , , {
    instance: [ 1 ]
}, ,  ]);

var Fs = Dr("sasicu::ICUPackage", [ "commons::PortablePackage" ], Ka, [ , , , , {
    getMinimalRelativeAssetPaths: [ [ 7 ], [ 7 ] ]
}, {
    instance: [ 1 ]
}, ,  ]);

un("sasicu", [ Fs ]);

Dr("commons::PickResultDetails", [], Ka, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::DataValue", [], Ka, [ , , , {
    stringIndex: 4,
    numericValue: 6,
    formattedValue: 7
}, {
    setStringValue: [ 0, 7, 4 ],
    hasNoValue: [ 2 ],
    getStringValue: [ 7 ],
    isMissing: [ 2 ],
    isMatchesAll: [ 2 ],
    isSuppressed: [ 2 ],
    isAllOthers: [ 2 ],
    isSparse: [ 2 ],
    isString: [ 2 ],
    getDisplayString: [ 7 ],
    getDescription: [ 7 ]
}, {
    _create_sn: [ 4, 7, 4 ],
    _create_n: [ 4, 6 ],
    formatNumericValue: [ 7, 6, 7 ],
    formatStringValue: [ 7, 7, 4 ],
    aggregate: [ 0, [ 1 ], [ 1 ] ]
}, , [ "_create" ] ]);

Dr("commons::PropertyHandle", [], Ka, [ , , , , {
    hasOverride: [ 2 ],
    clearOverride: [ 0 ]
}, , ,  ]);

Dr("commons::PropertyOwner", [], es, [ , , , , {
    getPropertyHandle: [ 1, 7 ]
}, , ,  ]);

Dr("commons::BaseModel", [ "commons::PropertyOwner" ], es, [ {
    BASE_MODEL_PARSER_ERROR: 10001,
    UNRESOLVED_ENTITY: 10002
}, , , , , , ,  ]);

Dr("commons::NamedStyleMap", [], Ka, [ , , , , {
    getDefinedStyleNames: [ [ 7 ] ],
    setStyleForName: [ 0, 7, 1 ],
    getStyleForName: [ 1, 7 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var js = {
    PIXELS: 0,
    PERCENTAGE: 1,
    POINTS: 2,
    INCHES: 3,
    CENTIMETERS: 4,
    MILLIMETERS: 5,
    PICAS: 6,
    DEVICEPIXELS: 7
};

var Vs = Dr("commons::Dimension", [ "commons::PropertyOwner", "commons::BaseModel" ], es, [ , {
    unit: 4,
    value: 5
}, , , {
    getScalarValueForUnit: [ 5, 4, 5, 5 ],
    asPixels: [ 5 ]
}, {
    _create_s: [ 4, 7 ],
    _create_nn: [ 4, 5, 4 ]
}, , [ "_create" ] ]);

var Hs = Dr("commons::AttributeBundle", [], es, [ , , , , {
    getNumberOfOverrides: [ 4 ],
    hasStyleAttributeValue: [ 2, 4 ],
    setStyleAttributeUnsignedValue: [ 0, 4, 4 ],
    getStyleAttributeDimensionValue: [ 1, 4, 1 ],
    clear: [ 0 ],
    setStyleAttributeStringValue: [ 0, 4, 7 ],
    getId: [ 4 ],
    getStyleAttributeUnsignedValue: [ 3, 4, 3 ],
    setStyleAttributeDimensionValue: [ 0, 4, 1 ],
    getDescription: [ 7 ],
    getStyleAttributeBoolValue: [ 2, 4, 2 ],
    getStyleAttributeStringValue: [ 7, 4, 7 ],
    setAttributesOnAttributeBundle: [ 0, 1 ],
    setAttribute: [ 0, 7, 7 ],
    getAttribute: [ 7, 7 ],
    setStyleAttributeFloatValue: [ 0, 4, 5 ],
    setParent: [ 0, 1 ],
    setStyleAttributeBoolValue: [ 0, 4, 2 ],
    hasOverrideForStyleAttribute: [ 2, 4 ],
    getStyleAttributeFloatValue: [ 5, 4, 5 ]
}, {
    _create_v: [ 4 ],
    _create_n: [ 4, 4 ],
    getAttributeParseTypeForStyleAttribute: [ 4, 4 ],
    isStyleAttributeAColorType: [ 2, 4 ],
    getAttributeTypeForStyleAttribute: [ 4, 4 ]
}, , [ "_create" ] ]);

var Us = Dr("commons::Style", [], es, [ {
    STYLE_CHANGED: 10052
}, , , {
    attributePriority: 4,
    name: 7,
    theme: 7,
    parentStyle: 1
}, {
    getNumberOfKPIRangeStyleElements: [ 4 ],
    initAttributeDefaults: [ 0 ],
    getCSS: [ 7, 2, 2, 2 ],
    updateKPIRangeStyleElements: [ 0 ],
    getLocalAttributeBundleForStyleElement: [ 1, 4 ],
    getNumberOfGraphDataStyleElements: [ 4 ],
    clear: [ 0 ],
    getDescription: [ 7 ],
    getGraphDataAttributeBundleAtIndex: [ 1, 4 ],
    updateGraphDataNodeStyleElements: [ 0 ],
    updateGraphDataStyleElements: [ 0 ],
    addAttributeBundlesDefinedInCSSFile: [ 0, 7 ],
    getNumberOfGraphDataNodeStyleElements: [ 4 ],
    addAttributeBundlesDefinedInCSSString: [ 0, 7 ],
    getAttributeBundleForPredefinedStyleElement: [ 1, 4 ],
    getGraphDataNodeStyleElementAtIndex: [ 1, 4 ],
    getAttributeBundleForStyleElement: [ 1, 4 ],
    resolveExpressions: [ 0, 1 ]
}, {
    _create_s: [ 4, 7 ],
    _create_n: [ 4, 4 ],
    getSharedInstance: [ 1 ],
    instance: [ 1 ],
    getStyleElementForName: [ 4, 7 ],
    setDefaultGlobalStyleType: [ 0, 4 ],
    createStyleMap: [ 1, 7, 7 ],
    getCombinedCSS: [ 7, 1, 7, 2, 2 ]
}, , [ "_create" ] ]);

var Gs = Object.freeze({
    __proto__: null,
    default: Us
});

Dr("gtl::GTLModel", [ "commons::PropertyOwner", "commons::BaseModel" ], es, [ , , , , {
    getStyle: [ 1 ],
    setStyle: [ 0, 1 ],
    getDescription: [ 7, 4 ]
}, , ,  ]);

Dr("gtl::AbstractAttributesMap", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    name: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::ConstantValue", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::Role", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    dataField: 7,
    tipLabel: 7,
    attributesMap: 1,
    tipFormat: 7,
    constantValue: 1
}, , , {
    isConstantRole: [ 2 ]
}, {
    _create_v: [ 4 ],
    _create_o: [ 4, 1 ]
}, , [ "_create" ] ]);

Dr("gtl::LabelValuePickResultDetails", [ "commons::PickResultDetails" ], Ka, [ , , , {
    isTruncated: 2,
    roles: [ 1 ],
    formattedValue: 7,
    isHyperlink: 2,
    label: 7,
    value: 1
}, , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::TimePickResultDetails", [ "commons::PickResultDetails" ], Ka, [ , , , {
    tipPosition: 4
}, , {
    _create: [ 4 ]
}, ,  ]);

var Ks;

function Ws(e) {
    Ks = e;
}

function $s() {
    return Ks;
}

var Ys = Dr("gtl::ControllerOperations", [], es, [ {
    CONTROLLER_LISTENER_ADDED: 30005,
    CONTROLLER_EVENT_TYPE: 30004
}, , , , , , ,  ]);

Dr("commons::MapSearchResult", [], es, [ , , , {
    country: 7,
    address: 7,
    latLon: 11,
    name: 7,
    location: 11,
    nodeId: 3
}, , {
    _create: [ 4 ]
}, ,  ]);

var qs = {
    INVALID: 0,
    PAN: 1,
    RECTANGLE_SELECT: 2,
    RADIAL_SELECT: 3,
    FREEFORM_SELECT: 4,
    POLYGON_SELECT: 5,
    ZOOM: 6,
    NONE: 7
};

var Xs = qs;

Dr("commons::MapSearchHint", [], es, [ , , , {
    hint: 7,
    isCollection: 2,
    key: 7
}, , {
    _create: [ 4 ]
}, ,  ]);

var Zs = {
    INFO_LEVEL: 0,
    WARNING_LEVEL: 1,
    ERROR_LEVEL: 2,
    FATAL_LEVEL: 3
};

var Js = Zs;

var Qs = Dr("commons::Warning", [], Ka, [ {
    SEVERITY_FATAL_MAX: 100,
    SEVERITY_WARNING_DEFAULT: 60,
    SEVERITY_ERROR_MIN: 70,
    SEVERITY_INFO_DEFAULT: 30,
    SEVERITY_WARNING_MAX: 69.99999,
    INVALID_TYPE: 10033,
    SEVERITY_INFO_MIN: 0,
    SEVERITY_ERROR_DEFAULT: 80,
    DEBUG_WARNING: 10034,
    SEVERITY_ERROR_MAX: 89.99999,
    SEVERITY_FATAL_MIN: 90,
    SEVERITY_INFO_MAX: 39.99999,
    SEVERITY_WARNING_MIN: 40,
    SEVERITY_FATAL_DEFAULT: 95
}, , , {
    severity: 6
}, {
    getLevel: [ 4 ],
    getTemplateParameters: [ [ 7 ] ],
    getWarningTypeName: [ 7 ],
    getMessage: [ 7 ],
    getWarningType: [ 4 ],
    getMessageTemplate: [ 7 ]
}, {
    _create_nns: [ 4, 4, 4, 7 ],
    _create_nnso: [ 4, 4, 4, 7, [ 7 ] ],
    sortWarningsDescendingBySeverity: [ [ 1 ], [ 1 ] ]
}, , [ "_create" ] ]);

var ei = Qs;

Dr("gtl::LocationFeature", [], es, [ , , , {
    country: 7,
    address: 7,
    color: 4,
    latLon: 11,
    name: 7,
    description: 7,
    pixelLocation: 11
}, {
    setVisible: [ 0, 2 ],
    clearSearch: [ 0 ],
    search: [ 0, 7, 7, 11, 4 ],
    select: [ 0, 2 ],
    getSearchHints: [ [ 1 ] ],
    getWarnings: [ [ 1 ] ],
    isSelected: [ 2 ],
    requestSearchHints: [ 0, 7, 4 ],
    setAddressFromReverseGeocode: [ 0 ],
    getSearchResults: [ [ 1 ] ],
    isVisible: [ 2 ]
}, , ,  ]);

Dr("gtl::StateProperty", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    key: 7,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::RendererState", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    stateProperties: [ 1 ]
}, , , , , ,  ]);

Dr("gtl::Pin", [ "gtl::LocationFeature" ], es, [ , , , , {
    getType: [ 4 ]
}, , ,  ]);

Dr("commons::GeoEnrichmentResult", [], es, [ , , , {
    decimals: 4,
    name: 7,
    alias: 7,
    fullName: 7,
    currency: 7,
    units: 7,
    type: 7,
    value: 7
}, {
    getFormattedValue: [ 7 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var ti = {
    DIRECT: 0,
    DRIVING_TIME: 1,
    DRIVING_DISTANCE: 2,
    WALKING_TIME: 3,
    WALKING_DISTANCE: 4,
    TRUCKING_TIME: 5,
    TRUCKING_DISTANCE: 6
};

var oi = ti;

var ni = {
    INVALID: 0,
    DEGREE: 1,
    METER: 2,
    KILOMETER: 3,
    FOOT: 4,
    MILE: 5,
    INCH: 6,
    HOUR: 7,
    MINUTE: 8,
    SECOND: 9
};

var ai = ni;

var ri = {
    NONE: 0,
    HISTORICAL_AVERAGE: 1,
    LIVE: 2
};

var si = ri;

Dr("commons::RouteInfo", [], es, [ , , , {
    mode: 4,
    amount: 5,
    breaks: [ 5 ],
    hour: 4,
    trafficType: 4,
    units: 4,
    day: 4,
    minute: 4
}, , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::Buffer", [ "gtl::LocationFeature" ], es, [ , , , , {
    getGeoEnrichmentData: [ 7 ],
    getGeoEnrichmentResults: [ [ 1 ] ],
    enrichBuffer: [ 0, [ 7 ] ],
    reset: [ 0 ],
    calculateBuffer: [ 0, 1 ],
    getAppliedBufferInfo: [ 1 ],
    getBufferInfo: [ 1 ]
}, , ,  ]);

Dr("gtl::Route", [ "gtl::LocationFeature" ], es, [ , , , {
    arrowEnabled: 2,
    waypoints: [ 1 ]
}, {
    calculateRoute: [ 0, [ 1 ], 1 ],
    getRouteInfo: [ 1 ],
    reset: [ 0 ],
    getDistanceString: [ 7 ],
    getTimeString: [ 7 ],
    getAppliedRouteInfo: [ 1 ]
}, , ,  ]);

Dr("gtl::LocationOperations", [], es, [ {
    REVERSE_GEOCODE_COMPLETE: 30054,
    ROUTE_COMPLETE: 30056,
    SELECTION_CHANGED: 30053,
    FEATURES_UPDATED: 30051,
    SEARCH_HINTS_READY: 30050,
    GEO_ENRICHMENT_COMPLETE: 30057,
    SEARCH_COMPLETE: 30049,
    FEATURE_SELECTED: 30052,
    LOCATION_UPDATED: 30058,
    BUFFER_COMPLETE: 30055,
    FEATURES_MOVED: 30059
}, , , , {
    deleteSearchResults: [ 0, [ 3 ] ],
    setAllFeaturesVisible: [ 0, 2 ],
    getWarnings: [ [ 1 ] ],
    requestSearchHints: [ 0, 7, 4, 2 ],
    getFeatureStates: [ 1 ],
    getSearchTerm: [ 7 ],
    listenForLocation: [ 0, 2 ],
    addGeographicSelection: [ 0, 1 ],
    setFeatureStates: [ 0, 1 ],
    search: [ 0, 7, 7, 11, 4 ],
    createPin: [ 1, 11, 2 ],
    cancelReverseGeocode: [ 0 ],
    getLastLocation: [ 11 ],
    getSearchPins: [ [ 1 ] ],
    addPinCopy: [ 1, 1 ],
    clearFeature: [ 0, 1 ],
    clearAllFeatures: [ 0 ],
    createWaypoint: [ 1, 11, 2 ],
    reverseGeocode: [ 0, 11, 2 ],
    getSearchHints: [ [ 1 ] ],
    canDoGeographicSelections: [ 2 ],
    getReverseGeocodeResult: [ 1 ],
    canDoSearch: [ 2 ],
    getMaximumBufferDistance: [ 5, 4, 4 ],
    clearSearch: [ 0 ],
    getFeatures: [ [ 1 ] ],
    setToken: [ 0, 7 ],
    cancelSearch: [ 0 ],
    selectFeatures: [ 0, [ 3 ] ],
    createRoute: [ 1, [ 1 ], 1 ],
    getToken: [ 7 ],
    addFeatureToMap: [ 0, 1 ],
    getSearchResults: [ [ 1 ] ],
    addCurrentLocation: [ 1 ],
    createPointBuffer: [ 1, 11, 2, 1 ]
}, , ,  ]);

var ii = Dr("gtl::MapChartOperations", [ "gtl::ControllerOperations" ], es, [ {
    MAP_PROVIDER_CHANGED: 30063,
    REVERSE_GEOCODE_COMPLETE: 30066,
    CURRENT_SEARCH_MARKER_SELECTED: 30060,
    MAP_VIEW_CHANGING: 30064,
    SEARCH_HINTS_READY: 30067,
    PINS_UPDATED: 30070,
    ESRI_DRIVETIME_COMPLETE: 30068,
    ESRI_GEO_ENRICHMENT_COMPLETE: 30069,
    PIN_SELECTED: 30061,
    MAP_BOUNDS_CHANGED: 30062,
    SEARCH_COMPLETE: 30065,
    LOCATION_UPDATED: 30071
}, , , {
    esriPremiumToken: 7
}, {
    getDragMode: [ 4 ],
    getLocationOperations: [ 1 ],
    pointInsideSelectionPolygon: [ 2, 11 ],
    reverseGeocode: [ 0, 11, 2 ],
    shouldInstallBrushController: [ 2 ],
    setWebMapConstraints: [ 0, 1 ],
    hasSelection: [ 2 ],
    getProjectedBounds: [ 12 ],
    zoom: [ 0, 5 ],
    getReverseGeocodeResult: [ 1 ],
    getMapDataBounds: [ 12 ],
    canDoDistanceSelections: [ 2 ],
    setViewport: [ 0, 12, 2 ],
    listenForLocation: [ 0, 2 ],
    canZoomIn: [ 2 ],
    cancelReverseGeocode: [ 0 ],
    canZoomOut: [ 2 ],
    getMapBounds: [ 12 ],
    resetView: [ 0 ],
    setShouldInstallBrushController: [ 0, 2 ],
    convertPixelToLatLon: [ 11, 11 ],
    setVisualStyleOverride: [ 0, 2 ],
    getViewSize: [ 13, 4 ],
    clearSelections: [ 0 ]
}, , ,  ]);

var li = Dr("commons::PortableEvent", [], Ka, [ , , , , {
    getType: [ 4 ]
}, , ,  ]);

var ci = Object.freeze({
    __proto__: null,
    default: li
});

var di = Dr("gtl::ControllerEvent", [ "commons::PortableEvent" ], Ka, [ , , , , {
    getControllerOperations: [ 1 ]
}, , ,  ]);

var ui = Dr("gtl::WebMapConstraints", [ "commons::PropertyOwner", "commons::BaseModel" ], es, [ , , , , {
    getProjection: [ 7 ],
    getMaxScale: [ 5 ],
    getExtent: [ 12 ]
}, {
    _create: [ 4, 7, 12, 5 ]
}, ,  ]);

var mi = [];

var pi = function() {
    return mi.some((function(e) {
        return e.activeTargets.length > 0;
    }));
};

var fi = function() {
    return mi.some((function(e) {
        return e.skippedTargets.length > 0;
    }));
};

var gi = "ResizeObserver loop completed with undelivered notifications.";

var hi = function() {
    var e;
    if (typeof ErrorEvent === "function") {
        e = new ErrorEvent("error", {
            message: gi
        });
    } else {
        e = document.createEvent("Event");
        e.initEvent("error", false, false);
        e.message = gi;
    }
    window.dispatchEvent(e);
};

var bi;

(function(e) {
    e["BORDER_BOX"] = "border-box";
    e["CONTENT_BOX"] = "content-box";
    e["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
})(bi || (bi = {}));

var vi = function() {
    function e(e, t, o, n) {
        this.x = e;
        this.y = t;
        this.width = o;
        this.height = n;
        this.top = this.y;
        this.left = this.x;
        this.bottom = this.top + this.height;
        this.right = this.left + this.width;
        return Object.freeze(this);
    }
    e.prototype.toJSON = function() {
        var e = this, t = e.x, o = e.y, n = e.top, a = e.right, r = e.bottom, s = e.left, i = e.width, l = e.height;
        return {
            x: t,
            y: o,
            top: n,
            right: a,
            bottom: r,
            left: s,
            width: i,
            height: l
        };
    };
    e.fromRect = function(t) {
        return new e(t.x, t.y, t.width, t.height);
    };
    return e;
}();

var yi = function(e) {
    return e instanceof SVGElement && "getBBox" in e;
};

var xi = function(e) {
    if (yi(e)) {
        var t = e.getBBox(), o = t.width, n = t.height;
        return !o && !n;
    }
    var a = e, r = a.offsetWidth, s = a.offsetHeight;
    return !(r || s || e.getClientRects().length);
};

var Si = function(e) {
    var t;
    var o = (t = e === null || e === void 0 ? void 0 : e.ownerDocument) === null || t === void 0 ? void 0 : t.defaultView;
    return !!(o && e instanceof o.Element);
};

var wi = function(e) {
    if (e.tagName === "INPUT" && e.type !== "image") {
        return false;
    }
    return true;
};

var Ci = typeof window !== "undefined" ? window : {};

var Ei = new Map;

var Ii = /auto|scroll/;

var _i = /^tb|vertical/;

var Di = /msie|trident/i.test(Ci.navigator && Ci.navigator.userAgent);

var Li = function(e) {
    return parseFloat(e || "0");
};

var Ti = function(e, t, o) {
    if (e === void 0) {
        e = 0;
    }
    if (t === void 0) {
        t = 0;
    }
    if (o === void 0) {
        o = false;
    }
    return Object.freeze({
        inlineSize: (o ? t : e) || 0,
        blockSize: (o ? e : t) || 0
    });
};

var Ri = Object.freeze({
    devicePixelContentBoxSize: Ti(),
    borderBoxSize: Ti(),
    contentBoxSize: Ti(),
    contentRect: new vi(0, 0, 0, 0)
});

var ki = function(e) {
    if (Ei.has(e)) {
        return Ei.get(e);
    }
    if (xi(e)) {
        Ei.set(e, Ri);
        return Ri;
    }
    var t = getComputedStyle(e);
    var o = yi(e) && e.ownerSVGElement && e.getBBox();
    var n = !Di && t.boxSizing === "border-box";
    var a = _i.test(t.writingMode || "");
    var r = !o && Ii.test(t.overflowY || "");
    var s = !o && Ii.test(t.overflowX || "");
    var i = o ? 0 : Li(t.paddingTop);
    var l = o ? 0 : Li(t.paddingRight);
    var c = o ? 0 : Li(t.paddingBottom);
    var d = o ? 0 : Li(t.paddingLeft);
    var u = o ? 0 : Li(t.borderTopWidth);
    var m = o ? 0 : Li(t.borderRightWidth);
    var p = o ? 0 : Li(t.borderBottomWidth);
    var f = o ? 0 : Li(t.borderLeftWidth);
    var g = d + l;
    var h = i + c;
    var b = f + m;
    var v = u + p;
    var y = !s ? 0 : e.offsetHeight - v - e.clientHeight;
    var x = !r ? 0 : e.offsetWidth - b - e.clientWidth;
    var S = n ? g + b : 0;
    var w = n ? h + v : 0;
    var C = o ? o.width : Li(t.width) - S - x;
    var E = o ? o.height : Li(t.height) - w - y;
    var I = C + g + x + b;
    var _ = E + h + y + v;
    var D = Object.freeze({
        devicePixelContentBoxSize: Ti(Math.round(C * devicePixelRatio), Math.round(E * devicePixelRatio), a),
        borderBoxSize: Ti(I, _, a),
        contentBoxSize: Ti(C, E, a),
        contentRect: new vi(d, i, C, E)
    });
    Ei.set(e, D);
    return D;
};

var Ai = function(e, t) {
    var o = ki(e), n = o.borderBoxSize, a = o.contentBoxSize, r = o.devicePixelContentBoxSize;
    switch (t) {
      case bi.DEVICE_PIXEL_CONTENT_BOX:
        return r;

      case bi.BORDER_BOX:
        return n;

      default:
        return a;
    }
};

var Mi = function() {
    function e(e) {
        var t = ki(e);
        this.target = e;
        this.contentRect = t.contentRect;
        this.borderBoxSize = [ t.borderBoxSize ];
        this.contentBoxSize = [ t.contentBoxSize ];
        this.devicePixelContentBoxSize = [ t.devicePixelContentBoxSize ];
    }
    return e;
}();

var Ni = function(e) {
    if (xi(e)) {
        return Infinity;
    }
    var t = 0;
    var o = e.parentNode;
    while (o) {
        t += 1;
        o = o.parentNode;
    }
    return t;
};

var Oi = function() {
    var e = Infinity;
    var t = [];
    mi.forEach((function o(n) {
        if (n.activeTargets.length === 0) {
            return;
        }
        var a = [];
        n.activeTargets.forEach((function t(o) {
            var n = new Mi(o.target);
            var r = Ni(o.target);
            a.push(n);
            o.lastReportedSize = Ai(o.target, o.observedBox);
            if (r < e) {
                e = r;
            }
        }));
        t.push((function e() {
            n.callback.call(n.observer, a, n.observer);
        }));
        n.activeTargets.splice(0, n.activeTargets.length);
    }));
    for (var o = 0, n = t; o < n.length; o++) {
        var a = n[o];
        a();
    }
    return e;
};

var Pi = function(e) {
    Ei.clear();
    mi.forEach((function t(o) {
        o.activeTargets.splice(0, o.activeTargets.length);
        o.skippedTargets.splice(0, o.skippedTargets.length);
        o.observationTargets.forEach((function t(n) {
            if (n.isActive()) {
                if (Ni(n.target) > e) {
                    o.activeTargets.push(n);
                } else {
                    o.skippedTargets.push(n);
                }
            }
        }));
    }));
};

var Bi = function() {
    var e = 0;
    Pi(e);
    while (pi()) {
        e = Oi();
        Pi(e);
    }
    if (fi()) {
        hi();
    }
    return e > 0;
};

var zi;

var Fi = [];

var ji = function() {
    return Fi.splice(0).forEach((function(e) {
        return e();
    }));
};

var Vi = function(e) {
    if (!zi) {
        var t = document.createTextNode("");
        var o = {
            characterData: true
        };
        new MutationObserver((function() {
            return ji();
        })).observe(t, o);
        zi = function() {
            t.textContent = "";
        };
    }
    Fi.push(e);
    zi();
};

var Hi = function(e) {
    Vi((function t() {
        requestAnimationFrame(e);
    }));
};

var Ui = 0;

var Gi = function() {
    return !!Ui;
};

var Ki = 60 / 5;

var Wi = {
    attributes: true,
    characterData: true,
    childList: true,
    subtree: true
};

var $i = [ "resize", "load", "transitionend", "animationend", "animationstart", "animationiteration", "keyup", "keydown", "mouseup", "mousedown", "mouseover", "mouseout", "blur", "focus" ];

var Yi = false;

var qi = function() {
    function e() {
        var e = this;
        this.stopped = true;
        this.listener = function() {
            return e.schedule();
        };
    }
    e.prototype.run = function(e) {
        var t = this;
        if (Yi) {
            return;
        }
        Yi = true;
        Hi((function() {
            var o = false;
            try {
                o = Bi();
            } finally {
                Yi = false;
                if (!Gi()) {
                    return;
                }
                if (o) {
                    t.run(60);
                } else if (e) {
                    t.run(e - 1);
                } else {
                    t.start();
                }
            }
        }));
    };
    e.prototype.schedule = function() {
        this.stop();
        this.run(Ki);
    };
    e.prototype.observe = function() {
        var e = this;
        var t = function() {
            return e.observer && e.observer.observe(document.body, Wi);
        };
        document.body ? t() : Ci.addEventListener("DOMContentLoaded", t);
    };
    e.prototype.start = function() {
        var e = this;
        if (this.stopped) {
            this.stopped = false;
            this.observer = new MutationObserver(this.listener);
            this.observe();
            $i.forEach((function(t) {
                return Ci.addEventListener(t, e.listener, true);
            }));
        }
    };
    e.prototype.stop = function() {
        var e = this;
        if (!this.stopped) {
            this.observer && this.observer.disconnect();
            $i.forEach((function(t) {
                return Ci.removeEventListener(t, e.listener, true);
            }));
            this.stopped = true;
        }
    };
    return e;
}();

var Xi = new qi;

var Zi = function(e) {
    !Ui && e > 0 && Xi.start();
    Ui += e;
    !Ui && Xi.stop();
};

var Ji = function(e) {
    return !yi(e) && !wi(e) && getComputedStyle(e).display === "inline";
};

var Qi = function() {
    function e(e, t) {
        this.target = e;
        this.observedBox = t || bi.CONTENT_BOX;
        this.lastReportedSize = {
            inlineSize: 0,
            blockSize: 0
        };
    }
    e.prototype.isActive = function() {
        var e = Ai(this.target, this.observedBox);
        if (Ji(this.target)) {
            this.lastReportedSize = e;
        }
        if (this.lastReportedSize.inlineSize !== e.inlineSize || this.lastReportedSize.blockSize !== e.blockSize) {
            return true;
        }
        return false;
    };
    return e;
}();

var el = function() {
    function e(e, t) {
        this.activeTargets = [];
        this.skippedTargets = [];
        this.observationTargets = [];
        this.observer = e;
        this.callback = t;
    }
    return e;
}();

var tl = new Map;

var ol = function(e, t) {
    for (var o = 0; o < e.length; o += 1) {
        if (e[o].target === t) {
            return o;
        }
    }
    return -1;
};

var nl = function() {
    function e() {}
    e.connect = function(e, t) {
        var o = new el(e, t);
        mi.push(o);
        tl.set(e, o);
    };
    e.observe = function(e, t, o) {
        if (tl.has(e)) {
            var n = tl.get(e);
            if (ol(n.observationTargets, t) < 0) {
                n.observationTargets.push(new Qi(t, o && o.box));
                Zi(1);
                Xi.schedule();
            }
        }
    };
    e.unobserve = function(e, t) {
        if (tl.has(e)) {
            var o = tl.get(e);
            var n = ol(o.observationTargets, t);
            if (n >= 0) {
                o.observationTargets.splice(n, 1);
                Zi(-1);
            }
        }
    };
    e.disconnect = function(e) {
        if (tl.has(e)) {
            var t = tl.get(e);
            mi.splice(mi.indexOf(t), 1);
            tl.delete(e);
            Zi(-t.observationTargets.length);
        }
    };
    return e;
}();

var al = function() {
    function e(e) {
        if (arguments.length === 0) {
            throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (typeof e !== "function") {
            throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
        }
        nl.connect(this, e);
    }
    e.prototype.observe = function(e, t) {
        if (arguments.length === 0) {
            throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (!Si(e)) {
            throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
        }
        nl.observe(this, e, t);
    };
    e.prototype.unobserve = function(e) {
        if (arguments.length === 0) {
            throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (!Si(e)) {
            throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
        }
        nl.unobserve(this, e);
    };
    e.prototype.disconnect = function() {
        nl.disconnect(this);
    };
    e.toString = function() {
        return "function ResizeObserver () { [polyfill code] }";
    };
    return e;
}();

var rl = function() {
    function e() {
        this._container = null;
        this._placeholder = null;
    }
    e.prototype.create = function(e) {
        this._container = e;
        this._placeholder = document.createElement("div");
        this._placeholder.style.position = "absolute";
        this._placeholder.style.backgroundColor = "lightgreen";
        this._placeholder.style.top = "0";
        this._placeholder.style.left = "0";
        this._placeholder.style.bottom = "0";
        this._placeholder.style.right = "0";
        this._container.appendChild(this._placeholder);
    };
    e.prototype.destroy = function() {
        if (this._container) {
            while (this._container.lastChild) this._container.removeChild(this._container.lastChild);
        }
    };
    e.prototype.updateBounds = function(e) {
        if (this._container && this._placeholder) {
            console.info("ArcGISBackground updateBounds", e);
            this._placeholder.style.left = e[0] + "px";
            this._placeholder.style.bottom = e[1] + "px";
            this._placeholder.style.right = this._container.offsetWidth - e[2] - e[0] + "px";
            this._placeholder.style.top = this._container.offsetHeight - e[3] - e[1] + "px";
        }
    };
    e.prototype.updateExtent = function(e) {
        console.info("ArcGISBackground updateExtent", e);
    };
    e.prototype.updateProviderInfo = function(e, t, o, n, a) {
        console.info("ArcGISBackground updateProviderInfo", e, t, o, n.length > 0, a.length > 0);
    };
    return e;
}();

var sl = function() {
    function e() {
        this._graph = null;
        this._graphCanvas = null;
        this._webmapContainer = null;
        this._resizeObserver = null;
        this._boundsChangedHandle = null;
        this._viewChangingHandle = null;
        this._mapProviderChangedHandle = null;
        this._mco = null;
        this._mcoPromise = null;
        this._webmap = null;
        this._injectedBackground = null;
    }
    e.prototype.create = function(e, t, o, n) {
        var a = this;
        var r, s;
        this.destroy();
        this._graph = e === null || e === void 0 ? void 0 : e.retain();
        if (!this._graph) {
            console.error("Cannot create stacked webmap without access to Graph.");
            return;
        }
        this._graphCanvas = o;
        this._webmapContainer = n;
        this._graph.setOpaque(false);
        this._webmapContainer.style.position = "absolute";
        var i = this._graph.getLayout();
        if (!this._graph) {
            console.error("Cannot create stacked webmap.  Layout does not contain a map.");
            return;
        }
        this.acquireMapChartOperations(i);
        this._webmap = this._injectedBackground ? this._injectedBackground : new rl;
        this.handleMapProviderChanged();
        (r = this._mcoPromise) === null || r === void 0 ? void 0 : r.then((function(e) {
            a._mapProviderChangedHandle = e.attachEvent(ii.MAP_PROVIDER_CHANGED, a.handleMapProviderChanged.bind(a));
        }));
        this._webmap.create(this._webmapContainer);
        this.synchronizeContainerSizes();
        this._resizeObserver = new al(this.synchronizeContainerSizes.bind(this));
        this._resizeObserver.observe(this._graphCanvas);
        (s = this._mcoPromise) === null || s === void 0 ? void 0 : s.then((function(e) {
            a._boundsChangedHandle = e.attachEvent(ii.MAP_BOUNDS_CHANGED, a.handleBoundsChanged.bind(a));
            a._viewChangingHandle = e.attachEvent(ii.MAP_VIEW_CHANGING, a.handleViewChanging.bind(a));
        }));
        this.setWebMapConstraints();
    };
    e.prototype.destroy = function() {
        var e, t, o, n, a, r;
        (e = this._boundsChangedHandle) === null || e === void 0 ? void 0 : e.detach();
        (t = this._viewChangingHandle) === null || t === void 0 ? void 0 : t.detach();
        (o = this._mapProviderChangedHandle) === null || o === void 0 ? void 0 : o.detach();
        if (this._webmap) {
            this._webmap.destroy();
            this._webmap = null;
        }
        this._mcoPromise = null;
        (n = this._mco) === null || n === void 0 ? void 0 : n.release();
        this._mco = null;
        (a = this._graph) === null || a === void 0 ? void 0 : a.release();
        (r = this._resizeObserver) === null || r === void 0 ? void 0 : r.disconnect();
        this._resizeObserver = null;
        this._graph = null;
        this._graphCanvas = null;
        this._webmapContainer = null;
    };
    e.prototype.handleMapProviderChanged = function() {
        var e, t;
        var o = (e = this._graph) === null || e === void 0 ? void 0 : e.getLayout();
        if (!o) return;
        var n = null;
        for (var a = 0, r = o.getContent() || []; a < r.length; a++) {
            var s = r[a];
            n = (t = s === null || s === void 0 ? void 0 : s.getMapLayer()) === null || t === void 0 ? void 0 : t.getMapProvider();
            if (n) break;
        }
        this.updateWebmapProvider(n);
    };
    e.prototype.handleBoundsChanged = function() {
        var e, t;
        (e = this._webmap) === null || e === void 0 ? void 0 : e.updateBounds(this.getMapBounds());
        (t = this._webmap) === null || t === void 0 ? void 0 : t.updateExtent(this.getExtent());
    };
    e.prototype.handleViewChanging = function() {
        var e;
        (e = this._webmap) === null || e === void 0 ? void 0 : e.updateExtent(this.getExtent());
    };
    e.prototype.getExtent = function() {
        if (!this._mco) return [ 0, 0, 0, 0 ]; else return this._mco.getMapDataBounds();
    };
    e.prototype.getMapBounds = function() {
        if (!this._mco) return [ 0, 0, 0, 0 ]; else return this._mco.getMapBounds();
    };
    e.prototype.acquireMapChartOperations = function(e) {
        var t = this;
        this._mcoPromise = new Promise((function(t) {
            e.attachEventOnce(Ys.CONTROLLER_EVENT_TYPE, (function(e) {
                if (e instanceof di) {
                    var o = e.getControllerOperations();
                    if (o instanceof ii) t(o.retain());
                }
            }));
        }));
        this._mcoPromise.then((function(e) {
            t._mco = e;
        }));
    };
    e.prototype.synchronizeContainerSizes = function() {
        var e, t;
        if (this._webmapContainer) {
            this._webmapContainer.style.width = ((e = this._graphCanvas) === null || e === void 0 ? void 0 : e.width) + "px";
            this._webmapContainer.style.height = ((t = this._graphCanvas) === null || t === void 0 ? void 0 : t.height) + "px";
        }
    };
    e.prototype.setWebMapConstraints = function() {
        var e;
        (e = this._mcoPromise) === null || e === void 0 ? void 0 : e.then((function(e) {
            e.setWebMapConstraints(new ui("102100", [ -20037508.231, -19971868.88, 40075016.463, 39943737.761 ], 9027.977));
        }));
    };
    e.prototype.updateWebmapProvider = function(e) {
        var t;
        (t = this._webmap) === null || t === void 0 ? void 0 : t.updateProviderInfo((e === null || e === void 0 ? void 0 : e.getURL()) || "", (e === null || e === void 0 ? void 0 : e.getBasemap()) || "", (e === null || e === void 0 ? void 0 : e.getPortalItemId()) || "", (e === null || e === void 0 ? void 0 : e.getApiKey()) || "", (e === null || e === void 0 ? void 0 : e.getToken()) || "");
    };
    e.prototype.injectBackground = function(e) {
        this._injectedBackground = e;
    };
    return e;
}();

un("gtl", [ zs ]);

Ws(sl);

vn((function(e) {
    Jo.module._ltjs_gtl_GraphPlatformUtilities_initializeGraphDefaults();
    if (e) {
        e();
    }
}), true);

un("transport", [ Bs ]);

Dr("transport::AbstractOperation", [], es, [ {
    DOWNLOAD_CANCELLED: 60020,
    DOWNLOAD_INSIGHT_REPORT_PACKAGE_COMPLETED: 60033,
    DOWNLOADING_ASSETS_COMPLETED: 60013,
    CREATE_AND_SAVE_INSIGHT_COMPLETED: 60035,
    PREVIEW_GENERATED: 60016,
    DOWNLOAD_COMPLETED: 60018,
    DOWNLOADING_IMAGES: 60014,
    PREVIEW_GENERATION_COMPLETED: 60017,
    DOWNLOAD_SASDRIVE_FILE_FAILED: 60044,
    SYNC_SASDRIVE_FILES_COMPLETED: 60045,
    REPORT_INITIALIZED: 60004,
    SUBSCRIPTION_CANCELLED: 60007,
    NOTHING_TO_DOWNLOAD: 60010,
    DOWNLOADING_ASSETS_STARTED: 60011,
    DOWNLOAD_INSIGHT_REPORT_PACKAGE_FAILED: 60034,
    SEARCH_FINISHED: 60028,
    REPORT_META_UPDATED: 60005,
    REMOVE_FROM_FAVORITES_COMPLETED: 60031,
    GET_INSIGHT_FAILED: 60038,
    CREATE_AND_SAVE_INSIGHT_FAILED: 60036,
    SYNC_INSIGHTS_FAILED: 60040,
    SEARCH_STARTED: 60022,
    SUB_SEARCH_NOT_SUPPORTED: 60025,
    ADD_TO_FAVORITES_FAILED: 60030,
    INITIALIZING_REPORT: 60003,
    SUB_SEARCH_FINISHED: 60024,
    APPLIED: 6e4,
    DOWNLOAD_SASDRIVE_FILE_COMPLETED: 60043,
    DOWNLOADING_ASSETS: 60012,
    SUB_SEARCH_FINISHED_NO_RESULTS: 60026,
    SYNC_INSIGHTS_COMPLETED: 60039,
    COMMITTED: 60001,
    ROLLED_BACK: 60002,
    UPDATE_INSIGHT_FAILED: 60042,
    DOWNLOAD_FAILED: 60021,
    ADD_TO_FAVORITES_COMPLETED: 60029,
    SUB_SEARCH_FINISHED_ERROR: 60027,
    GET_INSIGHT_COMPLETED: 60037,
    UPDATE_INSIGHT_COMPLETED: 60041,
    REMOVE_FROM_FAVORITES_FAILED: 60032,
    SUBSCRIPTION_COMPLETED: 60006,
    START_GENERATING_PREVIEWS: 60015,
    SUBSCRIPTION_FAILED: 60008,
    DOWNLOAD_WILL_RETRY: 60019,
    SUB_SEARCH_WILL_FINISH: 60023,
    WAITING_TO_DOWNLOAD: 60009,
    SYNC_SASDRIVE_FILES_FAILED: 60046
}, , , , {
    cancel: [ 0 ],
    apply: [ 0 ],
    isEqual: [ 2, 1 ],
    isPending: [ 2 ]
}, {
    _createSearchOperation_osno: [ 1, 1, 7, 4, 1 ],
    createRemoveFromFavoritesOperation: [ 1, 1, 1 ],
    _createSubscribeOperation_ooso: [ 1, 1, 1, 7, 1 ],
    createUnsubscribeOperation: [ 1, 1, 1 ],
    _createSearchOperation_oso: [ 1, 1, 7, 1 ],
    _createSubscribeOperations_oob: [ [ 1 ], 1, [ 1 ], 2 ],
    createRemoveFromFavoritesOperations: [ [ 1 ], 1, [ 1 ] ],
    _createSubscribeOperation_oo: [ 1, 1, 1 ],
    _createSubscribeOperation_oob: [ 1, 1, 1, 2 ],
    createUnsubscribeManyOperation: [ 1, 1, [ 1 ] ],
    createUnsubscribeAllOperation: [ 1, 1 ],
    createAddToFavoritesOperation: [ 1, 1, 1 ],
    _createSubscribeOperations_oo: [ [ 1 ], 1, [ 1 ] ],
    _createSearchOperation_ooso: [ 1, 1, 1, 7, 1 ],
    createClearHistoryOperation: [ 1, 1, 1 ],
    _createDownloadOperation_oo: [ 1, 1, 1 ],
    _createSubscribeOperation_ooo: [ 1, 1, 1, 1 ],
    _createSubscribeOperation_oos: [ 1, 1, 1, 7 ],
    _createDownloadOperation_ooo: [ 1, 1, 1, 1 ],
    createAddToFavoritesOperations: [ [ 1 ], 1, [ 1 ] ],
    _createSubscribeOperationForLink_ooo: [ 1, 1, 1, 1 ],
    _createSubscribeOperationForLink_ooso: [ 1, 1, 1, 7, 1 ],
    _createDownloadOperation_oob: [ 1, 1, 1, 2 ],
    _createSubscribeOperation_oosb: [ 1, 1, 1, 7, 2 ],
    createAddToHistoryOperation: [ 1, 1, 1 ],
    _createSubscribeOperations_ooo: [ [ 1 ], 1, [ 1 ], 1 ]
}, , [ "createSubscribeOperationForLink", "createSubscribeOperation", "createDownloadOperation", "createSubscribeOperations", "createSearchOperation" ] ]);

Dr("transport::TransportModel", [ "commons::PropertyOwner", "commons::BaseModel" ], es, [ , , , , {
    getDescription: [ 7, 4 ]
}, , ,  ]);

Dr("transport::MediaType", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    version: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::SupportedType", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    supportsReportLevelComments: 2,
    name: 7,
    supportsPrinting: 2,
    supportsObjectLevelComments: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::URL", [], Ka, [ {
    DEFAULT_PORT_HTTP_CONNECTION: 80,
    DEFAULT_PORT_HTTPS_SECURE_CONNECTION: 443
}, , , {
    path: 7,
    hostname: 7,
    fragment: 7,
    scheme: 7,
    port: 4,
    query: 7
}, {
    isValid: [ 2 ],
    getRawURLString: [ 7 ],
    getFinishedURLString: [ 7 ]
}, {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ]
}, , [ "_create" ] ]);

var il = Dr("transport::ServerConfig", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , {
    joinQueryTimeoutSeconds: 4,
    maxRowsGeoBubble: 4,
    maxRowsTimeSeries: 4,
    maxRowsButtonBar: 4,
    maxRowsGeoContour: 4,
    homePageUrl: 1,
    bannerMessage: 7,
    iframeSandbox: 7,
    reportImagesJobCreationUrl: 7,
    maxRowsGeoLine: 4,
    allowWebContentForMobile: 2,
    maxRowsGeoRegion: 4,
    supportedTypes: [ 1 ],
    maxRowsWordCloud: 4,
    exportExcelColumnLimit: 4,
    maxRowsBubble: 4,
    exportExcelRowLimit: 4,
    maxRowsTextInput: 4,
    maxRowsListTable: 4,
    maxRowsKpi: 4,
    maxRowsScatter: 4,
    logoUrl: 7,
    maxRowsHeatbox: 4,
    comparisonEpsilon: 6,
    enableMultiDimensionalSubtotals: 2,
    allowGuest: 2,
    maxRowsGeoPie: 4,
    exportTSVandCSVRowLimit: 4,
    maxRowsKeyValue: 4,
    searchAvailable: 2,
    title: 7,
    enableInteractiveData: 2,
    offlineLimit: 5,
    maxRowsGeoScatter: 4,
    passcodeAttempts: 4,
    reportImagesAvailable: 2,
    maxRowsDualAxisTimeSeries: 4,
    maxRowsGeoHeatmap: 4,
    maxRowsHeatmap: 4,
    maxRowsList: 4,
    printAvailable: 2,
    maxRowsDropdown: 4,
    transportServicesVersion: 7,
    exportTSVandCSVColumnLimit: 4,
    socketTimeoutLiveCancellableMillis: 4,
    maxRowsCrosstab: 4,
    transportServicesPlatform: 7,
    passcodeTimeout: 5,
    maxRowsCustomContent: 4,
    maxRowsGraphDefault: 4,
    catalogSearchAvailable: 2,
    environmentManagerUrl: 1,
    maxRowsTreeMap: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var ll = {
    HTTP_GET: 0,
    HTTP_POST: 1,
    HTTP_PUT: 2,
    HTTP_DELETE: 3,
    HTTP_HEAD: 4,
    HTTP_OPTIONS: 5
};

Dr("commons::Link", [ "commons::PropertyOwner", "commons::BaseModel" ], es, [ , {
    itemType: 7,
    responseType: 7,
    grantTypes: [ 7 ],
    method: 4,
    rel: 7,
    href: 7,
    type: 7,
    uri: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::CadenceVersion", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , {
    cadenceName: 7,
    cadenceVersion: 7,
    cadenceRelease: 7,
    links: [ 1 ],
    cadenceDisplayName: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var cl = Dr("transport::Server", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    hostName: 7,
    versionId: 4,
    scheme: 7,
    cadenceVersion: 1,
    versionString: 7,
    port: 4,
    meta: 1,
    useSSL: 2
}, , , {
    getBaseURL: [ 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var dl = cl;

var ul = {
    UNKNOWN: 0,
    ACCESS_ESRI_PREMIUM_SERVICES: 1,
    ACCESS_MOBILE_BI: 2,
    ACCESS_RECENTS: 3,
    ACCESS_SETTINGS: 4,
    ACCESS_VISUAL_ANALYTICS: 5,
    ACCESS_VISUAL_ANALYTICS_VIEWER: 6,
    ADD_SHARE: 7,
    ALLOW_WEB_CONTENT: 8,
    ADD_COMMENTS: 9,
    BROWSE_HDFS: 10,
    BUILD_CUSTOM_GRAPH: 11,
    CATALOG: 12,
    COMMENTS: 13,
    CREATE_ACTIVITY: 14,
    CREATE_AUDIT_ACTIVITY: 15,
    CREATE_COLLECTIONS: 16,
    CREATE_EXPLORATION: 17,
    CREATE_REPORT: 18,
    EMAIL: 19,
    EXPORT_DATA: 20,
    EXPORT_DETAIL_DATA: 21,
    EXPORT_IMAGE: 22,
    EXPORT_PDF: 23,
    EXPORT_EXCEL: 24,
    EXPORT_REPORT: 25,
    IMPORT_AND_LOAD_DATA: 26,
    INTERPRET_REPORT_VIEWER_NATURAL_LANGUAGE: 27,
    INSIGHT_REPORT: 28,
    GET_STATE_REPORT_VIEWER_NATURAL_LANGUAGE: 29,
    UPDATE_STATE_REPORT_VIEWER_NATURAL_LANGUAGE: 30,
    LIMIT_OFFLINE_ACCESS: 31,
    MANAGE_CUSTOM_LISTS: 32,
    MANAGE_ENVIRONMENT: 33,
    MANAGE_FAVORITES: 34,
    MANAGE_LASR_SERVER: 35,
    MANAGE_MOBILE_DEVICES: 36,
    MONITOR_LASR: 37,
    PERSONALIZATION: 38,
    PREPARE_DATA: 39,
    PURGE_MOBILE_REPORT_DATA: 40,
    REFRESH_DATA: 41,
    RENDER_REPORT_IMAGES: 42,
    REQUIRE_APPLICATION_PASSCODE: 43,
    SUBSCRIBE_TO_REPORT_ALERTS: 44,
    TEXT_TEMPLATES: 45,
    VAA_TABLE_AUTHORIZATION: 46,
    VIEW_COMMENTS: 47,
    VIEW_FAVORITES: 48,
    VIEW_REPORT: 49,
    VIEW_SHARES: 50
};

var ml = ul;

var pl = Dr("transport::UserInfo", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , {
    capabilities: [ 4 ],
    userDisplayName: 7,
    links: [ 1 ],
    userId: 7,
    memberships: [ 7 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var fl = pl;

Dr("transport::ReportSchemaVersion", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , {
    schema: 7,
    mediaType: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::FeatureFlagProduct", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    appName: 7,
    appRegistryId: 7,
    label: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::FeatureFlagParam", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    defaultValue: 2,
    sasInternal: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::FeatureFlagStrategy", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    id: 7,
    parameters: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::FeatureFlagInfo", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    createdBy: 7,
    strategies: [ 1 ],
    idLabel: 7,
    description: 7,
    creationTimeStamp: 7,
    id: 7,
    label: 7,
    issueTracking: [ 7 ],
    type: 7,
    version: 4,
    products: [ 1 ],
    revision: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::FeatureFlag", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    id: 7,
    version: 4,
    enabled: 2,
    info: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var gl = Dr("transport::Connection", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    server: 1,
    userInfo: 1,
    reportSchemaVersion: 1,
    authToken: 7,
    description: 7,
    uuid: 7,
    useGuestCredentials: 2,
    password: 7,
    overrideReportImageSizes: 2,
    reportSectionImageDefaultSize: 4,
    featureFlags: [ 1 ],
    esriLogonStatus: 4,
    reportImageDefaultSize: 4,
    initialServerUserId: 7,
    logonStatus: 4,
    userId: 7,
    esriPortalLogonStatus: 4,
    passwordKey: 7,
    isLocal: 2,
    lastSuccessfulLogon: 9,
    credentialStorageVersion: 4,
    reportImageSizes: [ 4 ],
    sasLogonApiMeta: 7,
    shouldAutoConnect: 2,
    sessionToken: 7,
    lastSuccessfulServerCommunication: 9,
    reportSectionImageSizes: [ 4 ],
    useEsriPremiumServices: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var hl = gl;

Dr("transport::TransportWarning", [ "commons::Warning" ], Ka, [ {
    INVALID_MEDIA: 60021,
    LOCAL_RESOURCE_EXPIRED: 60022,
    DUPLICATE_SUBSCRIBED_FOLDER: 60027,
    SERVICE_FAILURE: 60031,
    COMPLETE_WITH_WARNINGS: 60040,
    NOT_IN_ALLOWLIST: 60018,
    RESOURCE_NOT_ACCESSIBLE: 60020,
    UNAUTHORIZED: 60016,
    DUPLICATE_INSIGHT: 60028,
    PASSWORD_LOOKUP_FAILED: 60034,
    REQUEST_CANCELLED: 60035,
    CONFIGURATION_ERROR: 60038,
    DUPLICATE_REPORT: 60025,
    RESOURCE_NOT_FOUND: 60019,
    SAVE_REPORT_FAILED: 60044,
    DUPLICATE_CONNECTION_DESCRIPTION: 60024,
    SYSTEM_QUIESCED: 60037,
    STATUS_UNAVAILABLE: 60041,
    DUPLICATE_CONNECTION: 60023,
    CONNECTION_USER_MISMATCH: 60045,
    REPORT_ALREADY_UPDATING: 60043,
    SERVER_VERSION_NOT_SUPPORTED: 60012,
    PASSWORD_STORAGE_FAILED: 60033,
    SERVER_UNAVAILABLE: 60011,
    UNSUPPORTED_REQUEST: 60014,
    DUPLICATE_FILE: 60030,
    CERTIFICATE_ERROR: 60013,
    INVALID_ARGUMENTS: 60015,
    DUPLICATE_COLLECTION: 60026,
    LOCAL_OPERATION_FAILED: 60032,
    CANNOT_DOWNGRADE_REPORT: 60042,
    NETWORK_UNAVAILABLE: 60010,
    TIMEOUT: 60039,
    CAS_UPLOAD_FAILED: 60046,
    DUPLICATE_FOLDER: 60029,
    UNABLE_TO_CANCEL_REQUEST_COMPLETE: 60036,
    DENYLISTED: 60017
}, , , , , , ,  ]);

Dr("transport::SubserviceManager", [], es, [ , , , , {
    cancel: [ 1, 1 ],
    getConnection: [ 1 ]
}, , ,  ]);

var bl = Dr("commons::BaseVoucher", [], es, [ {
    FULFILLED: 10006,
    ISSUED: 10004,
    CANCELLED: 10005,
    WARNING: 10007
}, , , , {
    cancel: [ 0 ],
    getType: [ 4 ],
    getAssociatedModel: [ 1 ],
    getBaseWarning: [ 1 ],
    isCompleted: [ 2 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var vl = bl;

Dr("transport::Voucher", [ "commons::BaseVoucher" ], es, [ {
    FULFILLED: 10006,
    ISSUED: 10004,
    CANCELLED: 10005,
    WARNING: 10007
}, , , , {
    getRequestedResource: [ 1 ],
    getWarning: [ 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::ActivitiesManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    createActivity: [ 1, 7, 4 ]
}, , ,  ]);

Dr("transport::AlertableElement", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , {
    clause: 7,
    subscribed: 2,
    alertName: 7,
    evaluationStrategy: 4,
    intervalUnit: 4,
    evaluationInterval: 4,
    links: [ 1 ],
    label: 7,
    visualElement: 7,
    id: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var yl = {
    BASELINE: 0,
    INTERACTIVE: 1,
    NODATA: 2,
    CUSTOM: 3,
    OFFLINE: 4
};

var xl = yl;

var Sl = {
    REPORT: 0,
    DATA: 1,
    IMAGE: 2,
    XML: 3,
    CSS: 4,
    STP: 5,
    PACKAGE: 6,
    REQUERY: 7,
    REPORTSTATE: 8,
    RESOURCE: 9
};

Dr("transport::ReportAssetURL", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    contentKey: 7,
    name: 7,
    urlString: 7,
    usageVersion: 7,
    serverFile: 7,
    source: 7,
    type: 4,
    acceptType: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var wl = {
    REPORT: 0,
    DATA: 1,
    IMAGE: 2,
    XML: 3,
    CSS: 4,
    REPORTSTATE: 5,
    RESOURCE: 6
};

Dr("transport::File", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    contentKey: 7,
    name: 7,
    links: [ 1 ],
    serverFile: 7,
    source: 7,
    type: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::ReportManifest", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , {
    date: 7,
    reportElements: 7,
    updateCharacteristic: 4,
    warnings: 7,
    source: 7,
    locale: 7,
    urls: [ 1 ],
    xmlElementName: 7,
    totalSize: 4,
    cacheKey: 7,
    reportStateUri: 7,
    files: [ 1 ],
    modifiedTimeStamp: 7,
    formatLocale: 7,
    links: [ 1 ],
    dataLevel: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Cl = Dr("transport::ReportMetadata", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , {
    regeneratePackage: 7,
    resourceId: 7,
    keywords: [ 7 ],
    displayName: 7,
    description: 7,
    type: 7,
    dataSetFileName: 7,
    path: 7,
    lastModifiedDatetime: 9,
    cachedReports: [ 1 ],
    printReport: 7,
    modifiedBy: 7,
    links: [ 1 ],
    regenerateDocument: 7,
    createdByUserId: 7,
    thumbnail: 7,
    created: 7,
    GUID: 7,
    createdBy: 7,
    createdDatetime: 9,
    location: 7,
    shareURL: 7,
    lastModified: 7,
    shortName: 7,
    modifiedByUserId: 7
}, , , {
    createdUpdated: [ 0, 1 ],
    lastModifiedUpdated: [ 0, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var El = Cl;

Dr("transport::BaseReport", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ {
    UNSUBSCRIBED: 60051,
    CONNECTION_UPDATED: 60052,
    PROMOTION: 60049,
    SUBSCRIBED: 60050
}, {
    isRecycled: 2,
    meta: 1,
    reportCategory: 4,
    connection: 1,
    promoted: 7
}, {
    uuid: 7
}, , {
    getUserName: [ 7, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::TransportModelReference", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    addedDatetime: 9,
    added: 7,
    name: 7,
    isReference: 2,
    model: 1,
    links: [ 1 ],
    id: 7
}, , , {
    addedUpdated: [ 0, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::CASManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    getTableSummaryStatistics: [ 1, 1 ],
    getColumnFrequency: [ 1, 1 ],
    getTable: [ 1, 7, 7, 7 ],
    expandLibrary: [ 1, 1 ],
    getColumnSummaryStatistics: [ 1, 1 ],
    getServers: [ 1 ],
    getColumnDistinctValues: [ 1, 1 ],
    expandServer: [ 1, 1 ],
    expandTable: [ 1, 1 ],
    canUpload: [ 2, 1, 7 ],
    getTableDistinctCounts: [ 1, 1 ],
    uploadFileToTable: [ 1, 1 ]
}, , ,  ]);

Dr("transport::CatalogSearchSuggestions", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    facetName: 7,
    suggestions: [ 7 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::ReportCollectionOwner", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    reportReferences: [ 1 ]
}, , , {
    getReferenceToReport: [ 1, 1 ],
    getReferenceToBaseReport: [ 1, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::FolderMetadata", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , {
    resourceId: 7,
    lastModifiedDatetime: 9,
    displayName: 7,
    created: 7,
    description: 7,
    createdDatetime: 9,
    lastModified: 7,
    shortName: 7,
    type: 4
}, , , {
    createdUpdated: [ 0, 1 ],
    lastModifiedUpdated: [ 0, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::Folder", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::ReportCollectionOwner" ], es, [ , {
    isExpanded: 2,
    parent: 1,
    lastUpdated: 9,
    fileReferences: [ 1 ],
    isSubscribed: 2,
    depth: 4,
    lastVisited: 9,
    meta: 1,
    connection: 1,
    folderReferences: [ 1 ]
}, , , {
    toString2: [ 7 ],
    getPath: [ 7 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::CollectionsManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    _subscribeToCollection_s: [ 1, 7 ],
    getCollections: [ 1 ],
    getFolderContent: [ 1, 1 ],
    _subscribeToCollection_o: [ 1, 1 ],
    checkForUpdates: [ 1, 1 ],
    getRootCollectionsFolder: [ 1 ],
    isValidFolder: [ 2, 1 ]
}, , [ "subscribeToCollection" ] ]);

Dr("transport::FileItem", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , {
    parentUri: 7,
    documentType: 7,
    modifiedDatetime: 9,
    encoding: 7,
    creationDatetime: 9,
    size: 4,
    createdBy: 7,
    contentDisposition: 7,
    name: 7,
    modifiedTimeStamp: 7,
    links: [ 1 ],
    modifiedBy: 7,
    creationTimeStamp: 7,
    id: 7,
    contentType: 7
}, , , {
    createdUpdated: [ 0, 1 ],
    modifiedUpdated: [ 0, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::CommentManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    _getComments_v: [ 1 ],
    _addComment_o: [ 1, 1 ],
    canEdit: [ 2, 1 ],
    _editComment_o: [ 1, 1 ],
    supportsObjectLevelComments: [ 2 ],
    replyToComment: [ 1, 1, 1 ],
    _editComment_os: [ 1, 1, 7 ],
    isCommentAttachmentDownloaded: [ 2, 1 ],
    _addComment_os: [ 1, 1, 7 ],
    supportsReportLevelComments: [ 2 ],
    _getComments_s: [ 1, 7 ],
    canDelete: [ 2, 1 ],
    removeComment: [ 1, 1 ],
    getCommentAttachment: [ 1, 1 ]
}, , [ "getComments", "editComment", "addComment" ] ]);

Dr("commons::AuthDelegate", [], es, [ , , , , {
    extractAuthorizations: [ 0, 1 ],
    injectAuthorizations: [ 0, 1 ]
}, , ,  ]);

Dr("commons::MapConnectionInfo", [], es, [ {
    ESRI_PORTAL_TOKEN_UPDATED: 10027,
    ESRI_PREMIUM_TOKEN_UPDATED: 10028,
    ESRI_ALL_TOKENS_UPDATED: 10029
}, , , {
    esriPortalUrl: 7,
    regionEndpoint: 1,
    authDelegate: 1,
    esriPremiumToken: 7,
    localEsriServicesUrl: 7,
    esriPortalRequiresAuthentication: 2,
    localEsriHomeUrl: 7,
    version: 4,
    esriPortalToken: 7,
    localEsriServicesSsoAppId: 7
}, , , ,  ]);

Dr("transport::ConnectionManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    clearSessionToken: [ 0 ],
    logon: [ 1 ],
    requestEsriPremiumToken: [ 0 ],
    getEsriLogonStatus: [ 4 ],
    getLogonStatus: [ 4 ],
    supportsWebLogonFlow: [ 4 ],
    setEsriPortalCredentials: [ 1, 7, 7 ],
    getEsriCredentials: [ 1 ],
    requestEsriAllTokens: [ 1 ],
    getEsriPortalAuthenticationSSOLoginURL: [ 7 ],
    shouldUsePkceForOauth2: [ 2 ],
    setEsriCredentials: [ 1, 7, 7 ],
    getAuthorizationHeaders: [ [ 7 ] ],
    getEsriPortalLogonStatus: [ 4 ],
    checkDevice: [ 1 ],
    initializeSession: [ 1, 7 ],
    getStoredPassword: [ 7 ],
    generateCodeVerifier: [ 7 ],
    getServerConfig: [ 1 ],
    filteredCatalogSearchSuggestionsForFacetType: [ 1, 4, 7 ],
    keepAlive: [ 1 ],
    getLogo: [ 1 ],
    getEsriPortalCredentials: [ 1 ],
    requestEsriPortalToken: [ 0 ],
    isPersonalizationEnabled: [ 2 ],
    getEsriPortalAuthenticationConfiguration: [ 4 ],
    hasCapability: [ 2, 4 ],
    downloadFile: [ 1, 7, 7 ],
    getMapConnectionInfo: [ 1 ],
    logoff: [ 1 ],
    _log_o: [ 1, [ 7 ] ],
    catalogSearchSuggestionsForFacetType: [ 1, 4 ],
    getCookieHeaders: [ [ 7 ] ],
    migrateToWebLogonForViya35: [ 0 ],
    _log_s: [ 1, 7 ],
    filteredCatalogSearchSuggestionsForAllFacetTypes: [ [ 1 ], 7 ],
    getUserAvatar: [ 1, 7 ]
}, , [ "log" ] ]);

var Il = Dr("transport::DeviceInfo", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    deviceType: 7,
    osVersion: 7,
    deviceModel: 7,
    deviceId: 7,
    mobileAppVersion: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var _l = Dr("transport::DepotConfiguration", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    shouldPerformReportSchemaChecks: 2,
    shouldCheckForDataUpdatesOnOpen: 2,
    reportSchemaCheckFrequency: 4,
    clientid: 7,
    shouldPerformPeriodicReportDataChecks: 2,
    reportDataCreateWaitTime: 5,
    supportsViya4Servers: 2,
    allowMetadataFailure: 2,
    userCacheSize: 4,
    reportImageCacheMaxFileCount: 4,
    generateReportImagesInterval: 5,
    generateReportImagesTimeout: 5,
    shouldAllowAuditActivityService: 2,
    shouldUsePkceForOauth2: 2,
    expandedFolderReportCacheLimit: 4,
    shouldAutoDeleteInsightAtSync: 2,
    persistentStorageDirectoryPath: 7,
    shouldEnforceOfflineLimit: 2,
    shouldAllowActivityService: 2,
    reportSectionImageDefaultSize: 4,
    shouldAutoCleanupCollectionBasedReportSubscriptions: 2,
    shouldGetCatalogSearchSuggestions: 2,
    generateReportDataLevel: 4,
    shouldAutoRefreshCollections: 2,
    shouldAutoRefreshSharedItems: 2,
    avatarRefreshPeriod: 4,
    shouldAutoCleanupSubscribedFolderBasedReportSubscriptions: 2,
    auditid: 7,
    useHighContrastReportStyle: 2,
    supportsTransportServerLogging: 2,
    shouldAutoUpdateSubscribedReports: 2,
    avatarSubdirectory: 7,
    shouldUseCatalogSearchViewModels: 2,
    shouldAutoStartReportAssetDownloads: 2,
    maximumShareEntries: 4,
    maximumNumberOfConcurrentReportDownloads: 4,
    reportDataCheckFrequency: 4,
    reportImageType: 4,
    cacheDirectoryPath: 7,
    passwordKeyChainGroup: 7,
    maximumHistoryEntries: 4,
    shouldAllowEsriSsoSupport: 2,
    deviceInfo: 1,
    shouldDownloadAvatarsForComments: 2,
    shouldAllowAdditionalFolderObjects: 2,
    deviceCheckFrequency: 4,
    maximumInsights: 4,
    shouldDoConnectionKeepAlive: 2,
    insightSubdirectory: 7,
    shouldDownloadReportImagesOnSubscribe: 2,
    shouldGetCadenceVersion: 2,
    credentialKeyChainGroup: 7,
    checkForSearchSupport: 2,
    sampleServerHostname: 7,
    useLastAccessDefaultUserWhenUsernameUnknown: 2,
    cssAdapter: 4,
    allowFutureServers: 2,
    enableUsernameLookupForSASDriveFile: 2,
    shouldAutoDownloadPrintedReports: 2,
    reportImageDownloadTimeout: 4,
    capabilityToCheckForAccess: 4,
    portfolioRefreshFrequency: 4,
    reportDataCheckWaitTime: 5,
    thumbnailSubdirectory: 7,
    generateReportTimeout: 4,
    downloadedReportImageSubdirectory: 7,
    generateReportStatusTimeout: 4,
    autoUpdateFrequency: 4,
    shouldAllowFolderSubscription: 2,
    sasDriveSubdirectory: 7,
    connectionSubdirectory: 7,
    shouldAutoRefreshHistory: 2,
    wipePasswords: 2,
    shouldGetFeatureFlagsOnAuth: 2,
    reportImageCacheMaxTotalSize: 4,
    shouldGetTextSummaryOnSubscribe: 2,
    reportImageDefaultSize: 4,
    maximumNumberOfConcurrentAssetDownloadsPerReport: 4,
    checkForReportImagesSupport: 2,
    reportSubdirectory: 7,
    shouldAutoSyncInsights: 2,
    shouldAllowViya35WebLogon: 2,
    shouldUseCatalogSearchApi: 2,
    shouldAutoRefreshFavorites: 2,
    reportImageSizes: [ 4 ],
    shouldPerformPeriodicDeviceChecks: 2,
    shouldPerformPeriodicReportUpdateChecks: 2,
    supportsTethered: 2,
    delayEventsAtStartup: 2,
    printFilesSubdirectory: 7,
    shouldAutoConnect: 2,
    reportSectionImageSizes: [ 4 ],
    includeGuestAccountOnSecureStore: 2,
    generateReportStatusInterval: 4,
    connectionKeepAliveFrequency: 4,
    shouldGeneratePreviewsOnDownload: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::FolderManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    getReportFolderItemFromPath: [ 1, 7 ],
    getFolderContentFromPath: [ 1, 7 ],
    getFolderItemFromPathForFolder: [ 1, 7 ],
    getFolderContent: [ 1, 1 ]
}, , ,  ]);

Dr("transport::FavoritesManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    removeFavorites: [ 1, [ 1 ], 1 ],
    addFavoriteGroup: [ 1, 7, 1 ],
    getFavorites: [ 1, 1 ],
    renameFavoriteGroup: [ 1, 7, 1 ],
    addFavorites: [ 1, [ 1 ], 1 ],
    updateFavoriteReportStatus: [ 1 ],
    isValidReport: [ 2, 1 ],
    getRootFavoritesFolder: [ 1 ],
    getFavoriteState: [ 4, 1 ],
    addFavorite: [ 1, 1, 1 ],
    isRootFavorite: [ 2, 1 ],
    isFavoriteInFolder: [ 2, 1, 1 ],
    removeFavoriteGroup: [ 1, 1 ],
    removeFavorite: [ 1, 1, 1 ],
    isValidGroupName: [ 2, 7 ],
    isValidFolder: [ 2, 1 ]
}, {
    isFavorite: [ 2, 1 ]
}, ,  ]);

Dr("transport::HistoryManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    getRootHistoryFolder: [ 1 ],
    getHistory: [ 1 ],
    removeFromHistory: [ 1, 1 ],
    clearHistory: [ 1 ],
    addToHistory: [ 1, 1 ]
}, , ,  ]);

Dr("transport::ReportAsset", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    isDownloadInProgress: 2,
    downloadSize: 4,
    lastAttemptTime: 9,
    lastContentKey: 7,
    localPath: 7,
    report: 1,
    numberOfDownloadAttempts: 4,
    downloadedAmount: 4,
    url: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::DownloadStatus", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    numberOfRequiredAssets: 4,
    numberOfFailedDownloads: 4,
    isPaused: 2,
    numberOfDownloadsInProgress: 4,
    assets: [ 1 ],
    numberOfPendingDownloads: 4,
    needsPreviewsGenerated: 2,
    numberOfAvailableAssets: 4,
    needsThumbnailsDownloaded: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::DisplayRecord", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    dateCreated: 9,
    subscribeMethod: 4,
    dateLastViewed: 9,
    isDisplayed: 2,
    displayedCount: 4,
    isGenerateInProgress: 2,
    dateUpdated: 9,
    subscribedWithUserState: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::Duid", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    name: 7,
    label: 7,
    type: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::ReportAuxiliary", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    serializeToFile: 2,
    sectionCount: 4,
    finishedGeneratingPreviews: 2,
    generatedPreviewCount: 4,
    textTemplateSummary: 7,
    sectionNames: [ 7 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Dl = Dr("transport::Report", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::BaseReport" ], es, [ {
    DOWNLOAD_STARTED: 60104,
    DOWNLOAD_COMPLETED: 60105,
    DATA_UPDATED: 60106,
    THUMBNAIL_GENERATED: 60103
}, {
    displayRecord: 1,
    updateCharacteristic: 4,
    manifest: 1,
    parentCollections: [ 7 ],
    duids: [ 1 ],
    alertableItems: [ 1 ],
    globalLastViewed: 9,
    subscribedFolders: [ 7 ],
    auxiliary: 1,
    favoritesCounter: 3,
    originReport: 1,
    isZombie: 2,
    dataLastModified: 9,
    downloadStatus: 1,
    hasIgnoredChange: 2,
    isFavorite: 2
}, , , {
    restoreManifest: [ 2, 7 ],
    isTransient: [ 2 ],
    saveManifest: [ 2, 7 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var Ll = Dl;

Dr("transport::MobileBIClientURL", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    hostname: 7,
    password: 7,
    scheme: 7,
    port: 4,
    description: 7,
    action: 4,
    section: 7,
    guest: 2,
    userid: 7,
    reportLocation: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::ReportManager", [ "transport::SubserviceManager" ], es, [ {
    REPORT_READY: 60107,
    REPORT_CHANGED: 60108,
    REPORT_DELETED: 60110,
    REPORT_UPDATED: 60109
}, , , , {
    _initializeTetheredReport_s: [ 1, 7 ],
    getShareURL: [ 7, 1 ],
    getSubscriptionProgress: [ 5, 1 ],
    _getReport_o: [ 1, 1 ],
    getAllCatalogSearchSuggestions: [ 1 ],
    getReportByContent: [ 1, 7 ],
    isTethered: [ 2, 1 ],
    getNewReportInstanceWithUserState: [ 1, 7, 7 ],
    _initializeTetheredReport_o: [ 1, 1 ],
    _getReport_s: [ 1, 7 ],
    getThumbnail: [ 1, 1 ],
    updateAlertSubscriptions: [ 1, 1, [ 7 ], [ 7 ] ],
    getThumbnailPath: [ 7, 1 ],
    getAlertableItems: [ 1, 1 ],
    _printReport_ooss: [ 1, 1, 1, 7, 7 ],
    setThemeVersion: [ 0, 7 ],
    unsubscribeFromAlert: [ 1, 1, 7 ],
    buildUUID: [ 7, 1, 1 ],
    reportOpened: [ 0, 1 ],
    _printReport_os: [ 1, 1, 7 ],
    _printReport_oos: [ 1, 1, 1, 7 ],
    checkForUpdates: [ 1, [ 1 ] ],
    getReportStatus: [ 4, 1 ],
    deleteReportFromServer: [ 1, 1, 1 ],
    _printReport_oss: [ 1, 1, 7, 7 ],
    getCommentManager: [ 1, 1 ],
    _getReportMetadata_s: [ 1, 7 ],
    getMobileBIClientURLWithSection: [ 7, 1, 7 ],
    _getReportMetadata_o: [ 1, 1 ],
    _printReport_oo: [ 1, 1, 1 ],
    _getReportWithUserState_o: [ 1, 1 ],
    _printReport_osss: [ 1, 1, 7, 7, 7 ],
    _getReportWithUserState_s: [ 1, 7 ],
    getReportSubdirectoryPath: [ 7, 1 ],
    getShareURLWithSection: [ 7, 1, 7 ],
    getMobileBIClientURL: [ 7, 1 ],
    getCatalogSearchSuggestions: [ 1, 4 ],
    getNewReportInstance: [ 1, 7, 7 ],
    _printReport_o: [ 1, 1 ],
    lookUpReportsByPath: [ 1, [ 7 ] ],
    getReportByContentWithDataLevel: [ 1, 7, 4 ],
    reportClosed: [ 0, 1 ],
    subscribeToAlert: [ 1, 1, 7 ],
    getReportByContentForClient: [ 1, 7 ],
    ensureUUID: [ 0, 1, 1 ],
    canSaveReportState: [ 2, 1 ],
    getReportForLocation: [ 1, 7, 2 ],
    getReportByReposKey: [ 1, 7 ]
}, {
    handleDataQuery: [ 0, 1, 1 ],
    isPrintable: [ 2, 1 ],
    isRemovable: [ 2, 1 ],
    parseMobileBIClientURL: [ 1, 7 ]
}, [ "getReportWithUserState", "getReport", "initializeTetheredReport", "getReportMetadata", "printReport" ] ]);

Dr("transport::InsightManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    deleteAllInsights: [ 1 ],
    removeAllInsightsDeviceOnly: [ 1 ],
    createSyncInsightsOperation: [ 1 ],
    deleteInsight: [ 1, 7 ],
    getInsightFolderPath: [ 7, 7 ],
    createUpdateInsightOperation: [ 1, 7, 1, 7 ],
    getInsightList: [ 1 ],
    createCreateAndSaveInsightOperation: [ 1, 7, 1 ]
}, , ,  ]);

Dr("transport::FileMetadata", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , {
    createdByUserId: 7,
    resourceId: 7,
    lastModifiedDatetime: 9,
    createdByUsername: 7,
    displayName: 7,
    created: 7,
    modifiedByUsername: 7,
    createdDatetime: 9,
    lastModified: 7,
    shortName: 7,
    modifiedByUserId: 7
}, , , {
    createdUpdated: [ 0, 1 ],
    lastModifiedUpdated: [ 0, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::SASDriveFile", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , {
    reportId: 7,
    fileMeta: 1,
    removedFromServer: 2,
    serverFileItem: 1,
    connection: 1,
    uuid: 7,
    newerVersionAvailable: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::SASDriveFileManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    sasDriveFileFrom: [ 1, 7 ],
    removeAllSASDriveFilesDeviceOnly: [ 1 ],
    createReportPackageFromReport: [ 1, 1 ],
    createDownloadOperation: [ 1, 7, 1 ],
    importFile: [ 7, 7, 9 ],
    removeSASDriveFileDeviceOnly: [ 1, 7 ]
}, , ,  ]);

Dr("transport::SubscribedFoldersManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    shouldAllowFolderSubscription: [ 2 ],
    checkForZombies: [ 0 ],
    _subscribeToFolder_o: [ 1, 1 ],
    _subscribeToFolder_s: [ 1, 7 ],
    checkForUpdates: [ 1, 1 ],
    updateFolderSubscriptionsStatus: [ 0 ],
    isValidFolder: [ 2, 1 ]
}, , [ "subscribeToFolder" ] ]);

Dr("transport::ReportViewerNLUManager", [ "transport::SubserviceManager" ], es, [ {
    DOMAIN_LOAD_STARTED: 60007,
    DOMAIN_LOAD_IN_PROGRESS: 60008,
    DOMAIN_LOAD_FAILED: 60009
}, , , , {
    interpretations: [ 1, 1 ]
}, , ,  ]);

Dr("transport::SharedItemManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    getSharedByMeFolder: [ 1 ],
    getSharedByMe: [ 1 ],
    getSharedWithMeFolder: [ 1 ],
    getSharedWithMe: [ 1 ]
}, , ,  ]);

Dr("transport::TextTemplatesManager", [ "transport::SubserviceManager" ], es, [ , , , , {
    _getSummaryMessage_ss: [ 1, 7, 7 ],
    _getSummaryMessage_ob: [ 1, 1, 2 ]
}, , [ "getSummaryMessage" ] ]);

Dr("transport::ThumbnailManager", [ "transport::SubserviceManager" ], es, [ {
    FAILED: 60123,
    STARTED: 60121,
    FINISHED: 60122
}, , , , {
    getDownloadedReportImagePath: [ 7, 1, 4 ],
    getPreviewThumbnail: [ 1, 1 ],
    cleanupDownloadedReportImages: [ 0, 1 ],
    downloadReportImage: [ 1, 1 ],
    notifyGenerationFailed: [ 0, 1 ],
    getReportImageLink: [ 1, 1 ],
    getSectionThumbnail: [ 7, 1, 7, 2 ],
    hasPreviewForSection: [ 2, 1, 3 ],
    notifyGenerationFinished: [ 0, 1 ],
    getSectionThumbnails: [ [ 7 ], 1 ],
    getAllSectionImageLinks: [ 1, 1 ],
    getDownloadedSectionImagePath: [ 7, 1, 7, 4 ],
    getDownloadedSectionImagePathByIndex: [ 7, 1, 4, 4 ],
    getGeneratedThumbnailDirectoryPath: [ 7, 1 ],
    getGeneratedThumbnailPath: [ 7, 1, 3 ],
    downloadAllSectionImages: [ 1, 1 ],
    notifyThumbnailGenerated: [ 0, 1, 3 ],
    notifyGenerationStarted: [ 0, 1 ]
}, , ,  ]);

Dr("transport::DownloadManager", [], es, [ {
    DOWNLOAD_STARTED: 60003,
    DOWNLOAD_CANCELLED: 60005,
    DOWNLOADS_FINISHED_ABNORMALLY: 60006,
    INVALID_REPORT: 6e4,
    REPORT_DOWNLOAD_LIMIT_EXCEEDED: 60002,
    DOWNLOAD_IN_PROGRESS: 60001,
    DOWNLOAD_FAILED: 60004
}, , , , {
    resume: [ 1, 1 ],
    cancel: [ 1, 1 ],
    cancelAll: [ 1 ],
    pauseAll: [ 1 ],
    resumeAll: [ 1 ],
    start: [ 1, 1 ],
    pause: [ 1, 1 ]
}, , ,  ]);

Dr("transport::MuxManager", [], es, [ , , , , {
    removeFavorites: [ 1, [ 1 ] ],
    addFavorites: [ 1, [ 1 ] ]
}, , ,  ]);

Dr("transport::InsightItem", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , {
    shared: 2,
    added: 7,
    memberCount: 4,
    description: 7,
    originatingReportLocation: 7,
    type: 7,
    uri: 7,
    createdBy: 7,
    name: 7,
    modifiedTimeStamp: 7,
    modifiedBy: 7,
    links: [ 1 ],
    id: 7,
    creationTimeStamp: 7,
    contentType: 7,
    iconUri: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::Insight", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ , {
    item: 1,
    reportId: 7,
    isDeleted: 2,
    isReportPackageGenerated: 2,
    connection: 1,
    id: 7,
    isHidden: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("transport::SubscribedFolder", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel" ], es, [ {
    FOLDER_UPDATED: 60118,
    FOLDER_DELETED: 60119
}, {
    location: 7,
    connection: 1,
    isZombie: 2,
    uuid: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Tl = Dr("transport::Depot", [], es, [ {
    DEPOT_CONNECTION_CHANGED: 60064,
    DEPOT_INSIGHTS_SYNC_FAILURE: 60085,
    DEPOT_CONNECTION_ESRI_PORTAL_BAD_CREDENTIALS: 60076,
    DEPOT_SHAREDWITHME_CHANGED: 60093,
    DEPOT_CONNECTION_ESRI_DISABLED: 60074,
    DEPOT_CONNECTION_ESRI_PORTAL_HAS_TOKEN: 60075,
    DEPOT_RESUMED: 60061,
    DEPOT_CONNECTION_REQUIRES_AUTHENTICATION: 60069,
    DEPOT_CONNECTION_SERVER_VERSION_NOT_SUPPORTED: 60081,
    DEPOT_CONNECTION_ESRI_NO_CAPABILITY: 60072,
    DEPOT_REPORT_SCHEMA_CHECK_COMPLETE: 60098,
    DEPOT_BUSY: 60058,
    DEPOT_CONNECTION_AUTHENTICATION_FAILED: 60065,
    DEPOT_IDLE: 60059,
    DEPOT_DOWNLOAD_SASDRIVE_FILE_FAILURE: 60091,
    DEPOT_SYNC_SASDRIVE_FILES_COMPLETED: 60094,
    DEPOT_FAVORITES_CHANGED: 60082,
    DEPOT_IMPORT_VA_PUBLISHED_REPORT_COMPLETE: 60099,
    DEPOT_DEVICE_CHECK_COMPLETE: 60096,
    DEPOT_CREATE_SAVE_INSIGHT_FAILURE: 60087,
    DEPOT_CONNECTION_OFFLINE_LIMIT_EXCEEDED: 60066,
    DEPOT_CONNECTION_ESRI_SSO_NOT_AVAILABLE: 60080,
    DEPOT_CONNECTION_ESRI_PORTAL_NO_CREDENTIALS: 60077,
    DEPOT_INSIGHTS_SYNC_COMPLETE: 60084,
    DEPOT_CONNECTION_KEEP_ALIVE_COMPLETE: 60068,
    DEPOT_CONNECTION_ESRI_LOGIN_FAILURE: 60070,
    DEPOT_CONNECTION_ESRI_LOGIN_SUCCESS: 60071,
    DEPOT_SHAREDBYME_CHANGED: 60092,
    DEPOT_CONNECTION_ESRI_PORTAL_NOT_REQUIRED: 60078,
    DEPOT_CONNECTION_REMOVED: 60063,
    DEPOT_DOWNLOAD_SASDRIVE_FILE_COMPLETED: 60090,
    DEPOT_IMPORT_VA_PUBLISHED_REPORT_FAILURE: 60100,
    DEPOT_IMPORT_VA_FILE_POST_PROCESSED: 60101,
    DEPOT_CONNECTION_DENYLIST_ALLOWLIST: 60067,
    DEPOT_UPDATE_INSIGHT_COMPLETE: 60088,
    DEPOT_CONNECTION_ADDED: 60062,
    DEPOT_UPDATE_INSIGHT_FAILURE: 60089,
    DEPOT_ACTIVITY_CREATED: 60057,
    DEPOT_CONNECTION_ESRI_NO_CREDENTIALS: 60073,
    DEPOT_HISTORY_CHANGED: 60083,
    DEPOT_CREATE_SAVE_INSIGHT_COMPLETE: 60086,
    DEPOT_SYNC_SASDRIVE_FILES_FAILURE: 60095,
    DEPOT_CONNECTION_ESRI_PORTAL_NOT_AVAILABLE: 60079,
    DEPOT_IMPORT_VA_FILE_NOT_POST_PROCESSED: 60102,
    DEPOT_USER_CHECK_COMPLETE: 60097,
    DEPOT_QUIESCED: 60060
}, , , , {
    removeAllConnections: [ 1 ],
    refreshReportFavoriteFlags: [ 1, 1 ],
    getCASManager: [ 1, 1 ],
    commit: [ 1 ],
    isSubscribeCategory: [ 2, 1 ],
    getStatus: [ 4 ],
    logEmailSent: [ 1, 1, 7 ],
    getCollectedLogs: [ [ 7 ] ],
    restoreAllSharedFromCache: [ 0 ],
    isPublishCategory: [ 2, 1 ],
    quiesceWhenDone: [ 1 ],
    getConnectionByDescription: [ 1, 7 ],
    getReportManager: [ 1, 1 ],
    getTextTemplatesManager: [ 1, 1 ],
    getPasscodeTimeout: [ 5 ],
    editConnectionDescription: [ 1, 1, 7 ],
    _getAllInsights_v: [ [ 1 ] ],
    shouldUseCatalogSearchViewModels: [ 2 ],
    getCollectionsManager: [ 1, 1 ],
    checkForFileUpdatesAndDownload: [ 0 ],
    _getAllInsights_o: [ [ 1 ], 1 ],
    refreshAllFavorites: [ 1, 1 ],
    simulateReportDownloadsFailed: [ 0 ],
    guessConnectionScheme: [ 1, 7 ],
    getReportViewerNLUManager: [ 1, 1 ],
    _getConnection_snsb: [ 1, 7, 4, 7, 2 ],
    getInsightManager: [ 1, 1 ],
    _getReportForInsight_s: [ 1, 7 ],
    isDebugEnabled: [ 2 ],
    _getConnection_s: [ 1, 7 ],
    addLocalConnection: [ 1 ],
    _getAllFiles_o: [ [ 1 ], 1 ],
    removeReport: [ 1, 1 ],
    _getFile_os: [ 1, 1, 7 ],
    _getAllFiles_v: [ [ 1 ] ],
    setUseHighContrastReportStyle: [ 0, 2 ],
    changeAutoUpdateFrequency: [ 0, 4 ],
    getPasscodeAttempts: [ 4 ],
    _getAllReportsForInsights_v: [ [ 1 ] ],
    getLocalConnection: [ 1, 2 ],
    removeAllReports: [ 1 ],
    startCollectingLogs: [ 0, 4, 4 ],
    resume: [ 1 ],
    _getSubscribedFolder_o: [ 1, 1 ],
    getSASDriveFileManager: [ 1, 1 ],
    _getAllReportsForInsights_o: [ [ 1 ], 1 ],
    getConnectionManager: [ 1, 1 ],
    getDownloadManager: [ 1 ],
    _getSubscribedReport_os: [ 1, 1, 7 ],
    refreshSharedItemsWithMe: [ 1, 1 ],
    _getSubscribedFolder_s: [ 1, 7 ],
    _getSubscribedFolder_os: [ 1, 1, 7 ],
    refreshHistory: [ 1, 1 ],
    _getFile_s: [ 1, 7 ],
    shouldUsePkceForOauth2: [ 2 ],
    stopCollectingLogs: [ 0 ],
    getSharedItemManager: [ 1, 1 ],
    copyFeatureFlagsToMultiverse: [ 4, 1 ],
    getAllPublishedReports: [ [ 1 ] ],
    getFolderManager: [ 1, 1 ],
    getSubscribedFoldersManager: [ 1, 1 ],
    removeSubscribedFolder: [ 1, 1 ],
    _getSubscribedReport_s: [ 1, 7 ],
    addConnection: [ 1, 1 ],
    isInsightCategory: [ 2, 1 ],
    getFavoritesManager: [ 1, 1 ],
    _getAllReports_v: [ [ 1 ] ],
    _getReportForInsight_os: [ 1, 1, 7 ],
    _getAllReports_o: [ [ 1 ], 1 ],
    releaseDelayedEvents: [ 0 ],
    getDepotConfiguration: [ 1 ],
    editConnectionPassword: [ 1, 1, 7 ],
    shutdown: [ 1 ],
    getConnections: [ [ 1 ], 7, 4 ],
    _getInsight_os: [ 1, 1, 7 ],
    _getAllSubscribedReports_v: [ [ 1 ] ],
    getActivitiesManager: [ 1, 1 ],
    _getAllPortfolioReports_v: [ [ 1 ] ],
    refreshRootFavorites: [ 1, 1 ],
    getNextUniqueLocalReportLabel: [ 7, 7 ],
    getLocalReportWithLabel: [ 1, 7 ],
    setDebug: [ 0, 2 ],
    _getAllPortfolioReports_o: [ [ 1 ], 1 ],
    isPasscodeRequired: [ 2 ],
    _getDepotReport_s: [ 1, 7 ],
    _getAllSubscribedReports_o: [ [ 1 ], 1 ],
    renameLocalReport: [ 0, 1, 7 ],
    _getInsight_s: [ 1, 7 ],
    restore: [ 2 ],
    getAllConnections: [ [ 1 ] ],
    getMuxManager: [ 1 ],
    _getDepotReport_os: [ 1, 1, 7 ],
    quiesce: [ 1 ],
    getHistoryManager: [ 1, 1 ],
    getThumbnailManager: [ 1, 1 ],
    refreshSharedItemsByMe: [ 1, 1 ],
    verifyConnection: [ 1, 1 ],
    removeConnection: [ 1, 1 ],
    refreshCollections: [ 1, 1 ],
    updateTimers: [ 0 ],
    getAllServerConnections: [ [ 1 ] ]
}, {
    _create: [ 4, 1 ],
    areTransportDebugFeaturesEnabled: [ 2 ],
    getDefaultConnectionDescription: [ 7, 7, 7 ],
    getDefaultGuestConnectionDescription: [ 7, 7 ]
}, [ "getReportForInsight", "getAllSubscribedReports", "getSubscribedFolder", "getAllReportsForInsights", "getAllInsights", "getInsight", "getAllPortfolioReports", "getDepotReport", "getFile", "getAllReports", "getConnection", "getAllFiles", "getSubscribedReport" ] ]);

var Rl = Tl;

var kl = Dr("transport::DepotEvent", [ "commons::PortableEvent" ], Ka, [ , , , , {
    getAssociatedModel: [ 1 ]
}, , ,  ]);

var Al = kl;

var Ml = {
    LETTER: 0,
    A3: 1,
    A4: 2,
    A5: 3,
    B4: 4,
    B5: 5,
    CSHEET: 6,
    DSHEET: 7,
    ESHEET: 8,
    ENV_DL: 9,
    EXECUTIVE: 10,
    FOLIO: 11,
    LEGAL: 12,
    LEDGER: 13,
    JPOST: 14,
    CUSTOM: 15
};

var Nl = {
    NONE: 0,
    EXPAND_CLIPPED_CONTENT_IN_APPENDIX: 1
};

var Ol = {
    LANDSCAPE: 0,
    PORTRAIT: 1
};

Dr("transport::ReportRendererSetup", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType" ], es, [ , , , , , , ,  ]);

var Pl = {
    READERDEFAULT: 0,
    NONE: 1,
    BOOKMARKS: 2,
    THUMBNAILS: 3
};

var Bl = Dr("transport::PrintSetup", [ "commons::PropertyOwner", "commons::BaseModel", "transport::TransportModel", "transport::MediaType", "transport::ReportRendererSetup" ], es, [ , {
    showAppendix: 2,
    fitOption: 4,
    destination: 4,
    showPageNumbers: 2,
    locale: 7,
    marginRight: 7,
    utcOffsetInSeconds: 4,
    coverPageText: 7,
    formatterLocale: 7,
    showPrintedTableOfContents: 2,
    dpi: 4,
    paperHeight: 7,
    orientation: 4,
    paperType: 4,
    reportElements: 7,
    useHighContrastReportStyle: 2,
    tableOfContentsDisplay: 4,
    showCoverPage: 2,
    marginLeft: 7,
    paperWidth: 7,
    coverPageDateTime: 7,
    marginBottom: 7,
    appendixDisplay: 7,
    showEmptyRowsAndColumns: 2,
    marginTop: 7,
    enablePdfAccessibleTags: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

const zl = new Map;

function Fl(e, t = false) {
    const o = zl.get(e);
    if (o instanceof Promise) {
        return o;
    }
    if (!t) {
        if (o) {
            return Promise.resolve(o);
        }
        if (o === null) {
            return Promise.reject("No guest token available");
        }
    }
    const n = fetch(`${e}/SASLogon/oauth/token`, {
        method: "POST",
        credentials: "omit",
        headers: {
            Authorization: "Basic c2FzLm1vYmlsZWJpOg==",
            Accept: "application/json, */*"
        },
        body: new URLSearchParams("grant_type=guest")
    }).then((e => e.json())).then((t => {
        if (!t.access_token) {
            throw new Error(`Unable to retrieve access token. ${t.error}: ${t.error_description}`);
        }
        const o = `bearer ${t.access_token}`;
        zl.set(e, o);
        return o;
    })).catch((t => {
        zl.set(e, null);
        return Promise.reject(t);
    }));
    zl.set(e, n);
    return n;
}

let jl = 0;

function Vl() {
    jl++;
    return `/webDepot/caches/${jl}`;
}

function Hl(e) {
    const t = jn("dataLevel");
    if (!t) {
        return e;
    }
    switch (t.toUpperCase()) {
      case "BASELINE":
        return xl.BASELINE;

      case "INTERACTIVE":
        return xl.INTERACTIVE;

      case "NODATA":
        return xl.NODATA;
    }
    return e;
}

function Ul(e) {
    const t = new _l;
    t.setCacheDirectoryPath(Vl());
    t.setShouldAutoConnect(true);
    t.setShouldAutoUpdateSubscribedReports(false);
    t.setShouldAutoStartReportAssetDownloads(true);
    t.setSupportsTransportServerLogging(false);
    t.setGenerateReportDataLevel(Hl(e.dataLevel));
    t.setSupportsTethered(false);
    t.setShouldPerformPeriodicDeviceChecks(false);
    t.setMaximumNumberOfConcurrentReportDownloads(1);
    t.setShouldAutoDownloadPrintedReports(false);
    t.setGenerateReportTimeout(55);
    t.setAutoUpdateFrequency(30);
    t.setGenerateReportImagesTimeout(.5);
    t.setAllowFutureServers(true);
    t.setMaximumHistoryEntries(18);
    t.setClientid("sas.mobilebi");
    t.setAllowMetadataFailure(true);
    const o = new Il;
    o.setDeviceModel(navigator.platform);
    o.setDeviceType("web");
    o.setOsVersion(navigator.appVersion);
    o.setMobileAppVersion("HTML5 8.3");
    o.setDeviceId("va-sdk");
    t.setDeviceInfo(o);
    t.setCheckForSearchSupport(false);
    t.setShouldUseCatalogSearchApi(false);
    t.setCheckForReportImagesSupport(false);
    t.setShouldGetCadenceVersion(false);
    t.setUseHighContrastReportStyle(e.highContrast ?? false);
    if (sas?.ltjs?.jest) {
        t.setShouldPerformPeriodicReportUpdateChecks(false);
        t.setShouldGetFeatureFlagsOnAuth(false);
    }
    return t;
}

function Gl(e, t) {
    const o = new dl;
    const n = document.createElement("a");
    n.href = e;
    const a = n.protocol === "https:";
    const r = parseInt(n.port);
    o.setScheme(a ? "https" : "http");
    o.setHostName(n.hostname);
    o.setUseSSL(a);
    o.setPort(r || (a ? 443 : 80));
    if (t !== undefined) {
        o.setVersionId(t);
        o.setMeta(new il);
    }
    return o;
}

function Kl(e) {
    const t = new hl;
    t.setShouldAutoConnect(false);
    t.setServer(e);
    return t;
}

var Wl = {
    UNSPECIFIED: 0,
    CATEGORICAL: 1,
    QUANTITATIVE: 2
};

var $l = Wl;

Dr("commons::AbstractMapProvider", [ "commons::PropertyOwner", "commons::BaseModel" ], es, [ {
    MAP_PROJECTION_CHANGED: 1e4
}, {
    name: 7
}, , , {
    setNeedsInteractiveCoverage: [ 0, 2 ],
    needsInteractiveCoverage: [ 2 ]
}, , ,  ]);

Dr("commons::Aggregator", [], Ka, [ , , , , {
    getMissingCount: [ 6 ],
    getStringValue: [ 7 ],
    _aggregate_o: [ 0, 1 ],
    getMin: [ 6 ],
    _aggregate_snnn: [ 0, 7, 4, 3, 3 ],
    getNumericValue: [ 6, 4, 6 ],
    getFirst: [ 1 ],
    getMax: [ 6 ],
    _aggregate_nnn: [ 0, 6, 3, 3 ],
    getCount: [ 6 ],
    getSum: [ 6 ]
}, {
    _create: [ 4, 2 ]
}, [ "aggregate" ] ]);

Dr("commons::Expression", [], Ka, [ , , , , {
    evaluateAsBoolean: [ 2, 1 ],
    evaluateAsNumber: [ 6, 1 ],
    getDataType: [ 4 ],
    isCharacterExpression: [ 2 ],
    isBooleanExpression: [ 2 ],
    invalidate: [ 0, 2 ],
    isNumericExpression: [ 2 ],
    hasValidStructure: [ 2 ],
    hasValidTypeAgreement: [ 2 ],
    getValidationErrors: [ [ 4 ] ],
    isLeaf: [ 2 ],
    evaluateAsString: [ 7, 1 ],
    debugLogInvalidExpression: [ 0 ],
    resolveParameters: [ [ 1 ], 1 ],
    isConstant: [ 2 ],
    getAllExpressionsWithPreorderTraversal: [ [ 1 ], 2 ],
    isKeyword: [ 2 ],
    isValidForContext: [ 2, 1 ],
    toString: [ 7 ]
}, , ,  ]);

var Yl = {
    DOT: 0,
    LINK: 1,
    BUTTON: 2,
    TAB: 3,
    PROGRESSNUMBER: 4,
    THUMBNAIL: 5
};

var ql = Yl;

var Xl = {
    NUMBER: 0,
    STRING: 1,
    UNDEFINED: 2
};

Dr("commons::Variable", [], es, [ , , , {
    dataType: 4,
    name: 7,
    formatName: 7,
    aggregation: 4,
    label: 7
}, {
    isNumber: [ 2 ],
    isDateTime: [ 2 ],
    isString: [ 2 ],
    description: [ 7 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var Zl = Dr("commons::Column", [ "commons::Variable" ], es, [ {
    VALUE_CHANGED: 10010,
    RANGE_CHANGED: 10011
}, , , {
    total: 6,
    strings: [ 7 ],
    stringIndices: [ 4 ],
    numbers: [ 6 ],
    numberOfRows: 3,
    dataUsage: 4
}, {
    getMissingValueIndices: [ [ 3 ] ],
    getMaximumString: [ 7 ],
    setNumberAtIndex: [ 0, 6, 4, 2 ],
    setStringAtIndex: [ 0, 7, 4, 2 ],
    containsAllOther: [ 2 ],
    getDataValueAtIndex: [ 1, 3, 2 ],
    getStringAtIndex: [ 7, 3 ],
    getMaximumNumber: [ 6 ],
    getFormattedTotal: [ 7 ],
    getFormattedValueAtIndex: [ 7, 3, 2 ],
    getUniqueFormattedValueIndices: [ [ 3 ] ],
    containsMissing: [ 2 ],
    getDataValuesAtIndices: [ [ 1 ], [ 3 ], 2 ],
    containsMatchesAll: [ 2 ],
    getMinimumNumber: [ 6 ],
    getFormattedValues: [ [ 7 ] ],
    getNumberAtIndex: [ 6, 3 ]
}, {
    _create_v: [ 4 ],
    _create_ssnnn: [ 4, 7, 7, 4, 4, 4 ]
}, , [ "_create" ] ]);

Dr("commons::RowStates", [], es, [ {
    COLOR_CHANGED: 10047,
    EXCLUDED_CHANGED: 10046,
    SYMBOL_CHANGED: 10048,
    HIDDEN_CHANGED: 10044,
    LABELED_CHANGED: 10045,
    HIGHLIGHTED_CHANGED: 10049,
    SELECTED_CHANGED: 10043
}, , , , {
    toggleSelectedAtSpecifiedIndices: [ 0, [ 3 ] ],
    areAnySelected: [ 2 ],
    setHighlightedAtSpecifiedIndices: [ 0, 2, [ 3 ] ],
    areAnyExcluded: [ 2 ],
    setExcludedOnlyAtSpecifiedIndices: [ 0, 2, [ 3 ] ],
    setExcludedAtSpecifiedIndices: [ 0, 2, [ 3 ] ],
    getExcludedIndices: [ [ 3 ] ],
    getNumberOfExcludedIndices: [ 4 ],
    getNumberOfHighlightedIndices: [ 4 ],
    areAnyHighlighted: [ 2 ],
    getNumberOfSelectedIndices: [ 4 ],
    getSelected: [ [ 2 ] ],
    setSelectedAtIndex: [ 0, 2, 4 ],
    getHighlightedIndices: [ [ 3 ] ],
    setExcludedAtIndex: [ 0, 2, 4 ],
    getExcluded: [ [ 2 ] ],
    getHighlighted: [ [ 2 ] ],
    setHighlightedAtIndex: [ 0, 2, 4 ],
    setHighlightedOnlyAtSpecifiedIndices: [ 0, 2, [ 3 ] ],
    getNumberOfRows: [ 4 ],
    getSelectedIndices: [ [ 3 ] ],
    setSelectedAll: [ 0, 2 ],
    setSelectedOnlyAtSpecifiedIndices: [ 0, 2, [ 3 ] ],
    setSelectedAtSpecifiedIndices: [ 0, 2, [ 3 ] ]
}, {
    _create: [ 4, 4 ]
}, ,  ]);

var Jl = Dr("commons::DataSet", [], es, [ {
    DATASET_INVALID_EXPSILON: 10007,
    CHANGED: 10013,
    DATASET_NULL_COLUMN: 10009,
    COLUMN_INVALID_FORMAT: 10016,
    DATASET_ZERO_COLUMNS: 10006,
    DATASET_NONRECTANGULAR: 10010,
    COLUMN_DUPLICATE_LABEL: 10014,
    DATASET_EXTREME_EPSILON: 10008,
    COLUMN_INVALID_USAGE: 10017,
    DATASET_NO_NAME: 10005,
    COLUMN_NO_NAME: 10011,
    COLUMN_UNDEFINED_DATA_TYPE: 10018,
    COLUMN_NO_LABEL: 10013,
    COLUMN_DUPLICATE_NAME: 10012,
    COLUMN_NO_FORMAT: 10015
}, , , {
    orderedUniqueStringValues: [ 7 ],
    comparisonEpsilon: 6,
    name: 7
}, {
    setColumns: [ 0, [ 1 ] ],
    _selectRows_ob: [ 0, [ 3 ], 2 ],
    printTable: [ 0, 4 ],
    getRowStates: [ 1 ],
    computeTotals: [ 0, 1 ],
    update: [ 0 ],
    getColumnWithName: [ 1, 7 ],
    getColumns: [ [ 1 ] ],
    getStringColumns: [ [ 1 ] ],
    getColumnAtIndex: [ 1, 4 ],
    assignStringValuesFromIndices: [ 0 ],
    getNumberOfRows: [ 3 ],
    getCombinedCSV: [ 7 ],
    getIndexedCSV: [ 7 ],
    setColumnAtIndex: [ 0, 1, 4 ],
    validate: [ [ 1 ], 2 ],
    _selectRows_nb: [ 0, 4, 2 ],
    addColumn: [ 0, 1 ],
    getSortIndexForString: [ 4, 7 ],
    descriptionTable: [ 7, 4, 2, 2, 2 ],
    getNumberColumns: [ [ 1 ] ],
    getStringTableCSV: [ 7 ],
    getNumberOfColumns: [ 3 ],
    filter: [ 1, 1 ],
    getFormattedValueAtIndex: [ 7, 4, 4 ],
    getColumnWithLabel: [ 1, 7 ],
    print: [ 0 ],
    selectionContainsAllOther: [ 2 ],
    clone: [ 1 ]
}, {
    _create_obb: [ 4, [ 1 ], 2, 2 ],
    _create_on: [ 4, 1, 4 ],
    _create_s: [ 4, 7 ],
    _create_bb: [ 4, 2, 2 ],
    createFromBase64SerialData: [ 1, 7 ],
    serializeAsBase64String: [ 7, 1 ]
}, [ "selectRows" ], [ "_create" ] ]);

var Ql = Dr("commons::ColorUtilities", [], Ka, [ , , , , , {
    getHexStringFromColor: [ 7, 10 ],
    getSASColorFromHexString: [ 10, 7 ],
    getContrastingColor: [ 10, 10, 10 ],
    interpolateColor: [ 10, 5, 10, 10 ]
}, ,  ]);

Dr("commons::RuleContext", [], Ka, [ , , , , , , ,  ]);

Dr("commons::Rule", [], Ka, [ , , , , {
    setBoundContext: [ 0, 1 ],
    clone: [ 1 ],
    run: [ 0, 1, 1 ],
    getBoundContext: [ 1 ]
}, , ,  ]);

var ec = Dr("commons::CursorChangeEvent", [ "commons::PortableEvent" ], Ka, [ {
    CURSOR_CHANGE: 10012
}, , , , {
    getCursorShape: [ 4 ]
}, , ,  ]);

var tc = Dr("commons::CursorManager", [], es, [ , , , , , {
    getSharedInstance: [ 1 ],
    getCursorShape: [ 4 ]
}, ,  ]);

Dr("commons::DataTreeNode", [], Ka, [ , , , {
    measureValues: [ 1 ],
    rowIndexVector: [ 4 ],
    children: [ 1 ],
    formattedValue: 7,
    measureAggregators: [ 1 ],
    measureNames: [ 7 ],
    value: 1
}, {
    getParent: [ 1 ],
    getDepth: [ 3 ],
    isCollapsed: [ 2 ],
    isRoot: [ 2 ],
    _getUniqueNodePath_n: [ [ 1 ], 3 ],
    getParentNodeAtLevel: [ 1, 3 ],
    removeChild: [ 0, 1 ],
    getNumberOfMeasures: [ 3 ],
    getChildNodesAtLevel: [ [ 1 ], 3 ],
    getNodeFromChildNodePath: [ 1, [ 1 ] ],
    isLeaf: [ 2 ],
    getNumberOfChildren: [ 3 ],
    getLevel: [ 3 ],
    isLastChild: [ 2 ],
    getLeafNodes: [ [ 1 ] ],
    isFirstChild: [ 2 ],
    getChildForFormattedValue: [ 1, 7 ],
    getRoot: [ 1 ],
    _getUniqueNodePath_v: [ [ 1 ] ],
    addChild: [ 0, 1 ]
}, {
    _create: [ 4, 7, 1 ]
}, [ "getUniqueNodePath" ] ]);

var oc = {
    DATA: 0,
    ASCENDING: 1,
    DESCENDING: 2
};

Dr("commons::SortContext", [], Ka, [ , , , {
    preprocessing: 4,
    customSortValues: [ 7 ],
    rawColumnName: 7,
    direction: 4,
    columnName: 7
}, , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::HierarchySortContext", [ "commons::SortContext" ], Ka, [ , , , , {
    getSortForLevel: [ 1, 1 ],
    setSortForLevel: [ 0, 1, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::DimensionalSortContext", [ "commons::SortContext" ], Ka, [ , , , , {
    setSortForCategory: [ 0, 1, 1 ],
    getSortForCategory: [ 1, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::Level", [], es, [ , , , , {
    getFormatName: [ 7 ],
    getName: [ 7 ],
    getLabel: [ 7 ],
    getCurrentDisplayString: [ 7 ],
    getCurrentValue: [ 1 ],
    getDataType: [ 4 ],
    isDateTime: [ 2 ],
    getFormattedCurrentValue: [ 7 ],
    setCurrentValue: [ 0, 1 ],
    isDrillable: [ 2 ]
}, {
    _create: [ 4, 7, 7, 7, 4, 2, 1 ]
}, ,  ]);

Dr("commons::Hierarchy", [], es, [ , , , , {
    getName: [ 7 ],
    getLabel: [ 7 ],
    isFromRelational: [ 2 ],
    canDrillUp: [ 2 ],
    canCollapse: [ 2, 1 ],
    _drillDown_o: [ 0, 1 ],
    getLevels: [ [ 1 ] ],
    _canDrillDown_v: [ 2 ],
    canExpand: [ 2, 1 ],
    getCurrentLevel: [ 1 ],
    _drillDown_os: [ 0, 1, 7 ],
    getCurrentLevelIndex: [ 4 ],
    _canDrillDown_o: [ 2, 1 ],
    expand: [ 0, 1 ],
    getExpandedState: [ 1 ],
    getOneLevelUp: [ 1 ],
    getLevelWithName: [ 1, 7 ],
    getOneLevelDown: [ 1 ],
    isDrillable: [ 2 ],
    collapse: [ 0, 1 ]
}, {
    _create_sso: [ 4, 7, 7, [ 1 ] ]
}, [ "drillDown", "canDrillDown" ], [ "_create" ] ]);

Dr("commons::MeasureSortContext", [ "commons::SortContext" ], Ka, [ , , , {
    crossingHierarchyPath: [ 7 ],
    crossingHierarchy: 1
}, , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::SortState", [], Ka, [ , , , , {
    getRelationalSortIndices: [ [ 3 ] ],
    getMeasureSortsForAxis: [ [ 1 ], 4 ],
    getDimensionalSortForAxis: [ 1, 4 ],
    hasRelationalSortStatement: [ 2 ],
    getRelationalSortsForAxis: [ [ 1 ], 4 ],
    hasDimensionalSortStatement: [ 2 ],
    getDataTreeSortContext: [ 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::DataTreeSortContext", [], Ka, [ , , , , {
    getSortState: [ 1 ],
    getSortedIndicesForDataTreeNode: [ [ 4 ], 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::MapLayerProvider", [ "commons::PropertyOwner", "commons::BaseModel", "commons::AbstractMapProvider" ], es, [ , , , , , , ,  ]);

Dr("commons::EsriMapProvider", [ "commons::PropertyOwner", "commons::BaseModel", "commons::AbstractMapProvider", "commons::MapLayerProvider" ], es, [ , {
    authenticationRequired: 2,
    service: 7,
    URL: 7,
    token: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::EsriWebMapProvider", [ "commons::PropertyOwner", "commons::BaseModel", "commons::AbstractMapProvider", "commons::MapLayerProvider" ], es, [ , {
    apiKey: 7,
    portalItemId: 7,
    basemap: 7,
    URL: 7,
    token: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::FillAttributesInterface", [], Ka, [ , , , , , , ,  ]);

Dr("commons::FillPatternAttributesInterface", [], Ka, [ , , , , , , ,  ]);

var nc = Dr("commons::Focusable", [], Ka, [ , , , , , {
    resignMouseFocus: [ 0 ],
    resignKeyboardFocus: [ 0 ]
}, ,  ]);

var ac = {
    NORMAL: 0,
    ITALIC: 1
};

var rc = {
    NORMAL: 0,
    BOLD: 1
};

Dr("commons::Formatter", [], Ka, [ , , , , {
    _format_n: [ 7, 6 ],
    isNumericFormat: [ 2 ],
    isDateFormat: [ 2 ],
    getUniqueCompactScales: [ [ 4 ] ],
    getDecimalWidth: [ 4 ],
    isDecimalWidthSupported: [ 2 ],
    finalizeString: [ 7, 7 ],
    getWidth: [ 4 ],
    parse: [ 6, 7 ],
    _format_s: [ 7, 7 ],
    isDateTimeFormat: [ 2 ],
    isTimeFormat: [ 2 ],
    isUDF: [ 2 ],
    getFormatName: [ 7 ],
    getMaxFormattedString: [ 7 ],
    getMaxFormattedStringLength: [ 4 ],
    formatWithoutBidi: [ 7, 6 ],
    isCharacterFormat: [ 2 ],
    getFormatPattern: [ 7 ]
}, {
    unfinalizeString: [ 7, 7 ]
}, [ "format" ] ]);

var sc = Dr("commons::FormatterFactory", [], Ka, [ , , , , {
    _getFormatter_ss: [ 1, 7, 7 ],
    getSupportedFormatNames: [ [ 7 ] ],
    getNumberOfCachedFormatters: [ 3 ],
    getFormatterForFormatName: [ 1, 7 ],
    getDefaultNumericFormatter: [ 1 ],
    _getFormatter_os: [ 1, 1, 7 ],
    getCLDRVersion: [ 7 ],
    clearFormatterCache: [ 0 ]
}, {
    getSharedInstance: [ 1 ],
    instance: [ 1 ]
}, [ "getFormatter" ] ]);

Dr("commons::GraphSkinModelInterface", [], Ka, [ , , , , , , ,  ]);

Dr("commons::HierarchyDataSet", [], Ka, [ , , , , {
    getHierarchyForName: [ 1, 7 ],
    getDataSet: [ 1 ],
    getHierarchies: [ [ 1 ] ],
    requiresAdditionalData: [ 2 ],
    setDataSet: [ 0, 1 ],
    _getNormalizedCrossings_oobbo: [ 1, 1, 1, 2, 2, 1 ],
    renameLevelColumns: [ 0, 1 ],
    getCurrentDrillStateRectangularDataSet: [ 1 ],
    getSourceToSummarizedIndices: [ [ 4 ] ],
    getMeasureColumns: [ [ 1 ] ],
    getDataTreeRoot: [ 1 ],
    _getNormalizedCrossings_oobbbbbbbbo: [ 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1 ]
}, {
    _create_oo: [ 4, [ 1 ], [ 7 ] ]
}, [ "getNormalizedCrossings" ], [ "_create" ] ]);

var ic = {
    LEFT: 0,
    CENTER: 1,
    RIGHT: 2
};

var lc = ic;

Dr("commons::Image", [], Ka, [ {
    UPDATED: 10016
}, , , , {
    getOriginPath: [ 7 ],
    getSize: [ 13 ],
    getOrigin: [ 4 ],
    getOriginFormat: [ 4 ],
    getTextureID: [ 3 ],
    getLocalPath: [ 7 ]
}, , ,  ]);

Dr("commons::ImageCache", [], Ka, [ , , , , , , ,  ]);

var cc = {
    RUNTIME_DEFAULTS: 0,
    RETAIN_FILE_BLOB: 1,
    RETAIN_DECODED_BITMAP: 2,
    CONVERT_TO_TEXTURE: 4,
    ACQUIRE_AS_TEXTURE_ONLY: 8,
    ENABLE_MIPMAP: 16,
    DECODE_AS_BGRA_EXT: 32
};

var dc = {
    NOSCALE: 0,
    SCALETOFIT: 1,
    SCALE: 2,
    SCALEHEIGHT: 3,
    SCALEWIDTH: 4,
    TILE: 5
};

var uc = dc;

Dr("commons::ImageSet", [], Ka, [ , , , , {
    getImage: [ 1, 7 ]
}, , ,  ]);

var mc = {
    PVK_A: 0,
    PVK_B: 1,
    PVK_C: 2,
    PVK_D: 3,
    PVK_E: 4,
    PVK_F: 5,
    PVK_G: 6,
    PVK_H: 7,
    PVK_I: 8,
    PVK_J: 9,
    PVK_K: 10,
    PVK_L: 11,
    PVK_M: 12,
    PVK_N: 13,
    PVK_O: 14,
    PVK_P: 15,
    PVK_Q: 16,
    PVK_R: 17,
    PVK_S: 18,
    PVK_T: 19,
    PVK_U: 20,
    PVK_V: 21,
    PVK_W: 22,
    PVK_X: 23,
    PVK_Y: 24,
    PVK_Z: 25,
    PVK_0: 26,
    PVK_1: 27,
    PVK_2: 28,
    PVK_3: 29,
    PVK_4: 30,
    PVK_5: 31,
    PVK_6: 32,
    PVK_7: 33,
    PVK_8: 34,
    PVK_9: 35,
    PVK_MINUS: 36,
    PVK_EQUALS: 37,
    PVK_COMMA: 38,
    PVK_PERIOD: 39,
    PVK_SEMICOLON: 40,
    PVK_APOSTROPHE: 41,
    PVK_LEFTBRACKET: 42,
    PVK_RIGHTBRACKET: 43,
    PVK_FORWARDSLASH: 44,
    PVK_BACKSLASH: 45,
    PVK_SPACE: 46,
    PVK_ENTER: 47,
    PVK_TAB: 48,
    PVK_PAGEUP: 49,
    PVK_PAGEDOWN: 50,
    PVK_LEFTARROW: 51,
    PVK_RIGHTARROW: 52,
    PVK_DOWNARROW: 53,
    PVK_UPARROW: 54,
    PVK_CONTROL: 55,
    PVK_ALT: 56,
    PVK_SUPER: 57,
    PVK_SHIFT: 58,
    PVK_HOME: 59,
    PVK_END: 60,
    PVK_ESCAPE: 61,
    PVK_F1: 62,
    PVK_F2: 63,
    PVK_F3: 64,
    PVK_F4: 65,
    PVK_F5: 66,
    PVK_F6: 67,
    PVK_F7: 68,
    PVK_F8: 69,
    PVK_F9: 70,
    PVK_F10: 71,
    PVK_F11: 72,
    PVK_F12: 73,
    PVK_ANY: 74
};

var pc = Dr("commons::KeyManager", [], Ka, [ , , , , , {
    isPressed: [ 2, 4 ],
    pressKey: [ 0, 4 ],
    releaseKey: [ 0, 4 ],
    didHandleLastAction: [ 2 ],
    releaseAllKeys: [ 0 ]
}, ,  ]);

Dr("commons::LanguageTag", [], Ka, [ , , , , {
    asOriginalString: [ 7 ],
    getSASLegacyLocale: [ 7 ],
    asCanonicalString: [ 7 ],
    isPseudo: [ 2 ]
}, {
    _create: [ 4, 7 ]
}, ,  ]);

Dr("commons::LineAttributesInterface", [], Ka, [ , , , , , , ,  ]);

Dr("commons::LocalizationContext", [], es, [ , , , , {
    getFormatterLocale: [ 7 ],
    freeze: [ 6, 6 ],
    getDataLocale: [ 7 ],
    setFormatterLocale: [ 0, 7, 6 ],
    setOverride: [ 0, 1 ],
    getString: [ 7, 7, 7, 4 ],
    unfreeze: [ 2, 6 ],
    getLocale: [ 7 ],
    getMutableCopy: [ 1 ],
    getSASLogLocale: [ 7 ],
    setLocale: [ 0, 7, 6 ]
}, , ,  ]);

Dr("commons::MarkerAttributesInterface", [], Ka, [ , , , , , , ,  ]);

var fc = {
    FALSE_STATE: 0,
    TRUE_STATE: 1,
    AUTOMATIC: 2
};

Dr("commons::NetworkRequestContent", [ "commons::PropertyOwner", "commons::BaseModel" ], es, [ , {
    charset: 4,
    contentType: 7,
    contentBody: 7,
    partName: 7
}, , , {
    getContentTypeValue: [ 7 ],
    getContentTypeHeader: [ 7 ],
    updateFromContentTypeValue: [ 0, 7 ]
}, {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    _create_ssns: [ 4, 7, 7, 4, 7 ],
    _create_ssn: [ 4, 7, 7, 4 ],
    _create_ss: [ 4, 7, 7 ]
}, , [ "_create" ] ]);

var gc = Dr("commons::NetworkDataEvent", [ "commons::PortableEvent" ], Ka, [ {
    REQUEST: 10037,
    RESPONSE: 10038
}, , , {
    directDownloadPath: 7,
    headers: [ 7 ],
    authDelegate: 1,
    httpVerb: 4,
    followRedirects: 2,
    expectedResponseCode: 4,
    guestConnection: 4,
    URL: 1,
    responseContent: 7,
    responseCode: 4
}, {
    generateContentTypeHeader: [ 7 ],
    addContentInstance: [ 0, 1 ],
    getContentCount: [ 4 ],
    getContentInstance: [ 1, 4 ],
    createResponse: [ 1 ],
    sendResponse: [ 0, 1 ],
    asEventDispatcher: [ 1 ],
    generateFullContentBody: [ 7 ],
    isResponseCodeSuccess: [ 2 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var hc = Object.freeze({
    __proto__: null,
    default: gc
});

var bc = Dr("commons::NetworkImageEvent", [ "commons::PortableEvent", "commons::NetworkDataEvent" ], Ka, [ , , , {
    size: 13,
    textureID: 3
}, , , ,  ]);

var vc = Object.freeze({
    __proto__: null,
    default: bc
});

Dr("commons::TileServer", [ "commons::PropertyOwner", "commons::BaseModel" ], es, [ , {
    URL: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::OpenStreetMapProvider", [ "commons::PropertyOwner", "commons::BaseModel", "commons::AbstractMapProvider", "commons::MapLayerProvider" ], es, [ , {
    maxResolution: 6,
    tileServers: [ 1 ],
    context: 7,
    numResolutions: 4,
    osmType: 4,
    useSSL: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::PlatformImplementationFactory", [], Ka, [ , , , , , , ,  ]);

Dr("commons::PortableBidi", [], Ka, [ , , , , {
    getBidiName: [ 7 ],
    getRunLevel: [ 4, 4 ],
    getDirection: [ 4 ],
    getRunEnd: [ 4, 4 ],
    getCountParagraphs: [ 4 ],
    getLogicalRunLimit: [ 4, 4 ],
    getProcessedLength: [ 4 ],
    getRunCount: [ 4 ],
    getRunBegin: [ 4, 4 ],
    isMixed: [ 2 ],
    isRightToLeft: [ 2 ],
    setPara: [ 0, 7, 4 ],
    getLogicalRunLevel: [ 4, 4 ],
    isLeftToRight: [ 2 ],
    getDirectionClass: [ 4, 4 ],
    getLevelAt: [ 4, 4 ],
    getLength: [ 4 ]
}, , ,  ]);

Dr("commons::PortableCollator", [], Ka, [ , , , , {
    getSortedIndices: [ [ 3 ], [ 7 ] ],
    compare: [ 2, 7, 7 ],
    setStrength: [ 0, 4 ],
    compareAndYieldIntegerResult: [ 4, 7, 7 ],
    getSortTypeName: [ 7 ]
}, , ,  ]);

Dr("commons::UnicodeFacility", [], Ka, [ , , , , {
    isICUBIDIProcessingEnabled: [ 2 ],
    _getBidi_v: [ 1 ],
    hasRTL: [ 2, 7 ],
    getCollator: [ 1, 7 ],
    getAnalysisLevel: [ 4, 4, 7 ],
    needDirection: [ 2, 4, 7 ],
    getBaseDirection: [ 4, 7 ],
    getCharDirection: [ 4, 4 ],
    isWeak: [ 2, 7 ],
    _getBidi_sn: [ 1, 7, 4 ],
    _getBidi_snnb: [ 1, 7, 4, 4, 2 ],
    isICUEnabled: [ 2 ]
}, {
    _create: [ 4 ]
}, [ "getBidi" ] ]);

var yc = Dr("commons::ResourceManager", [], Ka, [ , , , , , {
    instance: [ 1 ],
    cleanInternedStrings: [ 0 ],
    getLocalizedString: [ 7, 7, 7 ],
    getBundlePathTemplate: [ 7 ],
    getDPIScaleFactor: [ 5 ],
    getLocalizationContext: [ 1 ],
    setUnicodeFacility: [ 0, 1 ],
    getUnicodeFacility: [ 1 ],
    setFormatterLocale: [ 0, 7 ],
    getLocalizedStringForLocale: [ 7, 7, 7, 7 ],
    updateTimers: [ 0 ],
    convertPointsToCellUnits: [ 5, 5 ],
    setLocale: [ 0, 7 ],
    setBundlePathTemplate: [ 0, 7 ],
    convertCellToPointsUnits: [ 5, 5 ],
    cleanLocalizationCache: [ 0 ]
}, ,  ]);

var xc = Object.freeze({
    __proto__: null,
    default: yc
});

var Sc = Dr("commons::Runtime", [], Ka, [ , , , , , {
    initialize: [ 0, 1 ],
    shutdown: [ 0 ]
}, ,  ]);

var wc = Dr("commons::RuntimeConfiguration", [ "commons::PropertyOwner", "commons::BaseModel" ], es, [ , {
    implementationFactory: 1,
    scheme: 4,
    enableTraceLogging: 2,
    locale: 7,
    pathToFontDirectory: 7,
    stripNumericFormattedValues: 2,
    logLevel: 7,
    enableSystemFontLookups: 2,
    hasRunLoop: 2,
    formatterLocale: 7,
    pathToWorkingDirectory: 7,
    dpi: 5,
    pathToResourceDirectory: 7,
    logConfig: 7,
    pathToFontManifestFile: 7,
    enableTextureCaching: 2,
    defaultImageDataPolicies: 3,
    pathToInstallDirectory: 7,
    supportsMSAA: 2,
    requiresCoInitialize: 2,
    logFilePath: 7,
    supportsThreads: 2,
    supportsAsyncNetworking: 2,
    needsProxy: 2,
    missingOption: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Cc = Object.freeze({
    __proto__: null,
    default: wc
});

var Ec = {
    XML: 0,
    JSON: 1
};

var Ic = Dr("commons::Serializer", [], Ka, [ , , , {
    xmlDeclaration: 2,
    style: 4
}, {
    serialize: [ 7, 1, 4, 4 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var _c = {
    ALT_COLOR: 0,
    ALT_TEXT_COLOR: 1,
    DONUT: 2,
    CELL_SEPARATOR: 3,
    MATRIX_BORDER: 4,
    RING_SIZE: 5,
    MIN_HOLE_SIZE: 6,
    ALT_ROW_COLOR: 7,
    BACKGROUND_COLOR: 8,
    BACKGROUND_TRANSPARENCY: 9,
    BORDER_COLOR: 10,
    BORDER_STYLE: 11,
    BORDER_WIDTH: 12,
    ARROW_COLOR: 13,
    SELECTED_BACKGROUND_COLOR: 14,
    SELECTED_COLOR: 15,
    ROW_COLOR: 16,
    WIDTH: 17,
    CAP_STYLE: 18,
    COLOR: 19,
    CONNECT: 20,
    DATA_SKIN: 21,
    KPI_SKIN: 22,
    DISPLAY_OPTS: 23,
    FILL_COLOR: 24,
    FILL_TRANSPARENCY: 25,
    FILL_GRADIENT_END_COLOR: 26,
    FILL_GRADIENT_START_COLOR: 27,
    FILL_GRADIENT_NEUTRAL_COLOR: 28,
    FILL_SIZE: 29,
    FILL_TYPE: 30,
    FONT_SIZE: 31,
    FONT_FAMILY: 32,
    FONT_STYLE: 33,
    FONT_WEIGHT: 34,
    FRAME_BORDER: 35,
    INLAID_TICK_COLOR: 36,
    HIGHLIGHT_COLOR: 37,
    LINE_COLOR: 38,
    LINE_THICKNESS: 39,
    LINE_STYLE: 40,
    LINE_TRANSPARENCY: 41,
    HORIZONTAL_LINE_STYLE: 42,
    VERTICAL_LINE_STYLE: 43,
    MARKER_COLOR: 44,
    MARKER_SIZE: 45,
    MARKER_SYMBOL: 46,
    MARKER_TRANSPARENCY: 47,
    SHADOW_COLOR: 48,
    TEXT_ALIGNMENT: 49,
    TEXT_COLOR: 50,
    TEXT_TRANSPARENCY: 51,
    TEXT_DECORATION: 52,
    WRAP_TEXT: 53,
    THEME: 54,
    TICK_WIDTH: 55,
    TICK_DISPLAY: 56,
    CONFINE_TICK_VALUES: 57,
    FILL_FILE: 58,
    TRANSPARENCY: 59,
    IMAGE_FIT_STYLE: 60,
    FILL_GRADIENT_TRANSPARENCY: 61,
    X_OFFSET: 62,
    Y_OFFSET: 63,
    HORIZONTAL_POSITION: 64,
    VERTICAL_POSITION: 65,
    BUTTON_TYPE: 66,
    LINE_INTERPOLATION: 67,
    INVALID: 68,
    BLEND_START_COLOR: 69,
    BLEND_END_COLOR: 70,
    BLEND_START_COLOR_FACTOR: 71,
    BLEND_END_COLOR_FACTOR: 72,
    BLEND_MODE: 73,
    GLOW_THICKNESS: 74,
    GLOW_BLUR: 75,
    GLOW_COLOR_FACTOR: 76,
    GLOW_COLOR: 77,
    GRID_DISPLAY: 78,
    GRID_LAYER: 79,
    YAXIS_LABEL_POSITION: 80,
    ATTRIBUTE_PRIORITY: 81,
    PADDING: 82,
    PADDING_LEFT: 83,
    PADDING_RIGHT: 84,
    PADDING_TOP: 85,
    PADDING_BOTTOM: 86,
    BAR_LINE_COLOR_TOP: 87,
    BAR_FILL_COLOR: 88,
    BAR_LINE_COLOR_BOTTOM: 89,
    THUMB_FILL_COLOR_DONUT: 90,
    THUMB_FILL_COLOR_CENTER: 91,
    THUMB_LINE_COLOR: 92,
    BACKGROUND_COLOR_SELECTED: 93,
    TEXT_COLOR_SELECTED: 94,
    ICON: 95,
    IMAGE: 96,
    DATA_STYLE_REFERENCE: 97,
    FILL_PATTERN: 98,
    FILL_PATTERN_COLOR: 99,
    FILL_PATTERN_TRANSPARENCY: 100,
    LINE_THICKNESS_MIN: 101,
    LINE_THICKNESS_MAX: 102,
    BUBBLE_SIZE_MIN: 103,
    BUBBLE_SIZE_MAX: 104,
    MARKER_SIZE_MIN: 105,
    MARKER_SIZE_MAX: 106,
    DISPLAY_RULE_LABEL: 107,
    DISPLAY_RULE_VALUE: 108,
    DISPLAY_RULE_INDICATOR: 109,
    MIN_MARKER_SIZE_GROUPED: 110,
    MIN_MARKER_SIZE_UNGROUPED: 111,
    TILE_SET: 112,
    FIT_WIDTH: 113,
    HORIZONTAL_ALIGNMENT: 114,
    VERTICAL_ALIGNMENT: 115,
    INSET_SIZE: 116,
    INSET_ASPECT_RATIO: 117,
    INSET_SIZE_MIN: 118,
    INSET_SIZE_MAX: 119,
    OTHER_SLICE_PERCENT: 120,
    MARKER_FILL_COLOR: 121,
    MARKER_FILL_TRANSPARENCY: 122,
    MARKER_OUTLINE_COLOR: 123,
    MARKER_OUTLINE_THICKNESS: 124,
    MARKER_OUTLINE_TRANSPARENCY: 125,
    PIN_STYLE: 126,
    PIN_COLOR: 127,
    FOCUS_BACKGROUND: 128
};

Dr("commons::StyleChain", [], Ka, [ , , , , {
    getStyleAttributeBoolValue: [ 2, 4, 2 ],
    getStyleAttributeStringValue: [ 7, 4, 7 ],
    hasStyleAttributeValue: [ 2, 4 ],
    getStyleAttributeDimensionValue: [ 1, 4, 1 ],
    hasStyleAttributeValueAboveBase: [ 2, 4 ],
    getOrderedBundles: [ [ 1 ] ],
    getStyleAttributeUnsignedValue: [ 3, 4, 3 ],
    getDescription: [ 7 ],
    getStyleAttributeFloatValue: [ 5, 4, 5 ]
}, {
    _create_o: [ 4, [ 1 ] ],
    _create_oo: [ 4, 1, [ 4 ] ]
}, , [ "_create" ] ]);

var Dc = {
    GRAPH_DEFAULTS: 0,
    GRAPH_DATA_1: 1,
    GRAPH_DATA_2: 2,
    GRAPH_DATA_3: 3,
    GRAPH_DATA_4: 4,
    GRAPH_DATA_5: 5,
    GRAPH_DATA_6: 6,
    GRAPH_DATA_7: 7,
    GRAPH_DATA_8: 8,
    GRAPH_DATA_9: 9,
    GRAPH_DATA_10: 10,
    GRAPH_DATA_11: 11,
    GRAPH_DATA_12: 12,
    GRAPH_DATA_DEFAULT: 13,
    GRAPH_DATA_NODE_1: 14,
    GRAPH_DATA_NODE_2: 15,
    GRAPH_DATA_NODE_3: 16,
    GRAPH_DATA_NODE_4: 17,
    GRAPH_DATA_NODE_5: 18,
    GRAPH_DATA_NODE_6: 19,
    GRAPH_DATA_NODE_7: 20,
    GRAPH_DATA_NODE_8: 21,
    GRAPH_DATA_NODE_9: 22,
    GRAPH_DATA_NODE_10: 23,
    GRAPH_DATA_NODE_11: 24,
    GRAPH_DATA_NODE_12: 25,
    GRAPH_DATA_NODE_DEFAULT: 26,
    GRAPH_DATA_NODE_TARGET: 27,
    GRAPH_KPI_RANGE_1: 28,
    GRAPH_KPI_RANGE_2: 29,
    GRAPH_KPI_RANGE_3: 30,
    GRAPH_KPI_RANGE_4: 31,
    GRAPH_KPI_RANGE_5: 32,
    GRAPH_KPI_RANGE_DEFAULT: 33,
    GRAPH_KPI_OVERFLOW: 34,
    GRAPH_KPI_UNDERFLOW: 35,
    GRAPH_OUTLIER: 36,
    THREE_COLOR_RAMP: 37,
    THREE_COLOR_RAMP_1: 38,
    THREE_COLOR_RAMP_2: 39,
    THREE_COLOR_RAMP_3: 40,
    THREE_COLOR_RAMP_4: 41,
    THREE_COLOR_RAMP_KPI: 42,
    THREE_COLOR_ALT_RAMP: 43,
    THREE_COLOR_ALT_RAMP_1: 44,
    THREE_COLOR_ALT_RAMP_2: 45,
    THREE_COLOR_ALT_RAMP_3: 46,
    THREE_COLOR_ALT_RAMP_4: 47,
    THREE_COLOR_ALT_RAMP_KPI: 48,
    TWO_COLOR_RAMP: 49,
    TWO_COLOR_RAMP_1: 50,
    TWO_COLOR_RAMP_2: 51,
    TWO_COLOR_RAMP_3: 52,
    TWO_COLOR_RAMP_4: 53,
    TWO_COLOR_RAMP_5: 54,
    TWO_COLOR_RAMP_6: 55,
    TWO_COLOR_RAMP_7: 56,
    TWO_COLOR_RAMP_8: 57,
    TWO_COLOR_RAMP_OTHER: 58,
    TWO_COLOR_ALT_RAMP: 59,
    TWO_COLOR_ALT_RAMP_1: 60,
    TWO_COLOR_ALT_RAMP_2: 61,
    TWO_COLOR_ALT_RAMP_3: 62,
    TWO_COLOR_ALT_RAMP_4: 63,
    TWO_COLOR_ALT_RAMP_5: 64,
    TWO_COLOR_ALT_RAMP_6: 65,
    TWO_COLOR_ALT_RAMP_7: 66,
    TWO_COLOR_ALT_RAMP_8: 67,
    TWO_COLOR_ALT_RAMP_OTHER: 68,
    ICON_NODE_BACKGROUND: 69,
    ICON_NODE_END: 70,
    ICON_NODE_GATEWAY_EXCLUSIVE: 71,
    ICON_NODE_GATEWAY_INCLUSIVE: 72,
    ICON_NODE_START: 73,
    ICON_NODE_TIMER: 74,
    GRAPH_AXIS_LINES: 75,
    GRAPH_REFERENCE: 76,
    GRAPH_GRID_LINES: 77,
    GRAPH_MINOR_GRID_LINES: 78,
    GRAPH_OUTLINES: 79,
    GRAPH_OUTLINES_PERIMETER: 80,
    GRAPH_OUTLINES_UNFILLED: 81,
    GRAPH_OUTLINES_NODE: 82,
    GRAPH_BORDER_LINES: 83,
    GRAPH_TITLE_TEXT: 84,
    GRAPH_FOOTNOTE_TEXT: 85,
    GRAPH_DATA_TEXT: 86,
    GRAPH_KEY_TEXT: 87,
    GRAPH_KEY_OUTLINE: 88,
    GRAPH_KEY_FRAME_VALUE: 89,
    GRAPH_LABEL_TEXT: 90,
    GRAPH_LABEL2_TEXT: 91,
    GRAPH_VALUE_TEXT: 92,
    GRAPH_CALLOUT_LINE: 93,
    GRAPH_KPI_RANGE_TEXT: 94,
    GRAPH_KPI_VALUE_TEXT: 95,
    GRAPH_BACKGROUND: 96,
    GRAPH_WALLS: 97,
    GRAPH_FLOOR: 98,
    GRAPH_LEGEND_BACKGROUND: 99,
    GRAPH_HEADER_BACKGROUND: 100,
    GRAPH_FIT_LINE: 101,
    GRAPH_FIT_LINE_2: 102,
    GRAPH_PREDICTION_LINE: 103,
    GRAPH_CONFIDENCE: 104,
    GRAPH_CONFIDENCE_2: 105,
    GRAPH_PREDICTION_LIMIT: 106,
    GRAPH_ERROR: 107,
    GRAPH_BOX_MEDIAN: 108,
    GRAPH_BOX_MEAN: 109,
    GRAPH_BOX_WHISKER: 110,
    GRAPH_ANNO_LINE: 111,
    GRAPH_ANNO_TEXT: 112,
    GRAPH_ANNO_SHAPE: 113,
    GRAPH_SELECTION: 114,
    GRAPH_FOCUS: 115,
    GRAPH_FOCUS_BACKGROUND: 116,
    GRAPH_MISSING: 117,
    GRAPH_CONTROL_LIMITS: 118,
    GRAPH_RUN_TEST: 119,
    GRAPH_STARS: 120,
    GRAPH_CLIPPING: 121,
    GRAPH_RANGE_FILL: 122,
    GRAPH_DROP_SHADOW: 123,
    GRAPH_BOX: 124,
    GRAPH_HISTOGRAM: 125,
    GRAPH_BAR: 126,
    GRAPH_PIE: 127,
    GRAPH_INSET_PIE: 128,
    GRAPH_BUBBLE: 129,
    GRAPH_SCATTER: 130,
    GRAPH_HIGHLOW: 131,
    GRAPH_HEATMAP: 132,
    GRAPH_ICICLE: 133,
    GRAPH_WATERFALL: 134,
    GRAPH_SCHEDULE: 135,
    GRAPH_TIMESERIES: 136,
    GRAPH_SERIES: 137,
    GRAPH_LINECHART: 138,
    GRAPH_BAND: 139,
    GRAPH_DECISIONTREE: 140,
    GRAPH_LINEAGE: 141,
    GRAPH_NETWORK: 142,
    GRAPH_PROCESSFLOW: 143,
    GRAPH_SANKEY: 144,
    GRAPH_ELLIPSE: 145,
    GRAPH_POLYGON: 146,
    GRAPH_CONNECT_LINE: 147,
    GRAPH_UNICODE_TEXT: 148,
    GRAPH_OVERFLOW: 149,
    GRAPH_UNDERFLOW: 150,
    GRAPH_OUT_OF_RANGE: 151,
    GRAPH_DATA_STYLE_INITIAL: 152,
    GRAPH_DATA_STYLE_FINAL: 153,
    GRAPH_DATA_STYLE_OTHER: 154,
    GRAPH_ROW_COLUMN_AXIS_CELL_FILL: 155,
    GRAPH_TIP_TEXT: 156,
    GRAPH_TIP_FILL: 157,
    GRAPH_MILESTONE: 158,
    GRAPH_WEEKEND: 159,
    GRAPH_CONTOUR: 160,
    GRAPH_BLOCK: 161,
    GRAPH_ALT_BLOCK: 162,
    GRAPH_BLOCK_HEADER: 163,
    GRAPH_CUT_LINE: 164,
    GRAPH_TABLE_GRIDLINES: 165,
    GRAPH_TABLE_HEADER_FILL: 166,
    GRAPH_TABLE_HEADER_TEXT: 167,
    GRAPH_TABLE_DATA_FILL: 168,
    GRAPH_TABLE_DATA_TEXT: 169,
    GRAPH_DIAGRAM_GRID_LINES: 170,
    GRAPH_NODE_LINK_DIAGRAM: 171,
    GRAPH_NODE: 172,
    GRAPH_NODE_TITLE: 173,
    GRAPH_NODE_LABEL: 174,
    GRAPH_NODE_INPUT_LABEL: 175,
    GRAPH_NODE_DETAILS: 176,
    GRAPH_NODE_TEXT: 177,
    GRAPH_NODE_LINK_LABEL: 178,
    GRAPH_NODE_GROUP_OPEN: 179,
    GRAPH_NODE_GROUP_CLOSED: 180,
    GRAPH_NODE_GROUP_TITLE: 181,
    GRAPH_NODE_WINDOW_GROUP_CONTENT_AREA: 182,
    GRAPH_LINK: 183,
    GRAPH_CROSSOVER_LINK: 184,
    GRAPH_HIGHLIGHTED_LINK: 185,
    GRAPH_HIGHLIGHTED_NODE: 186,
    GRAPH_STATUS_BACKGROUND: 187,
    GRAPH_STATUS_CLUSTERED: 188,
    GRAPH_STATUS_COMPLETE: 189,
    GRAPH_STATUS_ERROR: 190,
    GRAPH_STATUS_IMPORTANT: 191,
    GRAPH_STATUS_INCOMPLETE: 192,
    GRAPH_STATUS_INCOMPLETE_IN_PROGRESS: 193,
    GRAPH_STATUS_INFORMATION: 194,
    GRAPH_STATUS_LOCKED: 195,
    GRAPH_STATUS_MEDIUM_PRIORITY: 196,
    GRAPH_STATUS_NEUTRAL: 197,
    GRAPH_STATUS_PROGRESS: 198,
    GRAPH_STATUS_SCHEDULED: 199,
    GRAPH_STATUS_STOPPED: 200,
    GRAPH_STATUS_STOPPING: 201,
    GRAPH_STATUS_WARNING: 202,
    GRAPH_ANIMATED_PROGRESS_INDICATOR: 203,
    GRAPH_NOTE_YELLOW: 204,
    GRAPH_NOTE_PINK: 205,
    GRAPH_NOTE_BLUE: 206,
    GRAPH_NOTE_TEXT: 207,
    GRAPH_GROUP: 208,
    GRAPH_GROUP_BACKGROUND: 209,
    GRAPH_GROUP_TITLE: 210,
    GRAPH_GROUP_NODE: 211,
    GRAPH_LEVEL_GROUP_LABEL: 212,
    GRAPH_LEVEL_GROUP_LINE: 213,
    GRAPH_LEVEL_LABEL: 214,
    GRAPH_SKIN: 215,
    GRAPH_OVERVIEW_BACKGROUND: 216,
    GRAPH_OVERVIEW_BORDER_LINES: 217,
    GRAPH_OVERVIEW_VIEWPORT_BACKGROUND: 218,
    GRAPH_OVERVIEW_VIEWPORT_BORDER_LINES: 219,
    GRAPH_OVERVIEW_FILTER: 220,
    GRAPH_OVERVIEW_AXIS: 221,
    GRAPH_OVERVIEW_AXIS_FILTER: 222,
    GRAPH_LINEAR_AXIS: 223,
    GRAPH_LOG_AXIS: 224,
    GRAPH_TIME_AXIS: 225,
    GRAPH_DISCRETE_AXIS: 226,
    GRAPH_CONTINUOUS_LEGEND: 227,
    GRAPH_DISCRETE_LEGEND: 228,
    GRAPH_SIZE_LEGEND: 229,
    GRAPH_LAYOUT_OVERLAY: 230,
    GRAPH_LAYOUT_LATTICE: 231,
    GRAPH_LAYOUT_DATA_MATRIX: 232,
    GRAPH_LAYOUT_DATA_PANEL: 233,
    GRAPH_CELL_SEPARATOR_LINES: 234,
    GRAPH_DATA_MATRIX_BORDER_LINES: 235,
    GRAPH_ZOOM_SCROLLBAR_END_HANDLE: 236,
    GRAPH_ZOOM_SCROLLBAR_THUMB: 237,
    GRAPH: 238,
    GRAPH_ANIMATION_CONTROL_PANEL: 239,
    GRAPH_GAUGE_INDICATOR: 240,
    GRAPH_OVERPLOTTING: 241,
    GRAPH_OVERLAY_DATA_INSET: 242,
    GRAPH_GEO_ROUTE_MAIN_PATH: 243,
    GRAPH_GEO_ROUTE_CENTER_PATH: 244,
    GRAPH_GEO_ROUTE_PATH_OUTER_PERIMETER: 245,
    GRAPH_GEO_ROUTE_PATH_INNER_PERIMETER: 246,
    GRAPH_GEO_ROUTE_PATH_SELECTION: 247,
    GRAPH_GEO_ROUTE_PATH_HOVER: 248,
    GRAPH_GEO_ROUTE_PATH_OUTER_PERIMETER_INVERSE: 249,
    GRAPH_GEO_ROUTE_PATH_FOCUS: 250,
    GRAPH_GEO_ROUTE_PATH_FOCUS_PERIMETER: 251,
    GRAPH_GEO_ROUTE_POINT: 252,
    GRAPH_GEO_ROUTE_POINT_LABEL: 253,
    GRAPH_GEO_PIN: 254,
    GRAPH_GEO_PIN_LABEL: 255,
    GRAPH_GEO_PIN_ICON: 256,
    GRAPH_GEO_SEARCH_PIN: 257,
    GRAPH_GEO_CENTROID_POINT: 258,
    GRAPH_GEO_AREA: 259,
    GRAPH_GEO_AREA_OUTER_PERIMETER: 260,
    GRAPH_GEO_AREA_INNER_PERIMETER: 261,
    GRAPH_GEO_AREA_INNER_PERIMETER_THICK: 262,
    GRAPH_GEO_AREA_OUTER_HOVER: 263,
    GRAPH_GEO_AREA_OUTER_PERIMETER_INVERSE: 264,
    GRAPH_GEO_AREA_SELECTION: 265,
    GRAPH_GEO_AREA_OUTER_SELECTION: 266,
    GRAPH_GEO_AREA_FOCUS: 267,
    GRAPH_GEO_AREA_FOCUS_PERIMETER: 268,
    GRAPH_GEO_REGION_EMPTY: 269,
    GRAPH_ZONE_A: 270,
    GRAPH_ZONE_B: 271,
    GRAPH_ZONE_C: 272,
    GRAPH_PHASE_BOX: 273,
    GRAPH_SLIDER: 274,
    GRAPH_MENU: 275,
    GRAPH_THIN_LINE: 276,
    GRAPH_DATA_STYLE_INCREASING: 277,
    GRAPH_DATA_STYLE_DECREASING: 278,
    GRAPH_BASEMAP: 279,
    GRAPH_MAP_REGION_LAYER: 280,
    REPORT: 281,
    TITLESTYLE: 282,
    PROMPTBAR: 283,
    COMBOBOX: 284,
    CHECKBOXLIST: 285,
    SLIDER: 286,
    BUTTONBAR: 287,
    RADIOBUTTON: 288,
    TEXTINPUT: 289,
    HYPERLINK: 290,
    HYPERLINKVISITED: 291,
    DROPZONE: 292,
    HOVER: 293,
    SELECTED: 294,
    TABLE: 295,
    HEADER: 296,
    DATA: 297,
    BRUSH: 298,
    ROW_HEADER: 299,
    COLUMN_HEADER: 300,
    ROW_HEADER_LABEL: 301,
    COLUMN_HEADER_LABEL: 302,
    MEASURE_HEADER: 303,
    TOTALS: 304,
    SUBTOTALS: 305,
    TABLE_HEADER: 306,
    TABLE_TOTALS: 307,
    TABLE_TABLE: 308,
    TABLE_DATA: 309,
    TABLE_SELECTED: 310,
    TABLE_BRUSH: 311,
    CROSSTAB_TABLE: 312,
    CROSSTAB_DATA: 313,
    CROSSTAB_HEADER: 314,
    CROSSTAB_TOTALS: 315,
    CROSSTAB_SUBTOTALS: 316,
    CROSSTAB_SELECTED: 317,
    CROSSTAB_BRUSH: 318,
    ZOOM_SCROLLBAR: 319,
    STACK_NAVIGATION_CONTROL: 320,
    STACK_CONTAINER: 321,
    REPORT_ELEMENT_CONTAINER: 322,
    REPORT_PAGE_PADDING: 323,
    CONTAINER: 324,
    SCROLLBAR: 325,
    TABLE_SCROLLBAR: 326,
    CROSSTAB_SCROLLBAR: 327,
    TEXT_SCROLLBAR: 328,
    TEXTSTYLE: 329,
    H1: 330,
    H2: 331,
    H3: 332,
    H4: 333,
    H5: 334,
    H6: 335,
    INVALID: 336,
    MATCHES_ALL: 337
};

var Lc = {
    LEFT: 0,
    CENTER: 1,
    RIGHT: 2
};

Dr("commons::TextAttributesInterface", [], Ka, [ , , , , , , ,  ]);

var Tc = {
    NONE: 0,
    UNDERLINE: 1
};

Dr("commons::TiledImageLoader", [], es, [ , , , {
    contextHandle: 3
}, , , ,  ]);

var Rc = {
    TOP: 0,
    MIDDLE: 1,
    BOTTOM: 2
};

var kc = Rc;

var Ac = Dr("commons::WarningEvent", [ "commons::PortableEvent" ], Ka, [ {
    GENERIC: 10056,
    CLEAR_WARNINGS: 10057
}, , , {
    warnings: [ 1 ]
}, , {
    _create: [ 4 ]
}, ,  ]);

var Mc = Ac;

Dr("commons::PickResultEntryDisplayRuleIndicator", [], Ka, [ , , , {
    indicator: 4,
    imageId: 7,
    icon: 7,
    swatchColor: 10,
    sampleText: 7
}, , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::PickResultEntry", [], Ka, [ , , , {
    displayRuleIndicator: 1,
    useAsTooltip: 2,
    formattedValue: 7,
    legendSVG: 7,
    label: 7,
    value: 1
}, , {
    _create: [ 4 ]
}, ,  ]);

var Nc = Dr("commons::PickResult", [], Ka, [ , , , {
    shouldUseColor: 2,
    entries: [ 1 ],
    color: 3,
    displayListNodeBounds: 12,
    details: 1,
    preferredTargetLocation: 11
}, , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::PointVectorObject", [], Ka, [ , , , , {
    getPoints: [ [ 11 ] ]
}, , ,  ]);

Dr("commons::BaseUIModel", [ "commons::PropertyOwner", "commons::BaseModel" ], es, [ , , , , , , ,  ]);

Dr("commons::PickedNodeInfo", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ , {
    detailIndex: 3,
    nodeID: 3
}, , , , {
    _create: [ 4, 3, 3 ]
}, ,  ]);

Dr("commons::AccessibilityElement", [], Ka, [ , , , , {
    getPickResult: [ 1 ],
    getAccessibilityChildren: [ [ 1 ] ],
    getLocation: [ 4 ],
    getNodeInfo: [ 1 ],
    getTerseAccessibilityLabel: [ 7 ],
    getExtendedAccessibilityFrame: [ 12, 12, 4 ],
    isSelected: [ 2 ],
    getAccessibilityHint: [ 7 ],
    getPoints: [ [ 1 ] ],
    getAccessibilityLabel: [ 7 ],
    getAccessibilityFrame: [ 12 ]
}, , ,  ]);

Dr("commons::SonificationTone", [], Ka, [ , , , , {
    getLocalPath: [ 7 ]
}, , ,  ]);

Dr("commons::SonificationElement", [], Ka, [ , , , , {
    getStereoPanValue: [ 5 ],
    getAccessibilityElement: [ 1 ],
    getTone: [ 1 ]
}, , ,  ]);

Dr("commons::SonificationController", [], Ka, [ , , , , {
    getSonificationElements: [ [ 1 ] ]
}, {
    getScale: [ [ 1 ], 4, 4 ]
}, ,  ]);

Dr("commons::AccessibilityController", [], Ka, [ , , , , {
    nextAccessibilityElement: [ 0 ],
    getCurrentAccessibilityElement: [ 1 ],
    getModel: [ 1 ],
    _getAccessibilityElements_n: [ [ 1 ], 4 ],
    isOnScreen: [ 2, 1 ],
    previousAccessibilityElement: [ 0 ],
    getAccessibilityElement: [ 1, 4, 2 ],
    setFocus: [ 0, 1 ],
    getLoopOn: [ 2 ],
    setLoopOn: [ 0, 2 ],
    getDataFrame: [ 12 ],
    getSonificationController: [ 1 ],
    _getAccessibilityElements_v: [ [ 1 ] ]
}, , [ "getAccessibilityElements" ] ]);

var Oc = Dr("commons::AccessibilityFocusChangeEvent", [ "commons::PortableEvent" ], Ka, [ {
    ACCESSIBILITY_ELEMENTS_INVALIDATED: 20009,
    ACCESSIBILITY_DRILL_DOWN: 20005,
    ACCESSIBILITY_FOCUS_CHANGE: 2e4,
    ACCESSIBILITY_COLLAPSE: 20004,
    ACCESSIBILITY_DATA_CELL: 20007,
    ACCESSIBILITY_FOCUS_GAINED: 20002,
    ACCESSIBILITY_SORT: 20006,
    ACCESSIBILITY_EXPAND: 20003,
    ACCESSIBILITY_ELEMENT_SELECTED: 20008,
    ACCESSIBILITY_FOCUS_LOST: 20001
}, , , , {
    getAccessibilityElement: [ 1 ]
}, , ,  ]);

Dr("commons::SelectionOptions", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ , {
    includeAllOther: 2,
    hierarchies: [ 1 ],
    includeDrillInSelections: 2,
    expectedDataNames: [ 7 ],
    expectedVariableNames: [ 7 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::Selection", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ , {
    expression: 1,
    dataName: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Pc = Dr("commons::SelectionController", [], es, [ {
    SELECTION_CHANGED: 20055
}, , , , {
    getDefaultOptions: [ 1 ],
    applySelections: [ 0, [ 1 ], 1 ],
    getDataValuesFromSelections: [ [ 1 ], [ 1 ], 7, 7 ],
    getSelections: [ [ 1 ], 1 ],
    clearSelections: [ 0 ]
}, , ,  ]);

var Bc = {
    SINGLE: 0,
    STACKED_ARCGIS_WEBMAP: 1
};

var zc = Dr("commons::BaseView", [], es, [ {
    DISPLAYLISTRENDERER_CHANGED: 20014,
    ACTIVATE: 20015,
    NEEDS_UPDATE_GESTURE_RECOGNIZERS: 20013,
    RENDERING_TYPE_CHANGE: 20016,
    FRAME_VALID: 20011,
    FRAME_INVALID: 20010,
    FRAME_ZERO_SIZE: 20012
}, , , {
    shouldRetainBuffers: 2,
    gestureHandlersEnabled: 2,
    tag: 7,
    accessibilityModeEnabled: 2,
    frame: 12
}, {
    getSubviews: [ [ 1 ] ],
    getSelectionController: [ 1 ],
    getPickResultsInAperture: [ [ 1 ], 12, 2 ],
    isWaitingForExternalAssets: [ 2 ],
    canHandleGestureDirection: [ 2, 4 ],
    getNeedsLayout: [ 2 ],
    addSubview: [ 0, 1 ],
    setShouldClearDisplayListBeforeUpdate: [ 0, 2 ],
    asFocusable: [ 1 ],
    getRenderingType: [ 4 ],
    getCurrentSelectedPickResults: [ [ 1 ] ],
    getStringClipBoardContent: [ 7 ],
    rtlTransformXValue: [ 5, 5 ],
    getAccessibilityController: [ 1 ],
    render: [ 6 ],
    getImage: [ 1 ],
    getNeedsUpdateDisplayList: [ 2 ],
    invalidateFrameBufferForDuration: [ 0, 6 ]
}, {
    _create: [ 4 ],
    setVisualEffectsEnabled: [ 0, 2 ],
    getVisualEffectsEnabled: [ 2 ],
    visualEffectsEnabled: [ 2 ]
}, ,  ]);

Dr("commons::CompactFormatOptions", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ , {
    scaleType: 4,
    precision: 3,
    scale: 3,
    precisionType: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::GridColumnInfoManager", [], es, [ {
    CONTENT_CHANGED: 20043
}, , , , , , ,  ]);

Dr("commons::DataGridColumnInfo", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ , {
    cellVisual: 4,
    totalVisible: 2,
    compactFormatOptions: 1,
    presentationLabel: 7,
    cellVisualPosition: 4,
    columnType: 4,
    sortDirection: 4,
    cellVisualMissingColor: 10,
    displayRule: 1,
    styleClassName: 7,
    sparkKPI: 2,
    cellVisualStyleAttributes: 1,
    header: 2,
    columnWidth: 4,
    columnIndex: 4,
    cellVisualFillColor: 10,
    useCompactFormat: 2,
    compactFormatName: 7,
    interactiveHeader: 2,
    sparkLine: 2,
    primarySortApplied: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::CrosstabLevelInfo", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ , {
    sortDirection: 4,
    styleClassName: 7,
    width: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::Crosstab", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ {
    ROW_HEADER_UPDATED: 20018,
    COLUMN_HEADER_UPDATED: 20019,
    DATASET_UPDATED: 20020,
    SELECTED_CHANGED: 20017
}, {
    suppressedTotalMeasureNames: [ 7 ],
    showDrillAsHyperLinkText: 2,
    scrollbarStyle: 1,
    totalStyle: 1,
    columnAutoFill: 2,
    showAxisHeaders: 2,
    columnIndentedViewMode: 2,
    columnHierarchy: 1,
    selectionStyle: 1,
    showRowTotal: 2,
    suppressedSubtotalMeasureNames: [ 7 ],
    sourceDataSet: 1,
    rowHierarchy: 1,
    rowHeaderStyle: 1,
    rowNumberHeaderLabel: 7,
    measureColumnNames: [ 7 ],
    columnDataTreeNode: 1,
    headerStyleTransposed: 2,
    displayInteractionButtons: 2,
    dataTreeSortContext: 1,
    allowColumnResizing: 2,
    showColumnSubTotal: 2,
    tableStyle: 1,
    rowHeaderLabelStyle: 1,
    showSummaryOnTop: 2,
    levelViewMode: 2,
    sortContext: 1,
    subtotalStyleClass: 2,
    columnAxisLevels: [ 1 ],
    style: 1,
    brushStyle: 1,
    selectionExpression: 1,
    columnHeaderStyle: 1,
    measureWidth: 4,
    selectionMode: 4,
    hierarchyDataSet: 1,
    columnInfoManager: 1,
    rowTotalIndices: [ 4 ],
    rowHierarchyNames: [ 7 ],
    showColumnTotal: 2,
    rowSubtotalIndices: [ 4 ],
    rowAxisLevels: [ 1 ],
    rowDataTreeNode: 1,
    rowIndentedViewMode: 2,
    dataSet: 1,
    columnHeaderLabelStyle: 1,
    showRowSubTotal: 2,
    showRowNumbers: 2,
    subtotalStyle: 1,
    omittedSubtotalColumnLevelNames: [ 7 ],
    showMissingLabelAsBlank: 2,
    indentedViewMode: 2,
    columnActionEnabled: 2,
    excludedColumnNames: [ 7 ],
    rowActionEnabled: 2,
    showRowNumberByHeader: 2,
    columnHierarchyNames: [ 7 ],
    transpose: 2,
    numberOfMeasures: 4,
    showEmptyRowsAndColumns: 2,
    measureHeaderStyle: 1
}, , , {
    createRenderer: [ 1 ],
    _setDisplayRule_nob: [ 0, 4, 1, 2 ],
    setColumnLevelInfo: [ 0, 4, 1 ],
    setRowLevelInfo: [ 0, 4, 1 ],
    getColumnInfo: [ 1, 4 ],
    setColumnInfo: [ 0, 4, 1 ],
    getColumnLevelInfo: [ 1, 4 ],
    _setDisplayRule_no: [ 0, 4, 1 ],
    updateRowHeader: [ 0 ],
    getDisplayRule: [ 1, 4 ],
    updateColumnHeader: [ 0 ],
    updateDataSet: [ 0 ],
    getRowLevelInfo: [ 1, 4 ]
}, {
    _create: [ 4 ]
}, [ "setDisplayRule" ] ]);

var Fc = {
    CROSSTAB_EXPAND_BUTTON: 0,
    CROSSTAB_COLLAPSE_BUTTON: 1,
    CROSSTAB_DRILLDOWN_BUTTON: 2,
    CROSSTAB_PAGE_UP_BUTTON: 3,
    CROSSTAB_PAGE_UP_END_BUTTON: 4,
    CROSSTAB_PAGE_DOWN_BUTTON: 5,
    CROSSTAB_PAGE_DOWN_END_BUTTON: 6,
    NONE: 7
};

var jc = {
    CROSSTAB_ROW_HEADER: 0,
    CROSSTAB_MEASURE_HEADER: 1,
    CROSSTAB_COLUMN_HEADER: 2,
    CROSSTAB_ROW_AXIS_LABEL_HEADER: 3,
    CROSSTAB_COLUMN_AXIS_LABEL_HEADER: 4,
    CROSSTAB_DATA_CELL: 5,
    DATAGRID_DATA_CELL: 6,
    DATAGRID_COLUMN_HEADER: 7,
    DATAGRID_COLUMN_SEPARATOR: 8,
    DATAGRID_COLUMN_TOTAL: 9
};

var Vc = Dr("commons::DataGridPickResultEntry", [ "commons::PickResultEntry" ], Ka, [ , , , {
    sparkCell: 2,
    pickId: 4,
    columnIndex: 4,
    rowIndex: 4,
    type: 4,
    selected: 2,
    dropIndex: 4
}, , {
    _create: [ 4 ]
}, ,  ]);

var Hc = Dr("commons::CrosstabPickResultEntry", [ "commons::PickResultEntry", "commons::DataGridPickResultEntry" ], Ka, [ , , , {
    sourceDataSetName: 7,
    node: 1,
    cellWidth: 5,
    allOther: 2,
    buttonType: 4,
    x: 5,
    totalColumn: 2,
    hierarchyName: 7,
    index: 4,
    y: 5,
    cellHeight: 5,
    subtotalColumn: 2
}, , {
    _create: [ 4 ]
}, ,  ]);

var Uc = {
    FIXED: 0,
    GROWABLE: 1,
    SHRINKABLE: 2,
    FLEXIBLE: 3
};

Dr("commons::LayoutStrategy", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ , , , , {
    layout: [ 0, 1, 1 ],
    getStrategyType: [ 4 ]
}, , ,  ]);

var Gc = {
    IGNORESIZE: 0,
    HONORSIZE: 1
};

var Kc = Dr("commons::LayoutConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ , {
    singleChildMakesContainerHeightUnconstrained: 2,
    heightFlexibility: 4,
    usePreferredSizeAsMaximum: 2,
    horizontalOffset: 1,
    widthPreferredSizeBehavior: 4,
    borderThickness: 5,
    growPercentageContext: 1,
    heightPreferredSizeBehavior: 4,
    additionalContentHeight: 5,
    rightSpace: 5,
    leftSpace: 5,
    lockUserHeight: 2,
    maximumWidth: 5,
    additionalContentWidth: 5,
    responsiveWeights: [ 5 ],
    widthFlexibility: 4,
    height: 1,
    zIndex: 4,
    padding: 1,
    backupResponsiveWeights: [ 5 ],
    footerHeight: 5,
    growHorizontal: 2,
    tiledReflowMinimumHeight: 5,
    growVertical: 2,
    verticalOffset: 1,
    minimumHeight: 5,
    backupWidth: 1,
    backupHeightFlexibility: 4,
    considerChildrenForSizeCalculations: 2,
    singleChildMakesContainerWidthUnconstrained: 2,
    width: 1,
    lockUserWidth: 2,
    maximumHeight: 5,
    headerHeight: 5,
    minimumWidth: 5,
    useGroupDispatch: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::LayoutProxy", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ , {
    grow: 2,
    cumulativeExtraHeight: 5,
    cumulativeExtraWidth: 5,
    defaultConstraint: 1,
    children: [ 1 ],
    w: 1,
    childrenPerLine: [ 4 ],
    x: 1,
    h: 1,
    y: 1,
    isDisabled: 2,
    defaultStrategy: 1
}, , , {
    getStrategy: [ 1 ],
    layout: [ 0, 1 ],
    setNarrowScreenLayout: [ 0, 2 ],
    getConstraint: [ 1 ],
    getBoundsInPixels: [ 12 ],
    setBoundsInPixels: [ 0, 12 ],
    disable: [ 0 ],
    enable: [ 0 ],
    translate: [ 0, 11 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var Wc = Dr("commons::LayoutContext", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ , {
    invertXSpace: 2,
    ignoreContainerPadding: 2,
    positionTiledContentRelativeToRoot: 2,
    tileGap: 5,
    enableTileMinimums: 2,
    scrollBarSize: 5,
    enableTileReflow: 2,
    designWidth: 4,
    handleScrollBarSpace: 2,
    defaultMinimumHeight: 5,
    invertYSpace: 2,
    containerInset: 5,
    reserveSpaceForMinimum: 2,
    disableRecursion: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var $c = Wc;

var Yc = Dr("commons::PreferredSizeRequestEvent", [ "commons::PortableEvent" ], Ka, [ {
    PREFERRED_WIDTH_REQUEST: 20046,
    MINIMUM_HEIGHT_REQUEST: 20051,
    WIDTH_REQUEST: 20048,
    PREFERRED_HEIGHT_REQUEST: 20047,
    HEIGHT_REQUEST: 20049,
    MINIMUM_WIDTH_REQUEST: 20050
}, , , , {
    getConstrainedSize: [ 5 ]
}, , ,  ]);

var qc = Yc;

var Xc = {
    SCROLL: 0,
    FIT: 1,
    GROW: 2,
    STACK: 3
};

Dr("commons::SelectionControlTerm", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ , {
    expression: 1,
    label: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::SelectionControlItem", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ , {
    selections: [ 1 ],
    terms: [ 1 ],
    selectionOptions: 1,
    selectionController: 1,
    readOnly: 2,
    label: 7
}, , , {
    removeTerm: [ 2, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("commons::SelectionControl", [ "commons::PropertyOwner", "commons::BaseModel", "commons::BaseUIModel" ], es, [ {
    REMOVE_TERM: 20054,
    SELECTION_CONTROL_CHANGE: 20052,
    REMOVE_ITEM: 20053
}, {
    items: [ 1 ]
}, , , {
    updateSelection: [ 0, 1, 1, 1, 2, [ 1 ] ],
    removeItems: [ 0, [ 1 ] ],
    clear: [ 0 ],
    removeTerms: [ 0, [ 1 ] ]
}, {
    _create: [ 4 ]
}, ,  ]);

var Zc = Dr("commons::ShowContextMenuEvent", [ "commons::PortableEvent" ], Ka, [ {
    SHOW_CONTEXT_MENU: 20056
}, , , , {
    getPickResult: [ 1 ]
}, , ,  ]);

var Jc = Dr("commons::BrowserFacility", [ "commons::UnicodeFacility" ], Ka, [ , , , , {
    getCollator: [ 1, 7 ],
    isICUEnabled: [ 2 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var Qc = Dr("commons::InputController", [], Ka, [ , , , , {
    handleBlur: [ 0 ],
    handleMouseEnter: [ 0 ],
    handleMouseWheel: [ 2, 4, 4, 4, 4, 4 ],
    handleMouseLeave: [ 0 ],
    handlePan: [ 0, 4, 4, 4, 4, 4 ],
    handleTap: [ 0, 4, 4, 4, 4 ],
    handleMouseDoubleClick: [ 0, 4, 4, 2 ],
    handleLongPress: [ 0, 4, 4, 4, 4 ],
    handlePointerHover: [ 0, 4, 4 ],
    handleMouseDown: [ 0, 4, 4, 4, 4, 2, 2 ],
    handleFocus: [ 0 ],
    setView: [ 0, 1 ],
    handleMouseMove: [ 0, 4, 4, 4, 4, 2, 2 ],
    handleMouseUp: [ 0, 4, 4, 4, 4, 2, 2 ],
    getView: [ 1 ],
    handlePinch: [ 2, 4, 4, 4, 4, 4, 4, 5, 5, 4 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var ed = {
    AUTO: 0,
    WEBGL: 1,
    CANVAS2D: 2,
    SVG: 3
};

var td = Dr("commons::ViewManager", [], Ka, [ , , , , , {
    getGlobalRenderMode: [ 4 ],
    removeView: [ 0, 1 ],
    invalidateAllViews: [ 0 ],
    refreshAllViews: [ 0 ],
    renderAllViews: [ 0 ],
    addView: [ 0, 1, 7, 4 ],
    appendCanvasToContainer: [ 0, 7 ]
}, ,  ]);

var od = Object.freeze({
    __proto__: null,
    default: td
});

var nd = new Map;

var ad = new Map;

var rd = null;

var sd = null;

function id(e) {
    if (rd === null) {
        rd = document.createElement("canvas");
        sd = rd.getContext("2d");
    }
    if (e !== sd.font) {
        sd.font = e;
    }
    return sd;
}

function ld(e) {
    if (e === undefined || e === null) {
        throw new Error("domElement must not be null in TextUtil._getElementOffset");
    } else if (e.ownerDocument === undefined || e.ownerDocument === null) {
        throw new Error("domElement.ownerDocument must not be null in TextUtil._getElementOffset");
    }
    var t = e.ownerDocument.documentElement;
    var o = e.getBoundingClientRect();
    var n = document.defaultView;
    if (n === undefined || n === null) {
        throw new Error("document.defaultView must not be null in TextUtil._getElementOffset");
    }
    return {
        top: o.top + n.pageYOffset - t.clientTop,
        left: o.left + n.pageXOffset - t.clientLeft
    };
}

function cd(e, t) {
    if (t === void 0) {
        t = "normal";
    }
    var o = e + t;
    {
        var n = nd.get(o);
        if (n !== undefined) {
            return n;
        }
    }
    var a = 0;
    {
        var r = "Mg";
        var s = document.getElementsByTagName("body")[0];
        var i = document.createElement("div");
        var l = document.createTextNode(r);
        i.appendChild(l);
        i.setAttribute("style", "font: ".concat(e, " !important; display: block !important; position: absolute !important; top: 0 !important; bottom: auto !important; line-height: ").concat(t, " !important; height: auto !important; min-height: 0 !important; max-height: none !important; overflow-wrap: normal !important; padding: 0 !important;"));
        s.appendChild(i);
        a = i.getBoundingClientRect().height;
        s.removeChild(i);
    }
    nd.set(o, a);
    return a;
}

var dd = {
    TEXT_PADDING: 2,
    buildDOMFontProperty: function(e, t) {
        var o = "";
        if (e.indexOf(":") >= 0) {
            var n = e.lastIndexOf(":");
            o = e.substring(0, n);
            e = e.substring(n + 1);
            o += " ";
        }
        return "".concat(o).concat(t, "px ").concat(e);
    },
    buildDOMFontPropertyFromComputedStyle: function(e) {
        return [ e.fontStyle, e.fontWeight, e.fontSize, e.fontFamily ].join(" ");
    },
    getFontMetricsForFontProperty: function(e) {
        {
            var t = ad.get(e);
            if (t) {
                return t;
            }
        }
        var o = [ 0, 0, 0, 0 ];
        {
            var n = document.getElementsByTagName("body")[0];
            var a = document.createElement("div");
            var r = document.createElement("span");
            r.style.font = e;
            r.appendChild(document.createTextNode("Mg"));
            var s = document.createElement("div");
            s.style.display = "inline-block";
            s.style.width = "1px";
            s.style.height = "0px";
            a.appendChild(r);
            a.appendChild(s);
            n.appendChild(a);
            s.style.verticalAlign = "bottom";
            o[0] = ld(s).top - ld(r).top;
            s.style.verticalAlign = "baseline";
            o[1] = ld(s).top - ld(r).top;
            o[2] = o[0] - o[1];
            o[3] = o[1];
            n.removeChild(a);
        }
        ad.set(e, o);
        return o;
    },
    getFontMetrics: function(e, t) {
        var o = dd.buildDOMFontProperty(e, t);
        return dd.getFontMetricsForFontProperty(o);
    },
    getTextHeight: function(e, t, o, n, a) {
        if (typeof e === "object") {
            t = e["font-style"];
            o = e["font-weight"];
            n = e["font-size"];
            e = e["font-family"];
        }
        if (t) {
            e = t + ":" + e;
        }
        if (o) {
            e = o + " " + e;
        }
        var r = dd.buildDOMFontProperty(e, n);
        return cd(r, a);
    },
    getTextHeightFromStyle: function(e) {
        return cd(dd.buildDOMFontPropertyFromComputedStyle(e), e.lineHeight);
    },
    getTextWidth: function(e, t, o) {
        if (!e) {
            return 0;
        }
        var n = dd.buildDOMFontProperty(t, o);
        var a = id(n);
        var r = 0;
        var s = e.split("\n");
        for (var i = 0, l = s; i < l.length; i++) {
            var c = l[i];
            r = Math.max(r, a.measureText(c).width);
        }
        return r;
    },
    getTextWidthFromComputedStyle: function(e, t, o, n) {
        if (!t || !t.fontStyle || !t.fontWeight || !t.fontSize || !t.fontFamily) {
            Wn("Invalid style object");
            return 0;
        }
        var a = dd.buildDOMFontPropertyFromComputedStyle(t);
        o = o || Number.MAX_VALUE;
        var r = id(a);
        if (!Array.isArray(e)) {
            var s = e;
            if (n) {
                s = n(s);
            }
            return Math.min(o, r.measureText(s).width);
        } else {
            var i = e;
            var l = 0;
            for (var c = 0, d = i.length; c < d; ++c) {
                var s = i[c];
                if (n) {
                    s = n(s);
                }
                l = Math.max(l, r.measureText(s).width);
                if (l >= o) {
                    return o;
                }
            }
            return l;
        }
    },
    clearFontCache: function() {
        nd.clear();
        ad.clear();
    }
};

function ud(e) {
    Jo.runtime.activeVisualizationManagers.add(e);
}

function md(e) {
    Jo.runtime.activeVisualizationManagers.delete(e);
}

function pd() {
    Jo.runtime.activeVisualizationManagers.forEach((function(e) {
        e.sizeVisualization();
    }));
}

rn.addClassToModuleMap("commons::DispatchBridge", Zr);

rn.addClassToModuleMap("commons::EventDispatcher", es);

function fd() {
    if (hn()) {
        return;
    }
    try {
        var e = Sn("commons::RuntimeConfiguration", Cc);
        var t = new e;
        t.setPathToInstallDirectory(hs());
        t.setLocale(ta());
        t.setFormatterLocale(aa());
        t.setSupportsMSAA(false);
        t.setSupportsAsyncNetworking(true);
        t.setSupportsThreads(false);
        t.setHasRunLoop(true);
        t.setDefaultImageDataPolicies(cc.ACQUIRE_AS_TEXTURE_ONLY);
        t.setDpi(96);
        t.setEnableTraceLogging(da);
        console.log("LTJS: getFormatLocale", aa());
        console.log("LTJS: getLocale", ta());
        var o = Sn("commons::Style", Gs);
        o.setDefaultGlobalStyleType(ns.NONE);
        var n = [];
        n.push("[GENERAL]");
        n.push("logfile = Portable.log");
        var a = "loglevel = ";
        var r = jn("clogLogLevel");
        if (r) {
            a += r;
        } else {
            a += "WARNING";
        }
        n.push(a);
        n.push("[DEBUG]");
        n.push("output = CONSOLE");
        n.push("[INFO]");
        n.push("output = CONSOLE");
        n.push("[WARNING]");
        n.push("output = CONSOLE");
        n.push("[ERROR]");
        n.push("output = CONSOLE");
        n.push("[SASNOTE]\noutput = LOG_FILE\n[SASWARNING]\noutput = LOG_FILE");
        n.push("[STIMER]");
        n.push("output = LOG_FILE");
        t.setLogConfig(n.join("\n"));
        Sc.initialize(t);
        var s = Sn("commons::ResourceManager", xc);
        setInterval((function() {
            s.updateTimers();
        }), 1e3);
        console.log("*******************************");
        console.log("LTJS PLATFORM INITIALIZATION SUCCESS");
        console.log("*******************************");
    } catch (e) {
        console.error("ERROR!!! LTJS PLATFORM INITIALIZATION FAILURE", e);
    }
    ln();
}

function gd() {
    Jo.runtime.initializedTypemap();
    Jo.deps = {
        isOpenUI: !!sas.ltjs.isOpenUI,
        ClosetUtil: Jo,
        TextAlignment: Lc,
        WrappableCloset: Va,
        HttpVerb: ll,
        NetworkDataEvent: Sn("commons::NetworkDataEvent", hc),
        NetworkImageEvent: Sn("commons::NetworkImageEvent", vc),
        RenderMode: ed,
        ViewManager: Sn("commons::ViewManager", od),
        PortableEvent: Sn("commons::PortableEvent", ci),
        TextUtil: dd,
        TraceUtil: wa,
        ltjsUtil: {
            getResourceURL: zn,
            getUriParameter: jn,
            warn: Wn,
            ajax: ra,
            getImage: sa,
            getSASAjaxConfig: la,
            getBrowserName: An,
            BROWSER: Tn
        },
        updateVisualizationSizes: pd,
        TriState: fc
    };
    var e = hs() + "{PACKAGE}/NLS/{LOCALE}/{BUNDLE}.properties";
    var t = Sn("commons::ResourceManager", xc);
    t.setBundlePathTemplate(e);
    for (var o = 0, n = pn(); o < n.length; o++) {
        var a = n[o];
        a.instance();
    }
    if (sas.ltjs.useBrowserCollation) {
        t.setUnicodeFacility(new Jc);
    }
    fd();
}

function hd() {
    if (!dn()) {
        return;
    }
    vs(mn());
    Jo.onRuntimeInitialized = gd;
    gs();
    if (Jo.removeBlockingDependency) {
        Jo.removeBlockingDependency("ltjsRuntimeInitialization");
    }
    Jo.ltjsRuntimeInitialized = true;
    if (!sas.ltjs.node) {
        window.addEventListener("unload", (function() {
            Jo.setIsShuttingDown(true);
            try {
                ca(window.document);
            } catch (e) {}
        }));
    }
}

var bd = sas.ltjs.isOpenUI ? "sap-ui-static" : "graph-ui-static";

function vd() {
    var e = document.getElementById(bd);
    if (e) {
        return e;
    }
    e = document.createElement("div");
    e.id = bd;
    e.style.height = "0px";
    e.style.width = "0px";
    e.style.cssFloat = "left";
    document.body.insertBefore(e, document.body.firstElementChild);
    return e;
}

var yd = function() {
    function e(e, t, o, n) {
        if (t === void 0) {
            t = false;
        }
        if (o === void 0) {
            o = 500;
        }
        if (n === void 0) {
            n = 500;
        }
        this.speechElement = e;
        this.silentCharacter = " ";
        this.silentCharacterCount = 0;
        this.silentCharacterMaxCount = 5;
        this.bBuffered = t;
        if (t) {
            this.bufferTimerRunning = false;
            this.bufferTimer = null;
            this.lastWriteDOM = null;
            this.writeBuffer = null;
            this._writeToDOMDelay = o;
            this._writeBufferWait = n;
        }
    }
    e.prototype.addSilentText = function(e) {
        var t = this.silentCharacterCount ? this.silentCharacter.repeat(this.silentCharacterCount) : "";
        this.silentCharacterCount = (this.silentCharacterCount + 1) % this.silentCharacterMaxCount;
        return e + t;
    };
    Object.defineProperty(e.prototype, "buffered", {
        get: function() {
            return this.bBuffered;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(e.prototype, "writeToDOMDelay", {
        get: function() {
            return this._writeToDOMDelay;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(e.prototype, "writeBufferWait", {
        get: function() {
            return this._writeBufferWait;
        },
        enumerable: false,
        configurable: true
    });
    e.prototype.notify = function(e) {
        var t = this.addSilentText(e);
        if (this.bBuffered) {
            this.notifyBuffered(t);
        } else {
            this.notifyUnbuffered(t);
        }
    };
    e.prototype.notifyBuffered = function(e) {
        this.writeBufferedMessage(e);
    };
    e.prototype.stop = function() {
        if (this.bufferTimerRunning && this.bufferTimer) {
            window.clearTimeout(this.bufferTimer);
        }
    };
    e.prototype.writeBufferedMessage = function(e) {
        var t = this;
        if (this.lastWriteDOM <= Date.now() - this.writeToDOMDelay && !this.bufferTimerRunning) {
            this.writeBufferedMessageToDOM(e);
        } else {
            window.clearTimeout(this.bufferTimer);
            this.writeBuffer = e;
            this.bufferTimer = window.setTimeout((function() {
                t.writeBufferedMessageToDOM(t.writeBuffer);
                t.bufferTimerRunning = false;
            }), this.writeBufferWait);
            this.bufferTimerRunning = true;
        }
    };
    e.prototype.writeBufferedMessageToDOM = function(e) {
        while (this.speechElement.firstChild) {
            this.speechElement.removeChild(this.speechElement.firstChild);
        }
        var t = document.createElement("div");
        t.innerText = e;
        this.speechElement.appendChild(t);
        this.lastWriteDOM = Date.now();
    };
    e.prototype.notifyUnbuffered = function(e) {
        var t = this;
        var o = document.createElement("div");
        o.innerText = e;
        if (this.speechElement.childElementCount === 0) {
            this.speechElement.appendChild(o);
        } else {
            var n = this.speechElement.children.length;
            for (var a = 0; a < n; a++) {
                if (this.speechElement.children[a] instanceof Element) {
                    this.speechElement.children[a].style.display = "none";
                }
            }
            this.speechElement.appendChild(o);
            window.setTimeout((function() {
                n = t.speechElement.children.length;
                for (var e = 0; e < n; e++) {
                    if (t.speechElement.children[e] instanceof Element && t.speechElement.children[e].style.display === "none") {
                        t.speechElement.children[e].remove();
                    }
                }
            }), 10);
        }
    };
    return e;
}();

var xd = function() {
    function e(e, t, o) {
        this._ASSERTIVE_CONTAINER_ID = "sas-aria-live-assertive";
        this._accessibilityController = e.retain();
        this._domElement = t;
        this._visContainerId = o;
        this._speechManager = null;
        this._addListeners();
        this._domElement.setAttribute("role", "application");
        this._visContainerId = this._visContainerId;
    }
    e.prototype._addListeners = function() {
        var e = this._accessibilityController.getModel();
        if (!e) {
            return;
        }
        this._accessibilityFocusChange = e.attachEvent(Oc.ACCESSIBILITY_FOCUS_CHANGE, this._handleModelElementFocusChange, this);
        this._accessibilityElementSelected = e.attachEvent(Oc.ACCESSIBILITY_ELEMENT_SELECTED, this._handleModelElementFocusChange, this);
    };
    e.prototype._handleModelElementFocusChange = function(e) {
        var t = e instanceof Oc ? e : null;
        var o = t === null || t === void 0 ? void 0 : t.getAccessibilityElement();
        if (!o) {
            return;
        }
        var n = o.getAccessibilityLabel();
        if (!n) {
            return;
        }
        this.addTextToStaticSpace(n);
    };
    e.prototype.addTextToStaticSpace = function(e) {
        var t, o;
        if (e === null || e === undefined) {
            return;
        }
        var n = Jn("sas_commons", "expression.operator.lessThan.txt");
        var a = Jn("sas_commons", "expression.operator.greaterThan.txt");
        var r = function(e, t, o) {
            var r = e === "<" ? n : a;
            if (t > 0 && o[t - 1] !== " ") {
                r = " " + r;
            }
            if (o.length > t + 1 && o[t + 1] !== " ") {
                r = r + " ";
            }
            return r;
        };
        e = e.replace(/</g, r);
        e = e.replace(/>/g, r);
        var s = document.getElementById(this._ASSERTIVE_CONTAINER_ID);
        if (!s) {
            var i = document.createElement("div");
            i.setAttribute("role", "status");
            i.setAttribute("id", this._ASSERTIVE_CONTAINER_ID);
            i.setAttribute("aria-live", "assertive");
            i.style.height = "0px";
            i.style.width = "0px";
            i.style.overflow = "hidden";
            var l = vd();
            l.appendChild(i);
            s = document.getElementById(this._ASSERTIVE_CONTAINER_ID);
        }
        if (!this._speechManager) {
            this._speechManager = new yd(s, true);
        }
        (t = this._speechManager) === null || t === void 0 ? void 0 : t.notify("");
        (o = this._speechManager) === null || o === void 0 ? void 0 : o.notify(e);
    };
    e.prototype.destroy = function() {
        if (this._accessibilityController) {
            if (this._accessibilityFocusChange) {
                this._accessibilityFocusChange.detach();
            }
            if (this._accessibilityElementSelected) {
                this._accessibilityElementSelected.detach();
            }
            this._accessibilityController.release();
            this._accessibilityController = null;
        }
        if (this._speechManager) {
            this._speechManager = null;
        }
        this._domElement = null;
    };
    return e;
}();

var Sd = new Map;

var wd = [];

var Cd = [];

var Ed = function(e) {
    var t = Dd(e);
    if (t === null || t === undefined) {
        return;
    }
    if (Cd[e.key] === undefined) {
        _d(e);
    }
    pc.pressKey(t);
    if (pc.didHandleLastAction()) {
        e.preventDefault();
    }
};

var Id = function(e) {
    if (pc.didHandleLastAction()) {
        e.preventDefault();
    }
    var t = Dd(e);
    if (t === null || t === undefined) {
        return;
    }
    if (pc.isPressed(t)) {
        pc.releaseKey(t);
    }
};

fn((function() {
    if (sas.ltjs.node) {
        return;
    }
    var e = window.navigator.appVersion.indexOf("Mac") !== -1;
    wd[13] = mc.PVK_ENTER;
    wd[27] = mc.PVK_ESCAPE;
    wd[33] = mc.PVK_PAGEUP;
    wd[34] = mc.PVK_PAGEDOWN;
    wd[37] = mc.PVK_LEFTARROW;
    wd[39] = mc.PVK_RIGHTARROW;
    wd[40] = mc.PVK_DOWNARROW;
    wd[38] = mc.PVK_UPARROW;
    wd[17] = mc.PVK_CONTROL;
    wd[18] = mc.PVK_ALT;
    wd[91] = e ? mc.PVK_CONTROL : mc.PVK_SUPER;
    wd[92] = e ? mc.PVK_CONTROL : mc.PVK_SUPER;
    wd[93] = e ? mc.PVK_CONTROL : null;
    wd[16] = mc.PVK_SHIFT;
    wd[36] = mc.PVK_HOME;
    wd[35] = mc.PVK_END;
    wd[32] = mc.PVK_SPACE;
    wd[65] = mc.PVK_A;
    wd[67] = mc.PVK_C;
    wd[69] = mc.PVK_E;
    wd[71] = mc.PVK_G;
    wd[82] = mc.PVK_R;
    wd[84] = mc.PVK_T;
    wd[88] = mc.PVK_X;
    wd[89] = mc.PVK_Y;
    wd[90] = mc.PVK_Z;
    wd[121] = mc.PVK_F10;
    wd[" "] = mc.PVK_SPACE;
    wd.Enter = mc.PVK_ENTER;
    wd.PageUp = mc.PVK_PAGEUP;
    wd.PageDown = mc.PVK_PAGEDOWN;
    wd.Left = mc.PVK_LEFTARROW;
    wd.ArrowLeft = mc.PVK_LEFTARROW;
    wd.Right = mc.PVK_RIGHTARROW;
    wd.ArrowRight = mc.PVK_RIGHTARROW;
    wd.Down = mc.PVK_DOWNARROW;
    wd.ArrowDown = mc.PVK_DOWNARROW;
    wd.Up = mc.PVK_UPARROW;
    wd.ArrowUp = mc.PVK_UPARROW;
    wd.Control = mc.PVK_CONTROL;
    wd.Alt = mc.PVK_ALT;
    wd.OS = e ? mc.PVK_CONTROL : mc.PVK_SUPER;
    wd.Meta = e ? mc.PVK_CONTROL : null;
    wd.Shift = mc.PVK_SHIFT;
    wd.Home = mc.PVK_HOME;
    wd.End = mc.PVK_END;
    wd.Spacebar = mc.PVK_SPACE;
    wd.Tab = mc.PVK_TAB;
    wd.Escape = mc.PVK_ESCAPE;
    wd.a = mc.PVK_A;
    wd.c = mc.PVK_C;
    wd.e = mc.PVK_E;
    wd.g = mc.PVK_G;
    wd.r = mc.PVK_R;
    wd.t = mc.PVK_T;
    wd.x = mc.PVK_X;
    wd.y = mc.PVK_Y;
    wd.z = mc.PVK_Z;
    wd.A = mc.PVK_A;
    wd.C = mc.PVK_C;
    wd.E = mc.PVK_E;
    wd.G = mc.PVK_G;
    wd.R = mc.PVK_R;
    wd.T = mc.PVK_T;
    wd.X = mc.PVK_X;
    wd.Y = mc.PVK_Y;
    wd.Z = mc.PVK_Z;
    wd.F10 = mc.PVK_F10;
    Cd.altKey = mc.PVK_ALT;
    Cd.ctrlKey = mc.PVK_CONTROL;
    Cd.shiftKey = mc.PVK_SHIFT;
    Cd.metaKey = e ? mc.PVK_CONTROL : mc.PVK_SUPER;
    document.addEventListener("keydown", Ed, {
        capture: true
    });
    document.addEventListener("keyup", Id, {
        capture: true
    });
}));

function _d(e) {
    Sd.clear();
    for (var t in Cd) {
        if (Cd.hasOwnProperty(t)) {
            if (e[t]) {
                Sd.set(Cd[t], true);
            }
        }
    }
    for (var t in Cd) {
        if (Cd.hasOwnProperty(t)) {
            var o = Cd[t];
            if (o) {
                var n = pc.isPressed(o);
                var a = !!Sd.get(o);
                if (n !== a) {
                    if (a) {
                        pc.pressKey(o);
                    } else {
                        pc.releaseKey(o);
                    }
                }
            }
        }
    }
}

function Dd(e) {
    var t = e.key;
    var o = t ? t : e.keyCode;
    if (o) {
        return wd[o];
    }
    return null;
}

function Ld() {
    document.removeEventListener("keydown", Ed);
    document.removeEventListener("keyup", Id);
}

if (!sas.ltjs.node) {
    window.addEventListener("unload", Ld);
}

var Td;

(function(e) {
    e[e["VISIBLE"] = 0] = "VISIBLE";
    e[e["NONE"] = 1] = "NONE";
})(Td || (Td = {}));

var Rd = Td;

var kd;

(function(e) {
    e[e["TOP"] = 1] = "TOP";
    e[e["BOTTOM"] = 2] = "BOTTOM";
    e[e["LEFT"] = 4] = "LEFT";
    e[e["RIGHT"] = 8] = "RIGHT";
    e[e["VERTICAL"] = 3] = "VERTICAL";
    e[e["HORIZONTAL"] = 12] = "HORIZONTAL";
})(kd || (kd = {}));

var Ad = kd;

var Md = 5;

var Nd = .3;

function Od(e) {
    var t;
    if (e instanceof HTMLElement) {
        t = e.getBoundingClientRect();
    } else {
        t = e;
    }
    return {
        top: t.top,
        left: t.left,
        width: t.width,
        height: t.height,
        bottom: t.top + t.height,
        right: t.left + t.width
    };
}

function Pd(e, t, o) {
    return Math.min(Math.max(e, o), t);
}

function Bd(e, t, o, n) {
    return {
        left: e.width / 2 + e.left - t.width / 2,
        top: Pd(o.top, Math.max(0, o.top + o.height - t.height), e.top - (t.height + n)),
        maxHeight: e.top - Md,
        maxWidth: o.width - Md * 2,
        constraintHeight: o.height - Md,
        constraintLeft: o.left + Md,
        constraintTop: o.top + Md,
        constraintWidth: o.width - Md * 2
    };
}

function zd(e, t, o, n) {
    var a = Pd(o.top, o.top + o.height + n, e.top + e.height);
    return {
        left: e.width / 2 + e.left - t.width / 2,
        top: a,
        maxHeight: o.height + o.top - a - Md,
        maxWidth: o.width - Md * 2,
        constraintHeight: o.height - Md,
        constraintLeft: o.left + Md,
        constraintTop: o.top + Md,
        constraintWidth: o.width - Md * 2
    };
}

function Fd(e, t, o, n) {
    return {
        left: Pd(Md, e.left, e.left - (t.width + n)),
        top: e.height / 2 + e.top - t.height / 2,
        maxHeight: o.height - Md * 2,
        maxWidth: e.left - o.left - Md,
        constraintHeight: o.height - Md * 2,
        constraintLeft: o.left + Md,
        constraintTop: o.top + Md,
        constraintWidth: o.width - Md
    };
}

function jd(e, t, o, n) {
    var a = Pd(Md, o.left + o.width + n, e.left);
    return {
        left: a,
        top: e.height / 2 + e.top - t.height / 2,
        maxHeight: o.height - Md * 2,
        maxWidth: o.width + o.left - a - Md,
        constraintHeight: o.height - Md * 2,
        constraintLeft: o.left + Md,
        constraintTop: o.top + Md,
        constraintWidth: o.width - Md
    };
}

function Vd(e, t, o, n, a) {
    var r = Od(e);
    var s = Od(t);
    var i = Od(o);
    var l = null;
    var c = Ad.TOP;
    {
        var d = void 0, u = void 0;
        var m = 0;
        var p = {
            width: 0,
            height: 0
        };
        for (var f = 0, g = n.length; !l && f < g; ++f) {
            p.width = i.width;
            p.height = i.height;
            switch (n[f]) {
              case Ad.TOP:
                d = s.top - i.top - Md;
                if (d >= r.height + a) {
                    l = Bd(s, r, i, a);
                    c = Ad.TOP;
                }
                p.height = d;
                break;

              case Ad.BOTTOM:
                d = i.height - Md - (s.top - i.top + s.height);
                if (d >= r.height + a) {
                    l = zd(s, r, i, a);
                    c = Ad.BOTTOM;
                }
                p.height = d;
                break;

              case Ad.LEFT:
                u = s.left - i.left;
                if (u >= r.width + a - Md) {
                    l = Fd(s, r, i, a);
                    c = Ad.LEFT;
                }
                p.width = u;
                break;

              case Ad.RIGHT:
                u = i.width - Md - (s.left - i.left + s.width);
                if (u >= r.width + a - Md) {
                    l = jd(s, r, i, a);
                    c = Ad.RIGHT;
                }
                p.width = u;
                break;

              default:
                console.error("[ltjs-commons]: invalid position precedence value: ".concat(n[f]));
                continue;
            }
            var h = p.width * Nd * p.height;
            if (h > m) {
                m = h;
                c = n[f];
            }
        }
    }
    if (!l) {
        switch (c) {
          case Ad.TOP:
            l = Bd(s, r, i, a);
            break;

          case Ad.BOTTOM:
            l = zd(s, r, i, a);
            break;

          case Ad.LEFT:
            l = Fd(s, r, i, a);
            break;

          case Ad.RIGHT:
            l = jd(s, r, i, a);
            break;
        }
    }
    if (!l) {
        return null;
    }
    var b = Pd(l.constraintLeft, Math.max(l.constraintLeft, l.constraintLeft + l.constraintWidth - s.width), Math.min(l.constraintWidth + l.constraintLeft - r.width, l.left));
    var v = Pd(l.constraintTop, Math.max(l.constraintTop, l.constraintTop + l.constraintHeight - s.height), Math.min(l.constraintHeight + l.constraintTop - r.height, l.top));
    return {
        fit: c,
        fitPosition: l,
        offset: {
            left: b,
            top: v
        }
    };
}

function Hd(e, t, o, n, a) {
    var r = false;
    var s = undefined;
    var i = function(o) {
        if (r || !n(o)) {
            return;
        }
        r = true;
        if (s !== undefined) {
            window.clearTimeout(s);
            s = undefined;
        }
        if (e) {
            e.removeEventListener(t, i);
        }
        a();
    };
    if (sas.ltjs.isOpenUI) {
        jQuery.sap.require("sas.hc.ui.core.AnimationUtil");
        if (!sas.hc.ui.core.AnimationUtil.getVisualEffectsEnabled()) {
            o = 0;
        }
    }
    if (!e) {
        o = 0;
    }
    s = window.setTimeout(i, o);
    if (o !== 0 && e) {
        e.addEventListener(t, i);
    }
    return {
        cancel: i
    };
}

function Ud(e, t, o, n) {
    if (!o) {
        return null;
    }
    n = n || 300;
    var a = function(o) {
        var n = o;
        if (n) {
            if (t && n.propertyName !== t) {
                return false;
            }
            var a = n.srcElement || n.target;
            if (e && a !== e) {
                return false;
            }
        }
        return true;
    };
    return Hd(e, "transitionend", n, a, o);
}

function Gd(e, t, o, n, a) {
    if (!e || !t) {
        return null;
    }
    e.style[t] = o;
    return Ud(e, t, n, a);
}

var Kd;

var Wd = (Kd = Uo.__popoverIds) !== null && Kd !== void 0 ? Kd : new Map;

Uo.__popoverIds = Wd;

function $d(e, t, o) {
    return Math.min(Math.max(e, o), t);
}

function Yd(e, t) {
    if (e) {
        if (t === Rd.NONE) {
            e.classList.add("sasInvisible");
        } else {
            e.classList.remove("sasInvisible");
        }
    }
}

function qd(e, t) {
    if (e) {
        var o = getComputedStyle(e);
        var n = t.getBoundingClientRect();
        return {
            padding: {
                left: parseFloat(o.paddingLeft),
                right: parseFloat(o.paddingRight),
                top: parseFloat(o.paddingTop),
                bottom: parseFloat(o.paddingBottom)
            },
            width: n.width,
            height: n.height
        };
    }
    return undefined;
}

function Xd(e) {
    var t;
    var o = (t = e.ownerDocument.defaultView) !== null && t !== void 0 ? t : window;
    var n = o.visualViewport;
    if (n) {
        return {
            width: n.width,
            height: n.height,
            top: n.offsetTop,
            left: n.offsetLeft
        };
    }
    var a = e.ownerDocument;
    if (a.doctype !== null && a.documentElement) {
        return {
            width: a.documentElement.clientWidth,
            height: a.documentElement.clientHeight,
            top: 0,
            left: 0
        };
    }
    return {
        width: o.innerWidth,
        height: o.innerHeight,
        top: 0,
        left: 0
    };
}

var Zd = function() {
    function e() {
        this._currentAnimation = null;
        this._positions = [ Ad.TOP, Ad.BOTTOM ];
        this._currentPosition = -1;
        this._classNames = [ "sasPopover" ];
        this._display = Rd.VISIBLE;
        this._showArrow = true;
        this._contentId = null;
        this._styleOverrides = null;
        this._currentTarget = null;
        this._currentConstraint = null;
        this.__type = "sas.ltjs.commons.ui.popover.Popover";
        this._nextContentId();
    }
    e.prototype.setNamespace = function(e) {
        this.__type = e;
        this._nextContentId();
    };
    e.prototype._nextContentId = function() {
        var e;
        var t = "Popover";
        var o = this.__type.lastIndexOf(".");
        if (o !== -1) {
            t = this.__type.substring(o + 1);
        }
        var n = (e = Wd.get(t)) !== null && e !== void 0 ? e : 0;
        Wd.set(t, n + 1);
        this._contentId = t + n;
    };
    e.prototype.getDomRef = function(e) {
        var t = this._contentId ? document.getElementById(this._contentId) : null;
        if (!t) {
            return null;
        }
        return e ? t.querySelector(e) : t;
    };
    e.prototype.getDomRefs = function(e) {
        var t = this._contentId ? document.getElementById(this._contentId) : null;
        if (!t) {
            return null;
        }
        return t.querySelectorAll(e);
    };
    e.prototype.getDisplay = function() {
        return this._display;
    };
    e.prototype.setDisplay = function(e, t) {
        var o = this;
        if (e !== this._display) {
            this._display = e;
            var n = this.getDomRef();
            if (!n) {
                return;
            }
            if (t || t === undefined) {
                if (e === Rd.VISIBLE) {
                    if (this._currentAnimation) {
                        this._currentAnimation.cancel();
                        this._currentAnimation = null;
                    }
                    Yd(n, e);
                    n.style.opacity = "1";
                } else {
                    this._currentAnimation = Gd(n, "opacity", 0, (function() {
                        o._currentAnimation = null;
                        Yd(n, e);
                    }));
                }
            } else {
                Yd(n, e);
            }
        }
    };
    e.prototype.getShowArrow = function() {
        return this._showArrow;
    };
    e.prototype.setShowArrow = function(e) {
        this._showArrow = e;
    };
    e.prototype.getCurrentPosition = function() {
        return this._currentPosition;
    };
    e.prototype.resetCurrentPosition = function() {
        this._currentPosition = -1;
    };
    e.prototype.getStyleOverrides = function() {
        return this._styleOverrides;
    };
    e.prototype.setStyleOverrides = function(e) {
        if (this._styleOverrides === e) {
            return;
        }
        this._styleOverrides = e;
        if (!e) {
            this.removeCssStyleVariables();
        } else if (this.getDisplay() === Rd.VISIBLE) {
            this.setCssStyleVariables();
            this.positionPopover(this._currentTarget, this._currentConstraint);
        }
    };
    e.prototype._resetContent = function(e, t) {};
    e.prototype._sizeContent = function() {};
    e.prototype.setPositions = function(e) {
        this._positions = e;
    };
    e.prototype.positionPopover = function(e, t, o) {
        var n = this.getDomRef();
        if (!n) {
            return;
        }
        var a = this._positions;
        if (o && this._currentPosition !== -1) {
            a = this._positions.concat();
            var r = a.splice(a.indexOf(this._currentPosition), 1)[0];
            a.unshift(r);
        }
        var s = n.querySelector(".sasPopoverArrow");
        var i = n.querySelector(".sasArrowContainer");
        var l = this.getDisplay();
        if (l === Rd.NONE) {
            this.setDisplay(Rd.VISIBLE, false);
        }
        this._currentTarget = e;
        this._currentConstraint = t;
        var c = n.style;
        c.left = "0";
        c.top = "0";
        c.maxWidth = "";
        c.maxHeight = "";
        s.style.left = "";
        s.style.top = "";
        n.classList.remove("sasPositionTop");
        n.classList.remove("sasPositionLeft");
        n.classList.remove("sasPositionRight");
        n.classList.remove("sasPositionBottom");
        var d = i.getBoundingClientRect().height;
        i.style.display = "none";
        this._resetContent(e, t);
        var u = t !== null && t !== void 0 ? t : Xd(n);
        var m = Vd(n, e, u, a, d);
        if (m) {
            c.left = String(m.offset.left) + "px";
            c.top = String(m.offset.top) + "px";
            c.maxWidth = String(m.fitPosition.maxWidth) + "px";
            c.maxHeight = String(m.fitPosition.maxHeight) + "px";
            this._sizeContent();
            m = Vd(n, e, u, a, d);
            c.left = String(m.offset.left) + "px";
            c.top = String(m.offset.top) + "px";
            c.maxWidth = String(m.fitPosition.maxWidth) + "px";
            c.maxHeight = String(m.fitPosition.maxHeight) + "px";
            var p = true;
            if (m.fit === Ad.TOP) {
                n.classList.add("sasPositionTop");
            } else if (m.fit === Ad.LEFT) {
                n.classList.add("sasPositionLeft");
                p = false;
            } else if (m.fit === Ad.RIGHT) {
                n.classList.add("sasPositionRight");
                p = false;
            } else {
                n.classList.add("sasPositionBottom");
            }
            if (this._showArrow) {
                i.style.display = "";
            }
            var f = void 0, g = void 0;
            if (p) {
                f = qd(i, n);
                g = s.getBoundingClientRect();
                var h = m.fitPosition.left - m.offset.left;
                h = h + f.width / 2;
                h = $d(f.padding.left + g.width / 2, f.width - g.width / 2 - f.padding.right, h);
                s.style.left = String(h) + "px";
            } else {
                f = qd(i, n);
                g = s.getBoundingClientRect();
                var b = m.fitPosition.top - m.offset.top;
                b = b + f.height / 2;
                b = $d(5 + g.height / 2, f.height - g.height / 2 - 5, b);
                s.style.top = String(b) + "px";
            }
            this._currentPosition = m.fit;
        } else {
            this._currentPosition = -1;
        }
        if (this._showArrow) {
            i.style.display = "";
        }
        this.setDisplay(l, false);
    };
    e.prototype._getPopoverContent = function() {
        return null;
    };
    e.prototype.renderPopover = function(e, t) {
        var o, n;
        if (this._contentId) {
            o = document.getElementById(this._contentId);
            if (!o) {
                this.removeCssStyleVariables();
                this._contentId = null;
            }
        }
        if (!this._contentId) {
            this._nextContentId();
            o = document.createElement("div");
            o.id = this._contentId;
            var a = o.classList;
            for (var r = 0, s = this._classNames.length; r < s; ++r) {
                a.add(this._classNames[r]);
            }
            var i = document.createElement("div");
            i.classList.add("sasPopoverArrow");
            var l = document.createElement("div");
            l.classList.add("sasArrowContainer");
            l.appendChild(i);
            o.appendChild(l);
            n = document.createElement("div");
            n.classList.add("sasPopoverContent");
            o.appendChild(n);
        }
        o = o;
        if (t) {
            o.style.zIndex = String(t);
        }
        n = n || o.querySelector(".sasPopoverContent");
        n.innerHTML = "";
        var c = this._getPopoverContent();
        if (c) {
            n.appendChild(c);
        }
        Yd(o, this._display);
        if (e) {
            e.appendChild(o);
        }
        this.setCssStyleVariables();
        return o;
    };
    e.prototype.setCssStyleVariables = function() {};
    e.prototype.removeCssStyleVariables = function() {};
    e.prototype.removePopover = function() {
        var e = this.getDomRef();
        if (!e) {
            return;
        }
        var t = e.parentNode;
        if (t) {
            t.removeChild(e);
        }
        this._contentId = null;
    };
    e.prototype.destroy = function() {
        this.removeCssStyleVariables();
        this.removePopover();
        this._currentTarget = null;
        this._currentConstraint = null;
    };
    return e;
}();

var Jd = [ Ad.TOP, Ad.LEFT, Ad.BOTTOM, Ad.RIGHT ];

var Qd = 60;

function eu(e, t) {
    for (var o = 0, n = t.length; o < n; ++o) {
        e = e.replace("{".concat(o, "}"), String(t[o]));
    }
    return e;
}

function tu(e, t, o) {
    if (o === null || o === undefined) {
        e === null || e === void 0 ? void 0 : e.style.removeProperty(t);
    } else {
        e === null || e === void 0 ? void 0 : e.style.setProperty(t, o);
    }
}

var ou = function(e) {
    I(t, e);
    function t() {
        var t = e.call(this) || this;
        t._tooltipData = undefined;
        t._naiveLength = Number.MAX_VALUE;
        t._tooltipValues = null;
        t._positions = Jd;
        t._classNames = t._classNames.concat("sasTooltip");
        t._tipColonString = Jn("sas_commons", "tooltip.colon.fmt.txt");
        t._tipNumberDisplayedString = Jn("sas_commons", "tooltip.numberDisplayed.fmt.txt");
        t.setNamespace("sas.ltjs.commons.ui.tooltip.Tooltip");
        return t;
    }
    t.prototype._resetContent = function(e, t) {
        var o = this.getDomRef(".sasTableContainer");
        if (!o) {
            return;
        }
        var n = this.getDomRef();
        var a = this.getDomRef(".sasTooltipContainer");
        t = t || document.documentElement;
        var r = this.getDomRefs("table");
        for (var s = 0, i = r.length; s < i; ++s) {
            r[s].style.display = "";
        }
        this.getDomRef(".sasTipFooter").style.display = "none";
        o.classList.remove("sasTooltipTableLong");
        o.classList.remove("sasTooltipTableExtraLong");
        o.style.tableLayout = "";
        o.style.width = "";
        var l = t.getBoundingClientRect();
        var c = o.querySelectorAll("td.sasTipLabel");
        var d = o.querySelectorAll("td.sasTipValue");
        var u = d.length && c.length;
        var m = 0;
        var p = 0;
        n.style.maxWidth = "".concat(l.width, "px");
        n.style.maxHeight = "".concat(l.height, "px");
        if (a.clientWidth + 1 < a.scrollWidth) {
            if (u) {
                for (var s = 0, i = c.length; s < i; ++s) {
                    var f = c[s].getBoundingClientRect();
                    m = Math.max(m, f.width);
                    if (d[s]) {
                        var g = d[s].getBoundingClientRect();
                        p = Math.max(p, g.width);
                    }
                }
            }
            o.classList.add("sasTooltipTableLong");
        }
        if (a.clientWidth + 1 < a.scrollWidth) {
            if (u) {
                var h = a.getBoundingClientRect().width / 2;
                if (m > h && p > h) {
                    c[0].style.width = "50%";
                    d[0].style.width = "50%";
                } else if (p > h) {
                    c[0].style.width = "".concat(m, "px");
                } else {
                    d[0].style.width = "".concat(p, "px");
                }
            } else {
                o.classList.remove("sasTooltipTableLong");
                o.classList.add("sasTooltipTableExtraLong");
            }
        }
    };
    t.prototype._sizeContent = function() {
        var e;
        var t = parseFloat(getComputedStyle(this.getDomRef(".sasTooltipContainer")).height) + 1;
        var o = 0;
        var n = this.getDomRefs("table");
        if (!n.length) {
            return;
        }
        var a = this.getDomRef(".sasTipFooter");
        var r = a.style.display === "";
        if (!r && this._tooltipData.length > n.length) {
            a.innerText = "placeholder";
            r = true;
            a.style.display = "";
        }
        if (r) {
            o += a.clientHeight;
        }
        var s = false;
        var i = 0;
        var l = 0;
        for (var c = 0, d = n.length; c < d; ++c) {
            var u = n[c];
            if (o <= t) {
                o += u.clientHeight;
            }
            if (c && (o > t || u.style.display === "none")) {
                if (!s) {
                    s = true;
                    if (a) {
                        a.innerText = eu(this._tipNumberDisplayedString, [ c, this._tooltipData.length ]);
                        a.style.display = "";
                    }
                    if (!r) {
                        this._sizeContent();
                        return;
                    }
                }
                u.style.display = "none";
            } else {
                e = u.querySelector("td.sasTipLabel");
                if (e) {
                    i = Math.max(i, e.clientWidth);
                }
                u.style.display = "";
                l = c;
            }
        }
        if (r && !s) {
            var m = this._tooltipData.length;
            a.innerText = eu(this._tipNumberDisplayedString, [ n.length, m ]);
            Wn("More tips could have been displayed. Total tips: ".concat(m));
        }
        for (var c = 0, d = l + 1; c < d; ++c) {
            e = n[c].querySelector("td.sasTipLabel");
            if (e) {
                e.style.width = String(i) + "px";
            }
        }
    };
    t.prototype._getPopoverContent = function() {
        var e;
        var t = this.getDomRef(".sasPopoverContent");
        if (t) {
            t.innerHTML = "";
        }
        if (!this._tooltipData) {
            return null;
        }
        var o = document.createElement("div");
        o.classList.add("sasTableContainer");
        for (var n = 0, a = Math.min(Qd, this._naiveLength, this._tooltipData.length); n < a; ++n) {
            var r = this._tooltipData[n];
            var s = document.createElement("table");
            s.classList.add("sasTipTable");
            o.appendChild(s);
            var i = document.createElement("tbody");
            s.appendChild(i);
            for (var l = 0, c = r.length; l < c; ++l) {
                var d = r[l];
                var u = document.createElement("tr");
                var m = document.createElement("td");
                u.appendChild(m);
                if (d.swatchSVG) {
                    m.innerHTML = d.swatchSVG;
                    (e = m.firstElementChild) === null || e === void 0 ? void 0 : e.classList.add("sasTipSwatch");
                }
                if (d.label) {
                    var p = document.createElement("td");
                    p.innerText = d.value ? eu(this._tipColonString, [ d.label ]) : d.label;
                    p.classList.add("sasTipLabel");
                    u.appendChild(p);
                }
                if (d.value) {
                    var f = document.createElement("td");
                    f.innerText = d.value;
                    f.classList.add("sasTipValue");
                    u.appendChild(f);
                }
                i.appendChild(u);
            }
        }
        var g = document.createElement("div");
        g.classList.add("sasTipFooter");
        g.style.display = "none";
        var h = document.createElement("div");
        h.classList.add("sasTooltipContainer");
        h.appendChild(o);
        h.appendChild(g);
        return h;
    };
    t.prototype.setTooltipValues = function(e, t) {
        this._tooltipData = e;
        this._naiveLength = t ? t : Number.MAX_VALUE;
        var o = this.getDomRef(".sasPopoverContent");
        if (o) {
            o.appendChild(this._getPopoverContent());
        }
    };
    t.prototype.getTooltipValues = function() {
        return this._tooltipValues;
    };
    t.prototype.setCssStyleVariables = function() {
        var e = this.getDomRef();
        var t = this.getStyleOverrides();
        if (t && e) {
            tu(e, "--custom-tip-bg-color", t["background-color"]);
            tu(e, "--custom-tip-text-color", t["color"]);
            tu(e, "--custom-tip-font-size", t["font-size"]);
            tu(e, "--custom-tip-font-family", t["font-family"]);
            tu(e, "--custom-tip-font-weight", t["font-weight"]);
        }
    };
    t.prototype.removeCssStyleVariables = function() {
        var e = this.getDomRef();
        if (e) {
            e.style.removeProperty("--custom-tip-bg-color");
            e.style.removeProperty("--custom-tip-text-color");
            e.style.removeProperty("--custom-tip-font-size");
            e.style.removeProperty("--custom-tip-font-family");
            e.style.removeProperty("--custom-tip-font-weight");
        }
    };
    return t;
}(Zd);

function nu(e) {
    var t = xn("gtl::LabelValuePickResultDetails");
    return e instanceof t;
}

var au = null;

fn((function() {
    var e = rn.getModuleByName("gtl::LabelValuePickResultDetails");
    if (e) {
        au = function(e) {
            var t = e.getDetails();
            if (t && nu(t) && t.getIsTruncated()) {
                return [ {
                    label: t.getLabel(),
                    value: t.getFormattedValue()
                } ];
            }
            return null;
        };
    }
}));

var ru = 30;

var su = 12;

var iu = 50;

var lu = 15;

var cu = 5;

var du = function() {
    return ru;
};

if (sas.ltjs.isOpenUI) {
    sap.ui.require("sap.ui.core.Popup");
    du = function() {
        var e = sap.ui.core.Popup;
        if (ru !== e.getLastZIndex()) {
            ru = e.getNextZIndex();
        }
        return ru;
    };
}

function uu(e, t, o, n, a) {
    var r = e.length - 1;
    var s = vd();
    for (var i = 0, l = t.length; i < l; ++i) {
        if (i > r) {
            var c = new ou;
            c.setDisplay(Rd.NONE, false);
            e.push(c);
        }
        var d = t[i];
        var u = e[i];
        u.setStyleOverrides(d.overrideStyles);
        u.setTooltipValues(d.values, d.naiveLength);
        u.renderPopover(s, du(ru));
        if (n) {
            var m = document.getElementById(a);
            var p = void 0;
            if (m) {
                p = m.getBoundingClientRect();
                u.positionPopover({
                    left: p.left + n.x,
                    top: p.top + n.y,
                    width: 0,
                    height: 0
                }, null, o);
            }
        } else {
            u.positionPopover(d.preferredGlobalCoordinates, null, o);
        }
        u.setDisplay(Rd.VISIBLE);
    }
}

function mu(e, t, o) {
    if (e.length !== t.length) {
        return false;
    }
    if (o !== false) {
        if (e.location[0] !== t.location[0] || e.location[1] !== t.location[1]) {
            return false;
        }
    }
    for (var n = 0, a = e.length; n < a; ++n) {
        var r = e[n];
        var s = t[n];
        if (r.label !== s.label || r.value !== s.value) {
            return false;
        }
    }
    return true;
}

function pu(e, t) {
    if (!e && !t) {
        return false;
    }
    if (!e || !t) {
        return true;
    }
    if (e.length !== t.length) {
        return true;
    }
    for (var o = 0, n = e.length; o < n; ++o) {
        var a = e[o];
        var r = t[o];
        if (a.containerId !== r.containerId) {
            return true;
        }
        if (a.values.length !== r.values.length) {
            return true;
        }
        for (var s = 0, i = a.values.length; s < i; ++s) {
            if (!mu(a.values[s], r.values[s], false)) {
                return true;
            }
        }
    }
    return false;
}

function fu(e, t) {
    for (var o = 0, n = e.length; o < n; ++o) {
        var a = e[o];
        for (var r = 0, s = t.length; r < s; ++r) {
            var i = t[r];
            if (mu(a, i)) {
                return true;
            }
        }
    }
    return false;
}

function gu(e) {
    var t = e.getEntries();
    if (!t || t.length <= 0) {
        return null;
    }
    var o = [];
    var n = {};
    for (var a = 0, r = t; a < r.length; a++) {
        var s = r[a];
        if (!s || !s.getUseAsTooltip()) {
            continue;
        }
        var i = s.getLabel();
        var l = s.getFormattedValue();
        var c = void 0;
        if (s instanceof Hc || s instanceof Vc) {
            if (l) {
                c = i ? i + ":" + l : l;
            } else if (i) {
                c = i;
            }
        } else if ((i || i === "") && (l || l === "")) {
            c = i + ":" + l;
        }
        if (c) {
            if (!n[c]) {
                n[c] = true;
                o.push({
                    label: i,
                    value: l,
                    swatchSVG: s.getLegendSVG()
                });
            }
        }
    }
    if (o.length === 0) {
        return null;
    }
    return o;
}

function hu(e, t) {
    var o = [];
    var n = undefined;
    if (!Array.isArray(e)) {
        e = [ e ];
    }
    var a = document.getElementById(t);
    var r;
    if (a) {
        r = a.getBoundingClientRect();
    }
    var s = 0, i = 0;
    for (var l = 0, c = e.length; l < c; ++l) {
        r = r;
        var d = e[l];
        var u = d.getTarget();
        var m = d.getValues().concat();
        m.location = [ u.x, u.y ];
        m.targetLocation = [ u.x, u.y ];
        o.push(m);
        if (i > r.height) {
            s++;
            i += m.length * su;
        }
        if (!n) {
            var p = u.y;
            if (d._targetFlipped) {
                p = r.height - u.y;
            }
            n = {
                left: u.x + r.left,
                top: p + r.top,
                width: u.width,
                height: u.height
            };
        }
    }
    return {
        containerId: t,
        preferredGlobalCoordinates: n,
        values: o,
        naiveLength: s
    };
}

function bu(e, t) {
    var o = [];
    var n = undefined;
    var a = 0;
    var r = 0;
    if (e && e.length) {
        var s = document.getElementById(t);
        var i = void 0;
        if (s) {
            i = s.getBoundingClientRect();
        }
        for (var l = 0, c = e; l < c.length; l++) {
            var d = c[l];
            if (!d) {
                continue;
            }
            var u = null;
            if (au) {
                u = au(d);
            }
            if (!u) {
                u = gu(d);
            }
            if (u) {
                i = i;
                o.push(u);
                if (r < i.height) {
                    a++;
                    r += u.length * su;
                }
                var m = d.getPreferredTargetLocation();
                u.location = [ m[0] + i.left, i.height - m[1] + i.top ];
                u.targetLocation = [ u.location[0], u.location[1] ];
                if (n === undefined) {
                    n = {
                        left: u.location[0],
                        top: u.location[1],
                        width: 0,
                        height: 0
                    };
                }
            }
        }
    }
    return {
        containerId: t,
        preferredGlobalCoordinates: n,
        values: o,
        naiveLength: a
    };
}

function vu(e) {
    for (var t = 0, o = e.length; t < o; ++t) {
        if (e[t].getDisplay() !== Rd.VISIBLE) {
            return false;
        }
    }
    return true;
}

function yu(e, t, o) {
    for (var n = 1; n < t.length; ++n) {
        var a = e[t[n]].values[0].location;
        var r = e[t[n - 1]].values[0].location;
        var s = n;
        while (a[1] === r[1]) {
            if (o && (s === 1 || r[0] > a[0]) || !o && (s === 1 || r[0] < a[0])) {
                break;
            }
            --s;
            r = e[t[s - 1]].values[0].location;
        }
        if (s !== n) {
            var i = t[n];
            t[n] = t[s];
            t[s] = i;
        }
    }
}

function xu() {
    var e = vd();
    var t = e.querySelector(".sasGraphTooltipCalloutLinesAndMarkers");
    if (!t) {
        t = document.createElement("div");
        t.style.overflow = "visible";
        t.style.zIndex = String(du(ru));
        t.style.pointerEvents = "none";
        t.style.position = "fixed";
        t.classList.add("sasGraphTooltipCalloutLinesAndMarkers");
        e.appendChild(t);
        var o = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        o.style.pointerEvents = "none";
        o.style.position = "fixed";
        o.style.left = "0px";
        o.style.top = "0px";
        o.style.width = "100%";
        o.style.height = "100%";
        t.appendChild(o);
    } else {
        var o = t.firstChild;
        if (o) {
            while (o.firstChild) {
                o.removeChild(o.firstChild);
            }
        }
    }
    return t;
}

function Su(e, t, o, n, a) {
    var r = n ? -iu : iu;
    var s = n ? lu : -lu;
    var i = 2.5;
    var l = e.children[0];
    var c = o[0] + r - (o[0] - a);
    var d = c.toString();
    var u = (c + s).toString();
    var m = o[0].toString();
    var p = t[1].toString();
    var f = o[1].toString();
    var g = "M " + d + "," + p + " L " + u + "," + p + " L " + m + "," + f;
    var h = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    h.setAttribute("class", "sasTimePickMarkerBackground");
    h.setAttribute("cx", o[0].toString());
    h.setAttribute("cy", o[1].toString());
    h.setAttribute("r", i + 1 + "px");
    l.append(h);
    var b = document.createElementNS("http://www.w3.org/2000/svg", "path");
    b.setAttribute("class", "sasTipCalloutBackground");
    b.setAttribute("d", g);
    b.setAttribute("fill", "transparent");
    l.append(b);
    var v = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    v.setAttribute("class", "sasTimePickMarker");
    v.setAttribute("cx", o[0].toString());
    v.setAttribute("cy", o[1].toString());
    v.setAttribute("r", i + "px");
    l.append(v);
    var y = document.createElementNS("http://www.w3.org/2000/svg", "path");
    y.setAttribute("class", "sasTipCallout");
    y.setAttribute("d", g);
    y.setAttribute("fill", "transparent");
    l.append(y);
}

function wu(e) {
    if (e.length === 2) {
        return e[1].values[0].location[0];
    }
    var t = [];
    for (var o = 1; o < e.length; o++) {
        var n = e[o];
        t[o - 1] = n.values[0].location[0];
    }
    t.sort((function(e, t) {
        return e - t;
    }));
    var a = Math.floor(t.length / 2);
    return t.length % 2 !== 0 ? t[a] : (t[a - 1] + t[a]) / 2;
}

function Cu(e, t, o, n, a, r) {
    var s = e[o];
    var i = t[o];
    var l = s.values[0].location[1] + i.getDomRef().clientHeight / 2 + cu;
    var c = e[n];
    var d = t[n];
    var u = l - c.values[0].location[1];
    if (!r) u += d.getDomRef().clientHeight / 2;
    if (u > 0) {
        if (a) {
            c.values[0].location[1] += u;
        } else {
            s.values[0].location[1] -= u;
        }
        return true;
    }
    return false;
}

function Eu(e, t, o) {
    if (o.length >= 2) {
        var n = Math.floor(o.length / 2);
        for (var a = 0; a < e.length; a += 1) {
            var r = n - a;
            if (r > 0) {
                Cu(e, t, o[r - 1], o[r], false, false);
            }
            var s = n + a;
            if (s < o.length - 1) {
                Cu(e, t, o[s], o[s + 1], true, false);
            }
        }
    }
    if (o.length > 0) {
        var i = Cu(e, t, o[o.length - 1], 0, false, true);
        if (i) {
            for (var l = o.length - 2; l >= 0; --l) {
                Cu(e, t, o[l], o[l + 1], false, false);
            }
        }
    }
}

var Iu = {};

var _u = null;

function Du(e) {
    if (Array.isArray(e)) {
        for (var t = 0, o = e; t < o.length; t++) {
            var n = o[t];
            if (n instanceof Nc) {
                return true;
            }
        }
    }
    return false;
}

var Lu = function() {
    function e(e) {
        this._tooltipPool = [];
        this._currentTipData = [];
        this._timeoutId = null;
        if (e !== Iu) {
            throw new Error("Call TooltipManager.instance(),  not new TooltipManager()!!");
        }
    }
    e.prototype.setTooltips = function(e, t, o, n) {
        var a = this;
        var r = [];
        if (e) {
            var s = void 0;
            if (Du(e)) {
                s = bu(e, t);
            } else {
                s = hu(e, t);
            }
            if (s && s.values.length) {
                s.overrideStyles = o;
                r.push(s);
            }
        }
        var i = pu(r, this._currentTipData);
        if (r.length === 1 && this._currentTipData.length === 1 && fu(r[0].values, this._currentTipData[0].values)) {
            if (this._timeoutId) {
                clearTimeout(this._timeoutId);
                this._timeoutId = window.setTimeout((function() {
                    if (a._currentTipData[0].values.length === 1) {
                        n = null;
                    }
                    uu(a._tooltipPool, a._currentTipData, false, n, t);
                    a._timeoutId = null;
                }), 200);
            } else {
                if (r[0].values.length === 1) {
                    n = null;
                }
                uu(this._tooltipPool, r, true, n, t);
            }
        } else if (i || !vu(this._tooltipPool)) {
            if (this._timeoutId !== null) {
                clearTimeout(this._timeoutId);
                this._timeoutId = null;
            }
            this.hideTooltips();
            if (r.length) {
                this._timeoutId = window.setTimeout((function() {
                    uu(a._tooltipPool, a._currentTipData);
                    a._timeoutId = null;
                }), 200);
            }
        }
        if (i) {
            this._currentTipData = r;
        }
    };
    e.prototype.setTimeTooltips = function(e, t, o) {
        var n = this;
        var a = [];
        if (e) {
            var r = bu(e, t);
            if (r && r.values.length) {
                r.overrideStyles = o;
                for (var s = 0, i = r.values; s < i.length; s++) {
                    var l = i[s];
                    a.push(_(_({}, r), {
                        values: [ l ]
                    }));
                }
            }
        }
        var c = pu(a, this._currentTipData);
        if (c) {
            if (this._timeoutId !== null) {
                clearTimeout(this._timeoutId);
                this._timeoutId = null;
            }
            this.hideTooltips();
            this._timeoutId = window.setTimeout((function() {
                if (!n._currentTipData) {
                    return;
                }
                var e = n._currentTipData[0];
                n._currentTipData.sort((function(t, o) {
                    if (t === e) {
                        return -1;
                    }
                    if (o === e) {
                        return 1;
                    }
                    var n = t.values[0].location;
                    var a = o.values[0].location;
                    return n[1] - a[1];
                }));
                var t = wu(n._currentTipData);
                var o = [];
                var a = [];
                var r = vd();
                var s = n._tooltipPool.length - 1;
                var i = true;
                for (var l = 0, c = n._currentTipData.length; l < c; ++l) {
                    if (l > s) {
                        var d = new ou;
                        if (l > 0) {
                            d.setShowArrow(false);
                        }
                        n._tooltipPool.push(d);
                    }
                    var u = n._tooltipPool[l];
                    var m = n._currentTipData[l];
                    u.setStyleOverrides(m.overrideStyles);
                    u.setTooltipValues(m.values, 1);
                    u.setDisplay(Rd.VISIBLE);
                    u.renderPopover(r, du(ru));
                    if (l > 0) {
                        var p = n._currentTipData[l].values[0].location;
                        var f = n._tooltipPool[l];
                        var g = f.getDomRef();
                        if (g) {
                            var h = p[0] + g.clientWidth + iu > window.innerWidth;
                            var b = p[0] - g.clientWidth - iu < 0;
                            if (b) {
                                a.push(l);
                            } else if (h) {
                                o.push(l);
                            } else if (p[0] < t) {
                                o.push(l);
                            } else if (p[0] > t) {
                                a.push(l);
                            } else if (i) {
                                o.push(l);
                                i = false;
                            } else {
                                a.push(l);
                                i = true;
                            }
                        }
                    }
                }
                yu(n._currentTipData, o, true);
                yu(n._currentTipData, a, false);
                Eu(n._currentTipData, n._tooltipPool, o);
                Eu(n._currentTipData, n._tooltipPool, a);
                var v = xu();
                for (var l = 0; l < n._currentTipData.length; ++l) {
                    var m = n._currentTipData[l];
                    var u = n._tooltipPool[l];
                    var y = m.values[0].location;
                    var x = m.values[0].targetLocation;
                    var S = o.indexOf(l) !== -1;
                    var w = S ? -iu : iu;
                    var g = u.getDomRef();
                    if (g) {
                        if (y[1] <= g.clientHeight / 2) {
                            u.setDisplay(Rd.NONE);
                        } else {
                            if (l === 0) {
                                u.setPositions([ Ad.BOTTOM ]);
                                u.positionPopover({
                                    left: y[0],
                                    top: y[1],
                                    width: 0,
                                    height: 0
                                }, null, false);
                            } else {
                                u.setPositions(S ? [ Ad.LEFT ] : [ Ad.RIGHT ]);
                                u.positionPopover({
                                    left: t + w,
                                    top: y[1],
                                    width: 0,
                                    height: 0
                                }, null, false);
                                Su(v, y, x, S, t);
                            }
                        }
                    }
                }
                n._timeoutId = null;
            }), 200);
        }
        this._currentTipData = a;
    };
    e.prototype.hideTooltips = function(e, t) {
        if (t === undefined) {
            t = true;
        }
        if (!this._currentTipData || this._currentTipData.length === 0) {
            return;
        }
        if (this._timeoutId !== null) {
            if (e) {
                for (var o = this._currentTipData.length - 1; o >= 0; --o) {
                    if (this._currentTipData[o].containerId === e) {
                        this._currentTipData.splice(o, 1);
                    }
                }
                if (!this._currentTipData.length) {
                    clearTimeout(this._timeoutId);
                    this._timeoutId = null;
                }
            } else {
                this._currentTipData = null;
                clearTimeout(this._timeoutId);
                this._timeoutId = null;
            }
        } else {
            for (var o = this._tooltipPool.length - 1; o >= 0; --o) {
                if (e && this._currentTipData.length > o) {
                    if (this._currentTipData[o].containerId === e) {
                        this._tooltipPool[o].setDisplay(Rd.NONE, t);
                        this._currentTipData.splice(o, 1);
                    }
                } else {
                    this._tooltipPool[o].setDisplay(Rd.NONE, t);
                }
            }
        }
        if (!e) {
            this._currentTipData = [];
        }
        var n = document.querySelector(".sasGraphTooltipCalloutLinesAndMarkers");
        if (n && n.firstChild) {
            var a = n.firstChild;
            while (a.firstChild) {
                a.removeChild(a.firstChild);
            }
        }
    };
    e.instance = function() {
        if (!_u) {
            _u = new e(Iu);
        }
        return _u;
    };
    e.setZIndexFuction = function(e) {
        if (sas.ltjs.isOpenUI) {
            throw new Error("setZIndexFuction should not be used for openUI applications");
        }
        du = e;
    };
    e.setZIndex = function(e) {
        if (sas.ltjs.isOpenUI) {
            throw new Error("setZIndex should not be used for openUI applications");
        }
        ru = e;
    };
    return e;
}();

var Tu = false;

var Ru = false;

var ku = null;

function Au(e) {
    return !!e.pixelRatio;
}

var Mu = function(e) {
    ku = e;
    if (e.button === 0) {
        Tu = true;
    } else if (e.button === 2) {
        Ru = true;
    }
};

var Nu = function(e) {
    if (e.button === 0) {
        Tu = false;
    } else if (e.button === 2) {
        Ru = false;
    }
};

var Ou = function(e) {
    if (e.buttons !== undefined) {
        if ((e.buttons & 1) !== 1) {
            Tu = false;
        } else if ((e.buttons & 2) !== 2) {
            Ru = false;
        }
    }
};

if (!sas.ltjs.node) {
    if (window.document.body) {
        window.document.body.addEventListener("mousedown", Mu);
        window.document.body.addEventListener("mouseup", Nu);
        window.document.addEventListener("mouseup", Nu);
        window.document.body.addEventListener("mousemove", Ou);
    } else {
        var Pu = function() {
            window.removeEventListener("load", Pu);
            window.document.body.addEventListener("mousedown", Mu);
            window.document.body.addEventListener("mouseup", Nu);
            window.document.addEventListener("mouseup", Nu);
            window.document.body.addEventListener("mousemove", Ou);
        };
        window.addEventListener("load", Pu);
    }
}

var Bu = function() {
    function e(e, t, o, n) {
        this._baseView = null;
        this._leftButtonDown = false;
        this._rightButtonDown = false;
        this._windowListeners = [];
        this._elementListeners = [];
        this._lastMouseMovePosition = null;
        this._lastWindowMouseMovePosition = null;
        this._isDestroyed = false;
        this.overrides = o || {};
        if (e) {
            this._baseView = e.retain();
        }
        this._element = t;
        this._inputController = (new Qc).retain();
        this._inputController.setView(e);
        this._addInputListeners();
        this._isMac = navigator.appVersion.indexOf("Mac") !== -1;
        this._displayZoomOverlay = n;
    }
    e.prototype._addInputListeners = function() {
        if (!this._windowListeners) {
            throw new Error;
        }
        this._windowListeners[0] = this._onWindowMouseUp.bind(this);
        this._windowListeners[1] = this._onWindowMouseMove.bind(this);
        if (!this._elementListeners) {
            throw new Error;
        }
        this._elementListeners[0] = this._onMouseDown.bind(this);
        this._elementListeners[1] = this._onMouseWheel.bind(this);
        this._elementListeners[2] = this._onDoubleClick.bind(this);
        this._elementListeners[3] = this._onMouseEnter.bind(this);
        this._elementListeners[4] = this._onMouseLeave.bind(this);
        this._elementListeners[5] = this._onMouseMove.bind(this);
        this._elementListeners[6] = this._onFocus.bind(this);
        this._elementListeners[7] = this._onBlur.bind(this);
        this._elementListeners[8] = this._onMouseUp.bind(this);
        if (!this._element) {
            throw new Error;
        }
        this._element.addEventListener("mousedown", this._elementListeners[0]);
        this._element.addEventListener("wheel", this._elementListeners[1]);
        this._element.addEventListener("dblclick", this._elementListeners[2]);
        this._element.addEventListener("mouseenter", this._elementListeners[3]);
        this._element.addEventListener("mouseleave", this._elementListeners[4]);
        this._element.addEventListener("mousemove", this._elementListeners[5]);
        this._element.addEventListener("focus", this._elementListeners[6]);
        this._element.addEventListener("blur", this._elementListeners[7]);
        this._element.addEventListener("mouseup", this._elementListeners[8]);
    };
    e.prototype._callOverrides = function(e, t) {
        if (e) {
            for (var o = e.length - 1; o >= 0; o--) {
                var n = e[o];
                if (n && n(t)) {
                    return true;
                }
            }
        }
        return false;
    };
    e.prototype._onMouseDown = function(t) {
        if (this._isDestroyed) {
            return;
        }
        _d(t);
        var o = e.getMousePosition(t, this._element);
        if (t.button === 0) {
            this._leftButtonDown = true;
        } else if (t.button === 2) {
            this._rightButtonDown = true;
        }
        this._inputController.handleMouseDown(o.x, o.y, this._element.offsetWidth, this._element.offsetHeight, this._leftButtonDown, this._rightButtonDown);
    };
    e.prototype._onMouseUp = function() {
        this.addWindowListeners();
    };
    e.prototype._onWindowMouseUp = function(t) {
        if (this._isDestroyed) {
            return;
        }
        _d(t);
        var o = e.getMousePosition(t, this._element, true);
        if (t.button === 0 && this._leftButtonDown) {
            this._leftButtonDown = false;
        } else if (t.button === 2 && this._rightButtonDown) {
            this._rightButtonDown = false;
        } else {
            return;
        }
        if (!ku) {
            return;
        }
        if (!o.isMine) {
            this.removeWindowListeners();
        }
        if (this._element.classList.contains("ui-draggable") && jQuery) {
            jQuery("#" + this._element.id).focus();
        }
        var n = e.getMousePosition(ku, this._element, true);
        var a = t.button === 0;
        var r = Math.abs(Number(o.x) - Number(n.x));
        var s = Math.abs(Number(o.y) - Number(n.y));
        if (!a || r > 3 || s > 3 || this.overrides && !this._callOverrides(this.overrides.mouseUp, {
            localX: o.localX,
            x: o.x,
            localY: o.localY,
            y: o.y,
            ctrlKey: this._isMac ? t.metaKey : t.ctrlKey,
            sourceEvent: t
        })) {
            this._inputController.handleMouseUp(o.x, o.y, this._element.offsetWidth, this._element.offsetHeight, a, t.button === 2);
        }
        if (a && document.releaseCapture) {
            document.releaseCapture();
        }
    };
    e.prototype._onWindowMouseMove = function(t) {
        if (this._isDestroyed) {
            return;
        }
        _d(t);
        var o = e.getMousePosition(t, this._element, true);
        var n = this._lastWindowMouseMovePosition;
        if (n && n.x === o.x && n.y === o.y) {
            return;
        }
        this._lastWindowMouseMovePosition = o;
        if (t.preventDefault) {
            if (Tu && this._leftButtonDown || Ru && this._rightButtonDown) {
                t.preventDefault();
            }
        }
        if (this._leftButtonDown || o.isMine) {
            this._inputController.handleMouseMove(o.x, o.y, this._element.offsetWidth, this._element.offsetHeight, this._leftButtonDown, this._rightButtonDown);
        }
    };
    e.prototype._onMouseMove = function(t) {
        if (this._isDestroyed) {
            return;
        }
        var o = e.getMousePosition(t, this._element, true);
        var n = this._lastMouseMovePosition;
        if (n && n.x === o.x && n.y === o.y) {
            return;
        }
        if (this._leftButtonDown) {
            this._hideTooltips();
        }
        this._lastMouseMovePosition = o;
        var a = Tu && !this._leftButtonDown || Ru && !this._rightButtonDown;
        if (a) {
            return;
        }
        _d(t);
        o = e.getMousePosition(t, this._element);
        if (!this._leftButtonDown && !this._rightButtonDown && this.overrides) {
            this._callOverrides(this.overrides.hover, {
                localX: o.localX,
                x: o.x,
                localY: o.localY,
                y: o.y,
                sourceEvent: t
            });
        }
        if (this._leftButtonDown && this._element.setCapture) {
            this._element.setCapture();
        }
    };
    e.prototype._onMouseWheel = function(t) {
        var o;
        if (this._isDestroyed) {
            return;
        }
        if (!pc.isPressed(mc.PVK_CONTROL) && ((o = this._displayZoomOverlay) === null || o === void 0 ? void 0 : o.call(this))) {
            return;
        }
        this._hideTooltips();
        _d(t);
        var n = e.getMousePosition(t, this._element);
        var a;
        if (t.wheelDelta !== undefined && t.wheelDelta !== null) {
            a = t.wheelDelta;
        } else {
            a = -t.deltaY;
        }
        var r = a < 0 ? -120 : 120;
        var s = this._inputController.handleMouseWheel(n.x, n.y, r, this._element.offsetWidth, this._element.offsetHeight);
        if (this.overrides) {
            this._callOverrides(this.overrides.mouseWheel, {
                localX: n.localX,
                x: n.x,
                localY: n.localY,
                y: n.y,
                delta: a,
                sourceEvent: t
            });
        }
        if (s && t.preventDefault) {
            t.preventDefault();
        }
    };
    e.prototype._onDoubleClick = function(t) {
        if (this._isDestroyed) {
            return;
        }
        this._hideTooltips();
        _d(t);
        var o = e.getMousePosition(t, this._element);
        var n = {
            localX: o.localX,
            x: o.x,
            localY: o.localY,
            y: o.y,
            sourceEvent: t
        };
        if (this.overrides && !this._callOverrides(this.overrides.doubleClick, n)) {
            this._inputController.handleMouseDoubleClick(o.x, o.y, t.button === 0);
            this._callOverrides(this.overrides.afterDoubleClick, n);
        }
    };
    e.prototype._onMouseEnter = function(e) {
        if (this._isDestroyed) {
            return;
        }
        _d(e);
        this._inputController.handleMouseEnter();
        if (this.overrides) {
            this._callOverrides(this.overrides.mouseEnter, {
                sourceEvent: e
            });
        }
        this.addWindowListeners();
    };
    e.prototype._onMouseLeave = function(e) {
        if (this._isDestroyed) {
            return;
        }
        this._inputController.handleMouseLeave();
        if (this.overrides) {
            this._callOverrides(this.overrides.mouseLeave, {
                sourceEvent: e
            });
        }
        nc.resignMouseFocus();
        if (!this._leftButtonDown && !this._rightButtonDown) {
            this.removeWindowListeners();
        }
    };
    e.prototype._onFocus = function() {
        this._inputController.handleFocus();
    };
    e.prototype._onBlur = function() {
        this._inputController.handleBlur();
    };
    e.prototype._hideTooltips = function() {
        if (!this._element) {
            return;
        }
        Lu.instance().hideTooltips(this._element.id);
    };
    e.prototype.destroy = function() {
        this._isDestroyed = true;
        if (this._baseView) {
            this._baseView.release();
            this._baseView = null;
        }
        if (this._inputController) {
            this._inputController.release();
            this._inputController = null;
        }
        this.removeWindowListeners();
        if (this._elementListeners && this._element) {
            this._element.removeEventListener("mousedown", this._elementListeners[0]);
            this._element.removeEventListener("wheel", this._elementListeners[1]);
            this._element.removeEventListener("dblclick", this._elementListeners[2]);
            this._element.removeEventListener("mouseenter", this._elementListeners[3]);
            this._element.removeEventListener("mouseleave", this._elementListeners[4]);
            this._element.removeEventListener("mousemove", this._elementListeners[5]);
            this._element.removeEventListener("focus", this._elementListeners[6]);
            this._element.removeEventListener("blur", this._elementListeners[7]);
            this._element.removeEventListener("mouseup", this._elementListeners[8]);
        }
        this._element = null;
        this._windowListeners = null;
        this._elementListeners = null;
        this.overrides = null;
    };
    e.prototype.removeWindowListeners = function() {
        if (this._windowListeners) {
            window.document.body.removeEventListener("mouseup", this._windowListeners[0]);
            window.document.removeEventListener("mouseup", this._windowListeners[0]);
            window.document.body.removeEventListener("mousemove", this._windowListeners[1]);
        }
    };
    e.prototype.addWindowListeners = function() {
        if (!this._windowListeners) {
            throw new Error;
        }
        window.document.body.addEventListener("mouseup", this._windowListeners[0]);
        window.document.addEventListener("mouseup", this._windowListeners[0]);
        window.document.body.addEventListener("mousemove", this._windowListeners[1]);
    };
    e.getPositionFromPoint = function(e, t) {
        var o = 0, n = false;
        var a = e.x, r = e.x, s = e.y;
        if (Au(t)) {
            o = t.clientHeight / t.pixelRatio - e.y;
        } else {
            o = t.clientHeight - e.y;
        }
        if (a >= 0 && a < t.offsetWidth && o >= 0 && o < t.offsetHeight) {
            n = true;
        }
        return {
            x: a,
            y: o,
            localX: r,
            localY: s,
            isMine: n
        };
    };
    e.getMousePosition = function(t, o, n) {
        var a = 0, r = 0;
        if (!t || !o) {
            return {};
        }
        if (n && o.parentElement) {
            var s = o.getBoundingClientRect();
            a = t.clientX - s.left;
            r = t.clientY - s.top;
        } else {
            a = t.offsetX;
            r = t.offsetY;
        }
        return e.getPositionFromPoint({
            x: a,
            y: r
        }, o);
    };
    e.removeStaticEventListeners = function() {
        window.removeEventListener("unload", e.removeStaticEventListeners);
        window.document.body.removeEventListener("mousedown", Mu);
        window.document.body.removeEventListener("mouseup", Nu);
        window.document.removeEventListener("mouseup", Nu);
        window.document.body.removeEventListener("mousemove", Ou);
    };
    return e;
}();

if (!sas.ltjs.node) {
    window.addEventListener("unload", Bu.removeStaticEventListeners);
}

var zu = [ "", "", "crosshair", "pointer", "help", "text", "none", 'url(\'data:image/svg+xml;utf8,<svg version="1.1" id="pencilCursor" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="14px" height="14px" viewBox="0 0 14 14" enable-background="new 0 0 14 14" xml:space="preserve"><path id="cursorOutline" fill="rgb(256,256,256)" d="M13.423,4.749l-7.51,7.517C5.913,12.266,1.399,14,1,14c-0.361,0-0.517-0.103-0.708-0.293 c-0.268-0.269-0.36-0.665-0.24-1.024l1.689-4.587l7.512-7.518C9.625,0.205,10.121,0,10.649,0s1.024,0.205,1.396,0.577l1.378,1.379 C14.193,2.727,14.192,3.979,13.423,4.749z"/><path id="cursorColor" d="M4.708,11.769L1,13l1.238-3.701L4.708,11.769z M11.43,5.329l1.286-1.287c0.379-0.379,0.379-1,0-1.379 l-1.378-1.379c-0.379-0.379-0.999-0.379-1.378,0L8.673,2.573L11.43,5.329z M7.613,3.634L3.155,8.095l2.757,2.757L10.37,6.39 L7.613,3.634z"/></svg>\') 0 14, pointer', "all-scroll", "e-resize", "n-resize", "ne-resize", "ns-resize", "nw-resize", "s-resize", "se-resize", "sw-resize", "w-resize", "ew-resize", "move", "nesw-resize", "ns-resize", "nwse-resize", "ew-resize", "n-resize", "wait" ];

fn((function() {
    var e = tc.getSharedInstance();
    e.attachEvent(ec.CURSOR_CHANGE, (function(e) {
        if (e instanceof ec) {
            var t = e.getCursorShape();
            document.body.style.cursor = zu[t];
        }
    }));
}));

var Fu;

(function(e) {
    e["CLICK"] = "click";
    e["DOUBLE_CLICK"] = "dblclick";
    e["MOUSE_DOWN"] = "mousedown";
    e["MOUSE_MOVE"] = "mousemove";
    e["MOUSE_OUT"] = "mouseout";
    e["MOUSE_OVER"] = "mouseover";
    e["MOUSE_UP"] = "mouseup";
    e["RELEASE_OUTSIDE"] = "releaseoutside";
    e["MOUSE_DRAG_START"] = "mousedragstart";
    e["MOUSE_DRAG"] = "mousedrag";
    e["MOUSE_DRAG_STOP"] = "mousedragstop";
    e["MOUSE_WHEEL"] = "mousewheel";
    e["ROLL_OUT"] = "rollout";
    e["ROLL_OVER"] = "rollover";
    e["CONTEXT_MENU"] = "contextMenu";
})(Fu || (Fu = {}));

(function(e) {
    e.event = "mouse";
    e.type = null;
    e.x = 0;
    e.y = 0;
    e.deltaX = 0;
    e.deltaY = 0;
    e.dragDeltaX = 0;
    e.dragDeltaY = 0;
    e.relatedObject = null;
    e.buttonDown = false;
})(Fu || (Fu = {}));

function ju(e, t) {
    var o;
    if (t) {
        o = "hasStyleAttributeValue";
    } else if (e instanceof Hs) {
        o = "hasOverrideForStyleAttribute";
    } else {
        o = "hasStyleAttributeValueAboveBase";
    }
    return e[o].bind(e);
}

function Vu(e, t, o, n) {
    if (e) {
        var a = ju(e, n);
        var r = 1;
        if (t === _c.FILL_COLOR && a(_c.FILL_TRANSPARENCY)) {
            r = 1 - e.getStyleAttributeFloatValue(_c.FILL_TRANSPARENCY, 1);
        } else if (a(_c.TRANSPARENCY)) {
            r = 1 - e.getStyleAttributeFloatValue(_c.TRANSPARENCY, 1);
        }
        if (a(t)) {
            var s = e.getStyleAttributeUnsignedValue(t, 0);
            return Gu(s, r);
        } else if (o !== undefined) {
            return Gu(o, r);
        }
    }
    return "";
}

function Hu(e, t, o) {
    var n = e.getStyleAttributeUnsignedValue(t, 0);
    return Gu(n, o);
}

function Uu(e, t, o, n) {
    return Vu(e, t, o, n);
}

function Gu(e, t) {
    var o = e >> 16 & 255;
    var n = e >> 8 & 255;
    var a = e & 255;
    return "rgba(" + [ o, n, a, t ].join() + ")";
}

function Ku(e) {
    return Vu(e, _c.BACKGROUND_COLOR);
}

function Wu(e, t, o) {
    var n = ju(e, o);
    if (n(_c.BORDER_COLOR)) {
        t = t || {};
        t["border-color"] = Hu(e, _c.BORDER_COLOR, 1);
    }
    if (n(_c.BORDER_WIDTH)) {
        var a = e.getStyleAttributeDimensionValue(_c.BORDER_WIDTH, new Vs(1, js.PIXELS));
        t = t || {};
        t["border-width"] = a ? String(a.getScalarValueForUnit(js.PIXELS, undefined, undefined)) + "px" : "0px";
        if (t["border-width"]) {
            t["border-style"] = "solid";
        }
    }
    return t;
}

function $u(e, t) {
    if (!e) {
        return null;
    }
    var o;
    var n = ju(e, t);
    if (n(_c.BACKGROUND_COLOR)) {
        o = o || {};
        o["background-color"] = Gu(e.getStyleAttributeUnsignedValue(_c.BACKGROUND_COLOR, 0), 1);
    }
    if (n(_c.FONT_FAMILY)) {
        o = o || {};
        o["font-family"] = e.getStyleAttributeStringValue(_c.FONT_FAMILY, "Arial");
    }
    if (n(_c.COLOR)) {
        o = o || {};
        o.color = Hu(e, _c.COLOR, 1);
    }
    if (n(_c.TEXT_COLOR)) {
        o = o || {};
        o.color = Hu(e, _c.TEXT_COLOR, 1);
    }
    if (n(_c.FONT_SIZE)) {
        o = o || {};
        o["font-size"] = Yu(e);
    }
    if (n(_c.FONT_STYLE)) {
        o = o || {};
        o["font-style"] = Xu(e);
    }
    if (n(_c.FONT_WEIGHT)) {
        o = o || {};
        o["font-weight"] = qu(e);
    }
    if (n(_c.TEXT_ALIGNMENT)) {
        o = o || {};
        o["text-align"] = Zu(e);
    }
    if (n(_c.TEXT_DECORATION)) {
        o = o || {};
        o["text-decoration"] = Ju(e);
    }
    return o;
}

function Yu(e) {
    if (!e) {
        return null;
    }
    var t = e.getStyleAttributeDimensionValue(_c.FONT_SIZE, new Vs(12, js.POINTS));
    if (t) {
        return String(t.getScalarValueForUnit(js.POINTS, -1, 0)) + "pt";
    } else {
        return "0pt";
    }
}

function qu(e) {
    if (!e) {
        return null;
    }
    var t = e.getStyleAttributeUnsignedValue(_c.FONT_WEIGHT, rc.NORMAL);
    if (t === rc.BOLD) {
        return "bold";
    } else {
        return "normal";
    }
}

function Xu(e) {
    if (!e) {
        return null;
    }
    var t = e.getStyleAttributeUnsignedValue(_c.FONT_STYLE, ac.NORMAL);
    if (t === ac.ITALIC) {
        return "italic";
    } else {
        return "normal";
    }
}

function Zu(e) {
    if (!e) {
        return null;
    }
    var t = e.getStyleAttributeUnsignedValue(_c.TEXT_ALIGNMENT, Lc.LEFT);
    var o = "left";
    if (t === Lc.CENTER) {
        o = "center";
    } else if (t === Lc.RIGHT) {
        o = "right";
    }
    return o;
}

function Ju(e) {
    if (!e) {
        return null;
    }
    var t = e.getStyleAttributeUnsignedValue(_c.TEXT_DECORATION, Tc.NONE);
    var o = "none";
    if (t === Tc.UNDERLINE) {
        o = "underline";
    }
    return o;
}

function Qu(e) {
    if (!e.length || !e[0]) {
        return false;
    }
    var t = e[0].getDetails();
    var o = xn("gtl::TimePickResultDetails");
    return o && t instanceof o;
}

var em = null;

var tm = "";

var om = 0;

var nm = null;

function am() {
    var e;
    if (nm === null) {
        try {
            var t = new URLSearchParams(window.location.search);
            nm = ((e = t.get("VASDK_E2EMODE")) === null || e === void 0 ? void 0 : e.toLowerCase()) === "true";
        } catch (e) {
            nm = false;
        }
    }
    return nm;
}

function rm() {
    return td.getGlobalRenderMode() !== ed.SVG;
}

function sm(e) {
    var t = e + (rm() ? "canvas" : "svg");
    if (e) {
        return document.getElementById(t);
    }
    return null;
}

function im(e) {
    return !!e.getStyles;
}

var lm = function() {
    function e() {
        var e = this;
        this._model = null;
        this._baseView = null;
        this._gestureHelper = null;
        this._narratorHelper = null;
        this._viewAdded = false;
        this._visContainerId = null;
        this._viewRendered = false;
        this._gestureOverrides = {};
        this._myActiveViewTimeoutID = null;
        this._tooltipsEnabled = true;
        this._showContextMenuEventListener = undefined;
        this._accessibilityFocusChangeListener = undefined;
        this._renderMode = ed.AUTO;
        this._accessibilityActionCallback = null;
        this._showContextMenuCallback = null;
        this._customTooltipStyles = null;
        this._frameValidEventHandle = undefined;
        this._renderingTypeEventHandle = undefined;
        this._frameValidCallback = undefined;
        this._tooltipDataOverride = undefined;
        this._frameWidth = -1;
        this._frameHeight = -1;
        this._resizeObserver = null;
        this._restrictViewportGestures = false;
        this._zoomOverlayMessageDiv = null;
        this._zoomMessageTimerId = -1;
        this._stackedArcGISWebMapDiv = null;
        this._stackedWebmapDisplay = null;
        this._onBlur = function() {
            e._hideTooltips();
        };
        this._onPointerHover = function(t) {
            if (!e._tooltipsEnabled) {
                return;
            }
            var o = e._customTooltipStyles;
            if (o && im(o)) {
                o = o.getStyles();
            }
            var n = e.getPickResultsInAperture({
                x: t.localX,
                y: t.localY,
                width: -1,
                height: -1
            });
            var a;
            if (e._tooltipDataOverride) {
                a = e._tooltipDataOverride(n, t);
            }
            if (a === undefined && n) {
                if (Qu(n)) {
                    Lu.instance().setTimeTooltips(n, e._visContainerId, o);
                    return;
                } else {
                    a = n;
                }
            }
            Lu.instance().setTooltips(a, e._visContainerId, o, {
                x: t.localX,
                y: t.localY
            });
        };
        this._onMouseEnter = function() {
            if (em !== null) {
                clearTimeout(em);
                em = null;
                e._myActiveViewTimeoutID = null;
            }
            if (tm !== e._visContainerId) {
                em = window.setTimeout((function() {
                    e._makeActiveView();
                }), 100);
                e._myActiveViewTimeoutID = em;
            }
        };
        this._onMouseLeave = function() {
            if (em !== null) {
                clearTimeout(em);
                em = null;
                e._myActiveViewTimeoutID = null;
            }
            if (e._tooltipsEnabled) {
                Lu.instance().hideTooltips(e._visContainerId);
            }
        };
        this._onMouseWheel = function() {
            e._removeZoomMessage();
        };
        this._onKeyDown = function(t) {
            if (!e._baseView) {
                return;
            }
            var o = e._baseView.getAccessibilityController();
            if (!o) {
                return;
            }
            var n = o.getCurrentAccessibilityElement();
            if (!n) {
                return;
            }
            if (Dd(t) === mc.PVK_SPACE) {
                var a = n.getPickResult();
                if (a && e._visContainerId) {
                    Lu.instance().setTooltips([ a ], e._visContainerId);
                }
                return;
            }
            if (!e._accessibilityActionCallback) {
                return;
            }
            if (Dd(t) !== mc.PVK_ENTER) {
                return;
            }
            e._accessibilityActionCallback(n);
        };
        this.addGestureOverride("mouseEnter", this._onMouseEnter);
        this.addGestureOverride("mouseLeave", this._onMouseLeave);
        this.addGestureOverride("hover", this._onPointerHover);
        this.addGestureOverride("mouseWheel", this._onMouseWheel);
    }
    e.prototype.getStackedWebmapDisplay = function() {
        return this._stackedWebmapDisplay;
    };
    e.prototype.setStackedWebmapDisplay = function(e) {
        this._destroyStackedWebmapDisplay();
        this._stackedWebmapDisplay = e;
    };
    e.prototype.getTooltipsEnabled = function() {
        return this._tooltipsEnabled;
    };
    e.prototype.setTooltipsEnabled = function(e) {
        this._tooltipsEnabled = e;
        if (!e) {
            Lu.instance().hideTooltips(this._visContainerId);
        }
    };
    e.prototype.getRestrictViewportGestures = function() {
        return this._restrictViewportGestures;
    };
    e.prototype.setRestrictViewportGestures = function(e) {
        this._restrictViewportGestures = e;
    };
    e.prototype.setRenderMode = function(e) {
        if (this._renderMode === e) {
            return;
        }
        this._renderMode = e;
        var t = this.getModel();
        this.setModel(null);
        this.setModel(t, {
            applyAppTheme: false
        });
    };
    e.prototype.getRenderMode = function() {
        return this._renderMode;
    };
    e.prototype.getCustomTooltipStyles = function() {
        return this._customTooltipStyles;
    };
    e.prototype.setCustomTooltipStyles = function(e) {
        this._customTooltipStyles = e;
    };
    e.prototype.setAccessibilityActionCallback = function(e) {
        this._accessibilityActionCallback = e;
    };
    e.prototype.getPickResults = function(e, t, o, n) {
        return this.getPickResultsInAperture({
            x: e,
            y: t
        }, o, n);
    };
    e.prototype.getPickResultsInAperture = function(e, t, o) {
        var n = sm(this._visContainerId);
        if (!n) {
            return null;
        }
        e.width = e.width || 1;
        e.height = e.height || 1;
        var a = {
            width: n.clientWidth,
            height: n.clientHeight
        };
        if (t) {
            var r = n.getBoundingClientRect();
            e.x -= r.left;
            e.y -= r.top;
        }
        if (!a || e.x < 0 || e.y < 0 || e.x > a.width || e.y > a.height) {
            return null;
        }
        e.y = Math.floor(a.height - e.y);
        var s = this.getBaseView();
        if (this.viewHasRendered() && s) {
            var i = [ e.x, e.y, e.width, e.height ];
            i[0] = s.rtlTransformXValue(i[0]);
            return s.getPickResultsInAperture(i, !!o);
        }
        return null;
    };
    e.prototype.setModel = function(e, t) {
        var o, n;
        var a = t instanceof zc ? {
            applyAppTheme: false,
            baseView: t
        } : t !== null && t !== void 0 ? t : {}, r = a.applyAppTheme, s = r === void 0 ? true : r, i = a.baseView;
        var l = (o = this._model) === null || o === void 0 ? void 0 : o.release();
        this._model = (n = e === null || e === void 0 ? void 0 : e.retain()) !== null && n !== void 0 ? n : null;
        if (e) {
            var c = s ? ks() : e.getStyle();
            if (e.getStyle() !== c) {
                e.setStyle(c);
            }
            this.setZoomOverlayStylesFromStyle(c);
            if (!i && e.equals(l)) {
                i = this.getBaseView();
            }
            if (!i) {
                if (e.getInitialGraphState) {
                    i = e.createBaseView();
                } else {
                    i = e.createRenderer();
                }
            }
        }
        this.setBaseView(i);
    };
    e.prototype.getModel = function() {
        return this._model;
    };
    e.prototype.setBaseView = function(e) {
        if (e && e.equals(this._baseView)) {
            return;
        }
        if (this._baseView) {
            this._removeViewFromViewManager();
            this._baseView.release();
            this._baseView = null;
        }
        if (em && em === this._myActiveViewTimeoutID) {
            clearTimeout(em);
            em = null;
            this._myActiveViewTimeoutID = null;
        }
        if (this._frameValidEventHandle) {
            this._frameValidEventHandle.detach();
            this._frameValidEventHandle = null;
        }
        this._destroyHelpers();
        this._unobserveElement();
        this._viewAdded = false;
        this._viewRendered = false;
        if (e) {
            this._baseView = e.retain();
            this.addCanvasToContainer();
        }
        this._frameWidth = -1;
        this._frameHeight = -1;
    };
    e.prototype.getBaseView = function() {
        return this._baseView;
    };
    e.prototype.setElement = function(e) {
        this._unobserveElement();
        var t = document.createElement("div");
        var o = "visualContainer_" + String(om++);
        t.classList.add("visualContainer");
        t.id = o;
        e.appendChild(t);
        this.setContainerId(o);
    };
    e.prototype.getElement = function() {
        return this._visContainerId ? document.getElementById(this._visContainerId) : null;
    };
    e.prototype.setContainerId = function(e) {
        if (e === this._visContainerId) {
            return;
        }
        this._destroyHelpers();
        this._unobserveElement();
        if (this._baseView) {
            this._removeViewFromViewManager();
            this._viewAdded = false;
            this._viewRendered = false;
        }
        this._visContainerId = e;
        this.addCanvasToContainer();
    };
    e.prototype.getContainerId = function() {
        return this._visContainerId;
    };
    e.prototype.setCanvasRole = function(e) {
        this._canvasRole = e;
    };
    e.prototype.setCanvasAriaLabel = function(e) {
        this._canvasAriaLabel = e;
    };
    e.prototype.addCanvasToContainer = function() {
        var e = this;
        if (!this._visContainerId || !hn()) {
            return;
        }
        if (!this._viewAdded) {
            this._addViewToViewManager();
        }
        if (rm()) {
            td.appendCanvasToContainer(this._visContainerId);
        }
        var t = sm(this._visContainerId);
        if (t) {
            t.style.position = "absolute";
            if (this._canvasRole) {
                t.setAttribute("role", this._canvasRole);
            }
            if (this._canvasAriaLabel) {
                t.setAttribute("aria-label", this._canvasAriaLabel);
            }
        }
        var o = document.getElementById(this._visContainerId);
        if (o) {
            if (this._resizeObserver) {
                this._resizeObserver.disconnect();
            }
            this._resizeObserver = new al((function(t) {
                if (!t || t.length < 1) {
                    return;
                }
                var o = t[0];
                if (e._baseView && e._viewAdded) {
                    e._frameWidth = o.contentRect.width;
                    e._frameHeight = o.contentRect.height;
                }
            }));
            this._applyZoomOverlayStyleOverrides();
            this._resizeObserver.observe(o);
        }
        if (this._viewRendered) {
            this._initHelpersAndListeners();
        }
        if (am()) {
            Object.defineProperty(t, "__a11yController", {
                get: function() {
                    var t;
                    return (t = e.getBaseView()) === null || t === void 0 ? void 0 : t.getAccessibilityController();
                }
            });
        }
    };
    e.prototype.viewHasRendered = function() {
        return this._viewRendered;
    };
    e.prototype._initHelpersAndListeners = function() {
        var e, t;
        this._destroyHelpers();
        if (!this._baseView || !this._visContainerId) {
            return;
        }
        var o = this.getElement();
        if (!o) {
            return;
        }
        this._gestureHelper = new Bu(this._baseView, o, this._gestureOverrides, this._displayZoomOverlay.bind(this));
        this._narratorHelper = new xd(this._baseView.getAccessibilityController(), o, this._visContainerId);
        o.addEventListener("keydown", this._onKeyDown);
        o.addEventListener("blur", this._onBlur);
        this._accessibilityFocusChangeListener = (t = (e = this._baseView.getAccessibilityController()) === null || e === void 0 ? void 0 : e.getModel()) === null || t === void 0 ? void 0 : t.attachEvent(Oc.ACCESSIBILITY_FOCUS_CHANGE, this._hideTooltips, this);
        if (!this._model) {
            return;
        }
        this._showContextMenuEventListener = this._model.attachEvent(Zc.SHOW_CONTEXT_MENU, this._handleShowContextMenuEvent, this);
        if (document.activeElement === o) {
            this._gestureHelper._onFocus();
        }
    };
    e.prototype.addGestureOverride = function(e, t) {
        if (!this._gestureOverrides) {
            throw new Error("Cannot add gesture override, overrides object is null! (VisualizationManager is probably destroyed)");
        }
        var o = this._gestureOverrides[e];
        if (!o) {
            o = [];
            this._gestureOverrides[e] = o;
        }
        o.push(t);
    };
    e.prototype.hasGestureOverride = function(e) {
        return !!this._gestureOverrides[e];
    };
    e.prototype.getFrameValidCallback = function() {
        return this._frameValidCallback;
    };
    e.prototype.setFrameValidCallback = function(e) {
        this._frameValidCallback = e;
        if (!this._baseView) {
            return;
        }
        if (e && !this._frameValidEventHandle) {
            this._frameValidEventHandle = this._baseView.attachEvent(zc.FRAME_VALID, this._handleFrameValid, this);
        } else if (!e && this._frameValidEventHandle) {
            this._frameValidEventHandle.detach();
            this._frameValidEventHandle = null;
        }
    };
    e.prototype.setShowContextMenuCallback = function(e) {
        this._showContextMenuCallback = e;
    };
    e.prototype.getTooltipDataOverrideCallback = function() {
        return this._tooltipDataOverride;
    };
    e.prototype.setTooltipDataOverrideCallback = function(e) {
        this._tooltipDataOverride = e;
    };
    e.prototype.sizeVisualization = function() {
        if (this._baseView && this._viewAdded) {
            this._baseView.setFrame([ 0, 0, this._frameWidth, this._frameHeight ]);
        }
    };
    e.prototype.setZoomOverlayStylesFromStyle = function(e) {
        if (e) {
            var t = e.getAttributeBundleForStyleElement(Dc.GRAPH_WALLS);
            var o = e.getAttributeBundleForStyleElement(Dc.GRAPH_VALUE_TEXT);
            var n = o === null || o === void 0 ? void 0 : o.getStyleAttributeDimensionValue(_c.FONT_SIZE, null);
            this._zoomOverlayStyleOverrides = {
                "background-color": (t === null || t === void 0 ? void 0 : t.getStyleAttributeUnsignedValue(_c.FILL_COLOR, 0)) || 0,
                color: (o === null || o === void 0 ? void 0 : o.getStyleAttributeUnsignedValue(_c.TEXT_COLOR, 16777215)) || 16777215,
                "font-family": (o === null || o === void 0 ? void 0 : o.getStyleAttributeStringValue(_c.FONT_FAMILY, "sans-serif")) || "sans-serif",
                "font-size": n ? n.getScalarValueForUnit(js.POINTS, -1, 1) + "pt" : "14pt"
            };
            this._applyZoomOverlayStyleOverrides();
        }
    };
    e.prototype._applyZoomOverlayStyleOverrides = function() {
        var e = this.getElement();
        if (e && this._zoomOverlayStyleOverrides) {
            if (!this._zoomOverlayMessageDiv) {
                var t = navigator.appVersion.indexOf("Mac") !== -1;
                var o = yc.getLocalizedString("sas_commons", t ? "zoom.cmd.txt" : "zoom.ctrl.txt");
                this._zoomOverlayMessageDiv = document.createElement("div");
                var n = document.createElement("span");
                this._zoomOverlayMessageDiv.appendChild(n);
                n.textContent = o;
                n.setAttribute("class", "sasZoomOverlayMessage");
            }
            var a = this._zoomOverlayStyleOverrides["background-color"];
            this._zoomOverlayMessageDiv.setAttribute("class", "sasZoomOverlayHidden");
            this._zoomOverlayMessageDiv.style.setProperty("--overlay-bg", Gu(a, .75));
            this._zoomOverlayMessageDiv.style.setProperty("--overlay-message-bg", Gu(a, 1));
            this._zoomOverlayMessageDiv.style.setProperty("--overlay-color", Ql.getHexStringFromColor(this._zoomOverlayStyleOverrides["color"]));
            this._zoomOverlayMessageDiv.style.setProperty("--font-family", this._zoomOverlayStyleOverrides["font-family"]);
            this._zoomOverlayMessageDiv.style.setProperty("--font-size", this._zoomOverlayStyleOverrides["font-size"]);
            e.appendChild(this._zoomOverlayMessageDiv);
        }
    };
    e.prototype._displayZoomOverlay = function() {
        var e = this;
        var t, o;
        if (!this._restrictViewportGestures) {
            return false;
        }
        var n = (t = this._model) === null || t === void 0 ? void 0 : t.isZoomOverlaySupported.bind(this._model);
        if (this._model && (!n || !n())) {
            return false;
        }
        if (this._zoomMessageTimerId > -1) {
            clearTimeout(this._zoomMessageTimerId);
        }
        (o = this._zoomOverlayMessageDiv) === null || o === void 0 ? void 0 : o.setAttribute("class", "sasZoomOverlayVisible");
        this._zoomMessageTimerId = setTimeout((function() {
            e._removeZoomMessage();
        }), 1500);
        return true;
    };
    e.prototype._removeZoomMessage = function() {
        var e;
        if (this._zoomMessageTimerId === -1) {
            return;
        }
        (e = this._zoomOverlayMessageDiv) === null || e === void 0 ? void 0 : e.setAttribute("class", "sasZoomOverlayHidden");
        clearTimeout(this._zoomMessageTimerId);
        this._zoomMessageTimerId = -1;
    };
    e.prototype._createStackedArcGISWebMapDiv = function() {
        var e = this.getElement();
        if (!this._stackedArcGISWebMapDiv) {
            this._stackedArcGISWebMapDiv = document.createElement("div");
            this._stackedArcGISWebMapDiv.style.setProperty("width", "100%");
            this._stackedArcGISWebMapDiv.style.setProperty("height", "100%");
        }
        if (e && !e.contains(this._stackedArcGISWebMapDiv)) {
            e.prepend(this._stackedArcGISWebMapDiv);
        }
        this._createStackedArcGISWebMap();
    };
    e.prototype._createStackedArcGISWebMap = function() {
        var e;
        var t = sm((e = this._visContainerId) !== null && e !== void 0 ? e : "");
        if (!this._model || !this._baseView || !t || !this._stackedArcGISWebMapDiv) {
            console.error("Cannot create stacked webmap without required inputs.");
            return;
        }
        var o = $s();
        var n = o ? new o : null;
        this.setStackedWebmapDisplay(n);
        if (!n) {
            console.error("Cannot create stacked webmap without supplemental display.");
            return;
        }
        n.create(this._model, this._baseView, t, this._stackedArcGISWebMapDiv);
    };
    e.prototype._destroyStackedWebmapDisplay = function() {
        var e = this.getStackedWebmapDisplay();
        if (e) e.destroy();
    };
    e.prototype._showStackedArcGISWebMap = function() {
        var e;
        (e = this._stackedArcGISWebMapDiv) === null || e === void 0 ? void 0 : e.style.setProperty("display", "visible");
    };
    e.prototype._hideStackedArcGISWebMap = function() {
        var e;
        (e = this._stackedArcGISWebMapDiv) === null || e === void 0 ? void 0 : e.style.setProperty("display", "hidden");
    };
    e.prototype.destroy = function() {
        var e;
        if (this._visContainerId) {
            Lu.instance().hideTooltips(this._visContainerId, false);
        }
        this.setStackedWebmapDisplay(null);
        (e = this._stackedArcGISWebMapDiv) === null || e === void 0 ? void 0 : e.remove();
        this._stackedArcGISWebMapDiv = null;
        this._unobserveElement();
        this.setModel(null);
        this.setContainerId(null);
        this._gestureOverrides = null;
        this._accessibilityActionCallback = null;
        this._showContextMenuCallback = null;
    };
    e.prototype._handleFrameValid = function() {
        this._viewRendered = true;
        if (!this._gestureHelper) {
            this._initHelpersAndListeners();
        }
        if (!this._frameValidCallback) {
            this.setFrameValidCallback(null);
        } else {
            this._frameValidCallback();
        }
    };
    e.prototype._handleRenderingTypeChange = function() {
        var e;
        if (((e = this._baseView) === null || e === void 0 ? void 0 : e.getRenderingType()) === Bc.STACKED_ARCGIS_WEBMAP) {
            this._createStackedArcGISWebMapDiv();
            this._showStackedArcGISWebMap();
        } else {
            this._hideStackedArcGISWebMap();
        }
    };
    e.prototype._addViewToViewManager = function() {
        var e = this._baseView;
        var t = this.getElement();
        if (e && t && !this._viewAdded && this._visContainerId) {
            this._viewAdded = true;
            td.addView(e, this._visContainerId, this._renderMode);
            if (!this._frameValidEventHandle) {
                this._frameValidEventHandle = e.attachEvent(zc.FRAME_VALID, this._handleFrameValid, this);
            }
            if (this._renderingTypeEventHandle) this._renderingTypeEventHandle.detach();
            this._renderingTypeEventHandle = e.attachEvent(zc.RENDERING_TYPE_CHANGE, this._handleRenderingTypeChange, this);
            ud(this);
            this._handleRenderingTypeChange();
        }
    };
    e.prototype._removeViewFromViewManager = function() {
        Lu.instance().hideTooltips(this._visContainerId);
        td.removeView(this._baseView);
        md(this);
    };
    e.prototype._makeActiveView = function() {
        tm = this._visContainerId;
    };
    e.prototype._handleShowContextMenuEvent = function(e) {
        if (!this._showContextMenuCallback || !(e instanceof Zc)) {
            return;
        }
        var t = e.getPickResult();
        if (!t) {
            return;
        }
        var o = this.getElement();
        if (!o) {
            return;
        }
        var n = -1;
        var a = t.getEntries();
        if (a) {
            var r = a[0];
            if (r && r.getIndices) {
                n = r.getIndices()[0];
            }
        }
        if (n < 0) {
            return;
        }
        var s = t.getPreferredTargetLocation();
        var i = Bu.getPositionFromPoint({
            x: s[0],
            y: s[1]
        }, o);
        this._showContextMenuCallback(i, t, n);
    };
    e.prototype._hideTooltips = function() {
        Lu.instance().hideTooltips(this._visContainerId);
    };
    e.prototype._destroyHelpers = function() {
        var e = this.getElement();
        if (e) {
            e.removeEventListener("keydown", this._onKeyDown);
            e.removeEventListener("blur", this._onBlur);
        }
        if (this._gestureHelper) {
            this._gestureHelper.destroy();
            this._gestureHelper = null;
        }
        if (this._narratorHelper) {
            this._narratorHelper.destroy();
            this._narratorHelper = null;
        }
        if (this._showContextMenuEventListener) {
            this._showContextMenuEventListener.detach();
            this._showContextMenuEventListener = null;
        }
        if (this._accessibilityFocusChangeListener) {
            this._accessibilityFocusChangeListener.detach();
            this._accessibilityFocusChangeListener = null;
        }
    };
    e.prototype._unobserveElement = function() {
        if (this._visContainerId && this._resizeObserver) {
            this._resizeObserver.disconnect();
        }
    };
    return e;
}();

var cm = _n;

function dm(e) {
    const t = e.__ltjsPropertyNames;
    if (t) {
        t.forEach((t => {
            e[t] = null;
        }));
    }
    e.__wrappersReleased = true;
}

function um(e, t) {
    return {
        get() {
            if (this.__wrappersReleased) {
                throw new Error(`wrappersReleased,  unable to get ${t}`);
            }
            return this["__" + t];
        },
        set(e) {
            if (!this.__ltjsPropertyNames) {
                this.__ltjsPropertyNames = new Set;
            }
            this.__ltjsPropertyNames.add(t);
            const o = this["__" + t];
            if (o) {
                o.release();
            }
            this["__" + t] = e;
            if (e) {
                e.retain();
            }
        },
        enumerable: true,
        configurable: true
    };
}

function mm(e, t, o) {
    const n = o.value;
    let a = function() {
        const e = n.apply(this, arguments);
        dm(this);
        return e;
    };
    return {
        configurable: true,
        get() {
            return a;
        },
        set(e) {
            a = e;
        }
    };
}

var pm, fm;

function gm(e, t) {
    for (const o of e) {
        o(t);
    }
}

let hm = (pm = class e {
    constructor(e, t, o) {
        this._fulfilledCallbacks = [];
        this._cancelledCallbacks = [];
        this._warningCallbacks = [];
        this._alwaysCallbacks = [];
        jo(this, "_voucher", fm, this);
        this._voucherEventHandle = null;
        this._downloadVoucherEventHandle = null;
        this._cancelled = false;
        this._resolved = false;
        this._warning = null;
        this._chainParent = null;
        this._deferredResolutionTimerId = 0;
        if (e === undefined) {
            return;
        }
        if (e instanceof vl) {
            this.setVoucher(e);
            return;
        }
        this._warning = new ei(e, t, o || "");
        this._scheduleDeferredResolution(vl.WARNING);
    }
    setVoucher(e) {
        if (!e || this._voucher || this._cancelled || this._resolved) {
            return this;
        }
        this._voucher = e;
        if (e.isCompleted()) {
            this._scheduleDeferredResolution(e.getType());
        } else {
            this._voucherEventHandle = e.attachEvent(es.ALL, this._onVoucherEvent, this);
        }
        return this;
    }
    then(t) {
        const o = new e;
        o._chainParent = this;
        this.always((function(e) {
            if (e.isCancelled()) {
                o.cancel();
                return;
            }
            let n = e._voucher;
            if (n && n.getType() === vl.FULFILLED) {
                const o = t(e);
                if (o instanceof vl) {
                    n = o;
                }
            }
            if (n) {
                o.setVoucher(n);
            }
        }));
        return o;
    }
    fulfilled(e) {
        if (e && this._fulfilledCallbacks) {
            this._fulfilledCallbacks.push(e);
        }
        return this;
    }
    cancelled(e) {
        if (e && this._cancelledCallbacks) {
            this._cancelledCallbacks.push(e);
        }
        return this;
    }
    warning(e) {
        if (e && this._warningCallbacks) {
            this._warningCallbacks.push(e);
        }
        return this;
    }
    always(e) {
        if (e && this._alwaysCallbacks) {
            this._alwaysCallbacks.push(e);
        }
        return this;
    }
    cancel() {
        if (!this._cancelled && !this._resolved) {
            this._cancelled = true;
            if (this._chainParent) {
                this._chainParent.cancel();
            }
            if (this._voucherEventHandle) {
                this._voucherEventHandle.detach();
                this._voucherEventHandle = null;
            }
            if (this._downloadVoucherEventHandle) {
                this._downloadVoucherEventHandle.detach();
                this._downloadVoucherEventHandle = null;
            }
            this._cancelDeferredResolution();
            if (this._voucher) {
                this._voucher.cancel();
            }
            this._scheduleDeferredResolution(vl.CANCELLED);
        }
    }
    isCancelled() {
        return this._cancelled;
    }
    getWarning() {
        return this._voucher ? this._voucher.getBaseWarning() : this._warning;
    }
    getRequestedResource() {
        return this._voucher ? this._voucher.getAssociatedModel() : null;
    }
    _getReportDownloadStatus() {
        const e = this.getRequestedResource();
        if (e instanceof Ll) {
            return e.getDownloadStatus();
        }
        return null;
    }
    _onVoucherEvent(e) {
        this._resolveVoucher(e.getType());
    }
    _scheduleDeferredResolution(e) {
        if (!this._deferredResolutionTimerId) {
            this._deferredResolutionTimerId = window.setTimeout(this._resolveVoucher.bind(this, e), 0);
        }
    }
    _cancelDeferredResolution() {
        if (this._deferredResolutionTimerId) {
            clearTimeout(this._deferredResolutionTimerId);
            this._deferredResolutionTimerId = 0;
        }
    }
    _resolveVoucher(e) {
        switch (e) {
          case vl.FULFILLED:
            if (!this._handlePendingDownloads(this._getReportDownloadStatus())) {
                this._resolveCallbacks(this._fulfilledCallbacks);
            }
            break;

          case vl.WARNING:
            this._resolveCallbacks(this._warningCallbacks);
            break;

          case vl.CANCELLED:
            this._cancelled = true;
            this._resolveCallbacks(this._cancelledCallbacks);
            break;
        }
    }
    _handlePendingDownloads(e) {
        let t = false;
        if (!e) {
            return false;
        }
        if (e.getNumberOfPendingDownloads() > 0) {
            if (!this._downloadVoucherEventHandle) {
                this._downloadVoucherEventHandle = e.attachEvent(es.ALL, this._onVoucherEvent, this);
            }
            t = true;
        }
        return t;
    }
    _resolveCallbacks(e) {
        gm(e, this);
        gm(this._alwaysCallbacks, this);
        this._destroy();
        this._resolved = true;
    }
    _destroy() {
        this._chainParent = null;
        this._fulfilledCallbacks.length = 0;
        this._cancelledCallbacks.length = 0;
        this._warningCallbacks.length = 0;
        this._alwaysCallbacks.length = 0;
    }
}, fm = Vo(pm.prototype, "_voucher", [ um ], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function() {
        return null;
    }
}), pm);

var bm = Dr("BIRD::BIRDPackage", [ "commons::PortablePackage" ], Ka, [ , , , , , {
    instance: [ 1 ]
}, ,  ]);

un("BIRD", [ bm ]);

Dr("BIRD::BIRDModel", [ "commons::PropertyOwner", "commons::BaseModel" ], es, [ {
    MODEL_CHANGE: 50001
}, , , , {
    getDescription: [ 7, 4 ]
}, , ,  ]);

Dr("BIRD::AboutInfo", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    messages: [ 7 ],
    label: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::AbstractAction", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    name: 7,
    tooltip: 7,
    label: 7
}, , , , , ,  ]);

Dr("BIRD::AbstractConditionScopeItem", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::AbstractConstraintType", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    maxInclusive: 2,
    min: 7,
    max: 7,
    minInclusive: 2,
    required: 2
}, , , {
    getDataUsage: [ 4 ]
}, , ,  ]);

Dr("BIRD::AbstractRangeConstraintType", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::AbstractConstraintType" ], es, [ , , , , , , ,  ]);

var vm = {
    NONE: 0,
    DOUBLE: 1,
    INT: 2,
    DATE: 3,
    TIME: 4,
    DATETIME: 5,
    STRING: 6
};

Dr("BIRD::AbstractValueType", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , , , , {
    getDataUsage: [ 4 ]
}, , ,  ]);

Dr("BIRD::DataItemOrPromptDefinition", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    name: 7,
    label: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::StringValue", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::AbstractValueType" ], es, [ , {
    valueRef: 1,
    dynamicValue: 4,
    behavior: 4,
    value: 7
}, , , {
    getDataUsage: [ 4 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CustomSort", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    values: [ 1 ],
    name: 7,
    type: 4,
    binUnit: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::PromptSpecialization", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , , , , , , ,  ]);

var ym = {
    HORIZONTAL: 0,
    VERTICAL: 1
};

var xm = ym;

Dr("BIRD::DataItemBase", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::DataItemOrPromptDefinition" ], es, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::TimeFrame", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    timeDataItem: 1,
    name: 7,
    label: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Lookup", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataItem: 1,
    property: 7,
    externalSource: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::AssociatedColumn", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataItem: 1,
    regionType: 4,
    name: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::AssociatedRegion", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    regionTypeLabel: 7,
    regionDisplay: 7,
    regionId: 7,
    regionType: 4,
    name: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::GeoInfo", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    lookups: [ 1 ],
    geoType: 4,
    customCoordinateSpace: 7,
    associatedColumns: [ 1 ],
    associatedRegions: [ 1 ],
    regionMapProvider: 7,
    coordinateSpace: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Partition", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    purpose: 4,
    value: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::DataItem", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::DataItemOrPromptDefinition", "BIRD::DataItemBase" ], es, [ , {
    partitions: [ 1 ],
    xref: 7,
    hidden: 2,
    visibility: 4,
    geoInfos: [ 1 ],
    purpose: 7,
    usage: 4,
    format: 7,
    aggregation: 4,
    partitionOrigin: 4,
    timeFrame: 1,
    sortOn: 4,
    customSort: 1,
    forceServerFormatting: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::AbstractSlider", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::PromptSpecialization" ], es, [ , {
    orientation: 4,
    maxVariable: 1,
    minVariable: 1,
    constraint: 1,
    defaultFormat: 7
}, , , , , ,  ]);

Dr("BIRD::AbstractTableColumn", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    styleClass: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::AbstractTableRow", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::AbstractValueConstraintType", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::AbstractConstraintType" ], es, [ , {
    userValuesAllowed: 2,
    selectionOrdered: 4,
    minValueCount: 4,
    missingAllowed: 2,
    allAllowed: 2,
    maxValueCount: 4
}, , , , , ,  ]);

Dr("BIRD::ActionParameterValue", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    level: 7,
    variable: 7,
    sendAs: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ActionParameter", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    method: 4,
    values: [ 1 ],
    key: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::BIRDProperty", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    label: 7,
    value: 7,
    key: 7,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::BIRDExpression", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::FilterItemBase", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::DataItemOrPromptDefinition", "BIRD::DataItemBase", "BIRD::DataItem" ], es, [ , {
    expression: 1,
    editorProperties: [ 1 ],
    systemGenerated: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::AlertableState", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    holdInterval: 4,
    evaluationStrategy: 4,
    holdIntervalUnit: 4,
    intervalUnit: 4,
    name: 7,
    clauseName: 7,
    evaluationInterval: 4,
    label: 7,
    holdIntervalStrategy: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::AllOther", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::BusinessItem", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataItem: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::AppliedFilters", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataSourceSubsetFilters: [ 1 ],
    ignoreDataSourceFilters: 2,
    detailFilters: [ 1 ],
    aggregateFilters: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ArgumentBase", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    purpose: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ArgumentValue", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::AbstractValueType" ], es, [ , , , , {
    getDataUsage: [ 4 ]
}, , ,  ]);

Dr("BIRD::Argument", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::ArgumentBase" ], es, [ , {
    type: 7,
    value: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Condition", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    shareable: 2,
    scope: 4,
    name: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::AttributeMapping", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    transform: 4,
    from: 7,
    to: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Sm = {
    DEFAULT: 0,
    SMALL: 1,
    MEDIUM: 2,
    LARGE: 3
};

Dr("BIRD::BIRDSchema", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    epochVersion: 4,
    majorVersion: 4,
    minorVersion: 4,
    nonce: 7
}, , , , {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ]
}, , [ "_create" ] ]);

Dr("BIRD::DataResource", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ItemGroup", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    name: 7,
    label: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::BusinessItemFolder", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    businessItemFolders: [ 1 ],
    dataItems: [ 1 ],
    label: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CodeBase", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    codeContent: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CasResource", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::DataResource" ], es, [ , {
    server: 7,
    library: 7,
    locale: 7,
    table: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ExternalModel", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::DataResource" ], es, [ , {
    modelName: 7,
    modelVersionNumber: 7,
    mostRecentModelVersionSeen: 7,
    modelUri: 7,
    modelVersionUri: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ModelDataSource", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::CodeGroup" ], es, [ , {
    name: 7,
    casResource: 1,
    externalModel: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::SASCode", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::CodeBase" ], es, [ , {
    modelDataSource: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CodeGroup", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    code: 1,
    appendCode: 1,
    prependCode: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ColumnBase", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    xref: 7,
    usage: 4,
    format: 7,
    label: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::GeneratedColumn", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::ColumnBase" ], es, [ , {
    dataType: 4,
    name: 7,
    stringLength: 4,
    forceServerFormatting: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ReferencedColumn", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::ColumnBase" ], es, [ , {
    baseItem: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CodeBlock", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::CodeGroup" ], es, [ , {
    scoreCodeNumbers: 7,
    referencedColumns: [ 1 ],
    name: 7,
    type: 4,
    generatedColumns: [ 1 ],
    modelDataSource: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::DataSource", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    hidden: 2,
    itemGroups: [ 1 ],
    openStreetMapProvider: 1,
    timeFrames: [ 1 ],
    label: 7,
    type: 7,
    codeBlocks: [ 1 ],
    esriWebMapProvider: 1,
    appliedFilters: 1,
    name: 7,
    businessItemFolder: 1,
    esriMapProvider: 1,
    dataResource: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::RankBase", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    other: 2,
    includeMissing: 2,
    name: 7,
    type: 4,
    includeTies: 2,
    subset: 4,
    n: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::RankItems", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    items: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::SortMember", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataItem: 1,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::MeasureSortItem", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataItem: 1,
    sortDirection: 4,
    sortMembers: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::SortLevel", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    sortDirection: 4,
    sortOn: 4,
    uniqueLevelName: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::SortItem", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataItem: 1,
    sortDirection: 4,
    sortOn: 4,
    sortLevels: [ 1 ],
    formatted: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::SortItems", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    sortItems: [ 1 ],
    measureSortItems: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::QueryBase", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    appliedOthers: [ 1 ],
    sortItems: 1,
    appliedFilters: 1,
    navigationSteps: [ 1 ],
    rankItems: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Axis", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    businessItems: [ 1 ],
    type: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::RelationalQuery", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::QueryBase" ], es, [ , {
    columnTotals: 2,
    axes: [ 1 ],
    detail: 2,
    excludeDuplicates: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::OmitItemBase", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataItem: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::MultidimensionalQuery", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::QueryBase" ], es, [ , {
    columnTotals: 2,
    columnSubtotals: 2,
    rowTotals: 2,
    omitSubtotalItems: [ 1 ],
    rowSortItems: 1,
    axes: [ 1 ],
    columnRankItems: 1,
    detail: 2,
    rowSubtotals: 2,
    columnSortItems: 1,
    rowRankItems: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::PluggableQuery", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::QueryBase" ], es, [ , {
    resource: 7,
    reportPart: 7,
    directive: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ProceduralData", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    purpose: 7,
    name: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ProceduralQuery", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::QueryBase" ], es, [ , {
    generatedResources: [ 1 ],
    argumentList: [ 1 ],
    scoreCodeNumber: 4,
    referenceResources: [ 1 ],
    type: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var wm = {
    NONE: 0,
    LISTTABLE: 1,
    CROSSTAB: 2,
    BUTTONBAR: 3,
    CUSTOMCONTENT: 4,
    DROPDOWN: 5,
    LIST: 6,
    TEXTINPUT: 7,
    GRAPHDEFAULT: 8,
    BUBBLE: 9,
    GEOBUBBLE: 10,
    GEOCONTOUR: 11,
    GEOSCATTER: 12,
    GEOREGION: 13,
    GEOHEATMAP: 14,
    GEOLINE: 15,
    HEATMAP: 16,
    TIMESERIES: 17,
    KPI: 18,
    HEATBOX: 19,
    DUALAXISTIMESERIES: 20,
    SCATTER: 21,
    TREEMAP: 22,
    WORDCLOUD: 23,
    KEYVALUE: 24,
    GEOPIE: 25
};

Dr("BIRD::ResultDefinition", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::DataDefinition" ], es, [ , {
    maxRows: 4,
    maxRowsBehavior: 4,
    purpose: 7,
    format: 4,
    maxRowsLookup: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::DataDefinition", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    pluggableQuery: 1,
    name: 7,
    businessItems: [ 1 ],
    executionModelPreference: 4,
    multidimensionalQuery: 1,
    proceduralQuery: 1,
    type: 4,
    dataSource: 1,
    relationalQuery: 1,
    resultDefinitions: [ 1 ]
}, {
    parentDefinition: 1
}, , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ParameterValue", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    parameter: 7,
    value: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::DefaultValue", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::ParameterValue" ], es, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::SpanElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    spans: [ 1 ],
    action: 1,
    styleClass: 7,
    content: 7
}, {
    parentSpan: 1
}, , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ParagraphElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    spans: [ 1 ],
    format: 7,
    styleClass: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::RichTextString", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    spans: [ 1 ],
    automatic: 2,
    paragraphs: [ 1 ],
    styleClass: 7,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::GraphConditionUsage", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    visualType: 4,
    containers: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ConditionParameter", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataDefinition: 1,
    parameter: 7,
    variable: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ConditionScopes", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    scopeItems: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ConditionReference", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    condition: 1,
    hidden: 2,
    alertableStates: [ 1 ],
    applyToVariable: 7,
    nonVisual: 2,
    attrMap: 7,
    parameters: [ 1 ],
    graphUsage: 1,
    conditionScopes: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::RendererManagerController", [ "BIRD::BIRDModelController" ], es, [ , , , {
    view: 1
}, , , ,  ]);

Dr("BIRD::PageSetup", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    orientation: 4,
    startingNumber: 4,
    offsetHeader: 1,
    marginLeft: 1,
    marginRight: 1,
    size: 4,
    printBackgroundColorsAndImages: 2,
    width: 7,
    pageFit: 4,
    marginBottom: 1,
    offsetFooter: 1,
    marginTop: 1,
    height: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::HorizontalConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    offset: 7,
    anchor: 1,
    position: 4,
    anchorPosition: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::VerticalConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    offset: 7,
    anchor: 1,
    position: 4,
    anchorPosition: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::WidthConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    width: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::HeightConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    height: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::RelativeConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    heightConstraint: 1,
    widthConstraint: 1,
    horizontalConstraint: 1,
    verticalConstraint: 1,
    zIndex: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ResponsiveSizeConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    grow: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::BaseStylesheetResource", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    file: 7,
    theme: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::StylesheetFile", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    file: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Stylesheet", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::MediaScheme", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    stylesheet: 1,
    baseStylesheetResource: 1,
    name: 7,
    label: 7,
    stylesheetFile: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::MediaTarget", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    windowSize: 4,
    scheme: 1,
    name: 7,
    definition: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::VisualSize", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    flexibility: 4,
    min: 4,
    mediaTarget: 1,
    max: 4,
    preferredSizeBehavior: 4,
    value: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ResponsiveWidthConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::ResponsiveSizeConstraint" ], es, [ , {
    widths: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ResponsiveHeightConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::ResponsiveSizeConstraint" ], es, [ , {
    heights: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ResponsiveConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    heightConstraint: 1,
    widthConstraint: 1,
    horizontalConstraint: 1,
    verticalConstraint: 1,
    zIndex: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::PositionedModel", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    relativeConstraint: 1,
    hidden: 2,
    name: 7,
    width: 7,
    responsiveConstraint: 1,
    height: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::LayoutElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::PositionedModelOwner", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::PositionedModel" ], es, [ , {
    layout: 1,
    visualsAndContainers: [ 1 ]
}, , , , , ,  ]);

Dr("BIRD::MediaContainer", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::PositionedModel", "BIRD::PositionedModelOwner" ], es, [ , {
    target: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Cm = {
    TOP: 0,
    BOTTOM: 1,
    LEFT: 2,
    RIGHT: 3
};

Dr("BIRD::Header", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    repeat: 4,
    width: 7,
    location: 4,
    mediaContainers: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Body", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    mediaContainers: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Footer", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    footerPosition: 4,
    mediaContainer: [ 1 ],
    repeat: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Em = {
    NONE: 0,
    ONEWAYFILTER: 1,
    TWOWAYFILTER: 2,
    BRUSH: 3
};

Dr("BIRD::Section", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    pageSetup: 1,
    footer: 1,
    name: 7,
    header: 1,
    autoInteractionMode: 4,
    label: 7,
    body: 1,
    applicationName: 7,
    sections: [ 1 ],
    showSelectionControl: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Im = {
    NONE: 0,
    BAND_PLOT: 1,
    BAR_CHART: 2,
    BAR_LINE_CHART: 3,
    BLOCK_PLOT: 4,
    BOX_PLOT: 5,
    BUBBLE_PLOT: 6,
    BUBBLE_CHANGE_PLOT: 7,
    BUTTERFLY_CHART: 8,
    BUTTON_BAR: 9,
    COMPARE_TIME_SERIES: 10,
    CONTOUR_PLOT: 11,
    CORRELATION_MATRIX: 12,
    DECISION_TREE: 13,
    DOT_PLOT: 14,
    DROP_DOWN_LIST: 15,
    DUAL_AXIS_BAR_CHART: 16,
    DUAL_AXIS_LINE_CHART: 17,
    DUAL_AXIS_TIME_SERIES_PLOT: 18,
    ELLIPSE_PARM: 19,
    FRINGE_PLOT: 20,
    GAUGE: 21,
    GEO_BUBBLE: 22,
    GEO_CLUSTER: 23,
    GEO_CONTOUR: 24,
    GEO_LINE: 25,
    GEO_NETWORK: 26,
    GEO_PIE: 27,
    GEO_REGION: 28,
    GEO_SCATTER: 29,
    HEAT_BOX: 30,
    HEAT_MAP: 31,
    HIGH_LOW_PLOT: 32,
    HISTOGRAM_PARM: 33,
    HISTOGRAM: 34,
    ICICLE_PLOT: 35,
    KEY_VALUE: 36,
    KPI_CHART: 37,
    LINE_CHART: 38,
    LINEAGE_DIAGRAM: 39,
    LIST: 40,
    MAP: 41,
    MAP_REGION: 42,
    MAP_LINE_LAYER: 43,
    MIXED_CHART: 44,
    NEEDLE_PLOT: 45,
    NETWORK_DIAGRAM: 46,
    NETWORK_PLOT: 47,
    NODE_LINK_DIAGRAM: 48,
    NUMERIC_SERIES_PLOT: 49,
    PARALLEL_COORDINATES_PLOT: 50,
    PARETOLINE: 51,
    PFD: 52,
    PIE_CHART: 53,
    SANKEY_DIAGRAM: 54,
    SCATTER_PLOT: 55,
    SCHEDULE_CHART: 56,
    SERIES_PLOT: 57,
    SLIDER: 58,
    STEP_PLOT: 59,
    TIME_SERIES_PLOT: 60,
    TARGET_BAR_CHART: 61,
    TEXT_INPUT: 62,
    TEXT_PLOT: 63,
    TREE_DIAGRAM: 64,
    TREE_MAP: 65,
    VECTOR_PLOT: 66,
    WATERFALL_CHART: 67,
    WORD_CLOUD: 68,
    POLYGON_PLOT: 69,
    FORECAST_PLOT: 70,
    OVERLAY_DATA_INSET: 71,
    MOSAIC_PLOT: 72
};

Dr("BIRD::VisualElementTypeInfo", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    localizedName: 7,
    graphDescription: 4,
    type: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var _m = Dr("BIRD::PositionedModelController", [ "BIRD::BIRDModelController" ], es, [ , , , {
    parent: 1,
    layoutProxy: 1,
    w: 1,
    x: 1,
    h: 1,
    y: 1
}, {
    getRelativeBounds: [ 12 ],
    setSelected: [ 0, 2 ],
    canConvert: [ 2 ],
    getPadding: [ 1 ],
    getBorderThickness: [ 1 ],
    convert: [ 0, 1 ],
    getZIndex: [ 4 ],
    getAllConversions: [ [ 1 ] ],
    isPaddingAvailable: [ 2 ],
    getRecommendedConversion: [ 1 ],
    setMaximized: [ 0, 2 ],
    getSpecificVisualElementTypeLabel: [ 7 ],
    isSelected: [ 2 ],
    refreshLayoutConstraints: [ 0 ]
}, , ,  ]);

var Dm = _m;

Dr("BIRD::Visual", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::PositionedModel" ], es, [ , {
    visualElement: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::HudController", [], es, [ , , , , {
    isOnlyFiltered: [ 2 ],
    getFilterArray: [ [ 7 ] ],
    getOnlyFilterArray: [ [ 7 ] ],
    isFiltered: [ 2 ]
}, {
    _create: [ 4, 1 ]
}, ,  ]);

var Lm = {
    HORIZONTAL: 0,
    VERTICAL: 1
};

Dr("BIRD::StackNavigationControl", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    verticalPosition: 4,
    buttonType: 4,
    horizontalPosition: 4,
    buttonDirection: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::VisualContainerElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::VisualElement" ], es, [ , {
    containerType: 4,
    stackNavigationControl: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Container", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::PositionedModel", "BIRD::PositionedModelOwner" ], es, [ , {
    visualContainer: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Tm = Dr("BIRD::VisualContainerElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController" ], es, [ , , , , {
    getModel: [ 1 ]
}, {
    _create: [ 4, 1 ]
}, ,  ]);

var Rm = Dr("BIRD::ContainerController", [ "BIRD::BIRDModelController", "BIRD::PositionedModelController", "BIRD::PositionedModelOwnerController" ], es, [ , , , , {
    getVisualContainerElementController: [ 1 ],
    getModel: [ 1 ],
    getStackNavigationStyleChain: [ 1 ],
    getContentOffset: [ 11 ],
    getContainerType: [ 4 ],
    getContainerBackgroundStyleChain: [ 1 ],
    getSpanStyleChain: [ 1, 1, 1 ],
    setContentOffset: [ 0, 11 ],
    hideTooltip: [ 0 ],
    isCompositeContainer: [ 2 ],
    getHorizontalTitlePadding: [ 5 ]
}, {
    _create: [ 4, 1, 1 ]
}, ,  ]);

var km = Dr("BIRD::VisualController", [ "BIRD::BIRDModelController", "BIRD::PositionedModelController" ], es, [ , , , , {
    getFooterHeight: [ 5 ],
    getModel: [ 1 ],
    getVisualElementPadding: [ 4 ],
    setFooterHeight: [ 0, 5 ],
    handleAccessibilityClick: [ 2 ],
    getCompositeParent: [ 1 ],
    disableAccessibilityForView: [ 0 ],
    getVisualElementController: [ 1 ],
    getHudController: [ 1 ],
    enableAccessibilityForView: [ 0 ]
}, {
    _create: [ 4, 1, 1 ]
}, ,  ]);

var Am = {
    NONE: 0,
    HORIZONTAL: 1,
    VERTICAL: 2,
    HORIZONTAL_AND_VERTICAL: 3
};

var Mm = Dr("BIRD::PositionedModelOwnerController", [ "BIRD::BIRDModelController", "BIRD::PositionedModelController" ], es, [ , , , {
    stackActiveVisualIndex: 4,
    relativeVerticalOffset: 1,
    slideOffset: 1,
    relativeHorizontalOffset: 1
}, {
    getVisualControllers: [ [ 1 ] ],
    getAllVisualControllers: [ [ 1 ] ],
    layout: [ 0, 13, 1 ],
    getOrderedVisualAndContainerControllers: [ [ 1 ] ],
    getModel: [ 1 ],
    getContainerControllers: [ [ 1 ] ],
    getSlidedContainerControllers: [ [ 1 ] ],
    getResponsiveLayoutScrollDirection: [ 4 ],
    getPromptContainerControllers: [ [ 1 ] ],
    getStackContainerControllers: [ [ 1 ] ],
    getAllViewVisualControllers: [ [ 1 ] ],
    getCompositeContainerControllers: [ [ 1 ] ]
}, , ,  ]);

var Nm = Dr("BIRD::MediaContainerController", [ "BIRD::BIRDModelController", "BIRD::PositionedModelController", "BIRD::PositionedModelOwnerController" ], es, [ , , , , {
    getModel: [ 1 ],
    hideTooltip: [ 0 ]
}, {
    _create: [ 4, 1, 1 ]
}, ,  ]);

Dr("BIRD::HeaderController", [ "BIRD::BIRDModelController" ], es, [ , , , , {
    getAllVisualControllers: [ [ 1 ] ],
    getModel: [ 1 ],
    getLocation: [ 4 ],
    getPromptBarStyleChain: [ 1 ],
    getMediaContainerController: [ 1 ]
}, {
    _create: [ 4, 1, 1 ]
}, ,  ]);

Dr("BIRD::BodyController", [ "BIRD::BIRDModelController" ], es, [ , , , , {
    getAllVisualControllers: [ [ 1 ] ],
    getModel: [ 1 ],
    getMediaContainerController: [ 1 ]
}, {
    _create: [ 4, 1, 1 ]
}, ,  ]);

var Om = Dr("BIRD::SectionController", [ "BIRD::BIRDModelController" ], es, [ , , , , {
    getAllVisualControllers: [ [ 1 ] ],
    getModel: [ 1 ],
    getSelectionControl: [ 1 ],
    areLinkFiltersActive: [ 2 ],
    isInfoWindow: [ 2 ],
    getKeyVisual: [ 1 ],
    getBodyController: [ 1 ],
    isContentComplete: [ 2 ],
    getAutoInteractionController: [ 1 ],
    getPagePadding: [ 1 ],
    getAllVisualElements: [ [ 1 ] ],
    areSectionFiltersActive: [ 2 ],
    getStyle: [ 1 ],
    isHiddenSection: [ 2 ],
    setLinkFiltersActive: [ 0, 2 ],
    getSectionIndex: [ 4 ],
    getHeaderController: [ 1 ]
}, {
    _create: [ 4, 1, 1 ]
}, ,  ]);

var Pm = Om;

Dr("BIRD::ExportVariable", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    name: 7,
    label: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Bm = {
    CSV: 0,
    TSV: 1,
    XLSX: 2
};

var zm = {
    FORMATTED: 0,
    RAW: 1
};

var Fm = Dr("BIRD::ExportDataController", [], es, [ {
    EXPORT_WARNING: 50012,
    EXPORT_READY: 50011,
    EXPORT_COMPLETED: 50010
}, , , {
    numberFormat: 4,
    startRow: 4,
    selectedVariables: [ 1 ],
    endRow: 4,
    fileFormat: 4
}, {
    getAvailableNumberOfRows: [ 4 ],
    isMultipleResultExport: [ 2 ],
    prepare: [ 0 ],
    getAvailableVariables: [ [ 1 ] ],
    submit: [ 0 ],
    reset: [ 0 ],
    getExportDetailController: [ 1 ]
}, , ,  ]);

Dr("BIRD::Presentation", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    mode: 7,
    label: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ResultColumn", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    encoding: 7,
    columnName: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ResultVariable", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataItem: 1,
    filterable: 2,
    xref: 7,
    usage: 4,
    column: 1,
    label: 7,
    varname: 7,
    presentations: [ 1 ],
    distinctCount: 4,
    sortOn: 4,
    rollupPurpose: 4,
    customSort: 1,
    regionMapProvider: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::DefinedSortLevel", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    sortDirection: 4,
    sortOn: 4,
    customSort: 1,
    uniqueLevelName: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::DefinedSortItem", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    sortDirection: 4,
    sortOn: 4,
    customSort: 1,
    variable: 1,
    definedSortLevels: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::BIRDDate", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    generated: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::BIRDData", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    isIndexed: 2,
    contentKey: 7,
    size: 4,
    availableRowCount: 4,
    grandTotal: 2,
    dataLayout: 4,
    format: 4,
    rowCount: 4,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::StringTable", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    contentKey: 7,
    size: 4,
    format: 4,
    rowCount: 4,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::MessageText", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::MessageParameter", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    varname: 7,
    key: 7,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ResultMessage", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    messageKey: 7,
    messageText: 1,
    messageLevel: 4,
    parameters: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::MapDataFile", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    contentKey: 7,
    file: 7,
    size: 4,
    mapId: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Result", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    date: 1,
    reason: 4,
    data: 1,
    columns: [ 1 ],
    type: 4,
    presentations: [ 1 ],
    diagnosticProperties: [ 1 ],
    tableDateModified: 7,
    sortRequiresReaggregation: 2,
    dataDefinition: 1,
    definedSortItems: [ 1 ],
    filterCompareString: 7,
    olapVariables: [ 1 ],
    supportsExportDetail: 2,
    consumerDataModel: 4,
    mapDataFiles: [ 1 ],
    variables: [ 1 ],
    sortLocale: 7,
    definedColumnSortItems: [ 1 ],
    resourceName: 7,
    label: 7,
    stringTable: 1,
    supportsCustomQuery: 2,
    messages: [ 1 ],
    dataLocale: 7,
    parameters: [ 1 ],
    dataLevel: 4,
    definedRowSortItems: [ 1 ],
    status: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::TemplateDefinition", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::TemplateLookup", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataItem: 1,
    rowVariable: 7,
    rowIndex: 4,
    row: 4,
    prompt: 1,
    element: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::TextTemplate", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    templateLookups: [ 1 ],
    templateDefinition: 1,
    type: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CompositeMember", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    role: 7,
    visualElement: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CompositeVisual", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    members: [ 1 ],
    name: 7,
    label: 7,
    type: 7
}, , , {
    getPrimaryMember: [ 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::View", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    pageSetup: 1,
    fixedBodyHeight: 1,
    representativeVisual: 1,
    fixedBodyWidth: 1,
    header: 1,
    sections: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::StyleTarget", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    attributeMapping: [ 1 ],
    targetClass: 7,
    indexedTargetClassPrefix: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::InteractionElementReference", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    styleTargets: [ 1 ],
    data: 1,
    purpose: 4,
    resultDefinition: 1,
    variable: 7,
    visualElement: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Interaction", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    name: 7,
    action: 1,
    dataStage: 4,
    source: 1,
    type: 4,
    derived: 2,
    target: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::MediaDefinitionResource", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    file: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ReportPart", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    file: 7,
    name: 7,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::DataSourceMapping", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    name: 7,
    source: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::LocString", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    attribute: 7,
    value: 7,
    target: 7,
    token: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::BIRDLocale", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    locStrings: [ 1 ],
    locale: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Localization", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    originalLocale: 7,
    locales: [ 1 ],
    file: 7,
    currentLocale: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::GroupingVariable", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    variable: 7,
    type: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ValueExpression", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::BIRDExpression" ], es, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::TestExpression", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::BIRDExpression" ], es, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Group", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    valueExpression: 1,
    testExpression: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Other", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    valueExpression: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Grouping", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    groupingVariables: [ 1 ],
    other: 1,
    name: 7,
    outputType: 4,
    groups: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Export", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    destination: 7,
    properties: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::HistoryVersion", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    lastNonce: 7,
    key: 7,
    lastDate: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Transform", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    date: 7,
    key: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Conversion", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    date: 7,
    startVersion: 7,
    transforms: [ 1 ],
    finalVersion: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Revision", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    editorVersion: 7,
    lastDate: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::Editor", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    revisions: [ 1 ],
    applicationName: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::History", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    conversions: [ 1 ],
    versions: [ 1 ],
    editors: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::DataStyleGroupElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    variables: 7,
    name: 7
}, , , , , ,  ]);

Dr("BIRD::ViewerCapabilities", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    viewerCustomizationThreshold: 4,
    hideInsights: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ExternalResource", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    name: 7
}, , , , , ,  ]);

Dr("BIRD::MetadataColumn", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    xref: 7,
    dataType: 4,
    format: 7,
    label: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::MetadataTable", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    columns: [ 1 ],
    tableModifiedTimeStamp: 7,
    resourceName: 7,
    dataLocale: 7,
    dataSourceList: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::MetadataSupplement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    tables: [ 1 ],
    version: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::SASReport", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    localization: 1,
    dataDefinitions: [ 1 ],
    mediaTargets: [ 1 ],
    mediaSchemes: [ 1 ],
    customSorts: [ 1 ],
    dataSourceMappings: [ 1 ],
    viewerCapabilities: 1,
    lastModifiedApplication: 7,
    mediaDefinitionResource: 1,
    nextUniqueNameIndex: 4,
    promptDefinitions: [ 1 ],
    textTemplates: [ 1 ],
    implicitInteractions: 7,
    visualElements: [ 1 ],
    interactions: [ 1 ],
    features: 7,
    xmlns: 1,
    view: 1,
    dateCreated: 7,
    createdVersion: 7,
    reportState: 1,
    results: [ 1 ],
    dataSources: [ 1 ],
    exportProperties: [ 1 ],
    modelDataSources: [ 1 ],
    namedStyleMap: 1,
    metadataSupplement: 1,
    summaryElement: 7,
    createdApplication: 7,
    dateModified: 7,
    resourceName: 7,
    label: 7,
    history: 1,
    dataStyleGroups: [ 1 ],
    compositeVisuals: [ 1 ],
    groupings: [ 1 ],
    createdLocale: 7,
    externalResources: [ 1 ],
    conditions: [ 1 ],
    actions: [ 1 ],
    reportParts: [ 1 ],
    properties: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var jm = Dr("BIRD::VisualElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController" ], es, [ {
    READY: 50049,
    REMOVED_OBJECTS: 50030,
    VIEWSET_MULTIPLE_REFERENCES: 50031,
    BUSY: 50047,
    TITLE_CHANGED: 50050,
    TRANSITION_STARTED: 50048
}, , , , {
    supportsInsightReport: [ 2 ],
    redispatchReadyEvent: [ 0 ],
    updateViewData: [ 0 ],
    getVisualElementTypeLabel: [ 7 ],
    isZoomOverlaySupported: [ 2 ],
    isReady: [ 2 ],
    updateWarningStatus: [ 0 ],
    getCurrentWarningEvent: [ 1 ],
    supportsFeature: [ 2, 4 ],
    getActions: [ [ 1 ] ],
    getAccessibilityLabel: [ 7 ],
    getVisualElementTypeInfo: [ 1 ],
    getSpanStyleChain: [ 1, 1, 1 ],
    getHudController: [ 1 ],
    getTipStyleChain: [ 1 ],
    getTitleAsHTML: [ 7 ],
    getStyle: [ 1 ],
    notifyContentComplete: [ 0 ],
    getExportDataController: [ 1 ],
    manuallyDispatchTooltipEventForPickResult: [ 2, 1, 1 ],
    getAccessibilityHint: [ 7 ],
    getCompositeMemberVisualElementControllers: [ [ 1 ] ],
    _getTitleStyleChain_oo: [ 1, 1, 1 ],
    getPreferredHeightForConstrainedWidth: [ 5, 5 ],
    isBusy: [ 2 ],
    getInsightReport: [ 1 ],
    getVisualElementModel: [ 1 ],
    getBackgroundStyleChain: [ 1 ],
    getSectionController: [ 1 ],
    getPrimaryVisualElementController: [ 1 ],
    getAboutInfo: [ 1 ],
    renderToSVG: [ 7, 4, 4, 2 ],
    getSupplementalVisualElementControllers: [ [ 1 ] ],
    getAllCompositeMemberVisualElementControllers: [ [ 1 ] ],
    getElementContainerStyleChain: [ 1 ],
    getInsightReportContent: [ 7 ],
    getScrollBarStyleChain: [ 1 ],
    supportsCompactFormat: [ 2 ],
    getVisualElementName: [ 7 ],
    getSVGString: [ 7, 4, 4, 2, 2, 2 ],
    _getTitleStyleChain_o: [ 1, 1 ],
    getDisplayString: [ 7 ],
    getAccessibilityValue: [ 7 ],
    updateSelectionsForNodeIds: [ 2, [ 1 ] ],
    hideTooltip: [ 0 ]
}, , [ "getTitleStyleChain" ] ]);

var Vm = jm;

Dr("BIRD::VisualElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    longDescription: 7,
    controller: 1,
    description: 7,
    label: 7,
    footnote: 1,
    styleClass: 7,
    selectionDisabled: 2,
    title: 1,
    applyDynamicBrushes: 4,
    applyDynamicFilters: 4,
    autoLabel: 2,
    editorProperties: [ 1 ],
    name: 7,
    action: 1,
    disabled: 2,
    conditions: [ 1 ]
}, , , {
    generateController: [ 1 ]
}, , ,  ]);

Dr("BIRD::CurrentValueSource", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    rangeProperty: 4,
    resultDefinition: 1,
    variable: 1,
    visualElement: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::PromptDefinition", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::DataItemOrPromptDefinition" ], es, [ , {
    measureVariable: 1,
    hidden: 2,
    isParameter: 2,
    defaultValue: 1,
    maxVariable: 1,
    dataType: 4,
    minVariable: 1,
    format: 7,
    labelVariable: 1,
    currentValueSource: 1,
    valueVariable: 1,
    labelFormatted: 2,
    dataDefinition: 1,
    valueFormatted: 2,
    constraint: 1,
    multiValued: 2,
    isValueFixed: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::DataParameter", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataType: 4,
    format: 7,
    label: 7,
    prompt: 1,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::LayoutState", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , , , , , , ,  ]);

Dr("BIRD::SectionState", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    section: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ViewState", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    layoutStates: [ 1 ],
    currentSection: 1,
    sectionStates: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ExportRequest", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    presentation: 7,
    hideAggregationLabels: 2,
    variables: 7,
    startRow: 4,
    resultDefinition: 7,
    totalsPlacement: 4,
    endRow: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ExportRequests", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    numberFormat: 4,
    exportRequests: [ 1 ],
    fileFormat: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::QueryRequestParameter", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    type: 4,
    prompt: 1,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::QueryRequestExpression", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::BIRDExpression" ], es, [ , {
    dataStage: 4,
    type: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::QueryRequest", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    rowTotals: 2,
    data: 7,
    argumentOverrides: [ 1 ],
    expressions: [ 1 ],
    columnTotals: 2,
    columnSubtotals: 2,
    sampleData: 2,
    forceDetail: 2,
    rowSubtotals: 2,
    indexStrings: 2,
    parameters: [ 1 ],
    dataLevel: 4,
    forceDetailResultDefinition: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::QueryState", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataDefinition: 1,
    steps: [ 1 ],
    sorts: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::DataState", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    queryStates: [ 1 ],
    exportRequests: 1,
    queryRequests: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::BIRDSelection", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::BIRDExpression" ], es, [ , {
    dataDefinition: 1,
    resultDefinition: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::VisualElementState", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    selections: [ 1 ],
    element: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::SASReportState", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    date: 7,
    xmlns: 1,
    createdVersion: 7,
    parameterStates: [ 1 ],
    viewState: 1,
    dataState: 1,
    visualElementStates: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Hm = Dr("BIRD::InteractionEvent", [ "commons::PortableEvent" ], Ka, [ {
    FILTER: 50020,
    ACTION: 50019,
    POP_ACTION: 50018
}, , , , {
    getResolvedURL: [ 7 ],
    getSourceSectionIndex: [ 4 ],
    getSourceSection: [ 1 ],
    getSourceSectionName: [ 7 ],
    getSourceController: [ 1 ],
    getFilterExpressionDescriptions: [ [ 7 ], 1 ],
    getAction: [ 1 ],
    getDataResourceNames: [ [ 7 ] ],
    getSourceSectionLabel: [ 7 ]
}, , ,  ]);

Dr("BIRD::NavigationContext", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    initialSectionName: 7,
    reportNavigation: 1,
    initialSectionIndex: 4,
    sectionNavigation: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Um = {
    REPORT: 0,
    DATA: 1,
    IMAGE: 2,
    XML: 3,
    CSS: 4,
    STP: 5,
    PACKAGE: 6,
    REQUERY: 7
};

var Gm = Dr("BIRD::CachedReportURL", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    contentKey: 7,
    name: 7,
    serverFile: 7,
    type: 4,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Km = Dr("BIRD::ReportParameterValue", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    values: [ 7 ],
    label: 7,
    value: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Wm = Km;

Dr("BIRD::BIRDPortableViewFactory", [], Ka, [ , , , , {
    createBIRDView: [ 1, 1 ]
}, {
    _create: [ 4, 2 ]
}, ,  ]);

var $m = Dr("BIRD::MaxRowsLimit", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    lookup: 4,
    limit: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Ym = $m;

var qm = {
    LAZY: 0,
    EAGER: 1
};

var Xm = qm;

var Zm = Dr("BIRD::ViewSet", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    included: [ 7 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Jm = Zm;

Dr("BIRD::SASReportConfiguration", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    useReadOnlyMode: 2,
    loadDataForCurrentSectionOnly: 2,
    birdPortableViewFactory: 1,
    generateReportResponseXMLFileName: 7,
    interactive: 2,
    allowFirstTimeDataRequery: 2,
    imageCache: 1,
    sectionHeaderHeight: 3,
    useSingleThreadMode: 2,
    enableInteractiveData: 2,
    cachedReportURLs: [ 1 ],
    windowSize: 4,
    enableStackContainerOptimization: 2,
    maxRowsLimits: [ 1 ],
    enableUndoRedo: 2,
    metaDataQueryMode: 4,
    doVisualStyleOverride: 2,
    rejectInvalidReportXML: 2,
    fullyQualifiedPathToBIRDReportDirectory: 7,
    useOfflineMode: 2,
    transportURL: 7,
    reportStateFileName: 7,
    parameterValues: [ 1 ],
    stateDirectory: 7,
    contentKey: 7,
    enableWebContent: 2,
    mapConnectionInfo: 1,
    reportUri: 7,
    offlinePackageUrl: 7,
    viewSet: 1,
    comparisonEpsilon: 6,
    restoreControllerState: 2,
    useGTLGridView: 2,
    useDefaultGTLDataTips: 2,
    reportFileName: 7,
    reportCSSOverideFile: 7,
    navigationContext: 1,
    maximumNumberOfSectionsInMemory: 4,
    restoreUserState: 2,
    getReportResponseXMLFileName: 7,
    showEmptyRowsAndColumns: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::RendererModel", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    name: 7
}, , , {
    createBaseView: [ 1 ]
}, , ,  ]);

Dr("gtl::MapProjection", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    yColumnName: 7,
    proj4Description: 7,
    xColumnName: 7,
    spatialReferenceCode: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::DataProvider", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    mapProjection: 1
}, , , {
    getName: [ 7 ]
}, , ,  ]);

Dr("gtl::RoleMetadata", [], es, [ , , , , {
    getAllRoles: [ [ 1 ] ],
    getXAxesRoles: [ [ 1 ] ],
    getXAxisRoles: [ [ 1 ] ],
    getY2AxisRoles: [ [ 1 ] ],
    getYAxesRoles: [ [ 1 ] ],
    getXAxisRoleNames: [ [ 7 ] ],
    getYAxisRoleNames: [ [ 7 ] ],
    getX2AxisRoles: [ [ 1 ] ],
    getYAxisRoles: [ [ 1 ] ],
    getDiscreteLegendRoles: [ [ 1 ] ]
}, , ,  ]);

Dr("gtl::DataRendererModel", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel" ], es, [ , {
    dataProvider: 1
}, , , {
    getRoleMetadata: [ 1 ],
    getAllDataProviders: [ [ 1 ] ]
}, , ,  ]);

Dr("gtl::AbstractAnnotation", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel" ], es, [ , {
    discreteOffset: 5,
    yAxis: 4,
    xAxis: 4,
    drawSpace: 4,
    transparency: 5,
    url: 7,
    layer: 4
}, , , , , ,  ]);

Dr("gtl::AutoAlignPositions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    positions: [ 4 ]
}, , , , {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    getValueFromString: [ 1, 7, 1 ],
    createNONE: [ 1 ]
}, , [ "_create" ] ]);

Dr("gtl::AttributesModel", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , , , , {
    copyFromBundle: [ 0, 1 ],
    setStyleElement: [ 0, 4 ],
    setStyleElementChain: [ 0, [ 4 ] ]
}, , ,  ]);

Dr("gtl::FillAttributes", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::AttributesModel" ], es, [ , {
    fillColor: 10,
    fillGradientNeutralColor: 10,
    fillGradientStartColor: 10,
    fillType: 4,
    transparency: 5,
    fillFile: 7,
    fillImageFitStyle: 4,
    fillGradientTransparency: 5,
    fillGradientEndColor: 10
}, , , {
    copyFromBundle: [ 0, 1 ],
    asFillAttributesInterface: [ 1 ],
    setStyle: [ 0, 1 ],
    setStyleElement: [ 0, 4 ],
    copyFrom: [ 0, 1 ],
    setStyleElementChain: [ 0, [ 4 ] ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::LineAttributes", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::AttributesModel" ], es, [ , {
    lineStyle: 3,
    lineThickness: 1,
    transparency: 5,
    lineColor: 10,
    lineInterpolation: 4
}, , , {
    copyFromBundle: [ 0, 1 ],
    setStyle: [ 0, 1 ],
    asLineAttributesInterface: [ 1 ],
    setStyleElement: [ 0, 4 ],
    setStyleElementChain: [ 0, [ 4 ] ],
    copyFrom: [ 0, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var Qm = Dr("gtl::Pad", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    top: 1,
    left: 1,
    bottom: 1,
    right: 1
}, , , , {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    _create_nnnn: [ 4, 5, 5, 5, 5 ],
    _create_oooo: [ 4, 1, 1, 1, 1 ],
    _create_n: [ 4, 5 ]
}, , [ "_create" ] ]);

Dr("gtl::TextAttributes", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::AttributesModel" ], es, [ , {
    altTextColor: 10,
    fontFamily: 7,
    transparency: 5,
    fontSize: 1,
    fontStyle: 4,
    textColor: 10,
    fontWeight: 4
}, , , {
    copyFromBundle: [ 0, 1 ],
    asTextAttributesInterface: [ 1 ],
    setStyle: [ 0, 1 ],
    setStyleElement: [ 0, 4 ],
    setStyleElementChain: [ 0, [ 4 ] ],
    copyFrom: [ 0, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::Legend", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel" ], es, [ , {
    border: 2,
    titleAttributes: 1,
    opaque: 2,
    hAlign: 4,
    outerPad: 1,
    autoAlign: 1,
    backgroundAttributes: 1,
    title: 7,
    vAlign: 4,
    pad: 1,
    valueAttributes: 1,
    borderAttributes: 1,
    location: 4
}, , , , , ,  ]);

Dr("gtl::KeyFrameValueOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    padding: 1,
    textAttributes: 1,
    fitWidth: 1,
    useFitWidth: 2
}, , {
    hAlign: 4,
    vAlign: 4
}, {
    setStyle: [ 0, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::EntryTextItem", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel" ], es, [ , {
    keyFrameValueOptions: 1,
    textAttributes: 1,
    hAlign: 4,
    scriptType: 4,
    source: 4,
    text: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::AbstractEntry", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel" ], es, [ , {
    border: 2,
    rotate: 4,
    textItems: [ 1 ],
    opaque: 2,
    hAlign: 4,
    outerPadType: 4,
    outerPad: 1,
    backgroundAttributes: 1,
    autoAlign: 1,
    vAlign: 4,
    textFitPolicy: 4,
    pad: 1,
    textAttributes: 1,
    shortText: 7,
    borderAttributes: 1
}, , , , , ,  ]);

Dr("gtl::Entry", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::AbstractEntry" ], es, [ , {
    layer: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::GraphSkinModel", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::AttributesModel" ], es, [ , {
    blendEndColorFactor: 5,
    blendStartColorFactor: 5,
    glowBlur: 3,
    dataSkin: 4,
    blendMode: 4,
    glowColor: 10,
    kpiSkin: 4,
    glowColorFactor: 5,
    glowThickness: 1,
    blendStartColor: 10,
    blendEndColor: 10
}, , , {
    copyFromBundle: [ 0, 1 ],
    asGraphSkinModelInterface: [ 1 ],
    setStyle: [ 0, 1 ],
    setStyleElement: [ 0, 4 ],
    setStyleElementChain: [ 0, [ 4 ] ],
    copyFrom: [ 0, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::CompactLabelFormatOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    scaleType: 4,
    precision: 3,
    scale: 3,
    precisionType: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::DataVisualization", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel" ], es, [ {
    VISUAL_NOT_RENDERED: 30010
}, {
    showMissingValuesInTips: 2,
    graphSkin: 1,
    compactLabelFormats: 2,
    auxiliary: [ 1 ],
    selectable: 2,
    _stmt: 7,
    description: 7,
    tip: [ 1 ],
    compactLabelFormatOptions: 1,
    tipListPolicy: 4,
    url: 1,
    dataTransparency: 5
}, , , , , ,  ]);

Dr("gtl::PlotRole", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::Role" ], es, [ , , , , , {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    _create_o: [ 4, 1 ]
}, , [ "_create" ] ]);

Dr("gtl::ColorModel", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::AttributesModel" ], es, [ , {
    fillGradientNeutralColor: 10,
    fillGradientStartColor: 10,
    fillGradientEndColor: 10,
    colorList: [ 10 ]
}, , , {
    copyFromBundle: [ 0, 1 ],
    getColors: [ [ 10 ] ],
    setStyle: [ 0, 1 ],
    setStyleElement: [ 0, 4 ],
    setStyleElementChain: [ 0, [ 4 ] ]
}, {
    _create: [ 4 ]
}, ,  ]);

var ep = Dr("gtl::AnalysisRole", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::Role" ], es, [ , , , , {
    setStyle: [ 0, 1 ]
}, {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    _create_o: [ 4, 1 ],
    getSharedFrequencyRole: [ 1 ]
}, , [ "_create" ] ]);

Dr("gtl::BaseLayoutOverlay", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::Layout" ], es, [ , {
    cycleAttributes: 2,
    dataLabelPositions: 7,
    cycleColorResponses: 2,
    dataLabelThinPolicy: 4
}, , , , , ,  ]);

Dr("gtl::AbstractOverlay", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::DataVisualization" ], es, [ , {
    visible: 2,
    legendLabel: 7,
    reverseColorModel: 2
}, , , , , ,  ]);

Dr("gtl::ContributeOffsets", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    yMin: 2,
    yMax: 2,
    xMax: 2,
    xMin: 2
}, , , , {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    getValueFromString: [ 1, 7, 1 ],
    createALL: [ 1 ],
    createNONE: [ 1 ]
}, , [ "_create" ] ]);

Dr("gtl::Overlay", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::DataVisualization", "gtl::AbstractOverlay" ], es, [ , {
    yAxis: 4,
    xAxis: 4,
    contributeOffsets: 1,
    primary: 2
}, , , , , ,  ]);

var tp = Dr("gtl::AxisDisplay", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    tickvalues: 2,
    ticks: 2,
    axisgui: 2,
    line: 2,
    label: 2
}, , , {
    any: [ 2 ]
}, {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    getValueFromString: [ 1, 7, 1 ],
    createSTANDARD: [ 1 ],
    createALL: [ 1 ],
    createNONE: [ 1 ]
}, , [ "_create" ] ]);

var op = {
    AUTO_ON: 0,
    AUTO_OFF: 1,
    ON: 2,
    OFF: 3
};

Dr("gtl::DiscreteAxisOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    maxTickSpacing: 1,
    tickType: 4,
    colorBands: 4,
    tickDisplayList: [ 7 ],
    tickValueListPolicy: 4,
    tickValueSplitCharDrop: 2,
    tickValueSplitJustify: 4,
    tickValueAppearance: 4,
    sortOrder: 4,
    colorBandsAttributes: 1,
    tickSpacing: 1,
    tickValueFitPolicy: 4,
    tickValueList: [ 7 ],
    tickValueSplitChar: 7,
    tickValueRotation: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::NumericAxisOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    thresholdMin: 6,
    minorGridAttributes: 1,
    tickValuePriority: 2,
    minorTicks: 2,
    minorGrid: 2,
    tickValueList: [ 6 ],
    thresholdMax: 6,
    viewMax: 6,
    viewMin: 6
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::AxisTickValueFormatOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    maxDecimals: 4,
    format: 7,
    useDataFormat: 2,
    preferredDecimals: 4,
    extractScale: 2,
    maxWidth: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::AxisTickValueSequence", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    start: 6,
    increment: 6,
    end: 6
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::RangeBound", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    inclusive: 2,
    type: 4,
    value: 6
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::AxisIncludeRangeEntry", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    minValue: 1,
    maxValue: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::LinearAxisOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::NumericAxisOptions" ], es, [ , {
    tickValueSequence: 1,
    tickValueFormat: 1,
    centerOn: 6,
    origin: 6,
    tickDisplayList: [ 7 ],
    includeRanges: [ 1 ],
    integer: 2,
    tickValueFitPolicy: 4,
    minorTickCount: 4,
    tickValueRotation: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::LogarithmicAxisOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::NumericAxisOptions" ], es, [ , {
    logBase: 4,
    tickValueFormat: 1,
    valuesType: 4,
    tickmarkIntervalStyle: 4,
    minorTickCount: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::LogModulusAxisOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::NumericAxisOptions" ], es, [ , {
    logBase: 4,
    tickValueFormat: 7,
    minorTickCount: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::TimeAxisOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::NumericAxisOptions" ], es, [ , {
    tickValueFormat: 7,
    minorTickInterval: 4,
    includeRanges: [ 1 ],
    splitTickValue: 2,
    interval: 4,
    tickValueFitPolicy: 4,
    intervalMultiplier: 4,
    tickValueRotation: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::AbstractSpecializedAxis", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel" ], es, [ , , , , , , ,  ]);

Dr("gtl::AxisOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel" ], es, [ , {
    discreteOptions: 1,
    gridDisplay: 4,
    specializedAxis: 1,
    logModulusOptions: 1,
    lineExtentType: 4,
    offsetMinType: 4,
    type: 4,
    lineExtent: 6,
    labelSplitChar: 7,
    tickStyle: 4,
    gridLayer: 4,
    labelPosition: 4,
    shortLabel: 7,
    labelSplitJustify: 4,
    offsetMin: 5,
    confineMinMaxTickValues: 2,
    labelSplitCharDrop: 2,
    displaySecondary: 1,
    display: 1,
    tickValueAttributes: 1,
    timeOptions: 1,
    labelFitPolicy: 4,
    label: 7,
    reverse: 2,
    linearOptions: 1,
    offsetMaxType: 4,
    offsetMax: 5,
    lineAttributes: 1,
    stackedLabels: 2,
    labelAttributes: 1,
    gridAttributes: 1,
    logOptions: 1
}, , , {
    getResolvedDisplay: [ 1, 4 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::WallDisplay", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    outline: 2,
    isStandard: 2,
    fill: 2
}, , , , {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    getValueFromString: [ 1, 7, 1 ],
    createSTANDARD: [ 1 ],
    createALL: [ 1 ],
    createNONE: [ 1 ]
}, , [ "_create" ] ]);

Dr("gtl::InnerMargin", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel" ], es, [ , {
    gutter: 1,
    pad: 1,
    opaque: 2,
    separatorAttributes: 1,
    overlays: [ 1 ],
    align: 4,
    backgroundAttributes: 1,
    separator: 2
}, , , {
    createRoleMetadata: [ 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var np = Dr("gtl::LayoutOverlay", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::Layout", "gtl::BaseLayoutOverlay" ], es, [ , {
    wallDisplay: 1,
    alignHorizontalAxisTicks: 2,
    topAxisHeightMax: 5,
    yAxisOptions: 1,
    aspectRatioType: 4,
    aspectRatio: 5,
    rightAxisWidthMax: 5,
    wallAttributes: 1,
    x2AxisOptions: 1,
    y2AxisOptions: 1,
    useDefaultZoomController: 2,
    leftAxisWidthMax: 5,
    overlays: [ 1 ],
    bottomAxisHeightMax: 5,
    alignVerticalAxisTicks: 2,
    innerMargins: [ 1 ],
    xAxisOptions: 1
}, , , {
    needsX2Axis: [ 2 ],
    needsXAxis: [ 2 ],
    needsY2Axis: [ 2 ],
    needsYAxis: [ 2 ],
    getResolvedWallDisplay: [ 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::MatrixEllipseParm", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::DataVisualization" ], es, [ , {
    semiMinor: 1,
    yOrigin: 1,
    semiMajor: 1,
    xOrigin: 1,
    slope: 1,
    clip: 2,
    cellNumber: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var ap = Dr("gtl::ClassificationRole", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::Role" ], es, [ , , , , , {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    _create_o: [ 4, 1 ]
}, , [ "_create" ] ]);

Dr("gtl::Inset", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel" ], es, [ , {
    insetVars: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::InsetOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel" ], es, [ , {
    border: 2,
    titleAttributes: 1,
    backgroundColor: 10,
    textAttributes: 1,
    hAlign: 4,
    opaque: 2,
    dataScheme: 4,
    contentDisplay: 4,
    autoAlign: 1,
    title: 7,
    separator: 7,
    vAlign: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::MarkerAttributes", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::AttributesModel" ], es, [ , {
    markerSize: 1,
    markerColor: 10,
    markerSymbol: 4,
    transparency: 5
}, , , {
    copyFromBundle: [ 0, 1 ],
    setStyle: [ 0, 1 ],
    asMarkerAttributesInterface: [ 1 ],
    setStyleElement: [ 0, 4 ],
    setStyleElementChain: [ 0, [ 4 ] ],
    copyFrom: [ 0, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::ScatterPlotMatrix", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::DataVisualization" ], es, [ , {
    groupOrder: 4,
    labelStrip: 2,
    markerAttributes: 1,
    rowVars: [ 1 ],
    wallDisplay: 1,
    dataLabelSplitChar: 7,
    includeMissingGroup: 2,
    wallColor: 10,
    colorResponse: 1,
    dataLabelSplit: 2,
    dataLabelAttributes: 1,
    colorModel: 1,
    group: 1,
    dataLabelSplitJustify: 4,
    columnVars: [ 1 ],
    markerCharacter: 1,
    inset: 1,
    insetOptions: 1,
    dataLabel: 1,
    start: 4,
    index: 1,
    markerCharacterAttributes: 1,
    ellipses: [ 1 ],
    markerCharacterPosition: 4,
    matrixType: 4,
    reverseColorModel: 2,
    dataLabelPosition: 4,
    dataLabelSplitCharDrop: 2,
    diagonal: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::GTLContent", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    layout: 1,
    scatterPlotMatrix: 1,
    entry: 1,
    legend: 1
}, , , , {
    _create_v: [ 4 ],
    _create_o: [ 4, 1 ]
}, , [ "_create" ] ]);

Dr("gtl::Layout", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel" ], es, [ , {
    border: 2,
    hAlign: 4,
    opaque: 2,
    annotations: [ 1 ],
    outerPad: 1,
    autoAlign: 1,
    backgroundAttributes: 1,
    vAlign: 4,
    pad: 1,
    width: 1,
    borderAttributes: 1,
    supplementalContents: [ 1 ],
    height: 1
}, , , {
    needsX2Axis: [ 2 ],
    needsXAxis: [ 2 ],
    needsY2Axis: [ 2 ],
    needsYAxis: [ 2 ]
}, , ,  ]);

Dr("gtl::Dynamic", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    name: 7,
    description: 7,
    required: 2
}, , , , , ,  ]);

Dr("gtl::DynamicReference", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    propertyName: 7,
    model: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::DynamicReferenceContainer", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::Dynamic" ], es, [ , {
    references: [ 1 ]
}, , , {
    addReference: [ 0, 1, 7 ]
}, , ,  ]);

Dr("gtl::DynamicRole", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::Dynamic", "gtl::DynamicReferenceContainer" ], es, [ , {
    dataField: [ 7 ],
    enablePatternMatching: 2,
    dataProvider: 1,
    assignedType: 4,
    type: 4,
    dataFieldDefault: [ 7 ],
    dataFieldMultiplesAllowed: 2
}, , , {
    getAllReferencedDataRendererModels: [ [ 1 ] ],
    isDataFieldAddAllowed: [ 2 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::DynamicString", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::Dynamic", "gtl::DynamicReferenceContainer" ], es, [ , {
    defaultValue: 7,
    value: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::RangeEntryAttributes", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    markerAttributes: 1,
    rangeColorModel: 1,
    rangeAltColorModel: 1,
    rangeColor: 10,
    kpiColor: 10,
    rangeAltColor: 10,
    label: 7,
    kpiActiveColor: 10
}, , , {
    setStyle: [ 0, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::RangeAttributesMapEntry", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    minValue: 1,
    minLabel: 7,
    maxValue: 1,
    attributes: 1,
    label: 7,
    type: 4,
    maxLabel: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::RangeAttributesMap", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::AbstractAttributesMap" ], es, [ , {
    entries: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::DynamicRangeAttributesMap", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::Dynamic", "gtl::DynamicReferenceContainer" ], es, [ , {
    rangeAttributesMapNameDefault: 7,
    rangeAttributesMap: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::DynamicGroup", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    dynamics: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::Dynamics", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    dynamicRoles: [ 1 ],
    dynamicStrings: [ 1 ],
    groups: [ 1 ],
    dynamicRangeAttributesMaps: [ 1 ]
}, , , {
    getDynamicForName: [ 1, 7 ],
    getDynamicStringForName: [ 1, 7 ],
    getDynamicRangeAttributesMapForName: [ 1, 7 ],
    getDynamicRoleForName: [ 1, 7 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::DataNameToDataRendererModels", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    dataName: 7,
    dataRendererModels: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::GraphMetadata", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    dynamics: 1,
    dataNameToDataRendererModels: [ 1 ]
}, , , {
    getDataName: [ 7, 1 ],
    getDataRendererModels: [ 1, 7 ],
    addDataNameDataRendererModelPair: [ 0, 7, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::EntryTitle", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::AbstractEntry" ], es, [ , {
    hAlignCenter: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::EntryFootnote", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::AbstractEntry" ], es, [ , {
    hAlignCenter: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var rp = {
    OFF: 0,
    AUTO: 1
};

var sp = Dr("gtl::LayoutGlobalLegend", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel" ], es, [ , {
    border: 2,
    titleAttributes: 1,
    hAlign: 4,
    visible: 4,
    outerPad: 1,
    title: 7,
    type: 4,
    backgroundAttributes: 1,
    vAlign: 4,
    gutter: 1,
    weightType: 4,
    pad: 1,
    legends: [ 1 ],
    legendTitlePosition: 4,
    borderAttributes: 1,
    legendPosition: 4,
    allowCollapsed: 2,
    allowCollapsedInteraction: 2,
    weightsList: [ 6 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::SimulatedAnnealingWeight", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    name: 4,
    value: 5
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::SimulatedAnnealingPlacementOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    maxIterations: 4,
    seed: 4,
    weights: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::SymbolTransformable", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    rotate: 5,
    symbolId: 3,
    vOffset: 5,
    name: 7,
    scale: 5,
    hOffset: 5
}, , , , , ,  ]);

Dr("gtl::SymbolImage", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::SymbolTransformable" ], es, [ , {
    image: 7,
    colorBlend: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::SymbolChar", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::SymbolTransformable" ], es, [ , {
    character: 7,
    textAttributes: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::FillOutlineDisplay", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    outline: 2,
    fill: 2
}, , , {
    set: [ 0, 2, 2 ],
    setALL: [ 0 ]
}, {
    _create: [ 4 ],
    getValueFromString: [ 1, 7, 1, 1 ]
}, ,  ]);

Dr("gtl::LegendItemDisplay", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::FillOutlineDisplay" ], es, [ , , , , , {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    getValueFromString: [ 1, 7, 1 ],
    createSTANDARD: [ 1 ]
}, , [ "_create" ] ]);

Dr("gtl::LegendItem", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::DataVisualization" ], es, [ , {
    fillShape: 4,
    fillAttributes: 1,
    markerAttributes: 1,
    outlineAttributes: 1,
    textAttributes: 1,
    fillDisplay: 1,
    lineAttributes: 1,
    labelAttributes: 1,
    label: 7,
    text: 7,
    type: 4,
    filledOutlinedMarker: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::LegendTextItems", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::DataVisualization" ], es, [ , {
    textAttributes: 1,
    labelAttributes: 1,
    text: 1,
    label: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::DataAnimationController", [], Ka, [ , , , , {
    play: [ 0 ],
    getOrderedKeyframeValues: [ [ 7 ] ],
    setCurrentKeyframeValue: [ 0, 7 ],
    stepForward: [ 0 ],
    stepReverse: [ 0 ],
    pause: [ 0 ]
}, , ,  ]);

Dr("gtl::DataAnimation", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel" ], es, [ , {
    initialKeyframe: 4,
    repeatEnabled: 2,
    playDirectionForward: 2,
    masterDataAnimation: 1,
    sortOrder: 4,
    keyframesPerSecond: 6,
    slaveKeyframeOffset: 3,
    keyframe: 1,
    displayKeyframeValue: 2
}, , , {
    getController: [ 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var ip = {
    NONE: 0,
    SINGLE: 1,
    MULTIPLE: 2
};

Dr("gtl::LayoutViewportState", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , , , , , , ,  ]);

Dr("gtl::DiscreteSort", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    sortDirection: 4,
    sortByVariable: 7,
    usage: 4,
    customSortValues: [ 7 ],
    variable: 7,
    resolveDirection: 2
}, , , {
    getPrimarySortVariable: [ 7 ],
    computeSortOrder: [ 4 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::GTLGraphState", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    dataAnimationKeyframeValue: 7,
    rendererStates: [ 1 ],
    layoutViewports: [ 1 ],
    discreteSorts: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::GTLSortState", [], es, [ {
    SORT_STATE_CHANGED: 30032
}, , , , {
    addDiscreteSort: [ 0, 1 ],
    removeAllDiscreteSorts: [ 0 ],
    getDiscreteSorts: [ [ 1 ] ],
    removeDiscreteSort: [ 0, 1 ],
    isEmpty: [ 2 ],
    _findDiscreteSort_on: [ 1, 1, 4 ],
    _findDiscreteSort_o: [ 1, 1 ]
}, {
    computeOrderedCustomSortValues: [ [ 7 ], 7, 7, 1 ]
}, [ "findDiscreteSort" ] ]);

Dr("gtl::DataStyleGroup", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    name: 7,
    dataFields: [ 7 ]
}, , , {
    containsDataField: [ 2, 7 ],
    containsRole: [ 2, 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::DataStyleCoordinator", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , , , , {
    getDataStyleGroup: [ 1, 7 ],
    addDataStyleGroup: [ 0, 1 ],
    removeDataStyleGroup: [ 0, 1 ],
    getDataStyleGroups: [ [ 1 ] ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::OverplottingPolicy", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    reduceMarkerSize: 2,
    reduceLineThickness: 2
}, , , {
    set: [ 0, 2, 2 ]
}, {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    getValueFromString: [ 1, 7, 1 ],
    createALL: [ 1 ],
    createNONE: [ 1 ]
}, , [ "_create" ] ]);

Dr("gtl::OverplottingOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    maxMarkerOverlapRatio: 5
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var lp = Dr("gtl::Graph", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::Layout" ], es, [ , {
    discreteAxisOffsetReference: 4,
    labelingLimit: 4,
    simulatedAnnealingLabelPlacementOptions: 1,
    overplottingOptions: 1,
    designWidth: 1,
    discreteMax: 4,
    legendItems: [ 1 ],
    missingValueDisplay: 4,
    emphasizedModels: [ 1 ],
    gapScalingFactor: 5,
    dataSymbols: [ 7 ],
    casData: 2,
    suppressClientMsg: 2,
    nXYBinsMax: 4,
    totalCellMax: 4,
    nBinsMax: 4,
    showTimeTips: 2,
    showDefaultTooltips: 2,
    dataSkinMax: 4,
    localizationContext: 1,
    imagemapLimit: 4,
    dataStyleCoordinator: 1,
    axisLineExtent: 6,
    sparkThreshold: 1,
    animation: 1,
    axisBreakType: 4,
    sortState: 1,
    meta: 1,
    drawSpace: 4,
    showReferenceLine: 2,
    dataLinePatterns: [ 7 ],
    dataColors: [ 7 ],
    renderAsStaticOutput: 2,
    layoutGlobalLegend: 1,
    legendTextItems: [ 1 ],
    selectionMode: 4,
    renderer: 7,
    initialGraphState: 1,
    imageSet: 1,
    showBrush: 2,
    scaleMarkers: 2,
    groupMax: 4,
    dataFillPatterns: [ 7 ],
    axisBreakSymbol: 4,
    displayOptionPolicy: 4,
    symbolImages: [ 1 ],
    panelCellMax: 4,
    drillTarget: 7,
    designHeight: 1,
    maxLegendArea: 5,
    graphSkin: 1,
    overplottingPolicy: 1,
    titles: [ 1 ],
    symbolChars: [ 1 ],
    dataSizeScalingFactor: 5,
    labelPlacement: 4,
    layout: 1,
    includeMissingDiscrete: 2,
    displayRule: 1,
    attributePriority: 4,
    axisLineExtentType: 4,
    dataContrastColors: [ 7 ],
    footnotes: [ 1 ],
    showAnimationControls: 2
}, , , {
    isOverviewSupported: [ 2 ],
    isZoomOverlaySupported: [ 2 ],
    setStyle: [ 0, 1 ],
    onSizeScalingFactorsChanged: [ 0, 1 ],
    _onStyleChange: [ 0, 1 ],
    getLinearScalingFactor: [ 5 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::DataItemInfo", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    dataItem: 1,
    aggregationLabel: 7,
    formatLabel: 7,
    formatName: 7,
    aggregation: 4,
    assigned: 2,
    label: 7,
    type: 4,
    filterType: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::DisplayRuleInfo", [], Ka, [ , , , , {
    getLevel: [ 7 ],
    getExpression: [ 7 ],
    getName: [ 7 ],
    getType: [ 4 ],
    getScopeDescription: [ 7 ],
    getGaugeGraph: [ 1 ],
    getGroup: [ 7 ],
    getDataItemInfo: [ 1 ],
    getStyleAttributes: [ 1 ],
    getIndicatorDisplayType: [ 4 ],
    getImage: [ 1 ],
    getScope: [ 4 ]
}, , ,  ]);

Dr("BIRD::NavigationTarget", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    section: 1,
    positionedModel: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::ChangeController", [], es, [ , , , , {
    canUndo: [ 2 ],
    undo: [ 0 ],
    getUndoNavigationTarget: [ 1 ],
    redo: [ 0 ],
    canRedo: [ 2 ],
    getRedoNavigationTarget: [ 1 ]
}, , ,  ]);

var cp = Dr("BIRD::ReportController", [ "BIRD::BIRDModelController" ], es, [ {
    CURRENT_SECTION_CHANGED: 50036,
    INVALID_REPORT: 50018,
    INVALID_REPORT_STATE: 50019,
    REPORT_STATE_READY: 50039,
    INVALID_TEXT: 50020,
    REPORT_INITIALIZED: 50040,
    SECTION_LINKING_CLEAR: 50037,
    SECTION_CONTROLLERS_CHANGED: 50038
}, , , {
    windowSize: 4,
    currentSectionIndex: 4,
    reportState: 1,
    maximumNumberOfActiveSections: 4
}, {
    updateReportState: [ 0 ],
    saveCurrentSectionIndex: [ 0 ],
    supportsFeature: [ 2, 4 ],
    setReportParameterValue: [ 0, 1 ],
    getNamedStyleMap: [ 1 ],
    setCurrentSelectedController: [ 0, 1 ],
    isHiddenSection: [ 2, 7 ],
    addSectionLinkInfo: [ 0, 1 ],
    removeLatestSectionLinkInfos: [ 0, 4 ],
    isStateInvalidatedDueToReportChange: [ 2 ],
    getSASReportConfiguration: [ 1 ],
    getInitialReportParameterValues: [ [ 1 ] ],
    saveUserState: [ 0 ],
    getVisibleSections: [ [ 1 ] ],
    getDisplayRuleInfos: [ [ 1 ] ],
    getFullyQualifiedPathToStateDirectory: [ 7 ],
    setNarrowScreenLayout: [ 0 ],
    getCurrentSectionLinks: [ [ 1 ] ],
    getModel: [ 1 ],
    getFullyQualifiedPathToCurrentSectionIndexStateFile: [ 7 ],
    getVisualElementControllerForVisualElementName: [ 1, 7 ],
    getCurrentSectionController: [ 1 ],
    getKeyVisual: [ 1 ],
    popHiddenSection: [ 0 ],
    getFixedBodyWidth: [ 1 ],
    setReportFiltersActive: [ 0, 2 ],
    getViewControllerForName: [ 1, 7 ],
    hasAlertableState: [ 2 ],
    getViewSetControllers: [ [ 1 ] ],
    getReportLinkInfo: [ 1 ],
    getDataSourceLabels: [ [ 7 ] ],
    getIndexOfSectionWithName: [ 4, 7 ],
    getAllSectionControllers: [ [ 1 ] ],
    prepareReportState: [ 0 ],
    isNarrowScreenLayout: [ 2 ],
    saveState: [ 0 ],
    resetScreenLayout: [ 0 ],
    getWarnings: [ [ 1 ] ],
    setSelectedVisual: [ 0, 1 ],
    removeSectionLinkInfo: [ 0 ],
    getReportStyleChain: [ 1 ],
    getActiveSectionController: [ 1 ],
    areReportFiltersActive: [ 2 ],
    getFixedBodyHeight: [ 1 ],
    getReportPromptStyleChain: [ 1 ],
    areLatestLinkForHeaderValue: [ 2 ],
    getChangeController: [ 1 ],
    getHeaderController: [ 1 ],
    getNumberOfSections: [ 4 ],
    getCurrentSectionLinksForCurrentSection: [ [ 1 ] ],
    getResultForDataDefinitionName: [ 1, 7 ],
    getAllVisualElements: [ [ 1 ] ],
    getHiddenSectionControllerForName: [ 1, 7, 1 ]
}, {
    _create: [ 4, 1 ]
}, ,  ]);

var dp = cp;

var up = Dr("BIRD::BIRDModelController", [], es, [ {
    CONTENT_COMPLETE: 50002,
    CONTENT_COMPLETE_RESET: 50003,
    DATA_REFRESH_TRIGGERED: 50005,
    CONTENT_PROGRESS: 50004
}, , , , {
    redispatchContentComplete: [ 0 ],
    endSequence: [ 0 ],
    getBIRDModel: [ 1 ],
    getReportController: [ 1 ],
    isContentComplete: [ 2 ],
    refreshData: [ 0 ],
    beginSequence: [ 0 ]
}, , ,  ]);

Dr("BIRD::ExpressionControlItem", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , , , , {
    getLabel: [ 7 ],
    removeAllValues: [ 0 ],
    readOnly: [ 2 ],
    getValueList: [ [ 7 ] ],
    removeValueFromList: [ 0, 4 ]
}, , ,  ]);

var mp = Dr("BIRD::AutoInteractionController", [ "BIRD::BIRDModelController" ], es, [ {
    EXPRESSION_UPDATED: 5e4
}, , , , {
    getExpressionControlItems: [ [ 1 ] ],
    getAutoInteractionMode: [ 4 ]
}, , ,  ]);

Dr("BIRD::CategoryValueInfo", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    label: 7,
    totalCount: 1,
    value: 1,
    selected: 2
}, , , , , ,  ]);

Dr("BIRD::CellVisual", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    name: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CellVisuals", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    visuals: [ 1 ],
    nestedElementPosition: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var pp = Dr("BIRD::CheckBoxList", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::PromptSpecialization" ], es, [ , {
    valueVariable: 1,
    measureVariable: 1,
    selectAllEnabled: 2,
    searchable: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var fp = pp;

var gp = Dr("BIRD::ComboBox", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::PromptSpecialization" ], es, [ , {
    valueVariable: 1,
    measureVariable: 1,
    searchable: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var hp = gp;

var bp = {
    NONE: 0,
    URL: 1,
    CONTEXT: 2,
    REPORT: 4,
    SECTION: 8
};

var vp = bp;

var yp = Dr("BIRD::NavigationAction", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::AbstractAction" ], es, [ , {
    mappings: 7,
    type: 4,
    behavior: 4,
    value: 7,
    navigationAction: 1,
    parameters: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var xp = yp;

Dr("BIRD::CrosstabLabel", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    isVisible: 2,
    position: 4,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CrosstabLevel", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    uniqueLevelName: 7,
    styleClass: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CrosstabHierarchy", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    variableName: 7,
    name: 7,
    label: 1,
    styleClass: 7,
    levels: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::TableCell", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    action: 1,
    cellVisuals: 1,
    styleClass: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CrosstabMeasure", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    variableName: 7,
    compactFormat: 2,
    name: 7,
    label: 1,
    styleClass: 7,
    conditions: [ 1 ],
    cell: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CrosstabAxis", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    measures: [ 1 ],
    hierarchies: [ 1 ],
    type: 4,
    expandDisabledByApp: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CrosstabTotal", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    columnVisible: 2,
    styleClass: 7,
    rowVisible: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CrosstabSummary", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    total: 1,
    subtotal: 1,
    position: 4,
    styleClass: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::RowNumbers", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    visible: 2,
    resetByGroup: 2,
    headerLabel: 7,
    headerVisible: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::CrosstabElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::VisualElement" ], es, [ , {
    layout: 4,
    summary: 1,
    missingValueLabel: 4,
    replicate: 4,
    cellSpacing: 1,
    measureSizing: 4,
    rowNumbers: 1,
    axes: [ 1 ],
    cellPadding: 1,
    labels: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::SortController", [], Ka, [ , , , , {
    getRelationalSortIndices: [ [ 3 ] ],
    resetToDefault: [ 0 ],
    getMeasureSortsForAxis: [ [ 1 ], 4 ],
    getDimensionalSortForAxis: [ 1, 4 ],
    hasRelationalSortStatement: [ 2 ],
    getRelationalSortsForAxis: [ [ 1 ], 4 ],
    hasDimensionalSortStatement: [ 2 ],
    getDataTreeSortContext: [ 1 ]
}, {
    createSortContext: [ 1, 1, 7, 4 ]
}, ,  ]);

Dr("BIRD::ResultController", [ "BIRD::BIRDModelController" ], es, [ {
    NO_RESPONSE_FROM_SERVER: 50022,
    REPORT_OBJECT_INCOMPLETE: 50028,
    RESULT_DATA_WARNING: 50021,
    FILTER_PRODUCED_EMPTY_DATA: 50025,
    DATA_BEGAN_PROCESSING: 50041,
    UNRECOGNIZED_RESPONSE: 50023,
    MAX_ROWS_EXCEEDED_DATA_TRUNCATED: 50026,
    INCOMPLETE_DATA: 50024,
    MAX_ROWS_EXCEEDED_NO_DATA: 50027
}, , , , {
    getDataSet: [ 1 ],
    getHierarchyDataSet: [ 1 ],
    getSyntheticItemSetVariables: [ [ 1 ], 7 ],
    getModel: [ 1 ],
    getVariableLabelForPresentation: [ 7, 7, 7 ],
    isProcessingData: [ 2 ],
    getSortController: [ 1 ],
    getResultLabelForPresentation: [ 7, 7 ],
    getDataWarnings: [ [ 1 ] ],
    getDataValueForStringValue: [ 1, 7 ],
    isDataEmbedded: [ 2 ]
}, , ,  ]);

Dr("BIRD::TooltipDrillController", [], Ka, [ , , , , {
    getLabel: [ 7 ],
    getHierarchyName: [ 7 ],
    getOneLevelUpLabel: [ 7 ],
    getConstantLevelValues: [ [ 7 ] ],
    _drillDown_o: [ 0, 1 ],
    _collapse_o: [ 0, 1 ],
    getCurrentLevelItemNames: [ [ 7 ] ],
    _drillUp_n: [ 0, 4 ],
    _drillDown_v: [ 0 ],
    _canDrillDown_o: [ 2, 1 ],
    canExpandAll: [ 2 ],
    _drillUp_v: [ 0 ],
    getConstantLevelLabels: [ [ 7 ] ],
    _canExpand_v: [ 2 ],
    _expand_v: [ 0 ],
    _canExpand_o: [ 2, 1 ],
    drillDownFromLevel: [ 0, 4, 1 ],
    canDrillUp: [ 2 ],
    getPickedValue: [ 7 ],
    canCollapseAll: [ 2 ],
    _canDrillDown_v: [ 2 ],
    _canCollapse_v: [ 2 ],
    expandAll: [ 0 ],
    collapseAll: [ 0 ],
    setPickResults: [ 0, [ 1 ] ],
    _collapse_v: [ 0 ],
    _canCollapse_o: [ 2, 1 ],
    getCurrentLevelLabel: [ 7 ],
    _expand_o: [ 0, 1 ],
    getOneLevelDownLabel: [ 7 ],
    getHierarchy: [ 1 ]
}, , [ "collapse", "drillDown", "canCollapse", "canDrillDown", "canExpand", "expand", "drillUp" ] ]);

Dr("BIRD::MeasureValueInfo", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    minValue: 6,
    maxValue: 6,
    filterAggregatedValues: 2,
    minAggregatedValue: 6,
    maxAggregatedValue: 6,
    formatName: 7,
    filterMax: 6,
    filterMin: 6,
    rangeOperator: 4
}, , , , , ,  ]);

Dr("BIRD::DataDefinitionFilterInfo", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    measureValue: 1,
    filterItem: 1,
    includeMissing: 2,
    selectAll: 2,
    keepMeasureValue: 2,
    expression: 1,
    isOnlyAggregated: 2,
    discreteMeasure: 2,
    aggregated: 2,
    filterType: 4,
    isCommonFilter: 2,
    categoryValues: [ 1 ]
}, , {
    dataItems: [ 1 ]
}, {
    isReadOnly: [ 2 ],
    getName: [ 7 ],
    getLabel: [ 7 ],
    clone: [ 1 ],
    hasCASResource: [ 2 ]
}, , ,  ]);

Dr("BIRD::FilterDescription", [], Ka, [ , , , , {
    getPrettyDescription: [ 7 ],
    getTitle: [ 7 ],
    asDataItemInfos: [ [ 1 ] ],
    getSourceType: [ 4 ],
    asDataDefinitionFilterInfo: [ [ 1 ] ],
    getDescription: [ 7 ]
}, {
    getDescriptions: [ [ 7 ], [ 1 ], 4, 2 ],
    getPrettyDescriptions: [ [ 7 ], [ 1 ], 2 ]
}, ,  ]);

Dr("BIRD::PickResultEntryInfo", [], Ka, [ , , , , {
    getValue: [ 7 ],
    getLabel: [ 7 ],
    getColor: [ 3 ]
}, , ,  ]);

Dr("BIRD::TooltipInfoController", [], Ka, [ , , , , {
    isPickResultsReady: [ 2 ],
    getPickResults: [ [ 1 ] ],
    isTooltipInfoReady: [ 2 ],
    getInfoEntries: [ [ 1 ] ]
}, {
    getInfoEntriesForPickResult: [ [ 1 ], 1 ]
}, ,  ]);

Dr("BIRD::TooltipLinksController", [], Ka, [ , , , , {
    getLinksLabel: [ 7, 4 ],
    getReportController: [ 1 ],
    performAction: [ 0, 4 ],
    getInteractionEvent: [ 1, 4 ],
    getActions: [ [ 1 ] ]
}, , ,  ]);

Dr("BIRD::TooltipSortItem", [], Ka, [ , , , , {
    getLabel: [ 7 ],
    getSortedColumnName: [ 7 ],
    setSortDirection: [ 0, 4 ],
    isPrimary: [ 2 ],
    getSortDirection: [ 4 ],
    getColumnName: [ 7 ],
    setPrimary: [ 0, 2 ]
}, , ,  ]);

Dr("BIRD::TooltipSortController", [], Ka, [ , , , , {
    _sort_o: [ 0, 1 ],
    _sort_n: [ 0, 4 ],
    removeSortLevel: [ 0 ],
    removeSort: [ 0, 1 ],
    getSortDirection: [ 4 ],
    reset: [ 0 ],
    canRemoveSortLevel: [ 2 ],
    getColumnName: [ 7 ],
    isTooltipSortReady: [ 2 ],
    getSortItems: [ [ 1 ] ],
    shouldShowResetOption: [ 2 ],
    canRemoveSort: [ 2, 1 ]
}, , [ "sort" ] ]);

Dr("gtl::MapPin", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ {
    REVERSE_GEOCODE_COMPLETE: 30075,
    ROUTING_COMPLETE: 30074,
    GEO_ENRICHMENT_COMPLETE: 30073,
    BUFFER_COMPLETE: 30072
}, , , {
    country: 7,
    address: 7,
    name: 7
}, {
    getGeoEnrichmentData: [ 7 ],
    getGeoEnrichmentResults: [ [ 1 ] ],
    enrichBuffer: [ 0, [ 7 ] ]
}, , ,  ]);

Dr("BIRD::GeoViewport", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    top: 6,
    left: 6,
    bottom: 6,
    right: 6
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::GraphContent", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    resultDefinition: 1,
    variable: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::GraphElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::VisualElement" ], es, [ , {
    graphType: 7,
    graphContent: 1,
    graphSubType: 7,
    statgraphXML: 7,
    primaryDataDefinition: 1,
    mapDataDefinition: 1,
    statgraph: 1,
    geoViewport: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Sp = Dr("BIRD::GraphElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController", "BIRD::DataVisualElementController" ], es, [ {
    INVALID_GRAPH_DATA_REFERENCE: 50005,
    INTERACTION_DISABLED: 50004,
    ROW_COLUMN_LIMIT_EXCEEDED: 50002,
    TITLE_CHANGED: 50014,
    GRAPH_MEASURE_RULE_CONFLICT: 50003,
    CURRENT_DRAG_MODE_CHANGED: 50013
}, , , {
    dragMode: 4,
    categoryLabelDrillEnabled: 2
}, {
    isOverviewSupported: [ 2 ],
    getModel: [ 1 ],
    toggleOverviewAxis: [ 0 ],
    getGraphModel: [ 1 ],
    selectShortestPath: [ 0 ],
    sort: [ 0, 1 ],
    isOverviewAxisOn: [ 2 ],
    getAvailableDragModes: [ [ 4 ] ],
    playAnimation: [ 0 ],
    toggleOverview: [ 0 ],
    isOverviewOn: [ 2 ],
    isAnimated: [ 2 ],
    supportsSelectShortestPath: [ 2 ],
    pauseAnimation: [ 0 ]
}, {
    _create: [ 4, 1 ]
}, ,  ]);

var wp = Dr("BIRD::MapElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController", "BIRD::DataVisualElementController", "BIRD::GraphElementController" ], es, [ {
    ESRI_PORTAL_TOKEN_ACQUIRED: 50027,
    CURRENT_SEARCH_MARKER_SELECTED: 50023,
    REVERSE_GEOCODE_RESULT_READY: 50030,
    GEO_ENRICHMENT_READY: 50026,
    MAP_FEATURES_REQUESTED: 50028,
    SEARCH_RESULTS_READY: 50021,
    SEARCH_HINTS_READY: 50022,
    PINS_UPDATED: 50031,
    DRIVE_TIME_RESULTS_READY: 50025,
    MAP_BOUNDS_CHANGED: 50024,
    MISSING_MAP_DATA: 50011,
    MAP_FEATURES_RECEIVED: 50029
}, , , , {
    getMapChartOperations: [ 1 ],
    requestSearchHints: [ 0, 7 ],
    zoomOut: [ 0 ],
    getSearchTerm: [ 7 ],
    doDriveTime: [ 0, 11, 2, 5, 4 ],
    enrichSelectionPolygon: [ 0, [ 7 ] ],
    canZoomIn: [ 2 ],
    search: [ 0, 7, 7 ],
    cancelDriveTime: [ 0 ],
    searchAtPoint: [ 0, 7, 4, 4 ],
    doMultiDriveTimeWithTraffic: [ 0, 11, 2, [ 5 ], 4, 4, 4, 4, 4 ],
    canEnrichSelectionPolygon: [ 2, 11 ],
    getViewSize: [ 13, 4 ],
    getGeoEnrichmentResultModels: [ [ 1 ] ],
    setCurrentSearchMarkerIndex: [ 0, 3, 2 ],
    getCurrentSearchMarkerIndex: [ 3 ],
    getCurrentSearchMarkerLocation: [ 11 ],
    getSearchHints: [ [ 1 ] ],
    zoomIn: [ 0 ],
    doDriveTimeWithTraffic: [ 0, 11, 2, 5, 4, 4, 4, 4, 4 ],
    canDoSearch: [ 2 ],
    getMaximumBufferDistance: [ 5, 4, 4 ],
    clearSearch: [ 0 ],
    getGeoEnrichmentResults: [ 7 ],
    getCurrentPinIndex: [ 3 ],
    canZoomOut: [ 2 ],
    cancelSearch: [ 0 ],
    doMultiDriveTime: [ 0, 11, 2, [ 5 ], 4 ],
    resetView: [ 0 ],
    doRadial: [ 0, 11, 2, 5, 4 ],
    getSearchResults: [ [ 1 ] ],
    setCurrentPinIndex: [ 1, 3, 2 ],
    hasOperations: [ 2 ]
}, {
    _create: [ 4, 1 ]
}, ,  ]);

Dr("BIRD::TooltipMapController", [], Ka, [ , , , , {
    getMapElementController: [ 1 ],
    cancelDriveTime: [ 0 ],
    doMultiDriveTime: [ 0, [ 5 ], 4 ],
    doRadial: [ 0, 5, 4 ],
    canDoDriveTime: [ 2 ],
    getPin: [ 1 ],
    canDoDistanceSelections: [ 2 ],
    getFeature: [ 1 ]
}, , ,  ]);

Dr("BIRD::TooltipOptionsController", [], Ka, [ , , , , {
    supportsCellVisuals: [ 2 ],
    setCellVisualGradientEndColor: [ 0, 10 ],
    unfreezeAllColumns: [ 0 ],
    columnIsFrozen: [ 2 ],
    freezeColumnsToLeft: [ 0 ],
    getCellVisualGradientEndColor: [ 10 ],
    getCellVisualType: [ 4 ],
    setCellVisualColor: [ 0, 10 ],
    setCellVisualPosition: [ 0, 4 ],
    getCellVisualColor: [ 10 ],
    setCellVisualType: [ 0, 4 ],
    supportsTotal: [ 2, 4, 4 ],
    setTotalVisible: [ 0, 4, 4, 2 ],
    setCellVisualGradientStartColor: [ 0, 10 ],
    supportsFreezingColumns: [ 2 ],
    getCellVisualGradientStartColor: [ 10 ],
    getCellVisualPosition: [ 4 ],
    supportsCompactFormat: [ 2 ],
    columnIsUsingCompactFormat: [ 2 ],
    setCompactFormat: [ 0, 2 ],
    isTotalVisible: [ 2, 4, 4 ]
}, , ,  ]);

var Cp = Dr("BIRD::TooltipEvent", [ "commons::PortableEvent" ], Ka, [ {
    HIDE: 50043,
    SHOW: 50044
}, , , , {
    getVisualController: [ 1 ],
    getLocationWithinSection: [ 11 ],
    getPickResults: [ [ 1 ] ],
    getTooltipSortController: [ 1 ],
    getLocationWithinVisual: [ 11, 2 ],
    supportsExpandCollapse: [ 2 ],
    getTooltipMapController: [ 1 ],
    getTooltipLinksController: [ 1 ],
    getLocationOverride: [ 11, 2 ],
    getTooltipDrillControllers: [ [ 1 ] ],
    getTooltipInfoController: [ 1 ],
    getTooltipOptionsController: [ 1 ]
}, , ,  ]);

Dr("BIRD::DataDefinitionController", [ "BIRD::BIRDModelController" ], es, [ {
    METADATA_CHANGED: 50007
}, , , , {
    getDataItemInfo: [ 1, 1 ],
    getDataItemInfos: [ [ 1 ], [ 1 ] ]
}, , ,  ]);

Dr("BIRD::RolesInspector", [], Ka, [ , , , , {
    isRequired: [ 2 ],
    getLabel: [ 7 ],
    getName: [ 4 ],
    getDataItems: [ [ 1 ] ],
    isAllowMulti: [ 2 ]
}, , ,  ]);

Dr("BIRD::RolesAssignmentController", [ "BIRD::BIRDModelController", "BIRD::DataDefinitionController" ], es, [ , , , , {
    replaceDataItem: [ 0, 1, 1, 1 ],
    getRolesInspectors: [ [ 1 ] ],
    getAvailableDataSourceDataItems: [ [ 1 ], 1 ],
    addDataItem: [ 0, 1, 1 ],
    removeDataItem: [ 0, 1, 1 ],
    getOtherDataSourceDataItems: [ [ 1 ], 1 ],
    canRemoveDataItem: [ 2, 1 ],
    canAddDataItem: [ 2, 1 ],
    getAllAvailableDataSourceDataItems: [ [ 1 ] ],
    getRolesInspectorsWithDataItem: [ [ 1 ], 1 ]
}, , ,  ]);

Dr("BIRD::DataDefinitionFilterController", [ "BIRD::BIRDModelController", "BIRD::DataDefinitionController" ], es, [ , , , , {
    isSelectionFilterAvailable: [ 2 ],
    getDataDefinitionFilters: [ [ 1 ] ],
    getInitVouchers: [ [ 1 ] ],
    addDataDefinitionFilter: [ 1, 1 ],
    addSelectionFilter: [ 1, 2 ],
    refreshDataDefinitionFilter: [ 1, 1 ],
    removeDataDefinitionFilter: [ 0, 1 ],
    getDataDefinitionFilterDescriptions: [ [ 1 ] ],
    getDataDefinitionFilterDataItems: [ [ 1 ] ],
    applyDataDefinitionFilter: [ 1, 1 ]
}, , ,  ]);

Dr("BIRD::RankInfo", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::RankBase" ], es, [ {
    INVALID_USER_INPUT: 50017
}, {
    rankBy: 1,
    description: 7,
    groupBy: 1,
    detail: 2,
    label: 7,
    otherAvailable: 2
}, , {
    userInput: 7
}, {
    getAvailableUserInput: [ [ 7 ] ],
    getAvailableParameters: [ [ 7 ] ]
}, , ,  ]);

Dr("BIRD::GroupByInfo", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    groupBy: 1,
    label: 7,
    detail: 2,
    dataItemInfo: 1
}, , , , , ,  ]);

Dr("BIRD::RanksController", [ "BIRD::BIRDModelController", "BIRD::DataDefinitionController" ], es, [ , , , , {
    getRanks: [ [ 1 ] ],
    getRankForCategory: [ 1, 1 ],
    getAvailableGroupByCategories: [ [ 1 ] ],
    getRankForGroupBy: [ 1, 1 ],
    getAvailableRankByMeasures: [ [ 1 ] ],
    removeRank: [ 0, 1 ],
    getAvailableGroupBy: [ [ 1 ] ],
    applyRank: [ 0, 1 ]
}, , ,  ]);

Dr("BIRD::ValueGroup", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    sourceValues: [ 7 ],
    groupValue: 7
}, , , , {
    _create_v: [ 4 ],
    _create_so: [ 4, 7, [ 7 ] ]
}, , [ "_create" ] ]);

Dr("BIRD::GroupingInfo", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    sourceItemInfo: 1,
    valueGroups: [ 1 ]
}, , , , , ,  ]);

Dr("BIRD::GroupingController", [ "BIRD::BIRDModelController", "BIRD::DataDefinitionController" ], es, [ , , , , {
    removeGrouping: [ 0, 1 ],
    getAvailableSourceCategories: [ [ 1 ] ],
    getGroupingForCategory: [ 1, 1 ],
    getGroupings: [ [ 1 ] ],
    applyGrouping: [ 0, 1 ],
    getAvailableSourceCategoriesForRemoveGroupsFromSelection: [ [ 1 ] ],
    getAvailableSourceCategoriesForAddGroupFromSelection: [ [ 1 ] ],
    removeGroupsFromSelection: [ 1, 1 ],
    getValueGroupFromSelection: [ 1, 1 ],
    getAvailableSourceValues: [ [ 7 ], 1 ],
    getAvailableSourceValuesForValueGroup: [ [ 7 ], 1, 1 ]
}, , ,  ]);

var Ep = Dr("BIRD::DataVisualElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController" ], es, [ {
    REQUIRED_ROLES_NOT_ASSIGNED: 50001
}, , , , {
    getSelectedDataItemInfosForExplainText: [ [ 1 ] ],
    canSelectAll: [ 2 ],
    freezeColumns: [ 0, 4 ],
    supportsMultiSelect: [ 2 ],
    getOmittedSubTotalCategories: [ [ 1 ] ],
    getTooltipSortControllerWithAllSortItems: [ 1, [ 1 ] ],
    getCurrentSelectedPickResults: [ [ 1 ] ],
    setCompactFormatForColumn: [ 0, 2, 4 ],
    editOrCreateCellVisual: [ 0, 4, 4, 4 ],
    getResultControllers: [ [ 1 ] ],
    getCellVisualPosition: [ 4, 4 ],
    getExplainTextForDataItem: [ 1, 1 ],
    getDataItemInfo: [ 1, 1 ],
    triggerInteractions: [ 0 ],
    noneSelected: [ 2 ],
    getDisplayRuleInfos: [ [ 1 ] ],
    deselectAll: [ 0 ],
    isPromptFilter: [ 2 ],
    columnIsFrozen: [ 2, 4 ],
    getCellVisualType: [ 4, 4 ],
    resetSort: [ 0 ],
    getDownstreamInteractedControllers: [ [ 1 ] ],
    getTooltipDrillController: [ 1, 7, 7 ],
    selectAll: [ 0 ],
    supportsTotal: [ 2, 4, 4 ],
    setTotalVisible: [ 0, 4, 4, 2 ],
    getRanksController: [ 1 ],
    getOmittedSubTotalMeasures: [ [ 1 ] ],
    columnIsUsingCompactFormat: [ 2, 4 ],
    setCompactFormat: [ 0, 2 ],
    getDataSourceLabels: [ [ 7 ] ],
    getDataDefinitionFilterController: [ 1 ],
    allSelected: [ 2 ],
    getCellVisualColorForStyleAttribute: [ 10, 4, 4 ],
    getRolesAssignmentController: [ 1 ],
    getDataSetsForSelections: [ [ 1 ] ],
    getTooltipEventForPickResults: [ 1, [ 1 ] ],
    isSectionFilter: [ 2 ],
    isUsingCompactFormat: [ 2 ],
    getRowNumbers: [ 1 ],
    getSelectedDataItemsForExplainText: [ [ 1 ] ],
    hasSubtotalVariables: [ 2 ],
    getAllDrillControllers: [ [ 1 ] ],
    _getFilterDescriptions_bbbbb: [ [ 1 ], 2, 2, 2, 2, 2 ],
    getGroupingController: [ 1 ],
    isTotalVisible: [ 2, 4, 4 ],
    _getFilterDescriptions_bbb: [ [ 1 ], 2, 2, 2 ],
    getOmittedTotalItems: [ [ 1 ] ],
    isOmittedFromSubtotals: [ 2, 1 ],
    supportsCellVisuals: [ 2, 4 ],
    columnSupportsCompactFormat: [ 2, 4 ],
    isOmittedFromTotals: [ 2, 1 ],
    getSelectionsForDataSets: [ [ 1 ] ],
    retrieveUniqueValuesForLevel: [ 0, 7, 7, 4 ],
    setOmittedTotalItem: [ 0, 1, 4, 2 ],
    getCategoryTotalVariables: [ [ 1 ] ],
    getAllDataSets: [ [ 1 ] ],
    supportsFreezingColumns: [ 2 ],
    getDrillController: [ 1, 7, 7 ],
    getMeasureTotalVariables: [ [ 1 ] ],
    setRowNumbers: [ 0, 1 ]
}, , [ "getFilterDescriptions" ] ]);

var Ip = Ep;

var _p = Dr("BIRD::CrosstabElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController", "BIRD::DataVisualElementController" ], es, [ {
    ROW_COLUMN_LIMIT_EXCEEDED: 5e4
}, , , {
    summary: 1
}, {
    getTotalStyleChain: [ 1 ],
    _sort_on: [ 0, 1, 4 ],
    getLevelIntersection: [ [ 7 ], 4, 4 ],
    canSort: [ 2, 1 ],
    getTableStyleChain: [ 1 ],
    getSubtotalStyleChain: [ 1 ],
    isAnyMeasureUsingFullFormat: [ 2 ],
    _sort_o: [ 0, 1 ],
    getColumnHeaderStyleChain: [ 1 ],
    generateDisplayRule: [ 1, 1, 1 ],
    getViewerModel: [ 1 ],
    getRowHeaderStyleChain: [ 1 ],
    canCreateHierarchyFromRows: [ 2 ],
    isCellSelected: [ 2, 4, 4 ],
    getModel: [ 1 ],
    getBrushStyleChain: [ 1 ],
    getMeasureVariableLabels: [ [ 7 ] ],
    getRowHierarchyName: [ 7 ],
    getSelectedStyleChain: [ 1 ],
    getLevelSortDirection: [ 4, 1 ],
    triggerInteractionsForExcludeAll: [ 0 ],
    createHierarchyFromColumns: [ 0 ],
    setCurrentSelectedNodePairs: [ 0, [ 1 ] ],
    getMeasureFromColumnAxisLeafIndex: [ 1, 4 ],
    getMeasureHeaderStyleChain: [ 1 ],
    canCreateHierarchyFromColumns: [ 2 ],
    setCurrentSelectedIndex: [ 0, 4, 4 ],
    getColumnHierarchyName: [ 7 ],
    createHierarchyFromRows: [ 0 ]
}, {
    _create: [ 4, 1 ]
}, [ "sort" ] ]);

var Dp = _p;

var Lp = Dr("BIRD::DataStateChangeEvent", [ "commons::PortableEvent" ], Ka, [ {
    DATACHANGE: 50008
}, , , {
    resultController: 1
}, {
    getStructureChanged: [ 2 ]
}, , ,  ]);

var Tp = Lp;

var Rp = Dr("BIRD::DateConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::AbstractConstraintType", "BIRD::AbstractValueConstraintType" ], es, [ , {
    dataType: 4,
    relativeAllowed: 4
}, , , {
    getDataUsage: [ 4 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var kp = Rp;

var Ap = Dr("BIRD::DualSlider", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::PromptSpecialization", "BIRD::AbstractSlider" ], es, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

var Mp = Ap;

var Np = Dr("BIRD::ExplainTextInfo", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    content: 7
}, , , , , ,  ]);

var Op = Np;

var Pp = Dr("BIRD::ExportDataEvent", [ "commons::PortableEvent" ], Ka, [ , , , , {
    getExportDataController: [ 1 ],
    getWarnings: [ [ 1 ] ],
    getExportURL: [ 1 ]
}, , ,  ]);

var Bp = Pp;

var zp = Dr("BIRD::HiddenSection", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::Section" ], es, [ , {
    purpose: 4,
    width: 1,
    height: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Fp = zp;

var jp = Dr("BIRD::ImageElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::VisualElement" ], es, [ , {
    file: 7,
    alternateText: 7,
    scaleType: 4,
    variable: 7,
    url: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Vp = jp;

var Hp = Dr("BIRD::ImageElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController" ], es, [ {
    FILE_MISSING: 50006,
    IMAGE_DOWNLOAD_OK: 50016,
    IMAGE_DOWNLOAD_FAIL: 50017
}, , , , {
    didAttemptDownload: [ 0, 2 ],
    getModel: [ 1 ],
    getImageLocalFilePath: [ 7 ],
    willAttemptDownload: [ 0 ],
    showTooltip: [ 0, 7, 4, 4 ],
    downloadImage: [ 0 ],
    getImageRemoteURL: [ 1 ]
}, {
    _create: [ 4, 1 ]
}, ,  ]);

var Up = Hp;

Dr("BIRD::JobDefinitionReference", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    jobName: 7,
    uri: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::JobParameter", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    xref: 7,
    dataType: 4,
    name: 7,
    type: 4,
    value: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::JobContentElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::VisualElement" ], es, [ , {
    jobDefinitionReference: 1,
    jobParameters: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Gp = Dr("BIRD::JobContentElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController" ], es, [ {
    JOB_EXECUTION_FAILED: 50007
}, , , , {
    getJobResultsUri: [ 7 ],
    getModel: [ 1 ],
    showTooltip: [ 0 ],
    getExecutionUri: [ 7, 4 ]
}, {
    _create: [ 4, 1 ]
}, ,  ]);

var Kp = Gp;

Dr("BIRD::KPILabel", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    variable: 7,
    format: 7,
    position: 4,
    type: 4,
    lines: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::KPIElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::VisualElement" ], es, [ , {
    maxRows: 4,
    scaleGuageSize: 2,
    rowGutter: 1,
    fillDirection: 4,
    columns: 7,
    columnGutter: 1,
    maxColumns: 4,
    graph: 1,
    maxVisuals: 4,
    labels: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::KPIGridLayoutMetrics", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    numberOfKPIs: 4,
    cellWidth: 5,
    numberOfVisibleRows: 4,
    numberOfColumns: 4,
    numberOfVisibleColumns: 4,
    cellHeight: 5,
    numberOfRows: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Wp = Dr("BIRD::KPIElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController", "BIRD::DataVisualElementController" ], es, [ {
    KPI_LIMIT_EXCEEDED: 50008,
    INVALID_KPI_DISPLAY_RULES: 50009
}, , , , {
    getModel: [ 1 ],
    setShowAllVisuals: [ 0, 2 ],
    getCellControllers: [ [ 1 ] ],
    getNumberOfKPIs: [ 3 ],
    showTooltip: [ 0, 4, 4 ],
    getMaximumNumberOfKPIs: [ 3 ],
    getSelectionStyleChain: [ 1 ],
    getMaxNumberOfVisuals: [ 3 ],
    computeKPIGridLayoutMetrics: [ 1, 5, 5, 5, 5 ],
    getKPIHeaderStyleChain: [ 1 ],
    getCategoryVariableName: [ 7 ]
}, {
    _create: [ 4, 1 ]
}, ,  ]);

var $p = Wp;

Dr("BIRD::KPICellController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController" ], es, [ , , , {
    parentController: 1,
    rowIndex: 3
}, {
    getLabel: [ 7 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::LayoutElementWeight", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    value: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::LayoutElementWeights", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    unit: 7,
    mediaTarget: 1,
    weights: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Yp = Dr("BIRD::LinkBar", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::PromptSpecialization" ], es, [ , {
    orientation: 4,
    valueVariable: 1,
    measureVariable: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var qp = Yp;

var Xp = Dr("BIRD::NavigationEvent", [ "commons::PortableEvent" ], Ka, [ {
    NAVIGATION_DATA_UPDATE: 50034
}, , , , {
    getNavigationHierarchyName: [ 7 ],
    getNavigationLevelIndex: [ 4 ],
    getValueList: [ [ 1 ] ]
}, , ,  ]);

var Zp = Xp;

var Jp = Dr("BIRD::NumericConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::AbstractConstraintType", "BIRD::AbstractValueConstraintType" ], es, [ , {
    minValueRef: 1,
    maxValueRef: 1,
    minBehavior: 4,
    integerOnly: 2,
    maxBehavior: 4,
    maxDigits: 4
}, , , {
    getDataUsage: [ 4 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var Qp = Jp;

var ef = Dr("BIRD::NumericRangeConstraint", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::AbstractConstraintType", "BIRD::AbstractRangeConstraintType" ], es, [ , {
    minValueRef: 1,
    maxValueRef: 1,
    minBehavior: 4,
    integerOnly: 2,
    maxBehavior: 4,
    maxDigits: 4
}, , , {
    getDataUsage: [ 4 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var tf = ef;

Dr("BIRD::VisualPromptContainerElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::VisualElement", "BIRD::VisualContainerElement" ], es, [ , {
    buttonText: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var of = Dr("BIRD::VisualPromptContainerElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController", "BIRD::VisualContainerElementController" ], es, [ , , , , {
    getModel: [ 1 ],
    applyDeferredPromptValues: [ 0 ],
    setActive: [ 0, 2 ],
    savePromptsDataValues: [ 0 ],
    cancelDeferredPromptValues: [ 0 ],
    triggerInteractions: [ 0 ],
    isActionEnabled: [ 2 ]
}, {
    _create: [ 4, 1 ]
}, ,  ]);

var nf = Dr("BIRD::PromptContainerController", [ "BIRD::BIRDModelController", "BIRD::PositionedModelController", "BIRD::PositionedModelOwnerController", "BIRD::ContainerController" ], es, [ , , , , {
    getPromptContainerElementController: [ 1 ]
}, , ,  ]);

var af = nf;

var rf = Dr("BIRD::PromptElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::VisualElement" ], es, [ , {
    interactOnAggregateData: 2,
    defaultValue: 1,
    promptDefinition: 1,
    specialization: 1,
    required: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var sf = Dr("BIRD::PromptElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController", "BIRD::DataVisualElementController" ], es, [ {
    CURRENT_VALUE_HAS_INVALID_FORMAT: 50016,
    CURRENT_VALUE_CHANGED: 50035,
    MISSING_DYNAMIC_VALUES: 50015,
    INVALID_PROMPTDEFINITION_MEASURE_VARIABLE: 50014
}, , , {
    currentValuesInTermsOfOrderedUniqueRowIndices: [ 3 ],
    currentValues: [ 1 ],
    currentValue: 1
}, {
    getPromptDefinitionWithCurrentValueSource: [ 1 ],
    isRequired: [ 2 ],
    getModel: [ 1 ],
    getFormattedMeasure: [ 7, 4 ],
    getLabel: [ 7 ],
    isParameter: [ 2 ],
    saveState: [ 0 ],
    getCurrentFormattedMeasure: [ 7 ],
    showTooltip: [ 0, [ 1 ], 4, 4 ],
    validateValue: [ 1, 1 ],
    isSectionFilter: [ 2 ],
    getPromptDefinition: [ 1 ],
    getMeasures: [ [ 6 ] ],
    getStyleChain: [ 1 ],
    getDefaultValue: [ 1 ],
    getDataValueForUserInput: [ 1, 7 ],
    getFormatName: [ 7 ],
    getMeasureColumn: [ 1 ],
    getMeasureVariableLabel: [ 7 ],
    getColumn: [ 1 ],
    getUniqueRowIndicies: [ [ 3 ] ],
    getSelectionStyleChain: [ 1 ],
    sortByColumn: [ 0, 7, 4 ]
}, {
    _create: [ 4, 1 ],
    getMissingDisplayString: [ 7 ]
}, ,  ]);

var lf = sf;

var cf = Dr("BIRD::RadioBoxList", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::PromptSpecialization" ], es, [ , {
    valueVariable: 1,
    measureVariable: 1,
    searchable: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var df = cf;

var uf = Dr("BIRD::RangeSliderController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController", "BIRD::DataVisualElementController", "BIRD::PromptElementController" ], es, [ , , , , {
    getCurrentDataRange: [ [ 6 ] ],
    hasTemporalData: [ 2 ],
    getDefaultRange: [ [ 6 ] ],
    _snapNumericValue_n: [ 6, 6 ],
    getSnapInterval: [ 6 ],
    getFormattedValue: [ 7, 6 ],
    getCurrentSelectedRangeMagnitude: [ 6 ],
    getCurrentSelectedValue: [ 6 ],
    isHorizontal: [ 2 ],
    setCurrentSelectedValue: [ 0, 6 ],
    setCurrentSelectedRange: [ 0, 6, 6 ],
    _snapNumericValue_nn: [ 6, 6, 6 ],
    getFormatter: [ 1 ],
    getCurrentSelectedRange: [ [ 6 ] ]
}, {
    _create: [ 4, 1 ]
}, [ "snapNumericValue" ] ]);

var mf = uf;

var pf = Dr("BIRD::ResponsiveLayout", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::LayoutElement" ], es, [ , {
    orientation: 4,
    overflow: 4,
    weights: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var ff = pf;

var gf = Dr("BIRD::Slider", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::PromptSpecialization", "BIRD::AbstractSlider" ], es, [ , , , , , {
    _create: [ 4 ]
}, ,  ]);

var hf = gf;

var bf = Dr("BIRD::StackLayout", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::LayoutElement" ], es, [ , {
    verticalPosition: 4,
    buttonType: 4,
    horizonalPosition: 4
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var vf = bf;

Dr("BIRD::TableLabel", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    columnSpan: 4,
    rowSpan: 4,
    isStacked: 2,
    isVisible: 2,
    position: 4,
    styleClass: 7,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::TableColumns", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::AbstractTableColumn" ], es, [ , {
    sortDisabled: 2,
    columns: [ 1 ],
    isStacked: 2,
    headersHidden: 2,
    labels: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::TableTotal", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    hideAggregationLabels: 2,
    styleClass: 7,
    rowVisible: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::TableSummary", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel" ], es, [ , {
    total: 1,
    position: 4,
    styleClass: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::TableRows", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::AbstractTableRow" ], es, [ , {
    styleClass: 7,
    rows: [ 1 ],
    labels: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("BIRD::TableElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::VisualElement" ], es, [ , {
    summary: 1,
    replicate: 4,
    frozenColumnCount: 4,
    columns: 1,
    primaryDataDefinition: 1,
    rows: 1,
    aggregate: 2,
    labels: [ 1 ],
    presentation: 7,
    cellSpacing: 1,
    rowNumbers: 1,
    columnSizing: 4,
    cellPadding: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var yf = Dr("BIRD::TableElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController", "BIRD::DataVisualElementController" ], es, [ , , , {
    summary: 1
}, {
    getColumnHeader: [ 7, 1 ],
    getTotalStyleChain: [ 1 ],
    getOrderedHiddenTableColumns: [ [ 1 ] ],
    canSort: [ 2, 4 ],
    getSortedColumnNamesInOrder: [ [ 7 ] ],
    applyRule: [ 0, 4, 4, 1 ],
    setColumnOrder: [ 0, [ 1 ] ],
    getTableStyleChain: [ 1 ],
    updateView: [ 0, 1, 2 ],
    getSortDirectionForColumn: [ 4, 7 ],
    addSort: [ 0, 7, 4, 2 ],
    setSortEnabled: [ 0, 2 ],
    generateDisplayRule: [ 1, 1 ],
    getTableHeaderStyleChain: [ 1 ],
    getSparkLineDataSet: [ 1, 4, 4 ],
    getPrimarySortColumnName: [ 7 ],
    setVisibilityForColumn: [ 0, 1, 2 ],
    getModel: [ 1 ],
    getBrushStyleChain: [ 1 ],
    getOrderedTableColumnStyleChains: [ [ 1 ] ],
    showTooltip: [ 0, 7, 4, 4, 2 ],
    sort: [ 0, 7, 4 ],
    isSortEnabled: [ 2 ],
    getSortIndicies: [ [ 3 ] ],
    getOrderedTableColumns: [ [ 1 ] ],
    getSelectedStyleChain: [ 1 ],
    getPresentationLabel: [ 7 ],
    getTotalLabelForColumn: [ 7, 7 ],
    moveColumn: [ 0, 4, 4 ],
    getOrderedColumnLabels: [ [ 7 ] ]
}, {
    _create: [ 4, 1 ]
}, ,  ]);

var xf = yf;

Dr("BIRD::TextElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::VisualElement" ], es, [ , {
    textStyleClass: 7,
    missingValueDisplay: 4,
    primaryDataDefinition: 1,
    paragraphs: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Sf = Dr("BIRD::TextElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController", "BIRD::DataVisualElementController" ], es, [ , , , , {
    getFormattedText: [ 7 ],
    getModel: [ 1 ],
    triggerInteraction: [ 0, 7 ],
    getRichTextAsHTML: [ 7 ],
    showTooltip: [ 0 ],
    getMaxFontHeight: [ 5 ],
    getPlainText: [ 7 ]
}, {
    _create: [ 4, 1 ]
}, ,  ]);

var wf = Sf;

var Cf = Dr("BIRD::TextField", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::PromptSpecialization" ], es, [ , {
    valueVariable: 1,
    measureVariable: 1,
    constraint: 1,
    defaultFormat: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Ef = Cf;

var If = Dr("BIRD::VisualSelectionEvent", [ "commons::PortableEvent" ], Ka, [ {
    SELECTION_CHANGED: 50053,
    UNSELECT: 50052,
    SELECT: 50051
}, , , {
    resultController: 1,
    visualController: 1
}, , {
    _create: [ 4 ]
}, ,  ]);

var _f = If;

var Df = {
    STANDARD: 0,
    WEBDATACONTENT: 1
};

var Lf = Df;

Dr("BIRD::WebContentElement", [ "commons::PropertyOwner", "commons::BaseModel", "BIRD::BIRDModel", "BIRD::VisualElement" ], es, [ , {
    webContentType: 4,
    url: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Tf = Dr("BIRD::WebContentElementController", [ "BIRD::BIRDModelController", "BIRD::RendererManagerController", "BIRD::VisualElementController", "BIRD::DataVisualElementController" ], es, [ {
    WEB_CONTENT_DISABLED: 50032
}, , , , {
    getModel: [ 1 ],
    dispatchSelectEvent: [ 0 ],
    hasData: [ 2 ],
    getJSONXData: [ 7 ],
    selectFromJSONX: [ 0, 7 ]
}, {
    _create: [ 4, 1 ]
}, ,  ]);

var Rf = Tf;

var kf = Dr("vav::VAViewerPackage", [ "commons::PortablePackage" ], Ka, [ , , , , , {
    instance: [ 1 ]
}, ,  ]);

un("vav", [ kf ]);

Dr("vav::VAViewerModel", [ "commons::PropertyOwner", "commons::BaseModel" ], es, [ , , , , {
    getDescription: [ 7, 4 ]
}, , ,  ]);

Dr("vav::DebugItem", [ "commons::PropertyOwner", "commons::BaseModel", "vav::VAViewerModel" ], es, [ , {
    name: 7,
    label: 7,
    content: 7
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("vav::DebugInfo", [ "commons::PropertyOwner", "commons::BaseModel", "vav::VAViewerModel" ], es, [ , {
    items: [ 1 ]
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var Af = Dr("vav::ReportSession", [], es, [ {
    REPORT_OPENING: 240011,
    STATE_RESET: 240009,
    STATE_NOT_SAVED: 24e4,
    REPORT_OPENED: 240012,
    STATE_SAVED: 240008,
    REPORT_CLOSED: 240013,
    STATE_NOT_RESET: 240002,
    REPORT_NOT_DELETED: 240004,
    REPORT_SAVED: 240010,
    STATE_NOT_SUPPORTED: 240001,
    REPORT_DELETED: 240014,
    REPORT_NOT_SAVED: 240003
}, , , {
    reportManager: 1,
    autoSaveIntervalInSeconds: 6,
    report: 1,
    reportController: 1,
    SASReportConfiguration: 1,
    autoSavePrimaryState: 2
}, {
    openReport: [ 0 ],
    savePrimaryState: [ 0 ],
    resetPrimaryStateToDefault: [ 0 ],
    closeReport: [ 0 ],
    createPrintSetup: [ 1 ],
    renameReport: [ 0, 7 ],
    saveReport: [ 0 ],
    hasPrimaryStateChangedSinceLastSave: [ 2 ],
    canResetState: [ 2 ],
    canSaveReport: [ 2 ],
    canSaveState: [ 2 ],
    isReportOpen: [ 2 ],
    getSerializedReportForSave: [ 7, 1 ],
    cancelPrinting: [ 0 ],
    _printReport_o: [ 0, 1 ],
    saveReportAs: [ 0, 1, 7 ],
    _printReport_os: [ 0, 1, 7 ],
    saveSASReportAs: [ 0, 1, 7, 1 ],
    getDebugInfo: [ 1 ]
}, {
    _create: [ 4, 1, 1 ]
}, [ "printReport" ] ]);

var Mf = Af;

var Nf = Dr("vav::PrintEvent", [ "commons::PortableEvent" ], Ka, [ {
    PRINT_COMPLETED: 240006
}, , , , {
    getPDFLocation: [ 7 ]
}, , ,  ]);

var Of = Nf;

const Pf = {
    "loading.msg": () => `Loading...`,
    "SASServer.genericError.msg": () => `The server cannot be reached.`,
    "SASReport.genericError.msg": () => `Unable to load the selected report.`,
    "SASReportImage.genericError.msg": () => `The report image failed to load.`,
    "SASReportImage.imageNotSupported.msg": () => `Images are not supported for this report content type.`
};

const Bf = {
    "loading.msg": () => `جارٍ التحميل...`,
    "SASServer.genericError.msg": () => `لا يمكن الوصول إلى الخادم.`,
    "SASReport.genericError.msg": () => `يتعذر تحميل التقرير المحدد.`,
    "SASReportImage.genericError.msg": () => `فشل تحميل صورة التقرير.`,
    "SASReportImage.imageNotSupported.msg": () => `الصور غير مدعومة لنوع محتوى التقرير هذا.`
};

const zf = {
    "loading.msg": () => `Načítání...`,
    "SASServer.genericError.msg": () => `Server je nedosažitelný.`,
    "SASReport.genericError.msg": () => `Nelze načíst vybraný report.`,
    "SASReportImage.genericError.msg": () => `Obraz reportu se nepodařilo načíst.`,
    "SASReportImage.imageNotSupported.msg": () => `Obrazy nejsou pro tento typ obsahu reportu podporovány.`
};

const Ff = {
    "loading.msg": () => `Indlæser...`,
    "SASServer.genericError.msg": () => `Der kan ikke oprettes forbindelse til serveren.`,
    "SASReport.genericError.msg": () => `Den valgte rapport kunne ikke indlæses.`,
    "SASReportImage.genericError.msg": () => `Rapportbilledet kunne ikke indlæses.`,
    "SASReportImage.imageNotSupported.msg": () => `Billeder understøttes ikke for denne rapports indholdstype.`
};

const jf = {
    "loading.msg": () => `Ladevorgang...`,
    "SASServer.genericError.msg": () => `Der Server ist nicht erreichbar.`,
    "SASReport.genericError.msg": () => `Der ausgewählte Bericht kann nicht geladen werden.`,
    "SASReportImage.genericError.msg": () => `Das Berichtsbild konnte nicht geladen werden.`,
    "SASReportImage.imageNotSupported.msg": () => `Bilder werden für diesen Berichtsinhaltstyp nicht unterstützt.`
};

const Vf = {
    "loading.msg": () => `Φόρτωση...`,
    "SASServer.genericError.msg": () => `Δεν είναι δυνατή η πρόσβαση στον διακομιστή.`,
    "SASReport.genericError.msg": () => `Δεν είναι δυνατή η φόρτωση της επιλεγμένης αναφοράς.`,
    "SASReportImage.genericError.msg": () => `Απέτυχε η φόρτωση της εικόνας αναφοράς.`,
    "SASReportImage.imageNotSupported.msg": () => `Δεν υποστηρίζονται εικόνες για αυτόν τον τύπο περιεχομένου αναφοράς.`
};

const Hf = {
    "loading.msg": () => `Cargando...`,
    "SASServer.genericError.msg": () => `No se puede acceder al servidor.`,
    "SASReport.genericError.msg": () => `No se puede cargar el informe seleccionado.`,
    "SASReportImage.genericError.msg": () => `La imagen del informe no se ha cargado.`,
    "SASReportImage.imageNotSupported.msg": () => `Las imágenes no están soportadas para este tipo de contenido de informe.`
};

const Uf = {
    "loading.msg": () => `Ladataan...`,
    "SASServer.genericError.msg": () => `Palvelimeen ei saada yhteyttä.`,
    "SASReport.genericError.msg": () => `Valittua raporttia ei voi ladata.`,
    "SASReportImage.genericError.msg": () => `Raportin kuvan lataaminen epäonnistui.`,
    "SASReportImage.imageNotSupported.msg": () => `Kuvia ei tueta tässä raportin sisältötyypissä.`
};

const Gf = {
    "loading.msg": () => `Chargement en cours...`,
    "SASServer.genericError.msg": () => `Le serveur est inaccessible.`,
    "SASReport.genericError.msg": () => `Impossible de charger le rapport sélectionné.`,
    "SASReportImage.genericError.msg": () => `Impossible de charger l’image du rapport.`,
    "SASReportImage.imageNotSupported.msg": () => `Les images ne sont pas prises en charge pour ce type de contenu de rapport.`
};

const Kf = {
    "loading.msg": () => `טוען...`,
    "SASServer.genericError.msg": () => `לא ניתן להתחבר לשרת.`,
    "SASReport.genericError.msg": () => `לא ניתן לטעון את הדוח שנבחר.`,
    "SASReportImage.genericError.msg": () => `טעינת תמונת הדוח נכשלה.`,
    "SASReportImage.imageNotSupported.msg": () => `סוג תוכן דוח זה אינו תומך בתמונות.`
};

const Wf = {
    "loading.msg": () => `Učitavanje...`,
    "SASServer.genericError.msg": () => `Nije moguće uspostaviti vezu s poslužiteljem.`,
    "SASReport.genericError.msg": () => `Nije moguće učitati odabrano izvješće.`,
    "SASReportImage.genericError.msg": () => `Sliku izvješća nije bilo moguće učitati.`,
    "SASReportImage.imageNotSupported.msg": () => `Slike nisu podržane za ovu vrstu sadržaja izvješća.`
};

const $f = {
    "loading.msg": () => `Betöltés...`,
    "SASServer.genericError.msg": () => `A kiszolgáló nem érhető el.`,
    "SASReport.genericError.msg": () => `Nem lehet betölteni a kijelölt jelentést.`,
    "SASReportImage.genericError.msg": () => `Nem sikerült betölteni a jelentésképet.`,
    "SASReportImage.imageNotSupported.msg": () => `Ennél a jelentéstartalom-típusnál nincsenek támogatva a képek.`
};

const Yf = {
    "loading.msg": () => `Caricamento...`,
    "SASServer.genericError.msg": () => `Impossibile raggiungere il server.`,
    "SASReport.genericError.msg": () => `Impossibile caricare il report selezionato.`,
    "SASReportImage.genericError.msg": () => `Impossibile caricare l’immagine del report.`,
    "SASReportImage.imageNotSupported.msg": () => `Le immagini non sono supportate per questo tipo di contenuto del report.`
};

const qf = {
    "loading.msg": () => `טוען...`,
    "SASServer.genericError.msg": () => `לא ניתן להתחבר לשרת.`,
    "SASReport.genericError.msg": () => `לא ניתן לטעון את הדוח שנבחר.`,
    "SASReportImage.genericError.msg": () => `טעינת תמונת הדוח נכשלה.`,
    "SASReportImage.imageNotSupported.msg": () => `סוג תוכן דוח זה אינו תומך בתמונות.`
};

const Xf = {
    "loading.msg": () => `ロード中...`,
    "SASServer.genericError.msg": () => `サーバーにアクセスできません。`,
    "SASReport.genericError.msg": () => `選択したレポートをロードできません。`,
    "SASReportImage.genericError.msg": () => `レポートイメージのロードに失敗しました。`,
    "SASReportImage.imageNotSupported.msg": () => `イメージはこのレポートコンテンツの種類でサポートされていません。`
};

const Zf = {
    "loading.msg": () => `로드 중...`,
    "SASServer.genericError.msg": () => `서버에 연결할 수 없습니다.`,
    "SASReport.genericError.msg": () => `선택한 리포트를 로드할 수 없습니다.`,
    "SASReportImage.genericError.msg": () => `리포트 이미지를 로드하지 못했습니다.`,
    "SASReportImage.imageNotSupported.msg": () => `이 리포트 콘텐츠 유형에는 이미지가 지원되지 않습니다.`
};

const Jf = {
    "loading.msg": () => `Laster inn...`,
    "SASServer.genericError.msg": () => `Tjeneren kan ikke nås.`,
    "SASReport.genericError.msg": () => `Kan ikke laste inn den valgte rapporten.`,
    "SASReportImage.genericError.msg": () => `Rapportbildet kunne ikke lastes inn.`,
    "SASReportImage.imageNotSupported.msg": () => `Bildene støttes ikke for denne rapportinnholdstypen.`
};

const Qf = {
    "loading.msg": () => `Laden...`,
    "SASServer.genericError.msg": () => `De server is niet bereikbaar.`,
    "SASReport.genericError.msg": () => `Het geselecteerde rapport kan niet worden geladen.`,
    "SASReportImage.genericError.msg": () => `De rapportafbeelding kan niet worden geladen.`,
    "SASReportImage.imageNotSupported.msg": () => `Afbeeldingen worden niet ondersteund voor dit type rapportinhoud.`
};

const eg = {
    "loading.msg": () => `Laster inn...`,
    "SASServer.genericError.msg": () => `Tjeneren kan ikke nås.`,
    "SASReport.genericError.msg": () => `Kan ikke laste inn den valgte rapporten.`,
    "SASReportImage.genericError.msg": () => `Rapportbildet kunne ikke lastes inn.`,
    "SASReportImage.imageNotSupported.msg": () => `Bildene støttes ikke for denne rapportinnholdstypen.`
};

const tg = {
    "loading.msg": () => `Ładowanie...`,
    "SASServer.genericError.msg": () => `Nie można połączyć się z serwerem.`,
    "SASReport.genericError.msg": () => `Nie można załadować wybranego raportu.`,
    "SASReportImage.genericError.msg": () => `Nie udało się załadować obrazu raportu.`,
    "SASReportImage.imageNotSupported.msg": () => `Dla tego typu zawartości raportu obrazy nie są obsługiwane.`
};

const og = {
    "loading.msg": () => `Carregando...`,
    "SASServer.genericError.msg": () => `O servidor não pode ser alcançado.`,
    "SASReport.genericError.msg": () => `Não foi possível carregar o relatório selecionado.`,
    "SASReportImage.genericError.msg": () => `A imagem do relatório falhou ao carregar.`,
    "SASReportImage.imageNotSupported.msg": () => `As imagens não são compatíveis com este tipo de conteúdo de relatório.`
};

const ng = {
    "loading.msg": () => `A carregar...`,
    "SASServer.genericError.msg": () => `Não foi possível contactar o servidor.`,
    "SASReport.genericError.msg": () => `Não foi possível carregar o relatório selecionado.`,
    "SASReportImage.genericError.msg": () => `Falha ao carregar a imagem de relatório.`,
    "SASReportImage.imageNotSupported.msg": () => `Não são suportadas imagens para este tipo de conteúdo de relatório.`
};

const ag = {
    "loading.msg": () => `Загрузка...`,
    "SASServer.genericError.msg": () => `Невозможно связаться с сервером.`,
    "SASReport.genericError.msg": () => `Не удалось загрузить выбранный отчет.`,
    "SASReportImage.genericError.msg": () => `Не удалось загрузить изображение отчета.`,
    "SASReportImage.imageNotSupported.msg": () => `Изображения не поддерживаются для этого типа содержимого отчета.`
};

const rg = {
    "loading.msg": () => `Učitavanje...`,
    "SASServer.genericError.msg": () => `Nije moguće uspostaviti vezu sa serverom.`,
    "SASReport.genericError.msg": () => `Nije moguće učitati izabrani izveštaj.`,
    "SASReportImage.genericError.msg": () => `Učitavanje slike izveštaja nije uspelo.`,
    "SASReportImage.imageNotSupported.msg": () => `Slike nisu podržane za ovaj tip sadržaja izveštaja.`
};

const sg = {
    "loading.msg": () => `Načítava sa...`,
    "SASServer.genericError.msg": () => `Nedá sa spojiť so serverom.`,
    "SASReport.genericError.msg": () => `Nedá sa načítať vybratý report.`,
    "SASReportImage.genericError.msg": () => `Nepodarilo sa načítať obrázok reportu.`,
    "SASReportImage.imageNotSupported.msg": () => `Pre tento typ obsahu reportu nie sú obrázky podporované.`
};

const ig = {
    "loading.msg": () => `Nalaganje ...`,
    "SASServer.genericError.msg": () => `Strežnika ni mogoče doseči.`,
    "SASReport.genericError.msg": () => `Izbranega poročila ni mogoče naložiti.`,
    "SASReportImage.genericError.msg": () => `Slike poročila ni bilo mogoče naložiti.`,
    "SASReportImage.imageNotSupported.msg": () => `Slike za to vrsto vsebine poročila niso podprte.`
};

const lg = {
    "loading.msg": () => `Učitavanje...`,
    "SASServer.genericError.msg": () => `Nije moguće uspostaviti vezu sa serverom.`,
    "SASReport.genericError.msg": () => `Nije moguće učitati izabrani izveštaj.`,
    "SASReportImage.genericError.msg": () => `Učitavanje slike izveštaja nije uspelo.`,
    "SASReportImage.imageNotSupported.msg": () => `Slike nisu podržane za ovaj tip sadržaja izveštaja.`
};

const cg = {
    "loading.msg": () => `Läser in...`,
    "SASServer.genericError.msg": () => `Servern kan inte nås.`,
    "SASReport.genericError.msg": () => `Det går inte att läsa in den valda rapporten.`,
    "SASReportImage.genericError.msg": () => `Det gick inte att läsa in rapportbilden.`,
    "SASReportImage.imageNotSupported.msg": () => `Bilder stöds inte för den här rapportinnehållstypen.`
};

const dg = {
    "loading.msg": () => `กำลังโหลด…`,
    "SASServer.genericError.msg": () => `ไม่สามารถเข้าถึงเซิร์ฟเวอร์ได้`,
    "SASReport.genericError.msg": () => `ไม่สามารถโหลดรายงานที่เลือกได้`,
    "SASReportImage.genericError.msg": () => `ไม่สามารถโหลดภาพรายงานได้`,
    "SASReportImage.imageNotSupported.msg": () => `ไม่รองรับภาพสำหรับประเภทเนื้อหารายงานนี้`
};

const ug = {
    "loading.msg": () => `Yükleniyor...`,
    "SASServer.genericError.msg": () => `Sunucuya erişim sağlanamıyor.`,
    "SASReport.genericError.msg": () => `Seçili rapor yüklenemiyor.`,
    "SASReportImage.genericError.msg": () => `Rapor görüntüsü yüklenemedi.`,
    "SASReportImage.imageNotSupported.msg": () => `Görüntüler bu rapor içeriği tipinde desteklenmiyor.`
};

const mg = {
    "loading.msg": () => `正在加载...`,
    "SASServer.genericError.msg": () => `无法访问服务器。`,
    "SASReport.genericError.msg": () => `无法加载选定的报表。`,
    "SASReportImage.genericError.msg": () => `报表图像加载失败。`,
    "SASReportImage.imageNotSupported.msg": () => `该报表内容类型不支持图像。`
};

const pg = {
    "loading.msg": () => `正在載入…`,
    "SASServer.genericError.msg": () => `無法連到伺服器。`,
    "SASReport.genericError.msg": () => `無法載入所選的報表。`,
    "SASReportImage.genericError.msg": () => `無法載入報表影像。`,
    "SASReportImage.imageNotSupported.msg": () => `此報表內容類型不支援影像。`
};

const fg = {
    "": Pf,
    ar: Bf,
    cs: zf,
    da: Ff,
    de: jf,
    el: Vf,
    es: Hf,
    fi: Uf,
    fr: Gf,
    he: Kf,
    hr: Wf,
    hu: $f,
    it: Yf,
    iw: qf,
    ja: Xf,
    ko: Zf,
    nb: Jf,
    nl: Qf,
    no: eg,
    pl: tg,
    "pt-BR": og,
    pt: ng,
    ru: ag,
    sh: rg,
    sk: sg,
    sl: ig,
    sr: lg,
    sv: cg,
    th: dg,
    tr: ug,
    "zh-Hans": mg,
    "zh-Hant": pg
};

const gg = [ "pl-xx", "ar-xx", "zh-cn-pseudo" ];

const hg = [ "it-it-pseudo", "fr-fr-pseudo", "de-de-pseudo", "es-es-pseudo", "pl-pl-pseudo", "ru-ru-pseudo", "lt-lt-pseudo" ];

const bg = e => gg.includes(e.toLowerCase());

const vg = e => hg.includes(e.toLowerCase());

const yg = async () => Promise.resolve().then((function() {
    return Pg;
}));

const xg = async () => import("./chunk5.mjs");

function Sg(e) {
    return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e["default"] : e;
}

const wg = {
    a: "ą",
    c: "ć",
    d: "đ",
    e: "ę",
    i: "í",
    l: "ł",
    n: "ň",
    o: "ő",
    r: "ř",
    s: "ś",
    t: "ţ",
    u: "ű",
    z: "ż",
    A: "Ą",
    C: "Ć",
    D: "Đ",
    E: "Ę",
    I: "Í",
    L: "Ł",
    N: "Ň",
    O: "Ő",
    R: "Ř",
    S: "Ś",
    T: "Ţ",
    U: "Ű",
    Z: "Ż"
};

const Cg = {
    a: "å",
    b: "þ",
    c: "ç",
    d: "ð",
    e: "ë",
    i: "î",
    n: "ñ",
    o: "ǿ",
    u: "ü",
    y: "ÿ",
    A: "Å",
    B: "ß",
    C: "Ç",
    D: "Ð",
    E: "Ë",
    I: "Î",
    N: "Ñ",
    O: "Ǿ",
    U: "Ü",
    Y: "Ÿ"
};

const Eg = {
    A: "ٯ",
    B: "إ",
    C: "ژ",
    D: "ٺ",
    E: "ٻ",
    F: "ټ",
    G: "ں",
    H: "آ",
    I: "ک",
    J: "ھ",
    K: "ٹ",
    L: "ہ",
    M: "ٽ",
    N: "أ",
    O: "گ",
    P: "ے",
    Q: "ٿ",
    R: "ج",
    S: "ڀ",
    T: "ځ",
    U: "پ",
    V: "ؤ",
    W: "ڂ",
    X: "ي",
    Y: "چ",
    Z: "ة",
    a: "ش",
    b: "ذ",
    c: "ز",
    d: "ڈ",
    e: "ث",
    f: "ب",
    g: "ل",
    h: "ا",
    i: "ه",
    j: "ت",
    k: "ن",
    l: "م",
    m: "ئ",
    n: "د",
    o: "خ",
    p: "ح",
    q: "ض",
    r: "ق",
    s: "س",
    t: "ف",
    u: "ع",
    v: "ر",
    w: "ص",
    x: "ط",
    y: "غ",
    z: "ظ"
};

var Ig = {
    pl_pseudoCharMap: wg,
    fr_pseudoCharMap: Cg,
    ar_pseudoCharMap: Eg
};

const _g = Ig;

const Dg = new RegExp("^(_)+([a-zA-Z0-9]+)(_)+$");

class Lg {
    constructor(e) {
        this._pseudo = {};
        this._createPseudo(e);
    }
    static builder(e) {
        return new Lg(e);
    }
    _createPseudo(e) {
        for (const t of Object.keys(this._strategies)) {
            this._pseudo[t] = this.pseudoLocalizeWith(this._strategies[t], e);
        }
    }
    getPseudo() {
        return this._pseudo;
    }
    _getExtension(e, t, o, n) {
        let a, r = "", s = e <= this._expMap.length ? this._expMap[e] : e * .16;
        s = t > 0 ? parseInt(s / t) : 0;
        if (s === 0 || o.length === 0) return r;
        r = o.repeat(s);
        if (s <= 3) return r;
        var i = [];
        for (a = 0; a < s; a++) {
            if (a === 1 || a > 0 && a % 6 === 0) i.push(" "); else i.push(o);
        }
        r = i.join("");
        return r;
    }
    _transformString(e, t) {
        if (!t || t.length === 0 || Dg.test(t)) {
            return t;
        }
        var o = e.map;
        t = t.replace(/\\[nrt]|\\u([0-9A-Fa-f]{4})/g, "%$&!");
        const {result: n, charCount: a} = t.split("").reduce((({ignoreFn: e, result: t, charCount: n}, a, r) => {
            if (e && e(a, r)) {
                e = null;
            }
            if (!e) {
                e = this._ignoreMap[a];
                if (!e) {
                    if (a.match(/[a-z0-9]/i)) n += 1;
                    if (o != null && o[a]) {
                        a = o[a];
                    }
                }
            }
            t += a;
            return {
                ignoreFn: e,
                result: t,
                charCount: n
            };
        }), {
            ignoreFn: null,
            result: "",
            charCount: 0
        });
        var r = n.replace(/\%(\\[nrt]|\\u([0-9A-Fa-f]{4}))\!/g, (function(e, t, o) {
            return e.substr(1).slice(0, -1);
        }));
        var s = e.prefix + r + this._getExtension(a, e.ratio, e.extChar, e.locale) + e.suffix;
        return s;
    }
    _getStrategy(e) {
        var t;
        switch (e) {
          case "plxx":
            t = strategies["plxx"];
            break;

          case "frxx":
            t = strategies["frxx"];
            break;

          case "zhxx":
            t = strategies["zhxx"];
            break;

          default:
            t = strategies["plxx"];
            break;
        }
        return t;
    }
    _utf8_2ascii(e) {
        var t = "";
        for (var o = 0; o < e.length; o++) {
            if (e.charCodeAt(o) < 128) {
                t += e.charAt(o);
            } else {
                var n = "" + e.charCodeAt(o).toString(16).toUpperCase();
                t += "\\u" + (n.length === 2 ? "00" + n : n.length === 3 ? "0" + n : n);
            }
        }
        return t;
    }
    _hasPlaceholder(e) {
        var t = /\{[A-Za-z0-9_]+}/g;
        return e.match(t);
    }
    pseudoLocalizeWith(e, t) {
        var o = this._transformString(e, t);
        return this._utf8_2ascii(o);
    }
    pseudoLocalize(e, t) {
        if (t.length <= 1) return t;
        var o = this._getStrategy(e);
        return this.pseudoLocalizeWith(o);
    }
}

Lg.prototype._expMap = [ 0, 0, 1, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14 ];

Lg.prototype._ignoreMap = {
    "<": e => e === ">",
    "{": e => e === "}",
    "%": e => ~[ " ", ",", ":", ";", "?", "!", ")", "}", "]" ].indexOf(e),
    "&": e => ~[ " ", ";" ].indexOf(e)
};

Lg.prototype._strategies = {
    pl_XX: {
        prefix: "[",
        suffix: "]",
        map: _g.pl_pseudoCharMap,
        extChar: "@",
        quote: "",
        locale: "pl_XX",
        ratio: 1
    },
    zh_CN_pseudo: {
        prefix: "Ｘ",
        suffix: "Ｚ",
        map: null,
        extChar: "补",
        quote: "",
        locale: "zh_CN_pseudo",
        ratio: 1.25
    },
    ar_XX: {
        prefix: "",
        suffix: "",
        map: _g.ar_pseudoCharMap,
        extChar: "",
        quote: "",
        locale: "ar_XX",
        ratio: 1
    }
};

var Tg = Lg.builder;

var Rg = Sg(Tg);

const kg = Rg("");

const Ag = e => kg._strategies[Mg(e)];

const Mg = e => {
    e = e.toLowerCase();
    switch (e) {
      case "zh-cn-pseudo":
        return "zh_CN_pseudo";

      case "ar-xx":
        return "ar_XX";

      case "pl-xx":
      default:
        return "pl_XX";
    }
};

const Ng = (e, t) => {
    if (t && t.length < 1) return t;
    const o = Ag(e);
    return kg._transformString(o, t);
};

const Og = (e, t) => {
    if (!t) {
        return t;
    }
    const o = {};
    Object.keys(t).forEach((n => {
        if (/[._](notrans|lcl|image|classname|gif)$/i.test(n)) o[n] = t[n]; else o[n] = Ng(e, t[n]);
    }));
    return o;
};

var Pg = Object.freeze({
    __proto__: null,
    pseudoLocalizeBundle: Og,
    pseudoLocalizeStringForLocale: Ng
});

function Bg(e, t) {
    var o;
    const n = e[""];
    if (n === undefined) {
        throw new Error;
    }
    let a;
    let r = undefined;
    const s = Object.keys(e);
    if (bg(t[0])) {
        r = e => {
            const o = {};
            for (const [n, a] of Object.entries(e)) {
                o[n] = (...e) => Ng(t[0], a(...e));
            }
            return o;
        };
        a = Fg([ t[0] ], s);
    } else {
        a = Fg(t, s);
    }
    if (n instanceof Function) {
        const t = a.map((t => e[t])).map((e => e()));
        return Promise.all(t).then((e => {
            var t;
            const o = e.map((e => e.default));
            const n = Object.assign({}, ...o);
            return (t = r === null || r === void 0 ? void 0 : r(n)) !== null && t !== void 0 ? t : n;
        }));
    } else {
        const t = a.map((t => e[t]));
        const n = Object.assign({}, ...t);
        return (o = r === null || r === void 0 ? void 0 : r(n)) !== null && o !== void 0 ? o : n;
    }
}

const zg = "en";

function Fg(e, t) {
    const o = t.concat([ zg ]);
    const n = e.map((e => {
        e = Vg[e] || e;
        const t = (e, t) => jg(e, t) ? 1 : -1;
        return o.filter((t => jg(e, t))).sort(t);
    }));
    const a = n.filter((e => e.length > 0));
    const r = n.filter((e => e.length > 1));
    let s = [];
    if (r.length > 0) {
        s = r[0];
    } else if (a.length > 0) {
        s = a[0];
    } else {
        throw new Error(`Could not find a loader for locales: ${e}`);
    }
    return s.filter((e => e !== zg));
}

function jg(e, t) {
    e = e.replace(/\_/g, "-");
    t = t.replace(/\_/g, "-");
    if (t === "" || e === t) {
        return true;
    }
    if (!e.startsWith(t)) {
        return false;
    }
    const o = e[t.length];
    return o === "-";
}

const Vg = {
    zh: "zh-Hans",
    "zh-CN": "zh-Hans",
    "zh-HK": "zh-Hant",
    "zh-TW": "zh-Hant"
};

const Hg = Bg(fg, navigator.languages);

function Ug(e) {
    if (!globalThis.location?.href) {
        return null;
    }
    const t = new URL(window.location.href);
    return t.searchParams.get(e);
}

function Gg(e) {
    const t = Ug(e);
    switch (t?.toLowerCase()) {
      case undefined:
        return null;

      case "true":
        return true;

      case "false":
        return false;

      default:
        console.warn(`Unexpected value for "${e}" search param flag: ${t}`);
        return null;
    }
}

let Kg = false;

const Wg = Gg("VASDK_USERSTATE") ?? false;

if (Wg) {
    Kg = true;
}

function $g() {
    return Kg;
}

let Yg = false;

function qg() {
    Yg = true;
}

const Xg = () => Yg;

function Zg(e) {
    const [t, o] = n(e.value);
    a((() => {
        const t = e.subscribe(o);
        return () => t.unsubscribe();
    }), [ e ]);
    return t;
}

const Jg = new R(false);

function Qg(e) {
    Jg.next(!!e);
}

function eh() {
    return Jg.getValue();
}

function th() {
    return Zg(Jg);
}

const oh = new R(undefined);

function nh(e) {
    oh.next(e);
}

function ah() {
    return Zg(oh);
}

const rh = new Set([ "Arab", "Hebr", "Thaa", "Syrc", "Syre", "Syrj", "Syrn", "Mand", "Samr", "Mend", "Nkoo", "Adlm", "Rohg", "Yezi" ]);

function sh(e) {
    var t, o, n;
    const a = e.maximize();
    const r = (t = e.textInfo) !== null && t !== void 0 ? t : a.textInfo;
    if (r === null || r === void 0 ? void 0 : r.direction) {
        return r === null || r === void 0 ? void 0 : r.direction;
    }
    const s = rh.has((n = (o = e.script) !== null && o !== void 0 ? o : a.script) !== null && n !== void 0 ? n : "");
    return s ? "rtl" : "ltr";
}

function ih(e) {
    try {
        new Intl.Locale(e);
        return true;
    } catch (e) {
        return false;
    }
}

const lh = e => {
    const [t, o, n] = e.split(/[-_]/);
    let a = "";
    let r = "";
    if (o) {
        if (o.length === 4) {
            a = o;
            r = n ?? "";
        } else {
            r = o;
        }
    }
    if (r.length !== 2 && r.length !== 3) {
        r = "";
    }
    const s = a === "" ? "" : a[0].toUpperCase() + a.substring(1).toLowerCase();
    return {
        lang: t.toLowerCase(),
        script: s,
        region: r.toUpperCase()
    };
};

const ch = e => {
    let t = e.lang;
    if (e.script) {
        t += `-${e.script}`;
    }
    if (e.region) {
        t += `-${e.region}`;
    }
    return t;
};

const dh = e => {
    const t = e.replace("_", "-");
    const o = ch(lh(t));
    if (t.toLowerCase().indexOf("pseudo") > -1) {
        return `${o}-pseudo`;
    }
    if (t.endsWith("-x-rtl")) {
        return `${o}-x-rtl`;
    }
    return o;
};

const uh = e => {
    if (e === "th" || e === "th-TH") return true;
    return false;
};

const mh = e => {
    if (e === "ar-SA") return true;
    return false;
};

const ph = e => {
    if (e.includes("-u-nu-latn")) return e;
    const t = [ "ar", "bn", "fa", "mr" ];
    return t.includes(e.substring(0, 2)) ? `${e}-u-nu-latn` : e;
};

const fh = e => {
    const t = "en";
    const o = [ t ];
    if (e === undefined) {
        return o;
    }
    const n = lh(e);
    const a = ch(n);
    const {lang: r, region: s} = n;
    let {script: i} = n;
    if (r === "zh") {
        if (i !== "Hans" && i !== "Hant") {
            switch (s) {
              case "TW":
              case "HK":
              case "MO":
                i = "Hant";
                break;

              default:
                i = "Hans";
                if (a !== "zh") {
                    o.unshift("zh");
                }
            }
        } else if (i === "Hans") {
            if (a !== "zh") {
                o.unshift("zh");
            }
        }
    } else if (r !== t) {
        if (r === "nn") o.unshift("nb");
        o.unshift(r);
    }
    if (i !== "") {
        o.unshift(`${r}-${i}`);
    }
    if (s !== "") {
        o.unshift(`${r}-${s}`);
        if (i !== "") {
            o.unshift(`${r}-${i}-${s}`);
        }
    }
    if (e.toLowerCase().indexOf("pseudo") > -1) {
        o.unshift(`${a}-pseudo`);
    }
    return o;
};

class gh {
    type="3rdParty";
    init(e) {
        e.services.languageUtils.toResolveHierarchy = function(e, t) {
            return fh(e);
        };
    }
}

const hh = [ "debug", "info", "warn", "error", "none" ];

const bh = hh.indexOf("error");

const vh = hh.length - 1;

const yh = e => {
    const t = hh.indexOf(e);
    if (t > -1) {
        return t;
    }
    return bh;
};

const xh = new URLSearchParams(window.location.search).getAll("nova-log").reduce(((e, t) => {
    const o = t.split(",").filter((e => !!e));
    for (const t of o) {
        if (t.includes(":")) {
            const o = t.split(":");
            e[o[0]] = yh(o[1]);
        } else {
            e[""] = yh(t);
        }
    }
    return e;
}), {
    "": bh
});

const Sh = (e = "") => {
    const t = xh[e] ?? vh;
    const o = xh[""];
    return Math.min(t, o);
};

const wh = (e, t = "") => {
    xh[t] = hh.indexOf(e);
};

const Ch = (e = "") => hh[Sh(e)];

const Eh = new Intl.DateTimeFormat(undefined, {
    hour: "numeric",
    minute: "numeric",
    second: "numeric",
    fractionalSecondDigits: 3
});

const Ih = (e, t, o) => `${Eh.format(Date.now())} ${o.toUpperCase()} ${t ? `${t}: ` : ""}${e}`;

const _h = (e, t, o) => {
    const n = Sh(t);
    if (e >= n) {
        const n = hh[e];
        const a = (() => {
            switch (typeof o) {
              case "function":
                return o();

              case "object":
                return JSON.stringify(o);

              default:
                return o;
            }
        })();
        if (n === "none") return;
        console[n](Ih(a, t, n));
    }
};

const Dh = (e = "") => hh.reduce(((t, o, n) => {
    if (o !== "none") {
        t[o] = t => _h(n, e, t);
    }
    return t;
}), {});

(function(e) {
    e.sas = e.sas || {};
    if (Object.isFrozen(e.sas)) {
        Dh("Logging").warn("Could not create globally accessible nova logger");
        return;
    }
    e.sas.nova = e.sas.nova || {};
    e.sas.nova.logging = {
        getLogger: Dh,
        getLogLevel: Ch,
        setLogLevel: wh
    };
})(window);

function Lh(e) {
    return !!e.messages;
}

function Th(e) {
    if (Lh(e)) {
        return e;
    }
    const {name: t = "", ...o} = e;
    return {
        name: t,
        comments: [],
        messages: o
    };
}

const Rh = "en";

const kh = "P95";

const Ah = [ "it", "fr", "es", "de", "pl", "ru" ];

const Mh = Dh("I18nextMergeBackend");

class Nh {
    type="backend";
    backends=[];
    init(e, t, o) {
        this.backends = t.backends.map((t => {
            const {instance: n, options: a} = t;
            n.init(e, a, o);
            return n;
        }));
    }
    async read(e, t, o) {
        Mh.info(`Request for bundle '${t}' in ${e}`);
        let n;
        try {
            if (bg(e)) {
                n = await this.readPseudoI18nLocale(e, t);
            } else if (vg(e)) {
                n = await this.readPseudoL10nLocale(e, t);
            } else {
                n = await this.readLocale(e, t);
            }
            Mh.info(`Result for bundle '${t}' in ${e}`);
            Mh.info(JSON.stringify(n, undefined, 2));
            o(null, n.messages);
        } catch (e) {
            o(e, false);
        }
    }
    async readLocale(e, t) {
        const o = this.backends.map((t => ({
            backend: t,
            language: e
        })));
        for (const e of this.backends) {
            if (e.defaultProvider) {
                o.push({
                    backend: e,
                    language: Rh
                });
            }
        }
        const n = o.map((({backend: e, language: o}) => this.readBackendAsPromise(o, t, e)));
        const a = await Promise.all(n);
        const r = a.slice(0, this.backends.length).some((e => e !== null));
        if (!r) {
            throw new Error("No bundles for that locale");
        }
        return Oh(a);
    }
    async readPseudoI18nLocale(e, t) {
        Mh.debug(`${t}/${e} readPseudoI18n`);
        yg();
        const o = Promise.all(this.backends.map((o => this.readBackendAsPromise(e, t, o))));
        const n = Promise.all(this.backends.map((e => this.readBackendAsPromise(Rh, t, e))));
        const a = Oh(await o);
        const r = Oh(await n);
        const {pseudoLocalizeBundle: s} = await yg();
        r.messages = s(e, r.messages);
        return Oh([ a, r ]);
    }
    async readPseudoL10nLocale(e, t) {
        xg();
        const o = Promise.all(this.backends.map((o => this.readBackendAsPromise(e, t, o))));
        const n = e.substring(0, 2);
        const a = Promise.all(this.backends.map((e => this.readBackendAsPromise(n, t, e))));
        const r = Promise.all(this.backends.map((e => this.readBackendAsPromise(Rh, t, e))));
        const s = Oh(await o);
        const i = Oh(await a);
        const l = Oh(await r);
        let c = kh;
        const d = await xg();
        if (e === "lt-LT-pseudo") {
            const {getTag: e} = d;
            e: for (const o of Ah) {
                for (const n of this.backends) {
                    const a = await this.readBackendAsPromise(o, t, n);
                    if (a) {
                        const t = e(a);
                        if (t) {
                            c = t;
                            break e;
                        }
                    }
                }
            }
        }
        const u = d.pseudoLocalize4L10n(l, i, e, c);
        return Oh([ s, u ]);
    }
    readBackendAsPromise(e, t, o) {
        return new Promise((n => {
            o.read(e, t, ((e, t) => {
                if (!e && t && typeof t === "object") {
                    n(Th(t));
                } else {
                    n(null);
                }
            }));
        }));
    }
    create(e, t, o, n) {}
}

function Oh(e) {
    return e.filter((e => !!e)).map(Th).reduce(((e, t) => ({
        ...e,
        messages: {
            ...t.messages,
            ...e.messages
        },
        comments: Ph(e.comments, t.comments)
    })), {
        comments: [],
        messages: {}
    });
}

function Ph(e, t) {
    const o = new Set([ ...e, ...t ]);
    return Array.from(o);
}

class Bh {
    type="i18nFormat";
    entityMap={
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "/": "&#x2F;"
    };
    escape(e) {
        return e.replace(/[&<>"'\/]/g, (e => this.entityMap[e]));
    }
    parse(e, t, o, n, a) {
        const r = /({[^{}\\}]*})/;
        const s = e.split(r);
        const i = /^\{(.*)\}$/;
        return s.map((e => {
            const o = i.exec(e);
            if (o) {
                const e = t[o[1]?.trim()];
                if (e === null) return "null";
                if (e === undefined) return "undefined";
                return e;
            }
            const n = /\\([{}])/g;
            return e.replace(n, "$1").replace("\\\\", "\\").replace(/\\n/g, "\n");
        })).join("");
    }
}

let zh = new URLSearchParams(window.location.search).get("nova-language")?.replace("_", "-")?.toLowerCase();

if (zh === "zh-xx") {
    zh = "zh-CN-pseudo";
}

if (!zh) {
    zh = navigator.language;
}

const Fh = dh(zh);

function jh({backends: e, backendOptions: t, initialLanguage: o, ...n}) {
    const a = {
        backends: e.map(((e, o) => ({
            instance: e,
            options: t?.[o] ?? null
        })))
    };
    const r = [ new Nh, new gh, new Bh ];
    return [ ...r, ...n.modules ].reduce(((e, t) => e.use(t)), Se).init({
        debug: false,
        fallbackLng: "en",
        lng: o ?? Fh,
        keySeparator: false,
        interpolation: {
            prefix: "{",
            suffix: "}",
            escapeValue: false
        },
        backend: a
    });
}

let Vh = false;

Se.on("initialized", (() => {
    Vh = true;
}));

const Hh = async () => {
    if (Vh) {
        return Promise.resolve();
    }
    return new Promise((e => {
        Se.on("initialized", e);
    }));
};

const Uh = async e => {
    await Hh();
    const t = Se.hasResourceBundle(Se.language, e);
    if (!t) {
        await Se.loadNamespaces(e);
    }
};

const Gh = async e => {
    await Uh(e);
    return (t, o) => Se.t(`${e}:${e}.${t}`, o);
};

const Kh = e => {
    Se.changeLanguage(e);
};

const Wh = e => {
    Se.on("languageChanged", e);
    return () => {
        Se.off("languageChanged", e);
    };
};

const $h = () => Se.language ?? Fh;

const Yh = jn("VASDK_LOCALE");

const qh = jn("VASDK_FORMATTERLOCALE");

let Xh = null;

const Zh = new R(Yh || window.navigator.language);

const Jh = new R(qh || null);

Hh().then((() => {
    Zh.next(Yh || Xh || $h());
    if (Yh) {
        Kh(Yh);
    }
}));

cm.runWhenInitialized((() => {
    Zh.subscribe((e => ea(e)));
}));

Wh((e => Zh.next(Yh || Xh || e)));

function Qh(e) {
    if (!Yh) {
        Xh = e;
        Kh(e || window.navigator.language);
    }
}

function eb() {
    return Zh.getValue();
}

function tb() {
    return Zg(Zh);
}

function ob(e) {
    if (!qh) {
        Jh.next(e);
    }
}

function nb() {
    return Jh.getValue();
}

function ab() {
    return sb(Zh.value);
}

function rb() {
    const e = tb();
    return r((() => sb(e)), [ e ]);
}

function sb(e) {
    if (e.endsWith("-rtl")) {
        return "rtl";
    }
    if (!ih(e)) {
        return "ltr";
    }
    return sh(new Intl.Locale(e));
}

function ib(e, t, o) {
    return jh({
        backends: e,
        backendOptions: t,
        initialLanguage: o,
        modules: [ Ce ]
    });
}

const lb = e => {
    const {t: t} = we(e);
    return s(((o, n) => t(`${e}:${e}.${o}`, n)), [ t, e ]);
};

const cb = e => {
    a((() => Wh(e)), [ e ]);
};

const db = () => {
    const [e, t] = n(Se.language ?? Fh);
    cb(t);
    return e;
};

const ub = {};

const mb = e => ub[e];

const pb = e => {
    ub[e.name] = Th(e);
};

const fb = e => {
    pb(Th(e));
    Uh(e.name);
    return () => lb(e.name);
};

function gb(e, t) {
    if (e) {
        return `${e}-${t}`;
    } else {
        return e;
    }
}

class hb {
    listeners={};
    subscribe(e, t) {
        if (!this.listeners[e]) {
            this.listeners[e] = [];
        }
        this.listeners[e].push(t);
    }
    unsubscribe(e, t) {
        if (!this.listeners[e]) {
            return;
        }
        this.listeners[e] = this.listeners[e].filter((e => e !== t));
    }
    publish(e, t) {
        const o = this.listeners[e] ?? [];
        o.forEach((o => o(e, t)));
    }
}

const bb = new hb;

const vb = {
    colorNeutral: "hsl(216, 13%, 53%)",
    colorPrimary: "hsl(205, 97%, 35%)",
    colorSecondary: "hsl(329, 75%, 30%)",
    colorAlert: "hsl(360, 100%, 42%)",
    colorWarning: "hsl(40, 100%, 28%)",
    colorSuccess: "hsl(124, 85%, 26%)",
    colorInfo: "hsl(205, 99%, 37%)",
    colorStatusNeutral: "hsl(216, 13%, 45%)",
    colorUiLight: "hsl(0, 100%, 100%)",
    colorUiMedium: "hsl(210, 17%, 98%)",
    colorUiDark: "hsl(220, 13%, 95%)",
    colorUiBorder: "hsl(218, 12%, 83%)",
    colorUiPop: "hsl(205, 97%, 41%)",
    colorTextDefault: "hsl(0, 0%, 0%)",
    colorTextLabel: "hsl(218, 13%, 46%)",
    colorTextInverse: "hsl(0, 100%, 100%)",
    colorTextPrimary: "hsl(205, 97%, 35%)",
    colorTextSecondary: "hsl(329, 75%, 30%)",
    colorTextPop: "hsl(0, 0%, 100%)",
    colorGraph1: "#33a3ff",
    colorGraph2: "#ffcc32",
    colorGraph3: "#9471ff",
    colorGraph4: "#ff8224",
    colorGraph5: "#2ad1d1",
    colorGraph6: "#dd5757",
    colorGraph7: "#15b57b",
    colorGraph8: "#ff6fbd",
    colorKPI1: "#dd5757",
    colorKPI3: "#ffcc32",
    colorKPI5: "#15b57b"
};

const yb = {
    colorNeutral: "hsl(205, 25%, 70%)",
    colorPrimary: "hsl(205, 97%, 63%)",
    colorSecondary: "hsl(329, 75%, 43%)",
    colorAlert: "hsl(360, 100%, 65%)",
    colorWarning: "hsl(40, 100%, 58%)",
    colorSuccess: "hsl(124, 85%, 36%)",
    colorInfo: "hsl(205, 99%, 59%)",
    colorStatusNeutral: "hsl(205, 25%, 70%)",
    colorUiLight: "hsl(205, 90%, 8%)",
    colorUiMedium: "hsl(205, 90%, 15%)",
    colorUiDark: "hsl(205, 90%, 12%)",
    colorUiBorder: "hsl(205, 22%, 26%)",
    colorUiPop: "hsl(205, 90%, 15%)",
    colorTextDefault: "hsl(0, 100%, 100%)",
    colorTextLabel: "hsl(223, 10%, 64%)",
    colorTextInverse: "hsl(205, 90%, 8%)",
    colorTextPrimary: "hsl(205, 97%, 63%)",
    colorTextSecondary: "hsl(329, 75%, 43%)",
    colorTextPop: "hsl(0, 0%, 100%)",
    colorGraph1: "#2470ad",
    colorGraph2: "#98863c",
    colorGraph3: "#5954ad",
    colorGraph4: "#985b30",
    colorGraph5: "#238a92",
    colorGraph6: "#84414b",
    colorGraph7: "#17785f",
    colorGraph8: "#985186",
    colorKPI1: "#84414b",
    colorKPI3: "#98863c",
    colorKPI5: "#17785f"
};

const xb = {
    colorNeutral: "hsl(205, 30%, 90%)",
    colorPrimary: "hsl(205, 97%, 76%)",
    colorSecondary: "hsl(329, 75%, 90%)",
    colorAlert: "hsl(360, 80%, 80%)",
    colorWarning: "hsl(40, 80%, 75%)",
    colorSuccess: "hsl(124, 60%, 75%)",
    colorInfo: "hsl(205, 80%, 75%)",
    colorStatusNeutral: "hsl(205, 30%, 90%)",
    colorUiLight: "hsl(0, 0%, 0%)",
    colorUiMedium: "hsl(212, 10%, 17%)",
    colorUiDark: "hsl(0, 0%, 0%)",
    colorUiBorder: "hsl(218, 12%, 83%)",
    colorUiPop: "hsl(212, 10%, 12%)",
    colorTextDefault: "hsl(0, 0%, 100%)",
    colorTextLabel: "hsl(0, 0%, 100%)",
    colorTextInverse: "hsl(0, 0%, 0%)",
    colorTextPrimary: "hsl(205, 97%, 76%)",
    colorTextSecondary: "hsl(329, 75%, 90%)",
    colorTextPop: "hsl(0, 0%, 100%)",
    colorGraph1: "#4aacff",
    colorGraph2: "#f1d700",
    colorGraph3: "#c68aff",
    colorGraph4: "#f98e39",
    colorGraph5: "#00d692",
    colorGraph6: "#ff817a",
    colorGraph7: "#7cbf00",
    colorGraph8: "#ff6fbd",
    colorKPI1: "#ff5e4d",
    colorKPI3: "#f2d94b",
    colorKPI5: "#7bb04a"
};

const Sb = {
    neutral: "#768396",
    primary: "#0378cd",
    secondary: "#86134f",
    alert: "#d80000",
    warning: "#916000",
    success: "#0a7c12",
    information: "#016DBA"
};

const wb = {
    baseThemeName: "light",
    colors: {
        ...Sb,
        ...vb
    },
    enableNovaTokens: false
};

const Cb = {
    ...wb,
    colors: {
        ...wb.colors,
        ...yb
    },
    baseThemeName: "dark"
};

const Eb = {
    ...wb,
    baseThemeName: "high-contrast",
    colors: {
        ...wb.colors,
        secondary: "#EA6CAD",
        alert: "#ff6347",
        warning: "#daa520",
        success: "#32cd32",
        information: "#22a7f0",
        ...xb
    }
};

const Ib = {
    light: wb,
    dark: Cb,
    "high-contrast": Eb
};

const _b = {
    sas_corporate: {
        baseThemeName: "light",
        colors: {
            ...Sb,
            ...vb
        }
    },
    sas_ignite: {
        baseThemeName: "dark",
        colors: {
            ...Sb,
            ...yb
        }
    },
    sas_hcb: {
        baseThemeName: "high-contrast",
        colors: {
            ...Sb,
            secondary: "#EA6CAD",
            alert: "#ff6347",
            warning: "#daa520",
            success: "#32cd32",
            information: "#22a7f0",
            ...xb
        }
    }
};

const Db = {
    marine: {
        baseThemeName: "light",
        colors: {
            neutral: "#828282",
            primary: "#4e4e4e",
            secondary: "#4e4e4e",
            alert: "#d80000",
            warning: "#916000",
            success: "#0a7c12",
            information: "#016dba"
        }
    },
    midnight: {
        baseThemeName: "dark",
        colors: {
            neutral: "#fff",
            primary: "#0378cd",
            secondary: "#0378cd",
            alert: "#d80000",
            warning: "#916000",
            success: "#0a7c12",
            information: "#016dba"
        }
    },
    midnight2020: {
        baseThemeName: "dark",
        colors: {
            neutral: "#fff",
            primary: "#0378cd",
            secondary: "#0378cd",
            alert: "#d80000",
            warning: "#916000",
            success: "#0a7c12",
            information: "#016dba"
        }
    },
    opal: {
        baseThemeName: "light",
        colors: {
            neutral: "#768396",
            primary: "#3c444f",
            secondary: "#3c444f",
            alert: "#d80000",
            warning: "#916000",
            success: "#0a7c12",
            information: "#016dba"
        }
    },
    sail: {
        baseThemeName: "light",
        colors: {
            neutral: "#828282",
            primary: "#4e4e4e",
            secondary: "#4e4e4e",
            alert: "#d80000",
            warning: "#916000",
            success: "#0a7c12",
            information: "#0072b2"
        }
    },
    aqua: {
        baseThemeName: "light",
        colors: {
            neutral: "#828282",
            primary: "#4e4e4e",
            secondary: "#4e4e4e",
            alert: "#d80000",
            warning: "#916000",
            success: "#0a7c12",
            information: "#0072b2"
        }
    },
    umstead: {
        baseThemeName: "light",
        colors: {
            neutral: "#828282",
            primary: "#4e4e4e",
            secondary: "#4e4e4e",
            alert: "#d80000",
            warning: "#916000",
            success: "#0a7c12",
            information: "#016dba"
        }
    },
    highcontrast2020: {
        baseThemeName: "high-contrast",
        colors: {
            neutral: "#fff",
            primary: "#0378cd",
            secondary: "#86134f",
            alert: "#d80000",
            warning: "#916000",
            success: "#0a7c12",
            information: "#016dba"
        }
    },
    highcontrast2018: {
        baseThemeName: "high-contrast",
        colors: {
            neutral: "#fff",
            primary: "#44affc",
            secondary: "#ea6cad",
            alert: "#ff6347",
            warning: "#daa520",
            success: "#32cd32",
            information: "#22a7f0"
        }
    },
    highcontrast2017: {
        baseThemeName: "high-contrast",
        colors: {
            neutral: "#fff",
            primary: "#98fb98",
            secondary: "#0ff",
            alert: "#ff6347",
            warning: "#daa520",
            success: "#32cd32",
            information: "#22a7f0"
        }
    },
    light: {
        baseThemeName: "light",
        colors: {
            neutral: "#768396",
            primary: "#0378cd",
            secondary: "#287eab",
            alert: "#d80000",
            warning: "#916000",
            success: "#0a7c12",
            information: "#016dba"
        }
    },
    dark: {
        baseThemeName: "dark",
        colors: {
            neutral: "#768396",
            primary: "#0378cd",
            secondary: "#287eab",
            alert: "#d80000",
            warning: "#916000",
            success: "#0a7c12",
            information: "#016dba"
        }
    },
    snow: {
        baseThemeName: "light",
        colors: {
            neutral: "#768396",
            primary: "#0378cd",
            secondary: "#287eab",
            alert: "#d80000",
            warning: "#916000",
            success: "#0a7c12",
            information: "#016dba"
        }
    },
    highcontrast: {
        baseThemeName: "high-contrast",
        colors: {
            neutral: "#ffffff",
            primary: "#00fffc",
            secondary: "#00fffc",
            alert: "#d80000",
            warning: "#916000",
            success: "#0a7c12",
            information: "#016dba"
        }
    }
};

const Lb = {
    ...Db,
    ..._b
};

const Tb = e => {
    const t = new Set;
    let o = e;
    while (/{![a-zA-Z0-9\-]+}/.test(o)) {
        const e = /{![a-zA-Z0-9\-]+}/.exec(o);
        t.add(e[0]);
        o = o.replace(e[0], "");
    }
    return Array.from(t);
};

const Rb = /^rgb\(([0-9]{1,3}),[ ]?([0-9]{1,3}),[ ]?([0-9]{1,3})\)$/;

const kb = /^rgba\(([0-9]{1,3}),[ ]?([0-9]{1,3}),[ ]?([0-9]{1,3}),[ ]?(0|1|1\.0+|0?\.[0-9]+)\)$/;

const Ab = /^#([0-9a-f]{3})$/i;

const Mb = /^#([0-9a-f]{6})$/i;

const Nb = /^hsl\(([0-9]{1,3}),[ ]?([0-9]{1,3})%,[ ]?([0-9]{1,3})%\)$/;

const Ob = /^hsla\(([0-9]{1,3}),[ ]?([0-9]{1,3})%,[ ]?([0-9]{1,3})%,[ ]?(0|1|1\.0+|0?\.[0-9]+)\)$/;

const Pb = /^hs[vb]\(([0-9]{1,3}),[ ]?([0-9]{1,3})%,[ ]?([0-9]{1,3})%\)$/;

const Bb = /^hs[vb]a\(([0-9]{1,3}),[ ]?([0-9]{1,3})%,[ ]?([0-9]{1,3})%,[ ]?(0|1|1\.0+|0?\.[0-9]+)\)$/;

const zb = e => {
    let t = "";
    if (Mb.test(e)) {
        const o = Mb.exec(e) || [];
        t = o[1];
    } else if (Ab.test(e)) {
        const o = Ab.exec(e) || [];
        const n = o[1];
        for (let e of n) {
            t += e.repeat(2);
        }
    }
    const o = t.slice(0, 2);
    const n = t.slice(2, 4);
    const a = t.slice(4, 6);
    const r = parseInt(o, 16);
    const s = parseInt(n, 16);
    const i = parseInt(a, 16);
    return `rgb(${r}, ${s}, ${i})`;
};

const Fb = e => {
    var t;
    const o = (t = Ob.exec(e)) !== null && t !== void 0 ? t : Nb.exec(e);
    if (!o) {
        throw Error(`Error parsing color: ${e}`);
    }
    const n = parseInt(o[1], 10);
    const a = parseInt(o[2], 10) / 100;
    const r = parseInt(o[3], 10) / 100;
    const s = r + a * Math.min(r, 1 - r);
    const i = s === 0 ? 0 : 2 - 2 * r / s;
    return `hsv(${n}, ${Math.round(i * 100)}%, ${Math.round(s * 100)}%)`;
};

const jb = e => {
    var t;
    const o = (t = Ob.exec(e)) !== null && t !== void 0 ? t : Nb.exec(e);
    if (!o) {
        throw Error(`Error parsing color: ${e}`);
    }
    const n = parseInt(o[1], 10);
    const a = parseInt(o[2], 10) / 100;
    const r = parseInt(o[3], 10) / 100;
    const s = (1 - Math.abs(2 * r - 1)) * a;
    const i = s * (1 - Math.abs(n / 60 % 2 - 1));
    const l = r - s / 2;
    let c, d, u;
    if (n < 60) {
        c = s;
        d = i;
        u = 0;
    } else if (n < 120) {
        c = i;
        d = s;
        u = 0;
    } else if (n < 180) {
        c = 0;
        d = s;
        u = i;
    } else if (n < 240) {
        c = 0;
        d = i;
        u = s;
    } else if (n < 300) {
        c = i;
        d = 0;
        u = s;
    } else {
        c = s;
        d = 0;
        u = i;
    }
    const m = Math.round((c + l) * 255);
    const p = Math.round((d + l) * 255);
    const f = Math.round((u + l) * 255);
    return `rgb(${m}, ${p}, ${f})`;
};

const Vb = e => {
    var t;
    const o = (t = Bb.exec(e)) !== null && t !== void 0 ? t : Pb.exec(e);
    if (!o) {
        throw Error(`Error parsing color: ${e}`);
    }
    const n = parseInt(o[1], 10);
    const a = parseFloat(o[2]) / 100;
    const r = parseFloat(o[3]) / 100;
    const s = r - r * a / 2;
    const i = s === 0 || s === 1 ? 0 : (r - s) / Math.min(s, 1 - s);
    return `hsl(${n}, ${Math.round(i * 100)}%, ${Math.round(s * 100)}%)`;
};

const Hb = e => {
    var t;
    const o = (t = kb.exec(e)) !== null && t !== void 0 ? t : Rb.exec(e);
    if (!o) {
        throw Error(`Error parsing color: ${e}`);
    }
    const n = parseInt(o[1], 10);
    const a = parseInt(o[2], 10);
    const r = parseInt(o[3], 10);
    const s = n.toString(16);
    const i = a.toString(16);
    const l = r.toString(16);
    return `#${s.length === 1 ? `0${s}` : s}${i.length === 1 ? `0${i}` : i}${l.length === 1 ? `0${l}` : l}`;
};

const Ub = e => {
    var t;
    const o = (t = kb.exec(e)) !== null && t !== void 0 ? t : Rb.exec(e);
    if (!o) {
        throw Error(`Error parsing color: ${e}`);
    }
    const n = parseInt(o[1], 10);
    const a = parseInt(o[2], 10);
    const r = parseInt(o[3], 10);
    const s = n / 255;
    const i = a / 255;
    const l = r / 255;
    const c = Math.max(s, i, l);
    const d = Math.min(s, i, l);
    const u = c - d;
    let m;
    if (u === 0) {
        m = 0;
    } else if (c === s) {
        m = (i - l) / u;
        var p = 0 / 60;
        if (m < 0) {
            p = 360 / 60;
        }
        m = m + p;
    } else if (c === i) {
        m = (l - s) / u + 2;
    } else if (c === l) {
        m = (s - i) / u + 4;
    } else {
        m = 0;
    }
    m = 60 * m;
    const f = (c + d) / 2;
    let g;
    if (u !== 0) {
        g = u / (1 - Math.abs(2 * f - 1));
    } else {
        g = 0;
    }
    return `hsl(${Math.round(m)}, ${Math.round(g * 100)}%, ${Math.round(f * 100)}%)`;
};

const Gb = e => {
    var t;
    const o = kb.exec(e);
    if (!o) {
        throw Error(`Error parsing color: ${e}`);
    }
    const n = parseInt(o[1], 10);
    const a = parseInt(o[2], 10);
    const r = parseInt(o[3], 10);
    const s = parseFloat((t = o[4]) !== null && t !== void 0 ? t : "1");
    const i = n / 255;
    const l = a / 255;
    const c = r / 255;
    const d = Math.max(i, l, c);
    const u = Math.min(i, l, c);
    const m = d - u;
    let p;
    if (m === 0) {
        p = 0;
    } else if (d === i) {
        p = (l - c) / m;
        var f = 0 / 60;
        if (p < 0) {
            f = 360 / 60;
        }
        p = p + f;
    } else if (d === l) {
        p = (c - i) / m + 2;
    } else if (d === c) {
        p = (i - l) / m + 4;
    } else {
        p = 0;
    }
    p = 60 * p;
    const g = (d + u) / 2;
    let h;
    if (m !== 0) {
        h = m / (1 - Math.abs(2 * g - 1));
    } else {
        h = 0;
    }
    return `hsla(${Math.round(p)}, ${Math.round(h * 100)}%, ${Math.round(g * 100)}%, ${s})`;
};

const Kb = e => {
    if (Rb.test(e)) {
        return "rgb";
    } else if (kb.test(e)) {
        return "rgba";
    } else if (Pb.test(e)) {
        return "hsv";
    } else if (Bb.test(e)) {
        return "hsva";
    } else if (Nb.test(e)) {
        return "hsl";
    } else if (Ob.test(e)) {
        return "hsla";
    } else if (Ab.test(e) || Mb.test(e)) {
        return "hex";
    } else {
        return "other";
    }
};

const Wb = e => {
    const t = Kb(e);
    let o = e;
    switch (t) {
      case "hex":
        o = e;
        break;

      case "rgb":
        o = Hb(e);
        break;

      case "hsl":
        o = Hb(jb(e));
        break;

      case "hsv":
        o = Hb(jb(Vb(o)));
        break;

      case "rgba":
        const t = kb.exec(e) || [];
        o = Hb(`rgb(${t[1]}, ${t[2]}, ${t[3]})`);
        break;

      case "hsla":
        const n = Ob.exec(e) || [];
        o = Hb(jb(`hsl(${n[1]}, ${n[2]}%, ${n[3]}%)`));
        break;

      case "hsva":
        const a = Bb.exec(e) || [];
        o = Hb(jb(Vb(`hsv(${a[1]}, ${a[2]}%, ${a[3]}%)`)));
        break;
    }
    return o;
};

const $b = e => {
    const t = Kb(e);
    let o = e;
    switch (t) {
      case "hex":
        o = zb(e);
        break;

      case "rgb":
        o = e;
        break;

      case "hsl":
        o = jb(e);
        break;

      case "hsv":
        o = jb(Vb(o));
        break;

      case "rgba":
        const t = kb.exec(e) || [];
        o = `rgb(${t[1]}, ${t[2]}, ${t[3]})`;
        break;

      case "hsla":
        const n = Ob.exec(e) || [];
        o = jb(`hsl(${n[1]}, ${n[2]}%, ${n[3]}%)`);
        break;

      case "hsva":
        const a = Bb.exec(e) || [];
        o = jb(Vb(`hsv(${a[1]}, ${a[2]}%, ${a[3]}%)`));
        break;
    }
    return o;
};

const Yb = e => {
    var t, o;
    const n = Kb(e);
    let a = e;
    const r = (e, t) => {
        const o = Rb.exec($b(e));
        return `rgba(${o[1]}, ${o[2]}, ${o[3]}, ${t !== null && t !== void 0 ? t : 1})`;
    };
    switch (n) {
      case "hex":
        a = r(zb(e));
        break;

      case "rgb":
        a = r(e);
        break;

      case "hsl":
        a = r(jb(e));
        break;

      case "hsv":
        a = r(jb(Vb(e)));
        break;

      case "rgba":
        a = e;
        break;

      case "hsva":
        const n = Bb.exec(e);
        a = r(jb(Vb(e)), parseFloat((t = n === null || n === void 0 ? void 0 : n[4]) !== null && t !== void 0 ? t : "1"));
        break;

      case "hsla":
        const s = Ob.exec(e);
        a = r(jb(e), parseFloat((o = s === null || s === void 0 ? void 0 : s[4]) !== null && o !== void 0 ? o : "1"));
        break;
    }
    return a;
};

const qb = e => {
    if (!e) return "FF";
    const t = Math.round(parseFloat(e) * 255).toString(16);
    return t.length === 1 ? `0${t}` : t;
};

const Xb = e => {
    const t = Kb(e);
    let o = e;
    switch (t) {
      case "hex":
        o = e;
        break;

      case "rgb":
        o = Hb(e);
        break;

      case "hsl":
        o = Hb(jb(e));
        break;

      case "hsv":
        o = Hb(jb(Vb(o)));
        break;

      case "rgba":
        const t = kb.exec(e) || [];
        o = Hb(Yb(e)) + qb(t[4]);
        break;

      case "hsla":
        const n = Ob.exec(e) || [];
        o = Hb(Yb(e)) + qb(n[4]);
        break;

      case "hsva":
        const a = Bb.exec(e) || [];
        o = Hb(Yb(e)) + qb(a[4]);
        break;
    }
    return o;
};

const Zb = e => {
    const t = Kb(e);
    let o = e;
    switch (t) {
      case "hex":
        o = Ub(zb(e));
        break;

      case "rgb":
        o = Ub(e);
        break;

      case "hsl":
        o = e;
        break;

      case "hsv":
        o = Vb(e);
        break;

      case "rgba":
        const t = kb.exec(e) || [];
        o = Ub(`rgb(${t[1]}, ${t[2]}, ${t[3]})`);
        break;

      case "hsla":
        const n = Ob.exec(e) || [];
        o = `hsl(${n[1]}, ${n[2]}%, ${n[3]}%)`;
        break;

      case "hsva":
        const a = Bb.exec(e) || [];
        o = Vb(`hsv(${a[1]}, ${a[2]}%, ${a[3]}%)`);
        break;
    }
    return o;
};

const Jb = e => {
    let t;
    switch (Kb(e)) {
      case "hex":
        {
            let o;
            if (Ab.test(e)) {
                o = Ab.exec(e);
            } else {
                o = Mb.exec(e);
            }
            if (o) {
                let e = o[1];
                if (o[1].length === 3) {
                    e = o[1].split("").map((e => e.repeat(2))).join("");
                }
                t = {
                    red: e.substring(0, 2),
                    green: e.substring(2, 4),
                    blue: e.substring(4, 6)
                };
                break;
            }
        }

      case "rgb":
        {
            const o = Rb.exec(e);
            if (o) {
                const e = parseInt(o[1], 10);
                const n = parseInt(o[2], 10);
                const a = parseInt(o[3], 10);
                t = {
                    red: e,
                    green: n,
                    blue: a
                };
                break;
            }
        }

      case "rgba":
        {
            const o = kb.exec(e);
            if (o) {
                const e = parseInt(o[1], 10);
                const n = parseInt(o[2], 10);
                const a = parseInt(o[3], 10);
                const r = parseFloat(o[4]);
                t = {
                    red: e,
                    green: n,
                    blue: a,
                    alpha: r
                };
                break;
            }
        }

      case "hsl":
        {
            const o = Nb.exec(e);
            if (o) {
                const e = parseInt(o[1], 10);
                const n = parseInt(o[2], 10);
                const a = parseInt(o[3], 10);
                t = {
                    hue: e,
                    saturation: n,
                    lightness: a
                };
                break;
            }
        }

      case "hsla":
        {
            const o = Ob.exec(e);
            if (o) {
                const e = parseInt(o[1], 10);
                const n = parseInt(o[2], 10);
                const a = parseInt(o[3], 10);
                const r = parseFloat(o[4]);
                t = {
                    hue: e,
                    saturation: n,
                    lightness: a,
                    alpha: r
                };
                break;
            }
        }

      case "hsv":
        {
            const o = Pb.exec(e);
            if (o) {
                const e = parseFloat(o[1]);
                const n = parseFloat(o[2]);
                const a = parseFloat(o[3]);
                t = {
                    hue: e,
                    saturation: n,
                    value: a
                };
                break;
            }
        }

      case "hsva":
        {
            const o = Bb.exec(e);
            if (o) {
                const e = parseFloat(o[1]);
                const n = parseFloat(o[2]);
                const a = parseFloat(o[3]);
                const r = parseFloat(o[4]);
                t = {
                    hue: e,
                    saturation: n,
                    value: a,
                    alpha: r
                };
                break;
            }
        }

      default:
        throw Error(`Color cannot be converted to an object: ${e}`);
    }
    return t;
};

const Qb = (e, {value: t = 1}) => {
    const {hue: o, saturation: n, lightness: a} = Jb(Zb(e));
    return `hsla(${o}, ${n}%, ${a}%, ${Math.max(Math.min(t, 1), 0)})`;
};

const ev = e => {
    var t, o, n;
    const a = Kb(e);
    let r = e;
    switch (a) {
      case "hex":
        r = Qb(Zb(e), {
            value: 1
        });
        break;

      case "rgb":
        r = Qb(Zb(e), {
            value: 1
        });
        break;

      case "hsl":
        r = Qb(e, {
            value: 1
        });
        break;

      case "hsv":
        r = Qb(Zb(e), {
            value: 1
        });
        break;

      case "rgba":
        const a = kb.exec(e);
        r = Qb(Zb(e), {
            value: parseFloat((t = a === null || a === void 0 ? void 0 : a[4]) !== null && t !== void 0 ? t : "1")
        });
        break;

      case "hsla":
        const s = Ob.exec(e);
        r = Qb(Zb(e), {
            value: parseFloat((o = s === null || s === void 0 ? void 0 : s[4]) !== null && o !== void 0 ? o : "1")
        });
        break;

      case "hsva":
        const i = Bb.exec(e);
        r = Qb(Zb(e), {
            value: parseFloat((n = i === null || i === void 0 ? void 0 : i[4]) !== null && n !== void 0 ? n : "1")
        });
        break;
    }
    return r;
};

const tv = (e, t, o, n) => {
    const a = Math.max(Math.min(e + Math.round(t), o), 0);
    return a >= o && n ? 0 : a;
};

const ov = (e, {property: t, value: o}) => {
    const n = {
        red: t === "red" ? o : 0,
        green: t === "green" ? o : 0,
        blue: t === "blue" ? o : 0
    };
    const {red: a, green: r, blue: s, alpha: i} = Jb(Yb(e));
    return Gb(`rgba(${tv(a, n.red, 255)}, ${tv(r, n.green, 255)}, ${tv(s, n.blue, 255)}, ${i})`);
};

const nv = (e, {value: t, property: o}) => {
    const n = {
        hue: o === "hue" ? t : 0,
        saturation: o === "saturation" ? t : 0,
        lightness: o === "lightness" ? t : 0
    };
    const {hue: a, saturation: r, lightness: s, alpha: i} = Jb(ev(e));
    return `hsla(${tv(a, n.hue, 360, true)}, ${tv(r, n.saturation, 100)}%, ${tv(s, n.lightness, 100)}%, ${i})`;
};

const av = (e, {value: t, property: o}) => {
    const n = {
        hue: o === "hue" ? t : 0,
        saturation: o === "saturation" ? t : 0,
        value: o === "value" ? t : 0
    };
    const {hue: a, saturation: r, value: s, alpha: i} = Jb(Fb(ev(e)));
    return Qb(Vb(`hsv(${tv(a, n.hue, 360, true)}, ${tv(r, n.saturation, 100)}%, ${tv(s, n.value, 100)}%)`), {
        value: i
    });
};

const rv = (e, t) => {
    switch (t.property) {
      case "value":
      case "lightness":
      case "hue":
      case "saturation":
        const o = Kb(e);
        if (o === "hsv" || o === "hsva" || t.property === "value") {
            return av(e, t);
        } else {
            return nv(e, t);
        }

      case "red":
      case "green":
      case "blue":
        return ov(e, t);

      default:
        return e;
    }
};

const sv = (e, t) => {
    const {background: o, amount: n, invert: a = false, useHSL: r = false} = t;
    const s = ev(e);
    const i = Jb(ev(e));
    const l = ev(o);
    const c = Jb(Fb(s));
    const d = Jb(Fb(l));
    const u = d.value >= 50;
    const m = n;
    const p = u ? -m : m;
    const f = a ? -p : p;
    const g = r ? `hsl(${i.hue}, ${i.saturation}%, ${Math.max(0, Math.min(100, Math.round(i.lightness + f)))}%)` : Vb(`hsv(${c.hue},${c.saturation}%,${Math.max(0, Math.min(100, Math.round(c.value + f)))}%)`);
    return Qb(g, {
        value: i.alpha
    });
};

const iv = (e, {background: t, alpha: o}) => {
    const {red: n, green: a, blue: r} = Jb($b(t));
    const {red: s, green: i, blue: l} = Jb($b(e));
    const c = Math.round(n * (1 - o) + s * o);
    const d = Math.round(a * (1 - o) + i * o);
    const u = Math.round(r * (1 - o) + l * o);
    return Zb(`rgb(${c}, ${d}, ${u})`);
};

const lv = iv;

const cv = (e, t, o) => {
    const n = Math.max(Math.min(Math.round(e), t), 0);
    return n >= t && o ? 0 : n;
};

const dv = (e, {value: t, property: o}) => {
    const {red: n, green: a, blue: r, alpha: s} = Jb(Yb(e));
    const i = {
        red: o === "red" ? t : n,
        green: o === "green" ? t : a,
        blue: o === "blue" ? t : r
    };
    return Gb(`rgba(${cv(i.red, 255)}, ${cv(i.green, 255)}, ${cv(i.blue, 255)}, ${s})`);
};

const uv = (e, {property: t, value: o}) => {
    const {hue: n, saturation: a, lightness: r, alpha: s} = Jb(ev(e));
    const i = {
        hue: t === "hue" ? o : n,
        saturation: t === "saturation" ? o : a,
        lightness: t === "lightness" ? o : r
    };
    return `hsla(${cv(i.hue, 360, true)}, ${cv(i.saturation, 100)}%, ${cv(i.lightness, 100)}%, ${s})`;
};

const mv = (e, {property: t, value: o}) => {
    const {hue: n, saturation: a, value: r, alpha: s} = Jb(Fb(ev(e)));
    const i = {
        hue: t === "hue" ? o : n,
        saturation: t === "saturation" ? o : a,
        value: t === "value" ? o : r
    };
    return Qb(Vb(`hsv(${cv(i.hue, 360, true)}, ${cv(i.saturation, 100)}%, ${cv(i.value, 100)}%)`), {
        value: s
    });
};

const pv = (e, t) => {
    switch (t.property) {
      case "value":
      case "lightness":
      case "hue":
      case "saturation":
        const o = Kb(e);
        if (o === "hsv" || o === "hsva" || t.property === "value") {
            return mv(e, t);
        } else {
            return uv(e, t);
        }

      case "red":
      case "green":
      case "blue":
        return dv(e, t);

      default:
        return e;
    }
};

const fv = (e, {value: t = 0}) => {
    const {red: o, green: n, blue: a, alpha: r} = Jb(Yb(e));
    const s = Math.max(Math.min(t, 1), 0);
    const i = Math.round(Math.min(Math.max(0, o + (0 - o) * s), 255));
    const l = Math.round(Math.min(Math.max(0, n + (0 - n) * s), 255));
    const c = Math.round(Math.min(Math.max(0, a + (0 - a) * s), 255));
    return ev(`rgba(${i},${l},${c}, ${r})`);
};

const gv = (e, t) => {
    const {red: o, green: n, blue: a, alpha: r} = Jb(Yb(e));
    let s = Math.round(o * .299 + n * .587 + a * .114);
    if (t.method === "average") {
        s = Math.round((o + n + a) / 3);
    } else if (t.method === "lightness") {
        s = Math.round((Math.max(o, n, a) + Math.min(o, n, a)) / 2);
    }
    return Qb(ev(`rgb(${s}, ${s}, ${s})`), {
        value: r
    });
};

const hv = (e, t) => {
    const o = gv(t.background, {
        method: "luminosity"
    });
    return iv(e, {
        background: o,
        alpha: t.amount
    });
};

const bv = (e, t) => sv(e, {
    ...t,
    invert: true
});

const vv = (e, t) => sv(e, {
    ...t,
    invert: false
});

const yv = (e, t) => {
    if (t.useHSL) {
        const {hue: t, saturation: o, lightness: n, alpha: a} = Jb(ev(e));
        const r = 100 - n;
        return Qb(`hsl(${t}, ${o}%, ${r}%)`, {
            value: a
        });
    }
    const {hue: o, saturation: n, value: a, alpha: r} = Jb(Fb(ev(e)));
    const s = 100 - a;
    return Qb(Zb(`hsv(${o}, ${n}%, ${s}%)`), {
        value: r
    });
};

const xv = (e, {value: t = 0}) => {
    const {red: o, green: n, blue: a, alpha: r} = Jb(Yb(e));
    const s = Math.max(Math.min(t, 1), 0);
    const i = Math.round(Math.min(Math.max(0, o + (255 - o) * s), 255));
    const l = Math.round(Math.min(Math.max(0, n + (255 - n) * s), 255));
    const c = Math.round(Math.min(Math.max(0, a + (255 - a) * s), 255));
    return ev(`rgba(${i},${l},${c}, ${r})`);
};

const Sv = e => {
    const {red: t, green: o, blue: n} = Jb(Yb(e));
    const a = e => {
        let t = e / 255;
        if (t <= .03928) {
            t = t / 12.92;
        } else {
            t = Math.pow((t + .055) / 1.055, 2.4);
        }
        return t;
    };
    return a(t) * .2126 + a(o) * .7152 + a(n) * .0722;
};

const wv = (e, t) => {
    const o = t.colors.map((t => {
        const o = Sv(t);
        const n = Sv(e);
        const a = (Math.min(o, n) + .05) / (Math.max(o, n) + .05);
        return a;
    }));
    const n = Math.min(...o);
    return ev(t.colors[o.indexOf(n)]);
};

const Cv = (e, t, o, n) => {
    const a = Math.max(Math.min(Math.round(e + t * (t > 0 ? o - e : e)), o), 0);
    return a >= o && n ? 0 : a;
};

const Ev = (e, {value: t, property: o}) => {
    const n = {
        red: o === "red" ? t : 0,
        green: o === "green" ? t : 0,
        blue: o === "blue" ? t : 0
    };
    const {red: a, green: r, blue: s, alpha: i} = Jb(Yb(e));
    return Gb(`rgba(${Cv(a, n.red, 255)}, ${Cv(r, n.green, 255)}, ${Cv(s, n.blue, 255)}, ${i})`);
};

const Iv = (e, {value: t, property: o}) => {
    const n = {
        hue: o === "hue" ? t : 0,
        saturation: o === "saturation" ? t : 0,
        lightness: o === "lightness" ? t : 0
    };
    const {hue: a, saturation: r, lightness: s, alpha: i} = Jb(ev(e));
    return `hsla(${Cv(a, n.hue, 360, true)}, ${Cv(r, n.saturation, 100)}%, ${Cv(s, n.lightness, 100)}%, ${i})`;
};

const _v = (e, {value: t, property: o}) => {
    const n = {
        hue: o === "hue" ? t : 0,
        saturation: o === "saturation" ? t : 0,
        value: o === "value" ? t : 0
    };
    const {hue: a, saturation: r, value: s, alpha: i} = Jb(Fb(ev(e)));
    return Qb(Fb(`hsl(${Cv(a, n.hue, 360, true)}, ${Cv(r, n.saturation, 100)}%, ${Cv(s, n.value, 100)}%)`), {
        value: i
    });
};

const Dv = (e, t) => {
    switch (t.property) {
      case "value":
      case "lightness":
      case "hue":
      case "saturation":
        const o = Kb(e);
        if (o === "hsv" || o === "hsva" || t.property === "value") {
            return _v(e, t);
        } else {
            return Iv(e, t);
        }

      case "red":
      case "green":
      case "blue":
        return Ev(e, t);

      default:
        return e;
    }
};

const Lv = {
    convert: {
        hex2rgb: zb,
        hsl2hsv: Fb,
        hsl2rgb: jb,
        hsv2hsl: Vb,
        rgb2hex: Hb,
        rgb2hsl: Ub,
        rgba2hsla: Gb,
        toHex: Wb,
        toHexAlpha: Xb,
        toHSL: Zb,
        toHSLA: ev,
        toRGB: $b,
        toRGBA: Yb
    },
    lighten: xv,
    darken: fv,
    adjust: rv,
    setAlpha: Qb,
    change: pv,
    scale: Dv,
    getColorObject: Jb,
    alphaBlend: iv,
    interpolate: lv,
    adjustLumaDelta: sv,
    increaseLumaDelta: vv,
    decreaseLumaDelta: bv,
    decreaseContrast: hv,
    grayscale: gv,
    maxLumaContrast: wv,
    invertLuminance: yv,
    relativeLuminance: Sv
};

const Tv = ({value: e, derivation: t}, o = {}) => {
    if (!t || !t.transform || t.transform.length === 0) return e;
    const n = {
        ...Rv,
        ...o
    };
    let a = e;
    t.transform.forEach((t => {
        Object.entries(t).forEach((([t, o]) => {
            if (!n.hasOwnProperty(t)) {
                throw Error(`Attempted to transform '${e}' using a missing transformer: \`${t}\`.`);
            }
            a = n[t](a, o);
        }));
    }));
    return a;
};

const Rv = {
    ...Lv.convert,
    ...Lv
};

const kv = (e, t) => {
    const o = e.replace(/[\{\}\!]/g, "");
    const n = t.find((({name: e}) => e === o));
    if (!n) {
        return false;
    }
    if (/{![a-zA-Z0-9\-]+}/.test(n.value)) {
        return false;
    }
    return e.replace(/{![a-zA-Z0-9\-]+}/, n.value);
};

const Av = (e, t) => {
    var o;
    const n = [ ...e ];
    for (let e of n) {
        if (e.name in t) {
            e.value = (o = t[e.name]) !== null && o !== void 0 ? o : e.value;
            if (e.derivation) e.derivation = {};
        }
    }
    return n;
};

const Mv = (e, t = [], o = {}) => {
    var n, a;
    if (e.length <= 0) {
        return t;
    }
    let r = [];
    let s = [ ...t ];
    let i = true;
    for (let l of e) {
        const e = l.value;
        const c = Tb(e);
        let d = e;
        let u = true;
        if (c.length > 0) {
            for (let e of c) {
                const o = e.replace(/[\{\}\!]/g, "");
                const n = t.find((({name: e}) => e === o));
                if (n) {
                    d = d.replace(new RegExp(e, "g"), n.value);
                } else {
                    u = false;
                }
            }
        }
        const m = [];
        (a = (n = l.derivation) === null || n === void 0 ? void 0 : n.transform) === null || a === void 0 ? void 0 : a.forEach((e => {
            Object.entries(e).forEach((([e, o]) => {
                if (!o) return;
                const n = {
                    [e]: {}
                };
                Object.entries(o).forEach((([o, a]) => {
                    if (typeof a === "string" && /{![a-zA-Z0-9\-]+}/.test(a)) {
                        const r = kv(a, t);
                        if (r === false) {
                            u = false;
                            return;
                        }
                        n[e][o] = r;
                        return;
                    } else if (Array.isArray(a)) {
                        const r = [];
                        a.forEach((e => {
                            if (!/{![a-zA-Z0-9\-]+}/.test(e)) {
                                r.push(e);
                                return;
                            }
                            const o = kv(e, t);
                            if (o === false) {
                                u = false;
                                return;
                            }
                            r.push(o);
                        }));
                        n[e][o] = r;
                        return;
                    }
                    n[e][o] = a;
                }));
                m.push(n);
            }));
        }));
        if (!u) {
            r.push({
                ...l,
                value: d
            });
            continue;
        }
        i = false;
        const p = {
            ...l,
            value: Tv({
                ...l,
                value: d,
                derivation: {
                    ...l.derivation,
                    transform: m
                }
            }, o)
        };
        s.push(p);
    }
    if (i) {
        return t;
    }
    return Mv(r, s, o);
};

const Nv = (e, t, o = {}) => {
    const n = [];
    const a = JSON.parse(JSON.stringify(e));
    e.forEach((e => {
        if (!e.hasOwnProperty("customTransformers")) return;
        const t = a.find((t => t.name === e.name));
        if (!t) return;
        t["customTransformers"] = e["customTransformers"];
    }));
    for (let e of a) {
        e.tokens.forEach((e => {
            var t;
            if ((t = e.derivation) === null || t === void 0 ? void 0 : t.value) {
                e.value = e.derivation.value;
            }
        }));
        const a = Mv(Av(e.tokens, t), [], {
            ...e.customTransformers,
            ...o
        });
        n.push({
            name: e.name,
            selectors: e.selectors,
            tokens: a
        });
        if (e.customTransformers || o) {
            n[n.length - 1].customTransformers = {
                ...e.customTransformers,
                ...o
            };
        }
    }
    return n;
};

const Ov = ro.object({
    setAlpha: ro.object({
        value: ro.number()
    }).optional(),
    lighten: ro.object({
        value: ro.number()
    }).optional(),
    darken: ro.object({
        value: ro.number()
    }).optional(),
    change: ro.object({
        property: ro.string(),
        value: ro.number()
    }).optional(),
    scale: ro.object({
        property: ro.string(),
        value: ro.number()
    }).optional(),
    adjust: ro.object({
        property: ro.string(),
        value: ro.number()
    }).optional(),
    alphaBlend: ro.object({
        background: ro.string(),
        alpha: ro.number()
    }).optional(),
    decreaseContrast: ro.object({
        background: ro.string(),
        amount: ro.number()
    }).optional(),
    adjustLumaDelta: ro.object({
        background: ro.string(),
        amount: ro.number(),
        invert: ro.boolean().optional(),
        useHSL: ro.boolean().optional()
    }).optional(),
    decreaseLumaDelta: ro.object({
        background: ro.string(),
        amount: ro.number(),
        useHSL: ro.boolean().optional()
    }).optional(),
    increaseLumaDelta: ro.object({
        background: ro.string(),
        amount: ro.number(),
        useHSL: ro.boolean().optional()
    }).optional(),
    grayscale: ro.object({
        method: ro.string().optional()
    }).optional(),
    invertLuminance: ro.object({}).optional(),
    maxLumaContrast: ro.object({
        colors: ro.array(ro.string())
    }).optional(),
    relativeLuminance: ro.object({}).optional(),
    interpolate: ro.object({
        background: ro.string(),
        alpha: ro.number()
    }).optional(),
    hex2rgb: ro.object({}).optional(),
    hsl2hsv: ro.object({}).optional(),
    hsl2rgb: ro.object({}).optional(),
    hsv2hsl: ro.object({}).optional(),
    rgb2hex: ro.object({}).optional(),
    rgb2hsl: ro.object({}).optional(),
    rgba2hsla: ro.object({}).optional(),
    toHSL: ro.object({}).optional(),
    toHSLA: ro.object({}).optional(),
    toRGB: ro.object({}).optional(),
    toRGBA: ro.object({}).optional(),
    add: ro.object({
        value: ro.number().optional(),
        unit: ro.string().optional()
    }).optional(),
    divide: ro.object({
        value: ro.number().optional(),
        unit: ro.string().optional()
    }).optional(),
    multiply: ro.object({
        value: ro.number().optional(),
        unit: ro.string().optional()
    }).optional(),
    subtract: ro.object({
        value: ro.number().optional(),
        unit: ro.string().optional()
    }).optional()
}).strict();

ro.object({
    _derivations: ro.record(ro.string(), ro.record(ro.string(), ro.object({
        value: ro.string(),
        transform: ro.array(Ov).optional()
    }).strict()))
});

ro.object({
    path: ro.string(),
    selectors: ro.array(ro.string()).optional(),
    imports: ro.array(ro.string()).optional(),
    title: ro.string(),
    description: ro.string()
}).strict();

const Pv = ro.record(ro.string(), ro.union([ ro.lazy((() => Pv)), ro.object({
    value: ro.string(),
    type: ro.string(),
    metadata: ro.record(ro.union([ ro.number(), ro.string(), ro.boolean(), ro.null() ])).optional(),
    description: ro.string().optional()
}).strict() ]));

const Bv = ro.object({
    path: ro.string(),
    name: ro.string(),
    selectors: ro.array(ro.string()).optional()
}).strict();

ro.object({
    entrypoints: ro.array(Bv)
}).strict();

ro.object({
    title: ro.string(),
    description: ro.string().optional(),
    selectors: ro.array(ro.string()).optional(),
    imports: ro.array(ro.string()).optional(),
    tokens: ro.array(ro.object({
        name: ro.string(),
        value: ro.string(),
        category: ro.string().optional(),
        derivation: ro.object({
            value: ro.string().optional(),
            transform: ro.array(Ov).optional()
        }).optional()
    }))
}).strict();

var zv = [ {
    name: "light",
    selectors: [ ":root", "[data-sas-theme='light']" ],
    tokens: [ {
        name: "color-action-background-control-alert",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-disabled",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-hover",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-non-editable",
        value: "hsla(216, 13%, 53%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-control-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-placeholder",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-primary",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-control-read-only",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-warning",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-emphasis-active",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-emphasis-disabled",
        value: "hsla(205, 97%, 35%, 0.24)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: .24
                }
            } ]
        }
    }, {
        name: "color-action-background-emphasis-hover",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-emphasis-normal",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-emphasis-selected",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-emphasis-visited",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-focus",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-focus-inverse",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-background-on-off-disabled",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-on-off-hover",
        value: "hsla(216, 13%, 53%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-on-off-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-on-off-read-only",
        value: "hsla(216, 13%, 53%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-on-off-selected",
        value: "hsl(329, 75%, 30%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-action-background-on-off-selected-disabled",
        value: "hsla(329, 75%, 30%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-secondary-disabled",
        value: "hsla(216, 13%, 53%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-secondary-normal",
        value: "hsla(216, 13%, 53%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-secondary-selected",
        value: "hsla(329, 75%, 30%, 0.24)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: .24
                }
            } ]
        }
    }, {
        name: "color-action-background-secondary-selected-disabled",
        value: "hsla(329, 75%, 30%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-active",
        value: "hsl(212, 94%, 90%)",
        category: "color"
    }, {
        name: "color-action-background-standard-disabled",
        value: "hsla(216, 13%, 53%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-hover",
        value: "hsla(216, 13%, 53%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-normal",
        value: "hsla(216, 13%, 53%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-selected",
        value: "hsla(216, 13%, 53%, 0.24)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .24
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-selected-inactive",
        value: "hsla(216, 13%, 53%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-visited",
        value: "hsl(219, 94%, 98%)",
        category: "color"
    }, {
        name: "color-action-background-subtle-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-background-subtle-hover",
        value: "hsla(216, 13%, 53%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-subtle-normal",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-background-subtle-selected",
        value: "hsla(216, 13%, 53%, 0.24)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .24
                }
            } ]
        }
    }, {
        name: "color-action-background-subtle-selected-inactive",
        value: "hsla(216, 13%, 53%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-border-bottom-control-alert",
        value: "hsl(360, 100%, 42%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-action-border-bottom-control-hover",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-bottom-control-normal",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-bottom-control-selected",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-bottom-control-warning",
        value: "hsl(40, 100%, 28%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-action-border-control-alert",
        value: "hsl(360, 100%, 42%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-action-border-control-disabled",
        value: "hsla(216, 13%, 53%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-border-control-hover",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-control-normal",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-control-placeholder",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-control-read-only",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-control-selected",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-control-warning",
        value: "hsl(40, 100%, 28%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-action-border-emphasis-active",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-emphasis-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-emphasis-hover",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-emphasis-normal",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-emphasis-selected",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-emphasis-visited",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-focus",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-focus-inverse",
        value: "hsl(212, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                change: {
                    property: "lightness",
                    value: 100
                }
            } ]
        }
    }, {
        name: "color-action-border-on-off-disabled",
        value: "hsla(216, 13%, 53%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-border-on-off-hover",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-on-off-normal",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-on-off-read-only",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-on-off-selected",
        value: "hsl(329, 75%, 30%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-action-border-on-off-selected-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-secondary-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-secondary-normal",
        value: "hsla(216, 13%, 53%, 0.24)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .24
                }
            } ]
        }
    }, {
        name: "color-action-border-secondary-selected",
        value: "hsl(329, 75%, 30%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-action-border-secondary-selected-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-standard-active",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-standard-hover",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-normal",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-selected",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-selected-inactive",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-standard-visited",
        value: "hsl(216, 13%, 53%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-subtle-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-subtle-hover",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-subtle-normal",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-subtle-selected",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-subtle-selected-inactive",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-focus",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-icon-control-alert",
        value: "hsl(360, 100%, 42%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-action-icon-control-disabled",
        value: "hsla(0, 0%, 0%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-control-hover",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-control-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-control-read-only",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-control-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-control-warning",
        value: "hsl(40, 100%, 28%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-action-icon-emphasis-active",
        value: "hsla(0, 100%, 100%, 0.6)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}",
            transform: [ {
                setAlpha: {
                    value: .6
                }
            } ]
        }
    }, {
        name: "color-action-icon-emphasis-disabled",
        value: "hsla(0, 100%, 100%, 0.64)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}",
            transform: [ {
                setAlpha: {
                    value: .64
                }
            } ]
        }
    }, {
        name: "color-action-icon-emphasis-hover",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}"
        }
    }, {
        name: "color-action-icon-emphasis-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}"
        }
    }, {
        name: "color-action-icon-emphasis-selected",
        value: "hsla(0, 100%, 100%, 0.6)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}",
            transform: [ {
                setAlpha: {
                    value: .6
                }
            } ]
        }
    }, {
        name: "color-action-icon-emphasis-visited",
        value: "hsl(212, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}"
        }
    }, {
        name: "color-action-icon-on-off-disabled",
        value: "hsla(0, 0%, 0%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-on-off-hover",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-on-off-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-on-off-read-only",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-on-off-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral-inverse}"
        }
    }, {
        name: "color-action-icon-on-off-selected-disabled",
        value: "hsla(0, 100%, 100%, 0.64)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}",
            transform: [ {
                setAlpha: {
                    value: .64
                }
            } ]
        }
    }, {
        name: "color-action-icon-standard-active",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-icon-standard-disabled",
        value: "hsla(0, 0%, 0%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-standard-hover",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-icon-standard-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-icon-standard-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-icon-standard-selected-inactive",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-icon-standard-visited",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-icon-subtle-disabled",
        value: "hsla(0, 0%, 0%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-subtle-hover",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-icon-subtle-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-icon-subtle-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-icon-subtle-selected-inactive",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-link-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-link-hover",
        value: "hsl(0, 0%, 0%)",
        category: "color"
    }, {
        name: "color-action-link-active",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-link-visited",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-alert",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-disabled",
        value: "hsla(0, 0%, 0%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-control-hover",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-placeholder",
        value: "hsl(218, 13%, 46%)",
        category: "color",
        derivation: {
            value: "{!label-color-text}"
        }
    }, {
        name: "color-action-text-control-read-only",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-active",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-warning",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-emphasis-active",
        value: "hsla(0, 100%, 100%, 0.6)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}",
            transform: [ {
                setAlpha: {
                    value: .6
                }
            } ]
        }
    }, {
        name: "color-action-text-emphasis-disabled",
        value: "hsla(0, 100%, 100%, 0.64)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}",
            transform: [ {
                setAlpha: {
                    value: .64
                }
            } ]
        }
    }, {
        name: "color-action-text-emphasis-hover",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}"
        }
    }, {
        name: "color-action-text-emphasis-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}"
        }
    }, {
        name: "color-action-text-emphasis-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}"
        }
    }, {
        name: "color-action-text-emphasis-visited",
        value: "hsl(212, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}"
        }
    }, {
        name: "color-action-text-on-off-disabled",
        value: "hsla(0, 0%, 0%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-on-off-hover",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-on-off-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-on-off-read-only",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-on-off-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-text-on-off-selected-disabled",
        value: "hsla(0, 100%, 100%, 0.64)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}",
            transform: [ {
                setAlpha: {
                    value: .64
                }
            } ]
        }
    }, {
        name: "color-action-text-secondary-disabled",
        value: "hsla(0, 0%, 0%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-secondary-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-secondary-selected",
        value: "hsl(329, 75%, 30%)",
        category: "color",
        derivation: {
            value: "{!color-text-secondary}"
        }
    }, {
        name: "color-action-text-secondary-selected-disabled",
        value: "hsla(329, 75%, 30%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-secondary}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-standard-active",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-disabled",
        value: "hsla(0, 0%, 0%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-standard-hover",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-selected-inactive",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-visited",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-subtle-disabled",
        value: "hsla(0, 0%, 0%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-subtle-hover",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-subtle-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-subtle-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-subtle-selected-inactive",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-body-icon",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-body-text",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-container-background-0",
        value: "hsl(219, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-container-background-1",
        value: "hsl(219, 12%, 98%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: .95
                }
            } ]
        }
    }, {
        name: "color-container-background-2",
        value: "hsl(219, 12%, 96%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: .92
                }
            } ]
        }
    }, {
        name: "color-container-background-3",
        value: "hsl(205, 97%, 41%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                change: {
                    property: "lightness",
                    value: 41
                }
            } ]
        }
    }, {
        name: "color-container-border-4",
        value: "hsl(216, 13%, 88%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                change: {
                    property: "lightness",
                    value: 88
                }
            } ]
        }
    }, {
        name: "color-dataviz-graph1",
        value: "#33a3ff",
        category: "color"
    }, {
        name: "color-dataviz-graph2",
        value: "#fc3",
        category: "color"
    }, {
        name: "color-dataviz-graph3",
        value: "#9470ff",
        category: "color"
    }, {
        name: "color-dataviz-graph4",
        value: "#ff8324",
        category: "color"
    }, {
        name: "color-dataviz-graph5",
        value: "#29d1d1",
        category: "color"
    }, {
        name: "color-dataviz-graph6",
        value: "#dc5656",
        category: "color"
    }, {
        name: "color-dataviz-graph7",
        value: "#15b77b",
        category: "color"
    }, {
        name: "color-dataviz-graph8",
        value: "#ff70bc",
        category: "color"
    }, {
        name: "color-dataviz-kpi1",
        value: "#dd5757",
        category: "color"
    }, {
        name: "color-dataviz-kpi3",
        value: "#ffcc32",
        category: "color"
    }, {
        name: "color-dataviz-kpi5",
        value: "#15b57b",
        category: "color"
    }, {
        name: "color-display-icon",
        value: "hsl(0, 0%, 0%)",
        category: "color"
    }, {
        name: "color-display-text",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-heading-icon",
        value: "hsl(0, 0%, 0%)",
        category: "color"
    }, {
        name: "color-heading-text",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-highlight-text",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-highlight-text-inverse",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-icon-neutral",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-icon-primary",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-icon-secondary",
        value: "hsl(329, 75%, 30%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-label-text",
        value: "hsl(218, 13%, 46%)",
        category: "color"
    }, {
        name: "color-neutral",
        value: "hsl(216, 13%, 53%)",
        category: "color"
    }, {
        name: "color-primary",
        value: "hsl(205, 97%, 35%)",
        category: "color"
    }, {
        name: "color-secondary",
        value: "hsl(329, 75%, 30%)",
        category: "color"
    }, {
        name: "color-status-alert",
        value: "hsl(360, 100%, 42%)",
        category: "color"
    }, {
        name: "color-status-background-alert",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-status-background-info",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-status-background-neutral",
        value: "hsl(219, 12%, 98%)",
        category: "color"
    }, {
        name: "color-status-background-success",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-status-background-warning",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-status-border-alert",
        value: "hsl(360, 100%, 42%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-status-border-info",
        value: "hsl(205, 99%, 37%)",
        category: "color",
        derivation: {
            value: "{!color-status-info}"
        }
    }, {
        name: "color-status-border-neutral",
        value: "hsl(219, 12%, 48%)",
        category: "color"
    }, {
        name: "color-status-border-success",
        value: "hsl(124, 85%, 26%)",
        category: "color",
        derivation: {
            value: "{!color-status-success}"
        }
    }, {
        name: "color-status-border-warning",
        value: "hsl(40, 100%, 28%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-status-icon-alert",
        value: "hsl(360, 100%, 42%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-status-icon-info",
        value: "hsl(205, 99%, 37%)",
        category: "color",
        derivation: {
            value: "{!color-status-info}"
        }
    }, {
        name: "color-status-icon-neutral",
        value: "hsl(219, 12%, 48%)",
        category: "color"
    }, {
        name: "color-status-icon-success",
        value: "hsl(124, 85%, 26%)",
        category: "color",
        derivation: {
            value: "{!color-status-success}"
        }
    }, {
        name: "color-status-icon-warning",
        value: "hsl(40, 100%, 28%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-status-info",
        value: "hsl(205, 99%, 37%)",
        category: "color"
    }, {
        name: "color-status-neutral",
        value: "hsl(216, 13%, 45%)",
        category: "color"
    }, {
        name: "color-status-success",
        value: "hsl(124, 85%, 26%)",
        category: "color"
    }, {
        name: "color-status-text-alert",
        value: "hsl(360, 100%, 42%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-status-text-info",
        value: "hsl(205, 99%, 37%)",
        category: "color",
        derivation: {
            value: "{!color-status-info}"
        }
    }, {
        name: "color-status-text-neutral",
        value: "hsl(219, 0%, 0%)",
        category: "color"
    }, {
        name: "color-status-text-success",
        value: "hsl(124, 85%, 26%)",
        category: "color",
        derivation: {
            value: "{!color-status-success}"
        }
    }, {
        name: "color-status-text-warning",
        value: "hsl(40, 100%, 28%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-status-warning",
        value: "hsl(40, 100%, 28%)",
        category: "color"
    }, {
        name: "color-syntax-text-01",
        value: "hsl(223, 11%, 12%)",
        category: "color"
    }, {
        name: "color-syntax-text-02",
        value: "hsl(219, 12%, 48%)",
        category: "color"
    }, {
        name: "color-syntax-text-03",
        value: "hsl(25, 56%, 44%)",
        category: "color"
    }, {
        name: "color-syntax-text-04",
        value: "hsl(7, 44%, 39%)",
        category: "color"
    }, {
        name: "color-syntax-text-05",
        value: "hsl(267, 35%, 44%)",
        category: "color"
    }, {
        name: "color-syntax-text-06",
        value: "hsl(212, 58%, 49%)",
        category: "color"
    }, {
        name: "color-syntax-text-07",
        value: "hsl(212, 57%, 31%)",
        category: "color"
    }, {
        name: "color-syntax-text-08",
        value: "hsl(169, 37%, 37%)",
        category: "color"
    }, {
        name: "color-syntax-text-09",
        value: "hsl(79, 51%, 33%)",
        category: "color"
    }, {
        name: "color-syntax-text-default",
        value: "hsl(223, 11%, 12%)",
        category: "color"
    }, {
        name: "color-syntax-text-normal",
        value: "hsl(223, 11%, 12%)",
        category: "color"
    }, {
        name: "color-syntax-text-identifier",
        value: "hsl(223, 11%, 12%)",
        category: "color"
    }, {
        name: "color-syntax-text-separator",
        value: "hsl(223, 11%, 12%)",
        category: "color"
    }, {
        name: "color-syntax-text-punctuation-brackets",
        value: "hsl(219, 12%, 48%)",
        category: "color"
    }, {
        name: "color-syntax-text-punctuation",
        value: "hsl(219, 12%, 48%)",
        category: "color"
    }, {
        name: "color-syntax-text-data",
        value: "hsl(25, 56%, 44%)",
        category: "color"
    }, {
        name: "color-syntax-text-string",
        value: "hsl(7, 44%, 39%)",
        category: "color"
    }, {
        name: "color-syntax-text-attribute-value",
        value: "hsl(7, 44%, 39%)",
        category: "color"
    }, {
        name: "color-syntax-text-boolean",
        value: "hsl(267, 35%, 44%)",
        category: "color"
    }, {
        name: "color-syntax-text-function",
        value: "hsl(267, 35%, 44%)",
        category: "color"
    }, {
        name: "color-syntax-text-control",
        value: "hsl(267, 35%, 44%)",
        category: "color"
    }, {
        name: "color-syntax-text-keyword",
        value: "hsl(212, 58%, 49%)",
        category: "color"
    }, {
        name: "color-syntax-text-property",
        value: "hsl(212, 58%, 49%)",
        category: "color"
    }, {
        name: "color-syntax-text-source",
        value: "hsl(212, 58%, 49%)",
        category: "color"
    }, {
        name: "color-syntax-text-declaration",
        value: "hsl(212, 58%, 49%)",
        category: "color"
    }, {
        name: "color-syntax-text-tag",
        value: "hsl(212, 58%, 49%)",
        category: "color"
    }, {
        name: "color-syntax-text-storage-type",
        value: "hsl(212, 58%, 49%)",
        category: "color"
    }, {
        name: "color-syntax-text-section",
        value: "hsl(212, 57%, 31%)",
        category: "color"
    }, {
        name: "color-syntax-text-proc-name",
        value: "hsl(212, 57%, 31%)",
        category: "color"
    }, {
        name: "color-syntax-text-attribute-name",
        value: "hsl(212, 57%, 31%)",
        category: "color"
    }, {
        name: "color-syntax-text-variable",
        value: "hsl(212, 57%, 31%)",
        category: "color"
    }, {
        name: "color-syntax-text-operator",
        value: "hsl(212, 57%, 31%)",
        category: "color"
    }, {
        name: "color-syntax-text-namespace",
        value: "hsl(169, 37%, 37%)",
        category: "color"
    }, {
        name: "color-syntax-text-class-name",
        value: "hsl(169, 37%, 37%)",
        category: "color"
    }, {
        name: "color-syntax-text-numeric-constant",
        value: "hsl(169, 37%, 37%)",
        category: "color"
    }, {
        name: "color-syntax-text-character-constant",
        value: "hsl(169, 37%, 37%)",
        category: "color"
    }, {
        name: "color-syntax-text-comment",
        value: "hsl(79, 51%, 33%)",
        category: "color"
    }, {
        name: "color-text-neutral",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-text-neutral-inverse",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-text-primary",
        value: "hsl(205, 97%, 35%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-text-primary-inverse",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-text-secondary",
        value: "hsl(329, 75%, 30%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-thumbnail-fill-1",
        value: "hsl(212, 94%, 94%)",
        category: "color"
    }, {
        name: "color-thumbnail-fill-2",
        value: "hsl(212, 94%, 94%)",
        category: "color"
    }, {
        name: "color-thumbnail-fill-3",
        value: "hsl(212, 94%, 62%)",
        category: "color"
    }, {
        name: "color-thumbnail-fill-4",
        value: "hsl(212, 94%, 42%)",
        category: "color"
    }, {
        name: "color-zero-state-base-fill-1",
        value: "hsl(219, 0%, 100%)",
        category: "color"
    }, {
        name: "color-zero-state-base-fill-2",
        value: "hsl(219, 12%, 79%)",
        category: "color"
    }, {
        name: "color-zero-state-base-fill-3",
        value: "hsl(219, 12%, 84%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-1",
        value: "hsl(219, 12%, 96%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-2",
        value: "hsl(212, 94%, 42%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-3",
        value: "hsl(212, 94%, 78%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-4",
        value: "hsl(219, 12%, 92%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-5",
        value: "hsl(219, 12%, 64%)",
        category: "color"
    }, {
        name: "style-action-border-focus",
        value: "dotted",
        category: "other"
    }, {
        name: "font-size-ratio-major-third",
        value: "1.25",
        category: "fontSizes"
    }, {
        name: "font-size-ratio-major-second",
        value: "1.125",
        category: "fontSizes"
    }, {
        name: "font-size-ratio-minor-third",
        value: "1.2",
        category: "fontSizes"
    }, {
        name: "font-space-letter-spacing-l",
        value: "2px",
        category: "letterSpacing"
    }, {
        name: "font-space-letter-spacing-m",
        value: "normal",
        category: "letterSpacing"
    }, {
        name: "font-space-letter-spacing-s",
        value: "1px",
        category: "letterSpacing"
    }, {
        name: "font-space-line-height-l",
        value: "1.6",
        category: "lineHeights"
    }, {
        name: "font-space-line-height-m",
        value: "1.5",
        category: "lineHeights"
    }, {
        name: "font-space-line-height-s",
        value: "1.4",
        category: "lineHeights"
    }, {
        name: "font-space-word-l",
        value: "2px",
        category: "other"
    }, {
        name: "font-space-word-m",
        value: "normal",
        category: "other"
    }, {
        name: "font-space-word-s",
        value: "1px",
        category: "other"
    }, {
        name: "font-style-expression-italic",
        value: "italic",
        category: "other"
    }, {
        name: "font-style-expression-normal",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-expression-oblique",
        value: "oblique",
        category: "other"
    }, {
        name: "font-style-overflow-wrap-anywhere",
        value: "anywhere",
        category: "other"
    }, {
        name: "font-style-overflow-wrap-break-word",
        value: "break-word",
        category: "other"
    }, {
        name: "font-style-overflow-wrap-normal",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-text-transform-capitalize",
        value: "capitalize",
        category: "other"
    }, {
        name: "font-style-text-transform-lowercase",
        value: "lowercase",
        category: "other"
    }, {
        name: "font-style-text-transform-none",
        value: "none",
        category: "other"
    }, {
        name: "font-style-text-transform-uppercase",
        value: "uppercase",
        category: "other"
    }, {
        name: "font-style-weight-300",
        value: "300",
        category: "fontWeights"
    }, {
        name: "font-style-weight-400",
        value: "400",
        category: "fontWeights"
    }, {
        name: "font-style-weight-500",
        value: "500",
        category: "fontWeights"
    }, {
        name: "font-style-weight-600",
        value: "600",
        category: "fontWeights"
    }, {
        name: "font-style-weight-700",
        value: "700",
        category: "fontWeights"
    }, {
        name: "font-style-word-break-break-all",
        value: "break-all",
        category: "other"
    }, {
        name: "font-style-word-break-break-word",
        value: "break-word",
        category: "other"
    }, {
        name: "font-style-word-break-keep-all",
        value: "keep-all",
        category: "other"
    }, {
        name: "font-style-word-break-normal",
        value: "normal",
        category: "other"
    }, {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
        category: "fontFamilies"
    }, {
        name: "font-family-secondary",
        value: "'AvenirNext', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
        category: "fontFamilies"
    }, {
        name: "duration-100",
        value: "100ms",
        category: "other"
    }, {
        name: "duration-200",
        value: "200ms",
        category: "other"
    }, {
        name: "duration-250",
        value: "250ms",
        category: "other"
    }, {
        name: "duration-300",
        value: "300ms",
        category: "other"
    }, {
        name: "duration-400",
        value: "400ms",
        category: "other"
    }, {
        name: "duration-450",
        value: "450ms",
        category: "other"
    }, {
        name: "duration-700",
        value: "700ms",
        category: "other"
    }, {
        name: "duration-1000",
        value: "1s",
        category: "other"
    }, {
        name: "ease-in",
        value: "cubic-bezier(0, 0.5, 0.2, 1)",
        category: "other"
    }, {
        name: "ease-out",
        value: "cubic-bezier(0.5, 0, 0.8, 1)",
        category: "other"
    }, {
        name: "ease-in-out",
        value: "cubic-bezier(0.5, 0, 0.2, 1)",
        category: "other"
    }, {
        name: "shadow-depth-l",
        value: "0 8px 12px rgba(0, 0, 0, 0.04), 0 16px 24px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "shadow-depth-m",
        value: "0 2px 4px rgba(0, 0, 0, 0.04), 0 8px 16px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "shadow-depth-s",
        value: "0 2px 2px rgba(0, 0, 0, 0.04), 0 4px 8px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "shadow-depth-xl",
        value: "0 16px 24px rgba(0, 0, 0, 0.04), 0 32px 48px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "shadow-depth-xs",
        value: "0 1px 2px rgba(0, 0, 0, 0.04), 0 2px 4px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "size-border-width-l",
        value: "3px",
        category: "borderWidth"
    }, {
        name: "size-border-width-m",
        value: "2px",
        category: "borderWidth"
    }, {
        name: "size-border-width-s",
        value: "1px",
        category: "borderWidth"
    }, {
        name: "size-border-width-null",
        value: "0",
        category: "borderWidth"
    }, {
        name: "size-container-l",
        value: "400px",
        category: "sizing"
    }, {
        name: "size-container-m",
        value: "320px",
        category: "sizing"
    }, {
        name: "size-container-null",
        value: "0",
        category: "sizing"
    }, {
        name: "size-container-s",
        value: "240px",
        category: "sizing"
    }, {
        name: "size-container-xl",
        value: "640px",
        category: "sizing"
    }, {
        name: "size-container-xs",
        value: "192px",
        category: "sizing"
    }, {
        name: "size-container-xxl",
        value: "960px",
        category: "sizing"
    }, {
        name: "size-container-xxs",
        value: "96px",
        category: "sizing"
    }, {
        name: "size-outline-width-xl",
        value: "4px",
        category: "other"
    }, {
        name: "size-outline-width-l",
        value: "3px",
        category: "other"
    }, {
        name: "size-outline-width-m",
        value: "2px",
        category: "other"
    }, {
        name: "size-outline-width-s",
        value: "1px",
        category: "other"
    }, {
        name: "font-size-base-text-l",
        value: "18px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-m",
        value: "16px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-s",
        value: "14px",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxxl",
        value: "1.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxl",
        value: "1.375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxl",
        value: "1.25rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xl",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-l",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-m",
        value: "0.875rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-s",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xs",
        value: "0.6875rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxs",
        value: "0.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxs",
        value: "0.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-1",
        value: "4.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-2",
        value: "3.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-3",
        value: "2.5rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-1",
        value: "1.375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-2",
        value: "1.25rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-3",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-4",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-5",
        value: "0.875rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-6",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "size-border-radius-full",
        value: "50%",
        category: "borderRadius"
    }, {
        name: "size-border-radius-l",
        value: "24px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-m",
        value: "16px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-s",
        value: "8px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-xs",
        value: "4px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-xxs",
        value: "2px",
        category: "borderRadius"
    }, {
        name: "space-base-null",
        value: "0",
        category: "spacing"
    }, {
        name: "space-base-size",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-base-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-base-xs",
        value: "0.25rem",
        category: "spacing"
    }, {
        name: "space-base-s",
        value: "0.5rem",
        category: "spacing"
    }, {
        name: "space-base-m",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-base-l",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-base-xl",
        value: "2rem",
        category: "spacing"
    }, {
        name: "space-base-xxl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-base-xxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-base-xxxxl",
        value: "3.5rem",
        category: "spacing"
    }, {
        name: "space-base-xxxxxl",
        value: "4rem",
        category: "spacing"
    }, {
        name: "space-block-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-block-xs",
        value: "0.25rem",
        category: "spacing"
    }, {
        name: "space-block-s",
        value: "0.5rem",
        category: "spacing"
    }, {
        name: "space-block-m",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-block-l",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-block-xl",
        value: "2rem",
        category: "spacing"
    }, {
        name: "space-block-xxl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-block-xxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-block-xxxxl",
        value: "3.5rem",
        category: "spacing"
    }, {
        name: "space-block-xxxxxl",
        value: "4rem",
        category: "spacing"
    }, {
        name: "space-inline-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-inline-xs",
        value: "0.25rem",
        category: "spacing"
    }, {
        name: "space-inline-s",
        value: "0.5rem",
        category: "spacing"
    }, {
        name: "space-inline-m",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-inline-l",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xl",
        value: "2rem",
        category: "spacing"
    }, {
        name: "space-inline-xxl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxxl",
        value: "3.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxxxl",
        value: "4rem",
        category: "spacing"
    }, {
        name: "space-squish-xxs",
        value: "0.0625rem 0.125rem",
        category: "spacing"
    }, {
        name: "space-squish-xs",
        value: "0.125rem 0.25rem",
        category: "spacing"
    }, {
        name: "space-squish-s",
        value: "0.25rem 0.5rem",
        category: "spacing"
    }, {
        name: "space-squish-m",
        value: "0.5rem 1rem",
        category: "spacing"
    }, {
        name: "space-squish-l",
        value: "0.75rem 1.5rem",
        category: "spacing"
    }, {
        name: "space-squish-xl",
        value: "1rem 2rem",
        category: "spacing"
    }, {
        name: "space-squish-xxl",
        value: "1.25rem 2.5rem",
        category: "spacing"
    }, {
        name: "space-stretch-xxs",
        value: "0.125rem 0.0625rem",
        category: "spacing"
    }, {
        name: "space-stretch-xs",
        value: "0.25rem 0.125rem",
        category: "spacing"
    }, {
        name: "space-stretch-s",
        value: "0.5rem 0.25rem",
        category: "spacing"
    }, {
        name: "space-stretch-m",
        value: "1rem 0.5rem",
        category: "spacing"
    }, {
        name: "space-stretch-l",
        value: "1.5rem 0.75rem",
        category: "spacing"
    }, {
        name: "size-action-border-width-focus",
        value: "1px",
        category: "sizing",
        derivation: {
            value: "{!size-outline-width-s}"
        }
    }, {
        name: "size-zero-state-border-width",
        value: "0",
        category: "borderWidth",
        derivation: {
            value: "{!size-border-width-null}"
        }
    }, {
        name: "font-size-ratio",
        value: "1.125",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-ratio-major-second}"
        }
    }, {
        name: "font-space-letter-spacing",
        value: "normal",
        category: "letterSpacing",
        derivation: {
            value: "{!font-space-letter-spacing-m}"
        }
    }, {
        name: "font-space-line-height",
        value: "1.4",
        category: "lineHeights",
        derivation: {
            value: "{!font-space-line-height-s}"
        }
    }, {
        name: "font-space-word",
        value: "normal",
        category: "other",
        derivation: {
            value: "{!font-space-word-m}"
        }
    }, {
        name: "font-style-expression",
        value: "normal",
        category: "other",
        derivation: {
            value: "{!font-style-expression-normal}"
        }
    }, {
        name: "font-style-overflow-wrap",
        value: "anywhere",
        category: "other",
        derivation: {
            value: "{!font-style-overflow-wrap-anywhere}"
        }
    }, {
        name: "font-style-text-transform",
        value: "none",
        category: "other",
        derivation: {
            value: "{!font-style-text-transform-none}"
        }
    }, {
        name: "font-style-word-break",
        value: "break-all",
        category: "other",
        derivation: {
            value: "{!font-style-word-break-break-all}"
        }
    }, {
        name: "font-size-base-text",
        value: "14px",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-base-text-s}"
        }
    }, {
        name: "size-icon-xxxxl",
        value: "1.5625rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxxl}"
        }
    }, {
        name: "size-icon-xxxl",
        value: "1.375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxl}"
        }
    }, {
        name: "size-icon-xxl",
        value: "1.25rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxl}"
        }
    }, {
        name: "size-icon-xl",
        value: "1.125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xl}"
        }
    }, {
        name: "size-icon-l",
        value: "1rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-l}"
        }
    }, {
        name: "size-icon-m",
        value: "0.875rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-m}"
        }
    }, {
        name: "size-icon-s",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxxs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    } ]
}, {
    name: "dark",
    selectors: [ "[data-sas-theme='dark']" ],
    tokens: [ {
        name: "color-action-background-control-alert",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-disabled",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-hover",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-non-editable",
        value: "hsla(205, 25%, 70%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-control-normal",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-placeholder",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-primary",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-control-read-only",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-background-control-selected",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-warning",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-emphasis-active",
        value: "hsla(205, 97%, 63%, 0.24)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: .24
                }
            } ]
        }
    }, {
        name: "color-action-background-emphasis-disabled",
        value: "hsla(205, 97%, 63%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-emphasis-hover",
        value: "hsla(205, 97%, 63%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-emphasis-normal",
        value: "hsla(205, 97%, 63%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-emphasis-selected",
        value: "hsla(205, 97%, 63%, 0.24)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: .24
                }
            } ]
        }
    }, {
        name: "color-action-background-emphasis-visited",
        value: "hsla(205, 97%, 63%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-focus",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-focus-inverse",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-background-on-off-disabled",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-on-off-hover",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-on-off-normal",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-on-off-read-only",
        value: "hsla(205, 25%, 70%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-on-off-selected",
        value: "hsl(329, 75%, 43%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-action-background-on-off-selected-disabled",
        value: "hsla(329, 75%, 43%, 0.24)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: .24
                }
            } ]
        }
    }, {
        name: "color-action-background-secondary-disabled",
        value: "hsla(205, 25%, 70%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-secondary-normal",
        value: "hsla(205, 90%, 8%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-secondary-selected",
        value: "hsla(329, 75%, 43%, 0.24)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: .24
                }
            } ]
        }
    }, {
        name: "color-action-background-secondary-selected-disabled",
        value: "hsla(329, 75%, 43%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-active",
        value: "hsla(205, 25%, 70%, 0.24)",
        category: "color"
    }, {
        name: "color-action-background-standard-disabled",
        value: "hsla(205, 25%, 70%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-hover",
        value: "hsla(205, 25%, 70%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-normal",
        value: "hsla(205, 25%, 70%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-selected",
        value: "hsla(205, 25%, 70%, 0.24)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .24
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-selected-inactive",
        value: "hsla(205, 25%, 70%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-visited",
        value: "hsla(205, 25%, 70%, 0.08)",
        category: "color"
    }, {
        name: "color-action-background-subtle-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-background-subtle-hover",
        value: "hsla(205, 25%, 70%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-subtle-normal",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-background-subtle-selected",
        value: "hsla(205, 25%, 70%, 0.24)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .24
                }
            } ]
        }
    }, {
        name: "color-action-background-subtle-selected-inactive",
        value: "hsla(205, 25%, 70%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-border-bottom-control-alert",
        value: "hsl(360, 100%, 65%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-action-border-bottom-control-hover",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-bottom-control-normal",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-bottom-control-selected",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-bottom-control-warning",
        value: "hsl(40, 100%, 58%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-action-border-control-alert",
        value: "hsl(360, 100%, 65%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-action-border-control-disabled",
        value: "hsla(205, 25%, 70%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-border-control-hover",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-control-normal",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-control-placeholder",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-control-read-only",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-control-selected",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-control-warning",
        value: "hsl(40, 100%, 58%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-action-border-emphasis-active",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-emphasis-disabled",
        value: "hsla(0, 0%, 0%, 0)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-emphasis-hover",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-emphasis-normal",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-emphasis-selected",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-emphasis-visited",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-focus",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-focus-inverse",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                change: {
                    property: "lightness",
                    value: 100
                }
            } ]
        }
    }, {
        name: "color-action-border-on-off-disabled",
        value: "hsla(205, 25%, 70%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-border-on-off-hover",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-on-off-normal",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-on-off-read-only",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-on-off-selected",
        value: "hsl(329, 75%, 43%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-action-border-on-off-selected-disabled",
        value: "hsla(0, 0%, 0%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-secondary-disabled",
        value: "hsla(0, 0%, 0%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-secondary-normal",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-secondary-selected",
        value: "hsl(329, 75%, 43%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-action-border-secondary-selected-disabled",
        value: "hsla(0, 0%, 0%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-standard-active",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-disabled",
        value: "hsla(0, 0%, 0%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-standard-hover",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-normal",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-selected",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-selected-inactive",
        value: "hsla(0, 0%, 0%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-standard-visited",
        value: "hsl(205, 25%, 70%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-subtle-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-subtle-hover",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-subtle-normal",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-subtle-selected",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-subtle-selected-inactive",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-focus",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-icon-control-alert",
        value: "hsl(360, 100%, 65%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-action-icon-control-disabled",
        value: "hsla(0, 100%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-control-hover",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-control-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-control-read-only",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-control-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-icon-control-warning",
        value: "hsl(40, 100%, 58%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-action-icon-emphasis-active",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-icon-emphasis-disabled",
        value: "hsla(205, 97%, 63%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-emphasis-hover",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-icon-emphasis-normal",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-icon-emphasis-selected",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-icon-emphasis-visited",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-icon-on-off-disabled",
        value: "hsla(0, 100%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-on-off-hover",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-on-off-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-on-off-read-only",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-on-off-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-on-off-selected-disabled",
        value: "hsla(0, 100%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-standard-active",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-standard-disabled",
        value: "hsla(0, 100%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-standard-hover",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-standard-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-standard-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-standard-selected-inactive",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-standard-visited",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-subtle-disabled",
        value: "hsla(0, 100%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-subtle-hover",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-subtle-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-subtle-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-subtle-selected-inactive",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-link-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-link-hover",
        value: "hsl(0, 100%, 100%)",
        category: "color"
    }, {
        name: "color-action-link-active",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-link-visited",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-active",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-alert",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-disabled",
        value: "hsla(0, 100%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-control-hover",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-placeholder",
        value: "hsl(223, 10%, 64%)",
        category: "color",
        derivation: {
            value: "{!label-color-text}"
        }
    }, {
        name: "color-action-text-control-read-only",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-visited",
        value: "hsl(0, 100%, 100%)",
        category: "color"
    }, {
        name: "color-action-text-control-warning",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-emphasis-active",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-text-emphasis-disabled",
        value: "hsla(205, 97%, 63%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-emphasis-hover",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-text-emphasis-normal",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-text-emphasis-selected",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-text-emphasis-visited",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-text-on-off-disabled",
        value: "hsla(0, 100%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-on-off-hover",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-on-off-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-on-off-read-only",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-on-off-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-on-off-selected-disabled",
        value: "hsla(0, 100%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-secondary-disabled",
        value: "hsla(0, 100%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-secondary-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-secondary-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-secondary-selected-disabled",
        value: "hsla(0, 100%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-standard-active",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-disabled",
        value: "hsla(0, 100%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-standard-hover",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-selected-inactive",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-visited",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-subtle-disabled",
        value: "hsla(0, 100%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-subtle-hover",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-subtle-normal",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-subtle-selected",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-subtle-selected-inactive",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-body-icon",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-body-text",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-container-background-0",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                change: {
                    property: "lightness",
                    value: 8
                }
            } ]
        }
    }, {
        name: "color-container-background-1",
        value: "hsl(205, 90%, 15%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                change: {
                    property: "lightness",
                    value: 15
                }
            } ]
        }
    }, {
        name: "color-container-background-2",
        value: "hsl(205, 90%, 12%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                change: {
                    property: "lightness",
                    value: 12
                }
            } ]
        }
    }, {
        name: "color-container-background-3",
        value: "hsl(205, 90%, 15%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                change: {
                    property: "lightness",
                    value: 15
                }
            } ]
        }
    }, {
        name: "color-container-border-4",
        value: "hsl(205, 22%, 26%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                change: {
                    property: "lightness",
                    value: 26
                }
            }, {
                change: {
                    property: "saturation",
                    value: 22
                }
            } ]
        }
    }, {
        name: "color-dataviz-graph1",
        value: "#2470ad",
        category: "color"
    }, {
        name: "color-dataviz-graph2",
        value: "#98863c",
        category: "color"
    }, {
        name: "color-dataviz-graph3",
        value: "#5954ad",
        category: "color"
    }, {
        name: "color-dataviz-graph4",
        value: "#985b30",
        category: "color"
    }, {
        name: "color-dataviz-graph5",
        value: "#238a92",
        category: "color"
    }, {
        name: "color-dataviz-graph6",
        value: "#84414b",
        category: "color"
    }, {
        name: "color-dataviz-graph7",
        value: "#17785f",
        category: "color"
    }, {
        name: "color-dataviz-graph8",
        value: "#985186",
        category: "color"
    }, {
        name: "color-dataviz-kpi1",
        value: "#84414b",
        category: "color"
    }, {
        name: "color-dataviz-kpi3",
        value: "#98863c",
        category: "color"
    }, {
        name: "color-dataviz-kpi5",
        value: "#17785f",
        category: "color"
    }, {
        name: "color-display-icon",
        value: "hsl(0, 100%, 100%)",
        category: "color"
    }, {
        name: "color-display-text",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-heading-icon",
        value: "hsl(0, 100%, 100%)",
        category: "color"
    }, {
        name: "color-heading-text",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-highlight-text",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-highlight-text-inverse",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-icon-neutral",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-icon-primary",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-icon-secondary",
        value: "hsl(329, 75%, 43%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-label-text",
        value: "hsl(223, 10%, 64%)",
        category: "color"
    }, {
        name: "color-neutral",
        value: "hsl(205, 25%, 70%)",
        category: "color"
    }, {
        name: "color-primary",
        value: "hsl(205, 97%, 63%)",
        category: "color"
    }, {
        name: "color-secondary",
        value: "hsl(329, 75%, 43%)",
        category: "color"
    }, {
        name: "color-status-alert",
        value: "hsl(360, 100%, 65%)",
        category: "color"
    }, {
        name: "color-status-background-alert",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-status-background-info",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-status-background-neutral",
        value: "hsl(219, 12%, 64%)",
        category: "color"
    }, {
        name: "color-status-background-success",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-status-background-warning",
        value: "hsl(205, 90%, 8%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-status-border-alert",
        value: "hsl(360, 100%, 65%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-status-border-info",
        value: "hsl(205, 99%, 59%)",
        category: "color",
        derivation: {
            value: "{!color-status-info}"
        }
    }, {
        name: "color-status-border-neutral",
        value: "hsl(219, 12%, 64%)",
        category: "color"
    }, {
        name: "color-status-border-success",
        value: "hsl(124, 85%, 36%)",
        category: "color",
        derivation: {
            value: "{!color-status-success}"
        }
    }, {
        name: "color-status-border-warning",
        value: "hsl(40, 100%, 58%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-status-icon-alert",
        value: "hsl(0, 100%, 64%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-status-icon-info",
        value: "hsl(205, 99%, 59%)",
        category: "color",
        derivation: {
            value: "{!color-status-info}"
        }
    }, {
        name: "color-status-icon-neutral",
        value: "hsl(219, 12%, 64%)",
        category: "color"
    }, {
        name: "color-status-icon-success",
        value: "hsl(124, 85%, 36%)",
        category: "color",
        derivation: {
            value: "{!color-status-success}"
        }
    }, {
        name: "color-status-icon-warning",
        value: "hsl(40, 100%, 58%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-status-info",
        value: "hsl(205, 99%, 59%)",
        category: "color"
    }, {
        name: "color-status-neutral",
        value: "hsl(205, 25%, 70%)",
        category: "color"
    }, {
        name: "color-status-success",
        value: "hsl(124, 85%, 36%)",
        category: "color"
    }, {
        name: "color-status-text-alert",
        value: "hsl(360, 100%, 65%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-status-text-info",
        value: "hsl(205, 99%, 59%)",
        category: "color",
        derivation: {
            value: "{!color-status-info}"
        }
    }, {
        name: "color-status-text-neutral",
        value: "hsl(219, 0%, 100%)",
        category: "color"
    }, {
        name: "color-status-text-success",
        value: "hsl(124, 85%, 36%)",
        category: "color",
        derivation: {
            value: "{!color-status-success}"
        }
    }, {
        name: "color-status-text-warning",
        value: "hsl(40, 100%, 58%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-status-warning",
        value: "hsl(40, 100%, 58%)",
        category: "color"
    }, {
        name: "color-syntax-text-01",
        value: "hsl(223, 11%, 88%)",
        category: "color"
    }, {
        name: "color-syntax-text-02",
        value: "hsl(218, 12%, 64%)",
        category: "color"
    }, {
        name: "color-syntax-text-03",
        value: "hsl(26, 93%, 70%)",
        category: "color"
    }, {
        name: "color-syntax-text-04",
        value: "hsl(7, 82%, 69%)",
        category: "color"
    }, {
        name: "color-syntax-text-05",
        value: "hsl(267, 72%, 67%)",
        category: "color"
    }, {
        name: "color-syntax-text-06",
        value: "hsl(212, 94%, 62%)",
        category: "color"
    }, {
        name: "color-syntax-text-07",
        value: "hsl(212, 95%, 78%)",
        category: "color"
    }, {
        name: "color-syntax-text-08",
        value: "hsl(169, 40%, 52%)",
        category: "color"
    }, {
        name: "color-syntax-text-09",
        value: "hsl(79, 51%, 50%)",
        category: "color"
    }, {
        name: "color-syntax-text-default",
        value: "hsl(223, 11%, 88%)",
        category: "color"
    }, {
        name: "color-syntax-text-normal",
        value: "hsl(223, 11%, 88%)",
        category: "color"
    }, {
        name: "color-syntax-text-identifier",
        value: "hsl(223, 11%, 88%)",
        category: "color"
    }, {
        name: "color-syntax-text-separator",
        value: "hsl(223, 11%, 88%)",
        category: "color"
    }, {
        name: "color-syntax-text-punctuation-brackets",
        value: "hsl(218, 12%, 64%)",
        category: "color"
    }, {
        name: "color-syntax-text-punctuation",
        value: "hsl(218, 12%, 64%)",
        category: "color"
    }, {
        name: "color-syntax-text-data",
        value: "hsl(26, 93%, 70%)",
        category: "color"
    }, {
        name: "color-syntax-text-string",
        value: "hsl(7, 82%, 69%)",
        category: "color"
    }, {
        name: "color-syntax-text-attribute-value",
        value: "hsl(7, 82%, 69%)",
        category: "color"
    }, {
        name: "color-syntax-text-boolean",
        value: "hsl(267, 72%, 67%)",
        category: "color"
    }, {
        name: "color-syntax-text-function",
        value: "hsl(267, 72%, 67%)",
        category: "color"
    }, {
        name: "color-syntax-text-control",
        value: "hsl(267, 72%, 67%)",
        category: "color"
    }, {
        name: "color-syntax-text-keyword",
        value: "hsl(212, 94%, 62%)",
        category: "color"
    }, {
        name: "color-syntax-text-property",
        value: "hsl(212, 94%, 62%)",
        category: "color"
    }, {
        name: "color-syntax-text-source",
        value: "hsl(212, 94%, 62%)",
        category: "color"
    }, {
        name: "color-syntax-text-declaration",
        value: "hsl(212, 94%, 62%)",
        category: "color"
    }, {
        name: "color-syntax-text-tag",
        value: "hsl(212, 94%, 62%)",
        category: "color"
    }, {
        name: "color-syntax-text-storage-type",
        value: "hsl(212, 94%, 62%)",
        category: "color"
    }, {
        name: "color-syntax-text-section",
        value: "hsl(212, 95%, 78%)",
        category: "color"
    }, {
        name: "color-syntax-text-proc-name",
        value: "hsl(212, 95%, 78%)",
        category: "color"
    }, {
        name: "color-syntax-text-attribute-name",
        value: "hsl(212, 95%, 78%)",
        category: "color"
    }, {
        name: "color-syntax-text-variable",
        value: "hsl(212, 95%, 78%)",
        category: "color"
    }, {
        name: "color-syntax-text-operator",
        value: "hsl(212, 95%, 78%)",
        category: "color"
    }, {
        name: "color-syntax-text-namespace",
        value: "hsl(169, 40%, 52%)",
        category: "color"
    }, {
        name: "color-syntax-text-class-name",
        value: "hsl(169, 40%, 52%)",
        category: "color"
    }, {
        name: "color-syntax-text-numeric-constant",
        value: "hsl(169, 40%, 52%)",
        category: "color"
    }, {
        name: "color-syntax-text-character-constant",
        value: "hsl(169, 40%, 52%)",
        category: "color"
    }, {
        name: "color-syntax-text-comment",
        value: "hsl(79, 51%, 50%)",
        category: "color"
    }, {
        name: "color-text-neutral",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-text-neutral-inverse",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-text-primary",
        value: "hsl(205, 97%, 63%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-text-primary-inverse",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-text-secondary",
        value: "hsl(329, 75%, 43%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-thumbnail-fill-1",
        value: "hsl(212, 94%, 83%)",
        category: "color"
    }, {
        name: "color-thumbnail-fill-2",
        value: "hsl(212, 94%, 72%)",
        category: "color"
    }, {
        name: "color-thumbnail-fill-3",
        value: "hsl(212, 94%, 57%)",
        category: "color"
    }, {
        name: "color-thumbnail-fill-4",
        value: "hsl(212, 94%, 42%)",
        category: "color"
    }, {
        name: "color-zero-state-base-fill-1",
        value: "hsl(219, 12%, 17%)",
        category: "color"
    }, {
        name: "color-zero-state-base-fill-2",
        value: "hsl(219, 12%, 59%)",
        category: "color"
    }, {
        name: "color-zero-state-base-fill-3",
        value: "hsl(219, 12%, 48%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-1",
        value: "hsl(219, 12%, 27%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-2",
        value: "hsl(212, 94%, 62%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-3",
        value: "hsl(212, 94%, 72%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-4",
        value: "hsl(219, 12%, 33%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-5",
        value: "hsl(219, 12%, 72%)",
        category: "color"
    }, {
        name: "style-action-border-focus",
        value: "dotted",
        category: "other"
    }, {
        name: "font-size-ratio-major-third",
        value: "1.25",
        category: "fontSizes"
    }, {
        name: "font-size-ratio-major-second",
        value: "1.125",
        category: "fontSizes"
    }, {
        name: "font-size-ratio-minor-third",
        value: "1.2",
        category: "fontSizes"
    }, {
        name: "font-space-letter-spacing-l",
        value: "2px",
        category: "letterSpacing"
    }, {
        name: "font-space-letter-spacing-m",
        value: "normal",
        category: "letterSpacing"
    }, {
        name: "font-space-letter-spacing-s",
        value: "1px",
        category: "letterSpacing"
    }, {
        name: "font-space-line-height-l",
        value: "1.6",
        category: "lineHeights"
    }, {
        name: "font-space-line-height-m",
        value: "1.5",
        category: "lineHeights"
    }, {
        name: "font-space-line-height-s",
        value: "1.4",
        category: "lineHeights"
    }, {
        name: "font-space-word-l",
        value: "2px",
        category: "other"
    }, {
        name: "font-space-word-m",
        value: "normal",
        category: "other"
    }, {
        name: "font-space-word-s",
        value: "1px",
        category: "other"
    }, {
        name: "font-style-expression-italic",
        value: "italic",
        category: "other"
    }, {
        name: "font-style-expression-normal",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-expression-oblique",
        value: "oblique",
        category: "other"
    }, {
        name: "font-style-overflow-wrap-anywhere",
        value: "anywhere",
        category: "other"
    }, {
        name: "font-style-overflow-wrap-break-word",
        value: "break-word",
        category: "other"
    }, {
        name: "font-style-overflow-wrap-normal",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-text-transform-capitalize",
        value: "capitalize",
        category: "other"
    }, {
        name: "font-style-text-transform-lowercase",
        value: "lowercase",
        category: "other"
    }, {
        name: "font-style-text-transform-none",
        value: "none",
        category: "other"
    }, {
        name: "font-style-text-transform-uppercase",
        value: "uppercase",
        category: "other"
    }, {
        name: "font-style-weight-300",
        value: "300",
        category: "fontWeights"
    }, {
        name: "font-style-weight-400",
        value: "400",
        category: "fontWeights"
    }, {
        name: "font-style-weight-500",
        value: "500",
        category: "fontWeights"
    }, {
        name: "font-style-weight-600",
        value: "600",
        category: "fontWeights"
    }, {
        name: "font-style-weight-700",
        value: "700",
        category: "fontWeights"
    }, {
        name: "font-style-word-break-break-all",
        value: "break-all",
        category: "other"
    }, {
        name: "font-style-word-break-break-word",
        value: "break-word",
        category: "other"
    }, {
        name: "font-style-word-break-keep-all",
        value: "keep-all",
        category: "other"
    }, {
        name: "font-style-word-break-normal",
        value: "normal",
        category: "other"
    }, {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
        category: "fontFamilies"
    }, {
        name: "font-family-secondary",
        value: "'AvenirNext', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
        category: "fontFamilies"
    }, {
        name: "duration-100",
        value: "100ms",
        category: "other"
    }, {
        name: "duration-200",
        value: "200ms",
        category: "other"
    }, {
        name: "duration-250",
        value: "250ms",
        category: "other"
    }, {
        name: "duration-300",
        value: "300ms",
        category: "other"
    }, {
        name: "duration-400",
        value: "400ms",
        category: "other"
    }, {
        name: "duration-450",
        value: "450ms",
        category: "other"
    }, {
        name: "duration-700",
        value: "700ms",
        category: "other"
    }, {
        name: "duration-1000",
        value: "1s",
        category: "other"
    }, {
        name: "ease-in",
        value: "cubic-bezier(0, 0.5, 0.2, 1)",
        category: "other"
    }, {
        name: "ease-out",
        value: "cubic-bezier(0.5, 0, 0.8, 1)",
        category: "other"
    }, {
        name: "ease-in-out",
        value: "cubic-bezier(0.5, 0, 0.2, 1)",
        category: "other"
    }, {
        name: "shadow-depth-l",
        value: "0 8px 12px rgba(0, 0, 0, 0.04), 0 16px 24px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "shadow-depth-m",
        value: "0 2px 4px rgba(0, 0, 0, 0.04), 0 8px 16px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "shadow-depth-s",
        value: "0 2px 2px rgba(0, 0, 0, 0.04), 0 4px 8px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "shadow-depth-xl",
        value: "0 16px 24px rgba(0, 0, 0, 0.04), 0 32px 48px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "shadow-depth-xs",
        value: "0 1px 2px rgba(0, 0, 0, 0.04), 0 2px 4px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "size-border-width-l",
        value: "3px",
        category: "borderWidth"
    }, {
        name: "size-border-width-m",
        value: "2px",
        category: "borderWidth"
    }, {
        name: "size-border-width-s",
        value: "1px",
        category: "borderWidth"
    }, {
        name: "size-border-width-null",
        value: "0",
        category: "borderWidth"
    }, {
        name: "size-container-l",
        value: "400px",
        category: "sizing"
    }, {
        name: "size-container-m",
        value: "320px",
        category: "sizing"
    }, {
        name: "size-container-null",
        value: "0",
        category: "sizing"
    }, {
        name: "size-container-s",
        value: "240px",
        category: "sizing"
    }, {
        name: "size-container-xl",
        value: "640px",
        category: "sizing"
    }, {
        name: "size-container-xs",
        value: "192px",
        category: "sizing"
    }, {
        name: "size-container-xxl",
        value: "960px",
        category: "sizing"
    }, {
        name: "size-container-xxs",
        value: "96px",
        category: "sizing"
    }, {
        name: "size-outline-width-xl",
        value: "4px",
        category: "other"
    }, {
        name: "size-outline-width-l",
        value: "3px",
        category: "other"
    }, {
        name: "size-outline-width-m",
        value: "2px",
        category: "other"
    }, {
        name: "size-outline-width-s",
        value: "1px",
        category: "other"
    }, {
        name: "font-size-base-text-l",
        value: "18px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-m",
        value: "16px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-s",
        value: "14px",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxxl",
        value: "1.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxl",
        value: "1.375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxl",
        value: "1.25rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xl",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-l",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-m",
        value: "0.875rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-s",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xs",
        value: "0.6875rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxs",
        value: "0.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxs",
        value: "0.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-1",
        value: "4.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-2",
        value: "3.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-3",
        value: "2.5rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-1",
        value: "1.375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-2",
        value: "1.25rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-3",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-4",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-5",
        value: "0.875rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-6",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "size-border-radius-full",
        value: "50%",
        category: "borderRadius"
    }, {
        name: "size-border-radius-l",
        value: "24px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-m",
        value: "16px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-s",
        value: "8px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-xs",
        value: "4px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-xxs",
        value: "2px",
        category: "borderRadius"
    }, {
        name: "space-base-null",
        value: "0",
        category: "spacing"
    }, {
        name: "space-base-size",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-base-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-base-xs",
        value: "0.25rem",
        category: "spacing"
    }, {
        name: "space-base-s",
        value: "0.5rem",
        category: "spacing"
    }, {
        name: "space-base-m",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-base-l",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-base-xl",
        value: "2rem",
        category: "spacing"
    }, {
        name: "space-base-xxl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-base-xxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-base-xxxxl",
        value: "3.5rem",
        category: "spacing"
    }, {
        name: "space-base-xxxxxl",
        value: "4rem",
        category: "spacing"
    }, {
        name: "space-block-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-block-xs",
        value: "0.25rem",
        category: "spacing"
    }, {
        name: "space-block-s",
        value: "0.5rem",
        category: "spacing"
    }, {
        name: "space-block-m",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-block-l",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-block-xl",
        value: "2rem",
        category: "spacing"
    }, {
        name: "space-block-xxl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-block-xxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-block-xxxxl",
        value: "3.5rem",
        category: "spacing"
    }, {
        name: "space-block-xxxxxl",
        value: "4rem",
        category: "spacing"
    }, {
        name: "space-inline-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-inline-xs",
        value: "0.25rem",
        category: "spacing"
    }, {
        name: "space-inline-s",
        value: "0.5rem",
        category: "spacing"
    }, {
        name: "space-inline-m",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-inline-l",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xl",
        value: "2rem",
        category: "spacing"
    }, {
        name: "space-inline-xxl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxxl",
        value: "3.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxxxl",
        value: "4rem",
        category: "spacing"
    }, {
        name: "space-squish-xxs",
        value: "0.0625rem 0.125rem",
        category: "spacing"
    }, {
        name: "space-squish-xs",
        value: "0.125rem 0.25rem",
        category: "spacing"
    }, {
        name: "space-squish-s",
        value: "0.25rem 0.5rem",
        category: "spacing"
    }, {
        name: "space-squish-m",
        value: "0.5rem 1rem",
        category: "spacing"
    }, {
        name: "space-squish-l",
        value: "0.75rem 1.5rem",
        category: "spacing"
    }, {
        name: "space-squish-xl",
        value: "1rem 2rem",
        category: "spacing"
    }, {
        name: "space-squish-xxl",
        value: "1.25rem 2.5rem",
        category: "spacing"
    }, {
        name: "space-stretch-xxs",
        value: "0.125rem 0.0625rem",
        category: "spacing"
    }, {
        name: "space-stretch-xs",
        value: "0.25rem 0.125rem",
        category: "spacing"
    }, {
        name: "space-stretch-s",
        value: "0.5rem 0.25rem",
        category: "spacing"
    }, {
        name: "space-stretch-m",
        value: "1rem 0.5rem",
        category: "spacing"
    }, {
        name: "space-stretch-l",
        value: "1.5rem 0.75rem",
        category: "spacing"
    }, {
        name: "size-action-border-width-focus",
        value: "1px",
        category: "sizing",
        derivation: {
            value: "{!size-outline-width-s}"
        }
    }, {
        name: "size-zero-state-border-width",
        value: "0",
        category: "borderWidth",
        derivation: {
            value: "{!size-border-width-null}"
        }
    }, {
        name: "font-size-ratio",
        value: "1.125",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-ratio-major-second}"
        }
    }, {
        name: "font-space-letter-spacing",
        value: "normal",
        category: "letterSpacing",
        derivation: {
            value: "{!font-space-letter-spacing-m}"
        }
    }, {
        name: "font-space-line-height",
        value: "1.4",
        category: "lineHeights",
        derivation: {
            value: "{!font-space-line-height-s}"
        }
    }, {
        name: "font-space-word",
        value: "normal",
        category: "other",
        derivation: {
            value: "{!font-space-word-m}"
        }
    }, {
        name: "font-style-expression",
        value: "normal",
        category: "other",
        derivation: {
            value: "{!font-style-expression-normal}"
        }
    }, {
        name: "font-style-overflow-wrap",
        value: "anywhere",
        category: "other",
        derivation: {
            value: "{!font-style-overflow-wrap-anywhere}"
        }
    }, {
        name: "font-style-text-transform",
        value: "none",
        category: "other",
        derivation: {
            value: "{!font-style-text-transform-none}"
        }
    }, {
        name: "font-style-word-break",
        value: "break-all",
        category: "other",
        derivation: {
            value: "{!font-style-word-break-break-all}"
        }
    }, {
        name: "font-size-base-text",
        value: "14px",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-base-text-s}"
        }
    }, {
        name: "size-icon-xxxxl",
        value: "1.5625rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxxl}"
        }
    }, {
        name: "size-icon-xxxl",
        value: "1.375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxl}"
        }
    }, {
        name: "size-icon-xxl",
        value: "1.25rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxl}"
        }
    }, {
        name: "size-icon-xl",
        value: "1.125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xl}"
        }
    }, {
        name: "size-icon-l",
        value: "1rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-l}"
        }
    }, {
        name: "size-icon-m",
        value: "0.875rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-m}"
        }
    }, {
        name: "size-icon-s",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxxs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    } ]
}, {
    name: "high-contrast",
    selectors: [ "[data-sas-theme='high-contrast']" ],
    tokens: [ {
        name: "color-action-background-control-alert",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-disabled",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-hover",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-non-editable",
        value: "hsla(205, 30%, 90%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-control-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-placeholder",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-primary",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-control-read-only",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-control-warning",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-emphasis-active",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-emphasis-disabled",
        value: "hsla(205, 97%, 76%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-emphasis-hover",
        value: "hsla(205, 97%, 76%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-emphasis-normal",
        value: "hsla(205, 97%, 76%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-emphasis-selected",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-emphasis-visited",
        value: "hsla(205, 97%, 76%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-focus",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-background-focus-inverse",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-background-on-off-disabled",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-on-off-hover",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-on-off-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-on-off-read-only",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-on-off-selected",
        value: "hsl(329, 75%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-action-background-on-off-selected-disabled",
        value: "hsla(329, 75%, 90%, 0.24)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: .24
                }
            } ]
        }
    }, {
        name: "color-action-background-secondary-disabled",
        value: "hsla(205, 30%, 90%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-secondary-normal",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-action-background-secondary-selected",
        value: "hsl(329, 75%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-action-background-secondary-selected-disabled",
        value: "hsla(329, 75%, 90%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-active",
        value: "hsl(204, 29%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-background-standard-disabled",
        value: "hsla(205, 30%, 90%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-hover",
        value: "hsla(205, 30%, 90%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-normal",
        value: "hsla(205, 30%, 90%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-selected",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-background-standard-selected-inactive",
        value: "hsla(205, 30%, 90%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-standard-visited",
        value: "hsla(204, 29%, 90%, 0.08)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .08
                }
            } ]
        }
    }, {
        name: "color-action-background-subtle-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-background-subtle-hover",
        value: "hsla(205, 30%, 90%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-background-subtle-normal",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-background-subtle-selected",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-background-subtle-selected-inactive",
        value: "hsla(205, 30%, 90%, 0.16)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .16
                }
            } ]
        }
    }, {
        name: "color-action-border-bottom-control-alert",
        value: "hsl(360, 80%, 80%)",
        category: "color",
        derivation: {
            value: "{!color-alert}"
        }
    }, {
        name: "color-action-border-bottom-control-hover",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-bottom-control-normal",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-bottom-control-selected",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-bottom-control-warning",
        value: "hsl(40, 80%, 75%)",
        category: "color",
        derivation: {
            value: "{!color-warning}"
        }
    }, {
        name: "color-action-border-control-alert",
        value: "hsl(360, 80%, 80%)",
        category: "color",
        derivation: {
            value: "{!color-alert}"
        }
    }, {
        name: "color-action-border-control-disabled",
        value: "hsla(205, 30%, 90%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-border-control-hover",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-control-normal",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-control-placeholder",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-control-read-only",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-control-selected",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-control-warning",
        value: "hsl(40, 80%, 75%)",
        category: "color",
        derivation: {
            value: "{!color-warning}"
        }
    }, {
        name: "color-action-border-emphasis-active",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-emphasis-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-emphasis-hover",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-emphasis-normal",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-emphasis-selected",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-emphasis-visited",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-focus",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-border-focus-inverse",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                change: {
                    property: "lightness",
                    value: 100
                }
            } ]
        }
    }, {
        name: "color-action-border-on-off-disabled",
        value: "hsla(205, 30%, 90%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-border-on-off-hover",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-on-off-normal",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-on-off-read-only",
        value: "hsl(0, 100%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                change: {
                    property: "lightness",
                    value: 100
                }
            } ]
        }
    }, {
        name: "color-action-border-on-off-selected",
        value: "hsl(329, 75%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-action-border-on-off-selected-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-secondary-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-secondary-normal",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-secondary-selected",
        value: "hsl(329, 75%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-action-border-secondary-selected-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-secondary}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-standard-active",
        value: "hsl(204, 29%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-standard-hover",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-normal",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-selected",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-selected-inactive",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-standard-visited",
        value: "hsl(204, 29%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-subtle-disabled",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-subtle-hover",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-subtle-normal",
        value: "hsla(0, 100%, 100%, 0)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                setAlpha: {
                    value: 0
                }
            } ]
        }
    }, {
        name: "color-action-border-subtle-selected",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-border-subtle-selected-inactive",
        value: "hsl(205, 30%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}"
        }
    }, {
        name: "color-action-focus",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-action-icon-control-alert",
        value: "hsl(360, 80%, 80%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-action-icon-control-disabled",
        value: "hsla(0, 0%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-control-hover",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-control-normal",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-control-read-only",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-control-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-icon-control-warning",
        value: "hsl(40, 80%, 75%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-action-icon-emphasis-active",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}"
        }
    }, {
        name: "color-action-icon-emphasis-disabled",
        value: "hsla(205, 97%, 76%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-emphasis-hover",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-icon-emphasis-normal",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-icon-emphasis-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}"
        }
    }, {
        name: "color-action-icon-emphasis-visited",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-icon-on-off-disabled",
        value: "hsla(0, 0%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-on-off-hover",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-on-off-normal",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-on-off-read-only",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-on-off-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-icon-on-off-selected-disabled",
        value: "hsla(0, 0%, 0%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-icon-standard-active",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-icon-standard-disabled",
        value: "hsla(0, 0%, 100%, 0.48)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}",
            transform: [ {
                setAlpha: {
                    value: .48
                }
            } ]
        }
    }, {
        name: "color-action-icon-standard-hover",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-standard-normal",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-standard-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-icon-standard-selected-inactive",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-standard-visited",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-subtle-disabled",
        value: "hsla(0, 0%, 100%, 0.48)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}",
            transform: [ {
                setAlpha: {
                    value: .48
                }
            } ]
        }
    }, {
        name: "color-action-icon-subtle-hover",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-subtle-normal",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-icon-neutral}"
        }
    }, {
        name: "color-action-icon-subtle-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-icon-subtle-selected-inactive",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-link-normal",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-link-hover",
        value: "hsl(0, 0%, 100%)",
        category: "color"
    }, {
        name: "color-action-link-active",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-link-visited",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-alert",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-disabled",
        value: "hsla(0, 0%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-control-hover",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-normal",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-placeholder",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!label-color-text}"
        }
    }, {
        name: "color-action-text-control-read-only",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-active",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-selected",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-control-warning",
        value: "hsl(43, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-emphasis-active",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}"
        }
    }, {
        name: "color-action-text-emphasis-disabled",
        value: "hsla(205, 97%, 76%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-emphasis-hover",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-text-emphasis-normal",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-text-emphasis-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary-inverse}"
        }
    }, {
        name: "color-action-text-emphasis-visited",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-text-primary}"
        }
    }, {
        name: "color-action-text-on-off-disabled",
        value: "hsla(0, 0%, 100%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-on-off-hover",
        value: "hsl(219, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-on-off-normal",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-on-off-read-only",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-on-off-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-text-on-off-selected-disabled",
        value: "hsla(0, 0%, 0%, 0.32)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}",
            transform: [ {
                setAlpha: {
                    value: .32
                }
            } ]
        }
    }, {
        name: "color-action-text-secondary-disabled",
        value: "hsla(0, 0%, 100%, 0.48)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .48
                }
            } ]
        }
    }, {
        name: "color-action-text-secondary-normal",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-secondary-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-text-secondary-selected-disabled",
        value: "hsla(0, 0%, 0%, 0.64)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}",
            transform: [ {
                setAlpha: {
                    value: .64
                }
            } ]
        }
    }, {
        name: "color-action-text-standard-active",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-text-standard-disabled",
        value: "hsla(0, 0%, 100%, 0.48)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .48
                }
            } ]
        }
    }, {
        name: "color-action-text-standard-hover",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-normal",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-text-standard-selected-inactive",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-standard-visited",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-subtle-disabled",
        value: "hsla(0, 0%, 100%, 0.48)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}",
            transform: [ {
                setAlpha: {
                    value: .48
                }
            } ]
        }
    }, {
        name: "color-action-text-subtle-hover",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-subtle-normal",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-action-text-subtle-selected",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral-inverse}"
        }
    }, {
        name: "color-action-text-subtle-selected-inactive",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-text-neutral}"
        }
    }, {
        name: "color-body-icon",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-body-text",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-container-background-0",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-container-background-1",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-container-background-2",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-container-background-3",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-container-border-4",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-dataviz-graph1",
        value: "#4AACFF",
        category: "color"
    }, {
        name: "color-dataviz-graph2",
        value: "#F1D700",
        category: "color"
    }, {
        name: "color-dataviz-graph3",
        value: "#C68AFF",
        category: "color"
    }, {
        name: "color-dataviz-graph4",
        value: "#F98E39",
        category: "color"
    }, {
        name: "color-dataviz-graph5",
        value: "#00D692",
        category: "color"
    }, {
        name: "color-dataviz-graph6",
        value: "#FF817A",
        category: "color"
    }, {
        name: "color-dataviz-graph7",
        value: "#7CBF00",
        category: "color"
    }, {
        name: "color-dataviz-graph8",
        value: "#FF6FBD",
        category: "color"
    }, {
        name: "color-dataviz-kpi1",
        value: "#ff5e4d",
        category: "color"
    }, {
        name: "color-dataviz-kpi3",
        value: "#f2d94b",
        category: "color"
    }, {
        name: "color-dataviz-kpi5",
        value: "#7bb04a",
        category: "color"
    }, {
        name: "color-display-icon",
        value: "hsl(0, 0%, 100%)",
        category: "color"
    }, {
        name: "color-display-text",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-heading-icon",
        value: "hsl(0, 0%, 100%)",
        category: "color"
    }, {
        name: "color-heading-text",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-highlight-text",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-highlight-text-inverse",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-icon-neutral",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-icon-primary",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-icon-secondary",
        value: "hsl(329, 75%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-label-text",
        value: "hsl(100, 100%, 100%)",
        category: "color"
    }, {
        name: "color-neutral",
        value: "hsl(205, 30%, 90%)",
        category: "color"
    }, {
        name: "color-primary",
        value: "hsl(205, 97%, 76%)",
        category: "color"
    }, {
        name: "color-secondary",
        value: "hsl(329, 75%, 90%)",
        category: "color"
    }, {
        name: "color-status-alert",
        value: "hsl(360, 80%, 80%)",
        category: "color"
    }, {
        name: "color-status-background-alert",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-status-background-info",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-status-background-neutral",
        value: "hsl(219, 0%, 0%)",
        category: "color"
    }, {
        name: "color-status-background-success",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-status-background-warning",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-container-background-0}"
        }
    }, {
        name: "color-status-border-alert",
        value: "hsl(360, 80%, 80%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-status-border-info",
        value: "hsl(205, 80%, 75%)",
        category: "color",
        derivation: {
            value: "{!color-status-info}"
        }
    }, {
        name: "color-status-border-neutral",
        value: "hsl(219, 12%, 84%)",
        category: "color"
    }, {
        name: "color-status-border-success",
        value: "hsl(124, 60%, 75%)",
        category: "color",
        derivation: {
            value: "{!color-status-success}"
        }
    }, {
        name: "color-status-border-warning",
        value: "hsl(40, 80%, 75%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-status-icon-alert",
        value: "hsl(360, 80%, 80%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-status-icon-info",
        value: "hsl(205, 80%, 75%)",
        category: "color",
        derivation: {
            value: "{!color-status-info}"
        }
    }, {
        name: "color-status-icon-neutral",
        value: "hsl(219, 12%, 84%)",
        category: "color"
    }, {
        name: "color-status-icon-success",
        value: "hsl(124, 60%, 75%)",
        category: "color",
        derivation: {
            value: "{!color-status-success}"
        }
    }, {
        name: "color-status-icon-warning",
        value: "hsl(40, 80%, 75%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-status-info",
        value: "hsl(205, 80%, 75%)",
        category: "color"
    }, {
        name: "color-status-neutral",
        value: "hsl(205, 30%, 90%)",
        category: "color"
    }, {
        name: "color-status-success",
        value: "hsl(124, 60%, 75%)",
        category: "color"
    }, {
        name: "color-status-text-alert",
        value: "hsl(360, 80%, 80%)",
        category: "color",
        derivation: {
            value: "{!color-status-alert}"
        }
    }, {
        name: "color-status-text-info",
        value: "hsl(205, 80%, 75%)",
        category: "color",
        derivation: {
            value: "{!color-status-info}"
        }
    }, {
        name: "color-status-text-neutral",
        value: "hsl(219, 0%, 100%)",
        category: "color"
    }, {
        name: "color-status-text-success",
        value: "hsl(124, 60%, 75%)",
        category: "color",
        derivation: {
            value: "{!color-status-success}"
        }
    }, {
        name: "color-status-text-warning",
        value: "hsl(40, 80%, 75%)",
        category: "color",
        derivation: {
            value: "{!color-status-warning}"
        }
    }, {
        name: "color-status-warning",
        value: "hsl(40, 80%, 75%)",
        category: "color"
    }, {
        name: "color-syntax-text-01",
        value: "hsl(0, 0%, 100%)",
        category: "color"
    }, {
        name: "color-syntax-text-02",
        value: "hsl(54, 66%, 53%)",
        category: "color"
    }, {
        name: "color-syntax-text-03",
        value: "hsl(27, 94%, 60%)",
        category: "color"
    }, {
        name: "color-syntax-text-04",
        value: "hsl(3, 100%, 73%)",
        category: "color"
    }, {
        name: "color-syntax-text-05",
        value: "hsl(328, 100%, 72%)",
        category: "color"
    }, {
        name: "color-syntax-text-06",
        value: "hsl(271, 100%, 77%)",
        category: "color"
    }, {
        name: "color-syntax-text-07",
        value: "hsl(212, 94%, 68%)",
        category: "color"
    }, {
        name: "color-syntax-text-08",
        value: "hsl(173, 72%, 43%)",
        category: "color"
    }, {
        name: "color-syntax-text-09",
        value: "hsl(81, 57%, 45%)",
        category: "color"
    }, {
        name: "color-syntax-text-default",
        value: "hsl(0, 0%, 100%)",
        category: "color"
    }, {
        name: "color-syntax-text-normal",
        value: "hsl(0, 0%, 100%)",
        category: "color"
    }, {
        name: "color-syntax-text-identifier",
        value: "hsl(0, 0%, 100%)",
        category: "color"
    }, {
        name: "color-syntax-text-separator",
        value: "hsl(0, 0%, 100%)",
        category: "color"
    }, {
        name: "color-syntax-text-punctuation-brackets",
        value: "hsl(54, 66%, 53%)",
        category: "color"
    }, {
        name: "color-syntax-text-punctuation",
        value: "hsl(54, 66%, 53%)",
        category: "color"
    }, {
        name: "color-syntax-text-data",
        value: "hsl(27, 94%, 60%)",
        category: "color"
    }, {
        name: "color-syntax-text-string",
        value: "hsl(3, 100%, 73%)",
        category: "color"
    }, {
        name: "color-syntax-text-attribute-value",
        value: "hsl(3, 100%, 73%)",
        category: "color"
    }, {
        name: "color-syntax-text-boolean",
        value: "hsl(328, 100%, 72%)",
        category: "color"
    }, {
        name: "color-syntax-text-function",
        value: "hsl(328, 100%, 72%)",
        category: "color"
    }, {
        name: "color-syntax-text-control",
        value: "hsl(328, 100%, 72%)",
        category: "color"
    }, {
        name: "color-syntax-text-keyword",
        value: "hsl(271, 100%, 77%)",
        category: "color"
    }, {
        name: "color-syntax-text-property",
        value: "hsl(271, 100%, 77%)",
        category: "color"
    }, {
        name: "color-syntax-text-source",
        value: "hsl(271, 100%, 77%)",
        category: "color"
    }, {
        name: "color-syntax-text-declaration",
        value: "hsl(271, 100%, 77%)",
        category: "color"
    }, {
        name: "color-syntax-text-tag",
        value: "hsl(271, 100%, 77%)",
        category: "color"
    }, {
        name: "color-syntax-text-storage-type",
        value: "hsl(271, 100%, 77%)",
        category: "color"
    }, {
        name: "color-syntax-text-section",
        value: "hsl(212, 94%, 68%)",
        category: "color"
    }, {
        name: "color-syntax-text-proc-name",
        value: "hsl(212, 94%, 68%)",
        category: "color"
    }, {
        name: "color-syntax-text-attribute-name",
        value: "hsl(212, 94%, 68%)",
        category: "color"
    }, {
        name: "color-syntax-text-variable",
        value: "hsl(212, 94%, 68%)",
        category: "color"
    }, {
        name: "color-syntax-text-operator",
        value: "hsl(212, 94%, 68%)",
        category: "color"
    }, {
        name: "color-syntax-text-namespace",
        value: "hsl(173, 72%, 43%)",
        category: "color"
    }, {
        name: "color-syntax-text-class-name",
        value: "hsl(173, 72%, 43%)",
        category: "color"
    }, {
        name: "color-syntax-text-numeric-constant",
        value: "hsl(173, 72%, 43%)",
        category: "color"
    }, {
        name: "color-syntax-text-character-constant",
        value: "hsl(173, 72%, 43%)",
        category: "color"
    }, {
        name: "color-syntax-text-comment",
        value: "hsl(81, 57%, 45%)",
        category: "color"
    }, {
        name: "color-text-neutral",
        value: "hsl(0, 0%, 100%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                lighten: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-text-neutral-inverse",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-neutral}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-text-primary",
        value: "hsl(205, 97%, 76%)",
        category: "color",
        derivation: {
            value: "{!color-primary}"
        }
    }, {
        name: "color-text-primary-inverse",
        value: "hsl(0, 0%, 0%)",
        category: "color",
        derivation: {
            value: "{!color-primary}",
            transform: [ {
                darken: {
                    value: 1
                }
            } ]
        }
    }, {
        name: "color-text-secondary",
        value: "hsl(329, 75%, 90%)",
        category: "color",
        derivation: {
            value: "{!color-secondary}"
        }
    }, {
        name: "color-thumbnail-fill-1",
        value: "hsl(212, 94%, 97%)",
        category: "color"
    }, {
        name: "color-thumbnail-fill-2",
        value: "hsl(212, 94%, 90%)",
        category: "color"
    }, {
        name: "color-thumbnail-fill-3",
        value: "hsl(212, 94%, 78%)",
        category: "color"
    }, {
        name: "color-thumbnail-fill-4",
        value: "hsl(212, 94%, 62%)",
        category: "color"
    }, {
        name: "color-zero-state-base-fill-1",
        value: "hsl(219, 0%, 0%)",
        category: "color"
    }, {
        name: "color-zero-state-base-fill-2",
        value: "hsl(219, 12%, 72%)",
        category: "color"
    }, {
        name: "color-zero-state-base-fill-3",
        value: "hsl(219, 12%, 59%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-1",
        value: "hsl(219, 12%, 22%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-2",
        value: "hsl(212, 94%, 76%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-3",
        value: "hsl(212, 94%, 57%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-4",
        value: "hsl(219, 12%, 30%)",
        category: "color"
    }, {
        name: "color-zero-state-modifier-fill-5",
        value: "hsl(219, 12%, 88%)",
        category: "color"
    }, {
        name: "style-action-border-focus",
        value: "dotted",
        category: "other"
    }, {
        name: "font-size-ratio-major-third",
        value: "1.25",
        category: "fontSizes"
    }, {
        name: "font-size-ratio-major-second",
        value: "1.125",
        category: "fontSizes"
    }, {
        name: "font-size-ratio-minor-third",
        value: "1.2",
        category: "fontSizes"
    }, {
        name: "font-space-letter-spacing-l",
        value: "2px",
        category: "letterSpacing"
    }, {
        name: "font-space-letter-spacing-m",
        value: "normal",
        category: "letterSpacing"
    }, {
        name: "font-space-letter-spacing-s",
        value: "1px",
        category: "letterSpacing"
    }, {
        name: "font-space-line-height-l",
        value: "1.6",
        category: "lineHeights"
    }, {
        name: "font-space-line-height-m",
        value: "1.5",
        category: "lineHeights"
    }, {
        name: "font-space-line-height-s",
        value: "1.4",
        category: "lineHeights"
    }, {
        name: "font-space-word-l",
        value: "2px",
        category: "other"
    }, {
        name: "font-space-word-m",
        value: "normal",
        category: "other"
    }, {
        name: "font-space-word-s",
        value: "1px",
        category: "other"
    }, {
        name: "font-style-expression-italic",
        value: "italic",
        category: "other"
    }, {
        name: "font-style-expression-normal",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-expression-oblique",
        value: "oblique",
        category: "other"
    }, {
        name: "font-style-overflow-wrap-anywhere",
        value: "anywhere",
        category: "other"
    }, {
        name: "font-style-overflow-wrap-break-word",
        value: "break-word",
        category: "other"
    }, {
        name: "font-style-overflow-wrap-normal",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-text-transform-capitalize",
        value: "capitalize",
        category: "other"
    }, {
        name: "font-style-text-transform-lowercase",
        value: "lowercase",
        category: "other"
    }, {
        name: "font-style-text-transform-none",
        value: "none",
        category: "other"
    }, {
        name: "font-style-text-transform-uppercase",
        value: "uppercase",
        category: "other"
    }, {
        name: "font-style-weight-300",
        value: "300",
        category: "fontWeights"
    }, {
        name: "font-style-weight-400",
        value: "400",
        category: "fontWeights"
    }, {
        name: "font-style-weight-500",
        value: "500",
        category: "fontWeights"
    }, {
        name: "font-style-weight-600",
        value: "600",
        category: "fontWeights"
    }, {
        name: "font-style-weight-700",
        value: "700",
        category: "fontWeights"
    }, {
        name: "font-style-word-break-break-all",
        value: "break-all",
        category: "other"
    }, {
        name: "font-style-word-break-break-word",
        value: "break-word",
        category: "other"
    }, {
        name: "font-style-word-break-keep-all",
        value: "keep-all",
        category: "other"
    }, {
        name: "font-style-word-break-normal",
        value: "normal",
        category: "other"
    }, {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "Verdana, Helvetica, Arial, sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-secondary",
        value: "Verdana, Helvetica, Arial, sans-serif",
        category: "fontFamilies"
    }, {
        name: "duration-100",
        value: "100ms",
        category: "other"
    }, {
        name: "duration-200",
        value: "200ms",
        category: "other"
    }, {
        name: "duration-250",
        value: "250ms",
        category: "other"
    }, {
        name: "duration-300",
        value: "300ms",
        category: "other"
    }, {
        name: "duration-400",
        value: "400ms",
        category: "other"
    }, {
        name: "duration-450",
        value: "450ms",
        category: "other"
    }, {
        name: "duration-700",
        value: "700ms",
        category: "other"
    }, {
        name: "duration-1000",
        value: "1s",
        category: "other"
    }, {
        name: "ease-in",
        value: "cubic-bezier(0, 0.5, 0.2, 1)",
        category: "other"
    }, {
        name: "ease-out",
        value: "cubic-bezier(0.5, 0, 0.8, 1)",
        category: "other"
    }, {
        name: "ease-in-out",
        value: "cubic-bezier(0.5, 0, 0.2, 1)",
        category: "other"
    }, {
        name: "shadow-depth-l",
        value: "0 8px 12px rgba(0, 0, 0, 0.04), 0 16px 24px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "shadow-depth-m",
        value: "0 2px 4px rgba(0, 0, 0, 0.04), 0 8px 16px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "shadow-depth-s",
        value: "0 2px 2px rgba(0, 0, 0, 0.04), 0 4px 8px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "shadow-depth-xl",
        value: "0 16px 24px rgba(0, 0, 0, 0.04), 0 32px 48px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "shadow-depth-xs",
        value: "0 1px 2px rgba(0, 0, 0, 0.04), 0 2px 4px rgba(0, 0, 0, 0.08)",
        category: "other"
    }, {
        name: "size-border-width-l",
        value: "3px",
        category: "borderWidth"
    }, {
        name: "size-border-width-m",
        value: "2px",
        category: "borderWidth"
    }, {
        name: "size-border-width-s",
        value: "1px",
        category: "borderWidth"
    }, {
        name: "size-border-width-null",
        value: "0",
        category: "borderWidth"
    }, {
        name: "size-container-l",
        value: "400px",
        category: "sizing"
    }, {
        name: "size-container-m",
        value: "320px",
        category: "sizing"
    }, {
        name: "size-container-null",
        value: "0",
        category: "sizing"
    }, {
        name: "size-container-s",
        value: "240px",
        category: "sizing"
    }, {
        name: "size-container-xl",
        value: "640px",
        category: "sizing"
    }, {
        name: "size-container-xs",
        value: "192px",
        category: "sizing"
    }, {
        name: "size-container-xxl",
        value: "960px",
        category: "sizing"
    }, {
        name: "size-container-xxs",
        value: "96px",
        category: "sizing"
    }, {
        name: "size-outline-width-xl",
        value: "4px",
        category: "other"
    }, {
        name: "size-outline-width-l",
        value: "3px",
        category: "other"
    }, {
        name: "size-outline-width-m",
        value: "2px",
        category: "other"
    }, {
        name: "size-outline-width-s",
        value: "1px",
        category: "other"
    }, {
        name: "font-size-base-text-l",
        value: "18px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-m",
        value: "16px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-s",
        value: "14px",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxxl",
        value: "1.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxl",
        value: "1.375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxl",
        value: "1.25rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xl",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-l",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-m",
        value: "0.875rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-s",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xs",
        value: "0.6875rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxs",
        value: "0.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxs",
        value: "0.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-1",
        value: "4.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-2",
        value: "3.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-3",
        value: "2.5rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-1",
        value: "1.375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-2",
        value: "1.25rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-3",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-4",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-5",
        value: "0.875rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-6",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "size-border-radius-full",
        value: "50%",
        category: "borderRadius"
    }, {
        name: "size-border-radius-l",
        value: "24px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-m",
        value: "16px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-s",
        value: "8px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-xs",
        value: "4px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-xxs",
        value: "2px",
        category: "borderRadius"
    }, {
        name: "space-base-null",
        value: "0",
        category: "spacing"
    }, {
        name: "space-base-size",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-base-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-base-xs",
        value: "0.25rem",
        category: "spacing"
    }, {
        name: "space-base-s",
        value: "0.5rem",
        category: "spacing"
    }, {
        name: "space-base-m",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-base-l",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-base-xl",
        value: "2rem",
        category: "spacing"
    }, {
        name: "space-base-xxl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-base-xxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-base-xxxxl",
        value: "3.5rem",
        category: "spacing"
    }, {
        name: "space-base-xxxxxl",
        value: "4rem",
        category: "spacing"
    }, {
        name: "space-block-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-block-xs",
        value: "0.25rem",
        category: "spacing"
    }, {
        name: "space-block-s",
        value: "0.5rem",
        category: "spacing"
    }, {
        name: "space-block-m",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-block-l",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-block-xl",
        value: "2rem",
        category: "spacing"
    }, {
        name: "space-block-xxl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-block-xxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-block-xxxxl",
        value: "3.5rem",
        category: "spacing"
    }, {
        name: "space-block-xxxxxl",
        value: "4rem",
        category: "spacing"
    }, {
        name: "space-inline-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-inline-xs",
        value: "0.25rem",
        category: "spacing"
    }, {
        name: "space-inline-s",
        value: "0.5rem",
        category: "spacing"
    }, {
        name: "space-inline-m",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-inline-l",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xl",
        value: "2rem",
        category: "spacing"
    }, {
        name: "space-inline-xxl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxxl",
        value: "3.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxxxl",
        value: "4rem",
        category: "spacing"
    }, {
        name: "space-squish-xxs",
        value: "0.0625rem 0.125rem",
        category: "spacing"
    }, {
        name: "space-squish-xs",
        value: "0.125rem 0.25rem",
        category: "spacing"
    }, {
        name: "space-squish-s",
        value: "0.25rem 0.5rem",
        category: "spacing"
    }, {
        name: "space-squish-m",
        value: "0.5rem 1rem",
        category: "spacing"
    }, {
        name: "space-squish-l",
        value: "0.75rem 1.5rem",
        category: "spacing"
    }, {
        name: "space-squish-xl",
        value: "1rem 2rem",
        category: "spacing"
    }, {
        name: "space-squish-xxl",
        value: "1.25rem 2.5rem",
        category: "spacing"
    }, {
        name: "space-stretch-xxs",
        value: "0.125rem 0.0625rem",
        category: "spacing"
    }, {
        name: "space-stretch-xs",
        value: "0.25rem 0.125rem",
        category: "spacing"
    }, {
        name: "space-stretch-s",
        value: "0.5rem 0.25rem",
        category: "spacing"
    }, {
        name: "space-stretch-m",
        value: "1rem 0.5rem",
        category: "spacing"
    }, {
        name: "space-stretch-l",
        value: "1.5rem 0.75rem",
        category: "spacing"
    }, {
        name: "size-action-border-width-focus",
        value: "4px",
        category: "sizing",
        derivation: {
            value: "{!size-outline-width-xl}"
        }
    }, {
        name: "size-zero-state-border-width",
        value: "0",
        category: "borderWidth",
        derivation: {
            value: "{!size-border-width-null}"
        }
    }, {
        name: "font-size-ratio",
        value: "1.125",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-ratio-major-second}"
        }
    }, {
        name: "font-space-letter-spacing",
        value: "normal",
        category: "letterSpacing",
        derivation: {
            value: "{!font-space-letter-spacing-m}"
        }
    }, {
        name: "font-space-line-height",
        value: "1.4",
        category: "lineHeights",
        derivation: {
            value: "{!font-space-line-height-s}"
        }
    }, {
        name: "font-space-word",
        value: "normal",
        category: "other",
        derivation: {
            value: "{!font-space-word-m}"
        }
    }, {
        name: "font-style-expression",
        value: "normal",
        category: "other",
        derivation: {
            value: "{!font-style-expression-normal}"
        }
    }, {
        name: "font-style-overflow-wrap",
        value: "anywhere",
        category: "other",
        derivation: {
            value: "{!font-style-overflow-wrap-anywhere}"
        }
    }, {
        name: "font-style-text-transform",
        value: "none",
        category: "other",
        derivation: {
            value: "{!font-style-text-transform-none}"
        }
    }, {
        name: "font-style-word-break",
        value: "break-all",
        category: "other",
        derivation: {
            value: "{!font-style-word-break-break-all}"
        }
    }, {
        name: "font-size-base-text",
        value: "14px",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-base-text-s}"
        }
    }, {
        name: "size-icon-xxxxl",
        value: "1.5625rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxxl}"
        }
    }, {
        name: "size-icon-xxxl",
        value: "1.375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxl}"
        }
    }, {
        name: "size-icon-xxl",
        value: "1.25rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxl}"
        }
    }, {
        name: "size-icon-xl",
        value: "1.125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xl}"
        }
    }, {
        name: "size-icon-l",
        value: "1rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-l}"
        }
    }, {
        name: "size-icon-m",
        value: "0.875rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-m}"
        }
    }, {
        name: "size-icon-s",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxxs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    } ]
}, {
    name: "low-density",
    selectors: [ "[data-sas-theme='low-density']" ],
    tokens: [ {
        name: "font-size-base-text-l",
        value: "18px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-m",
        value: "16px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-s",
        value: "14px",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxxl",
        value: "1.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxl",
        value: "1.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxl",
        value: "1.375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xl",
        value: "1.25rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-l",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-m",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-s",
        value: "0.875rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xs",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxs",
        value: "0.6875rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxs",
        value: "0.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-1",
        value: "4.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-2",
        value: "3.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-3",
        value: "2.5rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-1",
        value: "1.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-2",
        value: "1.375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-3",
        value: "1.25rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-4",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-5",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-6",
        value: "0.875rem",
        category: "fontSizes"
    }, {
        name: "size-border-radius-full",
        value: "50%",
        category: "borderRadius"
    }, {
        name: "size-border-radius-l",
        value: "36px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-m",
        value: "24px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-s",
        value: "12px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-xs",
        value: "6px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-xxs",
        value: "3px",
        category: "borderRadius"
    }, {
        name: "space-base-null",
        value: "0",
        category: "spacing"
    }, {
        name: "space-base-size",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-base-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-base-xs",
        value: "0.3125rem",
        category: "spacing"
    }, {
        name: "space-base-s",
        value: "0.625rem",
        category: "spacing"
    }, {
        name: "space-base-m",
        value: "1.25rem",
        category: "spacing"
    }, {
        name: "space-base-l",
        value: "1.875rem",
        category: "spacing"
    }, {
        name: "space-base-xl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-base-xxl",
        value: "3.125rem",
        category: "spacing"
    }, {
        name: "space-base-xxxl",
        value: "3.75rem",
        category: "spacing"
    }, {
        name: "space-base-xxxxl",
        value: "4.375rem",
        category: "spacing"
    }, {
        name: "space-base-xxxxxl",
        value: "5rem",
        category: "spacing"
    }, {
        name: "space-block-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-block-xs",
        value: "0.3125rem",
        category: "spacing"
    }, {
        name: "space-block-s",
        value: "0.625rem",
        category: "spacing"
    }, {
        name: "space-block-m",
        value: "1.25rem",
        category: "spacing"
    }, {
        name: "space-block-l",
        value: "1.875rem",
        category: "spacing"
    }, {
        name: "space-block-xl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-block-xxl",
        value: "3.125rem",
        category: "spacing"
    }, {
        name: "space-block-xxxl",
        value: "3.75rem",
        category: "spacing"
    }, {
        name: "space-block-xxxxl",
        value: "4.375rem",
        category: "spacing"
    }, {
        name: "space-block-xxxxxl",
        value: "5rem",
        category: "spacing"
    }, {
        name: "space-inline-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-inline-xs",
        value: "0.3125rem",
        category: "spacing"
    }, {
        name: "space-inline-s",
        value: "0.625rem",
        category: "spacing"
    }, {
        name: "space-inline-m",
        value: "1.25rem",
        category: "spacing"
    }, {
        name: "space-inline-l",
        value: "1.875rem",
        category: "spacing"
    }, {
        name: "space-inline-xl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xxl",
        value: "3.125rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxl",
        value: "3.75rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxxl",
        value: "4.375rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxxxl",
        value: "5rem",
        category: "spacing"
    }, {
        name: "space-squish-xxs",
        value: "0.0625rem 0.125rem",
        category: "spacing"
    }, {
        name: "space-squish-xs",
        value: "0.1562rem 0.3125rem",
        category: "spacing"
    }, {
        name: "space-squish-s",
        value: "0.3125rem 0.625rem",
        category: "spacing"
    }, {
        name: "space-squish-m",
        value: "0.625rem 1.25rem",
        category: "spacing"
    }, {
        name: "space-squish-l",
        value: "0.9375rem 1.875rem",
        category: "spacing"
    }, {
        name: "space-squish-xl",
        value: "1.25rem 2.5rem",
        category: "spacing"
    }, {
        name: "space-squish-xxl",
        value: "1.5625rem 3.125rem",
        category: "spacing"
    }, {
        name: "space-stretch-xxs",
        value: "0.125rem 0.0625rem",
        category: "spacing"
    }, {
        name: "space-stretch-xs",
        value: "0.3125rem 0.1562rem",
        category: "spacing"
    }, {
        name: "space-stretch-s",
        value: "0.625rem 0.3125rem",
        category: "spacing"
    }, {
        name: "space-stretch-m",
        value: "1.25rem 0.625rem",
        category: "spacing"
    }, {
        name: "space-stretch-l",
        value: "1.875rem 0.9375rem",
        category: "spacing"
    }, {
        name: "font-size-base-text",
        value: "14px",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-base-text-s}"
        }
    }, {
        name: "size-icon-xxxxl",
        value: "1.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxxl}"
        }
    }, {
        name: "size-icon-xxxl",
        value: "1.5625rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxl}"
        }
    }, {
        name: "size-icon-xxl",
        value: "1.375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxl}"
        }
    }, {
        name: "size-icon-xl",
        value: "1.25rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xl}"
        }
    }, {
        name: "size-icon-l",
        value: "1.125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-l}"
        }
    }, {
        name: "size-icon-m",
        value: "1rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-m}"
        }
    }, {
        name: "size-icon-s",
        value: "0.875rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xs}"
        }
    }, {
        name: "size-icon-xxs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xs}"
        }
    }, {
        name: "size-icon-xxxs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xs}"
        }
    } ]
}, {
    name: "medium-density",
    selectors: [ "[data-sas-theme='medium-density']" ],
    tokens: [ {
        name: "font-size-base-text-l",
        value: "18px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-m",
        value: "16px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-s",
        value: "14px",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxxl",
        value: "1.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxl",
        value: "1.375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxl",
        value: "1.25rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xl",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-l",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-m",
        value: "0.875rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-s",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xs",
        value: "0.6875rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxs",
        value: "0.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxs",
        value: "0.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-1",
        value: "4.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-2",
        value: "3.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-3",
        value: "2.5rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-1",
        value: "1.375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-2",
        value: "1.25rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-3",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-4",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-5",
        value: "0.875rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-6",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "size-border-radius-full",
        value: "50%",
        category: "borderRadius"
    }, {
        name: "size-border-radius-l",
        value: "24px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-m",
        value: "16px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-s",
        value: "8px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-xs",
        value: "4px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-xxs",
        value: "2px",
        category: "borderRadius"
    }, {
        name: "space-base-null",
        value: "0",
        category: "spacing"
    }, {
        name: "space-base-size",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-base-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-base-xs",
        value: "0.25rem",
        category: "spacing"
    }, {
        name: "space-base-s",
        value: "0.5rem",
        category: "spacing"
    }, {
        name: "space-base-m",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-base-l",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-base-xl",
        value: "2rem",
        category: "spacing"
    }, {
        name: "space-base-xxl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-base-xxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-base-xxxxl",
        value: "3.5rem",
        category: "spacing"
    }, {
        name: "space-base-xxxxxl",
        value: "4rem",
        category: "spacing"
    }, {
        name: "space-block-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-block-xs",
        value: "0.25rem",
        category: "spacing"
    }, {
        name: "space-block-s",
        value: "0.5rem",
        category: "spacing"
    }, {
        name: "space-block-m",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-block-l",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-block-xl",
        value: "2rem",
        category: "spacing"
    }, {
        name: "space-block-xxl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-block-xxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-block-xxxxl",
        value: "3.5rem",
        category: "spacing"
    }, {
        name: "space-block-xxxxxl",
        value: "4rem",
        category: "spacing"
    }, {
        name: "space-inline-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-inline-xs",
        value: "0.25rem",
        category: "spacing"
    }, {
        name: "space-inline-s",
        value: "0.5rem",
        category: "spacing"
    }, {
        name: "space-inline-m",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-inline-l",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xl",
        value: "2rem",
        category: "spacing"
    }, {
        name: "space-inline-xxl",
        value: "2.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxxl",
        value: "3.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxxxl",
        value: "4rem",
        category: "spacing"
    }, {
        name: "space-squish-xxs",
        value: "0.0625rem 0.125rem",
        category: "spacing"
    }, {
        name: "space-squish-xs",
        value: "0.125rem 0.25rem",
        category: "spacing"
    }, {
        name: "space-squish-s",
        value: "0.25rem 0.5rem",
        category: "spacing"
    }, {
        name: "space-squish-m",
        value: "0.5rem 1rem",
        category: "spacing"
    }, {
        name: "space-squish-l",
        value: "0.75rem 1.5rem",
        category: "spacing"
    }, {
        name: "space-squish-xl",
        value: "1rem 2rem",
        category: "spacing"
    }, {
        name: "space-squish-xxl",
        value: "1.25rem 2.5rem",
        category: "spacing"
    }, {
        name: "space-stretch-xxs",
        value: "0.125rem 0.0625rem",
        category: "spacing"
    }, {
        name: "space-stretch-xs",
        value: "0.25rem 0.125rem",
        category: "spacing"
    }, {
        name: "space-stretch-s",
        value: "0.5rem 0.25rem",
        category: "spacing"
    }, {
        name: "space-stretch-m",
        value: "1rem 0.5rem",
        category: "spacing"
    }, {
        name: "space-stretch-l",
        value: "1.5rem 0.75rem",
        category: "spacing"
    }, {
        name: "font-size-base-text",
        value: "14px",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-base-text-s}"
        }
    }, {
        name: "size-icon-xxxxl",
        value: "1.5625rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxxl}"
        }
    }, {
        name: "size-icon-xxxl",
        value: "1.375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxl}"
        }
    }, {
        name: "size-icon-xxl",
        value: "1.25rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxl}"
        }
    }, {
        name: "size-icon-xl",
        value: "1.125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xl}"
        }
    }, {
        name: "size-icon-l",
        value: "1rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-l}"
        }
    }, {
        name: "size-icon-m",
        value: "0.875rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-m}"
        }
    }, {
        name: "size-icon-s",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxxs",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    } ]
}, {
    name: "high-density",
    selectors: [ "[data-sas-theme='high-density']" ],
    tokens: [ {
        name: "font-size-base-text-l",
        value: "18px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-m",
        value: "16px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-s",
        value: "14px",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxxl",
        value: "1.375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxl",
        value: "1.25rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxl",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xl",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-l",
        value: "0.875rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-m",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-s",
        value: "0.6825rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xs",
        value: "0.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxs",
        value: "0.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxs",
        value: "0.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-1",
        value: "4.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-2",
        value: "3.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-3",
        value: "2.5rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-1",
        value: "1.25rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-2",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-3",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-4",
        value: "0.875",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-5",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-6",
        value: "0.6825rem",
        category: "fontSizes"
    }, {
        name: "size-border-radius-full",
        value: "50%",
        category: "borderRadius"
    }, {
        name: "size-border-radius-l",
        value: "12px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-m",
        value: "8px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-s",
        value: "4px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-xs",
        value: "2px",
        category: "borderRadius"
    }, {
        name: "size-border-radius-xxs",
        value: "1px",
        category: "borderRadius"
    }, {
        name: "space-base-null",
        value: "0",
        category: "spacing"
    }, {
        name: "space-base-size",
        value: "1rem",
        category: "spacing"
    }, {
        name: "space-base-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-base-xs",
        value: "0.1875rem",
        category: "spacing"
    }, {
        name: "space-base-s",
        value: "0.375rem",
        category: "spacing"
    }, {
        name: "space-base-m",
        value: "0.75rem",
        category: "spacing"
    }, {
        name: "space-base-l",
        value: "1.125rem",
        category: "spacing"
    }, {
        name: "space-base-xl",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-base-xxl",
        value: "1.875rem",
        category: "spacing"
    }, {
        name: "space-base-xxxl",
        value: "2.25rem",
        category: "spacing"
    }, {
        name: "space-base-xxxxl",
        value: "2.625rem",
        category: "spacing"
    }, {
        name: "space-base-xxxxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-block-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-block-xs",
        value: "0.1875rem",
        category: "spacing"
    }, {
        name: "space-block-s",
        value: "0.375rem",
        category: "spacing"
    }, {
        name: "space-block-m",
        value: "0.75rem",
        category: "spacing"
    }, {
        name: "space-block-l",
        value: "1.125rem",
        category: "spacing"
    }, {
        name: "space-block-xl",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-block-xxl",
        value: "1.875rem",
        category: "spacing"
    }, {
        name: "space-block-xxxl",
        value: "2.25rem",
        category: "spacing"
    }, {
        name: "space-block-xxxxl",
        value: "2.625rem",
        category: "spacing"
    }, {
        name: "space-block-xxxxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-inline-xxs",
        value: "0.125rem",
        category: "spacing"
    }, {
        name: "space-inline-xs",
        value: "0.1875rem",
        category: "spacing"
    }, {
        name: "space-inline-s",
        value: "0.375rem",
        category: "spacing"
    }, {
        name: "space-inline-m",
        value: "0.75rem",
        category: "spacing"
    }, {
        name: "space-inline-l",
        value: "1.125rem",
        category: "spacing"
    }, {
        name: "space-inline-xl",
        value: "1.5rem",
        category: "spacing"
    }, {
        name: "space-inline-xxl",
        value: "1.875rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxl",
        value: "2.25rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxxl",
        value: "2.625rem",
        category: "spacing"
    }, {
        name: "space-inline-xxxxxl",
        value: "3rem",
        category: "spacing"
    }, {
        name: "space-squish-xxs",
        value: "0.0625rem 0.125rem",
        category: "spacing"
    }, {
        name: "space-squish-xs",
        value: "0.0938rem 0.1875rem",
        category: "spacing"
    }, {
        name: "space-squish-s",
        value: "0.1875rem 0.375rem",
        category: "spacing"
    }, {
        name: "space-squish-m",
        value: "0.375rem 0.75rem",
        category: "spacing"
    }, {
        name: "space-squish-l",
        value: "0.5625rem 1.125rem",
        category: "spacing"
    }, {
        name: "space-squish-xl",
        value: "0.75rem 1.5rem",
        category: "spacing"
    }, {
        name: "space-squish-xxl",
        value: "0.9375rem 1.875rem",
        category: "spacing"
    }, {
        name: "space-stretch-xxs",
        value: "0.125rem 0.0625rem",
        category: "spacing"
    }, {
        name: "space-stretch-xs",
        value: "0.1875rem 0.09375rem",
        category: "spacing"
    }, {
        name: "space-stretch-s",
        value: "0.375rem 0.1875rem",
        category: "spacing"
    }, {
        name: "space-stretch-m",
        value: "0.75rem 0.375rem",
        category: "spacing"
    }, {
        name: "space-stretch-l",
        value: "1.125rem 0.5625rem",
        category: "spacing"
    }, {
        name: "font-size-base-text",
        value: "14px",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-base-text-s}"
        }
    }, {
        name: "size-icon-xxxxl",
        value: "1.375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxxl}"
        }
    }, {
        name: "size-icon-xxxl",
        value: "1.25rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxl}"
        }
    }, {
        name: "size-icon-xxl",
        value: "1.125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxl}"
        }
    }, {
        name: "size-icon-xl",
        value: "1rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xl}"
        }
    }, {
        name: "size-icon-l",
        value: "0.875rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-l}"
        }
    }, {
        name: "size-icon-m",
        value: "0.75rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-m}"
        }
    }, {
        name: "size-icon-s",
        value: "0.6825rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xs",
        value: "0.6825rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxs",
        value: "0.6825rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxxs",
        value: "0.6825rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    } ]
}, {
    name: "arabic",
    selectors: [ ":lang(ar)" ],
    tokens: [ {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', 'Geeza Pro', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-secondary",
        value: "'AvenirNext', 'Geeza Pro', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-space-line-height-m",
        value: "1.5",
        category: "lineHeights"
    }, {
        name: "font-style-weight-300",
        value: "400",
        category: "fontWeights"
    }, {
        name: "font-space-line-height",
        value: "1.5",
        category: "lineHeights",
        derivation: {
            value: "{!font-space-line-height-m}"
        }
    } ]
}, {
    name: "arabicPseudo",
    selectors: [ ":lang(ar-xx)" ],
    tokens: [ {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', 'PseudoArabic', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-secondary",
        value: "'AvenirNext', 'PseudoArabic', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-space-line-height-m",
        value: "1.5",
        category: "lineHeights"
    }, {
        name: "font-style-weight-300",
        value: "400",
        category: "fontWeights"
    }, {
        name: "font-space-line-height",
        value: "1.5",
        category: "lineHeights",
        derivation: {
            value: "{!font-space-line-height-m}"
        }
    } ]
}, {
    name: "chineseChina",
    selectors: [ ":lang(zh)", ":lang(zh-cn)", ":lang(zh-sg)", ":lang(zh-hans)" ],
    tokens: [ {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', '微软雅黑体', 'Microsoft YaHei New', '微软雅黑', 'Microsoft Yahei', '宋体', 'SimSun', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-secondary",
        value: "'AvenirNext', '微软雅黑体', 'Microsoft YaHei New', '微软雅黑', 'Microsoft Yahei', '宋体', 'SimSun', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-size-base-text-l",
        value: "18px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-m",
        value: "16px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-s",
        value: "14px",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxxl",
        value: "1.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxl",
        value: "1.4375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxl",
        value: "1.3125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xl",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-l",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-m",
        value: "0.9375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-s",
        value: "0.8125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xs",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxs",
        value: "0.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxs",
        value: "0.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-1",
        value: "6.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-2",
        value: "5.3125rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-3",
        value: "4.1875rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-1",
        value: "1.4375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-2",
        value: "1.3125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-3",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-4",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-5",
        value: "0.9375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-6",
        value: "0.8125rem",
        category: "fontSizes"
    }, {
        name: "font-space-line-height-m",
        value: "1.5",
        category: "lineHeights"
    }, {
        name: "font-style-expression-italic",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-weight-300",
        value: "400",
        category: "fontWeights"
    }, {
        name: "font-size-base-text",
        value: "14px",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-base-text-s}"
        }
    }, {
        name: "font-space-line-height",
        value: "1.5",
        category: "lineHeights",
        derivation: {
            value: "{!font-space-line-height-m}"
        }
    }, {
        name: "size-icon-xxxxl",
        value: "1.625rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxxl}"
        }
    }, {
        name: "size-icon-xxxl",
        value: "1.4375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxl}"
        }
    }, {
        name: "size-icon-xxl",
        value: "1.3125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxl}"
        }
    }, {
        name: "size-icon-xl",
        value: "1.125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xl}"
        }
    }, {
        name: "size-icon-l",
        value: "1rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-l}"
        }
    }, {
        name: "size-icon-m",
        value: "0.9375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-m}"
        }
    }, {
        name: "size-icon-s",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xs",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxs",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxxs",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    } ]
}, {
    name: "chineseHongKong",
    selectors: [ ":lang(zh-hk)" ],
    tokens: [ {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', '微軟正黑體', 'Microsoft JhengHei', '黑體-繁', 'Heiti TC', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-secondary",
        value: "'AvenirNext', '微軟正黑體', 'Microsoft JhengHei', '黑體-繁', 'Heiti TC', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-size-base-text-l",
        value: "18px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-m",
        value: "16px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-s",
        value: "14px",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxxl",
        value: "1.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxl",
        value: "1.4375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxl",
        value: "1.3125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xl",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-l",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-m",
        value: "0.9375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-s",
        value: "0.8125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xs",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxs",
        value: "0.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxs",
        value: "0.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-1",
        value: "6.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-2",
        value: "5.3125rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-3",
        value: "4.1875rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-1",
        value: "1.4375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-2",
        value: "1.3125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-3",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-4",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-5",
        value: "0.9375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-6",
        value: "0.8125rem",
        category: "fontSizes"
    }, {
        name: "font-space-line-height-m",
        value: "1.5",
        category: "lineHeights"
    }, {
        name: "font-style-expression-italic",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-weight-300",
        value: "400",
        category: "fontWeights"
    }, {
        name: "font-size-base-text",
        value: "14px",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-base-text-s}"
        }
    }, {
        name: "font-space-line-height",
        value: "1.5",
        category: "lineHeights",
        derivation: {
            value: "{!font-space-line-height-m}"
        }
    }, {
        name: "size-icon-xxxxl",
        value: "1.625rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxxl}"
        }
    }, {
        name: "size-icon-xxxl",
        value: "1.4375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxl}"
        }
    }, {
        name: "size-icon-xxl",
        value: "1.3125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxl}"
        }
    }, {
        name: "size-icon-xl",
        value: "1.125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xl}"
        }
    }, {
        name: "size-icon-l",
        value: "1rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-l}"
        }
    }, {
        name: "size-icon-m",
        value: "0.9375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-m}"
        }
    }, {
        name: "size-icon-s",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xs",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxs",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxxs",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    } ]
}, {
    name: "chinesePseudo",
    selectors: [ ":lang(zh-cn-pseudo)" ],
    tokens: [ {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', '微软雅黑体', 'Microsoft YaHei New', '微软雅黑', 'Microsoft Yahei', '宋体', 'SimSun', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-secondary",
        value: "'AvenirNext', '微软雅黑体', 'Microsoft YaHei New', '微软雅黑', 'Microsoft Yahei', '宋体', 'SimSun', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-size-base-text-l",
        value: "18px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-m",
        value: "16px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-s",
        value: "14px",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxxl",
        value: "1.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxl",
        value: "1.4375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxl",
        value: "1.3125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xl",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-l",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-m",
        value: "0.9375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-s",
        value: "0.8125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xs",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxs",
        value: "0.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxs",
        value: "0.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-1",
        value: "6.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-2",
        value: "5.3125rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-3",
        value: "4.1875rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-1",
        value: "1.4375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-2",
        value: "1.3125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-3",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-4",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-5",
        value: "0.9375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-6",
        value: "0.8125rem",
        category: "fontSizes"
    }, {
        name: "font-space-line-height-m",
        value: "1.5",
        category: "lineHeights"
    }, {
        name: "font-style-expression-italic",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-weight-300",
        value: "400",
        category: "fontWeights"
    }, {
        name: "font-size-base-text",
        value: "14px",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-base-text-s}"
        }
    }, {
        name: "font-space-line-height",
        value: "1.5",
        category: "lineHeights",
        derivation: {
            value: "{!font-space-line-height-m}"
        }
    }, {
        name: "size-icon-xxxxl",
        value: "1.625rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxxl}"
        }
    }, {
        name: "size-icon-xxxl",
        value: "1.4375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxl}"
        }
    }, {
        name: "size-icon-xxl",
        value: "1.3125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxl}"
        }
    }, {
        name: "size-icon-xl",
        value: "1.125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xl}"
        }
    }, {
        name: "size-icon-l",
        value: "1rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-l}"
        }
    }, {
        name: "size-icon-m",
        value: "0.9375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-m}"
        }
    }, {
        name: "size-icon-s",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xs",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxs",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxxs",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    } ]
}, {
    name: "hebrew",
    selectors: [ ":lang(he)" ],
    tokens: [ {
        name: "font-family-secondary",
        value: "'AvenirNext', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    } ]
}, {
    name: "japanese",
    selectors: [ ":lang(jp)" ],
    tokens: [ {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'Osaka', 'メイリオ', 'Meiryo', 'ＭＳ Ｐゴシック', 'MS PGothic', 'Noto Sans JP', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-secondary",
        value: "'AvenirNext', 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'Osaka', 'メイリオ', 'Meiryo', 'ＭＳ Ｐゴシック', 'MS PGothic', 'Noto Sans JP', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-space-line-height-m",
        value: "1.5",
        category: "lineHeights"
    }, {
        name: "font-style-expression-italic",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-weight-300",
        value: "400",
        category: "fontWeights"
    }, {
        name: "font-space-line-height",
        value: "1.5",
        category: "lineHeights",
        derivation: {
            value: "{!font-space-line-height-m}"
        }
    } ]
}, {
    name: "korean",
    selectors: [ ":lang(ko)" ],
    tokens: [ {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', '맑은 고딕', 'Malgun Gothic', 'Apple SD Gothic Neo', 'NanumBarunGothic', '굴림', 'Gulim', '돋움', 'Dotum', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-secondary",
        value: "'AvenirNext', '맑은 고딕', 'Malgun Gothic', 'Apple SD Gothic Neo', 'NanumBarunGothic', '굴림', 'Gulim', '돋움', 'Dotum', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-space-line-height-m",
        value: "1.5",
        category: "lineHeights"
    }, {
        name: "font-style-expression-italic",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-weight-300",
        value: "400",
        category: "fontWeights"
    }, {
        name: "font-space-line-height",
        value: "1.5",
        category: "lineHeights",
        derivation: {
            value: "{!font-space-line-height-m}"
        }
    } ]
}, {
    name: "taiwanese",
    selectors: [ ":lang(zh-tw)", ":lang(zh-hant)" ],
    tokens: [ {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', '微軟正黑體', 'Microsoft JhengHei', '黑體-繁', 'Heiti TC', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-secondary",
        value: "'AvenirNext', '微軟正黑體', 'Microsoft JhengHei', '黑體-繁', 'Heiti TC', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-size-base-text-l",
        value: "18px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-m",
        value: "16px",
        category: "fontSizes"
    }, {
        name: "font-size-base-text-s",
        value: "14px",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxxl",
        value: "1.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxl",
        value: "1.4375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxl",
        value: "1.3125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xl",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-l",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-m",
        value: "0.9375rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-s",
        value: "0.8125rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xs",
        value: "0.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxs",
        value: "0.625rem",
        category: "fontSizes"
    }, {
        name: "font-size-body-text-xxxs",
        value: "0.5625rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-1",
        value: "6.75rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-2",
        value: "5.3125rem",
        category: "fontSizes"
    }, {
        name: "font-size-display-text-3",
        value: "4.1875rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-1",
        value: "1.4375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-2",
        value: "1.3125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-3",
        value: "1.125rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-4",
        value: "1rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-5",
        value: "0.9375rem",
        category: "fontSizes"
    }, {
        name: "font-size-heading-text-6",
        value: "0.8125rem",
        category: "fontSizes"
    }, {
        name: "font-space-line-height-m",
        value: "1.5",
        category: "lineHeights"
    }, {
        name: "font-style-expression-italic",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-weight-300",
        value: "400",
        category: "fontWeights"
    }, {
        name: "font-size-base-text",
        value: "14px",
        category: "fontSizes",
        derivation: {
            value: "{!font-size-base-text-s}"
        }
    }, {
        name: "font-space-line-height",
        value: "1.5",
        category: "lineHeights",
        derivation: {
            value: "{!font-space-line-height-m}"
        }
    }, {
        name: "size-icon-xxxxl",
        value: "1.625rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxxl}"
        }
    }, {
        name: "size-icon-xxxl",
        value: "1.4375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxxl}"
        }
    }, {
        name: "size-icon-xxl",
        value: "1.3125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xxl}"
        }
    }, {
        name: "size-icon-xl",
        value: "1.125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-xl}"
        }
    }, {
        name: "size-icon-l",
        value: "1rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-l}"
        }
    }, {
        name: "size-icon-m",
        value: "0.9375rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-m}"
        }
    }, {
        name: "size-icon-s",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xs",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxs",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    }, {
        name: "size-icon-xxxs",
        value: "0.8125rem",
        category: "sizing",
        derivation: {
            value: "{!font-size-body-text-s}"
        }
    } ]
}, {
    name: "thai",
    selectors: [ ":lang(th)" ],
    tokens: [ {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', 'Thonburi', 'Leelawadee UI', 'TH Sarabun New', 'Cordia New', Roboto, Noto, 'Noto Sans Thai', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-secondary",
        value: "'AvenirNext', 'Thonburi', 'Leelawadee UI', 'TH Sarabun New', 'Cordia New', Roboto, Noto, 'Noto Sans Thai', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-space-line-height-m",
        value: "1.5",
        category: "lineHeights"
    }, {
        name: "font-style-expression-italic",
        value: "normal",
        category: "other"
    }, {
        name: "font-style-weight-300",
        value: "400",
        category: "fontWeights"
    }, {
        name: "font-space-line-height",
        value: "1.5",
        category: "lineHeights",
        derivation: {
            value: "{!font-space-line-height-m}"
        }
    } ]
}, {
    name: "vietnamese",
    selectors: [ ":lang(vi)", ":lang(vi-VN)" ],
    tokens: [ {
        name: "font-family-secondary",
        value: "'AvenirNext', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-primary",
        value: "'AvenirNext', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        category: "fontFamilies"
    }, {
        name: "font-family-monospace",
        value: "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        category: "fontFamilies"
    } ]
} ];

const Fv = Dh("themeOverrides");

const jv = [ {
    token: "colorNeutral",
    themeVar: "@neutralColorThemeDesigner"
}, {
    token: "colorPrimary",
    themeVar: "@primaryColorThemeDesigner"
}, {
    token: "colorSecondary",
    themeVar: "@secondaryColorThemeDesigner"
}, {
    token: "colorAlert",
    themeVar: "@alertColor"
}, {
    token: "colorWarning",
    themeVar: "@warningColor"
}, {
    token: "colorSuccess",
    themeVar: "@successColor"
}, {
    token: "colorInfo",
    themeVar: "@informationColor"
}, {
    token: "colorStatusNeutral",
    themeVar: "@neutralColorThemeDesigner"
}, {
    token: "colorGraph1",
    themeVar: "@GraphPaletteColor1"
}, {
    token: "colorGraph2",
    themeVar: "@GraphPaletteColor2"
}, {
    token: "colorGraph3",
    themeVar: "@GraphPaletteColor3"
}, {
    token: "colorGraph4",
    themeVar: "@GraphPaletteColor4"
}, {
    token: "colorGraph5",
    themeVar: "@GraphPaletteColor5"
}, {
    token: "colorGraph6",
    themeVar: "@GraphPaletteColor6"
}, {
    token: "colorGraph7",
    themeVar: "@GraphPaletteColor7"
}, {
    token: "colorGraph8",
    themeVar: "@GraphPaletteColor8"
}, {
    token: "colorKPI1",
    themeVar: "@kpiPaletteRange1"
}, {
    token: "colorKPI3",
    themeVar: "@kpiPaletteRange3"
}, {
    token: "colorKPI5",
    themeVar: "@kpiPaletteRange5"
}, {
    token: "primary",
    themeVar: "@primaryColorThemeDesigner"
}, {
    token: "secondary",
    themeVar: "@secondaryColorThemeDesigner"
}, {
    token: "neutral",
    themeVar: "@neutralColorThemeDesigner"
}, {
    token: "alert",
    themeVar: "@alertColor"
}, {
    token: "warning",
    themeVar: "@warningColor"
}, {
    token: "success",
    themeVar: "@successColor"
}, {
    token: "information",
    themeVar: "@informationColor"
} ];

const Vv = [ {
    token: "fontFamily",
    themeVar: "@fontFamilyOverride",
    modify: e => e.replace(/['"\\~,]+/g, "")
}, {
    token: "fontSizeCore",
    themeVar: "@baseLineFontSizeCore"
}, {
    token: "fontSizeBase",
    themeVar: "@baseLineFontSize"
}, {
    token: "bannerBg",
    themeVar: "@bannerBackgroundColor"
}, {
    token: "bannerFg",
    themeVar: "@bannerTextColor"
}, {
    token: "bannerImg",
    themeVar: "@bannerImageId",
    modify: e => e.replace(/"/g, "")
}, {
    token: "fontSizeBase",
    themeVar: "@baseLineFontSize"
}, {
    token: "splashFg",
    themeVar: "@splashScreenAnimationColor"
}, {
    token: "splashBg",
    themeVar: "@splashScreenBackgroundColor"
}, {
    token: "splashImg",
    themeVar: "@splashImageId",
    modify: e => e.replace(/"/g, "")
}, {
    token: "transitionFg",
    themeVar: "@transitionScreenAnimationColor"
}, {
    token: "transitionBg",
    themeVar: "@transitionScreenBackgroundColor"
}, {
    token: "tableBorderColor",
    themeVar: "@tableBorderColor"
}, {
    token: "tableCellBorderColor",
    themeVar: "@tableCellBorderColor"
}, {
    token: "tableHeaderBackground",
    themeVar: "@tableHeaderBackground"
}, {
    token: "tableHeaderBorderRightColor",
    themeVar: "@tableHeaderBorderRightColor"
}, {
    token: "tableHeaderLabelColor",
    themeVar: "@tableHeaderLabelColor"
}, {
    token: "tableRowBackgroundColorEven",
    themeVar: "@tableRowBackgroundColorEven"
}, {
    token: "tableRowBackgroundColorOdd",
    themeVar: "@tableRowBackgroundColorOdd"
}, {
    token: "tableTextColor",
    themeVar: "@tableTextColor"
}, {
    token: "tableTotalsBackgroundColor",
    themeVar: "@tableTotalsBackgroundColor"
}, {
    token: "tableTotalsTextColor",
    themeVar: "@tableTotalsTextColor"
}, {
    token: "transitionImg",
    themeVar: "@transitionImageId",
    modify: e => e.replace(/"/g, "")
} ];

const Hv = e => {
    e = e ?? {};
    let t = e.baseThemeId;
    let o = undefined;
    if (e.contentType === "application") {
        if (!t || !Gv(t)) {
            Fv.warn(`Unsupported application 'baseThemeId' provided ('${t}'). Defaulting to 'sas_corporate'.`);
            t = "sas_corporate";
        }
    } else if (e.contentType === "report") {
        if (!t || !qv(t)) {
            Fv.warn(`Unsupported report 'baseThemeId' provided ('${t}'). Defaulting to 'light'.`);
            t = "light";
        }
        o = t;
    } else {
        Fv.warn(`Unrecognized value for 'contentType' provided ('${e.contentType}').`);
        if (t && Gv(t)) ; else if (t && qv(t)) {
            o = t;
        } else {
            t = "sas_corporate";
        }
    }
    const n = Lb[t].baseThemeName;
    const a = {};
    for (const {themeVar: t, token: o} of jv) {
        const n = e.styleData?.[t];
        if (n) {
            a[o] = n;
        }
    }
    const r = {};
    for (const {themeVar: t, token: o, modify: n} of Vv) {
        const a = e.styleData?.[t];
        if (a) {
            r[o] = n ? n(a) : a;
        }
    }
    return {
        baseThemeName: n,
        ...o ? {
            baseReportThemeName: o
        } : {},
        colors: a,
        overrides: r
    };
};

const Uv = e => Ib.hasOwnProperty(e);

const Gv = e => _b.hasOwnProperty(e);

function Kv(e) {
    let t = e.colors?.colorNeutral;
    let o = e.colors?.colorPrimary;
    let n;
    let a;
    let r;
    let s;
    let i;
    let l;
    let c;
    let d;
    let u;
    const m = ze(0, 1, 1);
    switch (e.baseThemeName) {
      case "high-contrast":
        n = Ib["high-contrast"];
        t = t ?? n.colors.colorNeutral;
        o = o ?? n.colors.colorPrimary;
        a = ze(Fe(t).hue, Fe(t).saturation, 0);
        r = ze(Fe(t).hue, Fe(t).saturation, .17);
        s = ze(Fe(t).hue, Fe(t).saturation, 0);
        i = ze(Fe(t).hue, Fe(t).saturation, .83);
        l = ze(Fe(t).hue, Fe(t).saturation, .12);
        c = ze(Fe(t).hue, Fe(t).saturation, 1);
        d = ze(Fe(t).hue, Fe(t).saturation, 1);
        u = ze(Fe(t).hue, Fe(t).saturation, 0);
        break;

      case "dark":
        n = Ib.dark;
        t = t ?? n.colors.colorNeutral;
        o = o ?? n.colors.colorPrimary;
        a = ze(Fe(o).hue, Fe(o).saturation, .08);
        r = ze(Fe(o).hue, Fe(o).saturation, .15);
        s = ze(Fe(o).hue, Fe(o).saturation, .12);
        i = ze(Fe(t).hue, Fe(t).saturation, .26);
        l = ze(Fe(o).hue, Fe(o).saturation, .15);
        c = ze(Fe(t).hue, Fe(t).saturation, 1);
        d = ze(Fe(t).hue, Fe(t).saturation, .64);
        u = ze(Fe(t).hue, Fe(t).saturation, 0);
        break;

      default:
        n = Ib.light;
        t = t ?? n.colors.colorNeutral;
        o = o ?? n.colors.colorPrimary;
        a = ze(Fe(t).hue, Fe(t).saturation, 1);
        r = ze(Fe(t).hue, Fe(t).saturation, .98);
        s = ze(Fe(t).hue, Fe(t).saturation, .95);
        i = ze(Fe(t).hue, Fe(t).saturation, .83);
        l = o;
        c = ze(Fe(t).hue, Fe(t).saturation, 0);
        d = ze(Fe(t).hue, Fe(t).saturation, .46);
        u = ze(Fe(t).hue, Fe(t).saturation, 1);
    }
    return {
        colorNeutral: t,
        colorPrimary: o,
        colorSecondary: e.colors?.colorSecondary ?? n.colors.colorSecondary,
        colorAlert: e.colors?.colorAlert ?? n.colors.colorAlert,
        colorWarning: e.colors?.colorWarning ?? n.colors.colorWarning,
        colorSuccess: e.colors?.colorSuccess ?? n.colors.colorSuccess,
        colorInfo: e.colors?.colorInfo ?? n.colors.colorInfo,
        colorStatusNeutral: e.colors?.colorStatusNeutral ?? n.colors.colorStatusNeutral,
        colorUiLight: a,
        colorUiMedium: r,
        colorUiDark: s,
        colorUiBorder: i,
        colorUiPop: l,
        colorTextDefault: c,
        colorTextLabel: d,
        colorTextInverse: u,
        colorTextPrimary: e.colors?.colorPrimary ?? n.colors.colorTextPrimary,
        colorTextSecondary: e.colors?.colorSecondary ?? n.colors.colorTextSecondary,
        colorTextPop: m,
        colorGraph1: e.colors?.colorGraph1 ?? n.colors.colorGraph1,
        colorGraph2: e.colors?.colorGraph2 ?? n.colors.colorGraph2,
        colorGraph3: e.colors?.colorGraph3 ?? n.colors.colorGraph3,
        colorGraph4: e.colors?.colorGraph4 ?? n.colors.colorGraph4,
        colorGraph5: e.colors?.colorGraph5 ?? n.colors.colorGraph5,
        colorGraph6: e.colors?.colorGraph6 ?? n.colors.colorGraph6,
        colorGraph7: e.colors?.colorGraph7 ?? n.colors.colorGraph7,
        colorGraph8: e.colors?.colorGraph8 ?? n.colors.colorGraph8,
        colorKPI1: e.colors?.colorKPI1 ?? n.colors.colorKPI1,
        colorKPI3: e.colors?.colorKPI3 ?? n.colors.colorKPI3,
        colorKPI5: e.colors?.colorKPI5 ?? n.colors.colorKPI5
    };
}

const Wv = Dh("reportThemes");

function $v(e) {
    let t;
    const o = e.baseReportThemeName ?? e.baseThemeName;
    if (qv(o)) {
        t = Yv(o);
    } else {
        Wv.warn(`Unsupported 'baseReportThemeName' provided ('${o}'). Defaulting to 'light'.`);
        t = Yv("light");
    }
    return {
        ...t,
        colors: {
            ...t.colors,
            ...e.colors
        },
        overrides: {
            ...t.overrides,
            ...e.overrides
        }
    };
}

function Yv(e) {
    if (!qv(e)) {
        return Ib.light;
    }
    const {baseThemeName: t, colors: o} = Db[e];
    let n = t;
    if (!Uv(n)) {
        Wv.warn(`Unsupported 'baseThemeName' provided ('${n}'). Defaulting to 'light'.`);
        n = "light";
    }
    const a = Ib[n];
    return {
        ...a,
        colors: {
            ...a.colors,
            ...o
        },
        baseReportThemeName: e,
        enableNovaTokens: false
    };
}

function qv(e) {
    return Db.hasOwnProperty(e);
}

function Xv(e) {
    const t = !!e.baseReportThemeName;
    const o = e.baseThemeName === "dark" || e.baseThemeName === "high-contrast";
    return t && o;
}

function Zv(e) {
    switch (e.baseReportThemeName) {
      case "marine":
      case "midnight":
      case "opal":
      case "sail":
      case "aqua":
      case "umstead":
      case "highcontrast2018":
      case "highcontrast2017":
      case "light":
      case "dark":
      case "snow":
      case "highcontrast":
        return "2019";

      case "midnight2020":
      case "highcontrast2020":
      default:
        return "latest";
    }
}

const Jv = (e, t) => je(t, Ve(1, e));

const Qv = (e, t, o) => {
    a((() => {
        const n = o => {
            const n = !Array.isArray(e) ? [ e ] : e;
            for (const e of n) {
                if (e.current?.contains(o.target)) {
                    return;
                }
            }
            t();
        };
        window.addEventListener("mousedown", n, o);
        return () => {
            window.removeEventListener("mousedown", n, o);
        };
    }), [ e, t, o ]);
};

const ey = {
    writingMode: "horizontal-tb",
    direction: "ltr",
    textOrientation: "mixed"
};

const ty = i(ey);

ty.Consumer;

const oy = e => {
    const o = r((() => ({
        writingMode: e.writingMode || ey.writingMode,
        direction: e.direction || ey.direction,
        textOrientation: e.textOrientation || ey.textOrientation
    })), [ e.writingMode, e.direction, e.textOrientation ]);
    return t(ty.Provider, {
        value: o
    }, e.children);
};

const ny = () => l(ty);

function ay() {
    const e = l(ty);
    return e.direction === "rtl";
}

const ry = i(undefined);

ry.displayName = "PopoverRootContext";

ry.Consumer;

const sy = ry.Provider;

let iy = null;

function ly(e = false) {
    if (iy === null) {
        const e = document.createElement("div");
        e.style.position = "absolute";
        e.style.top = "0px";
        e.style.zIndex = "20";
        document.body.appendChild(e);
        iy = e;
    }
    if (e) {
        iy.style.removeProperty("left");
        iy.style.right = "0px";
    } else {
        iy.style.removeProperty("right");
        iy.style.left = "0px";
    }
    return iy;
}

function cy() {
    const e = l(ry);
    const t = ay();
    if (e !== undefined) {
        return e;
    } else {
        return ly(t);
    }
}

function dy(e) {
    if (null === e || "object" !== typeof e) return e;
    if (e instanceof Date) {
        const t = new Date;
        t.setTime(e.getTime());
        return t;
    }
    if (e instanceof Array) {
        const t = [];
        for (let o = 0, n = e.length; o < n; o++) {
            t[o] = dy(e[o]);
        }
        return t;
    }
    if (e instanceof Object) {
        const t = {};
        for (const o in e) {
            if (e.hasOwnProperty(o)) {
                t[o] = dy(e[o]);
            }
        }
        return t;
    }
    throw new Error("Unable to copy obj! Its type isn't supported.");
}

const uy = function(e) {
    if ("object" !== typeof e || e === null) {
        return e;
    }
    const t = Object.getOwnPropertyNames(e);
    for (const o of t) {
        const t = e[o];
        if (typeof t === "object" && t !== null) uy(t);
    }
    return Object.freeze(e);
};

const my = e => new Promise((t => setTimeout(t, e)));

function py() {
    const e = document.getElementById("sas-nc-style")?.nonce;
    return /^{{.*}}$/.test(e) ? undefined : e;
}

class fy {
    constructor() {
        this.store = new Map;
    }
    addCache(e) {
        this.store.set(e.name, e);
    }
    getCache(e) {
        return this.store.get(e);
    }
    findCache(e) {
        if (this.store.size < 1) return;
        for (const t of this.store) {
            if (t[1].canHandle(e)) {
                return t[1];
            }
        }
    }
    static get instance() {
        if (fy._instance === undefined) {
            fy._instance = new fy;
        }
        return fy._instance;
    }
}

const gy = Math.pow(2, 15) - 1;

const hy = "featureFlags";

Dh(hy);

Dh(hy);

Dh(hy);

const by = () => {
    console.error("Incorrect HelpCenter data provider.");
    return Promise.reject();
};

const vy = {
    getSoftwareInfo: by
};

const yy = () => vy;

const xy = "http://documentation.sas.com";

const Sy = "https://documentation.sas.com/api/features/sessionFeatureList";

let wy;

const Cy = async e => {
    const t = await Fy();
    const o = Ly(t);
    if (!o.softwareVersion && e.getSoftwareInfo) {
        try {
            o.softwareVersion = (await e.getSoftwareInfo()).softwareVersion;
        } catch {}
    }
    return o;
};

const Ey = async e => {
    try {
        const t = await (e.getEnabledFeatures?.()) ?? [];
        if (t.length === 0) return undefined;
        const o = await aS.post(Sy, JSON.stringify({
            featureFlags: t
        }), {
            headers: {
                "Content-Type": "application/json"
            }
        });
        const n = o.data;
        if (n.requestorId && n.expiration) {
            return {
                requestorId: n.requestorId,
                expireDate: Date.parse(`${n.expiration}Z`)
            };
        }
    } catch {
        return;
    }
};

const Iy = async e => {
    const t = await wy;
    if (!wy || t && t.expireDate < Date.now()) {
        wy = Ey(e);
    }
    const o = await wy;
    return o?.requestorId;
};

const _y = async e => {
    const {dataProvider: t = yy(), invertColors: o, customParams: n} = e ?? {};
    const [a, r] = await Promise.all([ Cy(t), Iy(t) ]);
    const s = {
        ...a,
        requestor: "inapp",
        requestorId: r,
        theme: o ? "hc" : undefined
    };
    return Dy({
        ...s,
        ...n
    });
};

const Dy = e => {
    const t = [];
    for (const o of Object.keys(e)) {
        const n = e[o];
        if (n) {
            t.push(`${encodeURIComponent(o)}=${encodeURIComponent(n)}`);
        }
    }
    return `${xy}/?${t.join("&")}`;
};

const Ly = e => {
    if (e === null) return {};
    const t = e.get("help");
    return {
        softwareVersion: t?.softwareVersion,
        softwareSpecialConfig: t?.softwareSpecialConfig,
        softwareId: t?.softwareId || e.get("appId"),
        softwareContextId: t?.softwareContextId || e.get("appId")
    };
};

const Ty = "/preferences/preferences";

const Ry = "@currentUser";

const ky = async (e = {}) => {
    const t = Object.assign(e, {
        headers: {
            Accept: "application/vnd.sas.collection+json"
        }
    });
    const o = `${Ty}/${Ry}`;
    const n = await aS.get(o, t);
    return n.data;
};

const Ay = "AppEvent.ready";

const My = "AppEvent.signout";

const Ny = {};

const Oy = {};

let Py = false;

let By = false;

async function zy(e) {
    const t = {
        Accept: "application/json",
        crossDomain: "false",
        authenticate: "true"
    };
    const o = await aS.get(e, t);
    if (o.status !== 200) {
        throw new Error(`Failed to fetch configurations ${e}`);
    }
    return await o.data;
}

async function Fy() {
    return jy({});
}

async function jy(e) {
    if (Py) return Promise.resolve(Oy);
    let t = `ui/configurations`;
    let o = false;
    if (e) {
        let n;
        for (n in e) {
            const a = n.toLowerCase();
            if (a === "configurationendpoint") {
                t = e[n].toString();
            }
            if (a === "disableconfigurationendpoint") {
                o = !!e[n];
            }
        }
    }
    const n = function(e, t) {
        if (typeof t === "undefined" || t === null) {
            return;
        }
        e = e.toLowerCase();
        switch (typeof t) {
          case "boolean":
            Oy[e] = !!t;
            break;

          case "string":
            Oy[e] = `${t}`;
            break;

          case "number":
            Oy[e] = t;
            break;

          case "function":
            if (typeof t !== "function") {
                throw new Error("unsupported value");
            }
            Oy[e] = t;
            break;

          case "object":
            if (Array.isArray(t)) {
                Oy[e] = t;
            } else if (typeof t === "object") {
                Oy[e] = t;
                let o;
                for (o in t) {
                    n(`${e}.${o}`, t[o]);
                }
            } else {
                throw new Error("unsupported value");
            }
            break;

          default:
            throw new Error("illegal state");
        }
    };
    const a = function() {
        let t;
        for (t in e) {
            n(t, e[t]);
        }
    };
    const r = function() {
        const e = "nova-";
        const t = new URLSearchParams(window.location.href);
        if (t) {
            for (const o in Oy) {
                const a = t.get(e + o);
                if (a === "" || `${a}` === "") {
                    Oy[o] = undefined;
                } else {
                    n(o, a);
                }
            }
        }
    };
    const s = function() {
        Oy.get = function(e) {
            return Oy[e.toLowerCase()];
        };
    };
    const i = function() {
        Py = true;
        By = false;
        return Oy;
    };
    if (o) {
        a();
        r();
        s();
        return Promise.resolve(i());
    }
    let l;
    for (l in Ny) {
        if (l.indexOf(t) !== -1) return Ny[l];
    }
    if (By) return Ny[t];
    By = true;
    return Ny[t] = zy(t).then((e => {
        delete Ny[t];
        a();
        let o;
        for (o in e) {
            n(o, e[o]);
        }
        r();
        s();
        return i();
    })).catch((e => {
        delete Ny[t];
        console.error(`Fetch configurations failed -${e}`);
        a();
        r();
        s();
        return i();
    }));
}

Dh("ApplicationSwitcherMain");

Dh("AppRegistryService");

class Vy {
    name="sas.IdentitiesCache";
    constructor(e) {
        this._axios = e;
        this.helper = new Xy(e);
        bb.subscribe("Cache.Reload", (() => this.helper.invalidate()));
        bb.subscribe("AppSwitcher.AppShow", (() => this.helper.invalidate()));
    }
    canHandle(e) {
        if (!e.url || e.method === undefined || e.responseType && e.responseType !== "json") {
            return false;
        }
        return Wy.test(e.url);
    }
    handle(e) {
        if (!this.canHandle(e)) {
            return this._axios(e);
        }
        if (e.method.toUpperCase() !== "GET") {
            this.helper.invalidate();
            return this._axios(e);
        }
        const t = new URL(e.url, self.location.origin);
        if (t.search && e.params !== undefined) {
            return this._axios(e);
        }
        if (t.pathname === Uy && Hy(e.headers).endsWith("json")) {
            return Promise.resolve(this.helper.getUsrIdentity());
        }
        if (t.pathname === Ky && Hy(e.headers).endsWith("json")) {
            return Promise.resolve(this.helper.getUsrAvatar());
        }
        if (t.pathname === Gy && Hy(e.headers) === Yy) {
            return Promise.resolve(this.helper.isUsrAdmin());
        }
        return this._axios(e);
    }
}

const Hy = e => {
    if (e && ("Accept" in e || "accept" in e)) {
        const t = e.accept || e.Accept;
        return t.toLowerCase();
    }
    return "";
};

const Uy = `/identities/users/@currentUser`;

const Gy = `${Uy}/administrator`;

const Ky = `${Uy}/avatar`;

const Wy = new RegExp(`^${Uy}($|/avatar|/administrator)`);

const $y = `application/vnd.sas.identity.user+json`;

const Yy = "application/vnd.sas.primitive.boolean+json";

const qy = "application/vnd.sas.identity.avatar+json";

class Xy {
    constructor(e) {
        this._axios = e;
    }
    async getUsrIdentity() {
        if (this.usrIdnttResp === undefined) {
            if (this.usrIdnttPrms === undefined) {
                this.usrIdnttPrms = new Promise((async (e, t) => {
                    try {
                        this.usrIdnttResp = await this._axios.get(Uy, {
                            headers: {
                                Accept: $y
                            },
                            cache: false
                        });
                        e(dy(this.usrIdnttResp));
                    } catch (e) {
                        this.usrIdnttPrms = undefined;
                        t(e);
                    }
                }));
            }
            return this.usrIdnttPrms;
        }
        return dy(this.usrIdnttResp);
    }
    async isUsrAdmin() {
        if (this.usrAdmnResp === undefined) {
            if (this.usrAdmnPrms === undefined) {
                this.usrAdmnPrms = new Promise((async (e, t) => {
                    try {
                        this.usrAdmnResp = await this._axios.get(Gy, {
                            headers: {
                                Accept: Yy
                            },
                            cache: false
                        });
                        e(dy(this.usrAdmnResp));
                    } catch (e) {
                        this.usrAdmnPrms = undefined;
                        t(e);
                    }
                }));
            }
            return this.usrAdmnPrms;
        }
        return dy(this.usrAdmnResp);
    }
    async getUsrAvatar() {
        if (this.usrAvtrResp === undefined) {
            if (this.usrAvtrPrms === undefined) {
                this.usrAvtrPrms = new Promise((async (e, t) => {
                    try {
                        this.usrAvtrResp = await this._axios.get(Ky, {
                            headers: {
                                Accept: qy
                            },
                            cache: false
                        });
                        e(dy(this.usrAvtrResp));
                    } catch (e) {
                        this.usrAvtrPrms = undefined;
                        t(e);
                    }
                }));
            }
            return this.usrAvtrPrms;
        }
        return dy(this.usrAvtrResp);
    }
    invalidate() {
        this.usrAdmnResp = undefined;
        this.usrAvtrResp = undefined;
        this.usrIdnttResp = undefined;
        this.usrIdnttPrms = undefined;
        this.usrAdmnPrms = undefined;
        this.usrAvtrPrms = undefined;
    }
}

const Zy = "@currentUser";

const Jy = "($|(/|\\?).*)";

const Qy = "/preferences/preferences/";

const ex = `${Qy}@currentUser`;

const tx = new RegExp(`^${Qy}${Zy}${Jy}`);

const ox = gy;

const nx = "_hc_xx_";

const ax = 5;

const rx = Dh("prefHelper");

class sx {
    constructor(e) {
        this.axRes = e;
    }
    always(e) {
        if (this.axRes.status < 400) {
            e.apply(this, [ this.responseJSON, this.statusText, this ]);
        } else {
            e.apply(this, [ this, this.statusText, this.statusText ]);
        }
        return this;
    }
    done(e) {
        e.apply(this, [ this.responseJSON, this.statusText, this ]);
        return this;
    }
    fail(e) {
        e.apply(this, [ this, this.statusText, this.statusText ]);
        return this;
    }
    getAllResponseHeaders() {
        return this.axRes.headers;
    }
    getResponseHeader(e) {
        return this.axRes.headers[e.toLowerCase()];
    }
    get readyState() {
        return this.axRes.request.readyState;
    }
    get responseJSON() {
        return this.axRes.data;
    }
    get responseText() {
        return this.axRes.request.responseText;
    }
    setRequestHeader() {
        return this;
    }
    get status() {
        return this.axRes.status;
    }
    statusCode() {
        return this;
    }
    get statusText() {
        if (this.axRes.status < 300) {
            return "success";
        }
        return this.axRes.statusText;
    }
    then(e, t) {
        if (this.axRes.status < 300) {
            e.apply(this, [ this.responseJSON, this.statusText, this ]);
        } else if (t !== undefined) {
            t.apply(this, [ this, this.statusText, this.statusText ]);
        }
        return this;
    }
}

class ix extends sx {
    constructor(e) {
        super(e.response);
        this.axErr = e;
    }
    get cause() {
        return undefined;
    }
    get name() {
        return this.axErr.name;
    }
    get message() {
        return this.axErr.message;
    }
    get stack() {
        return this.axErr.stack;
    }
    get config() {
        return this.axErr.config;
    }
    get response() {
        return this.axErr.response;
    }
    get code() {
        return this.axErr.code;
    }
    get request() {
        return this.axErr.request;
    }
    get isAxiosError() {
        return this.axErr.isAxiosError;
    }
    toJSON() {
        return this.axErr.toJSON();
    }
}

class lx {
    dataInitialized=false;
    dataInitializing=false;
    errorDataInitialized=false;
    errorDataInitializing=false;
    initAttempts=0;
    alternateServiceUrl=ex;
    instanceUrlRegEx=tx;
    constructor(e) {
        this.axiosInstance = e;
        this.init();
    }
    getData() {
        rx.debug("getData() - load all preferences from server");
        return this.axiosInstance.get(ex, {
            headers: {
                Accept: "application/json"
            },
            params: {
                limit: ox
            },
            cache: false
        });
    }
    async init() {
        if (this.dataInitializing || this.errorDataInitializing || this.initAttempts > ax) {
            rx.debug("init called but skipped (initalizing)");
            return;
        }
        rx.debug("init start");
        this.initAttempts++;
        this.dataInitialized = false;
        this.dataInitializing = true;
        try {
            const e = await this.getData();
            this.cachedData = Object.seal(e.data);
            this.cachedJqXhr = new sx(e);
            this.dataInitializing = false;
            this.dataInitialized = true;
        } catch (e) {
            this.dataInitializing = false;
            this.cachedData = undefined;
            this.dataInitialized = false;
        }
        if (!this.cachedErrObjects) {
            this.errorDataInitialized = false;
            this.errorDataInitializing = true;
            try {
                await this.axiosInstance.get(`${ex}/${nx}`, {
                    headers: {
                        Accept: "application/json"
                    },
                    cache: false
                });
            } catch (e) {
                const t = e;
                this.cachedErrObjects = [ Object.seal(new ix(t)), "error", "Not Found" ];
            }
            this.errorDataInitialized = true;
            this.errorDataInitializing = false;
        }
        rx.debug("init end");
    }
    initialized() {
        return this.dataInitialized && this.errorDataInitialized;
    }
    extractPrefId(e) {
        if (e.indexOf(ex) === 0) {
            return e.substring(ex.length + 1);
        }
        if (e.indexOf(this.alternateServiceUrl) === 0) {
            return e.substring(this.alternateServiceUrl.length + 1);
        }
    }
    get textStatus() {
        if (this.cachedJqXhr) {
            return this.cachedJqXhr.statusText;
        }
        return "";
    }
    addToCache(e, t, o) {
        let n = o.getResponseHeader("Content-Type");
        if (!n || n.indexOf("json") === -1 || !this.dataInitialized) return;
        n = n.toLowerCase();
        if (n.indexOf("vnd.sas.collection") !== -1) {
            const t = e;
            const o = t.items.filter((e => this.cachedData.items.every(((t, o) => {
                if (t.id === e.id) {
                    this.cachedData.items[o] = e;
                    return false;
                }
                return true;
            }))));
            this.cachedData.items.push(...o);
        } else if (n.indexOf("vnd.sas.preference") !== -1) {
            const t = e;
            const o = this.cachedData.items.every(((e, o) => {
                if (e.id === t.id) {
                    this.cachedData.items[o] = t;
                    return false;
                }
                return true;
            }));
            o && this.cachedData.items.push(t);
        }
        this.cachedData.count = this.cachedData.items.length;
    }
    removeFromCache(e) {
        if (this.dataInitialized === false && !e.url) return;
        const t = new URL(e.url, self.location.origin);
        const o = this.extractPrefId(t.pathname);
        const n = !o && e.data && typeof e.data === "string" ? JSON.parse(e.data) : e.data;
        if (n && Array.isArray(n.items)) {
            for (const e of n.items) {
                for (let t = this.cachedData.items.length; t--; ) {
                    if (this.cachedData.items[t].id === e.id) {
                        this.cachedData.items.splice(t, 1);
                        this.cachedData.count = this.cachedData.items.length;
                        break;
                    }
                }
            }
        } else {
            const e = this.cachedData.items.findIndex((e => e.id === o));
            if (e !== -1) {
                this.cachedData.items.splice(e, 1);
                this.cachedData.count = this.cachedData.items.length;
            }
        }
    }
    async reload() {
        if (!this.initialized()) {
            rx.debug("reload calls init (helper not initialized)");
            this.init();
            return;
        }
        try {
            rx.debug("reload calls getData");
            const e = await this.getData();
            this.cachedData = Object.seal(e.data);
            this.cachedJqXhr = new sx(e);
        } catch (e) {}
    }
}

const cx = /^eq\s*\(\s*(\"|\')?application(\"|\')?\s*,/;

const dx = /^eq\s*\(\s*(\"|\')?application(\"|\')?\s*,.*\)$/;

const ux = /^in\s*\(\s*(\"|\')?id(\"|\')?\s*,/;

const mx = /^in\s*\(\s*(\"|\')?id(\"|\')?\s*,.*\)$/;

const px = /.*(and|or|not)\(.*/;

const fx = 20;

const gx = Dh("prefCache");

function hx(e, t) {
    let o;
    if (t.items) {
        o = t.items.find((t => t.id === e));
    }
    return o;
}

const bx = e => {
    e = decodeURI(e);
    const t = dx.test(e);
    const o = mx.test(e);
    if (!t && !o) {
        return;
    }
    const n = e => {
        if (e.charAt(0) === "'" || e.charAt(0) === '"') {
            return e.substring(1, e.length - 1);
        }
        return e;
    };
    let a;
    if (t) {
        e = e.replace(cx, "");
        e = e.substring(0, e.length - 1);
        if (e.length < 1 || px.test(e)) {
            return;
        }
        a = e.split(",").map(n);
        return function(e) {
            let t = false;
            a.every((o => {
                if ((new Intl.Collator).compare(o, e.application ?? "") === 0) {
                    t = true;
                    return false;
                }
                return true;
            }));
            return t;
        };
    }
    if (o) {
        e = e.replace(ux, "");
        e = e.substring(0, e.length - 1);
        if (e.length < 1 || px.test(e)) {
            return;
        }
        a = e.split(",").map(n);
        return function(e) {
            let t = false;
            a.every((o => {
                if ((new Intl.Collator).compare(o, e.id) === 0) {
                    t = true;
                    return false;
                }
                return true;
            }));
            return t;
        };
    }
};

const vx = (e, t) => {
    let o;
    e.every(((e, t) => {
        if (e.rel === "self" && e.method.toUpperCase() === "GET") {
            o = {
                self: e,
                selfIndex: t
            };
            return false;
        }
        return true;
    }));
    if (!!t && o) {
        o.self.uri = new URL(o.self.uri, self.location.origin).pathname;
        o.self.href = o.self.uri;
    }
    return o;
};

class yx {
    constructor(e, t) {
        this.filter = e;
        this.filterFn = t;
    }
    get(e, t, o) {
        if (!this.items) {
            this.items = uy(e.items.filter(this.filterFn));
        }
        if (t in e) {
            switch (t) {
              case "count":
                {
                    return this.items.length;
                }

              case "links":
                {
                    if (!this.links) {
                        const t = e.links.slice();
                        const o = vx(t);
                        if (o) {
                            t.splice(o.selfIndex, 1);
                            const e = `${o.self.uri}?filter=${this.filter}`;
                            const n = dy(o.self);
                            n.uri = e;
                            n.href = e;
                            t.push(n);
                        }
                        this.links = t;
                    }
                    return this.links;
                }

              default:
                {
                    return uy(e[t]);
                }
            }
        }
    }
    set(e, t, o, n) {
        return false;
    }
}

function xx(e, t, o) {
    let n = e.indexOf("?") === -1 ? "?" : "&";
    n += `start=${t}`;
    n += `&limit=${o}`;
    return e + n;
}

class Sx {
    start=0;
    limit=fx;
    constructor(e, t) {
        if (e !== null) {
            this.start = parseInt(e);
        }
        if (t !== null) {
            this.limit = parseInt(t);
        }
    }
    get(e, t, o) {
        if (!this.items) {
            this.items = uy(e.items.slice(this.start, Math.min(this.start + this.limit, e.count)));
        }
        if (t in e) {
            switch (t) {
              case "count":
                {
                    return this.items.length;
                }

              case "items":
                {
                    return this.items;
                }

              case "links":
                {
                    if (!this.links && e.links && e.count) {
                        const t = e.links.slice();
                        const o = vx(t);
                        if (o) {
                            const e = o.self;
                            const n = e.uri;
                            t.splice(o.selfIndex, 1);
                            const a = xx(n, this.start, this.limit);
                            const r = dy(e);
                            r.uri = a;
                            r.href = a;
                            t.push(r);
                        }
                        if (this.start > 0 && o) {
                            const e = o.self;
                            const n = e.uri;
                            const a = xx(n, 0, this.limit);
                            const r = dy(e);
                            r.uri = a;
                            r.href = a;
                            r.rel = "first";
                            t.push(r);
                            const s = xx(n, Math.max(0, this.start - this.limit), this.limit);
                            const i = dy(e);
                            i.uri = s;
                            i.href = s;
                            i.rel = "prev";
                            t.push(i);
                        }
                        if (o && this.start + this.limit < e.count && this.limit < e.count) {
                            const n = o.self;
                            const a = n.uri;
                            const r = xx(a, e.count - (this.limit - Math.ceil(e.count / this.limit)), this.limit);
                            const s = dy(n);
                            s.uri = r;
                            s.href = r;
                            s.rel = "last";
                            t.push(s);
                            const i = xx(a, this.start + this.limit, this.limit);
                            const l = dy(n);
                            l.uri = i;
                            l.href = i;
                            l.rel = "next";
                            t.push(l);
                        }
                        this.links = uy(t);
                    }
                    return this.links;
                }

              default:
                {
                    return uy(e[t]);
                }
            }
        }
    }
    set(e, t, o, n) {
        return false;
    }
}

class wx {
    name="sas.PreferencesServiceCache";
    constructor(e) {
        this._axios = e;
        this.helper = this.getCacheHelper();
        if ("reload" in this.helper) {
            bb.subscribe("Cache.Reload", (() => {
                gx.debug("Cache.Reload event. helper.reload call");
                this.helper.reload();
            }));
            bb.subscribe("AppSwitcher.AppShow", (() => {
                gx.debug("AppSwitcher.AppShow event. helper.reload call");
                this.helper.reload();
            }));
        }
    }
    getCacheHelper() {
        try {
            const e = window.top;
            if (window !== e && e.sas && e.sas.cacheManager) {
                const t = e.sas.cacheManager.getCache(this.name);
                if (t && "__helper" in t) {
                    return t.__helper;
                }
            }
        } catch (e) {}
        return new lx(this._axios);
    }
    get __helper() {
        return this.helper;
    }
    canHandle(e) {
        if (!e.url || e.method === undefined || e.responseType && e.responseType !== "json" || !this.helper) {
            return false;
        }
        return this.helper.instanceUrlRegEx.test(e.url);
    }
    invoke(e) {
        const t = this._axios(e);
        if (e.method.toUpperCase() === "PUT") {
            return t.then((e => {
                this.helper.addToCache(e.data, "", new sx(e));
                return e;
            }));
        }
        if (e.method.toUpperCase() === "DELETE") {
            return t.then((e => {
                this.helper.removeFromCache(e.config);
                return e;
            }));
        }
        return t;
    }
    handle(e) {
        if (!this.canHandle(e)) {
            gx.debug(`handle() - canHandle check is false ${e.url}`);
            return this.invoke(e);
        }
        if (e.method.toUpperCase() !== "GET") {
            gx.debug(`handle() - canHandle GET check is false ${e.url}`);
            return this.invoke(e);
        }
        if (!this.helper.initialized()) {
            gx.debug(`handle() - helper not initialized invoke ${e.url}`);
            const t = this.invoke(e);
            t.finally((() => this.helper.init()));
            return t;
        }
        const t = t => {
            const o = {
                config: e,
                data: t,
                headers: this.helper.cachedJqXhr.getAllResponseHeaders(),
                status: +this.helper.cachedJqXhr.status,
                statusText: this.helper.cachedJqXhr.statusText
            };
            return o;
        };
        const o = new URL(e.url, self.location.origin);
        if (o.pathname === ex || o.pathname === this.helper.alternateServiceUrl) {
            const n = o.searchParams;
            if (e.params !== undefined) {
                for (const t in e.params) {
                    if (Object.prototype.hasOwnProperty.call(e.params, t)) {
                        n.set(t, e.params[t]);
                    }
                }
            }
            let a = this.helper.cachedData;
            if (n.get("sortBy") !== null) {
                return this.invoke(e);
            }
            if (n.get("filter") !== null) {
                const t = n.get("filter");
                const o = bx(t);
                if (o) {
                    a = new Proxy(this.helper.cachedData, new yx(t, o));
                } else {
                    return this.invoke(e);
                }
            }
            const r = new Proxy(a, new Sx(n.get("start"), n.get("limit")));
            gx.debug(`handle() - cache hit for ${e.url}`);
            return Promise.resolve(t(r));
        }
        const n = this.helper.extractPrefId(o.pathname);
        if (n) {
            const o = hx(n, this.helper.cachedData);
            if (o) {
                gx.debug(`handle() - cache hit for ${e.url}`);
                return Promise.resolve(t(uy(o)));
            }
        }
        const a = this.helper.cachedErrObjects[0];
        const r = {
            config: e,
            name: "error",
            isAxiosError: false,
            message: JSON.stringify(a.responseJSON),
            code: "404",
            toJSON: () => a.responseJSON
        };
        gx.debug(`handle() - cache error for ${e.url}`);
        return Promise.reject(r);
    }
}

let Cx = function(e) {
    e["Accept"] = "Accept";
    e["AcceptItem"] = "Accept-Item";
    e["ContentType"] = "Content-Type";
    e["ETag"] = "ETag";
    e["IfMatch"] = "If-Match";
    e["IfModifiedSince"] = "If-Modified-Since";
    e["IfNoneMatch"] = "If-None-Match";
    e["IfUnmodifiedSince"] = "If-Unmodified-Since";
    e["RequestedWith"] = "X-Requested-With";
    e["SASRequest"] = "SAS-Request";
    e["UnauthorizedReason"] = "X-Unauthorized-Reason";
    return e;
}({});

const Ex = Cx.SASRequest;

let Ix = 0;

const _x = {};

const Dx = e => {
    if (!e?.traceId) {
        return e;
    }
    if (!_x[e.traceId]) {
        _x[e.traceId] = 0;
    }
    if (!e.headers[Ex]) {
        e.headers[Ex] = `${e.traceId};${_x[e.traceId]};${Ix}`;
    }
    Ix++;
    _x[e.traceId]++;
    return e;
};

const Lx = /^[\/]*([^\/]+)(?:\/.*)?$/;

var Tx = e => {
    if (e === undefined) {
        return null;
    }
    return Rx(e.url);
};

const Rx = e => {
    if (typeof e !== "string" || e[0] !== "/") {
        return null;
    }
    const t = Lx.exec(e);
    if (!t) {
        return null;
    }
    return t[1];
};

const kx = {};

const Ax = 3;

const Mx = e => {
    const t = Tx(e);
    if (t && kx[t]) {
        const o = kx[t];
        e.headers[o.headerName] = o.value;
    }
    return e;
};

const Nx = e => {
    const t = e.config;
    const o = Tx(t);
    if (o && !kx[o]) {
        const t = e.headers["x-csrf-header"];
        const n = t ? e.headers[t.toLowerCase()] : null;
        if (n) {
            kx[o] = {
                headerName: t,
                value: n
            };
        }
    }
    return e;
};

const Ox = e => t => {
    const o = t.response?.status;
    const n = o === 403 && t.response?.headers["x-forbidden-reason"] === "CSRF";
    const a = o === 401 && t.response?.headers["x-unauthorized-reason"] === "POSSIBLE_CSRF";
    if (!n && !a && o !== 449) {
        return Promise.reject(t);
    }
    const r = Tx(t.config);
    if (!r) {
        return Promise.reject(t);
    }
    const s = t.response?.headers["x-csrf-header"];
    const i = s ? t.response?.headers[s.toLowerCase()] : null;
    if (i) {
        kx[r] = {
            headerName: s,
            value: i
        };
    }
    const l = t.config.csrfRetryCount ?? 0;
    const c = t.config.csrfRetryLimit ?? Ax;
    if (l >= c) {
        return Promise.reject(t);
    }
    if (!kx[r]) {
        return Promise.reject(t);
    }
    t.config.csrfRetryCount = l + 1;
    t.config.disableNovaServiceThrottle = true;
    return e.request(t.config);
};

const Px = 3e4;

const Bx = {};

const zx = e => {
    if (!e) {
        return;
    }
    const t = Bx[e];
    if (!t || t.complete) {
        return;
    }
    t.complete = true;
    clearTimeout(t.timerId);
    t.resolve();
};

const Fx = e => {
    const t = Tx(e);
    if (!t) {
        return Promise.resolve(e);
    }
    if (e && e.signal && e.signal.addEventListener) {
        e.signal.addEventListener("abort", (() => {
            zx(t);
        }), {
            once: true
        });
    }
    if (e.disableNovaServiceThrottle) {
        return Promise.resolve(e);
    }
    if (Bx[t]) {
        return Bx[t].promise.then((() => e));
    }
    let o;
    const n = new Promise((e => {
        o = e;
    }));
    Bx[t] = {
        promise: n,
        complete: false,
        resolve: o,
        timerId: window.setTimeout((() => {
            zx(t);
        }), Px)
    };
    return Promise.resolve(e);
};

const jx = e => {
    zx(Tx(e.config));
    return e;
};

const Vx = e => {
    zx(Tx(e.config));
    return Promise.reject(e);
};

const Hx = "XMLHttpRequest";

const Ux = "authentication";

const Gx = e => {
    if (e === null || e === undefined) return false;
    return window.location.origin === new URL(e, window.location.origin).origin;
};

const Kx = e => {
    if (Gx(e.url) && !e.headers[Cx.RequestedWith]) {
        e.headers[Cx.RequestedWith] = Hx;
    }
    return e;
};

const Wx = e => {
    const t = e.response?.status;
    if (Gx(e.request?.url) && t && t >= 300 && e.response?.headers[Cx.UnauthorizedReason.toLowerCase()]?.toLowerCase() === Ux) {
        bb.publish(My);
    }
    return Promise.reject(e);
};

const $x = e => {
    const t = e.response?.status;
    switch (t) {
      case 500:
      case 502:
      case 503:
      case 504:
      case 507:
      case 509:
        return true;

      case 406:
      case 415:
        return e.response?.data?.errorCode === 1022;

      default:
        return false;
    }
};

const Yx = e => async t => {
    if (!$x(t)) {
        return Promise.reject(t);
    }
    const o = (t.config.serverErrorAttemptCount ?? 0) + 1;
    const n = t.config.serverErrorAttemptLimit;
    if (o >= n) {
        return Promise.reject(t);
    }
    t.config.serverErrorAttemptCount = o;
    const a = t.config.serverErrorTimeout(t.config);
    if (a > 0) {
        await my(a);
    }
    t.config.disableNovaServiceThrottle = true;
    return e.request(t.config);
};

let qx = Fh;

bb.subscribe("SettingsEvent.Change", ((e, t) => {
    if (!t || !t.data || !t.data.data) return;
    for (const e of t?.data?.data) {
        if (e.key === "FormatLocale.DefaultLocale") {
            qx = e.value ?? "en";
        }
    }
}));

const Xx = e => {
    qx = e;
};

const Zx = e => {
    e.headers = e.headers ?? {};
    e.headers["Accept-Locale"] = e.headers["Accept-Locale"] ?? dh(qx);
    return e;
};

const Jx = {
    serverErrorAttemptLimit: 3,
    serverErrorTimeout: e => {
        const t = e.serverErrorAttemptCount;
        if (t === 1) {
            return 3e3;
        }
        return 5e3;
    }
};

const Qx = e => {
    const t = Je.create({
        ...Jx,
        ...e
    });
    t.interceptors.request.use(Kx);
    t.interceptors.response.use(undefined, Wx);
    t.interceptors.request.use(Dx);
    t.interceptors.request.use(Mx);
    t.interceptors.response.use(undefined, Yx(t));
    t.interceptors.response.use(Nx, Ox(t));
    t.interceptors.request.use(Fx);
    t.interceptors.response.use(jx, Vx);
    t.interceptors.request.use(Zx);
    return t;
};

const eS = e => {
    let t = false;
    const o = async () => {
        t = true;
        try {
            const {getConfiguration: e} = await import("./chunk0.mjs");
            const t = await e();
            if (t.get("nova-axios-cache") === false) {
                return;
            }
        } catch (e) {}
        fy.instance.addCache(new wx(e));
        fy.instance.addCache(new Vy(e));
    };
    const n = (e, t) => {
        if (typeof e !== "string") {
            return n.request(e);
        }
        if (t) {
            t.url = e;
            return n.request(t);
        }
        return n.get(e);
    };
    n.defaults = e.defaults;
    n.interceptors = e.interceptors;
    n.getUri = t => e.getUri(t);
    n.request = n => {
        if (!t) {
            o();
        }
        const a = fy.instance.findCache(n);
        if (a) {
            return a.handle(n);
        }
        return e.request(n);
    };
    const a = (e, t, o) => {
        const a = o || {};
        a.url = t;
        a.method = e;
        return n.request(a);
    };
    const r = (e, t, o, a) => {
        const r = a || {};
        r.url = t;
        r.method = e;
        r.data = o;
        return n.request(r);
    };
    n.get = (e, t) => a("get", e, t);
    n.delete = (e, t) => a("delete", e, t);
    n.head = (e, t) => a("head", e, t);
    n.options = (e, t) => a("options", e, t);
    n.post = (e, t, o) => r("post", e, t, o);
    n.put = (e, t, o) => r("put", e, t, o);
    n.patch = (e, t, o) => r("patch", e, t, o);
    return n;
};

const tS = e => eS(Qx(e));

window.sas = window.sas || {};

const oS = "production" === "test";

const nS = window.sas.axios ?? tS();

if (!window.sas.axios && !oS) {
    Object.defineProperty(window.sas, "axios", {
        get: function() {
            return nS;
        }
    });
}

if (!window.sas.cacheManager) {
    Object.defineProperty(window.sas, "cacheManager", {
        get: function() {
            return fy.instance;
        }
    });
}

Promise.resolve();

{
    new Promise((async e => {
        await my(0);
        if (window.sas.axiosPreventFetchAcceptLocale) return;
        const t = await nS.get("/preferences/preferences/@currentUser?limit=32767");
        for (const e of t.data.items) {
            if (e.id === "FormatLocale.DefaultLocale") {
                Xx(e.value);
                break;
            }
        }
        e();
    }));
}

var aS = nS;

const rS = {
    name: "arabic",
    selectors: [ ":lang(ar)" ],
    tokens: {
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', 'Geeza Pro', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-family-secondary": "'AvenirNext', 'Geeza Pro', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-space-line-height": "1.5",
        "font-space-line-height-m": "1.5",
        "font-style-weight-300": "400"
    }
};

const sS = {
    name: "arabicPseudo",
    selectors: [ ":lang(ar-xx)" ],
    tokens: {
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', 'PseudoArabic', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-family-secondary": "'AvenirNext', 'PseudoArabic', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-space-line-height": "1.5",
        "font-space-line-height-m": "1.5",
        "font-style-weight-300": "400"
    }
};

const iS = {
    name: "chineseChina",
    selectors: [ ":lang(zh)", ":lang(zh-cn)", ":lang(zh-sg)", ":lang(zh-hans)" ],
    tokens: {
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', '微软雅黑体', 'Microsoft YaHei New', '微软雅黑', 'Microsoft Yahei', '宋体', 'SimSun', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-family-secondary": "'AvenirNext', '微软雅黑体', 'Microsoft YaHei New', '微软雅黑', 'Microsoft Yahei', '宋体', 'SimSun', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-size-base-text": "14px",
        "font-size-base-text-l": "18px",
        "font-size-base-text-m": "16px",
        "font-size-base-text-s": "14px",
        "font-size-body-text-l": "1rem",
        "font-size-body-text-m": "0.9375rem",
        "font-size-body-text-s": "0.8125rem",
        "font-size-body-text-xl": "1.125rem",
        "font-size-body-text-xs": "0.75rem",
        "font-size-body-text-xxl": "1.3125rem",
        "font-size-body-text-xxs": "0.625rem",
        "font-size-body-text-xxxl": "1.4375rem",
        "font-size-body-text-xxxs": "0.5625rem",
        "font-size-body-text-xxxxl": "1.625rem",
        "font-size-display-text-1": "6.75rem",
        "font-size-display-text-2": "5.3125rem",
        "font-size-display-text-3": "4.1875rem",
        "font-size-heading-text-1": "1.4375rem",
        "font-size-heading-text-2": "1.3125rem",
        "font-size-heading-text-3": "1.125rem",
        "font-size-heading-text-4": "1rem",
        "font-size-heading-text-5": "0.9375rem",
        "font-size-heading-text-6": "0.8125rem",
        "font-space-line-height": "1.5",
        "font-space-line-height-m": "1.5",
        "font-style-expression-italic": "normal",
        "font-style-weight-300": "400",
        "size-icon-l": "1rem",
        "size-icon-m": "0.9375rem",
        "size-icon-s": "0.8125rem",
        "size-icon-xl": "1.125rem",
        "size-icon-xs": "0.8125rem",
        "size-icon-xxl": "1.3125rem",
        "size-icon-xxs": "0.8125rem",
        "size-icon-xxxl": "1.4375rem",
        "size-icon-xxxs": "0.8125rem",
        "size-icon-xxxxl": "1.625rem"
    }
};

const lS = {
    name: "chineseHongKong",
    selectors: [ ":lang(zh-hk)" ],
    tokens: {
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', '微軟正黑體', 'Microsoft JhengHei', '黑體-繁', 'Heiti TC', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-family-secondary": "'AvenirNext', '微軟正黑體', 'Microsoft JhengHei', '黑體-繁', 'Heiti TC', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-size-base-text": "14px",
        "font-size-base-text-l": "18px",
        "font-size-base-text-m": "16px",
        "font-size-base-text-s": "14px",
        "font-size-body-text-l": "1rem",
        "font-size-body-text-m": "0.9375rem",
        "font-size-body-text-s": "0.8125rem",
        "font-size-body-text-xl": "1.125rem",
        "font-size-body-text-xs": "0.75rem",
        "font-size-body-text-xxl": "1.3125rem",
        "font-size-body-text-xxs": "0.625rem",
        "font-size-body-text-xxxl": "1.4375rem",
        "font-size-body-text-xxxs": "0.5625rem",
        "font-size-body-text-xxxxl": "1.625rem",
        "font-size-display-text-1": "6.75rem",
        "font-size-display-text-2": "5.3125rem",
        "font-size-display-text-3": "4.1875rem",
        "font-size-heading-text-1": "1.4375rem",
        "font-size-heading-text-2": "1.3125rem",
        "font-size-heading-text-3": "1.125rem",
        "font-size-heading-text-4": "1rem",
        "font-size-heading-text-5": "0.9375rem",
        "font-size-heading-text-6": "0.8125rem",
        "font-space-line-height": "1.5",
        "font-space-line-height-m": "1.5",
        "font-style-expression-italic": "normal",
        "font-style-weight-300": "400",
        "size-icon-l": "1rem",
        "size-icon-m": "0.9375rem",
        "size-icon-s": "0.8125rem",
        "size-icon-xl": "1.125rem",
        "size-icon-xs": "0.8125rem",
        "size-icon-xxl": "1.3125rem",
        "size-icon-xxs": "0.8125rem",
        "size-icon-xxxl": "1.4375rem",
        "size-icon-xxxs": "0.8125rem",
        "size-icon-xxxxl": "1.625rem"
    }
};

const cS = {
    name: "chinesePseudo",
    selectors: [ ":lang(zh-cn-pseudo)" ],
    tokens: {
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', '微软雅黑体', 'Microsoft YaHei New', '微软雅黑', 'Microsoft Yahei', '宋体', 'SimSun', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-family-secondary": "'AvenirNext', '微软雅黑体', 'Microsoft YaHei New', '微软雅黑', 'Microsoft Yahei', '宋体', 'SimSun', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-size-base-text": "14px",
        "font-size-base-text-l": "18px",
        "font-size-base-text-m": "16px",
        "font-size-base-text-s": "14px",
        "font-size-body-text-l": "1rem",
        "font-size-body-text-m": "0.9375rem",
        "font-size-body-text-s": "0.8125rem",
        "font-size-body-text-xl": "1.125rem",
        "font-size-body-text-xs": "0.75rem",
        "font-size-body-text-xxl": "1.3125rem",
        "font-size-body-text-xxs": "0.625rem",
        "font-size-body-text-xxxl": "1.4375rem",
        "font-size-body-text-xxxs": "0.5625rem",
        "font-size-body-text-xxxxl": "1.625rem",
        "font-size-display-text-1": "6.75rem",
        "font-size-display-text-2": "5.3125rem",
        "font-size-display-text-3": "4.1875rem",
        "font-size-heading-text-1": "1.4375rem",
        "font-size-heading-text-2": "1.3125rem",
        "font-size-heading-text-3": "1.125rem",
        "font-size-heading-text-4": "1rem",
        "font-size-heading-text-5": "0.9375rem",
        "font-size-heading-text-6": "0.8125rem",
        "font-space-line-height": "1.5",
        "font-space-line-height-m": "1.5",
        "font-style-expression-italic": "normal",
        "font-style-weight-300": "400",
        "size-icon-l": "1rem",
        "size-icon-m": "0.9375rem",
        "size-icon-s": "0.8125rem",
        "size-icon-xl": "1.125rem",
        "size-icon-xs": "0.8125rem",
        "size-icon-xxl": "1.3125rem",
        "size-icon-xxs": "0.8125rem",
        "size-icon-xxxl": "1.4375rem",
        "size-icon-xxxs": "0.8125rem",
        "size-icon-xxxxl": "1.625rem"
    }
};

const dS = {
    name: "dark",
    selectors: [ "[data-sas-theme='dark']" ],
    tokens: {
        "color-action-background-control-alert": "hsl(205, 90%, 8%)",
        "color-action-background-control-disabled": "hsl(205, 90%, 8%)",
        "color-action-background-control-hover": "hsl(205, 90%, 8%)",
        "color-action-background-control-non-editable": "hsla(205, 25%, 70%, 0.16)",
        "color-action-background-control-normal": "hsl(205, 90%, 8%)",
        "color-action-background-control-placeholder": "hsl(205, 90%, 8%)",
        "color-action-background-control-primary": "hsl(205, 97%, 63%)",
        "color-action-background-control-read-only": "hsla(0, 100%, 100%, 0)",
        "color-action-background-control-selected": "hsl(205, 90%, 8%)",
        "color-action-background-control-warning": "hsl(205, 90%, 8%)",
        "color-action-background-emphasis-active": "hsla(205, 97%, 63%, 0.24)",
        "color-action-background-emphasis-disabled": "hsla(205, 97%, 63%, 0.08)",
        "color-action-background-emphasis-hover": "hsla(205, 97%, 63%, 0.16)",
        "color-action-background-emphasis-normal": "hsla(205, 97%, 63%, 0.08)",
        "color-action-background-emphasis-selected": "hsla(205, 97%, 63%, 0.24)",
        "color-action-background-emphasis-visited": "hsla(205, 97%, 63%, 0.08)",
        "color-action-background-focus": "hsl(205, 97%, 63%)",
        "color-action-background-focus-inverse": "hsl(0, 0%, 0%)",
        "color-action-background-on-off-disabled": "hsl(205, 90%, 8%)",
        "color-action-background-on-off-hover": "hsl(205, 90%, 8%)",
        "color-action-background-on-off-normal": "hsl(205, 90%, 8%)",
        "color-action-background-on-off-read-only": "hsla(205, 25%, 70%, 0.08)",
        "color-action-background-on-off-selected": "hsl(329, 75%, 43%)",
        "color-action-background-on-off-selected-disabled": "hsla(329, 75%, 43%, 0.24)",
        "color-action-background-secondary-disabled": "hsla(205, 25%, 70%, 0.08)",
        "color-action-background-secondary-normal": "hsla(205, 90%, 8%, 0.08)",
        "color-action-background-secondary-selected": "hsla(329, 75%, 43%, 0.24)",
        "color-action-background-secondary-selected-disabled": "hsla(329, 75%, 43%, 0.16)",
        "color-action-background-standard-active": "hsla(205, 25%, 70%, 0.24)",
        "color-action-background-standard-disabled": "hsla(205, 25%, 70%, 0.08)",
        "color-action-background-standard-hover": "hsla(205, 25%, 70%, 0.16)",
        "color-action-background-standard-normal": "hsla(205, 25%, 70%, 0.08)",
        "color-action-background-standard-selected": "hsla(205, 25%, 70%, 0.24)",
        "color-action-background-standard-selected-inactive": "hsla(205, 25%, 70%, 0.16)",
        "color-action-background-standard-visited": "hsla(205, 25%, 70%, 0.08)",
        "color-action-background-subtle-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-background-subtle-hover": "hsla(205, 25%, 70%, 0.16)",
        "color-action-background-subtle-normal": "hsla(0, 100%, 100%, 0)",
        "color-action-background-subtle-selected": "hsla(205, 25%, 70%, 0.24)",
        "color-action-background-subtle-selected-inactive": "hsla(205, 25%, 70%, 0.16)",
        "color-action-border-bottom-control-alert": "hsl(360, 100%, 65%)",
        "color-action-border-bottom-control-hover": "hsl(205, 25%, 70%)",
        "color-action-border-bottom-control-normal": "hsl(205, 25%, 70%)",
        "color-action-border-bottom-control-selected": "hsl(205, 97%, 63%)",
        "color-action-border-bottom-control-warning": "hsl(40, 100%, 58%)",
        "color-action-border-control-alert": "hsl(360, 100%, 65%)",
        "color-action-border-control-disabled": "hsla(205, 25%, 70%, 0.32)",
        "color-action-border-control-hover": "hsl(205, 25%, 70%)",
        "color-action-border-control-normal": "hsl(205, 25%, 70%)",
        "color-action-border-control-placeholder": "hsl(205, 25%, 70%)",
        "color-action-border-control-read-only": "hsla(0, 100%, 100%, 0)",
        "color-action-border-control-selected": "hsl(205, 97%, 63%)",
        "color-action-border-control-warning": "hsl(40, 100%, 58%)",
        "color-action-border-emphasis-active": "hsl(205, 97%, 63%)",
        "color-action-border-emphasis-disabled": "hsla(0, 0%, 0%, 0)",
        "color-action-border-emphasis-hover": "hsl(205, 97%, 63%)",
        "color-action-border-emphasis-normal": "hsl(205, 97%, 63%)",
        "color-action-border-emphasis-selected": "hsl(205, 97%, 63%)",
        "color-action-border-emphasis-visited": "hsl(205, 97%, 63%)",
        "color-action-border-focus": "hsl(205, 97%, 63%)",
        "color-action-border-focus-inverse": "hsl(0, 100%, 100%)",
        "color-action-border-on-off-disabled": "hsla(205, 25%, 70%, 0.32)",
        "color-action-border-on-off-hover": "hsl(205, 25%, 70%)",
        "color-action-border-on-off-normal": "hsl(205, 25%, 70%)",
        "color-action-border-on-off-read-only": "hsl(205, 25%, 70%)",
        "color-action-border-on-off-selected": "hsl(329, 75%, 43%)",
        "color-action-border-on-off-selected-disabled": "hsla(0, 0%, 0%, 0)",
        "color-action-border-secondary-disabled": "hsla(0, 0%, 0%, 0)",
        "color-action-border-secondary-normal": "hsl(205, 25%, 70%)",
        "color-action-border-secondary-selected": "hsl(329, 75%, 43%)",
        "color-action-border-secondary-selected-disabled": "hsla(0, 0%, 0%, 0)",
        "color-action-border-standard-active": "hsl(205, 25%, 70%)",
        "color-action-border-standard-disabled": "hsla(0, 0%, 0%, 0)",
        "color-action-border-standard-hover": "hsl(205, 25%, 70%)",
        "color-action-border-standard-normal": "hsl(205, 25%, 70%)",
        "color-action-border-standard-selected": "hsl(205, 25%, 70%)",
        "color-action-border-standard-selected-inactive": "hsla(0, 0%, 0%, 0)",
        "color-action-border-standard-visited": "hsl(205, 25%, 70%)",
        "color-action-border-subtle-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-subtle-hover": "hsla(0, 100%, 100%, 0)",
        "color-action-border-subtle-normal": "hsla(0, 100%, 100%, 0)",
        "color-action-border-subtle-selected": "hsla(0, 100%, 100%, 0)",
        "color-action-border-subtle-selected-inactive": "hsla(0, 100%, 100%, 0)",
        "color-action-focus": "hsl(205, 97%, 63%)",
        "color-action-icon-control-alert": "hsl(360, 100%, 65%)",
        "color-action-icon-control-disabled": "hsla(0, 100%, 100%, 0.32)",
        "color-action-icon-control-hover": "hsl(0, 100%, 100%)",
        "color-action-icon-control-normal": "hsl(0, 100%, 100%)",
        "color-action-icon-control-read-only": "hsl(0, 100%, 100%)",
        "color-action-icon-control-selected": "hsl(0, 100%, 100%)",
        "color-action-icon-control-warning": "hsl(40, 100%, 58%)",
        "color-action-icon-emphasis-active": "hsl(205, 97%, 63%)",
        "color-action-icon-emphasis-disabled": "hsla(205, 97%, 63%, 0.32)",
        "color-action-icon-emphasis-hover": "hsl(205, 97%, 63%)",
        "color-action-icon-emphasis-normal": "hsl(205, 97%, 63%)",
        "color-action-icon-emphasis-selected": "hsl(205, 97%, 63%)",
        "color-action-icon-emphasis-visited": "hsl(205, 97%, 63%)",
        "color-action-icon-on-off-disabled": "hsla(0, 100%, 100%, 0.32)",
        "color-action-icon-on-off-hover": "hsl(0, 100%, 100%)",
        "color-action-icon-on-off-normal": "hsl(0, 100%, 100%)",
        "color-action-icon-on-off-read-only": "hsl(0, 100%, 100%)",
        "color-action-icon-on-off-selected": "hsl(0, 100%, 100%)",
        "color-action-icon-on-off-selected-disabled": "hsla(0, 100%, 100%, 0.32)",
        "color-action-icon-standard-active": "hsl(0, 0%, 100%)",
        "color-action-icon-standard-disabled": "hsla(0, 100%, 100%, 0.32)",
        "color-action-icon-standard-hover": "hsl(0, 100%, 100%)",
        "color-action-icon-standard-normal": "hsl(0, 100%, 100%)",
        "color-action-icon-standard-selected": "hsl(0, 100%, 100%)",
        "color-action-icon-standard-selected-inactive": "hsl(0, 0%, 100%)",
        "color-action-icon-standard-visited": "hsl(0, 0%, 100%)",
        "color-action-icon-subtle-disabled": "hsla(0, 100%, 100%, 0.32)",
        "color-action-icon-subtle-hover": "hsl(0, 100%, 100%)",
        "color-action-icon-subtle-normal": "hsl(0, 100%, 100%)",
        "color-action-icon-subtle-selected": "hsl(0, 100%, 100%)",
        "color-action-icon-subtle-selected-inactive": "hsl(0, 0%, 100%)",
        "color-action-link-active": "hsl(0, 100%, 100%)",
        "color-action-link-hover": "hsl(0, 100%, 100%)",
        "color-action-link-normal": "hsl(0, 100%, 100%)",
        "color-action-link-visited": "hsl(0, 100%, 100%)",
        "color-action-text-control-active": "hsl(0, 100%, 100%)",
        "color-action-text-control-alert": "hsl(0, 100%, 100%)",
        "color-action-text-control-disabled": "hsla(0, 100%, 100%, 0.32)",
        "color-action-text-control-hover": "hsl(0, 100%, 100%)",
        "color-action-text-control-normal": "hsl(0, 100%, 100%)",
        "color-action-text-control-placeholder": "hsl(223, 10%, 64%)",
        "color-action-text-control-read-only": "hsl(0, 100%, 100%)",
        "color-action-text-control-selected": "hsl(0, 100%, 100%)",
        "color-action-text-control-visited": "hsl(0, 100%, 100%)",
        "color-action-text-control-warning": "hsl(0, 100%, 100%)",
        "color-action-text-emphasis-active": "hsl(205, 97%, 63%)",
        "color-action-text-emphasis-disabled": "hsla(205, 97%, 63%, 0.32)",
        "color-action-text-emphasis-hover": "hsl(205, 97%, 63%)",
        "color-action-text-emphasis-normal": "hsl(205, 97%, 63%)",
        "color-action-text-emphasis-selected": "hsl(205, 97%, 63%)",
        "color-action-text-emphasis-visited": "hsl(205, 97%, 63%)",
        "color-action-text-on-off-disabled": "hsla(0, 100%, 100%, 0.32)",
        "color-action-text-on-off-hover": "hsl(0, 100%, 100%)",
        "color-action-text-on-off-normal": "hsl(0, 100%, 100%)",
        "color-action-text-on-off-read-only": "hsl(0, 100%, 100%)",
        "color-action-text-on-off-selected": "hsl(0, 100%, 100%)",
        "color-action-text-on-off-selected-disabled": "hsla(0, 100%, 100%, 0.32)",
        "color-action-text-secondary-disabled": "hsla(0, 100%, 100%, 0.32)",
        "color-action-text-secondary-normal": "hsl(0, 100%, 100%)",
        "color-action-text-secondary-selected": "hsl(0, 100%, 100%)",
        "color-action-text-secondary-selected-disabled": "hsla(0, 100%, 100%, 0.32)",
        "color-action-text-standard-active": "hsl(0, 0%, 100%)",
        "color-action-text-standard-disabled": "hsla(0, 100%, 100%, 0.32)",
        "color-action-text-standard-hover": "hsl(0, 100%, 100%)",
        "color-action-text-standard-normal": "hsl(0, 100%, 100%)",
        "color-action-text-standard-selected": "hsl(0, 100%, 100%)",
        "color-action-text-standard-selected-inactive": "hsl(0, 0%, 100%)",
        "color-action-text-standard-visited": "hsl(0, 0%, 100%)",
        "color-action-text-subtle-disabled": "hsla(0, 100%, 100%, 0.32)",
        "color-action-text-subtle-hover": "hsl(0, 100%, 100%)",
        "color-action-text-subtle-normal": "hsl(0, 100%, 100%)",
        "color-action-text-subtle-selected": "hsl(0, 100%, 100%)",
        "color-action-text-subtle-selected-inactive": "hsl(0, 100%, 100%)",
        "color-body-icon": "hsl(0, 100%, 100%)",
        "color-body-text": "hsl(0, 100%, 100%)",
        "color-container-background-0": "hsl(205, 90%, 8%)",
        "color-container-background-1": "hsl(205, 90%, 15%)",
        "color-container-background-2": "hsl(205, 90%, 12%)",
        "color-container-background-3": "hsl(205, 90%, 15%)",
        "color-container-border-4": "hsl(205, 22%, 26%)",
        "color-dataviz-graph1": "#2470ad",
        "color-dataviz-graph2": "#98863c",
        "color-dataviz-graph3": "#5954ad",
        "color-dataviz-graph4": "#985b30",
        "color-dataviz-graph5": "#238a92",
        "color-dataviz-graph6": "#84414b",
        "color-dataviz-graph7": "#17785f",
        "color-dataviz-graph8": "#985186",
        "color-dataviz-kpi1": "#84414b",
        "color-dataviz-kpi3": "#98863c",
        "color-dataviz-kpi5": "#17785f",
        "color-display-icon": "hsl(0, 100%, 100%)",
        "color-display-text": "hsl(0, 100%, 100%)",
        "color-heading-icon": "hsl(0, 100%, 100%)",
        "color-heading-text": "hsl(0, 100%, 100%)",
        "color-highlight-text": "hsl(205, 97%, 63%)",
        "color-highlight-text-inverse": "hsl(0, 0%, 0%)",
        "color-icon-neutral": "hsl(0, 100%, 100%)",
        "color-icon-primary": "hsl(205, 97%, 63%)",
        "color-icon-secondary": "hsl(329, 75%, 43%)",
        "color-label-text": "hsl(223, 10%, 64%)",
        "color-neutral": "hsl(205, 25%, 70%)",
        "color-primary": "hsl(205, 97%, 63%)",
        "color-secondary": "hsl(329, 75%, 43%)",
        "color-status-alert": "hsl(360, 100%, 65%)",
        "color-status-background-alert": "hsl(205, 90%, 8%)",
        "color-status-background-info": "hsl(205, 90%, 8%)",
        "color-status-background-neutral": "hsl(219, 12%, 64%)",
        "color-status-background-success": "hsl(205, 90%, 8%)",
        "color-status-background-warning": "hsl(205, 90%, 8%)",
        "color-status-border-alert": "hsl(360, 100%, 65%)",
        "color-status-border-info": "hsl(205, 99%, 59%)",
        "color-status-border-neutral": "hsl(219, 12%, 64%)",
        "color-status-border-success": "hsl(124, 85%, 36%)",
        "color-status-border-warning": "hsl(40, 100%, 58%)",
        "color-status-icon-alert": "hsl(0, 100%, 64%)",
        "color-status-icon-info": "hsl(205, 99%, 59%)",
        "color-status-icon-neutral": "hsl(219, 12%, 64%)",
        "color-status-icon-success": "hsl(124, 85%, 36%)",
        "color-status-icon-warning": "hsl(40, 100%, 58%)",
        "color-status-info": "hsl(205, 99%, 59%)",
        "color-status-neutral": "hsl(205, 25%, 70%)",
        "color-status-success": "hsl(124, 85%, 36%)",
        "color-status-text-alert": "hsl(360, 100%, 65%)",
        "color-status-text-info": "hsl(205, 99%, 59%)",
        "color-status-text-neutral": "hsl(219, 0%, 100%)",
        "color-status-text-success": "hsl(124, 85%, 36%)",
        "color-status-text-warning": "hsl(40, 100%, 58%)",
        "color-status-warning": "hsl(40, 100%, 58%)",
        "color-syntax-text-01": "hsl(223, 11%, 88%)",
        "color-syntax-text-02": "hsl(218, 12%, 64%)",
        "color-syntax-text-03": "hsl(26, 93%, 70%)",
        "color-syntax-text-04": "hsl(7, 82%, 69%)",
        "color-syntax-text-05": "hsl(267, 72%, 67%)",
        "color-syntax-text-06": "hsl(212, 94%, 62%)",
        "color-syntax-text-07": "hsl(212, 95%, 78%)",
        "color-syntax-text-08": "hsl(169, 40%, 52%)",
        "color-syntax-text-09": "hsl(79, 51%, 50%)",
        "color-syntax-text-attribute-name": "hsl(212, 95%, 78%)",
        "color-syntax-text-attribute-value": "hsl(7, 82%, 69%)",
        "color-syntax-text-boolean": "hsl(267, 72%, 67%)",
        "color-syntax-text-character-constant": "hsl(169, 40%, 52%)",
        "color-syntax-text-class-name": "hsl(169, 40%, 52%)",
        "color-syntax-text-comment": "hsl(79, 51%, 50%)",
        "color-syntax-text-control": "hsl(267, 72%, 67%)",
        "color-syntax-text-data": "hsl(26, 93%, 70%)",
        "color-syntax-text-declaration": "hsl(212, 94%, 62%)",
        "color-syntax-text-default": "hsl(223, 11%, 88%)",
        "color-syntax-text-function": "hsl(267, 72%, 67%)",
        "color-syntax-text-identifier": "hsl(223, 11%, 88%)",
        "color-syntax-text-keyword": "hsl(212, 94%, 62%)",
        "color-syntax-text-namespace": "hsl(169, 40%, 52%)",
        "color-syntax-text-normal": "hsl(223, 11%, 88%)",
        "color-syntax-text-numeric-constant": "hsl(169, 40%, 52%)",
        "color-syntax-text-operator": "hsl(212, 95%, 78%)",
        "color-syntax-text-proc-name": "hsl(212, 95%, 78%)",
        "color-syntax-text-property": "hsl(212, 94%, 62%)",
        "color-syntax-text-punctuation": "hsl(218, 12%, 64%)",
        "color-syntax-text-punctuation-brackets": "hsl(218, 12%, 64%)",
        "color-syntax-text-section": "hsl(212, 95%, 78%)",
        "color-syntax-text-separator": "hsl(223, 11%, 88%)",
        "color-syntax-text-source": "hsl(212, 94%, 62%)",
        "color-syntax-text-storage-type": "hsl(212, 94%, 62%)",
        "color-syntax-text-string": "hsl(7, 82%, 69%)",
        "color-syntax-text-tag": "hsl(212, 94%, 62%)",
        "color-syntax-text-variable": "hsl(212, 95%, 78%)",
        "color-text-neutral": "hsl(0, 100%, 100%)",
        "color-text-neutral-inverse": "hsl(0, 0%, 0%)",
        "color-text-primary": "hsl(205, 97%, 63%)",
        "color-text-primary-inverse": "hsl(0, 0%, 0%)",
        "color-text-secondary": "hsl(329, 75%, 43%)",
        "color-thumbnail-fill-1": "hsl(212, 94%, 83%)",
        "color-thumbnail-fill-2": "hsl(212, 94%, 72%)",
        "color-thumbnail-fill-3": "hsl(212, 94%, 57%)",
        "color-thumbnail-fill-4": "hsl(212, 94%, 42%)",
        "color-zero-state-base-fill-1": "hsl(219, 12%, 17%)",
        "color-zero-state-base-fill-2": "hsl(219, 12%, 59%)",
        "color-zero-state-base-fill-3": "hsl(219, 12%, 48%)",
        "color-zero-state-modifier-fill-1": "hsl(219, 12%, 27%)",
        "color-zero-state-modifier-fill-2": "hsl(212, 94%, 62%)",
        "color-zero-state-modifier-fill-3": "hsl(212, 94%, 72%)",
        "color-zero-state-modifier-fill-4": "hsl(219, 12%, 33%)",
        "color-zero-state-modifier-fill-5": "hsl(219, 12%, 72%)",
        "duration-100": "100ms",
        "duration-1000": "1s",
        "duration-200": "200ms",
        "duration-250": "250ms",
        "duration-300": "300ms",
        "duration-400": "400ms",
        "duration-450": "450ms",
        "duration-700": "700ms",
        "ease-in": "cubic-bezier(0, 0.5, 0.2, 1)",
        "ease-in-out": "cubic-bezier(0.5, 0, 0.2, 1)",
        "ease-out": "cubic-bezier(0.5, 0, 0.8, 1)",
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
        "font-family-secondary": "'AvenirNext', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
        "font-size-base-text": "14px",
        "font-size-base-text-l": "18px",
        "font-size-base-text-m": "16px",
        "font-size-base-text-s": "14px",
        "font-size-body-text-l": "1rem",
        "font-size-body-text-m": "0.875rem",
        "font-size-body-text-s": "0.75rem",
        "font-size-body-text-xl": "1.125rem",
        "font-size-body-text-xs": "0.6875rem",
        "font-size-body-text-xxl": "1.25rem",
        "font-size-body-text-xxs": "0.625rem",
        "font-size-body-text-xxxl": "1.375rem",
        "font-size-body-text-xxxs": "0.5625rem",
        "font-size-body-text-xxxxl": "1.5625rem",
        "font-size-display-text-1": "4.5625rem",
        "font-size-display-text-2": "3.625rem",
        "font-size-display-text-3": "2.5rem",
        "font-size-heading-text-1": "1.375rem",
        "font-size-heading-text-2": "1.25rem",
        "font-size-heading-text-3": "1.125rem",
        "font-size-heading-text-4": "1rem",
        "font-size-heading-text-5": "0.875rem",
        "font-size-heading-text-6": "0.75rem",
        "font-size-ratio": "1.125",
        "font-size-ratio-major-second": "1.125",
        "font-size-ratio-major-third": "1.25",
        "font-size-ratio-minor-third": "1.2",
        "font-space-letter-spacing": "normal",
        "font-space-letter-spacing-l": "2px",
        "font-space-letter-spacing-m": "normal",
        "font-space-letter-spacing-s": "1px",
        "font-space-line-height": "1.4",
        "font-space-line-height-l": "1.6",
        "font-space-line-height-m": "1.5",
        "font-space-line-height-s": "1.4",
        "font-space-word": "normal",
        "font-space-word-l": "2px",
        "font-space-word-m": "normal",
        "font-space-word-s": "1px",
        "font-style-expression": "normal",
        "font-style-expression-italic": "italic",
        "font-style-expression-normal": "normal",
        "font-style-expression-oblique": "oblique",
        "font-style-overflow-wrap": "anywhere",
        "font-style-overflow-wrap-anywhere": "anywhere",
        "font-style-overflow-wrap-break-word": "break-word",
        "font-style-overflow-wrap-normal": "normal",
        "font-style-text-transform": "none",
        "font-style-text-transform-capitalize": "capitalize",
        "font-style-text-transform-lowercase": "lowercase",
        "font-style-text-transform-none": "none",
        "font-style-text-transform-uppercase": "uppercase",
        "font-style-weight-300": "300",
        "font-style-weight-400": "400",
        "font-style-weight-500": "500",
        "font-style-weight-600": "600",
        "font-style-weight-700": "700",
        "font-style-word-break": "break-all",
        "font-style-word-break-break-all": "break-all",
        "font-style-word-break-break-word": "break-word",
        "font-style-word-break-keep-all": "keep-all",
        "font-style-word-break-normal": "normal",
        "shadow-depth-l": "0 8px 12px rgba(0, 0, 0, 0.04), 0 16px 24px rgba(0, 0, 0, 0.08)",
        "shadow-depth-m": "0 2px 4px rgba(0, 0, 0, 0.04), 0 8px 16px rgba(0, 0, 0, 0.08)",
        "shadow-depth-s": "0 2px 2px rgba(0, 0, 0, 0.04), 0 4px 8px rgba(0, 0, 0, 0.08)",
        "shadow-depth-xl": "0 16px 24px rgba(0, 0, 0, 0.04), 0 32px 48px rgba(0, 0, 0, 0.08)",
        "shadow-depth-xs": "0 1px 2px rgba(0, 0, 0, 0.04), 0 2px 4px rgba(0, 0, 0, 0.08)",
        "size-action-border-width-focus": "1px",
        "size-border-radius-full": "50%",
        "size-border-radius-l": "24px",
        "size-border-radius-m": "16px",
        "size-border-radius-s": "8px",
        "size-border-radius-xs": "4px",
        "size-border-radius-xxs": "2px",
        "size-border-width-l": "3px",
        "size-border-width-m": "2px",
        "size-border-width-null": "0",
        "size-border-width-s": "1px",
        "size-container-l": "400px",
        "size-container-m": "320px",
        "size-container-null": "0",
        "size-container-s": "240px",
        "size-container-xl": "640px",
        "size-container-xs": "192px",
        "size-container-xxl": "960px",
        "size-container-xxs": "96px",
        "size-icon-l": "1rem",
        "size-icon-m": "0.875rem",
        "size-icon-s": "0.75rem",
        "size-icon-xl": "1.125rem",
        "size-icon-xs": "0.75rem",
        "size-icon-xxl": "1.25rem",
        "size-icon-xxs": "0.75rem",
        "size-icon-xxxl": "1.375rem",
        "size-icon-xxxs": "0.75rem",
        "size-icon-xxxxl": "1.5625rem",
        "size-outline-width-l": "3px",
        "size-outline-width-m": "2px",
        "size-outline-width-s": "1px",
        "size-outline-width-xl": "4px",
        "size-zero-state-border-width": "0",
        "space-base-l": "1.5rem",
        "space-base-m": "1rem",
        "space-base-null": "0",
        "space-base-s": "0.5rem",
        "space-base-size": "1rem",
        "space-base-xl": "2rem",
        "space-base-xs": "0.25rem",
        "space-base-xxl": "2.5rem",
        "space-base-xxs": "0.125rem",
        "space-base-xxxl": "3rem",
        "space-base-xxxxl": "3.5rem",
        "space-base-xxxxxl": "4rem",
        "space-block-l": "1.5rem",
        "space-block-m": "1rem",
        "space-block-s": "0.5rem",
        "space-block-xl": "2rem",
        "space-block-xs": "0.25rem",
        "space-block-xxl": "2.5rem",
        "space-block-xxs": "0.125rem",
        "space-block-xxxl": "3rem",
        "space-block-xxxxl": "3.5rem",
        "space-block-xxxxxl": "4rem",
        "space-inline-l": "1.5rem",
        "space-inline-m": "1rem",
        "space-inline-s": "0.5rem",
        "space-inline-xl": "2rem",
        "space-inline-xs": "0.25rem",
        "space-inline-xxl": "2.5rem",
        "space-inline-xxs": "0.125rem",
        "space-inline-xxxl": "3rem",
        "space-inline-xxxxl": "3.5rem",
        "space-inline-xxxxxl": "4rem",
        "space-squish-l": "0.75rem 1.5rem",
        "space-squish-m": "0.5rem 1rem",
        "space-squish-s": "0.25rem 0.5rem",
        "space-squish-xl": "1rem 2rem",
        "space-squish-xs": "0.125rem 0.25rem",
        "space-squish-xxl": "1.25rem 2.5rem",
        "space-squish-xxs": "0.0625rem 0.125rem",
        "space-stretch-l": "1.5rem 0.75rem",
        "space-stretch-m": "1rem 0.5rem",
        "space-stretch-s": "0.5rem 0.25rem",
        "space-stretch-xs": "0.25rem 0.125rem",
        "space-stretch-xxs": "0.125rem 0.0625rem",
        "style-action-border-focus": "dotted"
    }
};

const uS = {
    name: "hebrew",
    selectors: [ ":lang(he)" ],
    tokens: {
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-family-secondary": "'AvenirNext', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"
    }
};

const mS = {
    name: "high-contrast",
    selectors: [ "[data-sas-theme='high-contrast']" ],
    tokens: {
        "color-action-background-control-alert": "hsl(0, 0%, 0%)",
        "color-action-background-control-disabled": "hsl(0, 0%, 0%)",
        "color-action-background-control-hover": "hsl(0, 0%, 0%)",
        "color-action-background-control-non-editable": "hsla(205, 30%, 90%, 0.16)",
        "color-action-background-control-normal": "hsl(0, 0%, 0%)",
        "color-action-background-control-placeholder": "hsl(0, 0%, 0%)",
        "color-action-background-control-primary": "hsl(205, 97%, 76%)",
        "color-action-background-control-read-only": "hsl(0, 0%, 0%)",
        "color-action-background-control-selected": "hsl(0, 0%, 0%)",
        "color-action-background-control-warning": "hsl(0, 0%, 0%)",
        "color-action-background-emphasis-active": "hsl(205, 97%, 76%)",
        "color-action-background-emphasis-disabled": "hsla(205, 97%, 76%, 0.16)",
        "color-action-background-emphasis-hover": "hsla(205, 97%, 76%, 0.16)",
        "color-action-background-emphasis-normal": "hsla(205, 97%, 76%, 0.08)",
        "color-action-background-emphasis-selected": "hsl(205, 97%, 76%)",
        "color-action-background-emphasis-visited": "hsla(205, 97%, 76%, 0.08)",
        "color-action-background-focus": "hsl(205, 97%, 76%)",
        "color-action-background-focus-inverse": "hsl(0, 0%, 0%)",
        "color-action-background-on-off-disabled": "hsl(0, 0%, 0%)",
        "color-action-background-on-off-hover": "hsl(0, 0%, 0%)",
        "color-action-background-on-off-normal": "hsl(0, 0%, 0%)",
        "color-action-background-on-off-read-only": "hsl(0, 0%, 0%)",
        "color-action-background-on-off-selected": "hsl(329, 75%, 90%)",
        "color-action-background-on-off-selected-disabled": "hsla(329, 75%, 90%, 0.24)",
        "color-action-background-secondary-disabled": "hsla(205, 30%, 90%, 0.16)",
        "color-action-background-secondary-normal": "hsl(0, 0%, 0%)",
        "color-action-background-secondary-selected": "hsl(329, 75%, 90%)",
        "color-action-background-secondary-selected-disabled": "hsla(329, 75%, 90%, 0.32)",
        "color-action-background-standard-active": "hsl(204, 29%, 90%)",
        "color-action-background-standard-disabled": "hsla(205, 30%, 90%, 0.16)",
        "color-action-background-standard-hover": "hsla(205, 30%, 90%, 0.16)",
        "color-action-background-standard-normal": "hsla(205, 30%, 90%, 0.08)",
        "color-action-background-standard-selected": "hsl(205, 30%, 90%)",
        "color-action-background-standard-selected-inactive": "hsla(205, 30%, 90%, 0.16)",
        "color-action-background-standard-visited": "hsla(204, 29%, 90%, 0.08)",
        "color-action-background-subtle-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-background-subtle-hover": "hsla(205, 30%, 90%, 0.16)",
        "color-action-background-subtle-normal": "hsla(0, 100%, 100%, 0)",
        "color-action-background-subtle-selected": "hsl(205, 30%, 90%)",
        "color-action-background-subtle-selected-inactive": "hsla(205, 30%, 90%, 0.16)",
        "color-action-border-bottom-control-alert": "hsl(360, 80%, 80%)",
        "color-action-border-bottom-control-hover": "hsl(205, 30%, 90%)",
        "color-action-border-bottom-control-normal": "hsl(205, 30%, 90%)",
        "color-action-border-bottom-control-selected": "hsl(205, 97%, 76%)",
        "color-action-border-bottom-control-warning": "hsl(40, 80%, 75%)",
        "color-action-border-control-alert": "hsl(360, 80%, 80%)",
        "color-action-border-control-disabled": "hsla(205, 30%, 90%, 0.32)",
        "color-action-border-control-hover": "hsl(205, 30%, 90%)",
        "color-action-border-control-normal": "hsl(205, 30%, 90%)",
        "color-action-border-control-placeholder": "hsl(205, 30%, 90%)",
        "color-action-border-control-read-only": "hsla(0, 100%, 100%, 0)",
        "color-action-border-control-selected": "hsl(205, 97%, 76%)",
        "color-action-border-control-warning": "hsl(40, 80%, 75%)",
        "color-action-border-emphasis-active": "hsl(205, 97%, 76%)",
        "color-action-border-emphasis-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-emphasis-hover": "hsl(205, 97%, 76%)",
        "color-action-border-emphasis-normal": "hsl(205, 97%, 76%)",
        "color-action-border-emphasis-selected": "hsl(205, 97%, 76%)",
        "color-action-border-emphasis-visited": "hsl(205, 97%, 76%)",
        "color-action-border-focus": "hsl(205, 97%, 76%)",
        "color-action-border-focus-inverse": "hsl(0, 100%, 100%)",
        "color-action-border-on-off-disabled": "hsla(205, 30%, 90%, 0.32)",
        "color-action-border-on-off-hover": "hsl(205, 30%, 90%)",
        "color-action-border-on-off-normal": "hsl(205, 30%, 90%)",
        "color-action-border-on-off-read-only": "hsl(0, 100%, 100%)",
        "color-action-border-on-off-selected": "hsl(329, 75%, 90%)",
        "color-action-border-on-off-selected-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-secondary-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-secondary-normal": "hsl(205, 30%, 90%)",
        "color-action-border-secondary-selected": "hsl(329, 75%, 90%)",
        "color-action-border-secondary-selected-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-standard-active": "hsl(204, 29%, 90%)",
        "color-action-border-standard-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-standard-hover": "hsl(205, 30%, 90%)",
        "color-action-border-standard-normal": "hsl(205, 30%, 90%)",
        "color-action-border-standard-selected": "hsl(205, 30%, 90%)",
        "color-action-border-standard-selected-inactive": "hsl(205, 30%, 90%)",
        "color-action-border-standard-visited": "hsl(204, 29%, 90%)",
        "color-action-border-subtle-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-subtle-hover": "hsla(0, 100%, 100%, 0)",
        "color-action-border-subtle-normal": "hsla(0, 100%, 100%, 0)",
        "color-action-border-subtle-selected": "hsl(205, 30%, 90%)",
        "color-action-border-subtle-selected-inactive": "hsl(205, 30%, 90%)",
        "color-action-focus": "hsl(205, 97%, 76%)",
        "color-action-icon-control-alert": "hsl(360, 80%, 80%)",
        "color-action-icon-control-disabled": "hsla(0, 0%, 100%, 0.32)",
        "color-action-icon-control-hover": "hsl(0, 0%, 100%)",
        "color-action-icon-control-normal": "hsl(0, 0%, 100%)",
        "color-action-icon-control-read-only": "hsl(0, 0%, 100%)",
        "color-action-icon-control-selected": "hsl(0, 0%, 0%)",
        "color-action-icon-control-warning": "hsl(40, 80%, 75%)",
        "color-action-icon-emphasis-active": "hsl(0, 0%, 0%)",
        "color-action-icon-emphasis-disabled": "hsla(205, 97%, 76%, 0.32)",
        "color-action-icon-emphasis-hover": "hsl(205, 97%, 76%)",
        "color-action-icon-emphasis-normal": "hsl(205, 97%, 76%)",
        "color-action-icon-emphasis-selected": "hsl(0, 0%, 0%)",
        "color-action-icon-emphasis-visited": "hsl(205, 97%, 76%)",
        "color-action-icon-on-off-disabled": "hsla(0, 0%, 100%, 0.32)",
        "color-action-icon-on-off-hover": "hsl(0, 0%, 100%)",
        "color-action-icon-on-off-normal": "hsl(0, 0%, 100%)",
        "color-action-icon-on-off-read-only": "hsl(0, 0%, 100%)",
        "color-action-icon-on-off-selected": "hsl(0, 0%, 0%)",
        "color-action-icon-on-off-selected-disabled": "hsla(0, 0%, 0%, 0.32)",
        "color-action-icon-standard-active": "hsl(0, 0%, 0%)",
        "color-action-icon-standard-disabled": "hsla(0, 0%, 100%, 0.48)",
        "color-action-icon-standard-hover": "hsl(0, 0%, 100%)",
        "color-action-icon-standard-normal": "hsl(0, 0%, 100%)",
        "color-action-icon-standard-selected": "hsl(0, 0%, 0%)",
        "color-action-icon-standard-selected-inactive": "hsl(0, 0%, 100%)",
        "color-action-icon-standard-visited": "hsl(0, 0%, 100%)",
        "color-action-icon-subtle-disabled": "hsla(0, 0%, 100%, 0.48)",
        "color-action-icon-subtle-hover": "hsl(0, 0%, 100%)",
        "color-action-icon-subtle-normal": "hsl(0, 0%, 100%)",
        "color-action-icon-subtle-selected": "hsl(0, 0%, 0%)",
        "color-action-icon-subtle-selected-inactive": "hsl(0, 0%, 100%)",
        "color-action-link-active": "hsl(0, 0%, 100%)",
        "color-action-link-hover": "hsl(0, 0%, 100%)",
        "color-action-link-normal": "hsl(0, 0%, 100%)",
        "color-action-link-visited": "hsl(0, 0%, 100%)",
        "color-action-text-control-active": "hsl(0, 0%, 100%)",
        "color-action-text-control-alert": "hsl(0, 0%, 100%)",
        "color-action-text-control-disabled": "hsla(0, 0%, 100%, 0.32)",
        "color-action-text-control-hover": "hsl(0, 0%, 100%)",
        "color-action-text-control-normal": "hsl(0, 0%, 100%)",
        "color-action-text-control-placeholder": "hsl(0, 0%, 100%)",
        "color-action-text-control-read-only": "hsl(0, 0%, 100%)",
        "color-action-text-control-selected": "hsl(0, 0%, 100%)",
        "color-action-text-control-warning": "hsl(43, 0%, 100%)",
        "color-action-text-emphasis-active": "hsl(0, 0%, 0%)",
        "color-action-text-emphasis-disabled": "hsla(205, 97%, 76%, 0.32)",
        "color-action-text-emphasis-hover": "hsl(205, 97%, 76%)",
        "color-action-text-emphasis-normal": "hsl(205, 97%, 76%)",
        "color-action-text-emphasis-selected": "hsl(0, 0%, 0%)",
        "color-action-text-emphasis-visited": "hsl(205, 97%, 76%)",
        "color-action-text-on-off-disabled": "hsla(0, 0%, 100%, 0.32)",
        "color-action-text-on-off-hover": "hsl(219, 0%, 100%)",
        "color-action-text-on-off-normal": "hsl(0, 0%, 100%)",
        "color-action-text-on-off-read-only": "hsl(0, 0%, 100%)",
        "color-action-text-on-off-selected": "hsl(0, 0%, 0%)",
        "color-action-text-on-off-selected-disabled": "hsla(0, 0%, 0%, 0.32)",
        "color-action-text-secondary-disabled": "hsla(0, 0%, 100%, 0.48)",
        "color-action-text-secondary-normal": "hsl(0, 0%, 100%)",
        "color-action-text-secondary-selected": "hsl(0, 0%, 0%)",
        "color-action-text-secondary-selected-disabled": "hsla(0, 0%, 0%, 0.64)",
        "color-action-text-standard-active": "hsl(0, 0%, 0%)",
        "color-action-text-standard-disabled": "hsla(0, 0%, 100%, 0.48)",
        "color-action-text-standard-hover": "hsl(0, 0%, 100%)",
        "color-action-text-standard-normal": "hsl(0, 0%, 100%)",
        "color-action-text-standard-selected": "hsl(0, 0%, 0%)",
        "color-action-text-standard-selected-inactive": "hsl(0, 0%, 100%)",
        "color-action-text-standard-visited": "hsl(0, 0%, 100%)",
        "color-action-text-subtle-disabled": "hsla(0, 0%, 100%, 0.48)",
        "color-action-text-subtle-hover": "hsl(0, 0%, 100%)",
        "color-action-text-subtle-normal": "hsl(0, 0%, 100%)",
        "color-action-text-subtle-selected": "hsl(0, 0%, 0%)",
        "color-action-text-subtle-selected-inactive": "hsl(0, 0%, 100%)",
        "color-body-icon": "hsl(0, 0%, 100%)",
        "color-body-text": "hsl(0, 0%, 100%)",
        "color-container-background-0": "hsl(0, 0%, 0%)",
        "color-container-background-1": "hsl(0, 0%, 0%)",
        "color-container-background-2": "hsl(0, 0%, 0%)",
        "color-container-background-3": "hsl(0, 0%, 0%)",
        "color-container-border-4": "hsl(0, 0%, 100%)",
        "color-dataviz-graph1": "#4AACFF",
        "color-dataviz-graph2": "#F1D700",
        "color-dataviz-graph3": "#C68AFF",
        "color-dataviz-graph4": "#F98E39",
        "color-dataviz-graph5": "#00D692",
        "color-dataviz-graph6": "#FF817A",
        "color-dataviz-graph7": "#7CBF00",
        "color-dataviz-graph8": "#FF6FBD",
        "color-dataviz-kpi1": "#ff5e4d",
        "color-dataviz-kpi3": "#f2d94b",
        "color-dataviz-kpi5": "#7bb04a",
        "color-display-icon": "hsl(0, 0%, 100%)",
        "color-display-text": "hsl(0, 0%, 100%)",
        "color-heading-icon": "hsl(0, 0%, 100%)",
        "color-heading-text": "hsl(0, 0%, 100%)",
        "color-highlight-text": "hsl(205, 97%, 76%)",
        "color-highlight-text-inverse": "hsl(0, 0%, 0%)",
        "color-icon-neutral": "hsl(0, 0%, 100%)",
        "color-icon-primary": "hsl(205, 97%, 76%)",
        "color-icon-secondary": "hsl(329, 75%, 90%)",
        "color-label-text": "hsl(100, 100%, 100%)",
        "color-neutral": "hsl(205, 30%, 90%)",
        "color-primary": "hsl(205, 97%, 76%)",
        "color-secondary": "hsl(329, 75%, 90%)",
        "color-status-alert": "hsl(360, 80%, 80%)",
        "color-status-background-alert": "hsl(0, 0%, 0%)",
        "color-status-background-info": "hsl(0, 0%, 0%)",
        "color-status-background-neutral": "hsl(219, 0%, 0%)",
        "color-status-background-success": "hsl(0, 0%, 0%)",
        "color-status-background-warning": "hsl(0, 0%, 0%)",
        "color-status-border-alert": "hsl(360, 80%, 80%)",
        "color-status-border-info": "hsl(205, 80%, 75%)",
        "color-status-border-neutral": "hsl(219, 12%, 84%)",
        "color-status-border-success": "hsl(124, 60%, 75%)",
        "color-status-border-warning": "hsl(40, 80%, 75%)",
        "color-status-icon-alert": "hsl(360, 80%, 80%)",
        "color-status-icon-info": "hsl(205, 80%, 75%)",
        "color-status-icon-neutral": "hsl(219, 12%, 84%)",
        "color-status-icon-success": "hsl(124, 60%, 75%)",
        "color-status-icon-warning": "hsl(40, 80%, 75%)",
        "color-status-info": "hsl(205, 80%, 75%)",
        "color-status-neutral": "hsl(205, 30%, 90%)",
        "color-status-success": "hsl(124, 60%, 75%)",
        "color-status-text-alert": "hsl(360, 80%, 80%)",
        "color-status-text-info": "hsl(205, 80%, 75%)",
        "color-status-text-neutral": "hsl(219, 0%, 100%)",
        "color-status-text-success": "hsl(124, 60%, 75%)",
        "color-status-text-warning": "hsl(40, 80%, 75%)",
        "color-status-warning": "hsl(40, 80%, 75%)",
        "color-syntax-text-01": "hsl(0, 0%, 100%)",
        "color-syntax-text-02": "hsl(54, 66%, 53%)",
        "color-syntax-text-03": "hsl(27, 94%, 60%)",
        "color-syntax-text-04": "hsl(3, 100%, 73%)",
        "color-syntax-text-05": "hsl(328, 100%, 72%)",
        "color-syntax-text-06": "hsl(271, 100%, 77%)",
        "color-syntax-text-07": "hsl(212, 94%, 68%)",
        "color-syntax-text-08": "hsl(173, 72%, 43%)",
        "color-syntax-text-09": "hsl(81, 57%, 45%)",
        "color-syntax-text-attribute-name": "hsl(212, 94%, 68%)",
        "color-syntax-text-attribute-value": "hsl(3, 100%, 73%)",
        "color-syntax-text-boolean": "hsl(328, 100%, 72%)",
        "color-syntax-text-character-constant": "hsl(173, 72%, 43%)",
        "color-syntax-text-class-name": "hsl(173, 72%, 43%)",
        "color-syntax-text-comment": "hsl(81, 57%, 45%)",
        "color-syntax-text-control": "hsl(328, 100%, 72%)",
        "color-syntax-text-data": "hsl(27, 94%, 60%)",
        "color-syntax-text-declaration": "hsl(271, 100%, 77%)",
        "color-syntax-text-default": "hsl(0, 0%, 100%)",
        "color-syntax-text-function": "hsl(328, 100%, 72%)",
        "color-syntax-text-identifier": "hsl(0, 0%, 100%)",
        "color-syntax-text-keyword": "hsl(271, 100%, 77%)",
        "color-syntax-text-namespace": "hsl(173, 72%, 43%)",
        "color-syntax-text-normal": "hsl(0, 0%, 100%)",
        "color-syntax-text-numeric-constant": "hsl(173, 72%, 43%)",
        "color-syntax-text-operator": "hsl(212, 94%, 68%)",
        "color-syntax-text-proc-name": "hsl(212, 94%, 68%)",
        "color-syntax-text-property": "hsl(271, 100%, 77%)",
        "color-syntax-text-punctuation": "hsl(54, 66%, 53%)",
        "color-syntax-text-punctuation-brackets": "hsl(54, 66%, 53%)",
        "color-syntax-text-section": "hsl(212, 94%, 68%)",
        "color-syntax-text-separator": "hsl(0, 0%, 100%)",
        "color-syntax-text-source": "hsl(271, 100%, 77%)",
        "color-syntax-text-storage-type": "hsl(271, 100%, 77%)",
        "color-syntax-text-string": "hsl(3, 100%, 73%)",
        "color-syntax-text-tag": "hsl(271, 100%, 77%)",
        "color-syntax-text-variable": "hsl(212, 94%, 68%)",
        "color-text-neutral": "hsl(0, 0%, 100%)",
        "color-text-neutral-inverse": "hsl(0, 0%, 0%)",
        "color-text-primary": "hsl(205, 97%, 76%)",
        "color-text-primary-inverse": "hsl(0, 0%, 0%)",
        "color-text-secondary": "hsl(329, 75%, 90%)",
        "color-thumbnail-fill-1": "hsl(212, 94%, 97%)",
        "color-thumbnail-fill-2": "hsl(212, 94%, 90%)",
        "color-thumbnail-fill-3": "hsl(212, 94%, 78%)",
        "color-thumbnail-fill-4": "hsl(212, 94%, 62%)",
        "color-zero-state-base-fill-1": "hsl(219, 0%, 0%)",
        "color-zero-state-base-fill-2": "hsl(219, 12%, 72%)",
        "color-zero-state-base-fill-3": "hsl(219, 12%, 59%)",
        "color-zero-state-modifier-fill-1": "hsl(219, 12%, 22%)",
        "color-zero-state-modifier-fill-2": "hsl(212, 94%, 76%)",
        "color-zero-state-modifier-fill-3": "hsl(212, 94%, 57%)",
        "color-zero-state-modifier-fill-4": "hsl(219, 12%, 30%)",
        "color-zero-state-modifier-fill-5": "hsl(219, 12%, 88%)",
        "duration-100": "100ms",
        "duration-1000": "1s",
        "duration-200": "200ms",
        "duration-250": "250ms",
        "duration-300": "300ms",
        "duration-400": "400ms",
        "duration-450": "450ms",
        "duration-700": "700ms",
        "ease-in": "cubic-bezier(0, 0.5, 0.2, 1)",
        "ease-in-out": "cubic-bezier(0.5, 0, 0.2, 1)",
        "ease-out": "cubic-bezier(0.5, 0, 0.8, 1)",
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "Verdana, Helvetica, Arial, sans-serif",
        "font-family-secondary": "Verdana, Helvetica, Arial, sans-serif",
        "font-size-base-text": "14px",
        "font-size-base-text-l": "18px",
        "font-size-base-text-m": "16px",
        "font-size-base-text-s": "14px",
        "font-size-body-text-l": "1rem",
        "font-size-body-text-m": "0.875rem",
        "font-size-body-text-s": "0.75rem",
        "font-size-body-text-xl": "1.125rem",
        "font-size-body-text-xs": "0.6875rem",
        "font-size-body-text-xxl": "1.25rem",
        "font-size-body-text-xxs": "0.625rem",
        "font-size-body-text-xxxl": "1.375rem",
        "font-size-body-text-xxxs": "0.5625rem",
        "font-size-body-text-xxxxl": "1.5625rem",
        "font-size-display-text-1": "4.5625rem",
        "font-size-display-text-2": "3.625rem",
        "font-size-display-text-3": "2.5rem",
        "font-size-heading-text-1": "1.375rem",
        "font-size-heading-text-2": "1.25rem",
        "font-size-heading-text-3": "1.125rem",
        "font-size-heading-text-4": "1rem",
        "font-size-heading-text-5": "0.875rem",
        "font-size-heading-text-6": "0.75rem",
        "font-size-ratio": "1.125",
        "font-size-ratio-major-second": "1.125",
        "font-size-ratio-major-third": "1.25",
        "font-size-ratio-minor-third": "1.2",
        "font-space-letter-spacing": "normal",
        "font-space-letter-spacing-l": "2px",
        "font-space-letter-spacing-m": "normal",
        "font-space-letter-spacing-s": "1px",
        "font-space-line-height": "1.4",
        "font-space-line-height-l": "1.6",
        "font-space-line-height-m": "1.5",
        "font-space-line-height-s": "1.4",
        "font-space-word": "normal",
        "font-space-word-l": "2px",
        "font-space-word-m": "normal",
        "font-space-word-s": "1px",
        "font-style-expression": "normal",
        "font-style-expression-italic": "italic",
        "font-style-expression-normal": "normal",
        "font-style-expression-oblique": "oblique",
        "font-style-overflow-wrap": "anywhere",
        "font-style-overflow-wrap-anywhere": "anywhere",
        "font-style-overflow-wrap-break-word": "break-word",
        "font-style-overflow-wrap-normal": "normal",
        "font-style-text-transform": "none",
        "font-style-text-transform-capitalize": "capitalize",
        "font-style-text-transform-lowercase": "lowercase",
        "font-style-text-transform-none": "none",
        "font-style-text-transform-uppercase": "uppercase",
        "font-style-weight-300": "300",
        "font-style-weight-400": "400",
        "font-style-weight-500": "500",
        "font-style-weight-600": "600",
        "font-style-weight-700": "700",
        "font-style-word-break": "break-all",
        "font-style-word-break-break-all": "break-all",
        "font-style-word-break-break-word": "break-word",
        "font-style-word-break-keep-all": "keep-all",
        "font-style-word-break-normal": "normal",
        "shadow-depth-l": "0 8px 12px rgba(0, 0, 0, 0.04), 0 16px 24px rgba(0, 0, 0, 0.08)",
        "shadow-depth-m": "0 2px 4px rgba(0, 0, 0, 0.04), 0 8px 16px rgba(0, 0, 0, 0.08)",
        "shadow-depth-s": "0 2px 2px rgba(0, 0, 0, 0.04), 0 4px 8px rgba(0, 0, 0, 0.08)",
        "shadow-depth-xl": "0 16px 24px rgba(0, 0, 0, 0.04), 0 32px 48px rgba(0, 0, 0, 0.08)",
        "shadow-depth-xs": "0 1px 2px rgba(0, 0, 0, 0.04), 0 2px 4px rgba(0, 0, 0, 0.08)",
        "size-action-border-width-focus": "4px",
        "size-border-radius-full": "50%",
        "size-border-radius-l": "24px",
        "size-border-radius-m": "16px",
        "size-border-radius-s": "8px",
        "size-border-radius-xs": "4px",
        "size-border-radius-xxs": "2px",
        "size-border-width-l": "3px",
        "size-border-width-m": "2px",
        "size-border-width-null": "0",
        "size-border-width-s": "1px",
        "size-container-l": "400px",
        "size-container-m": "320px",
        "size-container-null": "0",
        "size-container-s": "240px",
        "size-container-xl": "640px",
        "size-container-xs": "192px",
        "size-container-xxl": "960px",
        "size-container-xxs": "96px",
        "size-icon-l": "1rem",
        "size-icon-m": "0.875rem",
        "size-icon-s": "0.75rem",
        "size-icon-xl": "1.125rem",
        "size-icon-xs": "0.75rem",
        "size-icon-xxl": "1.25rem",
        "size-icon-xxs": "0.75rem",
        "size-icon-xxxl": "1.375rem",
        "size-icon-xxxs": "0.75rem",
        "size-icon-xxxxl": "1.5625rem",
        "size-outline-width-l": "3px",
        "size-outline-width-m": "2px",
        "size-outline-width-s": "1px",
        "size-outline-width-xl": "4px",
        "size-zero-state-border-width": "0",
        "space-base-l": "1.5rem",
        "space-base-m": "1rem",
        "space-base-null": "0",
        "space-base-s": "0.5rem",
        "space-base-size": "1rem",
        "space-base-xl": "2rem",
        "space-base-xs": "0.25rem",
        "space-base-xxl": "2.5rem",
        "space-base-xxs": "0.125rem",
        "space-base-xxxl": "3rem",
        "space-base-xxxxl": "3.5rem",
        "space-base-xxxxxl": "4rem",
        "space-block-l": "1.5rem",
        "space-block-m": "1rem",
        "space-block-s": "0.5rem",
        "space-block-xl": "2rem",
        "space-block-xs": "0.25rem",
        "space-block-xxl": "2.5rem",
        "space-block-xxs": "0.125rem",
        "space-block-xxxl": "3rem",
        "space-block-xxxxl": "3.5rem",
        "space-block-xxxxxl": "4rem",
        "space-inline-l": "1.5rem",
        "space-inline-m": "1rem",
        "space-inline-s": "0.5rem",
        "space-inline-xl": "2rem",
        "space-inline-xs": "0.25rem",
        "space-inline-xxl": "2.5rem",
        "space-inline-xxs": "0.125rem",
        "space-inline-xxxl": "3rem",
        "space-inline-xxxxl": "3.5rem",
        "space-inline-xxxxxl": "4rem",
        "space-squish-l": "0.75rem 1.5rem",
        "space-squish-m": "0.5rem 1rem",
        "space-squish-s": "0.25rem 0.5rem",
        "space-squish-xl": "1rem 2rem",
        "space-squish-xs": "0.125rem 0.25rem",
        "space-squish-xxl": "1.25rem 2.5rem",
        "space-squish-xxs": "0.0625rem 0.125rem",
        "space-stretch-l": "1.5rem 0.75rem",
        "space-stretch-m": "1rem 0.5rem",
        "space-stretch-s": "0.5rem 0.25rem",
        "space-stretch-xs": "0.25rem 0.125rem",
        "space-stretch-xxs": "0.125rem 0.0625rem",
        "style-action-border-focus": "dotted"
    }
};

const pS = {
    name: "japanese",
    selectors: [ ":lang(jp)" ],
    tokens: {
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'Osaka', 'メイリオ', 'Meiryo', 'ＭＳ Ｐゴシック', 'MS PGothic', 'Noto Sans JP', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-family-secondary": "'AvenirNext', 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'Osaka', 'メイリオ', 'Meiryo', 'ＭＳ Ｐゴシック', 'MS PGothic', 'Noto Sans JP', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-space-line-height": "1.5",
        "font-space-line-height-m": "1.5",
        "font-style-expression-italic": "normal",
        "font-style-weight-300": "400"
    }
};

const fS = {
    name: "korean",
    selectors: [ ":lang(ko)" ],
    tokens: {
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', '맑은 고딕', 'Malgun Gothic', 'Apple SD Gothic Neo', 'NanumBarunGothic', '굴림', 'Gulim', '돋움', 'Dotum', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-family-secondary": "'AvenirNext', '맑은 고딕', 'Malgun Gothic', 'Apple SD Gothic Neo', 'NanumBarunGothic', '굴림', 'Gulim', '돋움', 'Dotum', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-space-line-height": "1.5",
        "font-space-line-height-m": "1.5",
        "font-style-expression-italic": "normal",
        "font-style-weight-300": "400"
    }
};

const gS = {
    name: "light",
    selectors: [ ":root", "[data-sas-theme='light']" ],
    tokens: {
        "color-action-background-control-alert": "hsl(0, 100%, 100%)",
        "color-action-background-control-disabled": "hsl(0, 100%, 100%)",
        "color-action-background-control-hover": "hsl(0, 100%, 100%)",
        "color-action-background-control-non-editable": "hsla(216, 13%, 53%, 0.08)",
        "color-action-background-control-normal": "hsl(0, 100%, 100%)",
        "color-action-background-control-placeholder": "hsl(0, 100%, 100%)",
        "color-action-background-control-primary": "hsl(205, 97%, 35%)",
        "color-action-background-control-read-only": "hsl(0, 100%, 100%)",
        "color-action-background-control-selected": "hsl(0, 100%, 100%)",
        "color-action-background-control-warning": "hsl(0, 100%, 100%)",
        "color-action-background-emphasis-active": "hsl(205, 97%, 35%)",
        "color-action-background-emphasis-disabled": "hsla(205, 97%, 35%, 0.24)",
        "color-action-background-emphasis-hover": "hsl(205, 97%, 35%)",
        "color-action-background-emphasis-normal": "hsl(205, 97%, 35%)",
        "color-action-background-emphasis-selected": "hsl(205, 97%, 35%)",
        "color-action-background-emphasis-visited": "hsl(205, 97%, 35%)",
        "color-action-background-focus": "hsl(205, 97%, 35%)",
        "color-action-background-focus-inverse": "hsl(0, 100%, 100%)",
        "color-action-background-on-off-disabled": "hsl(0, 100%, 100%)",
        "color-action-background-on-off-hover": "hsla(216, 13%, 53%, 0.16)",
        "color-action-background-on-off-normal": "hsl(0, 100%, 100%)",
        "color-action-background-on-off-read-only": "hsla(216, 13%, 53%, 0.08)",
        "color-action-background-on-off-selected": "hsl(329, 75%, 30%)",
        "color-action-background-on-off-selected-disabled": "hsla(329, 75%, 30%, 0.16)",
        "color-action-background-secondary-disabled": "hsla(216, 13%, 53%, 0.08)",
        "color-action-background-secondary-normal": "hsla(216, 13%, 53%, 0.08)",
        "color-action-background-secondary-selected": "hsla(329, 75%, 30%, 0.24)",
        "color-action-background-secondary-selected-disabled": "hsla(329, 75%, 30%, 0.08)",
        "color-action-background-standard-active": "hsl(212, 94%, 90%)",
        "color-action-background-standard-disabled": "hsla(216, 13%, 53%, 0.08)",
        "color-action-background-standard-hover": "hsla(216, 13%, 53%, 0.16)",
        "color-action-background-standard-normal": "hsla(216, 13%, 53%, 0.08)",
        "color-action-background-standard-selected": "hsla(216, 13%, 53%, 0.24)",
        "color-action-background-standard-selected-inactive": "hsla(216, 13%, 53%, 0.16)",
        "color-action-background-standard-visited": "hsl(219, 94%, 98%)",
        "color-action-background-subtle-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-background-subtle-hover": "hsla(216, 13%, 53%, 0.16)",
        "color-action-background-subtle-normal": "hsla(0, 100%, 100%, 0)",
        "color-action-background-subtle-selected": "hsla(216, 13%, 53%, 0.24)",
        "color-action-background-subtle-selected-inactive": "hsla(216, 13%, 53%, 0.16)",
        "color-action-border-bottom-control-alert": "hsl(360, 100%, 42%)",
        "color-action-border-bottom-control-hover": "hsl(216, 13%, 53%)",
        "color-action-border-bottom-control-normal": "hsl(216, 13%, 53%)",
        "color-action-border-bottom-control-selected": "hsl(205, 97%, 35%)",
        "color-action-border-bottom-control-warning": "hsl(40, 100%, 28%)",
        "color-action-border-control-alert": "hsl(360, 100%, 42%)",
        "color-action-border-control-disabled": "hsla(216, 13%, 53%, 0.32)",
        "color-action-border-control-hover": "hsl(216, 13%, 53%)",
        "color-action-border-control-normal": "hsl(216, 13%, 53%)",
        "color-action-border-control-placeholder": "hsl(216, 13%, 53%)",
        "color-action-border-control-read-only": "hsla(0, 100%, 100%, 0)",
        "color-action-border-control-selected": "hsl(205, 97%, 35%)",
        "color-action-border-control-warning": "hsl(40, 100%, 28%)",
        "color-action-border-emphasis-active": "hsl(205, 97%, 35%)",
        "color-action-border-emphasis-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-emphasis-hover": "hsl(205, 97%, 35%)",
        "color-action-border-emphasis-normal": "hsl(205, 97%, 35%)",
        "color-action-border-emphasis-selected": "hsl(205, 97%, 35%)",
        "color-action-border-emphasis-visited": "hsl(205, 97%, 35%)",
        "color-action-border-focus": "hsl(205, 97%, 35%)",
        "color-action-border-focus-inverse": "hsl(212, 0%, 100%)",
        "color-action-border-on-off-disabled": "hsla(216, 13%, 53%, 0.32)",
        "color-action-border-on-off-hover": "hsl(216, 13%, 53%)",
        "color-action-border-on-off-normal": "hsl(216, 13%, 53%)",
        "color-action-border-on-off-read-only": "hsl(216, 13%, 53%)",
        "color-action-border-on-off-selected": "hsl(329, 75%, 30%)",
        "color-action-border-on-off-selected-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-secondary-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-secondary-normal": "hsla(216, 13%, 53%, 0.24)",
        "color-action-border-secondary-selected": "hsl(329, 75%, 30%)",
        "color-action-border-secondary-selected-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-standard-active": "hsl(216, 13%, 53%)",
        "color-action-border-standard-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-standard-hover": "hsl(216, 13%, 53%)",
        "color-action-border-standard-normal": "hsl(216, 13%, 53%)",
        "color-action-border-standard-selected": "hsl(216, 13%, 53%)",
        "color-action-border-standard-selected-inactive": "hsla(0, 100%, 100%, 0)",
        "color-action-border-standard-visited": "hsl(216, 13%, 53%)",
        "color-action-border-subtle-disabled": "hsla(0, 100%, 100%, 0)",
        "color-action-border-subtle-hover": "hsla(0, 100%, 100%, 0)",
        "color-action-border-subtle-normal": "hsla(0, 100%, 100%, 0)",
        "color-action-border-subtle-selected": "hsla(0, 100%, 100%, 0)",
        "color-action-border-subtle-selected-inactive": "hsla(0, 100%, 100%, 0)",
        "color-action-focus": "hsl(205, 97%, 35%)",
        "color-action-icon-control-alert": "hsl(360, 100%, 42%)",
        "color-action-icon-control-disabled": "hsla(0, 0%, 0%, 0.32)",
        "color-action-icon-control-hover": "hsl(0, 0%, 0%)",
        "color-action-icon-control-normal": "hsl(0, 0%, 0%)",
        "color-action-icon-control-read-only": "hsl(0, 0%, 0%)",
        "color-action-icon-control-selected": "hsl(0, 0%, 0%)",
        "color-action-icon-control-warning": "hsl(40, 100%, 28%)",
        "color-action-icon-emphasis-active": "hsla(0, 100%, 100%, 0.6)",
        "color-action-icon-emphasis-disabled": "hsla(0, 100%, 100%, 0.64)",
        "color-action-icon-emphasis-hover": "hsl(0, 100%, 100%)",
        "color-action-icon-emphasis-normal": "hsl(0, 100%, 100%)",
        "color-action-icon-emphasis-selected": "hsla(0, 100%, 100%, 0.6)",
        "color-action-icon-emphasis-visited": "hsl(212, 0%, 100%)",
        "color-action-icon-on-off-disabled": "hsla(0, 0%, 0%, 0.32)",
        "color-action-icon-on-off-hover": "hsl(0, 0%, 0%)",
        "color-action-icon-on-off-normal": "hsl(0, 0%, 0%)",
        "color-action-icon-on-off-read-only": "hsl(0, 0%, 0%)",
        "color-action-icon-on-off-selected": "hsl(0, 100%, 100%)",
        "color-action-icon-on-off-selected-disabled": "hsla(0, 100%, 100%, 0.64)",
        "color-action-icon-standard-active": "hsl(0, 0%, 0%)",
        "color-action-icon-standard-disabled": "hsla(0, 0%, 0%, 0.32)",
        "color-action-icon-standard-hover": "hsl(0, 0%, 0%)",
        "color-action-icon-standard-normal": "hsl(0, 0%, 0%)",
        "color-action-icon-standard-selected": "hsl(0, 0%, 0%)",
        "color-action-icon-standard-selected-inactive": "hsl(0, 0%, 0%)",
        "color-action-icon-standard-visited": "hsl(0, 0%, 0%)",
        "color-action-icon-subtle-disabled": "hsla(0, 0%, 0%, 0.32)",
        "color-action-icon-subtle-hover": "hsl(0, 0%, 0%)",
        "color-action-icon-subtle-normal": "hsl(0, 0%, 0%)",
        "color-action-icon-subtle-selected": "hsl(0, 0%, 0%)",
        "color-action-icon-subtle-selected-inactive": "hsl(0, 0%, 0%)",
        "color-action-link-active": "hsl(0, 0%, 0%)",
        "color-action-link-hover": "hsl(0, 0%, 0%)",
        "color-action-link-normal": "hsl(0, 0%, 0%)",
        "color-action-link-visited": "hsl(0, 0%, 0%)",
        "color-action-text-control-active": "hsl(0, 0%, 0%)",
        "color-action-text-control-alert": "hsl(0, 0%, 0%)",
        "color-action-text-control-disabled": "hsla(0, 0%, 0%, 0.32)",
        "color-action-text-control-hover": "hsl(0, 0%, 0%)",
        "color-action-text-control-normal": "hsl(0, 0%, 0%)",
        "color-action-text-control-placeholder": "hsl(218, 13%, 46%)",
        "color-action-text-control-read-only": "hsl(0, 0%, 0%)",
        "color-action-text-control-selected": "hsl(0, 0%, 0%)",
        "color-action-text-control-warning": "hsl(0, 0%, 0%)",
        "color-action-text-emphasis-active": "hsla(0, 100%, 100%, 0.6)",
        "color-action-text-emphasis-disabled": "hsla(0, 100%, 100%, 0.64)",
        "color-action-text-emphasis-hover": "hsl(0, 100%, 100%)",
        "color-action-text-emphasis-normal": "hsl(0, 100%, 100%)",
        "color-action-text-emphasis-selected": "hsl(0, 100%, 100%)",
        "color-action-text-emphasis-visited": "hsl(212, 0%, 100%)",
        "color-action-text-on-off-disabled": "hsla(0, 0%, 0%, 0.32)",
        "color-action-text-on-off-hover": "hsl(0, 0%, 0%)",
        "color-action-text-on-off-normal": "hsl(0, 0%, 0%)",
        "color-action-text-on-off-read-only": "hsl(0, 0%, 0%)",
        "color-action-text-on-off-selected": "hsl(0, 100%, 100%)",
        "color-action-text-on-off-selected-disabled": "hsla(0, 100%, 100%, 0.64)",
        "color-action-text-secondary-disabled": "hsla(0, 0%, 0%, 0.32)",
        "color-action-text-secondary-normal": "hsl(0, 0%, 0%)",
        "color-action-text-secondary-selected": "hsl(329, 75%, 30%)",
        "color-action-text-secondary-selected-disabled": "hsla(329, 75%, 30%, 0.32)",
        "color-action-text-standard-active": "hsl(0, 0%, 0%)",
        "color-action-text-standard-disabled": "hsla(0, 0%, 0%, 0.32)",
        "color-action-text-standard-hover": "hsl(0, 0%, 0%)",
        "color-action-text-standard-normal": "hsl(0, 0%, 0%)",
        "color-action-text-standard-selected": "hsl(0, 0%, 0%)",
        "color-action-text-standard-selected-inactive": "hsl(0, 0%, 0%)",
        "color-action-text-standard-visited": "hsl(0, 0%, 0%)",
        "color-action-text-subtle-disabled": "hsla(0, 0%, 0%, 0.32)",
        "color-action-text-subtle-hover": "hsl(0, 0%, 0%)",
        "color-action-text-subtle-normal": "hsl(0, 0%, 0%)",
        "color-action-text-subtle-selected": "hsl(0, 0%, 0%)",
        "color-action-text-subtle-selected-inactive": "hsl(0, 0%, 0%)",
        "color-body-icon": "hsl(0, 0%, 0%)",
        "color-body-text": "hsl(0, 0%, 0%)",
        "color-container-background-0": "hsl(219, 0%, 100%)",
        "color-container-background-1": "hsl(219, 12%, 98%)",
        "color-container-background-2": "hsl(219, 12%, 96%)",
        "color-container-background-3": "hsl(205, 97%, 41%)",
        "color-container-border-4": "hsl(216, 13%, 88%)",
        "color-dataviz-graph1": "#33a3ff",
        "color-dataviz-graph2": "#fc3",
        "color-dataviz-graph3": "#9470ff",
        "color-dataviz-graph4": "#ff8324",
        "color-dataviz-graph5": "#29d1d1",
        "color-dataviz-graph6": "#dc5656",
        "color-dataviz-graph7": "#15b77b",
        "color-dataviz-graph8": "#ff70bc",
        "color-dataviz-kpi1": "#dd5757",
        "color-dataviz-kpi3": "#ffcc32",
        "color-dataviz-kpi5": "#15b57b",
        "color-display-icon": "hsl(0, 0%, 0%)",
        "color-display-text": "hsl(0, 0%, 0%)",
        "color-heading-icon": "hsl(0, 0%, 0%)",
        "color-heading-text": "hsl(0, 0%, 0%)",
        "color-highlight-text": "hsl(205, 97%, 35%)",
        "color-highlight-text-inverse": "hsl(0, 100%, 100%)",
        "color-icon-neutral": "hsl(0, 0%, 0%)",
        "color-icon-primary": "hsl(205, 97%, 35%)",
        "color-icon-secondary": "hsl(329, 75%, 30%)",
        "color-label-text": "hsl(218, 13%, 46%)",
        "color-neutral": "hsl(216, 13%, 53%)",
        "color-primary": "hsl(205, 97%, 35%)",
        "color-secondary": "hsl(329, 75%, 30%)",
        "color-status-alert": "hsl(360, 100%, 42%)",
        "color-status-background-alert": "hsl(0, 100%, 100%)",
        "color-status-background-info": "hsl(0, 100%, 100%)",
        "color-status-background-neutral": "hsl(219, 12%, 98%)",
        "color-status-background-success": "hsl(0, 100%, 100%)",
        "color-status-background-warning": "hsl(0, 100%, 100%)",
        "color-status-border-alert": "hsl(360, 100%, 42%)",
        "color-status-border-info": "hsl(205, 99%, 37%)",
        "color-status-border-neutral": "hsl(219, 12%, 48%)",
        "color-status-border-success": "hsl(124, 85%, 26%)",
        "color-status-border-warning": "hsl(40, 100%, 28%)",
        "color-status-icon-alert": "hsl(360, 100%, 42%)",
        "color-status-icon-info": "hsl(205, 99%, 37%)",
        "color-status-icon-neutral": "hsl(219, 12%, 48%)",
        "color-status-icon-success": "hsl(124, 85%, 26%)",
        "color-status-icon-warning": "hsl(40, 100%, 28%)",
        "color-status-info": "hsl(205, 99%, 37%)",
        "color-status-neutral": "hsl(216, 13%, 45%)",
        "color-status-success": "hsl(124, 85%, 26%)",
        "color-status-text-alert": "hsl(360, 100%, 42%)",
        "color-status-text-info": "hsl(205, 99%, 37%)",
        "color-status-text-neutral": "hsl(219, 0%, 0%)",
        "color-status-text-success": "hsl(124, 85%, 26%)",
        "color-status-text-warning": "hsl(40, 100%, 28%)",
        "color-status-warning": "hsl(40, 100%, 28%)",
        "color-syntax-text-01": "hsl(223, 11%, 12%)",
        "color-syntax-text-02": "hsl(219, 12%, 48%)",
        "color-syntax-text-03": "hsl(25, 56%, 44%)",
        "color-syntax-text-04": "hsl(7, 44%, 39%)",
        "color-syntax-text-05": "hsl(267, 35%, 44%)",
        "color-syntax-text-06": "hsl(212, 58%, 49%)",
        "color-syntax-text-07": "hsl(212, 57%, 31%)",
        "color-syntax-text-08": "hsl(169, 37%, 37%)",
        "color-syntax-text-09": "hsl(79, 51%, 33%)",
        "color-syntax-text-attribute-name": "hsl(212, 57%, 31%)",
        "color-syntax-text-attribute-value": "hsl(7, 44%, 39%)",
        "color-syntax-text-boolean": "hsl(267, 35%, 44%)",
        "color-syntax-text-character-constant": "hsl(169, 37%, 37%)",
        "color-syntax-text-class-name": "hsl(169, 37%, 37%)",
        "color-syntax-text-comment": "hsl(79, 51%, 33%)",
        "color-syntax-text-control": "hsl(267, 35%, 44%)",
        "color-syntax-text-data": "hsl(25, 56%, 44%)",
        "color-syntax-text-declaration": "hsl(212, 58%, 49%)",
        "color-syntax-text-default": "hsl(223, 11%, 12%)",
        "color-syntax-text-function": "hsl(267, 35%, 44%)",
        "color-syntax-text-identifier": "hsl(223, 11%, 12%)",
        "color-syntax-text-keyword": "hsl(212, 58%, 49%)",
        "color-syntax-text-namespace": "hsl(169, 37%, 37%)",
        "color-syntax-text-normal": "hsl(223, 11%, 12%)",
        "color-syntax-text-numeric-constant": "hsl(169, 37%, 37%)",
        "color-syntax-text-operator": "hsl(212, 57%, 31%)",
        "color-syntax-text-proc-name": "hsl(212, 57%, 31%)",
        "color-syntax-text-property": "hsl(212, 58%, 49%)",
        "color-syntax-text-punctuation": "hsl(219, 12%, 48%)",
        "color-syntax-text-punctuation-brackets": "hsl(219, 12%, 48%)",
        "color-syntax-text-section": "hsl(212, 57%, 31%)",
        "color-syntax-text-separator": "hsl(223, 11%, 12%)",
        "color-syntax-text-source": "hsl(212, 58%, 49%)",
        "color-syntax-text-storage-type": "hsl(212, 58%, 49%)",
        "color-syntax-text-string": "hsl(7, 44%, 39%)",
        "color-syntax-text-tag": "hsl(212, 58%, 49%)",
        "color-syntax-text-variable": "hsl(212, 57%, 31%)",
        "color-text-neutral": "hsl(0, 0%, 0%)",
        "color-text-neutral-inverse": "hsl(0, 100%, 100%)",
        "color-text-primary": "hsl(205, 97%, 35%)",
        "color-text-primary-inverse": "hsl(0, 0%, 100%)",
        "color-text-secondary": "hsl(329, 75%, 30%)",
        "color-thumbnail-fill-1": "hsl(212, 94%, 94%)",
        "color-thumbnail-fill-2": "hsl(212, 94%, 94%)",
        "color-thumbnail-fill-3": "hsl(212, 94%, 62%)",
        "color-thumbnail-fill-4": "hsl(212, 94%, 42%)",
        "color-zero-state-base-fill-1": "hsl(219, 0%, 100%)",
        "color-zero-state-base-fill-2": "hsl(219, 12%, 79%)",
        "color-zero-state-base-fill-3": "hsl(219, 12%, 84%)",
        "color-zero-state-modifier-fill-1": "hsl(219, 12%, 96%)",
        "color-zero-state-modifier-fill-2": "hsl(212, 94%, 42%)",
        "color-zero-state-modifier-fill-3": "hsl(212, 94%, 78%)",
        "color-zero-state-modifier-fill-4": "hsl(219, 12%, 92%)",
        "color-zero-state-modifier-fill-5": "hsl(219, 12%, 64%)",
        "duration-100": "100ms",
        "duration-1000": "1s",
        "duration-200": "200ms",
        "duration-250": "250ms",
        "duration-300": "300ms",
        "duration-400": "400ms",
        "duration-450": "450ms",
        "duration-700": "700ms",
        "ease-in": "cubic-bezier(0, 0.5, 0.2, 1)",
        "ease-in-out": "cubic-bezier(0.5, 0, 0.2, 1)",
        "ease-out": "cubic-bezier(0.5, 0, 0.8, 1)",
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
        "font-family-secondary": "'AvenirNext', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
        "font-size-base-text": "14px",
        "font-size-base-text-l": "18px",
        "font-size-base-text-m": "16px",
        "font-size-base-text-s": "14px",
        "font-size-body-text-l": "1rem",
        "font-size-body-text-m": "0.875rem",
        "font-size-body-text-s": "0.75rem",
        "font-size-body-text-xl": "1.125rem",
        "font-size-body-text-xs": "0.6875rem",
        "font-size-body-text-xxl": "1.25rem",
        "font-size-body-text-xxs": "0.625rem",
        "font-size-body-text-xxxl": "1.375rem",
        "font-size-body-text-xxxs": "0.5625rem",
        "font-size-body-text-xxxxl": "1.5625rem",
        "font-size-display-text-1": "4.5625rem",
        "font-size-display-text-2": "3.625rem",
        "font-size-display-text-3": "2.5rem",
        "font-size-heading-text-1": "1.375rem",
        "font-size-heading-text-2": "1.25rem",
        "font-size-heading-text-3": "1.125rem",
        "font-size-heading-text-4": "1rem",
        "font-size-heading-text-5": "0.875rem",
        "font-size-heading-text-6": "0.75rem",
        "font-size-ratio": "1.125",
        "font-size-ratio-major-second": "1.125",
        "font-size-ratio-major-third": "1.25",
        "font-size-ratio-minor-third": "1.2",
        "font-space-letter-spacing": "normal",
        "font-space-letter-spacing-l": "2px",
        "font-space-letter-spacing-m": "normal",
        "font-space-letter-spacing-s": "1px",
        "font-space-line-height": "1.4",
        "font-space-line-height-l": "1.6",
        "font-space-line-height-m": "1.5",
        "font-space-line-height-s": "1.4",
        "font-space-word": "normal",
        "font-space-word-l": "2px",
        "font-space-word-m": "normal",
        "font-space-word-s": "1px",
        "font-style-expression": "normal",
        "font-style-expression-italic": "italic",
        "font-style-expression-normal": "normal",
        "font-style-expression-oblique": "oblique",
        "font-style-overflow-wrap": "anywhere",
        "font-style-overflow-wrap-anywhere": "anywhere",
        "font-style-overflow-wrap-break-word": "break-word",
        "font-style-overflow-wrap-normal": "normal",
        "font-style-text-transform": "none",
        "font-style-text-transform-capitalize": "capitalize",
        "font-style-text-transform-lowercase": "lowercase",
        "font-style-text-transform-none": "none",
        "font-style-text-transform-uppercase": "uppercase",
        "font-style-weight-300": "300",
        "font-style-weight-400": "400",
        "font-style-weight-500": "500",
        "font-style-weight-600": "600",
        "font-style-weight-700": "700",
        "font-style-word-break": "break-all",
        "font-style-word-break-break-all": "break-all",
        "font-style-word-break-break-word": "break-word",
        "font-style-word-break-keep-all": "keep-all",
        "font-style-word-break-normal": "normal",
        "shadow-depth-l": "0 8px 12px rgba(0, 0, 0, 0.04), 0 16px 24px rgba(0, 0, 0, 0.08)",
        "shadow-depth-m": "0 2px 4px rgba(0, 0, 0, 0.04), 0 8px 16px rgba(0, 0, 0, 0.08)",
        "shadow-depth-s": "0 2px 2px rgba(0, 0, 0, 0.04), 0 4px 8px rgba(0, 0, 0, 0.08)",
        "shadow-depth-xl": "0 16px 24px rgba(0, 0, 0, 0.04), 0 32px 48px rgba(0, 0, 0, 0.08)",
        "shadow-depth-xs": "0 1px 2px rgba(0, 0, 0, 0.04), 0 2px 4px rgba(0, 0, 0, 0.08)",
        "size-action-border-width-focus": "1px",
        "size-border-radius-full": "50%",
        "size-border-radius-l": "24px",
        "size-border-radius-m": "16px",
        "size-border-radius-s": "8px",
        "size-border-radius-xs": "4px",
        "size-border-radius-xxs": "2px",
        "size-border-width-l": "3px",
        "size-border-width-m": "2px",
        "size-border-width-null": "0",
        "size-border-width-s": "1px",
        "size-container-l": "400px",
        "size-container-m": "320px",
        "size-container-null": "0",
        "size-container-s": "240px",
        "size-container-xl": "640px",
        "size-container-xs": "192px",
        "size-container-xxl": "960px",
        "size-container-xxs": "96px",
        "size-icon-l": "1rem",
        "size-icon-m": "0.875rem",
        "size-icon-s": "0.75rem",
        "size-icon-xl": "1.125rem",
        "size-icon-xs": "0.75rem",
        "size-icon-xxl": "1.25rem",
        "size-icon-xxs": "0.75rem",
        "size-icon-xxxl": "1.375rem",
        "size-icon-xxxs": "0.75rem",
        "size-icon-xxxxl": "1.5625rem",
        "size-outline-width-l": "3px",
        "size-outline-width-m": "2px",
        "size-outline-width-s": "1px",
        "size-outline-width-xl": "4px",
        "size-zero-state-border-width": "0",
        "space-base-l": "1.5rem",
        "space-base-m": "1rem",
        "space-base-null": "0",
        "space-base-s": "0.5rem",
        "space-base-size": "1rem",
        "space-base-xl": "2rem",
        "space-base-xs": "0.25rem",
        "space-base-xxl": "2.5rem",
        "space-base-xxs": "0.125rem",
        "space-base-xxxl": "3rem",
        "space-base-xxxxl": "3.5rem",
        "space-base-xxxxxl": "4rem",
        "space-block-l": "1.5rem",
        "space-block-m": "1rem",
        "space-block-s": "0.5rem",
        "space-block-xl": "2rem",
        "space-block-xs": "0.25rem",
        "space-block-xxl": "2.5rem",
        "space-block-xxs": "0.125rem",
        "space-block-xxxl": "3rem",
        "space-block-xxxxl": "3.5rem",
        "space-block-xxxxxl": "4rem",
        "space-inline-l": "1.5rem",
        "space-inline-m": "1rem",
        "space-inline-s": "0.5rem",
        "space-inline-xl": "2rem",
        "space-inline-xs": "0.25rem",
        "space-inline-xxl": "2.5rem",
        "space-inline-xxs": "0.125rem",
        "space-inline-xxxl": "3rem",
        "space-inline-xxxxl": "3.5rem",
        "space-inline-xxxxxl": "4rem",
        "space-squish-l": "0.75rem 1.5rem",
        "space-squish-m": "0.5rem 1rem",
        "space-squish-s": "0.25rem 0.5rem",
        "space-squish-xl": "1rem 2rem",
        "space-squish-xs": "0.125rem 0.25rem",
        "space-squish-xxl": "1.25rem 2.5rem",
        "space-squish-xxs": "0.0625rem 0.125rem",
        "space-stretch-l": "1.5rem 0.75rem",
        "space-stretch-m": "1rem 0.5rem",
        "space-stretch-s": "0.5rem 0.25rem",
        "space-stretch-xs": "0.25rem 0.125rem",
        "space-stretch-xxs": "0.125rem 0.0625rem",
        "style-action-border-focus": "dotted"
    }
};

const hS = {
    name: "taiwanese",
    selectors: [ ":lang(zh-tw)", ":lang(zh-hant)" ],
    tokens: {
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', '微軟正黑體', 'Microsoft JhengHei', '黑體-繁', 'Heiti TC', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-family-secondary": "'AvenirNext', '微軟正黑體', 'Microsoft JhengHei', '黑體-繁', 'Heiti TC', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-size-base-text": "14px",
        "font-size-base-text-l": "18px",
        "font-size-base-text-m": "16px",
        "font-size-base-text-s": "14px",
        "font-size-body-text-l": "1rem",
        "font-size-body-text-m": "0.9375rem",
        "font-size-body-text-s": "0.8125rem",
        "font-size-body-text-xl": "1.125rem",
        "font-size-body-text-xs": "0.75rem",
        "font-size-body-text-xxl": "1.3125rem",
        "font-size-body-text-xxs": "0.625rem",
        "font-size-body-text-xxxl": "1.4375rem",
        "font-size-body-text-xxxs": "0.5625rem",
        "font-size-body-text-xxxxl": "1.625rem",
        "font-size-display-text-1": "6.75rem",
        "font-size-display-text-2": "5.3125rem",
        "font-size-display-text-3": "4.1875rem",
        "font-size-heading-text-1": "1.4375rem",
        "font-size-heading-text-2": "1.3125rem",
        "font-size-heading-text-3": "1.125rem",
        "font-size-heading-text-4": "1rem",
        "font-size-heading-text-5": "0.9375rem",
        "font-size-heading-text-6": "0.8125rem",
        "font-space-line-height": "1.5",
        "font-space-line-height-m": "1.5",
        "font-style-expression-italic": "normal",
        "font-style-weight-300": "400",
        "size-icon-l": "1rem",
        "size-icon-m": "0.9375rem",
        "size-icon-s": "0.8125rem",
        "size-icon-xl": "1.125rem",
        "size-icon-xs": "0.8125rem",
        "size-icon-xxl": "1.3125rem",
        "size-icon-xxs": "0.8125rem",
        "size-icon-xxxl": "1.4375rem",
        "size-icon-xxxs": "0.8125rem",
        "size-icon-xxxxl": "1.625rem"
    }
};

const bS = {
    name: "thai",
    selectors: [ ":lang(th)" ],
    tokens: {
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', 'Thonburi', 'Leelawadee UI', 'TH Sarabun New', 'Cordia New', Roboto, Noto, 'Noto Sans Thai', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-family-secondary": "'AvenirNext', 'Thonburi', 'Leelawadee UI', 'TH Sarabun New', 'Cordia New', Roboto, Noto, 'Noto Sans Thai', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-space-line-height": "1.5",
        "font-space-line-height-m": "1.5",
        "font-style-expression-italic": "normal",
        "font-style-weight-300": "400"
    }
};

const vS = {
    name: "vietnamese",
    selectors: [ ":lang(vi)", ":lang(vi-VN)" ],
    tokens: {
        "font-family-monospace": "Consolas, Menlo, 'Lucida Console', Courier, Monaco, monospace",
        "font-family-primary": "'AvenirNext', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        "font-family-secondary": "'AvenirNext', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"
    }
};

const yS = {
    duration: {
        standard: "100ms",
        enter: {
            s: "250ms",
            m: "300ms",
            l: "450ms"
        },
        exit: {
            s: "200ms",
            m: "250ms",
            l: "400ms"
        },
        spin: "700ms"
    },
    timingFunction: {
        standard: "cubic-bezier(0.5, 0, 0.2, 1)",
        enter: {
            m: "cubic-bezier(0, 0.5, 0.2, 1)"
        },
        exit: {
            m: "cubic-bezier(0.5, 0, 0.8, 1)"
        }
    }
};

const xS = (e, t = 0, o = 0, n = 0) => {
    const a = e => {
        const t = e.lightness + e.saturation * Math.min(e.lightness, 1 - e.lightness);
        const o = t === 0 ? 0 : 2 * (1 - e.lightness / t);
        return {
            hue: e.hue,
            saturation: o,
            value: t
        };
    };
    const r = e => {
        const t = e.value - e.value * e.saturation / 2;
        const o = t === 0 || t === 1 ? 0 : (e.value - t) / Math.min(t, 1 - t);
        return {
            hue: e.hue,
            saturation: Math.round(o * 100),
            lightness: Math.round(t * 100)
        };
    };
    const s = Fe(e);
    const i = a(s);
    const l = r({
        hue: Math.max(0, Math.min(360, i.hue + t)),
        saturation: Math.max(0, Math.min(1, i.saturation + o)),
        value: Math.max(0, Math.min(1, i.value + n))
    });
    return `hsl(${Math.round(l.hue)}, ${Math.round(l.saturation)}%, ${Math.round(l.lightness)}%)`;
};

function SS(e, t) {
    if (e < -1 || e > 1) {
        throw new Error("Ratio must be between -1 and 1");
    }
    const o = Fe(t);
    const n = o.lightness;
    if (e < 0) {
        o.lightness = n + e * n;
    } else {
        o.lightness = n + e * (1 - n);
    }
    return Ue(o);
}

function wS(e, t) {
    switch (t) {
      case "high-contrast":
        return xS(e, 0, 0, .12);

      case "dark":
        return xS(e, 0, 0, .32);

      default:
        return xS(e, 0, 0, -.22);
    }
}

const CS = e => e.colors.colorNeutral;

const ES = e => e.colors.colorStatusNeutral;

const IS = e => e.colors.colorPrimary;

const _S = e => e.colors.colorSecondary;

const DS = e => e.colors.colorAlert;

const LS = e => e.colors.colorWarning;

const TS = e => e.colors.colorSuccess;

const RS = e => e.colors.colorInfo;

const kS = e => e.colors.colorUiLight;

const AS = e => e.colors.colorUiMedium;

const MS = e => e.colors.colorUiDark;

const NS = e => e.colors.colorUiBorder;

const OS = e => e.colors.colorUiPop;

const PS = e => e.colors.colorTextDefault;

const BS = e => e.colors.colorTextLabel;

const zS = e => e.colors.colorTextInverse;

const FS = e => e.colors.colorTextPrimary;

const jS = e => e.colors.colorTextSecondary;

const VS = e => e.colors.colorTextPop;

const HS = e => e.colors.colorGraph1;

const US = e => e.colors.colorGraph2;

const GS = e => e.colors.colorGraph3;

const KS = e => e.colors.colorGraph4;

const WS = e => e.colors.colorGraph5;

const $S = e => e.colors.colorGraph6;

const YS = e => e.colors.colorGraph7;

const qS = e => e.colors.colorGraph8;

const XS = e => wS(e.colors.colorGraph1, e.baseThemeName);

const ZS = e => wS(e.colors.colorGraph2, e.baseThemeName);

const JS = e => wS(e.colors.colorGraph3, e.baseThemeName);

const QS = e => wS(e.colors.colorGraph4, e.baseThemeName);

const ew = e => wS(e.colors.colorGraph5, e.baseThemeName);

const tw = e => wS(e.colors.colorGraph6, e.baseThemeName);

const ow = e => wS(e.colors.colorGraph7, e.baseThemeName);

const nw = e => wS(e.colors.colorGraph8, e.baseThemeName);

const aw = e => e.colors.colorKPI1;

const rw = e => e.colors.colorKPI3;

const sw = e => e.colors.colorKPI5;

const iw = e => e.colors.neutral;

const lw = e => e.colors.primary;

const cw = e => e.colors.secondary;

const dw = e => e.colors.alert;

const uw = e => e.colors.warning;

const mw = e => e.colors.success;

const pw = e => e.colors.information;

const fw = () => "#000";

const gw = Qe(Xv, iw, ((e, t) => e ? t : "#fff"));

const hw = Qe(gw, (e => He(e, .8)));

const bw = Qe(gw, (e => He(e, .6)));

const vw = Qe(gw, (e => He(e, .3)));

const yw = Qe(gw, (e => He(e, .2)));

const xw = Qe(gw, (e => He(e, .15)));

const Sw = Qe(gw, (e => He(e, .1)));

const ww = Qe(fw, (e => He(e, .6)));

const Cw = 1.6949;

const Ew = 2.1277;

const Iw = 1.4493;

const _w = 1.7544;

const Dw = 1.4085;

const Lw = 1.3699;

const Tw = 1.5873;

const Rw = 2.5;

const kw = 1.9231;

const Aw = iw;

const Mw = Aw;

const Nw = Qe(Aw, (e => SS(.45 * Ew, e)));

const Ow = Qe(Aw, (e => SS(.43 * Ew, e)));

const Pw = Qe(Aw, (e => SS(.4 * Ew, e)));

const Bw = Qe(Aw, (e => SS(.3 * Ew, e)));

const zw = Qe(Aw, (e => SS(.2 * Ew, e)));

const Fw = Qe(Aw, (e => SS(-.08 * kw, e)));

const jw = Qe(Aw, (e => SS(-.25 * kw, e)));

const Vw = Qe(Aw, (e => SS(-.33 * kw, e)));

const Hw = Qe(Aw, (e => SS(-.4 * kw, e)));

const Uw = Qe(Aw, (e => SS(-.5 * kw, e)));

const Gw = lw;

const Kw = Gw;

const Ww = Qe(Gw, (e => SS(.57 * Cw, e)));

const $w = Qe(Gw, (e => SS(.55 * Cw, e)));

const Yw = Qe(Gw, (e => SS(.35 * Cw, e)));

const qw = Qe(Gw, (e => SS(.22 * Cw, e)));

const Xw = Qe(Gw, (e => SS(.11 * Cw, e)));

const Zw = Qe(Gw, Zv, ((e, t) => {
    let o;
    switch (t) {
      case "2019":
        o = -.14;
        break;

      case "latest":
        o = -.25;
        break;
    }
    return SS(o * Rw, e);
}));

const Jw = Qe(Gw, Zv, ((e, t) => {
    let o;
    switch (t) {
      case "2019":
        o = -.23;
        break;

      case "latest":
        o = -.28;
        break;
    }
    return SS(o * Rw, e);
}));

const Qw = Qe(Gw, Zv, ((e, t) => {
    let o;
    switch (t) {
      case "2019":
        o = -.3;
        break;

      case "latest":
        o = -.32;
        break;
    }
    return SS(o * Rw, e);
}));

const eC = cw;

const tC = eC;

const oC = Qe(eC, (e => SS(.13 * Iw, e)));

const nC = Qe(eC, (e => SS(.59 * Iw, e)));

const aC = dw;

const rC = aC;

const sC = Qe(aC, (e => SS(.23 * _w, e)));

const iC = Qe(aC, (e => SS(.38 * _w, e)));

const lC = Qe(aC, (e => SS(.54 * _w, e)));

const cC = uw;

const dC = cC;

const uC = Qe(cC, (e => SS(.3 * Dw, e)));

const mC = Qe(cC, (e => SS(.48 * Dw, e)));

const pC = Qe(cC, (e => SS(.67 * Dw, e)));

const fC = mw;

const gC = fC;

const hC = Qe(fC, (e => SS(.1 * Lw, e)));

const bC = Qe(fC, (e => SS(.51 * Lw, e)));

const vC = Qe(fC, (e => SS(.69 * Lw, e)));

const yC = pw;

const xC = yC;

const SC = Qe(yC, (e => SS(.22 * Tw, e)));

const wC = Qe(yC, (e => SS(.4 * Tw, e)));

const CC = Qe(yC, (e => SS(.58 * Tw, e)));

const EC = () => "#14344C";

const IC = () => "#00FFFF";

const _C = () => "#00A8A8";

const DC = () => "#004D4D";

const LC = () => "#F16822";

const TC = LC;

const RC = () => "#EDE833";

const kC = () => "#22A7F0";

const AC = {
    colorNeutral: CS,
    colorStatusNeutral: ES,
    colorPrimary: IS,
    colorSecondary: _S,
    colorAlert: DS,
    colorWarning: LS,
    colorSuccess: TS,
    colorInfo: RS,
    colorUiLight: kS,
    colorUiMedium: AS,
    colorUiDark: MS,
    colorUiBorder: NS,
    colorUiPop: OS,
    colorTextDefault: PS,
    colorTextLabel: BS,
    colorTextInverse: zS,
    colorTextPrimary: FS,
    colorTextSecondary: jS,
    colorTextPop: VS,
    colorGraph1: HS,
    colorGraph2: US,
    colorGraph3: GS,
    colorGraph4: KS,
    colorGraph5: WS,
    colorGraph6: $S,
    colorGraph7: YS,
    colorGraph8: qS,
    colorGraphAlt1: XS,
    colorGraphAlt2: ZS,
    colorGraphAlt3: JS,
    colorGraphAlt4: QS,
    colorGraphAlt5: ew,
    colorGraphAlt6: tw,
    colorGraphAlt7: ow,
    colorGraphAlt8: nw,
    colorKPI1: aw,
    colorKPI3: rw,
    colorKPI5: sw,
    white: gw,
    black: fw,
    neutral: iw,
    primary: lw,
    secondary: cw,
    alert: dw,
    warning: uw,
    success: mw,
    informational: pw,
    white80: hw,
    white60: bw,
    white30: vw,
    white20: yw,
    white15: xw,
    white10: Sw,
    black60: ww,
    n: Aw,
    n0: Mw,
    n5: Nw,
    n4: Ow,
    n3: Pw,
    n2: Bw,
    n1: zw,
    n_1: Fw,
    n_2: jw,
    n_3: Vw,
    n_4: Hw,
    n_5: Uw,
    p: Gw,
    p0: Kw,
    p5: Ww,
    p4: $w,
    p3: Yw,
    p2: qw,
    p1: Xw,
    p_1: Zw,
    p_2: Jw,
    p_3: Qw,
    e: eC,
    e0: tC,
    e1: oC,
    e2: nC,
    a: aC,
    a0: rC,
    a1: sC,
    a1_5: iC,
    a2: lC,
    w: cC,
    w0: dC,
    w1: uC,
    w1_5: mC,
    w2: pC,
    s: fC,
    s0: gC,
    s1: hC,
    s1_5: bC,
    s2: vC,
    i: yC,
    i0: xC,
    i1: SC,
    i1_5: wC,
    i2: CC,
    hcPrimaryHover: EC,
    hcStandardSelected: IC,
    hcStandardSelectedInactive: _C,
    hcStandardHover: DC,
    hcDisabled: LC,
    hcPlaceholder: TC,
    hcFocus: RC,
    hcBusy: kC
};

const MC = {
    page(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                bg: AC.black(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                bg: AC.p_2(e)
            };

          case "high-contrast":
            return {
                bg: AC.black(e)
            };

          default:
            return {
                bg: AC.n4(e)
            };
        }
    },
    modal(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                bg: AC.black(e)
            };
        }
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                bg: AC.black60(e)
            };

          default:
            return {
                bg: Ve(.4, AC.white(e))
            };
        }
    },
    panes(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                bg: AC.black(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                bg: AC.p_3(e)
            };

          case "high-contrast":
            return {
                bg: AC.black(e)
            };

          default:
            return {
                bg: AC.white(e)
            };
        }
    }
};

const NC = {
    standard(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                bg: AC.black(e),
                bd: AC.white(e),
                sh: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                bg: AC.p_3(e),
                bd: Ve(.85, AC.white(e)),
                sh: "none"
            };

          case "high-contrast":
            return {
                bg: AC.black(e),
                bd: AC.white(e),
                sh: "none"
            };

          default:
            return {
                bg: AC.white(e),
                bd: AC.n3(e),
                sh: "none"
            };
        }
    },
    small(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                bg: AC.black(e),
                bd: AC.white(e),
                sh: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                bg: AC.p_3(e),
                bd: "transparent",
                sh: "0px 1px 8px 0px rgba(252,252,252,0.2)"
            };

          case "high-contrast":
            return {
                bg: AC.black(e),
                bd: AC.n2(e),
                sh: "0px 1px 8px 0px rgba(0,0,0,1.0)"
            };

          default:
            return {
                bg: AC.white(e),
                bd: "transparent",
                sh: "0px 1px 4px 0px rgba(0,0,0,0.2)"
            };
        }
    },
    medium(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                bg: AC.black(e),
                bd: AC.white(e),
                sh: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                bg: AC.p_2(e),
                bd: "transparent",
                sh: "0px 1px 16px 0px rgba(0,0,0,0.6)"
            };

          case "high-contrast":
            return {
                bg: AC.black(e),
                bd: AC.n2(e),
                sh: "0px 1px 16px 0px rgba(0,0,0,1.0)"
            };

          default:
            return {
                bg: AC.white(e),
                bd: "transparent",
                sh: "0px 1px 16px 0px rgba(0,0,0,0.2)"
            };
        }
    },
    large(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                bg: AC.black(e),
                bd: AC.white(e),
                sh: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                bg: AC.p_3(e),
                bd: "transparent",
                sh: "0px 1px 32px 0px rgba(0,0,0,0.6)"
            };

          case "high-contrast":
            return {
                bg: AC.black(e),
                bd: AC.n2(e),
                sh: "0px 1px 32px 0px rgba(0,0,0,1.0)"
            };

          default:
            return {
                bg: AC.white(e),
                bd: "transparent",
                sh: "0px 1px 32px 0px rgba(0,0,0,0.2)"
            };
        }
    }
};

const OC = {
    standard(e) {
        return {
            bg: AC.colorUiLight(e),
            bd: AC.colorUiBorder(e),
            sh: "none"
        };
    },
    small(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                bg: AC.colorUiDark(e),
                bd: "transparent",
                sh: "0px 1px 8px 0px rgba(0,0,0,0.8)"
            };

          case "high-contrast":
            return {
                bg: AC.colorUiLight(e),
                bd: AC.colorUiBorder(e),
                sh: "0px 1px 8px 0px rgba(0,0,0,1.0)"
            };

          default:
            return {
                bg: AC.colorUiLight(e),
                bd: "transparent",
                sh: "0px 1px 4px 0px rgba(0,0,0,0.2)"
            };
        }
    },
    medium(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                bg: AC.colorUiLight(e),
                bd: "transparent",
                sh: "0px 1px 16px 0px rgba(0,0,0,0.6)"
            };

          case "high-contrast":
            return {
                bg: AC.colorUiLight(e),
                bd: AC.colorUiBorder(e),
                sh: "0px 1px 16px 0px rgba(0,0,0,1.0)"
            };

          default:
            return {
                bg: AC.colorUiLight(e),
                bd: "transparent",
                sh: "0px 1px 16px 0px rgba(0,0,0,0.2)"
            };
        }
    },
    large(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                bg: AC.colorUiLight(e),
                bd: "transparent",
                sh: "0px 1px 32px 0px rgba(0,0,0,0.6)"
            };

          case "high-contrast":
            return {
                bg: AC.colorUiLight(e),
                bd: AC.colorUiBorder(e),
                sh: "0px 1px 32px 0px rgba(0,0,0,1.0)"
            };

          default:
            return {
                bg: AC.colorUiLight(e),
                bd: "transparent",
                sh: "0px 1px 32px 0px rgba(0,0,0,0.2)"
            };
        }
    }
};

const PC = {
    page(e) {
        return {
            bg: AC.colorUiDark(e)
        };
    },
    modal(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                bg: Jv(AC.colorUiLight(e), .4)
            };

          case "high-contrast":
            return {
                bg: AC.colorUiLight(e)
            };

          default:
            return {
                bg: Jv(AC.colorUiLight(e), .4)
            };
        }
    },
    panes(e) {
        return {
            bg: AC.colorUiLight(e)
        };
    }
};

const BC = {
    none: 0,
    xxs: .125,
    xs: .25,
    s: .5,
    m: 1,
    l: 1.5,
    xl: 2,
    xxl: 2.5
};

const zC = Object.keys(BC);

const FC = zC.reduce(((e, t) => {
    e[t] = `${BC[t]}rem`;
    return e;
}), {});

const jC = zC.reduce(((e, t) => {
    e[t] = `${BC[t]}rem`;
    return e;
}), {});

const VC = zC.reduce(((e, t) => {
    e[t] = `${BC[t]}rem`;
    return e;
}), {});

const HC = zC.reduce(((e, t) => {
    e[t] = {
        padding: `${.5 * BC[t]}rem ${FC[t]}`
    };
    return e;
}), {});

const UC = zC.reduce(((e, t) => {
    e[t] = {
        padding: `${FC[t]} ${.5 * BC[t]}rem`
    };
    return e;
}), {});

const GC = {
    core: FC,
    block: jC,
    inline: VC,
    insetSquish: HC,
    insetStretch: UC,
    size: {
        none: "0",
        xxs: "96px",
        xs: "192px",
        s: "240px",
        m: "320px",
        l: "400px",
        xl: "640px",
        xxl: "960px"
    }
};

const KC = {
    onLightBg(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                bd: AC.hcFocus(e),
                bdStyle: "dotted",
                bdWidth: "5px"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                bd: AC.p1(e),
                bdStyle: "dotted",
                bdWidth: "1px"
            };

          case "high-contrast":
            return {
                bd: AC.w1_5(e),
                bdStyle: "dotted",
                bdWidth: "5px"
            };

          default:
            return {
                bd: AC.p_1(e),
                bdStyle: "dotted",
                bdWidth: "1px"
            };
        }
    },
    default(e) {
        return this.onLightBg(e);
    },
    onDarkBg(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                bd: AC.p1(e),
                bdStyle: "dotted",
                bdWidth: "1px"
            };

          case "high-contrast":
            return {
                bd: AC.black(e),
                bdStyle: "dotted",
                bdWidth: "5px"
            };

          default:
            return {
                bd: AC.white(e),
                bdStyle: "dotted",
                bdWidth: "1px"
            };
        }
    },
    onRightClick(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                bd: AC.hcFocus(e),
                bdStyle: "dotted",
                bdWidth: "5px"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                bd: AC.p1(e),
                bdStyle: "solid",
                bdWidth: "1px"
            };

          case "high-contrast":
            return {
                bd: AC.w1_5(e),
                bdStyle: "solid",
                bdWidth: "5px"
            };

          default:
            return {
                bd: AC.p_1(e),
                bdStyle: "solid",
                bdWidth: "1px"
            };
        }
    }
};

const WC = {
    onLightBg(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                bd: AC.colorTextPrimary(e),
                bdStyle: "dotted",
                bdWidth: "4px"
            };

          default:
            return {
                bd: AC.colorTextPrimary(e),
                bdStyle: "dotted",
                bdWidth: "1px"
            };
        }
    },
    default(e) {
        return this.onLightBg(e);
    },
    onDarkBg(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                bd: AC.colorTextInverse(e),
                bdStyle: "dotted",
                bdWidth: "4px"
            };

          default:
            return {
                bd: AC.colorTextInverse(e),
                bdStyle: "dotted",
                bdWidth: "1px"
            };
        }
    },
    onRightClick(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                bd: AC.colorTextPrimary(e),
                bdStyle: "solid",
                bdWidth: "4px"
            };

          default:
            return {
                bd: AC.colorTextPrimary(e),
                bdStyle: "solid",
                bdWidth: "1px"
            };
        }
    }
};

const $C = {
    normal(e) {
        return {
            fg: AC.colorTextDefault(e),
            bg: AC.colorUiLight(e),
            bd: AC.colorNeutral(e)
        };
    },
    hover(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                fg: AC.colorTextDefault(e),
                bg: AC.colorUiLight(e),
                bd: AC.colorNeutral(e)
            };

          default:
            return {
                fg: AC.colorTextLabel(e),
                bg: AC.colorUiLight(e),
                bd: AC.colorNeutral(e)
            };
        }
    },
    active(e) {
        return {
            fg: AC.colorTextDefault(e),
            bg: AC.colorUiLight(e),
            bd: AC.colorPrimary(e)
        };
    },
    focused(e) {
        return $C.active(e);
    },
    disabled(e) {
        return {
            fg: Jv(AC.colorTextDefault(e), .32),
            bg: AC.colorUiLight(e),
            bd: Jv(AC.colorNeutral(e), .32)
        };
    },
    readOnly(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                fg: AC.colorTextDefault(e),
                bg: AC.colorUiLight(e),
                bd: AC.colorUiLight(e)
            };

          default:
            return {
                fg: AC.colorTextDefault(e),
                bg: "transparent",
                bd: "transparent"
            };
        }
    },
    nonEditable(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
          case "dark":
            return {
                fg: AC.colorTextDefault(e),
                bg: Jv(AC.colorNeutral(e), .16),
                bd: "transparent"
            };

          default:
            return {
                fg: AC.colorTextDefault(e),
                bg: Jv(AC.colorNeutral(e), .08),
                bd: "transparent"
            };
        }
    }
};

const YC = {
    normal(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.p2(e),
                bg: AC.black(e),
                bd: AC.p2(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.p2(e),
                bg: Ve(.9, AC.p2(e)),
                bd: AC.p2(e)
            };

          case "high-contrast":
            return {
                fg: AC.p3(e),
                bg: AC.black(e),
                bd: AC.p3(e)
            };

          default:
            return {
                fg: AC.white(e),
                bg: AC.p(e),
                bd: AC.p(e)
            };
        }
    },
    hover(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.p2(e),
                bg: Ve(.7, AC.p2(e)),
                bd: AC.p2(e)
            };

          case "marine":
          case "sail":
            return {
                fg: AC.p2(e),
                bg: AC.p(e),
                bd: AC.p(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.p2(e),
                bg: Ve(.8, AC.p2(e)),
                bd: AC.p2(e)
            };

          case "high-contrast":
            return {
                fg: AC.p3(e),
                bg: AC.n_3(e),
                bd: AC.p3(e)
            };

          default:
            return {
                fg: Ve(.5, AC.white(e)),
                bg: AC.p(e),
                bd: AC.p(e)
            };
        }
    },
    active(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.p2(e),
                bd: "transparent"
            };

          case "marine":
          case "sail":
            return {
                fg: AC.p1(e),
                bg: AC.p_1(e),
                bd: AC.p_1(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.p2(e),
                bg: Ve(.75, AC.p2(e)),
                bd: AC.p2(e)
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.p3(e),
                bd: "transparent"
            };

          default:
            return {
                fg: Ve(.5, AC.white(e)),
                bg: AC.p_1(e),
                bd: AC.p_1(e)
            };
        }
    },
    selected(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.p2(e),
                bd: "transparent"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.p2(e),
                bg: Ve(.75, AC.p2(e)),
                bd: AC.p2(e)
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.p3(e),
                bd: "transparent"
            };

          default:
            return {
                fg: AC.white(e),
                bg: AC.p_1(e),
                bd: AC.p_1(e)
            };
        }
    },
    disabled(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.hcDisabled(e),
                bg: AC.black(e),
                bd: AC.hcDisabled(e)
            };

          case "marine":
          case "sail":
            return {
                fg: Ve(.35, AC.white(e)),
                bg: AC.n(e),
                bd: AC.n2(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: Ve(.8, AC.p2(e)),
                bg: "transparent",
                bd: Ve(.8, AC.p2(e))
            };

          case "high-contrast":
            const {fg: t, bg: o, bd: n} = YC.normal(e);
            return {
                fg: Ve(.5, t),
                bg: Ve(.5, o),
                bd: Ve(.5, n)
            };

          default:
            return {
                fg: Ve(.4, AC.white(e)),
                bg: Ve(.25, AC.n1(e)),
                bd: "transparent"
            };
        }
    }
};

const qC = {
    normal(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.p2(e),
                bg: AC.black(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: Ve(.8, AC.p2(e)),
                bg: "transparent"
            };

          case "high-contrast":
            return {
                fg: AC.p3(e),
                bg: "transparent"
            };

          default:
            return {
                fg: AC.white(e),
                bg: "transparent"
            };
        }
    },
    hover(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.p2(e),
                bg: Ve(.7, AC.p2(e))
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.p2(e),
                bg: Ve(.8, AC.p2(e))
            };

          case "high-contrast":
            return {
                fg: AC.p3(e),
                bg: AC.n_3(e)
            };

          default:
            return {
                fg: Ve(.5, AC.white(e)),
                bg: "transparent"
            };
        }
    },
    active(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.p2(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.p2(e),
                bg: Ve(.75, AC.p2(e))
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.p3(e)
            };

          default:
            return {
                fg: Ve(.5, AC.white(e)),
                bg: AC.p_1(e)
            };
        }
    },
    selected(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.p2(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.p2(e),
                bg: Ve(.75, AC.p2(e))
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.p3(e)
            };

          default:
            return {
                fg: AC.white(e),
                bg: AC.p_1(e)
            };
        }
    },
    disabled(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.hcDisabled(e),
                bg: AC.black(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: Ve(.8, AC.p2(e)),
                bg: "transparent"
            };

          case "high-contrast":
            return {
                fg: Ve(.5, AC.p3(e)),
                bg: "transparent"
            };

          default:
            return {
                fg: Ve(.4, AC.white(e)),
                bg: "transparent"
            };
        }
    }
};

const XC = {
    normal(e) {
        switch (e.baseThemeName) {
          case "dark":
          case "high-contrast":
            return {
                fg: AC.colorTextPrimary(e),
                bg: Jv(AC.colorPrimary(e), .1),
                bd: AC.colorPrimary(e)
            };

          default:
            return {
                fg: AC.colorTextInverse(e),
                bg: AC.colorPrimary(e),
                bd: AC.colorUiLight(e)
            };
        }
    },
    hover(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.colorTextPrimary(e),
                bg: Jv(AC.colorPrimary(e), .2),
                bd: AC.colorPrimary(e)
            };

          case "high-contrast":
            return {
                fg: AC.colorTextDefault(e),
                bg: Jv(AC.colorPrimary(e), .2),
                bd: AC.colorPrimary(e)
            };

          default:
            return {
                fg: Jv(AC.colorTextInverse(e), .8),
                bg: AC.colorPrimary(e),
                bd: AC.colorUiLight(e)
            };
        }
    },
    active(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.colorTextPrimary(e),
                bg: Jv(AC.colorPrimary(e), .25),
                bd: AC.colorPrimary(e)
            };

          case "high-contrast":
            return {
                fg: AC.colorTextInverse(e),
                bg: AC.colorPrimary(e),
                bd: AC.colorPrimary(e)
            };

          default:
            return {
                fg: Jv(AC.colorTextInverse(e), .6),
                bg: AC.colorPrimary(e),
                bd: AC.colorUiLight(e)
            };
        }
    },
    selected(e) {
        return XC.active(e);
    },
    disabled(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: Jv(AC.colorTextPrimary(e), .32),
                bg: Jv(AC.colorPrimary(e), .08),
                bd: "transparent"
            };

          case "high-contrast":
            return {
                fg: Jv(AC.colorPrimary(e), .48),
                bg: Jv(AC.colorPrimary(e), .16),
                bd: "transparent"
            };

          default:
            return {
                fg: Jv(AC.colorTextInverse(e), .64),
                bg: Jv(AC.colorPrimary(e), .24),
                bd: "transparent"
            };
        }
    }
};

const ZC = {
    normal(e) {
        const t = XC.normal(e);
        return {
            ...t,
            bg: "transparent",
            bd: "transparent"
        };
    },
    hover(e) {
        const t = XC.hover(e);
        return {
            ...t,
            bd: "transparent"
        };
    },
    active(e) {
        const t = XC.active(e);
        return {
            ...t,
            bd: "transparent"
        };
    },
    disabled(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: Jv(AC.colorTextPrimary(e), .32),
                bg: Jv(AC.colorPrimary(e), .08),
                bd: "transparent"
            };

          case "high-contrast":
            return {
                fg: Jv(AC.colorPrimary(e), .48),
                bg: Jv(AC.colorPrimary(e), .16),
                bd: "transparent"
            };

          default:
            return {
                fg: Jv(AC.colorTextInverse(e), .64),
                bg: Jv(AC.colorPrimary(e), .24),
                bd: "transparent"
            };
        }
    }
};

const JC = {
    normal(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.white(e),
                bg: AC.black(e),
                bd: AC.secondary(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.6, AC.e1(e)),
                bd: AC.e(e)
            };

          case "high-contrast":
            return {
                fg: AC.e2(e),
                bg: AC.black(e),
                bd: AC.e2(e)
            };

          default:
            return {
                fg: AC.e(e),
                bg: Ve(.9, AC.e(e)),
                bd: AC.e(e)
            };
        }
    },
    selected(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.secondary(e),
                bd: "transparent"
            };

          case "marine":
          case "sail":
            return {
                fg: AC.e(e),
                bg: AC.n3(e),
                bd: AC.e(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.6, AC.e1(e)),
                bd: AC.e(e)
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.e2(e),
                bd: AC.black(e)
            };

          default:
            return {
                fg: AC.e(e),
                bg: Ve(.75, AC.e(e)),
                bd: AC.e(e)
            };
        }
    },
    disabledSelected(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.hcDisabled(e),
                bd: "transparent"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: Ve(.7, AC.white(e)),
                bg: Ve(.7, AC.e1(e)),
                bd: "transparent"
            };

          case "high-contrast":
            const {fg: t, bg: o, bd: n} = JC.normal(e);
            return {
                fg: Ve(.5, t),
                bg: Ve(.5, o),
                bd: Ve(.5, n)
            };

          default:
            return {
                fg: Ve(.8, AC.e(e)),
                bg: Ve(.95, AC.e(e)),
                bd: Ve(.8, AC.e(e))
            };
        }
    },
    disabled(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.hcDisabled(e),
                bg: AC.black(e),
                bd: AC.hcDisabled(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: Ve(.8, AC.white(e)),
                bg: "transparent",
                bd: Ve(.8, AC.white(e))
            };

          case "high-contrast":
            const {fg: t, bg: o, bd: n} = QC.normal(e);
            return {
                fg: Ve(.5, t),
                bg: Ve(.5, o),
                bd: Ve(.5, n)
            };

          default:
            return {
                fg: AC.n2(e),
                bg: "transparent",
                bd: AC.n2(e)
            };
        }
    }
};

const QC = {
    normal(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: AC.p_3(e),
                bd: Ve(.6, AC.white(e))
            };

          case "high-contrast":
            return {
                fg: AC.white(e),
                bg: AC.black(e),
                bd: AC.white(e)
            };

          default:
            return {
                fg: AC.n_3(e),
                bg: AC.white(e),
                bd: AC.n_1(e)
            };
        }
    },
    selected(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.secondary(e),
                bd: "transparent"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: AC.e1(e),
                bd: AC.e(e)
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.e2(e),
                bd: AC.black(e)
            };

          default:
            return {
                fg: AC.white(e),
                bg: AC.e(e),
                bd: AC.e(e)
            };
        }
    },
    disabledSelected(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.hcDisabled(e),
                bd: "transparent"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: Ve(.7, AC.white(e)),
                bg: Ve(.5, AC.e1(e)),
                bd: "transparent"
            };

          case "high-contrast":
            const {fg: t, bg: o, bd: n} = QC.selected(e);
            return {
                fg: Ve(.5, t),
                bg: Ve(.5, o),
                bd: Ve(.5, n)
            };

          default:
            return {
                fg: Ve(.3, AC.white(e)),
                bg: Ve(.7, AC.e(e)),
                bd: "transparent"
            };
        }
    },
    disabled(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.hcDisabled(e),
                bg: AC.black(e),
                bd: AC.hcDisabled(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: Ve(.8, AC.white(e)),
                bg: "transparent",
                bd: Ve(.8, AC.white(e))
            };

          case "high-contrast":
            const {fg: t, bg: o, bd: n} = QC.normal(e);
            return {
                fg: Ve(.5, t),
                bg: Ve(.5, o),
                bd: Ve(.5, n)
            };

          default:
            return {
                fg: AC.n2(e),
                bg: "transparent",
                bd: AC.n2(e)
            };
        }
    }
};

const eE = {
    normal(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                fg: AC.colorTextDefault(e),
                bg: AC.colorUiLight(e),
                bd: AC.colorNeutral(e)
            };

          default:
            return {
                fg: AC.colorTextDefault(e),
                bg: Jv(AC.colorUiLight(e), .1),
                bd: AC.colorNeutral(e)
            };
        }
    },
    selected(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.colorTextDefault(e),
                bg: Jv(AC.colorSecondary(e), .25),
                bd: AC.colorSecondary(e)
            };

          case "high-contrast":
            return {
                fg: AC.colorTextInverse(e),
                bg: AC.colorSecondary(e),
                bd: AC.colorSecondary(e)
            };

          default:
            return {
                fg: AC.colorTextSecondary(e),
                bg: Jv(AC.colorSecondary(e), .25),
                bd: AC.colorSecondary(e)
            };
        }
    },
    disabledSelected(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                fg: Jv(AC.colorTextInverse(e), .64),
                bg: Jv(AC.colorSecondary(e), .32),
                bd: "transparent"
            };

          case "dark":
            return {
                fg: Jv(AC.colorTextDefault(e), .32),
                bg: Jv(AC.colorSecondary(e), .16),
                bd: "transparent"
            };

          default:
            return {
                fg: Jv(AC.colorSecondary(e), .32),
                bg: Jv(AC.colorSecondary(e), .08),
                bd: "transparent"
            };
        }
    },
    disabled(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                fg: Jv(AC.colorTextDefault(e), .48),
                bg: Jv(AC.colorNeutral(e), .16),
                bd: "transparent"
            };

          default:
            return {
                fg: Jv(AC.colorTextDefault(e), .32),
                bg: Jv(AC.colorNeutral(e), .08),
                bd: "transparent"
            };
        }
    }
};

const tE = {
    normal(e) {
        return {
            fg: AC.colorTextDefault(e),
            bg: AC.colorUiLight(e),
            bd: AC.colorNeutral(e)
        };
    },
    selected(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.colorTextDefault(e),
                bg: AC.colorSecondary(e),
                bd: AC.colorSecondary(e)
            };

          default:
            return {
                fg: AC.colorTextInverse(e),
                bg: AC.colorSecondary(e),
                bd: AC.colorSecondary(e)
            };
        }
    },
    disabledSelected(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                fg: Jv(AC.colorTextInverse(e), .32),
                bg: Jv(AC.colorSecondary(e), .24),
                bd: "transparent"
            };

          case "dark":
            return {
                fg: Jv(AC.colorTextDefault(e), .32),
                bg: Jv(AC.colorSecondary(e), .24),
                bd: "transparent"
            };

          default:
            return {
                fg: Jv(AC.colorTextInverse(e), .64),
                bg: Jv(AC.colorSecondary(e), .16),
                bd: "transparent"
            };
        }
    },
    disabled(e) {
        return {
            fg: Jv(AC.colorTextDefault(e), .32),
            bg: AC.colorUiLight(e),
            bd: Jv(AC.colorNeutral(e), .32)
        };
    },
    readOnly(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.colorTextDefault(e),
                bg: AC.colorUiMedium(e),
                bd: Jv(tE.normal(e).bd, .3)
            };

          default:
            return {
                fg: AC.colorTextDefault(e),
                bg: AC.colorUiLight(e),
                bd: Jv(tE.normal(e).bd, .3)
            };
        }
    }
};

const oE = {
    normal(e) {
        switch (e.baseReportThemeName) {
          case "marine":
          case "sail":
            return {
                fg: AC.n_3(e),
                bg: AC.white(e),
                bd: AC.n1(e),
                filter: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.95, AC.white(e)),
                bd: AC.white(e),
                filter: "none"
            };

          case "high-contrast":
            return {
                fg: AC.white(e),
                bg: AC.black(e),
                bd: AC.white(e),
                filter: "none"
            };

          default:
            return {
                fg: AC.n_3(e),
                bg: Ve(.9, AC.n1(e)),
                bd: AC.n1(e),
                filter: "none"
            };
        }
    },
    hover(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.hcStandardSelected(e),
                bg: AC.hcStandardHover(e),
                bd: AC.hcStandardSelected(e),
                filter: "none"
            };

          case "marine":
          case "sail":
            return {
                fg: AC.n_3(e),
                bg: AC.p4(e),
                bd: AC.n1(e),
                filter: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.9, AC.white(e)),
                bd: AC.white(e),
                filter: "none"
            };

          case "high-contrast":
            return {
                fg: AC.white(e),
                bg: AC.n_3(e),
                bd: AC.white(e),
                filter: "none"
            };

          default:
            return {
                fg: AC.n_3(e),
                bg: Ve(.8, AC.n1(e)),
                bd: AC.n1(e),
                filter: "none"
            };
        }
    },
    active(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.hcStandardSelected(e),
                bd: "transparent",
                filter: "none"
            };

          case "marine":
          case "sail":
            return {
                fg: AC.n_3(e),
                bg: AC.n3(e),
                bd: AC.n1(e),
                filter: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.85, AC.white(e)),
                bd: AC.white(e),
                filter: "none"
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.white(e),
                bd: "transparent",
                filter: "none"
            };

          default:
            return {
                fg: AC.n_3(e),
                bg: Ve(.75, AC.n1(e)),
                bd: AC.n1(e),
                filter: "none"
            };
        }
    },
    selected(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.hcStandardSelected(e),
                bd: "transparent",
                filter: "none"
            };

          case "marine":
          case "sail":
            return {
                fg: AC.n_3(e),
                bg: AC.p3(e),
                bd: AC.n1(e),
                filter: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.85, AC.white(e)),
                bd: AC.white(e),
                filter: "none"
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.white(e),
                bd: "transparent",
                filter: "none"
            };

          default:
            return {
                fg: AC.n_3(e),
                bg: Ve(.75, AC.n1(e)),
                bd: AC.n1(e),
                filter: "none"
            };
        }
    },
    selectedInactive(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.hcStandardSelectedInactive(e),
                bd: "transparent",
                filter: "none"
            };

          case "marine":
          case "sail":
            return {
                fg: AC.n_3(e),
                bg: AC.n3(e),
                bd: AC.n1(e),
                filter: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.9, AC.white(e)),
                bd: "transparent",
                filter: "none"
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.white60(e),
                bd: "transparent",
                filter: "none"
            };

          default:
            return {
                fg: AC.n_3(e),
                bg: Ve(.8, AC.n1(e)),
                bd: "transparent",
                filter: "none"
            };
        }
    },
    disabled(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.hcDisabled(e),
                bg: AC.black(e),
                bd: AC.hcDisabled(e),
                filter: "none"
            };

          case "marine":
          case "sail":
            return {
                fg: AC.n1(e),
                bg: AC.white(e),
                bd: AC.n3(e),
                filter: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: Ve(.8, AC.white(e)),
                bg: "transparent",
                bd: Ve(.8, AC.white(e)),
                filter: "none"
            };

          case "high-contrast":
            const {fg: t, bg: o, bd: n} = oE.normal(e);
            return {
                fg: Ve(.5, t),
                bg: Ve(.5, o),
                bd: Ve(.5, n),
                filter: "none"
            };

          default:
            return {
                fg: AC.n2(e),
                bg: "transparent",
                bd: AC.n2(e),
                filter: "none"
            };
        }
    }
};

const nE = {
    normal(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.white(e),
                bg: AC.black(e),
                filter: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: "transparent",
                filter: "none"
            };

          case "high-contrast":
            return {
                fg: AC.white(e),
                bg: "transparent",
                filter: "none"
            };

          default:
            return {
                fg: AC.n_3(e),
                bg: "transparent",
                filter: "none"
            };
        }
    },
    hover(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.hcStandardSelected(e),
                bg: AC.hcStandardHover(e),
                filter: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.9, AC.white(e)),
                filter: "none"
            };

          case "high-contrast":
            return {
                fg: AC.white(e),
                bg: AC.n_3(e),
                filter: "none"
            };

          default:
            return {
                fg: AC.n_3(e),
                bg: Ve(.8, AC.n1(e)),
                filter: "none"
            };
        }
    },
    active(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.hcStandardSelected(e),
                filter: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.85, AC.white(e)),
                filter: "none"
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.white(e),
                filter: "none"
            };

          default:
            return {
                fg: AC.n_3(e),
                bg: Ve(.75, AC.n1(e)),
                filter: "none"
            };
        }
    },
    selected(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.hcStandardSelected(e),
                filter: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.85, AC.white(e)),
                filter: "none"
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.white(e),
                filter: "none"
            };

          default:
            return {
                fg: AC.n_3(e),
                bg: Ve(.75, AC.n1(e)),
                filter: "none"
            };
        }
    },
    selectedInactive(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.hcStandardSelectedInactive(e),
                filter: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.9, AC.white(e)),
                filter: "none"
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.white60(e),
                filter: "none"
            };

          default:
            return {
                fg: AC.n_3(e),
                bg: Ve(.8, AC.n1(e)),
                filter: "none"
            };
        }
    },
    disabled(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.hcDisabled(e),
                bg: AC.black(e),
                filter: "none"
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: Ve(.8, AC.white(e)),
                bg: "transparent",
                filter: "none"
            };

          case "high-contrast":
            return {
                fg: Ve(.5, AC.white(e)),
                bg: "transparent",
                filter: "none"
            };

          default:
            return {
                fg: AC.n2(e),
                bg: "transparent",
                filter: "none"
            };
        }
    }
};

const aE = {
    normal(e) {
        return {
            fg: AC.colorTextDefault(e),
            bg: Jv(AC.colorNeutral(e), .08),
            bd: AC.colorNeutral(e),
            filter: "none"
        };
    },
    hover(e) {
        return {
            fg: AC.colorTextDefault(e),
            bg: Jv(AC.colorNeutral(e), .2),
            bd: AC.colorNeutral(e),
            filter: "none"
        };
    },
    active(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                fg: AC.colorTextDefault(e),
                bg: AC.colorUiLight(e),
                bd: AC.colorUiLight(e),
                filter: "invert(1) grayscale(1)"
            };

          default:
            return {
                fg: AC.colorTextDefault(e),
                bg: Jv(AC.colorNeutral(e), .25),
                bd: AC.colorNeutral(e),
                filter: "none"
            };
        }
    },
    selected(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                ...aE.active(e),
                filter: "invert(1) grayscale(1)"
            };

          default:
            return aE.active(e);
        }
    },
    selectedInactive(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                ...aE.selected(e),
                filter: "invert(0.85) grayscale(1)"
            };

          default:
            return {
                fg: AC.colorTextDefault(e),
                bg: Jv(AC.colorNeutral(e), .2),
                bd: "transparent",
                filter: "none"
            };
        }
    },
    disabled(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                fg: Jv(AC.colorTextDefault(e), .48),
                bg: Jv(AC.colorNeutral(e), .16),
                bd: "transparent",
                filter: "none"
            };

          default:
            return {
                fg: Jv(AC.colorTextDefault(e), .32),
                bg: Jv(AC.colorNeutral(e), .08),
                bd: "transparent",
                filter: "none"
            };
        }
    }
};

const rE = {
    normal(e) {
        const t = aE.normal(e);
        return {
            ...t,
            bg: "transparent",
            bd: "transparent"
        };
    },
    hover(e) {
        const t = aE.hover(e);
        return {
            ...t,
            bd: "transparent"
        };
    },
    active(e) {
        const t = aE.active(e);
        return {
            ...t,
            bd: "transparent"
        };
    },
    selected(e) {
        const t = aE.selected(e);
        return {
            ...t,
            bd: "transparent"
        };
    },
    selectedInactive(e) {
        const t = aE.selectedInactive(e);
        return {
            ...t,
            bd: "transparent"
        };
    },
    disabled(e) {
        const t = aE.disabled(e);
        return {
            ...t,
            bg: "transparent",
            bd: "transparent"
        };
    }
};

const sE = {
    alert(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.a(e),
                bg: AC.black(e),
                bd: AC.a(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.a1(e),
                bg: AC.p_3(e),
                bd: AC.a1(e)
            };

          case "high-contrast":
            return {
                fg: AC.a1_5(e),
                bg: AC.black(e),
                bd: AC.a1_5(e)
            };

          default:
            return {
                fg: AC.a(e),
                bg: AC.white(e),
                bd: AC.a(e)
            };
        }
    },
    warning(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.w(e),
                bg: AC.black(e),
                bd: AC.w(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: AC.p_3(e),
                bd: AC.w1(e)
            };

          case "high-contrast":
            return {
                fg: AC.w1_5(e),
                bg: AC.black(e),
                bd: AC.w1_5(e)
            };

          default:
            return {
                fg: AC.n_2(e),
                bg: AC.white(e),
                bd: AC.w(e)
            };
        }
    },
    success(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.s(e),
                bg: AC.black(e),
                bd: AC.s(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: AC.p_3(e),
                bd: AC.s1(e)
            };

          case "high-contrast":
            return {
                fg: AC.s1_5(e),
                bg: AC.black(e),
                bd: AC.s1_5(e)
            };

          default:
            return {
                fg: AC.n_2(e),
                bg: AC.white(e),
                bd: AC.s(e)
            };
        }
    },
    informational(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.i(e),
                bg: AC.black(e),
                bd: AC.i(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: AC.p_3(e),
                bd: AC.i1(e)
            };

          case "high-contrast":
            return {
                fg: AC.i1_5(e),
                bg: AC.black(e),
                bd: AC.i1_5(e)
            };

          default:
            return {
                fg: AC.n_2(e),
                bg: AC.white(e),
                bd: AC.i(e)
            };
        }
    }
};

const iE = {
    alert(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.white(e),
                bg: AC.a(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.8, AC.a1(e))
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.a1_5(e)
            };

          default:
            return {
                fg: AC.n_2(e),
                bg: AC.a2(e)
            };
        }
    },
    warning(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.white(e),
                bg: AC.w(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.8, AC.w1(e))
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.w1_5(e)
            };

          default:
            return {
                fg: AC.n_2(e),
                bg: AC.w2(e)
            };
        }
    },
    success(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.white(e),
                bg: AC.s(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.8, AC.s1(e))
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.s1_5(e)
            };

          default:
            return {
                fg: AC.n_2(e),
                bg: AC.s2(e)
            };
        }
    },
    informational(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.white(e),
                bg: AC.i(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.white(e),
                bg: Ve(.8, AC.i1(e))
            };

          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.i1_5(e)
            };

          default:
            return {
                fg: AC.n_2(e),
                bg: AC.i2(e)
            };
        }
    }
};

const lE = {
    alert(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.a(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.a1(e)
            };

          case "high-contrast":
            return {
                fg: AC.a1_5(e)
            };

          default:
            return {
                fg: AC.a(e)
            };
        }
    },
    warning(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.w(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.w1(e)
            };

          case "high-contrast":
            return {
                fg: AC.w1_5(e)
            };

          default:
            return {
                fg: AC.w(e)
            };
        }
    },
    success(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.s(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.s1(e)
            };

          case "high-contrast":
            return {
                fg: AC.s1_5(e)
            };

          default:
            return {
                fg: AC.s(e)
            };
        }
    },
    informational(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.i(e)
            };
        }
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.i1(e)
            };

          case "high-contrast":
            return {
                fg: AC.i1_5(e)
            };

          default:
            return {
                fg: AC.i(e)
            };
        }
    }
};

const cE = {
    alert(e) {
        return {
            fg: AC.colorAlert(e),
            bg: AC.colorUiLight(e),
            bd: AC.colorAlert(e)
        };
    },
    warning(e) {
        return {
            fg: AC.colorWarning(e),
            bg: AC.colorUiLight(e),
            bd: AC.colorWarning(e)
        };
    },
    success(e) {
        return {
            fg: AC.colorSuccess(e),
            bg: AC.colorUiLight(e),
            bd: AC.colorSuccess(e)
        };
    },
    informational(e) {
        return {
            fg: AC.colorInfo(e),
            bg: AC.colorUiLight(e),
            bd: AC.colorInfo(e)
        };
    }
};

const dE = {
    alert(e) {
        switch (e.baseThemeName) {
          case "dark":
            return {
                fg: AC.colorTextDefault(e),
                bg: AC.colorUiMedium(e)
            };

          case "high-contrast":
          default:
            return {
                fg: AC.colorTextDefault(e),
                bg: AC.colorUiLight(e)
            };
        }
    },
    warning(e) {
        const t = dE.alert(e);
        return {
            ...t
        };
    }
};

const uE = {
    alert(e) {
        const t = cE.alert(e);
        return {
            ...t,
            bd: "transparent",
            bg: "transparent"
        };
    },
    warning(e) {
        const t = cE.warning(e);
        return {
            ...t,
            bd: "transparent",
            bg: "transparent"
        };
    },
    success(e) {
        const t = cE.success(e);
        return {
            ...t,
            bd: "transparent",
            bg: "transparent"
        };
    },
    informational(e) {
        const t = cE.informational(e);
        return {
            ...t,
            bd: "transparent",
            bg: "transparent"
        };
    }
};

const mE = {
    basic(e) {
        let t;
        switch (e.baseThemeName) {
          case "high-contrast":
          case "dark":
            t = AC.white(e);
            break;

          default:
            t = AC.n_3(e);
        }
        return {
            fg: t,
            fontSize: "0.875rem",
            lineHeight: 1.3
        };
    },
    description(e) {
        let t;
        switch (e.baseThemeName) {
          case "high-contrast":
            t = AC.white(e);
            break;

          case "dark":
            t = AC.white80(e);
            break;

          default:
            t = AC.n_1(e);
        }
        return {
            fg: t,
            fontSize: "0.75rem",
            lineHeight: 1.3
        };
    },
    descriptionDisabled(e) {
        let t;
        switch (e.baseThemeName) {
          case "high-contrast":
            t = AC.white(e);
            break;

          case "dark":
            t = Jv(AC.white(e), .25);
            break;

          default:
            t = Jv(AC.white(e), .3);
        }
        return {
            fg: t,
            fontSize: "0.75rem",
            lineHeight: 1.3
        };
    },
    unread(e) {
        let t;
        switch (e.baseThemeName) {
          case "high-contrast":
          case "dark":
            t = AC.white(e);
            break;

          default:
            t = AC.n_3(e);
        }
        return {
            fg: t,
            fontSize: "0.875rem",
            fontWeight: "bold",
            lineHeight: 1.3
        };
    },
    highlighted(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.white(e)
            };
        }
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.w1_5(e)
            };

          case "dark":
            return {
                fg: AC.p_3(e),
                bg: "#877BD5"
            };

          default:
            return {
                fg: AC.white(e),
                bg: "#7668CF"
            };
        }
    },
    highlightedInFocus(e) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            return {
                fg: AC.black(e),
                bg: AC.white(e)
            };
        }
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: AC.w1_5(e)
            };

          case "dark":
            return {
                fg: AC.p_3(e),
                bg: "#AEA6E3"
            };

          default:
            return {
                fg: AC.white(e),
                bg: "#4F3DC2"
            };
        }
    },
    selection(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                fg: AC.black(e),
                bg: Jv(AC.white(e), .99)
            };

          case "dark":
            return {
                fg: AC.white(e),
                bg: Jv(AC.p1(e), .99)
            };

          default:
            return {
                fg: AC.white(e),
                bg: Jv(AC.p(e), .99)
            };
        }
    }
};

const pE = {
    selection(e) {
        switch (e.baseThemeName) {
          case "high-contrast":
            return {
                fg: AC.colorTextInverse(e),
                bg: Jv(AC.colorPrimary(e), .99)
            };

          case "dark":
            return {
                fg: AC.colorTextDefault(e),
                bg: Jv(AC.colorPrimary(e), .99)
            };

          default:
            return {
                fg: AC.colorTextInverse(e),
                bg: Jv(AC.colorPrimary(e), .99)
            };
        }
    }
};

const fE = `'AvenirNext', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'`;

const gE = `Verdana, Helvetica, Arial, sans-serif`;

const hE = `Verdana, Helvetica, Arial, sans-serif`;

const bE = `Consolas, Menlo, "Lucida Console", Courier, Monaco, monospace`;

const vE = `'AvenirNext', Arial, Helvetica, Verdana, 'Open Sans', sans-serif`;

const yE = `HelveticaNeue, Helvetica, Arial, sans-serif`;

const xE = `'Noto Sans', sans-serif`;

const SE = (e, t) => {
    const {lang: o, script: n, region: a} = lh(e);
    if (t) {
        switch (o) {
          case "zh":
            if (a === "TW" || n === "Hant") {
                return `'Noto Sans TC', 'Noto Sans', 'PMingLiU', '新細明體', ${vE}`;
            }
            if (a === "HK") {
                return `'Noto Sans', 'Noto Sans TC', ${vE}`;
            }
            return `'Noto Sans SC', 'Noto Sans', 'SimSun', '宋体', ${vE}`;

          case "ja":
            return `'Meiryo UI',  'MS PGothic', 'Noto Sans JP', 'Noto Sans', 'ＭＳ Ｐゴシック', ${vE}`;

          case "ko":
            return `'Malgun Gothic', 'GulimChe', 'Gulim', 'Noto Sans KR', 'Noto Sans', '굴림', ${vE}`;

          case "th":
            return `'Noto Sans', 'Noto Sans Thai', ${vE}`;

          case "ar":
            if (a === "XX") {
                return "PseudoArabic, Helvetica, Arial, sans-serif";
            }

          default:
            return undefined;
        }
    }
    switch (o) {
      case "zh":
        if (a === "TW" || n === "Hant" || a === "HK") {
            return `'AvenirNext', '微軟正黑體', 'Microsoft JhengHei', '黑體-繁', 'Heiti TC', 'Helvetica Neue', 'Helvetica', Arial, sans-serif`;
        }
        return `'AvenirNext', '微软雅黑体', 'Microsoft YaHei New', '微软雅黑', 'Microsoft Yahei', '宋体', 'SimSun', 'Helvetica Neue', 'Helvetica', Arial, sans-serif`;

      case "ja":
        return `'AvenirNext', 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'Osaka', 'メイリオ', 'Meiryo', 'ＭＳ Ｐゴシック', 'MS PGothic', 'Noto Sans JP', 'Helvetica Neue', 'Helvetica', Arial, sans-serif`;

      case "ko":
        return `'AvenirNext', '맑은 고딕', 'Malgun Gothic', 'Apple SD Gothic Neo', 'NanumBarunGothic', '굴림', 'Gulim', '돋움', 'Dotum', 'Helvetica Neue', 'Helvetica', Arial, sans-serif`;

      case "th":
        return `'AvenirNext', 'Thonburi', 'Leelawadee UI', 'TH Sarabun New', 'Cordia New', Roboto, Noto, 'Noto Sans Thai', 'Helvetica Neue', 'Helvetica', Arial, sans-serif`;

      case "vi":
      case "he":
      case "iw":
        return `'AvenirNext', 'Helvetica Neue', 'Helvetica', Arial, sans-serif`;

      case "ar":
        if (a === "XX") {
            return `'AvenirNext', 'PseudoArabic', 'Helvetica Neue', 'Helvetica', Arial, sans-serif`;
        }
        return `'AvenirNext', 'Geeza Pro', 'Helvetica Neue', 'Helvetica', Arial, sans-serif`;

      default:
        return undefined;
    }
};

const wE = (e, t) => {
    let o = t;
    if (typeof t !== "string") {
        o = t.join(", ");
    }
    return `${e && !/(?:""|'')/.test(e) ? `'${e}', ` : ""}${o}`;
};

const CE = (e, t) => {
    const o = e.overrides?.fontFamily;
    let n = wE(o, vE);
    let a = wE(o, vE);
    let r = wE(o, yE);
    if (e.baseThemeName === "high-contrast") {
        n = wE(o, xE);
        a = wE(o, xE);
        r = wE(o, xE);
    }
    const s = SE(t.toLowerCase(), true);
    n = !!s ? wE(o, s) : n;
    return {
        default: n,
        secondary: n,
        monospace: bE,
        item: a,
        helvetica: r
    };
};

const EE = (e, t) => {
    const o = e.overrides?.fontFamily;
    let n = wE(o, fE);
    let a = wE(o, fE);
    let r = wE(o, gE);
    if (e.baseThemeName === "high-contrast") {
        n = wE(o, hE);
        a = wE(o, hE);
        r = wE(o, hE);
    }
    const s = SE(t.toLowerCase(), false);
    n = !!s ? wE(o, s) : n;
    return {
        default: n,
        secondary: n,
        monospace: bE,
        item: a,
        helvetica: r
    };
};

const IE = () => "unset";

const _E = () => "normal";

const DE = () => "unset";

const LE = () => "normal";

const TE = e => {
    const t = parseFloat(e.overrides?.fontSizeBase ?? "100%") / 100;
    return {
        xxxxs: `${t * .5626}rem`,
        xxxs: `${t * .5626}rem`,
        xxs: `${t * .625}rem`,
        xs: `${t * .6875}rem`,
        s: `${t * .75}rem`,
        m: `${t * .875}rem`,
        l: `${t * 1}rem`,
        xl: `${t * 1.0625}rem`,
        xxl: `${t * 1.125}rem`,
        xxxl: `${t * 1.25}rem`,
        xxxxl: `${t * 1.5}rem`,
        xxxxxl: `${t * 3}rem`,
        h1: `${t * 1.25}rem`,
        h2: `${t * 1.125}rem`,
        h3: `${t * 1.063}rem`,
        h4: `${t * 1}rem`,
        h5: `${t * .875}rem`,
        h6: `${t * .75}rem`,
        base: e.overrides?.fontSizeBase ?? "100%"
    };
};

const RE = (e, t) => {
    let o = .875;
    const n = 1.125;
    const {lang: a, region: r} = lh(t);
    if (a === "zh" && r === "TW") {
        o = .91;
    }
    return {
        xxxxs: `${o / n ** 5}rem`,
        xxxs: `${o / n ** 4}rem`,
        xxs: `${o / n ** 3}rem`,
        xs: `${o / n ** 2}rem`,
        s: `${o / n}rem`,
        m: `${o}rem`,
        l: `${o * n}rem`,
        xl: `${o * n ** 2}rem`,
        xxl: `${o * n ** 3}rem`,
        xxxl: `${o * n ** 4}rem`,
        xxxxl: `${o * n ** 5}rem`,
        h1: `${o * n ** 4}rem`,
        h2: `${o * n ** 3}rem`,
        h3: `${o * n ** 2}rem`,
        h4: `${o * n}rem`,
        h5: `${o}rem`,
        h6: `${o / n}rem`,
        base: e.overrides?.fontSizeBase ?? "100%"
    };
};

const kE = () => ({
    default: "normal",
    accent: "normal"
});

const AE = (e, t) => {
    const {lang: o} = lh(t);
    switch (o) {
      case "ar":
      case "zh":
      case "ja":
      case "ko":
      case "th":
        return {
            default: "normal",
            accent: "normal"
        };

      default:
        return {
            default: "normal",
            accent: e.baseThemeName === "high-contrast" ? "normal" : "italic"
        };
    }
};

const ME = () => ({
    normal: "400",
    bold: "600",
    default: "400",
    thick: "600",
    thin: "300"
});

const NE = e => {
    const {lang: t} = lh(e);
    switch (t) {
      case "ar":
      case "zh":
      case "ja":
      case "ko":
      case "th":
        return {
            normal: "400",
            bold: "700",
            default: "400",
            thick: "700",
            thin: "400"
        };

      default:
        return {
            normal: "400",
            bold: "700",
            default: "400",
            thick: "700",
            thin: "300"
        };
    }
};

const OE = () => "unset";

const PE = e => {
    const {lang: t} = lh(e);
    switch (t) {
      case "zh":
      case "ja":
      case "ko":
      case "th":
        return "keep-all";

      case "ar":
      default:
        return "normal";
    }
};

const BE = () => "unset";

const zE = () => "normal";

const FE = () => 1.3;

const jE = e => {
    const {lang: t} = lh(e);
    switch (t) {
      case "ar":
      case "zh":
      case "ja":
      case "ko":
      case "th":
        return 1.5;

      default:
        return 1.4;
    }
};

const VE = () => ({
    default: "unset",
    uppercase: "unset"
});

const HE = e => {
    const {lang: t} = lh(e);
    switch (t) {
      case "ar":
      case "zh":
      case "ja":
      case "ko":
      case "th":
        return {
            default: "initial",
            uppercase: "initial"
        };

      default:
        return {
            default: "initial",
            uppercase: "uppercase"
        };
    }
};

function UE(e, t) {
    let o = gS;
    switch (e.baseThemeName) {
      case "high-contrast":
        o = mS;
        break;

      case "dark":
        o = dS;
        break;
    }
    const {lang: n, script: a, region: r} = lh(t.lang.toLowerCase());
    let s;
    switch (n) {
      case "zh":
        if (t.lang.endsWith("pseudo")) {
            s = cS;
        } else if (r === "HK") {
            s = lS;
        } else if (r === "TW" || a === "Hant") {
            s = hS;
        } else {
            s = iS;
        }
        break;

      case "ja":
        s = pS;
        break;

      case "ko":
        s = fS;
        break;

      case "th":
        s = bS;
        break;

      case "vi":
        s = vS;
        break;

      case "he":
      case "iw":
        s = uS;
        break;

      case "ar":
        if (r === "XX") {
            s = sS;
        } else {
            s = rS;
        }
        break;
    }
    const i = {
        ...o.tokens,
        ...s?.tokens
    };
    if (e.overrides?.fontFamily) {
        i["font-family-primary"] = wE(e.overrides?.fontFamily, i["font-family-primary"]);
        i["font-family-secondary"] = wE(e.overrides?.fontFamily, i["font-family-secondary"]);
    }
    const l = {
        tokensExperimental: i,
        stateStandardNova: GE(aE, e),
        stateStandardContentNova: GE(rE, e),
        statePrimaryNova: GE(XC, e),
        statePrimaryContentNova: GE(ZC, e),
        stateSecondaryNova: GE(eE, e),
        stateSecondaryToggleNova: GE(tE, e),
        stateStatusNova: GE(cE, e),
        stateStatusPadBoxNova: GE(dE, e),
        stateStatusContentNova: GE(uE, e),
        backgroundsDepthNova: GE(OC, e),
        backgroundsNova: GE(PC, e),
        stateInputNova: GE($C, e),
        stateFocusNova: GE(WC, e),
        textNova: {
            selection: pE.selection(e)
        },
        spacing: GC,
        animation: yS,
        fontNova: {
            family: EE(e, t.lang),
            letterSpacing: _E(),
            overflowWrap: LE(),
            size: RE(e, t.lang),
            style: AE(e, t.lang),
            weight: NE(t.lang),
            wordBreak: PE(t.lang),
            wordSpacing: zE(),
            lineHeight: jE(t.lang),
            textTransform: HE(t.lang)
        },
        stateStandard: GE(oE, e),
        stateStandardContent: GE(nE, e),
        statePrimary: GE(YC, e),
        statePrimaryContent: GE(qC, e),
        stateSecondary: GE(JC, e),
        stateSecondaryToggle: GE(QC, e),
        stateFocus: GE(KC, e),
        stateStatus: GE(sE, e),
        stateStatusPadBox: GE(iE, e),
        stateStatusContent: GE(lE, e),
        backgrounds: GE(MC, e),
        backgroundsDepth: GE(NC, e),
        font: {
            family: CE(e, t.lang),
            letterSpacing: IE(),
            overflowWrap: DE(),
            size: TE(e),
            style: kE(),
            weight: ME(),
            wordBreak: OE(),
            wordSpacing: BE(),
            lineHeight: FE(),
            textTransform: VE()
        },
        text: {
            basic: mE.basic(e),
            description: mE.description(e),
            descriptionDisabled: mE.descriptionDisabled(e),
            unread: mE.unread(e),
            highlighted: mE.highlighted(e),
            highlightedInFocus: mE.highlightedInFocus(e),
            selection: mE.selection(e)
        },
        enableNovaTokens: e.enableNovaTokens,
        overrides: {
            banner: {
                bg: e.overrides?.bannerBg,
                fg: e.overrides?.bannerFg,
                img: e.overrides?.bannerImg
            },
            splash: {
                bg: e.overrides?.splashBg,
                fg: e.overrides?.splashFg,
                img: e.overrides?.splashImg
            },
            transition: {
                bg: e.overrides?.transitionBg,
                fg: e.overrides?.transitionFg,
                img: e.overrides?.transitionImg
            },
            table: {
                borderColor: e.overrides?.tableBorderColor,
                cellBorderColor: e.overrides?.tableCellBorderColor,
                headerBackground: e.overrides?.tableHeaderBackground,
                headerBorderRightColor: e.overrides?.tableHeaderBorderRightColor,
                headerLabelColor: e.overrides?.tableHeaderLabelColor,
                rowBackgroundColorEven: e.overrides?.tableRowBackgroundColorEven,
                rowBackgroundColorOdd: e.overrides?.tableRowBackgroundColorOdd,
                textColor: e.overrides?.tableTextColor,
                totalsBackgroundColor: e.overrides?.tableTotalsBackgroundColor,
                totalsTextColor: e.overrides?.tableTotalsTextColor
            }
        },
        c: GE(AC, e),
        themeVariant: e.baseThemeName,
        baseReportThemeName: e.baseReportThemeName
    };
    return l;
}

function GE(e, ...t) {
    const o = {};
    for (const n of Object.keys(e)) {
        o[n] = e[n](...t);
    }
    return o;
}

const KE = e => e.colors.colorGraph1;

const WE = e => e.colors.colorGraph2;

const $E = e => e.colors.colorGraph3;

const YE = e => e.colors.colorGraph4;

const qE = e => e.colors.colorGraph5;

const XE = e => e.colors.colorGraph6;

const ZE = e => e.colors.colorGraph7;

const JE = e => e.colors.colorGraph8;

const QE = e => e.colors.colorKPI1;

const eI = e => e.colors.colorKPI3;

const tI = e => e.colors.colorKPI5;

var oI = {
    colorGraph1: KE,
    colorGraph2: WE,
    colorGraph3: $E,
    colorGraph4: YE,
    colorGraph5: qE,
    colorGraph6: XE,
    colorGraph7: ZE,
    colorGraph8: JE,
    colorKPI1: QE,
    colorKPI3: eI,
    colorKPI5: tI
};

const nI = et(((e, t) => {
    const o = xI(e, t);
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                lineColor: o.n5,
                lineStyle: "solid",
                lineThickness: 1
            };
        }

      case "high-contrast":
        {
            return {
                lineColor: o.white,
                lineStyle: "solid",
                lineThickness: 2
            };
        }

      default:
        {
            return {
                lineColor: o.n_3,
                lineStyle: "solid",
                lineThickness: 1
            };
        }
    }
}));

const aI = (e, t) => ({
    fillColor: xI(e, t).backgroundColor,
    frameBorder: false
});

const rI = (e, t, o, n = false, a = false) => {
    const r = Fe(e);
    const s = Fe(t);
    const i = lI(r);
    const l = lI(s);
    const c = l.value >= .5;
    const d = o / 100;
    const u = c ? -d : d;
    const m = n ? -u : u;
    const p = a ? {
        hue: r.hue,
        saturation: r.saturation,
        lightness: Math.max(0, Math.min(1, r.lightness + m))
    } : cI({
        hue: i.hue,
        saturation: i.saturation,
        value: Math.max(0, Math.min(1, i.value + m))
    });
    return Ge(p);
};

const sI = (e, t, o) => {
    const n = Ke(t);
    const a = o / 100;
    return We(a, n, e);
};

const iI = (e, t, o, n = false) => rI(e, t, o, true, n);

const lI = e => {
    const t = e.lightness + e.saturation * Math.min(e.lightness, 1 - e.lightness);
    const o = t === 0 ? 0 : 2 * (1 - e.lightness / t);
    return {
        hue: e.hue,
        saturation: o,
        value: t
    };
};

const cI = e => {
    const t = e.value - e.value * e.saturation / 2;
    const o = t === 0 || t === 1 ? 0 : (e.value - t) / Math.min(t, 1 - t);
    return {
        hue: e.hue,
        saturation: o,
        lightness: t
    };
};

const dI = (e, t, o, n = false) => rI(e, t, o, false, n);

const uI = (e, t, o = 50) => {
    const n = o / 100;
    return We(n, e, t);
};

const mI = e => {
    const t = Fe(e);
    return Ge({
        hue: t.hue,
        saturation: t.saturation,
        lightness: 1 - t.lightness
    });
};

const pI = e => {
    const t = $e(e);
    const o = e => {
        let t = e / 255;
        if (t <= .03928) {
            t = t / 12.92;
        } else {
            t = Math.pow((t + .055) / 1.055, 2.4);
        }
        return t * 255;
    };
    const n = Math.round(o(t.red) * .2126 + o(t.green) * .7152 + o(t.blue) * .0722);
    return Ye({
        red: n,
        green: n,
        blue: n
    });
};

const fI = (e, t) => {
    const o = e.map((e => qe(e, t)));
    const n = Math.max(...o);
    return e[o.indexOf(n)];
};

const gI = {
    nodeDefault(e, t) {
        const o = gI.node1(e, t);
        const n = Ke(o.color);
        const a = Ke(o.altColor);
        const r = GI.rampDefault(e, t);
        const s = {
            color: n,
            fillColor: n,
            altColor: a,
            lineColor: a,
            textColor: o.textColor,
            fillPattern: "L1",
            fillGradientStartColor: r.fillGradientStartColor,
            fillGradientNeutralColor: r.fillGradientNeutralColor,
            fillGradientEndColor: r.fillGradientEndColor
        };
        switch (e.baseThemeName) {
          case "dark":
            {
                return {
                    ...s,
                    lineThickness: HI(e).skinGlowThickness
                };
            }

          case "high-contrast":
            {
                return {
                    ...s,
                    lineThickness: MI(e, t).lineThickness
                };
            }

          default:
            {
                return {
                    ...s,
                    lineThickness: MI(e, t).lineThickness
                };
            }
        }
    },
    node1(e, t) {
        return hI(e, t, bI.style1(e, t));
    },
    node2(e, t) {
        return hI(e, t, bI.style2(e, t));
    },
    node3(e, t) {
        return hI(e, t, bI.style3(e, t));
    },
    node4(e, t) {
        return hI(e, t, bI.style4(e, t));
    },
    node5(e, t) {
        return hI(e, t, bI.style5(e, t));
    },
    node6(e, t) {
        return hI(e, t, bI.style6(e, t));
    },
    node7(e, t) {
        return hI(e, t, bI.style7(e, t));
    },
    node8(e, t) {
        return hI(e, t, bI.style8(e, t));
    }
};

const hI = (e, t, o) => {
    const n = xI(e, t);
    switch (e.baseThemeName) {
      case "dark":
        {
            const a = uI(o.color, WI(e, t).fillColor, 60);
            return {
                color: a,
                fillColor: a,
                altColor: o.altColor,
                lineColor: o.altColor,
                textColor: n.n5
            };
        }

      case "high-contrast":
        {
            const a = sI(o.color, n.white, 85);
            return {
                color: a,
                fillColor: a,
                altColor: o.altColor,
                lineColor: o.altColor,
                textColor: WI(e, t).fillColor
            };
        }

      default:
        {
            const a = sI(o.color, WI(e, t).fillColor, 60);
            return {
                color: a,
                fillColor: a,
                altColor: o.altColor,
                lineColor: o.altColor,
                textColor: n.n_3
            };
        }
    }
};

const bI = {
    styleDefault: et(((e, t) => {
        const o = {
            markerSymbol: "circlefilled",
            lineStyle: "solid",
            fillPattern: "L1",
            ...vI(e, t, oI.colorGraph1(e))
        };
        switch (e.baseThemeName) {
          case "dark":
            {
                return {
                    ...o,
                    markerSize: 11,
                    lineThickness: 3
                };
            }

          case "high-contrast":
            {
                return {
                    ...o,
                    markerSize: 16,
                    lineThickness: 5
                };
            }

          default:
            {
                return {
                    ...o,
                    markerSize: 11,
                    lineThickness: 3
                };
            }
        }
    })),
    style1: et(((e, t) => bI.styleDefault(e, t))),
    style2: et(((e, t) => {
        const o = bI.styleDefault(e, t);
        return {
            ...vI(e, t, oI.colorGraph2(e)),
            markerSize: o.markerSize,
            markerSymbol: "squarefilled",
            lineStyle: "mediumdash",
            lineThickness: o.lineThickness,
            fillPattern: "X1"
        };
    })),
    style3: et(((e, t) => {
        const o = bI.styleDefault(e, t);
        return {
            ...vI(e, t, oI.colorGraph3(e)),
            markerSize: o.markerSize,
            markerSymbol: "trianglefilled",
            lineStyle: "mediumdashshortdash",
            lineThickness: o.lineThickness,
            fillPattern: "R4"
        };
    })),
    style4: et(((e, t) => {
        const o = bI.styleDefault(e, t);
        return {
            ...vI(e, t, oI.colorGraph4(e)),
            markerSize: o.markerSize,
            markerSymbol: "diamondfilled",
            lineStyle: "longdash",
            lineThickness: o.lineThickness,
            fillPattern: "X3"
        };
    })),
    style5: et(((e, t) => {
        const o = bI.styleDefault(e, t);
        return {
            ...vI(e, t, oI.colorGraph5(e)),
            markerSize: o.markerSize,
            markerSymbol: "starfilled",
            lineStyle: "dashdashdot",
            lineThickness: o.lineThickness,
            fillPattern: "R3"
        };
    })),
    style6: et(((e, t) => {
        const o = bI.styleDefault(e, t);
        return {
            ...vI(e, t, oI.colorGraph6(e)),
            markerSize: o.markerSize,
            markerSymbol: "triangledownfilled",
            lineStyle: "longdashshortdash",
            lineThickness: o.lineThickness,
            fillPattern: "L5"
        };
    })),
    style7: et(((e, t) => {
        const o = bI.styleDefault(e, t);
        const n = {
            markerSize: o.markerSize,
            markerSymbol: "homedownfilled",
            lineStyle: "dashdotdot",
            lineThickness: o.lineThickness,
            fillPattern: "R1"
        };
        switch (e.baseThemeName) {
          case "dark":
            {
                return {
                    ...vI(e, t, oI.colorGraph7(e)),
                    ...n
                };
            }

          case "high-contrast":
            {
                return {
                    ...vI(e, t, oI.colorGraph7(e)),
                    ...n
                };
            }

          default:
            {
                return {
                    ...vI(e, t, oI.colorGraph7(e)),
                    ...n
                };
            }
        }
    })),
    style8: et(((e, t) => {
        const o = bI.styleDefault(e, t);
        const n = {
            markerSize: o.markerSize,
            markerSymbol: o.markerSymbol,
            lineStyle: "dash",
            lineThickness: o.lineThickness,
            fillPattern: "X5"
        };
        switch (e.baseThemeName) {
          case "dark":
            {
                return {
                    ...vI(e, t, oI.colorGraph8(e)),
                    ...n
                };
            }

          case "high-contrast":
            {
                return {
                    ...vI(e, t, oI.colorGraph8(e)),
                    ...n
                };
            }

          default:
            {
                return {
                    ...vI(e, t, oI.colorGraph8(e)),
                    ...n
                };
            }
        }
    })),
    style9(e, t) {
        return {
            ...bI.styleDefault(e, t),
            lineStyle: "shortdashdot",
            fillPattern: "L4"
        };
    },
    style10(e, t) {
        return {
            ...bI.styleDefault(e, t),
            lineStyle: "mediumdashdot",
            fillPattern: "X4"
        };
    },
    style11(e, t) {
        return {
            ...bI.styleDefault(e, t),
            lineStyle: "shortdash",
            fillPattern: "L3"
        };
    }
};

const vI = (e, t, o) => {
    switch (e.baseThemeName) {
      case "dark":
        {
            const n = dI(o, WI(e, t).fillColor, 32);
            return {
                color: o,
                fillColor: o,
                altColor: n,
                markerColor: n,
                lineColor: n,
                textColor: n
            };
        }

      case "high-contrast":
        {
            const n = dI(o, WI(e, t).fillColor, 12, true);
            return {
                color: o,
                fillColor: o,
                altColor: n,
                markerColor: n,
                lineColor: n,
                textColor: n
            };
        }

      default:
        {
            const n = dI(o, WI(e, t).fillColor, 22);
            return {
                color: o,
                fillColor: o,
                altColor: n,
                markerColor: n,
                lineColor: n,
                textColor: dI(o, WI(e, t).fillColor, 32)
            };
        }
    }
};

const yI = (e, t) => {
    const o = xI(e, t);
    const n = II(e, t);
    const a = KI(e, t);
    const r = {
        fontFamily: n.fontFamily,
        fontSize: o.fontSize.xxs,
        fontStyle: a.fontStyle,
        fontWeight: a.fontWeight
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...r,
                textColor: n.textColor
            };
        }

      case "high-contrast":
        {
            return {
                ...r,
                textColor: n.textColor
            };
        }

      default:
        {
            return {
                ...r,
                textColor: o.n_5
            };
        }
    }
};

const xI = et(((e, t) => {
    const o = {
        fontFamily: CE(e, t.lang),
        fontSize: TE(e),
        fontWeight: ME(),
        fontStyle: kE().default,
        wrapText: DE(),
        n5: "#f8f9fa",
        n4: "#f2f3f5",
        n3: "#e9ecef",
        n2: "#cdd1d8",
        n1: "#b0b7c2",
        n: "#768396",
        n_1: "#636F80",
        n_2: "#3d4550",
        n_3: "#2b3138",
        n_5: "#171a1e",
        p2: "#44affc",
        p: "#147ACA",
        white: "#fff"
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...o,
                color: "#696969",
                backgroundColor: "#021727"
            };
        }

      case "high-contrast":
        {
            return {
                ...o,
                color: "#fff",
                backgroundColor: "#000"
            };
        }

      default:
        {
            return {
                ...o,
                color: "#696969",
                backgroundColor: "#fff"
            };
        }
    }
}));

const SI = (e, t) => {
    switch (e.baseThemeName) {
      case "high-contrast":
        {
            return {
                lineColor: VI(e, t).lineColor,
                lineStyle: "dotted",
                lineThickness: "5px"
            };
        }

      default:
        {
            return {
                lineColor: VI(e, t).lineColor,
                lineStyle: "dashed",
                lineThickness: "1px"
            };
        }
    }
};

const wI = (e, t) => {
    const o = {
        lineThickness: nI(e, t).lineThickness
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...o,
                lineColor: nI(e, t).lineColor,
                lineStyle: "dot",
                lineTransparency: .6,
                gridLayer: "front"
            };
        }

      case "high-contrast":
        {
            return {
                ...o,
                lineColor: iI(nI(e, t).lineColor, WI(e, t).fillColor, 41, true),
                lineStyle: "shortdash",
                lineTransparency: 0,
                gridLayer: "back"
            };
        }

      default:
        {
            return {
                ...o,
                lineColor: nI(e, t).lineColor,
                lineStyle: "dot",
                lineTransparency: .6,
                gridLayer: "front"
            };
        }
    }
};

const CI = {
    range1: (e, t) => {
        const o = oI.colorKPI1(e);
        return EI(e, t, o, "R3");
    },
    range2: (e, t) => {
        const o = uI(oI.colorKPI1(e), oI.colorKPI3(e), 50);
        return EI(e, t, o, "L1");
    },
    range3: (e, t) => {
        const o = oI.colorKPI3(e);
        return EI(e, t, o, "R4");
    },
    range4: (e, t) => {
        const o = uI(oI.colorKPI3(e), oI.colorKPI5(e), 50);
        return EI(e, t, o, "X1");
    },
    range5: (e, t) => {
        const o = oI.colorKPI5(e);
        return EI(e, t, o, "X3");
    }
};

const EI = (e, t, o, n) => {
    const a = bI.styleDefault(e, t);
    const r = {
        color: o,
        fillColor: o,
        fillPattern: n,
        lineStyle: a.lineStyle,
        lineThickness: a.lineThickness,
        markerSize: a.markerSize,
        markerSymbol: a.markerSymbol
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            const n = dI(o, WI(e, t).fillColor, 32);
            return {
                ...r,
                altColor: n,
                lineColor: n,
                markerColor: n,
                textColor: n
            };
        }

      case "high-contrast":
        {
            const n = dI(o, WI(e, t).fillColor, 12, true);
            return {
                ...r,
                altColor: n,
                lineColor: n,
                markerColor: n,
                textColor: n
            };
        }

      default:
        {
            const n = dI(o, WI(e, t).fillColor, 22);
            return {
                ...r,
                altColor: n,
                lineColor: n,
                markerColor: n,
                textColor: dI(o, WI(e, t).fillColor, 32)
            };
        }
    }
};

const II = (e, t) => {
    const o = xI(e, t);
    const n = {
        fontFamily: o.fontFamily?.default,
        fontStyle: o.fontStyle,
        fontWeight: o.fontWeight.bold
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...n,
                textColor: o.n5,
                fontSize: o.fontSize.m
            };
        }

      case "high-contrast":
        {
            return {
                ...n,
                textColor: o.white,
                fontSize: o.fontSize.l
            };
        }

      default:
        {
            return {
                ...n,
                textColor: o.n_3,
                fontSize: o.fontSize.m
            };
        }
    }
};

const _I = (e, t) => ({
    textColor: RI(e, t).textColor,
    fontFamily: RI(e, t).fontFamily,
    fontSize: xI(e, t).fontSize.xxxs,
    fontStyle: yI(e, t).fontStyle,
    fontWeight: yI(e, t).fontWeight
});

const DI = (e, t) => {
    const o = NI(e, t);
    const n = xI(e, t);
    const a = {
        fillColor: aI(e, t).fillColor,
        transparency: 0,
        lineThickness: o.lineThickness
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...a,
                lineColor: n.n3,
                textColor: n.n3
            };
        }

      case "high-contrast":
        {
            return {
                ...a,
                lineColor: o.lineColor,
                textColor: o.lineColor
            };
        }

      default:
        {
            return {
                ...a,
                lineColor: n.n_2,
                textColor: n.n_2
            };
        }
    }
};

const LI = (e, t) => {
    const o = NI(e, t);
    const n = xI(e, t);
    const a = {
        fillColor: aI(e, t).fillColor,
        transparency: 0,
        lineThickness: o.lineThickness
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...a,
                lineColor: n.n3,
                textColor: n.n3
            };
        }

      case "high-contrast":
        {
            return {
                ...a,
                lineColor: o.lineColor,
                textColor: o.lineColor
            };
        }

      default:
        {
            return {
                ...a,
                lineColor: n.n_2,
                textColor: n.n_2
            };
        }
    }
};

const TI = (e, t) => {
    const o = II(e, t);
    const n = KI(e, t);
    const a = {
        fontFamily: o.fontFamily,
        fontSize: o.fontSize,
        fontStyle: n.fontStyle,
        fontWeight: n.fontWeight,
        textColor: RI(e, t).textColor
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...a
            };
        }

      case "high-contrast":
        {
            return {
                ...a
            };
        }

      default:
        {
            return {
                ...a
            };
        }
    }
};

const RI = (e, t) => {
    const o = {
        textColor: II(e, t).textColor,
        fontFamily: II(e, t).fontFamily,
        fontStyle: II(e, t).fontStyle
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...o,
                fontSize: II(e, t).fontSize,
                fontWeight: KI(e, t).fontWeight
            };
        }

      case "high-contrast":
        {
            return {
                ...o,
                fontSize: KI(e, t).fontSize,
                fontWeight: II(e, t).fontWeight
            };
        }

      default:
        {
            return {
                ...o,
                fontSize: II(e, t).fontSize,
                fontWeight: KI(e, t).fontWeight
            };
        }
    }
};

const kI = (e, t) => {
    const o = bI.styleDefault(e, t);
    const n = xI(e, t);
    const a = {
        lineStyle: o.lineStyle
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            const e = pI(n.n_1);
            const t = pI(SS(-.1 * kw, n.n));
            return {
                ...a,
                color: e,
                fillColor: e,
                altColor: t,
                lineColor: t,
                markerColor: t,
                lineThickness: 2
            };
        }

      case "high-contrast":
        {
            const n = wI(e, t).lineColor;
            const r = NI(e, t).lineColor;
            return {
                ...a,
                color: n,
                fillColor: n,
                altColor: r,
                lineColor: r,
                markerColor: r,
                lineThickness: o.lineThickness
            };
        }

      default:
        {
            const e = pI(n.n1);
            const t = pI(SS(.1 * Ew, n.n));
            return {
                ...a,
                color: e,
                fillColor: e,
                altColor: t,
                lineColor: t,
                markerColor: t,
                lineThickness: 2
            };
        }
    }
};

const AI = (e, t) => {
    const o = {
        textColor: RI(e, t).textColor,
        fontFamily: RI(e, t).fontFamily,
        fontSize: RI(e, t).fontSize,
        fontStyle: RI(e, t).fontStyle
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...o,
                fontWeight: yI(e, t).fontWeight
            };
        }

      case "high-contrast":
        {
            return {
                ...o,
                fontWeight: RI(e, t).fontWeight
            };
        }

      default:
        {
            return {
                ...o,
                fontWeight: yI(e, t).fontWeight
            };
        }
    }
};

const MI = (e, t) => {
    const o = {
        lineStyle: "normal"
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...o,
                lineColor: WI(e, t).fillColor,
                lineThickness: 2
            };
        }

      case "high-contrast":
        {
            return {
                ...o,
                lineColor: aI(e, t).fillColor,
                lineThickness: 3
            };
        }

      default:
        {
            return {
                ...o,
                lineColor: WI(e, t).fillColor,
                lineThickness: 1
            };
        }
    }
};

const NI = (e, t) => ({
    lineColor: pI(fI([ bI.style1(e, t).altColor, bI.style2(e, t).altColor, bI.style3(e, t).altColor, bI.style4(e, t).altColor, bI.style5(e, t).altColor, bI.style6(e, t).altColor, bI.style7(e, t).altColor, bI.style8(e, t).altColor ], WI(e, t).fillColor)),
    lineStyle: MI(e, t).lineStyle,
    lineThickness: MI(e, t).lineThickness
});

const OI = (e, t) => {
    const o = nI(e, t);
    return {
        lineColor: o.lineColor,
        lineThickness: o.lineThickness
    };
};

const PI = (e, t) => {
    const o = aI(e, t);
    const n = xI(e, t);
    switch (e.baseThemeName) {
      case "dark":
        {
            const e = n.n_3;
            return {
                color: e,
                fillColor: e,
                fillTransparency: .7
            };
        }

      case "high-contrast":
        {
            const e = o.fillColor;
            return {
                color: e,
                fillColor: e,
                fillTransparency: .5
            };
        }

      default:
        {
            const e = n.n4;
            return {
                color: e,
                fillColor: e,
                fillTransparency: .7
            };
        }
    }
};

const BI = (e, t) => {
    const o = OI(e, t);
    const n = xI(e, t);
    const a = {
        lineThickness: o.lineThickness,
        transparency: 0
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...a,
                lineColor: n.p2
            };
        }

      case "high-contrast":
        {
            return {
                ...a,
                lineColor: o.lineColor
            };
        }

      default:
        {
            return {
                ...a,
                lineColor: n.n2
            };
        }
    }
};

const zI = (e, t) => {
    const o = WI(e, t);
    return {
        transparency: 0,
        fillColor: o.fillColor
    };
};

const FI = (e, t) => {
    const o = PI(e, t);
    return {
        fillColor: o.fillColor,
        fillTransparency: o.fillTransparency
    };
};

const jI = (e, t) => {
    const o = xI(e, t);
    const n = {
        lineThickness: OI(e, t).lineThickness,
        transparency: 0
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...n,
                lineColor: o.p2
            };
        }

      case "high-contrast":
        {
            return {
                ...n,
                lineColor: VI(e, t).lineColor
            };
        }

      default:
        {
            return {
                ...n,
                lineColor: o.p
            };
        }
    }
};

const VI = (e, t) => {
    const o = WI(e, t).fillColor;
    const n = mI(o);
    const a = bI.styleDefault(e, t);
    const r = {
        color: o,
        fillColor: o,
        markerSize: a.markerSize,
        markerSymbol: a.markerSymbol,
        lineStyle: "solid"
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            const o = xI(e, t).white;
            return {
                ...r,
                altColor: o,
                markerColor: o,
                lineColor: o,
                textColor: o,
                lineThickness: 2
            };
        }

      case "high-contrast":
        {
            return {
                ...r,
                altColor: n,
                markerColor: n,
                lineColor: n,
                textColor: n,
                lineThickness: 5
            };
        }

      default:
        {
            return {
                ...r,
                altColor: n,
                markerColor: n,
                lineColor: n,
                textColor: n,
                lineThickness: 2
            };
        }
    }
};

const HI = (e, t) => {
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                skinGlowThickness: 2
            };
        }

      case "high-contrast":
        {
            return {
                skinGlowThickness: 1
            };
        }

      default:
        {
            return {
                skinGlowThickness: 1
            };
        }
    }
};

const UI = (e, t) => {
    const o = bI.styleDefault(e, t);
    const n = gI.node1(e, t);
    const a = xI(e, t);
    const r = {
        fillColor: n.fillColor,
        lineColor: n.lineColor,
        lineStyle: o.lineStyle
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...r,
                textColor: n.textColor,
                lineThickness: 2
            };
        }

      case "high-contrast":
        {
            return {
                ...r,
                fillColor: a.n_3,
                lineThickness: 3,
                textColor: LI(e, t).textColor
            };
        }

      default:
        {
            return {
                ...r,
                textColor: n.textColor,
                lineThickness: 1
            };
        }
    }
};

const GI = {
    rampDefault(e, t) {
        const o = bI.style1(e, t);
        const n = bI.style2(e, t);
        return {
            fillGradientStartColor: o.color,
            fillGradientNeutralColor: sI(uI(o.color, n.color), WI(e, t).fillColor, 61),
            fillGradientEndColor: n.color
        };
    },
    ramp1(e, t) {
        const o = bI.style1(e, t);
        const n = bI.style2(e, t);
        return {
            fillGradientStartColor: o.color,
            fillGradientNeutralColor: sI(uI(o.color, n.color), WI(e, t).fillColor, 61),
            fillGradientEndColor: n.color
        };
    },
    ramp2(e, t) {
        const o = bI.style3(e, t);
        const n = bI.style4(e, t);
        return {
            fillGradientStartColor: o.color,
            fillGradientNeutralColor: sI(uI(o.color, n.color), WI(e, t).fillColor, 61),
            fillGradientEndColor: n.color
        };
    },
    ramp3(e, t) {
        const o = bI.style5(e, t);
        const n = bI.style6(e, t);
        return {
            fillGradientStartColor: o.color,
            fillGradientNeutralColor: sI(uI(o.color, n.color), WI(e, t).fillColor, 61),
            fillGradientEndColor: n.color
        };
    },
    ramp4(e, t) {
        const o = bI.style7(e, t);
        const n = bI.style8(e, t);
        return {
            fillGradientStartColor: o.color,
            fillGradientNeutralColor: sI(uI(o.color, n.color), WI(e, t).fillColor, 61),
            fillGradientEndColor: n.color
        };
    }
};

const KI = (e, t) => {
    const o = xI(e, t);
    const n = II(e, t);
    const a = {
        fontFamily: n.fontFamily,
        fontStyle: n.fontStyle,
        fontWeight: o.fontWeight.normal
    };
    switch (e.baseThemeName) {
      case "dark":
        {
            return {
                ...a,
                textColor: o.n1,
                fontSize: o.fontSize.xs
            };
        }

      case "high-contrast":
        {
            return {
                ...a,
                textColor: n.textColor,
                fontSize: n.fontSize
            };
        }

      default:
        {
            return {
                ...a,
                textColor: o.n_1,
                fontSize: o.fontSize.xs
            };
        }
    }
};

const WI = et(((e, t) => ({
    ...nI(e, t),
    fillColor: aI(e, t).fillColor,
    fillTransparency: 0,
    lineTransparency: 0,
    displayOpts: "none",
    frameBorder: false
})));

function $I(e, t) {
    const o = {
        c: GE(oI, e),
        graphAxisLines: nI(e, t),
        graphBackfill: aI(e, t),
        graphDataNode: GE(gI, e, t),
        graphDataStyle: GE(bI, e, t),
        graphDataText: yI(e, t),
        graphDefault: xI(e, t),
        graphFocus: SI(e, t),
        graphGridLines: wI(e, t),
        graphKPIRange: GE(CI, e, t),
        graphLabelText: II(e, t),
        graphNodeDetails: _I(e, t),
        graphNodeGroupClosed: DI(e, t),
        graphNodeGroupOpen: LI(e, t),
        graphNodeGroupTitle: TI(e, t),
        graphNodeLabel: RI(e, t),
        graphNodeLink: kI(e, t),
        graphNodeTitle: AI(e, t),
        graphOutlines: MI(e, t),
        graphOutlinesUnfilled: NI(e, t),
        graphOverviewAxis: OI(e, t),
        graphOverviewAxisFilter: PI(e, t),
        graphOverviewBorderLines: BI(e, t),
        graphOverviewFill: zI(e, t),
        graphOverviewFilterFill: FI(e, t),
        graphOverviewViewportBorderLines: jI(e, t),
        graphSelection: VI(e, t),
        graphTargetNode: UI(e, t),
        graphThreeColorRamp: GE(GI, e, t),
        graphValueText: KI(e, t),
        graphWallFill: WI(e, t)
    };
    return o;
}

const YI = () => {
    const e = c(true);
    a((() => {
        e.current = true;
        return () => {
            e.current = false;
        };
    }), [ e ]);
    return e;
};

function qI(e) {
    return e === undefined || e === null;
}

function XI(e) {
    return e !== null && e !== undefined && !!e.then && typeof e.then === "function";
}

function ZI(e) {
    throw new Error(`unexpected value (assertNever): ${e}`);
}

function JI(e) {
    const t = c(undefined);
    d((function o() {
        t.current = e;
    }));
    return r((() => {
        let e;
        return {
            onBlur() {
                if (!qI(e)) return;
                e = setTimeout((() => {
                    if (t.current) {
                        t.current();
                    }
                }));
            },
            onFocus() {
                if (!qI(e)) {
                    clearTimeout(e);
                    e = undefined;
                }
            }
        };
    }), []);
}

function QI(e, t) {
    const o = s_();
    const n = db();
    const a = r((() => {
        const a = o.customFocusColor;
        const r = o.customFocusOpacity;
        const s = o.customFocusThickness;
        const i = t ? e.inverseTheme : e.currentTheme;
        const l = UE(i, {
            lang: n
        });
        function c(e) {
            if (a || r) {
                const t = Fe(a ?? e);
                return `hsla(${Math.round(t.hue)}, ${Math.round(t.saturation * 100)}%, ${Math.round(t.lightness * 100)}%, ${r ? parseFloat(r) / 100 : "1"})`;
            }
            return e;
        }
        return i.enableNovaTokens ? {
            ...l,
            tokensExperimental: {
                ...l.tokensExperimental,
                ...i.tokensExperimental,
                "color-action-background-focus": c(i.tokensExperimental?.["color-action-background-focus"] ?? l.tokensExperimental["color-action-background-focus"]),
                "color-action-background-focus-inverse": c(i.tokensExperimental?.["color-action-background-focus-inverse"] ?? l.tokensExperimental["color-action-background-focus-inverse"]),
                "size-action-border-width-focus": s ?? i.tokensExperimental?.["size-action-border-width-focus"] ?? l.tokensExperimental["size-action-border-width-focus"]
            },
            stateFocusNova: {
                ...l.stateFocusNova,
                onLightBg: {
                    ...l.stateFocusNova.onLightBg,
                    bd: c(l.stateFocusNova.onLightBg.bd),
                    bdWidth: s ?? l.stateFocusNova.onLightBg.bdWidth
                },
                onDarkBg: {
                    ...l.stateFocusNova.onDarkBg,
                    bd: c(l.stateFocusNova.onDarkBg.bd),
                    bdWidth: s ?? l.stateFocusNova.onDarkBg.bdWidth
                },
                onRightClick: {
                    ...l.stateFocusNova.onRightClick,
                    bd: c(l.stateFocusNova.onRightClick.bd),
                    bdWidth: s ?? l.stateFocusNova.onRightClick.bdWidth
                }
            }
        } : {
            ...l,
            tokensExperimental: {
                ...l.tokensExperimental,
                ...i.tokensExperimental
            },
            stateFocus: {
                ...l.stateFocus,
                onLightBg: {
                    ...l.stateFocus.onLightBg,
                    bd: c(l.stateFocus.onLightBg.bd),
                    bdWidth: s ?? l.stateFocus.onLightBg.bdWidth
                },
                onDarkBg: {
                    ...l.stateFocus.onDarkBg,
                    bd: c(l.stateFocus.onDarkBg.bd),
                    bdWidth: s ?? l.stateFocus.onDarkBg.bdWidth
                },
                onRightClick: {
                    ...l.stateFocus.onRightClick,
                    bd: c(l.stateFocus.onRightClick.bd),
                    bdWidth: s ?? l.stateFocus.onRightClick.bdWidth
                }
            }
        };
    }), [ o.customFocusColor, o.customFocusOpacity, o.customFocusThickness, t, e.inverseTheme, e.currentTheme, n ]);
    return a;
}

const e_ = i({
    currentTheme: Ib.light,
    inverseTheme: Ib.light
});

const t_ = UE(Ib.light, {
    lang: $h()
});

const o_ = i(t_);

const n_ = i(null);

const a_ = i({
    enableCustomFocus: false,
    customFocusColor: t_.tokensExperimental["color-action-background-focus"],
    customFocusOpacity: "100",
    customFocusThickness: t_.tokensExperimental["size-action-border-width-focus"],
    enableVisualEffects: true
});

const r_ = i(undefined);

function s_() {
    return l(a_);
}

function i_() {
    const e = l(r_);
    if (e === undefined) {
        throw new Error("Global settings theme parameters dispatch must be used within GlobalSettingsThemeParametersDispatchContext Provider");
    }
    return e;
}

const l_ = e => {
    const [o, a] = n(false);
    const [s, i] = n();
    const [l, c] = n();
    const [d, u] = n();
    const [m, p] = n(true);
    const f = r((() => ({
        enableCustomFocus: o,
        customFocusColor: s,
        customFocusOpacity: d,
        customFocusThickness: l,
        enableVisualEffects: m
    })), [ o, s, l, d, m ]);
    const g = r((() => ({
        enableCustomFocus(e) {
            a(e);
        },
        setCustomFocusColor(e) {
            i(e);
        },
        setCustomFocusThickness(e) {
            c(e);
        },
        setCustomFocusOpacity(e) {
            u(e);
        },
        removeCustomFocusColor() {
            i(undefined);
        },
        removeCustomFocusThickness() {
            c(undefined);
        },
        removeCustomFocusOpacity() {
            u(undefined);
        },
        enableVisualEffects(e) {
            p(e);
        }
    })), []);
    return t(a_.Provider, {
        value: f
    }, t(r_.Provider, {
        value: g
    }, e.children));
};

const c_ = e => {
    const o = r((() => {
        const t = typeof e.currentTheme === "string" ? Ib[e.currentTheme] : e.currentTheme;
        const o = typeof e.inverseTheme === "string" ? Ib[e.inverseTheme] : e.inverseTheme ?? t;
        return {
            currentTheme: t,
            inverseTheme: o
        };
    }), [ e.currentTheme, e.inverseTheme ]);
    return t(e_.Provider, {
        value: o
    }, t(p_, {
        contextValue: o
    }, e.children));
};

const d_ = u((({currentTheme: e, inverseTheme: o, children: n, ...a}, r) => t(c_, {
    currentTheme: e,
    inverseTheme: o
}, t(b_, Ee({
    ref: r
}, a), n))));

const u_ = i(false);

const m_ = e => {
    const o = e.inverseTheme !== false;
    const n = l(e_);
    return t(u_.Provider, {
        value: o
    }, t(p_, {
        contextValue: n,
        inverted: o
    }, e.children));
};

const p_ = e => {
    const o = QI(e.contextValue, e.inverted);
    return t(o_.Provider, {
        value: o
    }, e.children);
};

const f_ = e => {
    const o = $h();
    const n = S_();
    const a = C_();
    const s = r((() => {
        const e = $I(n, {
            lang: o
        });
        const t = {
            ...e,
            graphFocus: {
                lineColor: a.stateFocusNova.onLightBg.bd,
                lineStyle: a.stateFocusNova.onLightBg.bdStyle,
                lineThickness: a.stateFocusNova.onLightBg.bdWidth
            }
        };
        return t;
    }), [ n, o, a ]);
    return t(n_.Provider, {
        value: s
    }, e.children);
};

const g_ = i({
    showFocus: true,
    isKeyboardUser: true
});

const h_ = () => l(g_);

const b_ = u((({className: e, style: o, children: a, ...r}, s) => {
    const i = YI();
    const [l, d] = n(true);
    const u = c(false);
    const m = C_();
    const {enableVisualEffects: p, enableCustomFocus: f} = s_();
    const g = f || l;
    const h = v_(m, g, p);
    const {onBlur: b, onFocus: v} = JI((() => {
        if (!i.current) return;
        d(true);
    }));
    return t(g_.Provider, {
        value: {
            showFocus: g,
            isKeyboardUser: l
        }
    }, t(Ae, {
        reducedMotion: p ? "user" : "always"
    }, t("div", Ee({}, r, {
        ref: s,
        className: e,
        style: {
            ...h,
            ...o
        },
        onMouseDownCapture: () => {
            setTimeout((() => {
                if (!i.current) return;
                d(!u.current);
            }), 0);
        },
        onKeyDownCapture: () => {
            d(true);
        },
        onBlurCapture: () => {
            b();
            u.current = false;
        },
        onFocusCapture: () => {
            v();
            u.current = true;
        }
    }), a)));
}));

const v_ = (e, t, o) => {
    const n = e.enableNovaTokens ? {
        onLightBg: {
            bd: e.tokensExperimental["color-action-background-focus"],
            bdWidth: e.tokensExperimental["size-action-border-width-focus"],
            bdStyle: e.tokensExperimental["style-action-border-focus"]
        },
        onDarkBg: {
            bd: e.tokensExperimental["color-action-background-focus-inverse"],
            bdWidth: e.tokensExperimental["size-action-border-width-focus"],
            bdStyle: e.tokensExperimental["style-action-border-focus"]
        },
        onRightClick: {
            bd: e.tokensExperimental["color-action-background-focus"],
            bdWidth: e.tokensExperimental["size-action-border-width-focus"],
            bdStyle: "solid"
        }
    } : e.stateFocus;
    const a = {
        "--focus-light-bg-color": t ? n.onLightBg.bd : "transparent",
        "--focus-dark-bg-color": t ? n.onDarkBg.bd : "transparent",
        "--focus-style": n.onLightBg.bdStyle,
        "--focus-width": n.onLightBg.bdWidth,
        "--focus-light-bg": "var(--focus-light-bg-color) var(--focus-style) var(--focus-width)",
        "--focus-dark-bg": "var(--focus-dark-bg-color) var(--focus-style) var(--focus-width)",
        "--nova-animation-duration-factor": o ? "1" : "0"
    };
    let r;
    if (e.enableNovaTokens) {
        r = {
            color: e.tokensExperimental["color-text-neutral"],
            "--scrollbar-bg": e.tokensExperimental["color-neutral"],
            "--scrollbar-hover-track-bg": "transparent",
            "--selection-bg": e.tokensExperimental["color-text-primary"],
            "--selection-fg": e.tokensExperimental["color-text-primary-inverse"],
            ...a
        };
    } else {
        const t = {
            "--selection-bg": e.text.selection.bg,
            "--selection-fg": e.text.selection.fg
        };
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            r = {
                color: e.c.white,
                "--scrollbar-bg": e.c.white,
                "--scrollbar-hover-track-bg": e.c.black,
                ...t,
                ...a
            };
            break;
        }
        switch (e.themeVariant) {
          case "dark":
            r = {
                color: e.c.white,
                "--scrollbar-bg": Jv(e.c.n1, .75),
                "--scrollbar-hover-track-bg": e.c.p_2,
                ...t,
                ...a
            };
            break;

          case "high-contrast":
            r = {
                color: e.c.white,
                "--scrollbar-bg": e.c.n2,
                "--scrollbar-hover-track-bg": e.c.black,
                ...t,
                ...a
            };
            break;

          default:
            r = {
                color: e.c.n_3,
                "--scrollbar-bg": e.c.n_3,
                "--scrollbar-hover-track-bg": e.c.n4,
                ...t,
                ...a
            };
        }
    }
    return {
        fontFamily: e.enableNovaTokens ? e.tokensExperimental["font-family-primary"] : e.font.family.default,
        lineHeight: e.enableNovaTokens ? e.tokensExperimental["font-space-line-height"] : e.font.lineHeight,
        ...r
    };
};

function y_() {
    const e = C_();
    const {showFocus: t} = h_();
    const {enableVisualEffects: o} = s_();
    return v_(e, t, o);
}

function x_() {
    return l(e_);
}

function S_() {
    const e = l(u_);
    const t = l(e_);
    return e ? t.inverseTheme : t.currentTheme;
}

function w_() {
    return l(u_);
}

function C_() {
    return l(o_);
}

function E_() {
    const e = l(n_);
    if (e === null) {
        throw new Error("useGraphTokens must be used within GraphTokenProvider");
    }
    return e;
}

function I_(e, t = "") {
    if (!e) {
        return {};
    }
    if (t !== "") {
        t = `${t}-`;
    }
    const o = {};
    for (const n of Object.keys(e)) {
        o[`--${t}${n}`] = e[n];
    }
    return o;
}

const __ = (e, t) => {
    const o = `--${t}-`;
    const n = {};
    Object.entries(e).forEach((([e, t]) => {
        const a = `${o}${String(e)}`;
        n[a] = t;
    }));
    return n;
};

function D_(e, t) {
    if (typeof e === "function") {
        e(t);
    } else if (e) {
        e.current = t;
    }
}

let L_ = function(e) {
    e["THEMES_KEY"] = "OpenUI.Theme.Default";
    e["USER_SUPPRESSED_MESSAGES"] = "HTML.USER_SUPPRESED_MESSAGES";
    e["FORMAT_LOCALE_KEY"] = "FormatLocale.DefaultLocale";
    e["OFFLINE_LOCALE_KEY"] = "OfflineLocale.DefaultLocale";
    e["PLAY_EARCONS"] = "HTML.Application.PlayEarcons";
    e["PLAY_VISUAL_EFFECTS"] = "HTML.Application.PlayVisualEffects";
    e["ENABLE_POPUP_DISPLAY_DURATION"] = "HTML.Application.EnablePopupDisplayDuration";
    e["POPUP_DISPLAY_DURATION"] = "HTML.Application.PopupDisplayDuration";
    e["INVERT_APP_COLORS"] = "HTML.Application.InvertColors";
    e["ENABLE_KEYBOARD_TOOLTIPS"] = "HTML.Application.EnableKeyboardToolTips";
    e["KEYBOARD_TOOLTIP_LOCATION"] = "HTML.Application.KeyboardToolTipLocation";
    e["FOCUS_OVERRIDE"] = "HTML.Application.FocusOverride";
    e["FOCUS_COLOR"] = "HTML.Application.FocusColor";
    e["FOCUS_THICKNESS"] = "HTML.Application.FocusThickness";
    e["FOCUS_OPACITY"] = "HTML.Application.FocusAlpha";
    e["KEYBOARD_SHORTCUTS"] = "HTML.KeyboardShortcuts";
    e["Avatar"] = "Avatar";
    e["CONTENT_SELECTOR_COLUMN_ORDER"] = "NOVA.ContentSelectorColumnOrder";
    e["FOCUS_TRUNCATED_HEADINGS"] = "NOVA.FocusTruncatedHeadings";
    return e;
}({});

const T_ = "NO_COLOR_VALUE";

const R_ = function() {
    const [e, t] = n(null);
    const o = YI();
    a((() => {
        Fy().then((e => {
            if (!o.current) return;
            t(e);
        }));
    }), [ o ]);
    return e;
};

function k_(e) {
    const t = c();
    a((() => {
        t.current = e;
    }));
    return t.current;
}

const A_ = () => {
    console.error("Incorrect GlobalSettingsDataProvider usage");
    return Promise.reject();
};

const M_ = {
    hasWriteAccess: A_,
    setSettings: A_,
    getSettings: A_,
    deleteSettings: A_
};

const N_ = {
    ...M_,
    getTheme: A_
};

const O_ = () => N_;

var P_ = function(e) {
    e["Change"] = "SettingsEvent.Change";
    return e;
}(P_ || {});

function B_(e) {
    a((() => {
        z_(e);
        return () => {
            F_(e);
        };
    }), [ e ]);
}

function z_(e) {
    bb.subscribe(P_.Change, e);
}

function F_(e) {
    bb.unsubscribe(P_.Change, e);
}

function j_(e, t) {
    bb.publish(P_.Change, {
        data: {
            data: e,
            appId: t
        }
    });
}

const V_ = i(undefined);

function H_() {
    return l(V_);
}

function U_(e) {
    const t = k_(e);
    const o = H_();
    const n = i_();
    const r = {
        light: wb,
        dark: Cb,
        "high-contrast": Eb
    };
    a((() => {
        function a() {
            let e = document.getElementById("sasSettingsInvertStyle");
            if (e === null) {
                const t = py();
                e = document.createElement("style");
                e.setAttribute("id", "sasSettingsInvertStyle");
                if (t) {
                    e.setAttribute("nonce", t);
                }
                document.querySelector("head").appendChild(e);
                e.textContent = `html, body > iframe {-webkit-filter: invert(100%);-moz-filter: invert(100%);-o-filter: invert(100%);-ms-filter: invert(100%);filter: invert(100%);}`;
            }
        }
        function s() {
            const e = document.getElementById("sasSettingsInvertStyle");
            if (e !== null) {
                document.querySelector("head").removeChild(e);
            }
        }
        if (t !== undefined) {
            let i = false;
            for (const l in L_) {
                const c = L_[l];
                const d = e[c];
                const u = t[c];
                if (d !== u) {
                    switch (c) {
                      case L_.THEMES_KEY:
                        if (d) {
                            o && o(Gv(d) ? {
                                type: "application",
                                theme: {
                                    ...r[Lb[d].baseThemeName],
                                    enableNovaTokens: true
                                },
                                inverseTheme: {
                                    ...r[Lb[d].baseThemeName],
                                    enableNovaTokens: true
                                }
                            } : {
                                type: "request",
                                themeId: d
                            });
                        }
                        break;

                      case L_.FOCUS_OVERRIDE:
                      case L_.FOCUS_COLOR:
                      case L_.FOCUS_OPACITY:
                      case L_.FOCUS_THICKNESS:
                        if (!i) {
                            i = true;
                            const t = e[L_.FOCUS_OVERRIDE] === "true" ? true : false;
                            n.enableCustomFocus(t);
                            if (t) {
                                const t = e[L_.FOCUS_COLOR];
                                const o = e[L_.FOCUS_THICKNESS];
                                const a = e[L_.FOCUS_OPACITY];
                                if (t) {
                                    n.setCustomFocusColor(t);
                                } else {
                                    n.removeCustomFocusColor();
                                }
                                if (o) {
                                    n.setCustomFocusThickness(o.concat("px"));
                                } else {
                                    n.removeCustomFocusThickness();
                                }
                                if (a) {
                                    n.setCustomFocusOpacity(a);
                                } else {
                                    n.removeCustomFocusOpacity();
                                }
                            } else {
                                n.removeCustomFocusColor();
                                n.removeCustomFocusThickness();
                                n.removeCustomFocusOpacity();
                            }
                        }
                        break;

                      case L_.PLAY_VISUAL_EFFECTS:
                        n.enableVisualEffects(d === "true");
                        break;

                      case L_.INVERT_APP_COLORS:
                        if (d === "true") {
                            a();
                        } else {
                            s();
                        }
                        break;
                    }
                }
            }
        }
    }));
}

function G_(e) {
    const t = s(((t, o) => {
        const n = o?.data;
        if (n && n.appId === e) {
            const e = Object.keys(L_).map((e => L_[e]));
            n.data.filter((t => e.indexOf(t.key) >= 0)).map((e => ({
                id: e.key,
                newValue: e.value,
                oldValue: e.oldValue
            })));
        }
    }), [ e ]);
    B_(t);
    const o = s(((t, o) => {
        if (o.broadcaster.appId !== e) {
            j_(o.settings.map((e => ({
                key: e.id,
                value: e.newValue?.toString(),
                oldValue: e.oldValue?.toString()
            }))), o.broadcaster.appId);
        }
    }), [ e ]);
    a((() => () => {}), [ o ]);
}

function K_(e, t, o) {
    const {writeAccessState: {isWriteAccessDetected: n}, dataProvider: r} = eL();
    a((() => {
        let a = true;
        async function s() {
            try {
                await r.deleteSettings(e);
                if (a) {
                    t();
                }
            } catch (e) {
                if (a) {
                    o();
                }
            }
        }
        if (n && e.length > 0) {
            s();
        }
        return () => {
            a = false;
        };
    }), [ n, r, e, t, o ]);
}

function W_(e, t) {
    const {writeAccessState: {isWriteAccessDetected: o}, dataProvider: n} = eL();
    a((() => {
        let a = true;
        async function r() {
            try {
                const t = await n.getSettings();
                if (a) {
                    e(t.items);
                }
            } catch (e) {
                if (a) {
                    t();
                }
            }
        }
        if (o) {
            r();
        }
        return () => {
            a = false;
        };
    }), [ o, n, e, t ]);
}

const $_ = 0;

function Y_(e, t) {
    return e + 1;
}

function q_() {
    const [, e] = m(Y_, $_);
    return e;
}

function X_(e) {
    const t = q_();
    const o = c(true);
    const n = c(true);
    const r = k_(e);
    if (r !== e) {
        o.current = true;
        n.current = true;
    }
    a((() => {
        let a = true;
        async function r() {
            try {
                const r = await e.hasWriteAccess();
                if (a) {
                    o.current = false;
                    n.current = r;
                    t();
                }
            } catch (e) {
                if (a) {
                    o.current = false;
                    n.current = true;
                    t();
                }
            }
        }
        r();
        return () => {
            a = false;
        };
    }), [ e, t ]);
    return {
        isWriteAccessDetectionPending: o.current,
        hasWriteAccess: n.current
    };
}

var Z_ = {
    description: "actions.general.label",
    actions: {
        openContextMenu: {
            editable: false,
            description: "actions.openContextMenu.label",
            default: {
                win: [ "shift+f10" ],
                linux: [ "shift+f10" ],
                mac: [ "shift+f10" ],
                ios: [ "option+f10" ]
            }
        },
        invertAppColors: {
            editable: false,
            description: "actions.invertAppColors.label",
            default: {
                win: [ "ctrl+`" ],
                linux: [ "ctrl+`" ],
                mac: [ "command+`" ],
                ios: [ "command+`" ]
            }
        },
        new: {
            description: "actions.new.label",
            default: {
                win: [ "" ],
                linux: [ "" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        },
        open: {
            description: "actions.open.label",
            default: {
                win: [ "ctrl+o" ],
                linux: [ "ctrl+o" ],
                mac: [ "ctrl+o" ],
                ios: [ "command+o" ]
            }
        },
        save: {
            description: "actions.save.label",
            default: {
                win: [ "ctrl+s" ],
                linux: [ "ctrl+s" ],
                mac: [ "command+s" ],
                ios: [ "command+s" ]
            }
        },
        undo: {
            description: "actions.undo.label",
            default: {
                win: [ "ctrl+z" ],
                linux: [ "ctrl+z" ],
                mac: [ "command+z" ],
                ios: [ "command+z" ]
            }
        },
        redo: {
            description: "actions.redo.label",
            default: {
                win: [ "ctrl+y" ],
                linux: [ "ctrl+y" ],
                mac: [ "command+shift+z" ],
                ios: [ "command+shift+z" ]
            }
        },
        find: {
            description: "actions.find.label",
            default: {
                win: [ "ctrl+f" ],
                linux: [ "ctrl+f" ],
                mac: [ "command+f" ],
                ios: [ "command+f" ]
            }
        },
        zoomInComponent: {
            description: "actions.zoomInComponent.label",
            default: {
                win: [ "ctrl+numpadplus" ],
                linux: [ "ctrl+numpadplus" ],
                mac: [ "command+numpadplus" ],
                ios: [ "command+numpadplus" ]
            }
        },
        zoomOutComponent: {
            description: "actions.zoomOutComponent.label",
            default: {
                win: [ "ctrl+numpadminus" ],
                linux: [ "ctrl+numpadminus" ],
                mac: [ "command+numpadminus" ],
                ios: [ "command+numpadminus" ]
            }
        },
        resetZoomComponent: {
            description: "actions.resetZoomComponent.label",
            default: {
                win: [ "ctrl+numpad0" ],
                linux: [ "ctrl+numpad0" ],
                mac: [ "command+numpad0" ],
                ios: [ "command+numpad0" ]
            }
        },
        toggleNormalMax: {
            description: "actions.toggleNormalMax.label",
            default: {
                win: [ "alt+f11" ],
                linux: [ "alt+f11" ],
                mac: [ "option+f11" ],
                ios: [ "option+f11" ]
            }
        },
        moveToNextTab: {
            description: "actions.moveToNextTab.label",
            default: {
                win: [ "alt+pagedown" ],
                linux: [ "alt+pagedown" ],
                mac: [ "option+pagedown" ],
                ios: [ "option+pagedown" ]
            }
        },
        moveToPreTab: {
            description: "actions.moveToPreTab.label",
            default: {
                win: [ "alt+pageup" ],
                linux: [ "alt+pageup" ],
                mac: [ "option+pageup" ],
                ios: [ "option+pageup" ]
            }
        },
        openLandmarks: {
            description: "actions.openLandmarks.label",
            default: {
                win: [ "ctrl+f6" ],
                linux: [ "ctrl+f6" ],
                mac: [ "command+f6" ],
                ios: [ "command+f6" ]
            }
        },
        displayShortcuts: {
            required: true,
            description: "actions.displayShortcuts.label",
            default: {
                win: [ "ctrl+f9" ],
                linux: [ "ctrl+f9" ],
                mac: [ "command+f9" ],
                ios: [ "command+f9" ]
            }
        },
        openSideMenu: {
            description: "actions.openSideMenu.label",
            default: {
                win: [ "" ],
                linux: [ "" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        },
        expandAllTreeNodesSameLevel: {
            description: "actions.expandAllTreeNodesSameLevel.label",
            default: {
                win: [ "*" ],
                linux: [ "*" ],
                mac: [ "*" ],
                ios: [ "*" ]
            }
        }
    }
};

var J_ = {
    description: "actions.textGeneral.label",
    actions: {
        delPreWord: {
            editable: false,
            description: "actions.delPreWord.label",
            default: {
                win: [ "ctrl+backspace" ],
                linux: [ "ctrl+backspace" ],
                mac: [ "option+backspace" ],
                ios: [ "option+backspace" ]
            }
        },
        delNextWord: {
            editable: false,
            description: "actions.delNextWord.label",
            default: {
                win: [ "ctrl+delete" ],
                linux: [ "ctrl+delete" ],
                mac: [ "option+delete" ],
                ios: [ "option+delete" ]
            }
        },
        toggleInsertOverwrite: {
            description: "actions.toggleInsertOverwrite.label",
            default: {
                win: [ "insert" ],
                linux: [ "insert" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        },
        indent: {
            description: "actions.indent.label",
            default: {
                win: [ "tab" ],
                linux: [ "tab" ],
                mac: [ "tab" ],
                ios: [ "tab" ]
            }
        },
        outdent: {
            description: "actions.outdent.label",
            default: {
                win: [ "shift+tab" ],
                linux: [ "shift+tab" ],
                mac: [ "shift+tab" ],
                ios: [ "shift+tab" ]
            }
        },
        cycleCases: {
            description: "actions.cycleCases.label",
            default: {
                win: [ "ctrl+shift+u" ],
                linux: [ "ctrl+shift+u" ],
                mac: [ "command+shift+u" ],
                ios: [ "command+shift+u" ]
            }
        },
        toLowercase: {
            description: "actions.toLowercase.label",
            default: {
                win: [ "" ],
                linux: [ "" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        },
        toUppercase: {
            description: "actions.toUppercase.label",
            default: {
                win: [ "" ],
                linux: [ "" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        }
    }
};

var Q_ = {
    description: "actions.textNavigation.label",
    actions: {
        selectAll: {
            description: "actions.selectAll.label",
            default: {
                win: [ "ctrl+a" ],
                linux: [ "ctrl+a" ],
                mac: [ "command+a" ],
                ios: [ "command+a" ]
            }
        },
        moveToBeginning: {
            editable: false,
            description: "actions.moveToBeginning.label",
            default: {
                win: [ "ctrl+home" ],
                linux: [ "ctrl+home" ],
                mac: [ "command+up" ],
                ios: [ "command+up" ]
            }
        },
        selectToBeginning: {
            editable: false,
            description: "actions.selectToBeginning.label",
            default: {
                win: [ "ctrl+shift+home" ],
                linux: [ "ctrl+shift+home" ],
                mac: [ "command+shift+up" ],
                ios: [ "command+shift+up" ]
            }
        },
        moveToEnd: {
            editable: false,
            description: "actions.moveToEnd.label",
            default: {
                win: [ "ctrl+end" ],
                linux: [ "ctrl+end" ],
                mac: [ "command+down" ],
                ios: [ "command+down" ]
            }
        },
        selectToEnd: {
            editable: false,
            description: "actions.selectToEnd.label",
            default: {
                win: [ "ctrl+shift+end" ],
                linux: [ "ctrl+shift+end" ],
                mac: [ "command+shift+down" ],
                ios: [ "command+shift+down" ]
            }
        },
        moveToPrePara: {
            editable: false,
            description: "actions.moveToPrePara.label",
            default: {
                win: [ "ctrl+up" ],
                linux: [ "ctrl+up" ],
                mac: [ "option+up" ],
                ios: [ "option+up" ]
            }
        },
        selectToPrePara: {
            editable: false,
            description: "actions.selectToPrePara.label",
            default: {
                win: [ "ctrl+shift+up" ],
                linux: [ "ctrl+shift+up" ],
                mac: [ "option+shift+up" ],
                ios: [ "option+shift+up" ]
            }
        },
        moveToNextPara: {
            editable: false,
            description: "actions.moveToNextPara.label",
            default: {
                win: [ "ctrl+down" ],
                linux: [ "ctrl+down" ],
                mac: [ "option+down" ],
                ios: [ "option+down" ]
            }
        },
        selectToNextPara: {
            editable: false,
            description: "actions.selectToNextPara.label",
            default: {
                win: [ "ctrl+shift+down" ],
                linux: [ "ctrl+shift+down" ],
                mac: [ "option+shift+down" ],
                ios: [ "option+shift+down" ]
            }
        },
        moveToPreWord: {
            editable: false,
            description: "actions.moveToPreWord.label",
            default: {
                win: [ "ctrl+left" ],
                linux: [ "ctrl+left" ],
                mac: [ "option+left" ],
                ios: [ "option+left" ]
            }
        },
        selectToPreWord: {
            editable: false,
            description: "actions.selectToPreWord.label",
            default: {
                win: [ "ctrl+shift+left" ],
                linux: [ "ctrl+shift+left" ],
                mac: [ "option+shift+left" ],
                ios: [ "option+shift+left" ]
            }
        },
        moveToNextWord: {
            editable: false,
            description: "actions.moveToNextWord.label",
            default: {
                win: [ "ctrl+right" ],
                linux: [ "ctrl+right" ],
                mac: [ "option+right" ],
                ios: [ "option+right" ]
            }
        },
        selectToNextWord: {
            editable: false,
            description: "actions.selectToNextWord.label",
            default: {
                win: [ "ctrl+shift+right" ],
                linux: [ "ctrl+shift+right" ],
                mac: [ "option+shift+right" ],
                ios: [ "option+shift+right" ]
            }
        },
        moveToFirstVisibleLine: {
            description: "actions.moveToFirstVisibleLine.label",
            default: {
                win: [ "alt+up" ],
                linux: [ "alt+up" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        },
        selectToFirstVisibleLine: {
            description: "actions.selectToFirstVisibleLine.label",
            default: {
                win: [ "" ],
                linux: [ "" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        },
        moveToLastVisibleLine: {
            description: "actions.moveToLastVisibleLine.label",
            default: {
                win: [ "alt+down" ],
                linux: [ "alt+down" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        },
        selectToLastVisibleLine: {
            description: "actions.selectToLastVisibleLine.label",
            default: {
                win: [ "" ],
                linux: [ "" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        }
    }
};

var eD = {
    description: "actions.codingGeneral.label",
    actions: {
        toggleComment: {
            description: "actions.toggleLineComment.label",
            default: {
                win: [ "ctrl+/" ],
                linux: [ "ctrl+/" ],
                mac: [ "command+/" ],
                ios: [ "command+/" ]
            }
        },
        toggleBlockComment: {
            description: "actions.toggleBlockComment.label",
            default: {
                win: [ "ctrl+\\" ],
                linux: [ "ctrl+\\" ],
                mac: [ "command+\\" ],
                ios: [ "command+\\" ]
            }
        },
        foldSection: {
            description: "actions.foldSection.label",
            default: {
                win: [ "ctrl+numpadminus" ],
                linux: [ "ctrl+numpadminus" ],
                mac: [ "command+numpadminus" ],
                ios: [ "" ]
            }
        },
        unfoldSection: {
            description: "actions.unfoldSection.label",
            default: {
                win: [ "ctrl+numpadplus" ],
                linux: [ "ctrl+numpadplus" ],
                mac: [ "command+numpadplus" ],
                ios: [ "" ]
            }
        },
        foldAll: {
            description: "actions.foldAll.label",
            default: {
                win: [ "alt+numpadminus" ],
                linux: [ "alt+numpadminus" ],
                mac: [ "option+numpadminus" ],
                ios: [ "" ]
            }
        },
        unfoldAll: {
            description: "actions.unfoldAll.label",
            default: {
                win: [ "alt+numpadplus" ],
                linux: [ "alt+numpadplus" ],
                mac: [ "option+numpadplus" ],
                ios: [ "" ]
            }
        },
        autocomplete: {
            description: "actions.autocomplete.label",
            default: {
                win: [ "ctrl+space" ],
                linux: [ "ctrl+space" ],
                mac: [ "ctrl+space" ],
                ios: [ "ctrl+space" ]
            }
        },
        autocompletePrev: {
            description: "actions.autocompletePrev.label",
            default: {
                win: [ "ctrl+shift+space" ],
                linux: [ "ctrl+shift+space" ],
                mac: [ "ctrl+shift+space" ],
                ios: [ "ctrl+shift+space" ]
            }
        },
        cleanWhitespace: {
            description: "actions.cleanWhitespace.label",
            default: {
                win: [ "" ],
                linux: [ "" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        },
        reformatCode: {
            description: "actions.reformatCode.label",
            default: {
                win: [ "" ],
                linux: [ "" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        },
        editInPlainText: {
            description: "actions.editInPlainText.label",
            default: {
                win: [ "alt+7" ],
                linux: [ "alt+7" ],
                mac: [ "option+7" ],
                ios: [ "option+7" ]
            }
        }
    }
};

var tD = {
    description: "actions.codingSAS.label",
    actions: {
        submit: {
            description: "actions.submit.label",
            default: {
                win: [ "f3" ],
                linux: [ "f3" ],
                mac: [ "f3" ],
                ios: [ "command+shift+3" ]
            }
        },
        createSnippet: {
            description: "actions.createSnippet.label",
            default: {
                win: [ "alt+a" ],
                linux: [ "alt+a" ],
                mac: [ "command+option+a" ],
                ios: [ "command+option+a" ]
            }
        },
        insertSnippet: {
            description: "actions.insertSnippet.label",
            default: {
                win: [ "alt+i" ],
                linux: [ "alt+i" ],
                mac: [ "command+option+i" ],
                ios: [ "command+option+i" ]
            }
        },
        displaySyntaxHelp: {
            description: "actions.displaySyntaxHelp.label",
            default: {
                win: [ "" ],
                linux: [ "" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        }
    }
};

var oD = {
    description: "actions.codingNavigation.label",
    actions: {
        gotoServerFiles: {
            editable: false,
            description: "actions.gotoServerFiles.label",
            default: {
                win: [ "alt+1" ],
                linux: [ "alt+1" ],
                mac: [ "option+1" ],
                ios: [ "option+1" ]
            }
        },
        gotoSecondaryTab: {
            editable: false,
            description: "actions.gotoSecondaryTab.label",
            default: {
                win: [ "alt+2" ],
                linux: [ "alt+2" ],
                mac: [ "option+2" ],
                ios: [ "option+2" ]
            }
        },
        gotoPrimaryTab: {
            editable: false,
            description: "actions.gotoPrimaryTab.label",
            default: {
                win: [ "alt+3" ],
                linux: [ "alt+3" ],
                mac: [ "option+3" ],
                ios: [ "option+3" ]
            }
        },
        gotoCodeTab: {
            editable: false,
            description: "actions.gotoCodeTab.label",
            default: {
                win: [ "alt+4" ],
                linux: [ "alt+4" ],
                mac: [ "option+4" ],
                ios: [ "option+4" ]
            }
        },
        gotoLog: {
            editable: false,
            description: "actions.gotoLog.label",
            default: {
                win: [ "alt+5" ],
                linux: [ "alt+5" ],
                mac: [ "option+5" ],
                ios: [ "option+5" ]
            }
        },
        gotoResults: {
            editable: false,
            description: "actions.gotoResults.label",
            default: {
                win: [ "alt+6" ],
                linux: [ "alt+6" ],
                mac: [ "option+6" ],
                ios: [ "option+6" ]
            }
        },
        gotoLine: {
            editable: false,
            description: "actions.gotoLine.label",
            default: {
                win: [ "ctrl+g" ],
                linux: [ "ctrl+g" ],
                mac: [ "ctrl+g" ],
                ios: [ "ctrl+g" ]
            }
        },
        toMatchBracket: {
            editable: false,
            description: "actions.toMatchBracket.label",
            default: {
                win: [ "ctrl+[", "ctrl+]" ],
                linux: [ "ctrl+[", "ctrl+]" ],
                mac: [ "ctrl+[", "ctrl+]" ],
                ios: [ "ctrl+[", "ctrl+]" ]
            }
        },
        toMatchDoEnd: {
            editable: false,
            description: "actions.toMatchDoEnd.label",
            default: {
                win: [ "alt+[", "alt+]" ],
                linux: [ "alt+[", "alt+]" ],
                mac: [ "option+[", "option+]" ],
                ios: [ "option+[", "option+]" ]
            }
        },
        toNextMarkedLine: {
            description: "actions.toNextMarkedLine.label",
            default: {
                win: [ "alt+>" ],
                linux: [ "alt+>" ],
                mac: [ "option+>" ],
                ios: [ "option+>" ]
            }
        },
        toPreMarkedLine: {
            description: "actions.toPreMarkedLine.label",
            default: {
                win: [ "alt+<" ],
                linux: [ "alt+<" ],
                mac: [ "option+<" ],
                ios: [ "option+<" ]
            }
        },
        toggleLineMarker: {
            description: "actions.toggleLineMarker.label",
            default: {
                win: [ "ctrl+f2" ],
                linux: [ "ctrl+f2" ],
                mac: [ "command+f2" ],
                ios: [ "command+option+t" ]
            }
        },
        clearLog: {
            description: "actions.clearLog.label",
            default: {
                win: [ "" ],
                linux: [ "" ],
                mac: [ "" ],
                ios: [ "" ]
            }
        }
    }
};

var nD = {
    description: "actions.codingMacro.label",
    actions: {
        addMacro: {
            description: "actions.addMacro.label",
            default: {
                win: [ "ctrl+shift+m" ],
                linux: [ "ctrl+shift+m" ],
                mac: [ "command+shift+m" ],
                ios: [ "command+shift+m" ]
            }
        },
        executeMacro: {
            description: "actions.executeMacro.label",
            default: {
                win: [ "ctrl+f1" ],
                linux: [ "ctrl+f1" ],
                mac: [ "command+f1" ],
                ios: [ "command+f1" ]
            }
        },
        playMacro: {
            description: "actions.playMacro.label",
            default: {
                win: [ "alt+f8" ],
                linux: [ "alt+f8" ],
                mac: [ "option+f8" ],
                ios: [ "option+f8" ]
            }
        },
        startCompleteMacro: {
            description: "actions.startCompleteMacro.label",
            default: {
                win: [ "alt+shift+r" ],
                linux: [ "alt+shift+r" ],
                mac: [ "option+shift+r" ],
                ios: [ "option+shift+r" ]
            }
        }
    }
};

var aD = {
    general: Z_,
    textGeneral: J_,
    textNavigation: Q_,
    codingGeneral: eD,
    codingSAS: tD,
    codingNavigation: oD,
    codingMacro: nD
};

function rD(e, t, o) {
    return {
        type: e,
        payload: t,
        meta: o
    };
}

let sD = function(e) {
    e["Edge"] = "Edge";
    e["LegacyEdge"] = "LegacyEdge";
    e["Chrome"] = "Chrome";
    e["Firefox"] = "Firefox";
    e["Safari"] = "Safari";
    e["Unknown"] = "Unknown";
    return e;
}({});

function iD(e) {
    if (/Edg\/[\w\.]*/.test(e)) {
        return sD.Edge;
    } else if (/Edge\/[\w\.]*/.test(e)) {
        return sD.LegacyEdge;
    } else if (/Chrome\/[\w\.]*/.test(e)) {
        return sD.Chrome;
    } else if (/Firefox\/[\w\.]*/.test(e)) {
        return sD.Firefox;
    } else if (/Safari\/[\w\.]*/.test(e)) {
        return sD.Safari;
    }
    return sD.Unknown;
}

let lD = null;

function cD() {
    if (lD === null) {
        lD = iD(window.navigator.userAgent);
    }
    return lD;
}

const dD = new Map;

let uD = [];

const mD = e => {
    if (!dD.get(e) && uD.indexOf(e) < 0) {
        uD.push(e);
        return;
    }
    for (const [t, o] of dD) {
        if (t === e) {
            o();
            break;
        }
    }
};

function pD(e, o, n) {
    if (typeof e === "function") {
        return e(n);
    } else if (e !== undefined) {
        return e;
    } else {
        return t(o, n);
    }
}

let fD = function(e) {
    e["Win"] = "Win";
    e["Mac"] = "Mac";
    e["Linux"] = "Linux";
    e["Android"] = "Android";
    e["iOS"] = "iOS";
    e["Unknown"] = "Unknown";
    return e;
}({});

function gD(e) {
    if (e.indexOf("Win") === 0) return fD.Win;
    if (e.indexOf("Mac") === 0) return fD.Mac;
    if (e.indexOf("Linux") === 0) return fD.Linux;
    if (e.indexOf("Android") === 0) return fD.Android;
    if (/iPhone|iPad|iPod/.test(e)) return fD.iOS;
    return fD.Unknown;
}

let hD = null;

function bD() {
    if (hD === null) {
        hD = gD(window.navigator.platform);
    }
    return hD;
}

const vD = e => e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");

const yD = e => /^[A-Za-z0-9_./#?:=()%&~@\-]*$/.test(e);

const xD = e => /^(?!.*--)([a-zA-Z0-9\-\_.@:]+)([\w]+\.)+([a-zA-Z0-9\-\_.\/#=():%&~]*)?(\?([\w-]+(=[\w-]+)(&[\w-]+(=[\w-]*)?)*))?$/i.test(e);

const SD = e => /^(?!.*?\.\.)/.test(e);

const wD = e => /^(?!.*--)(((ftps?|https?):\/\/)|mailto?:)?((?!.*\.$)(1?\d?\d|25[0-5]|2[0-4]\d)(\.|$)){4}(:+[0-9]{1,5})?(\/[a-zA-Z0-9=?/]{1,})?$/.test(e);

const CD = e => /^-?[0-9]+$/.test(`${e.replace(" ", "")}`);

const ED = e => /^-?[0-9a-zA-Z]+$/.test(`${e.replace(" ", "")}`);

const ID = (e, t) => {
    const o = new RegExp(t, "g");
    return (e.match(o) || []).length;
};

function _D() {
    try {
        window.top.location.host;
        return true;
    } catch (e) {
        return false;
    }
}

const DD = {
    Escape: "esc",
    " ": "space",
    ArrowLeft: "left",
    ArrowRight: "right",
    ArrowUp: "up",
    ArrowDown: "down",
    "-": "minus",
    ",": "comma",
    ".": "period",
    "+": "plus"
};

const LD = {
    NumpadAdd: "numpadplus",
    NumpadSubtract: "numpadminus",
    NumpadMultiply: "numpad*",
    NumpadDivide: "numpad/",
    NumpadDecimal: "numpadpoint",
    NumpadEnter: "enter"
};

const TD = [ "Control", "Meta", "Alt", "Shift" ];

const RD = (e, t) => {
    if (!t) t = bD().toLowerCase();
    const o = t === "mac" || t === "ios";
    const n = [];
    if (e.ctrlKey) {
        n.push("ctrl");
    }
    if (e.metaKey && o) {
        n.push("command");
    }
    if (e.altKey) {
        n.push(o ? "option" : "alt");
    }
    const a = o && e.altKey && (e.keyCode >= "A".charCodeAt(0) && e.keyCode <= "Z".charCodeAt(0) || e.keyCode >= "0".charCodeAt(0) && e.keyCode <= "9".charCodeAt(0));
    if (e.shiftKey && !(e.key.length === 1 && e.key !== " " && !e.code.startsWith("Numpad") && !a && !(o && e.key.charCodeAt(0) >= "a".charCodeAt(0) && e.key.charCodeAt(0) <= "z".charCodeAt(0)) && e.key.toLowerCase() === e.key)) {
        n.push("shift");
    }
    let r = e.key;
    if (e.code?.startsWith("Numpad")) {
        if (LD.hasOwnProperty(e.code)) {
            r = LD[e.code];
        } else {
            r = e.code;
        }
    } else if (DD.hasOwnProperty(e.key)) {
        r = DD[e.key];
    }
    if (a) {
        r = String.fromCharCode(e.keyCode);
    }
    if (TD.indexOf(r) === -1) n.push(r);
    return n.join("+").toLowerCase();
};

const kD = (e, t, o) => {
    const n = [];
    if (!e) return n;
    if (!o) {
        let e = bD();
        if (e === fD.Unknown) e = fD.Win;
        o = e.toLowerCase();
    }
    for (const a in t) {
        if (t.hasOwnProperty(a)) {
            const r = t[a];
            const s = r.actions;
            for (const t in s) {
                if (s.hasOwnProperty(t)) {
                    const a = s[t];
                    const r = a.default[o];
                    let i = a[o];
                    if (!i && r) {
                        i = r;
                    }
                    if (i && i.indexOf(e) !== -1) {
                        n.push(t);
                    }
                }
            }
        }
    }
    return n;
};

const AD = i({
    shortcuts: aD,
    saveShortcuts: () => {},
    actionCache: {
        current: {}
    }
});

const MD = () => {
    const {shortcuts: e, actionCache: t} = l(AD);
    const o = s((o => {
        const n = RD(o);
        if (t.current[n] === undefined) {
            t.current[n] = kD(n, e);
        }
        return {
            key: n,
            actions: t.current[n]
        };
    }), [ t, e ]);
    return {
        getActionsByKeyEvent: o
    };
};

function ND(e) {
    const {getActionsByKeyEvent: t} = MD();
    a((() => {
        function o(o) {
            const {actions: n} = t(o);
            if (n.includes("invertAppColors")) {
                e();
                o.preventDefault();
            }
        }
        document.body.addEventListener("keydown", o);
        return () => {
            document.body.removeEventListener("keydown", o);
        };
    }), [ t, e ]);
}

function OD(e, t, o) {
    const {writeAccessState: {isWriteAccessDetected: n}, dataProvider: r} = eL();
    const s = R_()?.get("appName");
    a((() => {
        let a = true;
        async function i() {
            try {
                const o = await r.setSettings(e.map((e => ({
                    ...e,
                    ...s && {
                        application: s
                    }
                }))));
                if (a) {
                    t(o.items);
                }
            } catch (e) {
                if (a) {
                    o();
                }
            }
        }
        if (n && e.length > 0) {
            i();
        }
        return () => {
            a = false;
        };
    }), [ n, r, e, t, o, s ]);
}

class PD {
    state={};
    getItems() {
        return {
            ...this.state
        };
    }
    putItems(e) {
        for (const t of e) {
            if (typeof t.value === "string") {
                this.state[t.key] = t.value;
            } else {
                delete this.state[t.key];
            }
        }
    }
    removeItems(e) {
        for (const t of e) {
            delete this.state[t.key];
        }
    }
}

class BD {
    constructor() {
        if (_D()) {
            if (!window.top.transientStore) {
                Object.defineProperty(window.top, "transientStore", {
                    configurable: false,
                    enumerable: true,
                    value: Object.seal(new PD)
                });
            }
            this.store = window.top.transientStore;
        } else {
            this.store = new PD;
        }
    }
    hasWriteAccess() {
        return Promise.resolve(true);
    }
    setSettings(...e) {
        const t = e[0];
        const o = t.map((e => ({
            key: e.id,
            value: e.value
        })));
        this.store.putItems(o);
        return Promise.resolve({
            items: [ ...t ]
        });
    }
    getSettings() {
        const e = this.store.getItems();
        const t = [];
        for (const o in e) {
            t.push({
                id: o,
                value: e[o]
            });
        }
        return Promise.resolve({
            items: t
        });
    }
    deleteSettings(...e) {
        const t = e[0];
        this.store.removeItems(t.map((e => ({
            key: e
        }))));
        return Promise.resolve();
    }
}

const zD = p((() => import("./chunk4.mjs")));

function FD() {
    return {
        [L_.THEMES_KEY]: "sas_corporate",
        [L_.PLAY_EARCONS]: "false",
        [L_.PLAY_VISUAL_EFFECTS]: "true",
        [L_.ENABLE_POPUP_DISPLAY_DURATION]: "false",
        [L_.POPUP_DISPLAY_DURATION]: "5",
        [L_.FOCUS_COLOR]: t_.tokensExperimental["color-action-background-focus"],
        [L_.FOCUS_THICKNESS]: t_.tokensExperimental["size-action-border-width-focus"],
        [L_.FOCUS_OPACITY]: "100",
        [L_.FOCUS_OVERRIDE]: "false",
        [L_.INVERT_APP_COLORS]: "false",
        [L_.FOCUS_TRUNCATED_HEADINGS]: "false"
    };
}

function jD(e) {
    const t = GD();
    const [o, r] = n((() => t.get(e)));
    a((() => {
        function o(e) {
            r(e);
        }
        t.registerChangeListener(e, o);
        return () => {
            t.deRegisterChangeListener(e, o);
        };
    }), [ t, e ]);
    return o;
}

const VD = () => {
    console.error("The global settings service must be used within GlobalSettingsServiceContext Provider");
};

let HD = {
    get: e => FD()[e],
    set: () => VD(),
    reset: () => VD(),
    registerChangeListener: () => {},
    deRegisterChangeListener: () => {}
};

const UD = i(HD);

function GD() {
    return l(UD);
}

let KD = {};

let WD = 0;

let $D = false;

const YD = e => {
    if ($D) {
        e(HD);
    }
    const t = WD;
    KD[t] = e;
    WD++;
    return () => {
        const {[t]: e, ...o} = KD;
        KD = o;
    };
};

const qD = e => {
    Object.keys(KD).forEach((t => KD[t](e)));
};

const XD = () => HD;

function ZD(e) {
    const o = R_()?.get("appId");
    const [a, i] = n([]);
    const [l, d] = n([]);
    const [u, m] = n(false);
    const p = c({});
    const f = c(new Map);
    const [g, h] = n({});
    const b = C_();
    const v = {
        bd: b.tokensExperimental["color-action-border-focus"],
        bdWidth: b.themeVariant === "high-contrast" ? "4px" : "1px",
        bdStyle: b.tokensExperimental["style-action-border-focus"]
    };
    const y = g[L_.FOCUS_COLOR] ?? ze(Fe(v.bd));
    const x = g[L_.FOCUS_THICKNESS] ?? v.bdWidth.replace(/px$/, "");
    const S = db();
    const w = g[L_.FORMAT_LOCALE_KEY] ?? S;
    const [C, E] = n(undefined);
    const I = e.getDefaulApplicationTheme;
    const _ = s((() => {
        I().then((e => E(e.id)), (() => {
            console.error("Error fetching default theme from themes service.");
        }));
    }), [ I ]);
    const D = FD();
    const L = {
        ...D,
        [L_.THEMES_KEY]: C ?? D[L_.THEMES_KEY],
        [L_.FORMAT_LOCALE_KEY]: w,
        [L_.FOCUS_COLOR]: y,
        [L_.FOCUS_THICKNESS]: x
    };
    p.current = {
        ...L,
        ...g
    };
    U_({
        ...p.current,
        [L_.FOCUS_COLOR]: g[L_.FOCUS_COLOR],
        [L_.FOCUS_THICKNESS]: g[L_.FOCUS_THICKNESS],
        [L_.FOCUS_OPACITY]: g[L_.FOCUS_OPACITY]
    });
    JD(f.current, p.current);
    const T = s(((e, t) => {
        const o = t?.data;
        if (o) {
            const e = Object.keys(L_).map((e => L_[e]));
            const t = {};
            for (const n of o.data) {
                if (e.indexOf(n.key) >= 0) {
                    switch (n.key) {
                      case L_.THEMES_KEY:
                        n.value = n.value === "Default" ? undefined : n.value;
                        if (!n.value) {
                            _();
                        }
                        break;

                      case L_.FORMAT_LOCALE_KEY:
                      case L_.OFFLINE_LOCALE_KEY:
                        n.value = n.value === "Default" ? undefined : n.value;
                        break;

                      case L_.FOCUS_COLOR:
                        n.value = n.value === T_ ? undefined : n.value;
                    }
                    t[n.key] = n.value;
                }
            }
            h((e => {
                const o = {
                    ...e,
                    ...t
                };
                return Object.keys(o).reduce(((e, t) => o[t] !== undefined ? {
                    ...e,
                    [t]: o[t]
                } : e), {});
            }));
        }
    }), [ _ ]);
    B_(T);
    G_(o);
    const R = s((e => {
        const t = Object.keys(L_).map((e => L_[e]));
        const o = e.reduce(((e, o) => {
            if (t.indexOf(o.id) >= 0) {
                return {
                    ...e,
                    [o.id]: o.value
                };
            }
            return e;
        }), {});
        if (!o[L_.THEMES_KEY]) {
            _();
        }
        if (o[L_.FOCUS_COLOR] === T_) {
            delete o[L_.FOCUS_COLOR];
        }
        h((e => ({
            ...e,
            ...o
        })));
    }), [ _ ]);
    const k = s((() => {
        console.error("Get preferences call to obtain global settings failed.");
    }), []);
    W_(R, k);
    const A = s((e => {
        i([]);
        const t = e.reduce(((e, t) => e.concat([ {
            key: t.id,
            value: t.value || undefined,
            oldValue: p.current[t.id]
        } ])), []);
        j_(t, o);
    }), [ o ]);
    const M = s((() => {
        i([]);
        const e = a.map((e => e.id));
        console.error(`Failed to save the following global settings ${e}`);
        const t = e.indexOf(L_.INVERT_APP_COLORS) >= 0;
        if (t) {
            m(true);
        }
    }), [ a ]);
    OD(a, A, M);
    const N = s((() => {
        d([]);
        const e = l.map((e => ({
            id: e,
            value: ""
        })));
        const t = e.reduce(((e, t) => e.concat([ {
            key: t.id,
            value: t.value || undefined,
            oldValue: p.current[t.id]
        } ])), []);
        j_(t, o);
    }), [ l, o ]);
    const O = s((() => {
        console.error(`Failed to save the following global settings ${l}`);
        const e = l.indexOf(L_.INVERT_APP_COLORS) >= 0;
        if (e) {
            m(true);
        }
        d([]);
    }), [ l ]);
    K_(l, N, O);
    const P = s((() => {
        const e = Boolean(g[L_.INVERT_APP_COLORS]);
        if (e) {
            d((e => e.concat(L_.INVERT_APP_COLORS)));
            i((e => e.filter((e => e.id !== L_.INVERT_APP_COLORS))));
        } else {
            d((e => e.filter((e => e !== L_.INVERT_APP_COLORS))));
            i((e => e.concat({
                id: L_.INVERT_APP_COLORS,
                value: "true"
            })));
        }
    }), [ g ]);
    ND(P);
    const B = r((() => {
        const e = {
            get: e => p.current[e],
            set: (e, t) => i((o => o.concat({
                id: e,
                value: t
            }))),
            reset: e => d((t => t.concat(e))),
            registerChangeListener: (e, t) => {
                const o = f.current.get(e) || [];
                f.current.set(e, [ ...o, t ]);
            },
            deRegisterChangeListener: (e, t) => {
                const o = f.current.get(e);
                if (Array.isArray(o)) {
                    f.current.set(e, o.filter((e => e !== t)));
                }
            }
        };
        HD = e;
        $D = true;
        qD(e);
        return e;
    }), []);
    return t(UD.Provider, {
        value: B
    }, u ? t(zD, {
        onClose: () => m(false)
    }) : null, e.children);
}

function JD(e, t) {
    const o = k_(t);
    a((() => {
        if (o !== undefined) {
            for (const n in L_) {
                const a = L_[n];
                const r = t[a];
                const s = o[a];
                if (r !== s) {
                    const t = e.get(a);
                    t?.forEach((e => e.apply(null, [ r ])));
                }
            }
        }
    }), [ e, t, o ]);
}

const QD = i({
    writeAccessState: {
        isWriteAccessDetected: true,
        hasWriteAccess: true
    },
    dataProvider: N_
});

function eL() {
    return l(QD);
}

function tL(e) {
    const o = e.dataProvider ?? O_();
    const {isWriteAccessDetectionPending: n, hasWriteAccess: a} = X_(o);
    const s = r((() => {
        let e = o;
        if (!n && !a) {
            e = new BD;
        }
        return {
            writeAccessState: {
                isWriteAccessDetected: !n,
                hasWriteAccess: a
            },
            dataProvider: e
        };
    }), [ o, n, a ]);
    return t(QD.Provider, {
        value: s
    }, t(ZD, {
        getDefaulApplicationTheme: o?.getTheme
    }, e.children));
}

const oL = i((() => {}));

const nL = i({
    siblingCount: 0,
    setSiblingCount: () => {}
});

function aL() {
    return l(oL);
}

function rL() {
    return l(nL);
}

function sL(e) {
    const [o, a] = n(false);
    const [r, s] = n(0);
    return t(oL.Provider, {
        value: a
    }, t(nL.Provider, {
        value: {
            siblingCount: r,
            setSiblingCount: s
        }
    }, t("div", {
        "aria-hidden": o,
        style: {
            height: "100%",
            width: "100%"
        }
    }, e.children)));
}

var iL = "sas_components-Modal-Modal_container";

var lL = "sas_components-Modal-Modal_modal-block-layer";

var cL = "sas_components-Modal-Modal_nonmodal-block-layer";

var dL = "sas_components-Modal-Modal_nonmodal-block-content";

var uL = {
    container: iL,
    modalBlockLayer: lL,
    nonmodalBlockLayer: cL,
    nonmodalBlockContent: dL
};

const mL = {
    preventScroll: true
};

const pL = (e, t) => {
    bb.subscribe(e, t);
};

const fL = (e, t) => {
    bb.unsubscribe(e, t);
};

const gL = u((({showBlockLayer: e = true, hideAnimation: o = false, isOpen: r, ...i}, l) => {
    const d = C_();
    const u = y_();
    const m = jD(L_.PLAY_VISUAL_EFFECTS) === "true" && !o;
    const p = I_({
        bg: Jv(d.c.black, .25),
        "anim-dur-enter": d.animation.duration.enter.m,
        "anim-tf-enter": d.animation.timingFunction.enter.m,
        "anim-dur-exit": d.animation.duration.exit.m,
        "anim-tf-exit": d.animation.timingFunction.exit.m
    }, "modal");
    const f = cy();
    const [g, h] = n(null);
    const [b, v] = n(false);
    const y = c(null);
    const x = s((() => r && v(!e)), [ e, r ]);
    Qv(y, x, true);
    a((() => {
        if (!e) {
            const e = () => {
                r && v(true);
            };
            pL("modal:disableFocusLockNonModal", e);
            return () => {
                fL("modal:disableFocusLockNonModal", e);
            };
        }
    }), [ e, r ]);
    const S = aL();
    const {siblingCount: w, setSiblingCount: C} = rL();
    const E = c(-1);
    a((() => {
        if (r) {
            C((e => {
                E.current = e + 1;
                return e + 1;
            }));
            return () => {
                C((e => {
                    E.current = e - 1;
                    return e - 1;
                }));
            };
        }
    }), [ C, r ]);
    a((() => {
        if (e) {
            S(r);
            return () => {
                S(false);
            };
        }
    }), [ r, e, S ]);
    const I = m ? .3 : 0;
    const _ = {
        visible: {
            opacity: 1,
            transition: {
                duration: I,
                ease: [ 0, .5, .2, 1 ]
            }
        },
        hidden: {
            opacity: 0,
            transition: {
                duration: I,
                ease: [ 0, .5, .2, 1 ]
            }
        }
    };
    if (f === null) {
        return null;
    } else {
        return Ie.createPortal(t(Me, {
            mode: "wait"
        }, r ? t(Ne.div, Ee({
            initial: "hidden",
            animate: "visible",
            exit: "hidden",
            variants: _
        }, m ? i.animation : null, {
            className: ke(uL.container, e ? uL.modalBlockLayer : uL.nonmodalBlockLayer),
            style: {
                ...p,
                ...u
            },
            onContextMenu: i.onContextMenu,
            ref: e => {
                D_(y, e);
                D_(l, e);
            }
        }, !e && {
            onFocus: () => v(false),
            onMouseDown: () => v(false)
        }, {
            "data-testid": i.testId,
            id: i.id,
            "data-is-modal": e ? true : undefined
        }, w > 1 && {
            "aria-hidden": E.current === w ? false : true
        }), t(sy, {
            value: e ? g : f
        }, t(De, Ee({}, !e && {
            className: uL.nonmodalBlockContent
        }, !e && {
            disabled: b
        }, {
            returnFocus: mL
        }, i.focusLockProps), e ? t(sL, null, i.children) : i.children)), e ? t("div", {
            ref: h
        }) : null) : null), f);
    }
}));

const hL = {
    name: "Add",
    suppressMirroring: true,
    tooltipKey: "Add.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "add", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,7c0,0.552-0.448,1-1,1H8v4c0,0.552-0.448,1-1,1s-1-0.448-1-1V8H2C1.448,8,1,7.552,1,7 c0-0.552,0.448-1,1-1h4V2c0-0.552,0.448-1,1-1s1,0.448,1,1v4h4C12.552,6,13,6.448,13,7z",
        className: "iconColor"
    }))
};

const bL = {
    name: "AddRoute",
    suppressMirroring: true,
    tooltipKey: "AddRoute.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "AddRoute", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M11,0C9.343,0,8,1.343,8,3c0,0.772,0.3,1.468,0.779,2H6l1.146,1.146L4.734,8.559C4.244,8.21,3.648,8,3,8 c-1.657,0-3,1.343-3,3s1.343,3,3,3s3-1.343,3-3c0-0.648-0.21-1.244-0.559-1.734l2.413-2.413L9,8V5.221C9.532,5.7,10.228,6,11,6 c1.657,0,3-1.343,3-3S12.657,0,11,0z M3,13c-1.104,0-2-0.895-2-2c0-1.105,0.896-2,2-2s2,0.895,2,2C5,12.105,4.104,13,3,13z M11,5 C9.896,5,9,4.105,9,3c0-1.105,0.896-2,2-2s2,0.895,2,2C13,4.105,12.104,5,11,5z",
        className: "iconColor"
    }))
};

const vL = {
    name: "AddTab",
    suppressMirroring: true,
    tooltipKey: "AddTab.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "addTab", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12,7c0,0.414-0.336,0.75-0.75,0.75h-3.5v3.5C7.75,11.664,7.414,12,7,12s-0.75-0.336-0.75-0.75v-3.5h-3.5 C2.336,7.75,2,7.414,2,7c0-0.414,0.336-0.75,0.75-0.75h3.5v-3.5C6.25,2.336,6.586,2,7,2s0.75,0.336,0.75,0.75v3.5h3.5 C11.664,6.25,12,6.586,12,7z",
        className: "iconColor"
    }))
};

const yL = {
    name: "AddToInsights",
    suppressMirroring: true,
    tooltipKey: "AddToInsights.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "AddToInsights", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,13.5C7,13.775,6.775,14,6.5,14h-3C3.225,14,3,13.775,3,13.5C3,13.225,3.225,13,3.5,13h3 C6.775,13,7,13.225,7,13.5z M6.5,11h-3C3.225,11,3,11.225,3,11.5C3,11.775,3.225,12,3.5,12h3C6.775,12,7,11.775,7,11.5 C7,11.225,6.775,11,6.5,11z M6.357,8.229C6.255,8.48,6.166,8.736,6.108,9H3.892C3.726,8.245,3.375,7.533,2.865,6.934 C2.307,6.277,2,5.413,2,4.5C2,2.57,3.346,1,5,1c0.007,0,0.014,0.002,0.021,0.002c0.25-0.331,0.54-0.624,0.863-0.884 C5.599,0.046,5.305,0,5,0C2.791,0,1,2.015,1,4.5c0,1.199,0.421,2.28,1.103,3.081C2.679,8.258,3,9.112,3,10h4 c0-0.46,0.09-0.909,0.253-1.331C6.938,8.551,6.638,8.405,6.357,8.229z M12.25,3.25h-2.5v-2.5C9.75,0.337,9.413,0,9,0 S8.25,0.337,8.25,0.75v2.5h-2.5C5.337,3.25,5,3.587,5,4c0,0.412,0.337,0.75,0.75,0.75h2.5v2.5C8.25,7.662,8.587,8,9,8 s0.75-0.338,0.75-0.75v-2.5h2.5C12.663,4.75,13,4.412,13,4C13,3.587,12.663,3.25,12.25,3.25z",
        className: "iconColor"
    }))
};

const xL = {
    name: "Alert",
    suppressMirroring: true,
    tooltipKey: "Alert.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Alert", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,12c-0.631,0-1.143-0.512-1.143-1.143c0-0.631,0.512-1.143,1.143-1.143c0.631,0,1.143,0.512,1.143,1.143 C8.143,11.488,7.631,12,7,12z M7.762,8.571H6.238L5.857,4h2.286L7.762,8.571z M13.76,11.319L8.609,0.917 c-0.706-1.223-2.512-1.223-3.218,0L0.24,11.319C-0.453,12.518,0.437,14,1.849,14h10.302C13.563,14,14.452,12.518,13.76,11.319z M12.894,12.583C12.822,12.708,12.604,13,12.151,13H1.849c-0.453,0-0.671-0.292-0.743-0.417c-0.066-0.115-0.199-0.419,0-0.764 L6.287,1.361C6.474,1.041,6.849,1,7,1c0.151,0,0.526,0.041,0.743,0.417l5.121,10.345C13.093,12.164,12.961,12.468,12.894,12.583z",
        className: "iconColor"
    }))
};

const SL = {
    name: "ArrowCollapsed",
    suppressMirroring: false,
    tooltipKey: "ArrowCollapsed.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowCollapsed", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10,7c0,0.163-0.08,0.316-0.213,0.409l-5,3.5c-0.226,0.159-0.538,0.104-0.696-0.122 c-0.157-0.227-0.104-0.538,0.123-0.696L8.628,7L4.213,3.909c-0.228-0.158-0.28-0.47-0.123-0.696c0.158-0.226,0.47-0.281,0.696-0.122 l5,3.5C9.92,6.684,10,6.837,10,7z",
        className: "iconColor"
    }))
};

const wL = {
    name: "ArrowHigher",
    suppressMirroring: true,
    tooltipKey: "ArrowHigher.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowHigher", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12.868,6.162l-5.5-6c-0.189-0.207-0.548-0.207-0.737,0l-5.5,6C0.997,6.308,0.962,6.52,1.042,6.701 C1.122,6.883,1.301,7,1.499,7h2.5v6.5c0,0.276,0.224,0.5,0.5,0.5h5c0.276,0,0.5-0.224,0.5-0.5V7h2.5 c0.198,0,0.378-0.117,0.458-0.299C13.037,6.52,13.002,6.308,12.868,6.162z M8.999,6v7h-4V6H2.636l4.363-4.76L11.363,6H8.999z",
        className: "iconColor"
    }))
};

const CL = {
    name: "ArrowLeftRemoveAllDualSelector",
    suppressMirroring: false,
    tooltipKey: "ArrowLeftRemoveAllDualSelector.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowLeftRemoveAllDualSelector", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,6h6c0.552,0,1,0.448,1,1c0,0.552-0.448,1-1,1H7L6,7L7,6z M3.825,10.879 c0.21-0.18,0.234-0.495,0.054-0.705L1.159,7l2.721-3.175C4.06,3.616,4.035,3.3,3.825,3.121C3.617,2.941,3.3,2.965,3.121,3.175 l-3,3.5c-0.161,0.187-0.161,0.463,0,0.65l3,3.5C3.219,10.941,3.359,11,3.5,11C3.615,11,3.731,10.96,3.825,10.879z M6.825,10.879 c0.21-0.18,0.234-0.495,0.054-0.705L4.159,7l2.721-3.175C7.06,3.616,7.035,3.3,6.825,3.121C6.616,2.941,6.3,2.965,6.121,3.175 l-3,3.5c-0.161,0.187-0.161,0.463,0,0.65l3,3.5C6.219,10.941,6.359,11,6.5,11C6.615,11,6.731,10.96,6.825,10.879z",
        className: "iconColor"
    }))
};

const EL = {
    name: "ArrowLeftRemoveDualSelector",
    suppressMirroring: false,
    tooltipKey: "ArrowLeftRemoveDualSelector.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowLeftRemoveDualSelector", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,7c0,0.552-0.448,1-1,1H6C5.448,8,5,7.552,5,7c0-0.552,0.448-1,1-1h6C12.552,6,13,6.448,13,7z M4.825,10.879c0.21-0.18,0.234-0.495,0.054-0.705L2.159,7l2.721-3.175C5.06,3.616,5.035,3.3,4.825,3.121 C4.617,2.941,4.3,2.965,4.121,3.175l-3,3.5c-0.161,0.187-0.161,0.463,0,0.65l3,3.5C4.219,10.941,4.359,11,4.5,11 C4.615,11,4.731,10.96,4.825,10.879z",
        className: "iconColor"
    }))
};

const IL = {
    name: "ArrowLower",
    suppressMirroring: true,
    tooltipKey: "ArrowLower.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowLower", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12.957,7.306c-0.08-0.182-0.259-0.299-0.458-0.299h-2.5v-6.5c0-0.276-0.224-0.5-0.5-0.5h-5 c-0.276,0-0.5,0.224-0.5,0.5v6.5h-2.5c-0.198,0-0.378,0.117-0.458,0.299c-0.08,0.181-0.045,0.393,0.089,0.539l5.5,6 c0.189,0.207,0.548,0.207,0.737,0l5.5-6C13.002,7.699,13.037,7.487,12.957,7.306z M11.363,8.007l-4.363,4.76l-4.363-4.76h2.363v-7h4 v7H11.363z",
        className: "iconColor"
    }))
};

const _L = {
    name: "ArrowRightAddAllDualSelector",
    suppressMirroring: false,
    tooltipKey: "ArrowRightAddAllDualSelector.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowRightAddAllDualSelector", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M8,7L7,8H5v2c0,0.552-0.448,1-1,1s-1-0.448-1-1V8H1C0.448,8,0,7.552,0,7c0-0.552,0.448-1,1-1h2V4 c0-0.552,0.448-1,1-1s1,0.448,1,1v2h2L8,7z M10.879,10.825l3-3.5c0.161-0.187,0.161-0.463,0-0.65l-3-3.5 c-0.179-0.21-0.495-0.233-0.705-0.054C9.965,3.3,9.94,3.616,10.121,3.825L12.841,7l-2.721,3.175 c-0.18,0.209-0.156,0.525,0.054,0.705C10.269,10.96,10.385,11,10.5,11C10.641,11,10.781,10.941,10.879,10.825z M7.879,10.825l3-3.5 c0.161-0.187,0.161-0.463,0-0.65l-3-3.5c-0.179-0.21-0.495-0.233-0.705-0.054C6.965,3.3,6.94,3.616,7.121,3.825L9.841,7 l-2.721,3.175c-0.18,0.209-0.156,0.525,0.054,0.705C7.269,10.96,7.385,11,7.5,11C7.641,11,7.781,10.941,7.879,10.825z",
        className: "iconColor"
    }))
};

const DL = {
    name: "ArrowRightAddDualSelector",
    suppressMirroring: false,
    tooltipKey: "ArrowRightAddDualSelector.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowRightAddDualSelector", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M9,7c0,0.552-0.448,1-1,1H6v2c0,0.552-0.448,1-1,1s-1-0.448-1-1V8H2C1.448,8,1,7.552,1,7 c0-0.552,0.448-1,1-1h2V4c0-0.552,0.448-1,1-1s1,0.448,1,1v2h2C8.552,6,9,6.448,9,7z M9.879,10.825l3-3.5 c0.161-0.187,0.161-0.463,0-0.65l-3-3.5c-0.179-0.21-0.495-0.233-0.705-0.054C8.965,3.3,8.94,3.616,9.121,3.825L11.841,7 l-2.721,3.175c-0.18,0.209-0.156,0.525,0.054,0.705C9.269,10.96,9.385,11,9.5,11C9.641,11,9.781,10.941,9.879,10.825z",
        className: "iconColor"
    }))
};

const LL = {
    name: "ArrowSignificantlyHigher",
    suppressMirroring: true,
    tooltipKey: "ArrowSignificantlyHigher.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSignificantlyHigher", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12.957,6.694c-0.08,0.182-0.259,0.299-0.458,0.299H10v6.5C10,13.77,9.776,14,9.5,14h-5 C4.224,14,4,13.77,4,13.493v-6.5H1.5c-0.198,0-0.378-0.117-0.458-0.299c-0.08-0.181-0.045-0.393,0.089-0.539l5.5-6 c0.189-0.207,0.548-0.207,0.737,0l5.5,6C13.002,6.301,13.038,6.513,12.957,6.694z",
        className: "iconColor"
    }))
};

const TL = {
    name: "ArrowSignificantlyLower",
    suppressMirroring: true,
    tooltipKey: "ArrowSignificantlyLower.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSignificantlyLower", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12.869,7.838l-5.5,6c-0.189,0.207-0.548,0.207-0.737,0l-5.5-6C0.998,7.692,0.962,7.48,1.042,7.299 C1.122,7.117,1.302,7,1.5,7H4V0.5C4,0.224,4.224,0,4.5,0h5C9.776,0,10,0.224,10,0.5V7h2.5c0.198,0,0.378,0.117,0.458,0.299 C13.038,7.48,13.002,7.692,12.869,7.838z",
        className: "iconColor"
    }))
};

const RL = {
    name: "ArrowSmallDown",
    suppressMirroring: true,
    tooltipKey: "ArrowSmallDown.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSmallDown", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6.999,13l-4-5h3V2c0-0.552,0.448-1,1-1s1,0.448,1,1v6h3L6.999,13z",
        className: "iconColor"
    }))
};

const kL = {
    name: "ArrowSmallDownBtn",
    suppressMirroring: true,
    tooltipKey: "ArrowSmallDownBtn.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSmallDownBtn", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,9L4,4h6L7,9z",
        className: "iconColor"
    }))
};

const AL = {
    name: "ArrowSmallDownEnd",
    suppressMirroring: true,
    tooltipKey: "ArrowSmallDownEnd.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSmallDownEnd", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10.999,13.5c0,0.276-0.224,0.5-0.5,0.5h-7c-0.276,0-0.5-0.224-0.5-0.5s0.224-0.5,0.5-0.5h7 C10.776,13,10.999,13.224,10.999,13.5z M10.999,7h-3V1c0-0.552-0.448-1-1-1s-1,0.448-1,1v6h-3l4,5L10.999,7z",
        className: "iconColor"
    }))
};

const ML = {
    name: "ArrowSmallLeft",
    suppressMirroring: false,
    tooltipKey: "ArrowSmallLeft.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSmallLeft", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M1,7l5-4v3h6c0.552,0,1,0.448,1,1s-0.448,1-1,1H6v3L1,7z",
        className: "iconColor"
    }))
};

const NL = {
    name: "ArrowSmallLeftBtn",
    suppressMirroring: false,
    tooltipKey: "ArrowSmallLeftBtn.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSmallLeftBtn", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M9,4v6L4,7L9,4z",
        className: "iconColor"
    }))
};

const OL = {
    name: "ArrowSmallRight",
    suppressMirroring: false,
    tooltipKey: "ArrowSmallRight.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSmallRight", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M8,11V8H2C1.448,8,1,7.553,1,7s0.448-1,1-1h6V3l5,4L8,11z",
        className: "iconColor"
    }))
};

const PL = {
    name: "ArrowSmallRightBtn",
    suppressMirroring: false,
    tooltipKey: "ArrowSmallRightBtn.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSmallRightBtn", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10,7l-5,3V4L10,7z",
        className: "iconColor"
    }))
};

const BL = {
    name: "ArrowSmallUp",
    suppressMirroring: true,
    tooltipKey: "ArrowSmallUp.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSmallUp", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10.999,6h-3v6c0,0.552-0.448,1-1,1s-1-0.448-1-1V6h-3l4-5L10.999,6z",
        className: "iconColor"
    }))
};

const zL = {
    name: "ArrowSmallUpBtn",
    suppressMirroring: true,
    tooltipKey: "ArrowSmallUpBtn.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSmallUpBtn", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10,9H4l3-5L10,9z",
        className: "iconColor"
    }))
};

const FL = {
    name: "ArrowSmallUpEnd",
    suppressMirroring: true,
    tooltipKey: "ArrowSmallUpEnd.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSmallUpEnd", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10.499,1h-7c-0.276,0-0.5-0.224-0.5-0.5S3.223,0,3.499,0h7c0.276,0,0.5,0.224,0.5,0.5S10.776,1,10.499,1z M6.999,2l-4,5h3v6c0,0.552,0.448,1,1,1s1-0.448,1-1V7h3L6.999,2z",
        className: "iconColor"
    }))
};

const jL = {
    name: "ArrowSortDown",
    suppressMirroring: true,
    tooltipKey: "ArrowSortDown.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSortDown", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10.854,9.854l-3,3C7.756,12.951,7.628,13,7.5,13s-0.256-0.049-0.354-0.146l-3-3 c-0.195-0.195-0.195-0.512,0-0.707s0.512-0.195,0.707,0L7,11.293V1.5C7,1.224,7.224,1,7.5,1S8,1.224,8,1.5v9.793l2.146-2.146 c0.195-0.195,0.512-0.195,0.707,0S11.049,9.658,10.854,9.854z",
        className: "iconColor"
    }))
};

const VL = {
    name: "ArrowSortUp",
    suppressMirroring: true,
    tooltipKey: "ArrowSortUp.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ArrowSortUp", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10.854,4.854C10.756,4.951,10.628,5,10.5,5s-0.256-0.049-0.354-0.146L8,2.707V12.5 C8,12.776,7.776,13,7.5,13S7,12.776,7,12.5V2.707L4.854,4.854c-0.195,0.195-0.512,0.195-0.707,0s-0.195-0.512,0-0.707l3-3 c0.195-0.195,0.512-0.195,0.707,0l3,3C11.049,4.342,11.049,4.658,10.854,4.854z",
        className: "iconColor"
    }))
};

const HL = {
    name: "Attach",
    suppressMirroring: true,
    tooltipKey: "Attach.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "attach", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M4.368,9.605c-0.117,0.121-0.443,0.47,0,0.913c0.248,0.248,0.639,0.251,0.883,0l6.273-6.486 c0.676-0.699,0.676-1.836,0-2.535c-0.651-0.673-1.801-0.673-2.452,0L2.799,7.984c-1.108,1.146-1.108,3.01,0,4.156 c1.11,1.147,2.912,1.145,4.021,0l3.921-4.054c0.189-0.196,0.496-0.196,0.685,0c0.189,0.196,0.189,0.513,0,0.708l-3.921,4.054 C6.762,13.616,5.786,14,4.809,14c-0.976,0-1.952-0.384-2.695-1.152c-1.486-1.536-1.486-4.036,0-5.573l6.273-6.487 c1.018-1.052,2.806-1.052,3.822,0c1.054,1.089,1.054,2.862,0,3.952l-6.273,6.486c-0.31,0.321-0.718,0.481-1.127,0.481 c-0.408,0-0.816-0.16-1.126-0.481c-0.3-0.31-0.466-0.724-0.466-1.165s0.166-0.855,0.466-1.165l4.705-4.865 c0.189-0.196,0.496-0.196,0.685,0c0.189,0.196,0.189,0.513,0,0.708L4.368,9.605z",
        className: "iconColor"
    }))
};

const UL = {
    name: "AvatarGroup",
    suppressMirroring: true,
    tooltipKey: "AvatarGroup.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "AvatarGroup", t.className ].join(" "),
        width: "16",
        height: "16",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 16 16",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H16V16H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M5,3C3.896,3,3,4.343,3,6c0,1.657,0.896,3,2,3s2-1.343,2-3C7,4.343,6.104,3,5,3z M5,8C4.602,8,4,7.202,4,6 c0-1.221,0.592-2,1-2s1,0.779,1,2C6,7.202,5.398,8,5,8z M8.185,9.881c-0.361-0.354-0.817-0.607-1.319-0.75 C6.356,9.669,5.715,10,5,10S3.644,9.669,3.134,9.131c-0.502,0.143-0.958,0.396-1.319,0.75c-0.543,0.531-0.797,1.261-0.805,2.005 C2.376,14.339,4.993,16,8,16c0.047,0,0.093-0.006,0.14-0.007l0.756-3.251C9.154,11.732,8.937,10.617,8.185,9.881z M7.928,12.495 L7.352,14.97c-2.188-0.204-4.17-1.434-5.325-3.326c0.051-0.42,0.22-0.786,0.487-1.048c0.121-0.118,0.262-0.222,0.418-0.308 C3.552,10.756,4.256,11,5,11s1.448-0.244,2.068-0.712c0.156,0.086,0.297,0.189,0.418,0.308C7.943,11.043,8.112,11.771,7.928,12.495z M11,1C9.896,1,9,2.343,9,4c0,1.657,0.896,3,2,3s2-1.343,2-3C13,2.343,12.104,1,11,1z M11,6c-0.398,0-1-0.798-1-2 c0-1.221,0.592-2,1-2s1,0.779,1,2C12,5.202,11.398,6,11,6z M14.896,10.742l-0.365,1.868c-1.222,1.728-3.11,2.944-5.293,3.284 l-0.052,0.018l0.251-1.079c1.647-0.346,3.139-1.283,4.156-2.633l0.335-1.705c0.185-0.725,0.016-1.452-0.441-1.899 c-0.121-0.118-0.262-0.222-0.418-0.308C12.448,8.756,11.744,9,11,9S9.551,8.756,8.93,8.287C8.78,8.368,8.649,8.462,8.548,8.561 C8.522,8.59,8.459,8.665,8.381,8.76c-0.277-0.192-0.58-0.35-0.905-0.473c0.189-0.231,0.314-0.383,0.338-0.406 c0.361-0.354,0.817-0.607,1.319-0.75C9.644,7.669,10.285,8,11,8s1.356-0.331,1.866-0.869c0.502,0.143,0.958,0.396,1.319,0.75 C14.937,8.617,15.154,9.732,14.896,10.742z",
        className: "iconColor"
    }))
};

const GL = {
    name: "AvatarIndividual",
    suppressMirroring: true,
    tooltipKey: "AvatarIndividual.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "AvatarIndividual", t.className ].join(" "),
        width: "16",
        height: "16",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 16 16",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H16V16H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M11.972,9.118c-0.439-0.512-0.991-0.88-1.598-1.096C9.711,8.631,8.895,9,7.99,9S6.27,8.631,5.607,8.021 C5,8.237,4.448,8.605,4.009,9.118c-0.94,1.097-1.211,2.758-0.888,4.263l0.128,0.783C4.585,15.313,6.22,16,7.99,16 s3.406-0.687,4.742-1.837l0.128-0.783C13.183,11.875,12.912,10.215,11.972,9.118z M11.883,13.172l-0.076,0.457 C10.657,14.527,9.345,15,7.99,15s-2.667-0.473-3.816-1.37l-0.066-0.41c-0.286-1.342-0.029-2.646,0.661-3.452 c0.197-0.23,0.433-0.427,0.694-0.581C6.227,9.721,7.089,10,7.99,10s1.764-0.279,2.527-0.813c0.262,0.154,0.497,0.351,0.694,0.581 C11.903,10.573,12.159,11.878,11.883,13.172z M7.99,0c-1.683,0-3,1.757-3,4s1.317,4,3,4s3-1.757,3-4S9.673,0,7.99,0z M7.99,7 c-1.104,0-2-1.343-2-3c0-1.657,0.896-3,2-3s2,1.343,2,3C9.99,5.657,9.095,7,7.99,7z",
        className: "iconColor"
    }))
};

const KL = {
    name: "Behaviors",
    suppressMirroring: true,
    tooltipKey: "Behaviors.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Behaviors", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M2,3c0-1.657,0.895-3,2-3s2,1.343,2,3c0,1.657-0.895,3-2,3S2,4.657,2,3z M5,9c0-1.073,0.43-2.044,1.12-2.763 c-0.086-0.032-0.165-0.08-0.254-0.106C5.356,6.669,4.715,7,4,7S2.644,6.669,2.134,6.131c-0.502,0.143-0.958,0.396-1.319,0.75 C0.063,7.617-0.154,8.732,0.104,9.742l0.362,1.854C0.512,11.83,0.718,12,0.957,12h5.425C5.542,11.266,5,10.2,5,9z M13.78,12.72 l-2.205-2.205C11.839,10.069,12,9.555,12,9c0-1.656-1.344-3-3-3C7.344,6,6,7.344,6,9c0,1.656,1.344,3,3,3 c0.555,0,1.069-0.161,1.515-0.424l2.205,2.205c0.146,0.146,0.338,0.22,0.53,0.22s0.384-0.073,0.53-0.22 C14.073,13.487,14.073,13.013,13.78,12.72z M13,13",
        className: "iconColor"
    }))
};

const WL = {
    name: "Blank",
    suppressMirroring: true,
    tooltipKey: "Blank.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "blank", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }))
};

const $L = {
    name: "Bold",
    suppressMirroring: true,
    tooltipKey: "Bold.icon.label",
    localeOverrides: {
        da: {
            mappedName: "boldDaDeHuSv"
        },
        de: {
            mappedName: "boldDaDeHuSv"
        },
        es: {
            mappedName: "boldEs"
        },
        fr: {
            mappedName: "boldFrIt"
        },
        hu: {
            mappedName: "boldDaDeHuSv"
        },
        it: {
            mappedName: "boldFrIt"
        },
        no: {
            mappedName: "boldDaDeHuSv"
        },
        pb: {
            mappedName: "boldEs"
        },
        pt: {
            mappedName: "boldEs"
        },
        ru: {
            mappedName: "boldRu"
        },
        sv: {
            mappedName: "boldDaDeHuSv"
        },
        tr: {
            mappedName: "boldTr"
        },
        uk: {
            mappedName: "boldRu"
        }
    },
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "bold", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10.357,6.82C9.929,6.381,9.363,6.115,8.66,6.025V5.996c0.581-0.17,1.04-0.455,1.376-0.855 c0.337-0.4,0.505-0.891,0.505-1.471c0-0.898-0.324-1.568-0.971-2.01C8.922,1.221,8.139,1,7.222,1H3v10.621h3.901 c1.162,0,2.136-0.248,2.921-0.742C10.607,10.383,11,9.602,11,8.531C11,7.83,10.786,7.262,10.357,6.82z M4.927,2.561h1.545 c0.734,0,1.274,0.104,1.621,0.307c0.347,0.205,0.52,0.543,0.52,1.014c0,0.459-0.168,0.814-0.504,1.064 C7.773,5.195,7.283,5.32,6.641,5.32H4.927V2.561z M6.656,10.031H4.927v-3.09h1.805c0.805,0,1.397,0.115,1.774,0.344 C8.884,7.516,9.073,7.9,9.073,8.441C9.073,9.5,8.267,10.031,6.656,10.031z",
        className: "iconColor"
    }))
};

const YL = {
    name: "BoldDaDeHuSv",
    suppressMirroring: true,
    tooltipKey: "BoldDaDeHuSv.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "bold_x5F_Da_x5F_De_x5F_Hu_x5F_Sv", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M5.463,2.65v2.91h4.68v1.59h-4.68v4.471h-1.89V1h6.855v1.65H5.463z",
        className: "iconColor"
    }))
};

const qL = {
    name: "BoldEs",
    suppressMirroring: true,
    tooltipKey: "BoldEs.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "bold_x5F_Es", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12,1v10.621H9.436L4.051,3.416H4.019v8.205H2V1h2.676l5.273,7.951h0.032V1H12z",
        className: "iconColor"
    }))
};

const XL = {
    name: "BoldFrIt",
    suppressMirroring: true,
    tooltipKey: "BoldFrIt.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "bold_x5F_Fr_x5F_It", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12,5.83v5.506c-1.173,0.549-2.533,0.824-4.083,0.824c-1.152,0-2.176-0.238-3.073-0.713 c-0.897-0.474-1.596-1.136-2.095-1.986C2.249,8.609,2,7.641,2,6.551C2,5.44,2.254,4.465,2.765,3.625 c0.51-0.84,1.21-1.486,2.102-1.941S6.76,1,7.871,1c0.836,0,1.618,0.121,2.347,0.359c0.729,0.24,1.317,0.566,1.766,0.977l-1.33,1.41 c-0.285-0.311-0.678-0.568-1.177-0.773c-0.5-0.205-1.03-0.307-1.59-0.307c-0.744,0-1.402,0.17-1.973,0.51S4.902,3.98,4.592,4.57 C4.281,5.16,4.126,5.82,4.126,6.55c0,0.75,0.155,1.422,0.466,2.018c0.311,0.594,0.759,1.059,1.345,1.395 c0.586,0.334,1.267,0.502,2.041,0.502c0.826,0,1.544-0.125,2.156-0.375V7.391H7.856V5.83H12z",
        className: "iconColor"
    }))
};

const ZL = {
    name: "BoldRu",
    suppressMirroring: true,
    tooltipKey: "BoldRu.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "bold_x5F_Ru", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M14,11.621h-2.257L7.865,6.34H7.851v5.281H6.149V6.34H6.135l-3.879,5.281H0L4.311,5.83L0.23,1h2.189 l3.716,4.59h0.013V1h1.703v4.59h0.013L11.581,1h2.189L9.689,5.83L14,11.621z",
        className: "iconColor"
    }))
};

const JL = {
    name: "BoldTr",
    suppressMirroring: true,
    tooltipKey: "BoldTr.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "bold_x5F_Tr", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M11.627,11.621H8.973L4.308,6.295H4.263v5.326h-1.89V1h1.89v4.59h0.045L8.748,1h2.55L6.333,5.906 L11.627,11.621z",
        className: "iconColor"
    }))
};

const QL = {
    name: "BooleanData",
    suppressMirroring: true,
    tooltipKey: "BooleanData.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "booleanData", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M2,13h4V1H2V13z M3,2h2v10H3V2z M12,1v12H8V1H12z",
        className: "iconColor"
    }))
};

const eT = {
    name: "BpmnEndEvent",
    suppressMirroring: true,
    tooltipKey: "BpmnEndEvent.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "BPMNEndEvent", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,0C3.134,0,0,3.134,0,7c0,3.866,3.134,7,7,7s7-3.134,7-7C14,3.134,10.866,0,7,0z M7,12 c-2.757,0-5-2.243-5-5s2.243-5,5-5s5,2.243,5,5S9.757,12,7,12z",
        className: "iconColor"
    }))
};

const tT = {
    name: "BusinessCompany",
    suppressMirroring: true,
    tooltipKey: "BusinessCompany.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "BusinessCompany", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12,7V0H2v7H0v7h14V7H12z M9,2h2v2H9V2z M9,5h2v2H9V5z M9,8h2v2H9V8z M9,11h2v2H9V11z M6,2h2v2H6V2z M6,5h2 v2H6V5z M6,8h2v2H6V8z M6,11h2v2H6V11z M3,2h2v2H3V2z M3,5h2v2H3V5z M3,8h2v2H3V8z M3,11h2v2H3V11z",
        className: "iconColor"
    }))
};

const oT = {
    name: "Carousel",
    suppressMirroring: true,
    tooltipKey: "Carousel.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Carousel", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6,5c0,0.552-0.447,1-1,1C4.447,6,4,5.552,4,5s0.447-1,1-1C5.553,4,6,4.448,6,5z M4,10h6L8.5,5L7,9L6,7L4,10 z M12,4v6l2-3L12,4z M2,10V4L0,7L2,10z M2,3V1h10v2h1V1c0-0.552-0.448-1-1-1H2C1.448,0,1,0.448,1,1v2H2z M12,11v2H2v-2H1v2 c0,0.552,0.448,1,1,1h10c0.552,0,1-0.448,1-1v-2H12z",
        className: "iconColor"
    }))
};

const nT = {
    name: "Category",
    suppressMirroring: true,
    tooltipKey: "Category.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Category", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12.5,2C12.776,2,13,2.224,13,2.5v9c0,0.276-0.224,0.5-0.5,0.5H12V9c0-1.103-0.897-2-2-2S8,7.897,8,9v3H6V9 c0-1.103-0.897-2-2-2C2.897,7,2,7.897,2,9v3H1.5C1.224,12,1,11.776,1,11.5v-9C1,2.224,1.224,2,1.5,2H12.5 M12.5,1h-11 C0.672,1,0,1.672,0,2.5v9C0,12.328,0.672,13,1.5,13H3V9c0-0.553,0.447-1,1-1s1,0.447,1,1v4h4V9c0-0.553,0.447-1,1-1s1,0.447,1,1v4 h1.5c0.828,0,1.5-0.672,1.5-1.5v-9C14,1.672,13.328,1,12.5,1L12.5,1z",
        className: "iconColor"
    }))
};

const aT = {
    name: "Checkmark",
    suppressMirroring: true,
    tooltipKey: "Checkmark.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Checkmark", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6.2,11c-0.211,0-0.415-0.084-0.566-0.234l-2.4-2.4c-0.313-0.312-0.313-0.819,0-1.131 c0.313-0.312,0.819-0.312,1.131,0l1.689,1.689l3.467-5.547c0.235-0.375,0.729-0.489,1.102-0.255 c0.375,0.234,0.489,0.728,0.255,1.102l-4,6.4c-0.129,0.207-0.346,0.343-0.588,0.371C6.26,10.998,6.23,11,6.2,11z",
        className: "iconColor"
    }))
};

const rT = {
    name: "Choice",
    suppressMirroring: true,
    tooltipKey: "Choice.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Choice", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10,7c0,1.657-1.343,3-3,3c-1.657,0-3-1.343-3-3c0-1.657,1.343-3,3-3C8.657,4,10,5.343,10,7z",
        className: "iconColor"
    }))
};

const sT = {
    name: "CircularSelection",
    suppressMirroring: true,
    tooltipKey: "CircularSelection.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "CirclularSelection", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,0C6.998,0,6.995,0,6.993,0C6.992,0,6.992,0,6.991,0C6.989,0,6.987,0,6.985,0c0,0-0.001,0-0.002,0 C6.981,0,6.979,0,6.977,0c0,0-0.001,0-0.002,0C6.973,0,6.971,0,6.97,0C6.969,0,6.968,0,6.967,0C6.965,0,6.963,0,6.961,0L6.96,0 C6.958,0,6.956,0,6.953,0C6.953,0,6.952,0,6.951,0C6.949,0,6.948,0,6.946,0C6.945,0,6.945,0,6.944,0C6.942,0,6.939,0,6.937,0 C6.937,0,6.936,0,6.935,0C6.933,0,6.932,0,6.93,0C6.929,0,6.928,0,6.928,0C6.926,0,6.923,0,6.921,0c0,0-0.001,0-0.001,0 c-0.002,0-0.004,0-0.006,0c-0.001,0-0.001,0-0.002,0c-0.002,0-0.004,0-0.005,0c-0.001,0-0.001,0-0.002,0c-0.002,0-0.004,0-0.007,0 c-0.001,0-0.001,0-0.002,0c-0.002,0-0.003,0-0.005,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.004,0-0.006,0c-0.001,0-0.002,0-0.002,0 c-0.002,0-0.004,0-0.006,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.003,0-0.005,0c-0.001,0-0.002,0-0.002,0c-0.002,0-0.004,0-0.007,0 c-0.001,0-0.002,0-0.002,0c-0.002,0-0.003,0-0.005,0c-0.001,0-0.002,0-0.002,0c-0.002,0-0.004,0-0.006,0c-0.001,0-0.002,0-0.003,0 c-0.002,0-0.004,0-0.005,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.003,0-0.005,0c-0.001,0-0.002,0-0.002,0c-0.002,0-0.004,0-0.007,0 c-0.001,0-0.002,0-0.002,0c-0.001,0-0.003,0-0.005,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.003,0-0.005,0c-0.001,0-0.002,0-0.003,0 c-0.002,0-0.003,0-0.005,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.004,0-0.006,0 c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.002,0-0.003,0-0.005,0 c-0.001,0-0.002,0-0.004,0c-0.001,0-0.002,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.004,0-0.006,0 c-0.001,0-0.002,0-0.003,0c-0.001,0-0.002,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.002,0-0.003,0-0.005,0 c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.004,0s-0.002,0-0.003,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.004,0-0.006,0 c-0.001,0-0.002,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.002,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.004,0-0.006,0 c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.002,0-0.004,0-0.005,0 c-0.001,0-0.002,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.002,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.004,0-0.006,0 c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.005,0-0.007,0c-0.001,0-0.002,0-0.003,0 c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.004,0-0.007,0 c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.003,0-0.006,0-0.009,0.001c0,0,0,0,0,0 c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.002,0c-0.002,0-0.005,0-0.007,0 c-0.001,0-0.002,0-0.002,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.002,0c-0.003,0-0.006,0-0.009,0.001c0,0,0,0,0,0 c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.002,0c-0.002,0-0.005,0-0.007,0 c-0.001,0-0.002,0-0.002,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.002,0c-0.003,0-0.006,0-0.009,0.001c0,0,0,0-0.001,0 c-0.001,0-0.003,0-0.004,0c-0.001,0-0.001,0-0.002,0c-0.002,0-0.003,0-0.004,0c-0.001,0-0.001,0-0.002,0 c-0.003,0-0.005,0-0.008,0.001c-0.001,0-0.002,0-0.002,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0 c-0.003,0-0.006,0-0.009,0.001c0,0,0,0,0,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0 c-0.001,0-0.002,0-0.003,0c-0.002,0-0.005,0-0.007,0.001c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0 c-0.001,0-0.002,0-0.003,0c-0.003,0-0.005,0-0.007,0.001c-0.001,0-0.002,0-0.002,0c-0.001,0-0.002,0-0.004,0 c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.004,0c-0.002,0-0.004,0-0.006,0c-0.001,0-0.002,0-0.003,0 c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.004,0-0.006,0c-0.001,0-0.002,0-0.004,0 c-0.001,0-0.002,0-0.003,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.002,0-0.003,0-0.005,0c-0.001,0-0.002,0-0.004,0 c-0.001,0-0.002,0-0.003,0c-0.001,0-0.002,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.004,0-0.006,0.001 c-0.001,0-0.002,0-0.003,0c-0.001,0-0.002,0-0.004,0c-0.001,0-0.002,0-0.003,0c-0.002,0-0.003,0-0.005,0c-0.001,0-0.002,0-0.004,0 c-0.002,0-0.003,0-0.005,0c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0 c-0.002,0-0.004,0-0.006,0.001c-0.001,0-0.002,0-0.003,0c-0.001,0-0.003,0-0.004,0c-0.001,0-0.002,0-0.003,0 c-0.002,0-0.004,0-0.007,0.001c0,0-0.001,0-0.001,0c-0.002,0-0.004,0-0.006,0.001c-0.001,0-0.001,0-0.002,0 c-0.002,0-0.004,0-0.006,0.001c0,0-0.001,0-0.001,0c-0.002,0-0.005,0-0.007,0.001c-0.001,0-0.001,0-0.002,0 c-0.002,0-0.004,0-0.006,0.001c0,0-0.001,0-0.002,0c-0.002,0-0.005,0-0.007,0.001c0,0,0,0,0,0c-0.002,0-0.004,0-0.007,0.001 c-0.001,0-0.001,0-0.002,0c-0.002,0-0.004,0-0.006,0.001c0,0,0,0-0.001,0c-0.002,0-0.005,0.001-0.007,0.001c0,0-0.001,0-0.001,0 c-0.002,0-0.004,0-0.006,0.001c0,0-0.001,0-0.001,0C6.22,0.043,6.215,0.043,6.211,0.044c0,0-0.001,0-0.001,0 C6.202,0.045,6.195,0.046,6.187,0.047l0,0C6.126,0.054,6.064,0.062,6.003,0.07L5.998,0.071C5.834,0.095,5.671,0.124,5.511,0.159 l0.139,0.972L6.144,1.06C6.426,1.02,6.713,1,7,1h0.5V0.018C7.335,0.006,7.168,0,7,0L7,0z M3.644,0.855 C3.498,0.935,3.355,1.02,3.215,1.11L3.214,1.111C3.162,1.145,3.109,1.18,3.058,1.215c0,0,0,0,0,0 C3.053,1.218,3.049,1.221,3.045,1.224c0,0,0,0,0,0C3.04,1.227,3.036,1.229,3.032,1.232c0,0,0,0-0.001,0.001 C3.027,1.236,3.023,1.238,3.019,1.241c0,0-0.001,0-0.001,0.001C3.015,1.245,3.011,1.247,3.007,1.25 c-0.001,0-0.001,0.001-0.001,0.001C3.004,1.252,3.002,1.253,3,1.255c0,0,0,0-0.001,0C2.998,1.256,2.996,1.258,2.994,1.259 c-0.001,0-0.001,0.001-0.002,0.001C2.991,1.261,2.989,1.262,2.988,1.263c0,0-0.001,0.001-0.001,0.001 C2.985,1.265,2.983,1.267,2.981,1.268c-0.001,0-0.001,0.001-0.002,0.001C2.978,1.27,2.977,1.271,2.975,1.272 c-0.001,0-0.001,0.001-0.002,0.001C2.972,1.274,2.97,1.275,2.969,1.277C2.968,1.277,2.967,1.278,2.966,1.278 C2.965,1.279,2.964,1.28,2.963,1.281C2.962,1.281,2.961,1.282,2.961,1.282C2.959,1.283,2.958,1.285,2.956,1.286 C2.955,1.286,2.954,1.287,2.953,1.288C2.952,1.288,2.951,1.289,2.95,1.29C2.95,1.29,2.949,1.291,2.948,1.291 C2.946,1.292,2.945,1.294,2.943,1.295C2.942,1.295,2.941,1.296,2.94,1.297C2.94,1.297,2.939,1.298,2.938,1.298 C2.934,1.301,2.931,1.304,2.927,1.306c-0.001,0-0.001,0.001-0.002,0.001C2.922,1.31,2.918,1.313,2.914,1.316 c0,0-0.001,0.001-0.001,0.001C2.909,1.319,2.905,1.322,2.901,1.325c0,0,0,0,0,0C2.598,1.545,2.313,1.788,2.049,2.052l0.644,0.742 L3.07,2.466c0.216-0.187,0.446-0.36,0.686-0.514l0.42-0.271L3.644,0.855L3.644,0.855z M0.854,3.646 C0.774,3.793,0.699,3.942,0.63,4.094C0.629,4.096,0.628,4.098,0.627,4.1c0,0.001,0,0.001-0.001,0.002 C0.626,4.103,0.625,4.105,0.624,4.107c0,0.001-0.001,0.001-0.001,0.002C0.622,4.11,0.621,4.113,0.62,4.115c0,0,0,0,0,0 C0.619,4.117,0.618,4.119,0.617,4.121c0,0,0,0.001-0.001,0.001C0.615,4.127,0.613,4.131,0.611,4.136c0,0,0,0.001,0,0.001 C0.609,4.141,0.607,4.145,0.605,4.15l0,0.001C0.478,4.434,0.37,4.728,0.281,5.03L0.279,5.035C0.233,5.193,0.193,5.353,0.158,5.515 L1.1,5.791l0.14-0.48c0.08-0.273,0.18-0.543,0.299-0.802l0.208-0.455L0.854,3.646L0.854,3.646z M0.99,7.363L0.018,7.502 C0.03,7.67,0.047,7.836,0.071,8.001c0,0.002,0.001,0.004,0.001,0.006c0,0.001,0,0.002,0,0.003c0,0.001,0,0.003,0.001,0.004 c0,0.001,0,0.002,0,0.003c0,0.002,0.001,0.004,0.001,0.006c0,0,0,0.001,0,0.002c0,0.002,0.001,0.003,0.001,0.005 c0,0.001,0,0.002,0,0.002c0,0.002,0.001,0.004,0.001,0.007c0,0,0,0,0,0c0,0.002,0.001,0.005,0.001,0.007c0,0.001,0,0.001,0,0.002 c0,0.002,0.001,0.004,0.001,0.007l0,0c0,0.002,0.001,0.005,0.001,0.007c0,0,0,0.001,0,0.001c0,0.002,0.001,0.005,0.001,0.007l0,0 c0.001,0.005,0.002,0.01,0.002,0.015l0,0c0.001,0.005,0.002,0.01,0.002,0.015l0,0C0.133,8.4,0.199,8.692,0.283,8.976l0.002,0.008 c0.047,0.158,0.099,0.314,0.156,0.467l0.942-0.277l-0.141-0.48C1.162,8.422,1.101,8.14,1.061,7.858L0.99,7.363L0.99,7.363z M2.14,10.554l-0.742,0.644c0.115,0.154,0.237,0.302,0.364,0.446c0,0,0,0,0,0c0.001,0.001,0.002,0.002,0.003,0.004c0,0,0,0,0,0 c0.002,0.002,0.004,0.005,0.007,0.007c0,0,0,0,0,0.001c0.001,0.001,0.002,0.002,0.003,0.003c0,0,0.001,0.001,0.001,0.001 c0.002,0.002,0.003,0.004,0.005,0.006c0,0.001,0.001,0.001,0.001,0.002c0.001,0.001,0.002,0.002,0.003,0.003 c0.001,0.001,0.001,0.001,0.002,0.002c0.001,0.001,0.002,0.003,0.004,0.004c0.001,0.001,0.002,0.002,0.002,0.003 c0.001,0.001,0.002,0.002,0.002,0.003c0.001,0.001,0.002,0.002,0.003,0.003c0.001,0.001,0.001,0.002,0.002,0.002 c0.001,0.001,0.002,0.003,0.004,0.004c0.001,0.001,0.001,0.001,0.002,0.002c0.001,0.001,0.002,0.003,0.004,0.004 c0,0,0.001,0.001,0.001,0.001c0.001,0.002,0.003,0.003,0.004,0.005c0,0,0.001,0.001,0.001,0.001 c0.001,0.002,0.003,0.003,0.004,0.005c0,0,0,0,0.001,0.001c0.002,0.002,0.003,0.003,0.005,0.005c0,0,0.001,0.001,0.001,0.001 c0.001,0.002,0.003,0.003,0.004,0.005c0,0,0,0,0,0c0.002,0.002,0.003,0.003,0.005,0.005c0,0,0.001,0.001,0.001,0.001 c0.002,0.002,0.003,0.003,0.005,0.005c0,0,0,0,0,0c0.002,0.002,0.003,0.004,0.005,0.005c0,0,0,0,0,0.001 c0.003,0.004,0.007,0.007,0.01,0.011c0,0,0,0,0,0c0.003,0.004,0.007,0.007,0.01,0.011v0c0.004,0.004,0.007,0.008,0.011,0.011v0 c0.171,0.183,0.351,0.356,0.54,0.52l0.003,0.003c0.125,0.108,0.254,0.212,0.386,0.311l0.643-0.742l-0.378-0.327 c-0.216-0.187-0.42-0.39-0.607-0.606L2.14,10.554L2.14,10.554z M4.833,12.62l-0.275,0.943c0.154,0.057,0.31,0.109,0.468,0.156 l0.007,0.002c0.059,0.017,0.119,0.034,0.179,0.05l0,0c0.005,0.001,0.01,0.003,0.014,0.004c0,0,0.001,0,0.001,0 c0.002,0.001,0.005,0.001,0.007,0.002l0,0c0.002,0.001,0.005,0.001,0.007,0.002c0.001,0,0.001,0,0.002,0 c0.002,0,0.004,0.001,0.005,0.001c0,0,0.001,0,0.002,0c0.002,0.001,0.004,0.001,0.006,0.002c0.001,0,0.002,0,0.002,0.001 c0.001,0,0.003,0.001,0.004,0.001c0.001,0,0.002,0.001,0.003,0.001c0.002,0,0.003,0.001,0.005,0.001 c0.002,0,0.003,0.001,0.004,0.001c0.001,0,0.002,0.001,0.003,0.001c0.001,0,0.002,0.001,0.004,0.001c0.001,0,0.002,0,0.003,0.001 c0.002,0.001,0.004,0.001,0.006,0.002c0.001,0,0.002,0,0.003,0.001c0.001,0,0.003,0.001,0.004,0.001c0.001,0,0.001,0,0.002,0 c0.005,0.001,0.009,0.002,0.014,0.003c0,0,0.001,0,0.001,0c0.386,0.095,0.784,0.159,1.193,0.187l0.138-0.972L6.15,12.94 c-0.282-0.04-0.564-0.101-0.836-0.18L4.833,12.62L4.833,12.62z M9.953,12.249l-0.454,0.208c-0.259,0.119-0.528,0.22-0.801,0.3 l-0.48,0.141l0.277,0.942c0.163-0.036,0.325-0.077,0.484-0.124l0.001,0l0,0c0.002-0.001,0.005-0.001,0.007-0.002c0,0,0,0,0.001,0 c0.005-0.001,0.01-0.003,0.015-0.004c0,0,0,0,0,0c0.005-0.001,0.01-0.003,0.015-0.004c0,0,0,0,0,0 c0.005-0.001,0.01-0.003,0.015-0.004l0,0c0.304-0.092,0.598-0.204,0.883-0.334l0.002-0.001c0.151-0.069,0.299-0.144,0.445-0.224 L9.953,12.249L9.953,12.249z M12.323,9.817l-0.27,0.421c-0.154,0.24-0.327,0.47-0.513,0.686l-0.327,0.378l0.743,0.643 c0.117-0.117,0.229-0.238,0.338-0.363l0.003-0.003c0.218-0.252,0.418-0.519,0.598-0.8l0.002-0.003 c0.089-0.139,0.174-0.282,0.254-0.428L12.323,9.817L12.323,9.817z M13.982,6.5H13V7c0,0.284-0.02,0.569-0.059,0.848l-0.07,0.495 l0.972,0.137c0.047-0.22,0.084-0.443,0.11-0.67c0,0,0,0,0-0.001c0.001-0.005,0.001-0.01,0.002-0.015c0-0.001,0-0.001,0-0.002 c0-0.001,0-0.003,0-0.004c0-0.001,0-0.001,0-0.002c0-0.003,0.001-0.005,0.001-0.008c0-0.001,0-0.001,0-0.002 c0-0.001,0-0.003,0-0.004c0-0.001,0-0.002,0-0.003c0-0.001,0-0.003,0-0.004c0-0.001,0-0.003,0-0.004c0-0.002,0-0.003,0.001-0.005 c0-0.001,0-0.003,0-0.004c0-0.001,0-0.002,0-0.003c0-0.001,0-0.003,0-0.004c0-0.001,0-0.002,0-0.003c0-0.002,0-0.004,0.001-0.006 c0-0.001,0-0.002,0-0.002c0-0.002,0-0.003,0-0.005c0-0.001,0-0.001,0-0.002c0-0.005,0.001-0.009,0.001-0.014c0,0,0-0.001,0-0.002 c0-0.002,0-0.004,0.001-0.006c0,0,0-0.001,0-0.001c0-0.002,0-0.005,0.001-0.007c0,0,0,0,0-0.001c0-0.002,0-0.004,0.001-0.006 c0,0,0-0.001,0-0.001c0-0.005,0.001-0.01,0.001-0.014c0,0,0-0.001,0-0.001c0-0.002,0-0.005,0.001-0.007c0,0,0,0,0-0.001 c0-0.005,0.001-0.01,0.001-0.015c0,0,0,0,0-0.001c0.01-0.112,0.018-0.226,0.023-0.339v0c0.001-0.013,0.001-0.026,0.002-0.039v0 c0-0.008,0.001-0.015,0.001-0.023c0,0,0-0.001,0-0.001c0-0.005,0-0.01,0.001-0.015c0,0,0,0,0-0.001c0-0.008,0-0.015,0.001-0.023 c0,0,0,0,0-0.001c0-0.005,0-0.01,0-0.015c0,0,0,0,0-0.001c0-0.002,0-0.005,0-0.007c0,0,0-0.001,0-0.001c0-0.005,0-0.01,0-0.015 c0,0,0-0.001,0-0.001c0-0.002,0-0.005,0-0.007v0c0-0.002,0-0.005,0-0.007c0,0,0-0.001,0-0.001c0-0.002,0-0.004,0-0.006 c0,0,0-0.001,0-0.001c0-0.005,0-0.01,0-0.015c0,0,0-0.001,0-0.001c0-0.002,0-0.004,0-0.006c0,0,0-0.001,0-0.001 c0-0.002,0-0.005,0-0.007c0,0,0-0.001,0-0.001c0-0.002,0-0.004,0-0.006c0-0.001,0-0.001,0-0.002c0-0.005,0-0.009,0-0.014 c0,0,0-0.001,0-0.002c0-0.002,0-0.004,0-0.006c0,0,0-0.001,0-0.001c0-0.002,0-0.005,0-0.007c0,0,0-0.001,0-0.001 c0-0.002,0-0.004,0-0.006c0,0,0-0.001,0-0.002c0-0.002,0-0.004,0-0.006c0,0,0-0.001,0-0.001c0-0.002,0-0.005,0-0.007 c0-0.001,0-0.001,0-0.002c0-0.002,0-0.004,0-0.006c0,0,0-0.001,0-0.002c0-0.002,0-0.005,0-0.007c0,0,0-0.001,0-0.001 c0-0.002,0-0.004,0-0.006c0-0.001,0-0.002,0-0.002c0-0.002,0-0.004,0-0.005c0,0,0-0.001,0-0.002c0-0.002,0-0.005,0-0.007 c0-0.001,0-0.001,0-0.002c0-0.002,0-0.004,0-0.005c0-0.001,0-0.001,0-0.002C14,7.005,14,7.002,14,7 C14,6.832,13.994,6.665,13.982,6.5L13.982,6.5z M12.598,2.796l-0.825,0.533l0.271,0.42c0.155,0.239,0.293,0.492,0.412,0.75 l0.209,0.454l0.892-0.41c-0.08-0.212-0.169-0.419-0.268-0.622c0,0,0,0,0,0c-0.002-0.005-0.005-0.009-0.007-0.014c0,0,0,0,0-0.001 c-0.002-0.005-0.004-0.009-0.007-0.013c0,0,0-0.001,0-0.001c-0.001-0.002-0.001-0.003-0.002-0.004c0,0,0-0.001-0.001-0.001 c-0.001-0.003-0.003-0.005-0.004-0.008c0,0,0-0.001-0.001-0.001c-0.001-0.001-0.001-0.003-0.002-0.004c0,0,0-0.001-0.001-0.001 c-0.001-0.002-0.002-0.005-0.004-0.007c0-0.001-0.001-0.001-0.001-0.002c-0.001-0.001-0.001-0.003-0.002-0.004 c0-0.001-0.001-0.001-0.001-0.002c-0.001-0.002-0.002-0.005-0.003-0.007c0-0.001-0.001-0.001-0.001-0.002 c-0.001-0.001-0.001-0.002-0.002-0.003c0-0.001-0.001-0.002-0.001-0.002c-0.001-0.002-0.002-0.004-0.003-0.005 c-0.001-0.001-0.001-0.002-0.002-0.003c-0.001-0.001-0.001-0.002-0.002-0.003c0-0.001-0.001-0.002-0.001-0.003 c-0.001-0.001-0.001-0.002-0.002-0.004c-0.001-0.002-0.002-0.003-0.002-0.005c0-0.001-0.001-0.002-0.001-0.003 c-0.001-0.001-0.001-0.002-0.002-0.004c0-0.001-0.001-0.002-0.001-0.002c-0.001-0.002-0.002-0.004-0.003-0.006 c0-0.001-0.001-0.002-0.001-0.002c-0.001-0.001-0.001-0.003-0.002-0.004c0-0.001-0.001-0.002-0.001-0.002 c-0.001-0.002-0.002-0.004-0.003-0.006c0-0.001-0.001-0.001-0.001-0.002c-0.001-0.001-0.001-0.003-0.002-0.004 c0-0.001-0.001-0.001-0.001-0.002c-0.001-0.002-0.002-0.004-0.003-0.006c0,0,0-0.001-0.001-0.001 c-0.001-0.002-0.002-0.003-0.003-0.005c0-0.001-0.001-0.001-0.001-0.002c-0.001-0.002-0.002-0.004-0.003-0.006 c0,0,0-0.001-0.001-0.001c-0.001-0.002-0.002-0.004-0.003-0.005c0-0.001,0-0.001-0.001-0.001c-0.001-0.002-0.002-0.004-0.003-0.006 c0,0,0,0,0-0.001c-0.001-0.002-0.002-0.004-0.003-0.006c0-0.001,0-0.001-0.001-0.001c-0.002-0.004-0.004-0.008-0.007-0.013 c0,0,0-0.001-0.001-0.001c-0.002-0.004-0.005-0.009-0.007-0.013c0,0,0-0.001,0-0.001c-0.002-0.004-0.005-0.009-0.007-0.013 c0,0,0,0,0,0c-0.002-0.005-0.005-0.009-0.007-0.014l0,0c-0.089-0.165-0.184-0.326-0.285-0.483l-0.001-0.002 C12.792,3.065,12.697,2.929,12.598,2.796L12.598,2.796z M9.435,0.435L9.028,1.329l0.455,0.207c0.259,0.118,0.512,0.256,0.752,0.41 l0.421,0.27l0.53-0.827c-0.168-0.125-0.341-0.243-0.52-0.354c0,0,0,0-0.001,0c-0.004-0.003-0.008-0.005-0.013-0.008 c0,0-0.001,0-0.001-0.001c-0.001-0.001-0.003-0.002-0.004-0.002c-0.001,0-0.001-0.001-0.002-0.001 c-0.002-0.001-0.004-0.003-0.006-0.004c-0.001,0-0.001-0.001-0.002-0.001c-0.001-0.001-0.002-0.001-0.003-0.002 c-0.001-0.001-0.002-0.001-0.003-0.002c-0.001-0.001-0.003-0.002-0.004-0.003c-0.001-0.001-0.002-0.001-0.003-0.002 c-0.001-0.001-0.002-0.001-0.003-0.002c-0.001-0.001-0.002-0.001-0.003-0.002c-0.001-0.001-0.003-0.002-0.004-0.002 c-0.001-0.001-0.002-0.001-0.004-0.002c-0.001-0.001-0.002-0.001-0.003-0.002C10.607,1,10.606,0.999,10.605,0.998 c-0.001,0-0.001-0.001-0.002-0.001c-0.002-0.001-0.004-0.002-0.005-0.003c-0.001,0-0.001-0.001-0.002-0.001 c-0.001-0.001-0.003-0.002-0.004-0.002c-0.001,0-0.001-0.001-0.002-0.001c-0.002-0.001-0.004-0.002-0.005-0.003 c-0.001,0-0.001-0.001-0.002-0.001c-0.001-0.001-0.003-0.002-0.004-0.003c-0.001,0-0.001-0.001-0.002-0.001 c-0.002-0.001-0.004-0.002-0.006-0.003c-0.001,0-0.001-0.001-0.002-0.001c-0.002-0.001-0.003-0.002-0.005-0.003 c-0.001,0-0.001-0.001-0.002-0.001c-0.002-0.001-0.004-0.002-0.006-0.003c0,0-0.001,0-0.001-0.001 c-0.002-0.001-0.003-0.002-0.005-0.003c0,0-0.001-0.001-0.001-0.001c-0.002-0.001-0.004-0.002-0.006-0.004c0,0,0,0-0.001,0 c-0.002-0.001-0.004-0.002-0.006-0.003c0,0-0.001,0-0.001-0.001c-0.002-0.001-0.004-0.002-0.006-0.004l0,0 c-0.002-0.001-0.004-0.002-0.006-0.004c0,0-0.001,0-0.001,0c-0.004-0.002-0.008-0.005-0.013-0.007c0,0-0.001,0-0.001,0 c-0.004-0.002-0.009-0.005-0.013-0.007l0,0c-0.004-0.003-0.009-0.005-0.013-0.008c0,0,0,0,0,0c-0.004-0.003-0.009-0.005-0.013-0.008 l0,0c-0.004-0.003-0.009-0.005-0.013-0.008l0,0c-0.181-0.103-0.367-0.198-0.557-0.285L9.892,0.623 C9.742,0.555,9.59,0.493,9.435,0.435L9.435,0.435z",
        className: "iconColor"
    }))
};

const iT = {
    name: "ClearSearch",
    suppressMirroring: true,
    tooltipKey: "ClearSearch.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ClearSearch", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,2C4.239,2,2,4.239,2,7s2.239,5,5,5s5-2.239,5-5S9.761,2,7,2 M9.525,8.515c0.279,0.279,0.279,0.732,0,1.01 c-0.14,0.14-0.322,0.209-0.505,0.209S8.654,9.665,8.515,9.525L7,8.01L5.485,9.525c-0.14,0.14-0.323,0.209-0.505,0.209 c-0.183,0-0.366-0.069-0.505-0.209c-0.279-0.278-0.279-0.731,0-1.01L5.99,7L4.475,5.485c-0.279-0.279-0.279-0.732,0-1.01 c0.279-0.279,0.731-0.279,1.01,0L7,5.99l1.515-1.515c0.279-0.279,0.731-0.279,1.01,0c0.279,0.278,0.279,0.731,0,1.01L8.01,7 L9.525,8.515z",
        className: "iconColor"
    }))
};

const lT = {
    name: "Close",
    suppressMirroring: true,
    tooltipKey: "Close.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Close", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10.766,9.713c0.292,0.293,0.292,0.769-0.001,1.061c-0.146,0.146-0.338,0.22-0.53,0.22 s-0.384-0.073-0.531-0.22L7.004,8.07l-2.722,2.712C4.135,10.927,3.944,11,3.752,11c-0.192,0-0.385-0.073-0.531-0.221 c-0.292-0.293-0.292-0.769,0.002-1.061l2.721-2.71L3.219,4.28C2.927,3.987,2.927,3.512,3.22,3.22c0.292-0.293,0.768-0.293,1.061,0 l2.726,2.73l2.714-2.703c0.294-0.292,0.769-0.292,1.061,0.002c0.292,0.293,0.292,0.769-0.002,1.061L8.067,7.01L10.766,9.713z",
        className: "iconColor"
    }))
};

const cT = {
    name: "CloseTab",
    suppressMirroring: true,
    tooltipKey: "CloseTab.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "CloseTab", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7.707,7L10,9.293L9.293,10L7,7.707L4.707,10L4,9.293L6.293,7L4,4.707L4.707,4L7,6.293L9.293,4L10,4.707 L7.707,7z",
        className: "iconColor"
    }))
};

const dT = {
    name: "ConditionalHighlightingBullet",
    suppressMirroring: true,
    tooltipKey: "ConditionalHighlightingBullet.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "conditionalHighlightingBullet", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M11,7c0,2.209-1.79,4-4,4c-2.21,0-4-1.791-4-4s1.79-4,4-4C9.21,3,11,4.791,11,7z",
        className: "iconColor"
    }))
};

const uT = {
    name: "Contract",
    suppressMirroring: true,
    tooltipKey: "Contract.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Contract", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,4H4V3h3V4z M9,5H4v1h5V5z M9,7H4v1h5V7z M9,9H6v1h3V9z M11.5,0C10.119,0,9,1.119,9,2.5S10.119,5,11.5,5 S14,3.881,14,2.5S12.881,0,11.5,0z M12,11V6h-1v5c0,0.819,0.107,1.477,0.265,2H4c-1.103,0-2-0.897-2-2V3 c0-0.819-0.107-1.477-0.265-2H8V0H0c0,0,1,0.649,1,3v8c0,1.657,1.343,3,3,3h9C13,14,12,13.351,12,11z",
        className: "iconColor"
    }))
};

const mT = {
    name: "CopyFromDataSource",
    suppressMirroring: true,
    tooltipKey: "CopyFromDataSource.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "CopyFromDataSource", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M11,8V6l3,3l-3,3v-2H6V8H11z M10.235,13.271C9.15,13.721,7.653,14,6,14c-3.314,0-6-1.119-6-2.5v-9 C0,1.119,2.686,0,6,0s6,1.119,6,2.5v2.39c-0.279-0.252-0.635-0.39-1-0.39V3.881C9.925,4.555,8.088,5,6,5S2.075,4.555,1,3.881V5.5 c0,0.341,1.349,1.248,3.927,1.455C4.681,7.207,4.528,7.546,4.508,7.921C3.052,7.766,1.809,7.388,1,6.881V8.5 c0,0.321,1.208,1.139,3.5,1.407V10c0,0.362,0.133,0.69,0.347,0.949c-1.6-0.13-2.976-0.522-3.847-1.068V11.5C1,11.885,2.719,13,6,13 c1.547,0,2.734-0.25,3.57-0.552C9.678,12.794,9.919,13.08,10.235,13.271z M1,2.5C1,2.885,2.719,4,6,4s5-1.114,5-1.5S9.281,1,6,1 S1,2.114,1,2.5z",
        className: "iconColor"
    }))
};

const pT = {
    name: "CreditCards",
    suppressMirroring: true,
    tooltipKey: "CreditCards.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "CreditCards", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14 14L0 13.613 0 -0.387 14 0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10,0H1C0.447,0,0,0.447,0,1v6c0,0.553,0.447,1,1,1h1V7H1V4h9v1h1V1C11,0.447,10.553,0,10,0z M10,2H1V1h9V2z M13,6H4C3.448,6,3,6.448,3,7v6c0,0.552,0.448,1,1,1h9c0.552,0,1-0.448,1-1V7C14,6.448,13.552,6,13,6z M4,7h9v1H4V7z M4,13v-3h9v3H4 z M6,12H5v-1h1V12z M8,12H7v-1h1V12z M10,12H9v-1h1V12z M12,12h-1v-1h1V12z",
        className: "iconColor"
    }))
};

const fT = {
    name: "Currency",
    suppressMirroring: true,
    tooltipKey: "Currency.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Currency", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,5H3C2.448,5,2,5.448,2,6v6c0,0.552,0.448,1,1,1h10c0.552,0,1-0.448,1-1V6C14,5.448,13.552,5,13,5z M13,12H3V6h10V12z M6.5,9c0-1.105,0.672-2,1.5-2s1.5,0.895,1.5,2S8.828,11,8,11S6.5,10.104,6.5,9z M12,8h-1V7h1V8z M12,11h-1v-1h1 V11z M5,8H4V7h1V8z M5,11H4v-1h1V11z M8.992,2.476l0.967-0.254l0.254,0.967L9.246,3.443L8.992,2.476z M7.686,4H5.252 C5.428,3.621,5.715,3.337,6.09,3.239C6.668,3.087,7.281,3.41,7.686,4z M1,3.543l0.35,1.33C1.13,5.194,1,5.582,1,6v1.475L0.033,3.797 c-0.14-0.534,0.179-1.081,0.713-1.221l9.671-2.542c0.534-0.14,1.081,0.179,1.221,0.713L12.494,4H11.46l-0.789-3L1,3.543z",
        className: "iconColor"
    }))
};

const gT = {
    name: "Dashboard",
    suppressMirroring: true,
    tooltipKey: "Dashboard.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Dashboard", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,1v7H6V1H13 M13,0H6C5.448,0,5,0.448,5,1v7c0,0.552,0.448,1,1,1h7c0.552,0,1-0.448,1-1V1 C14,0.448,13.552,0,13,0L13,0z M4,3V1c0-0.552-0.448-1-1-1H1C0.448,0,0,0.448,0,1v2c0,0.552,0.448,1,1,1h2C3.552,4,4,3.552,4,3z M4,8V6c0-0.552-0.448-1-1-1H1C0.448,5,0,5.448,0,6v2c0,0.552,0.448,1,1,1h2C3.552,9,4,8.552,4,8z M4,13v-2c0-0.552-0.448-1-1-1H1 c-0.552,0-1,0.448-1,1v2c0,0.552,0.448,1,1,1h2C3.552,14,4,13.552,4,13z M13,11v2H6v-2H13 M13,10H6c-0.552,0-1,0.448-1,1v2 c0,0.552,0.448,1,1,1h7c0.552,0,1-0.448,1-1v-2C14,10.448,13.552,10,13,10L13,10z M8,3H7v4h1V3z M10,2H9v5h1V2z M12,4h-1v3h1V4z",
        className: "iconColor"
    }))
};

const hT = {
    name: "Date",
    suppressMirroring: true,
    tooltipKey: "Date.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Date", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12,2V1c0-0.553-0.448-1-1-1s-1,0.447-1,1v1H4V1c0-0.553-0.448-1-1-1S2,0.447,2,1v1H1C0.448,2,0,2.448,0,3 v10c0,0.552,0.448,1,1,1h12c0.552,0,1-0.448,1-1V3c0-0.552-0.448-1-1-1H12z M13,13H1V5h12V13z M8,8h3v3H8V8z",
        className: "iconColor"
    }))
};

const bT = {
    name: "DateRange",
    suppressMirroring: true,
    tooltipKey: "DateRange.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "DateRange", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M2,10H1c-0.552,0-1-0.448-1-1V2c0-0.552,0.448-1,1-1h2c0-0.553-0.052-1,0.5-1S4,0.447,4,1h3 c0-0.553-0.052-1,0.5-1S8,0.447,8,1h2c0.552,0,1,0.448,1,1v1.081C10.855,3.035,10.695,3,10.5,3C9.957,3,9.62,3.225,9.433,3.414 C9.255,3.592,9.149,3.794,9.088,4H7.912C7.851,3.794,7.745,3.592,7.567,3.414C7.38,3.225,7.043,3,6.5,3S5.62,3.225,5.433,3.414 C5.255,3.592,5.149,3.794,5.088,4H1v5h1V10z M14,6v7c0,0.552-0.448,1-1,1H4c-0.552,0-1-0.448-1-1V6c0-0.552,0.448-1,1-1h2 c0-0.553-0.052-1,0.5-1S7,4.447,7,5h3c0-0.553-0.052-1,0.5-1S11,4.447,11,5h2C13.552,5,14,5.448,14,6z M13,8H4v5h9V8z M10,11h2V9h-2 V11z",
        className: "iconColor"
    }))
};

const vT = {
    name: "DateTime",
    suppressMirroring: true,
    tooltipKey: "DateTime.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "DateTime", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10,6c-2.209,0-4,1.791-4,4s1.791,4,4,4s4-1.791,4-4S12.209,6,10,6z M10,13c-1.654,0-3-1.346-3-3 s1.346-3,3-3c1.654,0,3,1.346,3,3S11.654,13,10,13z M10,10V8H9v3h2.5v-1H10z M5.101,11H1V5h11V3c0-0.552-0.448-1-1-1h-1V1 c0-0.553-0.448-1-1-1S8,0.447,8,1v1H4V1c0-0.553-0.448-1-1-1S2,0.447,2,1v1H1C0.448,2,0,2.448,0,3v8c0,0.552,0.448,1,1,1h4.424 C5.284,11.682,5.172,11.349,5.101,11z",
        className: "iconColor"
    }))
};

const yT = {
    name: "DecimalType",
    suppressMirroring: true,
    tooltipKey: "DecimalType.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "DecimalType", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M2,9c0,0.552-0.448,1-1,1S0,9.552,0,9s0.448-1,1-1S2,8.448,2,9z M14,0H0v1h14V0z M14,13H0v1h14V13z M5.393,3.008c-1.006,0-1.701,0.531-2.085,1.592C3.103,5.169,3,5.851,3,6.646c0,1.025,0.171,1.842,0.513,2.451 c0.41,0.729,1.035,1.094,1.875,1.094c0.931,0,1.602-0.446,2.012-1.338c0.283-0.622,0.425-1.408,0.425-2.358 c0-1.002-0.156-1.792-0.469-2.368C6.952,3.38,6.298,3.008,5.393,3.008z M5.38,9.39c-0.567,0-0.968-0.331-1.203-0.991 C4.023,7.965,3.947,7.393,3.947,6.68c0-0.947,0.12-1.664,0.359-2.151c0.24-0.487,0.619-0.73,1.138-0.73 c0.563,0,0.943,0.256,1.139,0.769c0.196,0.513,0.294,1.166,0.294,1.96c0,1.1-0.136,1.852-0.406,2.256S5.837,9.39,5.38,9.39z M10.954,3.008c-1.006,0-1.701,0.531-2.085,1.592c-0.205,0.57-0.308,1.251-0.308,2.046c0,1.025,0.171,1.842,0.513,2.451 c0.41,0.729,1.035,1.094,1.875,1.094c0.931,0,1.602-0.446,2.012-1.338c0.283-0.622,0.425-1.408,0.425-2.358 c0-1.002-0.156-1.792-0.469-2.368C12.514,3.38,11.859,3.008,10.954,3.008z M10.941,9.39c-0.567,0-0.968-0.331-1.203-0.991 C9.585,7.965,9.509,7.393,9.509,6.68c0-0.947,0.12-1.664,0.359-2.151c0.24-0.487,0.619-0.73,1.138-0.73 c0.563,0,0.943,0.256,1.139,0.769c0.196,0.513,0.294,1.166,0.294,1.96c0,1.1-0.136,1.852-0.406,2.256S11.398,9.39,10.941,9.39z",
        className: "iconColor"
    }))
};

const xT = {
    name: "Decrement",
    suppressMirroring: true,
    tooltipKey: "Decrement.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Decrement", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,9C6.856,9,6.719,8.938,6.624,8.829l-3.5-4C2.942,4.622,2.963,4.306,3.171,4.124 c0.207-0.182,0.523-0.162,0.705,0.047L7,7.741l3.124-3.57c0.182-0.209,0.498-0.229,0.705-0.047c0.208,0.182,0.229,0.498,0.047,0.706 l-3.5,4C7.281,8.938,7.145,9,7,9z",
        className: "iconColor"
    }))
};

const ST = {
    name: "Delete",
    suppressMirroring: true,
    tooltipKey: "Delete.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Delete", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12.5,2H10V0H4v2H1.5C1.225,2,1,2.225,1,2.5C1,2.775,1.225,3,1.5,3h11C12.775,3,13,2.775,13,2.5 C13,2.225,12.775,2,12.5,2z M5,1h4v1H5V1z M2,4v9c0,0.552,0.448,1,1,1h8c0.552,0,1-0.448,1-1V4H2z M11,13H3V5h8V13z M9,11.5v-5 C9,6.225,8.775,6,8.5,6h0C8.225,6,8,6.225,8,6.5v5C8,11.775,8.225,12,8.5,12h0C8.775,12,9,11.775,9,11.5z M6,11.5v-5 C6,6.225,5.775,6,5.5,6h0C5.225,6,5,6.225,5,6.5v5C5,11.775,5.225,12,5.5,12h0C5.775,12,6,11.775,6,11.5z",
        className: "iconColor"
    }))
};

const wT = {
    name: "DisclosureCollapse",
    suppressMirroring: true,
    tooltipKey: "DisclosureCollapse.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "DisclosureCollapse", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7.376,4.171l3.5,4c0.183,0.208,0.161,0.523-0.047,0.706c-0.207,0.182-0.523,0.162-0.705-0.047L7,5.259 l-3.124,3.57C3.694,9.038,3.378,9.058,3.171,8.876C2.963,8.694,2.942,8.378,3.124,8.171l3.5-4C6.719,4.062,6.856,4,7,4 S7.281,4.062,7.376,4.171z",
        className: "iconColor"
    }))
};

const CT = {
    name: "DisclosureExpand",
    suppressMirroring: true,
    tooltipKey: "DisclosureExpand.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "DisclosureExpand", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,9C6.856,9,6.719,8.938,6.624,8.829l-3.5-4C2.942,4.622,2.963,4.306,3.171,4.124 c0.207-0.182,0.523-0.162,0.705,0.047L7,7.741l3.124-3.57c0.182-0.209,0.498-0.229,0.705-0.047c0.208,0.182,0.229,0.498,0.047,0.706 l-3.5,4C7.281,8.938,7.145,9,7,9z",
        className: "iconColor"
    }))
};

const ET = {
    name: "DisclosureNext",
    suppressMirroring: false,
    tooltipKey: "DisclosureNext.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "DisclosureNext", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M9,7c0,0.145-0.062,0.281-0.171,0.376l-4,3.5c-0.208,0.183-0.523,0.161-0.706-0.047 c-0.182-0.207-0.162-0.523,0.047-0.705L7.741,7l-3.57-3.124C3.962,3.694,3.942,3.378,4.124,3.171 c0.182-0.208,0.498-0.229,0.706-0.047l4,3.5C8.938,6.719,9,6.856,9,7z",
        className: "iconColor"
    }))
};

const IT = {
    name: "DisclosureNextBreadcrumb",
    suppressMirroring: false,
    tooltipKey: "DisclosureNextBreadcrumb.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "DisclosureNextBreadcrumb", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M5.5,9.999c-0.143,0-0.285-0.061-0.384-0.18C4.939,9.607,4.968,9.292,5.18,9.115l2.539-2.116L5.18,4.884 c-0.212-0.177-0.24-0.492-0.063-0.705C5.294,3.967,5.609,3.941,5.82,4.115l3,2.5C8.934,6.71,9,6.851,9,6.999S8.934,7.288,8.82,7.384 l-3,2.5C5.726,9.961,5.613,9.999,5.5,9.999z",
        className: "iconColor"
    }))
};

const _T = {
    name: "DisclosurePrevious",
    suppressMirroring: false,
    tooltipKey: "DisclosurePrevious.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "DisclosurePrevious", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M5.171,6.624l4-3.5c0.208-0.183,0.523-0.161,0.706,0.047c0.182,0.207,0.162,0.523-0.047,0.705L6.259,7 l3.57,3.124c0.209,0.182,0.229,0.498,0.047,0.705c-0.182,0.208-0.498,0.229-0.706,0.047l-4-3.5C5.062,7.281,5,7.145,5,7 S5.062,6.719,5.171,6.624z",
        className: "iconColor"
    }))
};

const DT = {
    name: "Download",
    suppressMirroring: true,
    tooltipKey: "Download.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Download", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,11v2c0,0.552-0.448,1-1,1H2c-0.552,0-1-0.448-1-1v-2c0-0.552,0.448-1,1-1v3h10v-3 C12.552,10,13,10.448,13,11z M8,8V1c0-0.552-0.448-1-1-1C6.448,0,6,0.448,6,1v7H3l4,4l4-4H8z",
        className: "iconColor"
    }))
};

const LT = {
    name: "DrillDownArrow",
    suppressMirroring: true,
    tooltipKey: "DrillDownArrow.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "DrillDownArrow", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12,9l-3.5,4L5,9h3V2H2.5C2.224,2,2,1.776,2,1.5S2.224,1,2.5,1h5C8.775,1,9,1.225,9,2.5V9H12z",
        className: "iconColor"
    }))
};

const TT = {
    name: "Edit",
    suppressMirroring: true,
    tooltipKey: "Edit.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Edit", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M4.708,11.769L1,13l1.238-3.701L4.708,11.769z M11.43,5.329l1.286-1.287c0.379-0.379,0.379-1,0-1.379 l-1.378-1.379c-0.379-0.379-0.999-0.379-1.378,0L8.673,2.573L11.43,5.329z M7.613,3.634L3.155,8.095l2.757,2.757L10.37,6.39 L7.613,3.634z",
        className: "iconColor"
    }))
};

const RT = {
    name: "Education",
    suppressMirroring: true,
    tooltipKey: "Education.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Education_1_", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,1L0,4l7,4l6-3.429V9.5c0,0.276,0.224,0.5,0.5,0.5S14,9.776,14,9.5V4L7,1z M7,6.848l-4.76-2.72L7,2.088 l4.76,2.04L7,6.848z M11,6.866V8c0,0.652-1.863,1.997-4,2.917C4.863,9.997,3,8.652,3,8V6.866L2,6.295V8c0,2,5,4,5,4s5-2,5-4V6.295 L11,6.866z",
        className: "iconColor"
    }))
};

const kT = {
    name: "Employer",
    suppressMirroring: true,
    tooltipKey: "Employer.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Employer", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M3.5,7C3.224,7,3,6.776,3,6.5v-2C3,4.224,3.224,4,3.5,4S4,4.224,4,4.5v2C4,6.776,3.776,7,3.5,7z M5,6h1V5H5 V6z M6,10H1V7C0.634,7,0.295,6.894,0,6.722V10c0,0.552,0.448,1,1,1h5V10z M9,5V4.5C9,4.224,8.776,4,8.5,4S8,4.224,8,4.5V5H9z M12,8 h-1v2h1V8z M10,8H9v2h1V8z M14,7v7h-3v-2h-1v2H7V7c0-0.552,0.448-1,1-1h5C13.552,6,14,6.448,14,7z M13,7H8v6h1v-2h3v2h1V7z M12,3v2 h-1V3H1v2h1v1H1C0.448,6,0,5.552,0,5V3c0-0.552,0.448-1,1-1h2V1c0-0.552,0.448-1,1-1h4c0.552,0,1,0.448,1,1v1h2 C11.552,2,12,2.448,12,3z M8,2V1H4v1H8z",
        className: "iconColor"
    }))
};

const AT = {
    name: "Export",
    suppressMirroring: true,
    tooltipKey: "Export.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Export", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M9,0h5v5l-2-2L5.927,8.78c-0.195,0.195-0.512,0.195-0.707,0s-0.195-0.512,0-0.707L11,2L9,0z M9,8v5H1V5h5V4 H1C0.448,4,0,4.448,0,5v8c0,0.552,0.448,1,1,1h8c0.552,0,1-0.448,1-1V8H9z",
        className: "iconColor"
    }))
};

const MT = {
    name: "FavoritedIndicator",
    suppressMirroring: true,
    tooltipKey: "FavoritedIndicator.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "FavoritedIndicator", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7 1L8.855 4.95 13 5.584 10 8.659 10.708 13 7 10.95 3.292 13 4 8.659 1 5.584 5.145 4.95z",
        className: "iconColor"
    }))
};

const NT = {
    name: "Filter",
    suppressMirroring: true,
    tooltipKey: "Filter.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Filter", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,1c3.011,0,4.991,0.538,5.741,0.949L8,7.638V13H6V7.638L1.259,1.949C2.009,1.538,3.989,1,7,1 M7,0 C3.134,0,0,0.895,0,2l5,6v5c0,0.552,0.448,1,1,1h2c0.552,0,1-0.448,1-1V8l5-6C14,0.895,10.866,0,7,0L7,0z",
        className: "iconColor"
    }))
};

const OT = {
    name: "Folder",
    suppressMirroring: true,
    tooltipKey: "Folder.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Folder", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,3H7.001L6.214,1.427C6.084,1.165,5.816,1,5.524,1h-4.06C1.18,1,0.92,1.161,0.793,1.416L0.002,3 c-0.004,0.007,0,9,0,9c0,0.55,0.45,1,1,1H13c0.55,0,1-0.45,1-1V4C14,3.448,13.552,3,13,3z M13,12H1.001V5H13V12z",
        className: "iconColor"
    }))
};

const PT = {
    name: "FreeformSelection",
    suppressMirroring: true,
    tooltipKey: "FreeformSelection.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "FreeformSelection", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6.575,2.238L6.575,2.238l0.932,0.363L7.099,4.305L6.107,4.177L6.575,2.238L6.575,2.238z M4.136,4.882 L3.622,5.739l1.715,1.029l0.515-0.857L4.136,4.882L4.136,4.882L4.136,4.882z M1,3L0.823,4.06l1.084,0.65l0.514-0.857L1,3L1,3L1,3z M0.615,5.311L0.286,7.283l0.986,0.164l0.329-1.973L0.615,5.311L0.615,5.311L0.615,5.311z M0.84,8.398l-0.64,0.768l1.536,1.28 l0.64-0.768L0.84,8.398L0.84,8.398L0.84,8.398z M3.913,10.959l-0.64,0.768l1.536,1.28l0.64-0.768L3.913,10.959L3.913,10.959 L3.913,10.959z M8.057,12.473l-1.798,0.472l0.184,0.983l1.933-0.507L8.057,12.473L8.057,12.473L8.057,12.473z M11.221,10.769 l-1.473,0.986l0.467,0.884l1.658-1.112L11.221,10.769L11.221,10.769L11.221,10.769z M12.91,7.977l-0.588,1.521l0.853,0.522 l0.717-1.855L12.91,7.977L12.91,7.977L12.91,7.977z M13.743,4.188l-0.979,0.203l0.218,1.828l0.999-0.047L13.743,4.188L13.743,4.188 L13.743,4.188z M11.866,0.75l-0.612,0.791l0.961,1.21l0.892-0.453L11.866,0.75L11.866,0.75L11.866,0.75z M9.52-0.04L7.672,0.59 l0.651,0.759l1.585-0.364l0.131-0.991L9.52-0.04L9.52-0.04L9.52-0.04L9.52-0.04z",
        className: "iconColor"
    }))
};

const BT = {
    name: "GeneratedTransformation",
    suppressMirroring: true,
    tooltipKey: "GeneratedTransformation.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GeneratedTransformation", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M14,8v6H8v-3h3V8H14z M10,6v4H6l1.646-1.646L5.587,6.294c0,0,0,0,0,0l0,0C5.003,6.732,4.286,7,3.5,7 C1.567,7,0,5.433,0,3.5C0,1.567,1.567,0,3.5,0S7,1.567,7,3.5c0,0.786-0.268,1.503-0.705,2.087l0,0c0,0,0,0,0,0l2.059,2.059L10,6z M6,3.5C6,2.121,4.879,1,3.5,1C2.122,1,1,2.121,1,3.5C1,4.878,2.122,6,3.5,6C4.879,6,6,4.878,6,3.5z",
        className: "iconColor"
    }))
};

const zT = {
    name: "GenericKnownObject",
    suppressMirroring: true,
    tooltipKey: "GenericKnownObject.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GenericKnownObject", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M9.678,10.479v0.065l2.112,2.641l-1.386,0.793l-1.343-3.081H9.018L7.609,14l-1.254-0.792l2.09-2.685v-0.066 l-3.256,0.441V9.401l3.234,0.418V9.775L6.355,7.068l1.342-0.77l1.364,3.08h0.044l1.342-3.102l1.32,0.77l-2.09,2.75v0.045L13,9.401 v1.496L9.678,10.479z M5,12H2V1h6.586L11,3.414V5h1V3.414c0-0.265-0.105-0.52-0.293-0.707L9.293,0.293C9.105,0.105,8.851,0,8.586,0 H2C1.448,0,1,0.448,1,1v11c0,0.552,0.448,1,1,1h3V12z",
        className: "iconColor"
    }))
};

const FT = {
    name: "GeoUIAreaAddress",
    suppressMirroring: true,
    tooltipKey: "GeoUIAreaAddress.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GeoUIAreaAddress", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7.02,14l-0.002-1c0.633-0.002,1.256-0.102,1.851-0.296l0.311,0.95C8.484,13.881,7.759,13.998,7.02,14z M4.858,13.666c-0.698-0.225-1.354-0.556-1.951-0.987l0.586-0.811c0.511,0.369,1.073,0.653,1.672,0.845L4.858,13.666z M11.125,12.656l-0.59-0.808c0.51-0.372,0.955-0.818,1.324-1.327l0.809,0.587C12.238,11.702,11.719,12.222,11.125,12.656z M1.355,11.141c-0.437-0.592-0.773-1.246-1.004-1.943l0.949-0.313c0.197,0.597,0.486,1.157,0.859,1.664L1.355,11.141z M13.66,9.159 l-0.951-0.309C12.902,8.255,13,7.633,13,7l1-0.075V7C14,7.738,13.886,8.464,13.66,9.159z M0,7.037V7c0-0.724,0.11-1.437,0.327-2.121 L1.28,5.181C1.095,5.767,1,6.379,1,7L0,7.037z M12.688,5.082c-0.201-0.595-0.493-1.153-0.87-1.659l0.803-0.597 c0.439,0.591,0.78,1.242,1.015,1.937L12.688,5.082z M2.121,3.506L1.309,2.924c0.428-0.597,0.944-1.121,1.535-1.557l0.594,0.805 C2.931,2.546,2.488,2.995,2.121,3.506z M10.479,2.11C9.965,1.744,9.401,1.463,8.802,1.274l0.3-0.954 c0.699,0.22,1.358,0.548,1.957,0.975L10.479,2.11z M5.1,1.307L4.783,0.358C5.476,0.127,6.202,0.006,6.94,0l0.008,1 C6.315,1.005,5.693,1.108,5.1,1.307z M7,8C6.448,8,6,7.552,6,7c0-0.552,0.448-1,1-1s1,0.448,1,1C8,7.552,7.552,8,7,8z",
        className: "iconColor"
    }))
};

const jT = {
    name: "GeoUIAreaPinLocation",
    suppressMirroring: true,
    tooltipKey: "GeoUIAreaPinLocation.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GeoUIAreaPinLocation", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7.02,14l-0.002-1c0.633-0.002,1.256-0.102,1.851-0.296l0.311,0.95C8.484,13.881,7.759,13.998,7.02,14z M4.858,13.666c-0.698-0.225-1.354-0.556-1.951-0.987l0.586-0.811c0.511,0.369,1.073,0.653,1.672,0.845L4.858,13.666z M11.125,12.656l-0.59-0.808c0.51-0.372,0.955-0.818,1.324-1.327l0.809,0.587C12.238,11.702,11.719,12.222,11.125,12.656z M1.355,11.141c-0.437-0.592-0.773-1.246-1.004-1.943l0.949-0.313c0.197,0.597,0.486,1.157,0.859,1.664L1.355,11.141z M13.66,9.159 l-0.951-0.309C12.902,8.255,13,7.633,13,7l1-0.075V7C14,7.738,13.886,8.464,13.66,9.159z M0,7.037V7c0-0.724,0.11-1.437,0.327-2.121 L1.28,5.181C1.095,5.767,1,6.379,1,7L0,7.037z M12.688,5.082c-0.201-0.595-0.493-1.153-0.87-1.659l0.803-0.597 c0.439,0.591,0.78,1.242,1.015,1.937L12.688,5.082z M2.121,3.506L1.309,2.924c0.428-0.597,0.944-1.121,1.535-1.557l0.594,0.805 C2.931,2.546,2.488,2.995,2.121,3.506z M10.479,2.11C9.965,1.744,9.401,1.463,8.802,1.274l0.3-0.954 c0.699,0.22,1.358,0.548,1.957,0.975L10.479,2.11z M5.1,1.307L4.783,0.358C5.476,0.127,6.202,0.006,6.94,0l0.008,1 C6.315,1.005,5.693,1.108,5.1,1.307z M9,6c0-1.105-0.895-2-2-2S5,4.895,5,6c0,0.886,0.58,1.629,1.378,1.891L7,11l0.622-3.109 C8.42,7.629,9,6.886,9,6z",
        className: "iconColor"
    }))
};

const VT = {
    name: "GeoUILocationPin",
    suppressMirroring: true,
    tooltipKey: "GeoUILocationPin.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GeoUILocationPin", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,0C3.134,0,0,3.134,0,7c0,3.866,3.134,7,7,7s7-3.134,7-7C14,3.134,10.866,0,7,0z M7,9C5.895,9,5,8.105,5,7 s0.895-2,2-2s2,0.895,2,2S8.105,9,7,9z",
        className: "iconColor"
    }))
};

const HT = {
    name: "GeoUIRoutePinLocation",
    suppressMirroring: true,
    tooltipKey: "GeoUIRoutePinLocation.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GeoUIRoutePinLocation", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M14,7c0,3.866-3.134,7-7,7c-3.526,0-6.434-2.609-6.92-6h2.022C2.566,10.279,4.585,12,7,12 c2.757,0,5-2.243,5-5c0-2.757-2.243-5-5-5C6.288,2,5.614,2.154,5,2.424v-2.13C5.634,0.105,6.305,0,7,0C10.866,0,14,3.134,14,7z M4,2 c0-1.105-0.895-2-2-2S0,0.895,0,2c0,0.886,0.58,1.629,1.378,1.891L2,7l0.622-3.109C3.42,3.629,4,2.886,4,2z",
        className: "iconColor"
    }))
};

const UT = {
    name: "GeoUIYourLocation",
    suppressMirroring: true,
    tooltipKey: "GeoUIYourLocation.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GeoUIYourLocation", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6.839,7.967l-0.494,2.966c-1.681-0.279-3-1.597-3.278-3.278l2.966-0.494 C6.103,7.579,6.421,7.897,6.839,7.967z M3.066,6.344l2.966,0.494c0.071-0.418,0.388-0.736,0.806-0.806L6.344,3.066 C4.663,3.345,3.345,4.663,3.066,6.344z M7.967,6.839l2.966-0.494c-0.279-1.681-1.597-2.999-3.278-3.278L7.161,6.033 C7.579,6.103,7.897,6.421,7.967,6.839z M14,7c0,3.866-3.134,7-7,7s-7-3.134-7-7c0-3.866,3.134-7,7-7S14,3.134,14,7z M13,8V6 l-1.083,0.18C11.569,4.079,9.921,2.431,7.82,2.083L8,1H6l0.18,1.083C4.079,2.431,2.431,4.079,2.083,6.18L1,6v2l1.083-0.18 c0.348,2.101,1.997,3.749,4.098,4.098L6,13h2l-0.18-1.083c2.101-0.348,3.749-1.997,4.098-4.098L13,8z M7.161,7.967l0.494,2.966 c1.681-0.279,3-1.597,3.278-3.278L7.967,7.161C7.897,7.579,7.579,7.897,7.161,7.967z",
        className: "iconColor"
    }))
};

const GT = {
    name: "GlobalVariables",
    suppressMirroring: true,
    tooltipKey: "GlobalVariables.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GlobalVariables", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M2,1c0,0.552-0.448,1-1,1S0,1.552,0,1s0.448-1,1-1S2,0.448,2,1z M6,0C5.448,0,5,0.448,5,1s0.448,1,1,1 s1-0.448,1-1S6.552,0,6,0z M11,0c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S11.552,0,11,0z M1,4C0.448,4,0,4.448,0,5 s0.448,1,1,1s1-0.448,1-1S1.552,4,1,4z M6,4C5.448,4,5,4.448,5,5s0.448,1,1,1s1-0.448,1-1S6.552,4,6,4z M1,8C0.448,8,0,8.448,0,9 s0.448,1,1,1s1-0.448,1-1S1.552,8,1,8z M4,0H3v10h1V0z M9,5.101V0H8v5.422C8.318,5.283,8.651,5.172,9,5.101z M12,5 c0-0.552-0.448-1-1-1s-1,0.448-1,1c0.682,0,1.33,0.139,1.922,0.385C11.972,5.267,12,5.137,12,5z M14,10c0,2.209-1.791,4-4,4 s-4-1.791-4-4s1.791-4,4-4S14,7.791,14,10z M13.2,10c0-0.066-0.016-0.128-0.019-0.194c-0.012-0.016-0.026-0.032-0.046-0.046 c0.013,0.049,0.033,0.128,0.018,0.184c-0.019,0.078-0.095,0.102-0.111,0.153c-0.022,0.062,0.012,0.138-0.003,0.201 c-0.031,0.122-0.172,0.197-0.213,0.292c-0.046,0.103-0.018,0.222-0.072,0.328c-0.063,0.121-0.153,0.208-0.199,0.33 c-0.056,0.146-0.061,0.263-0.174,0.387c-0.108,0.122-0.137,0.221-0.228,0.339c-0.204,0.271-0.485,0.368-0.824,0.352 c0.003-0.165-0.004-0.352-0.022-0.519c-0.021-0.214,0.029-0.216,0.134-0.397c0.061-0.103,0.118-0.295,0.112-0.427 c-0.003-0.073-0.043-0.117-0.054-0.2c-0.009-0.08,0.044-0.158,0.016-0.24c-0.047-0.135-0.333-0.174-0.47-0.189 c-0.225-0.027-0.249,0.062-0.417-0.125c-0.095-0.109-0.235-0.179-0.245-0.321c-0.005-0.097,0.068-0.137,0.093-0.224 c0.024-0.083-0.023-0.182,0.017-0.26c0.061-0.12,0.251-0.266,0.353-0.348c0.162-0.133,0.288-0.134,0.477-0.192 c0.222-0.069,0.264-0.129,0.445,0.033c0.127,0.115,0.258,0.279,0.46,0.217c0.023,0.04,0.26,0.141,0.269,0.138 c0.11-0.032,0.085-0.119,0.039-0.203c-0.005-0.009-0.152-0.107-0.18-0.129c-0.077-0.052-0.143-0.104-0.2,0.038 c-0.02-0.056-0.053-0.109-0.068-0.167c-0.053-0.01-0.108-0.007-0.15-0.04C11.903,8.74,11.85,8.65,11.813,8.623 c-0.087-0.061-0.241-0.082-0.349-0.09c-0.018,0.085-0.057,0.148-0.135,0.186c0.022,0.187-0.203,0.105-0.31,0.159 c-0.054-0.102-0.02-0.216-0.094-0.306c0.115-0.089,0.291-0.079,0.344-0.208c0.002-0.005,0-0.241,0-0.243 c-0.05-0.078-0.13-0.054-0.228-0.052c-0.036-0.124,0.05-0.16,0.168-0.135c-0.012-0.089,0.012-0.18,0.043-0.255 c0.136,0.004,0.127,0.243,0.076,0.328c0.155,0.026,0.028,0.217,0.206,0.187c0.075-0.047,0.107-0.112,0.007-0.168 c0.096-0.104-0.008-0.187,0.04-0.288c0.06-0.133,0.284-0.144,0.398-0.172c0.006,0.148,0.106,0.141,0.215,0.118 c-0.306-0.29-0.667-0.516-1.068-0.668c0.03,0.034,0.051,0.074,0.045,0.124c-0.017,0.135-0.223,0.137-0.347,0.167 c-0.084,0.02-0.139,0.051-0.191,0.075c-0.068,0.03-0.085,0.088-0.19,0.077c-0.002,0.09-0.095,0.178-0.173,0.09 c-0.016-0.019,0.01-0.208,0.016-0.242c0.016-0.086,0.061-0.145,0.079-0.224c0.019-0.084-0.116-0.169,0.056-0.185l-0.039,0.018 c0.065-0.023,0.189-0.037,0.32-0.032c-0.191-0.043-0.391-0.066-0.594-0.073c-0.086,0.079-0.168,0.2-0.23,0.252 c-0.045,0.04-0.03,0.076-0.097,0.116C9.746,7.2,9.672,7.161,9.634,7.177C9.546,7.212,9.552,7.3,9.454,7.313 c0.019-0.195,0.281-0.216,0.155-0.409C9.55,6.956,9.477,7.014,9.394,7.037C9.387,7.035,9.357,7.002,9.348,6.998 C9.308,7.069,9.09,7.047,8.95,6.991C8.905,7.007,8.859,7.016,8.815,7.033c-0.006,0.109-0.023,0.216-0.03,0.318 C8.91,7.483,9.325,7.609,9.443,7.379c0.115,0.067,0.183,0.202,0.228,0.306C9.578,7.702,9.473,7.694,9.392,7.665 c0.009,0.047-0.021,0.115-0.009,0.16C9.248,7.865,9.141,7.97,9.012,7.839c-0.03,0.022-0.065,0.051-0.087,0.077 C8.9,7.921,8.899,7.879,8.875,7.889C8.77,7.955,8.711,7.909,8.591,7.941c0.011,0.026,0.031,0.053,0.042,0.078 C8.569,8.08,8.55,8.148,8.503,8.201C8.447,8.259,8.319,8.208,8.267,8.283C8.206,8.371,8.224,8.785,8.086,8.528 c0.027-0.053-0.005-0.073-0.007-0.125C8.078,8.35,8.121,8.338,8.098,8.298c-0.017-0.03-0.116-0.037-0.14-0.056 C7.887,8.189,7.858,8.162,7.798,8.31C7.774,8.306,7.722,8.327,7.695,8.33c0.016,0.083-0.012,0.135-0.009,0.226 C7.694,8.67,7.808,8.634,7.785,8.728C7.749,8.884,7.818,9.115,7.863,9.276c0.107-0.03,0.244-0.075,0.366-0.045 c0.048,0.101,0.28,0.307,0.374,0.335C8.68,9.689,8.829,9.78,8.891,9.902c0.096,0.192,0.043,0.305,0.243,0.436 c0.104,0.07,0.329,0.063,0.377,0.254c0.043,0.181-0.096,0.247-0.186,0.388c-0.021,0.017-0.053,0-0.078,0.009 c-0.05,0.118-0.177,0.124-0.212,0.27c-0.128-0.009-0.27-0.049-0.394,0.01c0.043,0.174-0.129,0.287-0.262,0.365 c-0.189,0.109-0.247,0.181-0.401,0.335c0.055,0.116,0.142,0.223,0.283,0.222c-0.183,0.297-0.502-0.246-0.519-0.423 c-0.03-0.305,0.168-0.586,0.036-0.887c0.066-0.054,0.086-0.14,0.135-0.197c-0.091-0.059-0.075-0.122-0.113-0.201 c-0.019-0.04,0.036-0.077,0.004-0.135c-0.017-0.028-0.109-0.036-0.14-0.09C7.59,10.13,7.424,9.85,7.653,9.78 C7.627,9.608,7.833,9.476,7.842,9.322C7.734,9.161,7.756,8.978,7.599,8.825c-0.106-0.102-0.275-0.264-0.34-0.45 C6.974,8.852,6.8,9.405,6.8,10c0,1.764,1.435,3.2,3.2,3.2S13.2,11.764,13.2,10z",
        className: "iconColor"
    }))
};

const KT = {
    name: "Government",
    suppressMirroring: true,
    tooltipKey: "Government.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Government", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,13v1H0v-1h1v-1h5v1H7z M2,8H1v3h1V8z M3,8v3h1V8H3z M5,8v3h1V8H5z M14,2v4c0,0-0.889,0.444-1.778,0.444 C11.778,6.444,11.333,6.333,11,6c0-1-1-1-1-1S9.572,5.005,8.998,5.283L9,14H8V0.25C8,0.176,8.286,0,8.503,0 c0.218,0,0.494,0.186,0.494,0.259l0,1.294C9.646,1.287,10.464,1,11,1c1,0,1,1,1,1s0,0.444,0.593,0.444 C12.889,2.444,13.333,2.333,14,2z M13,3.409c-0.143,0.023-0.278,0.035-0.407,0.035C11.558,3.444,11,2.7,11,2c0,0,0,0,0,0s0,0,0,0 c-0.406,0-1.288,0.323-2,0.636v1.561C9.534,4.01,9.925,4,10,4c0.81,0,1.663,0.49,1.922,1.409c0.084,0.023,0.185,0.035,0.301,0.035 c0.259,0,0.538-0.059,0.778-0.13V3.409z M6,6L3.5,4L1,6H0v1h7V6H6z M3,4",
        className: "iconColor"
    }))
};

const WT = {
    name: "GrabberHorizontal",
    suppressMirroring: true,
    tooltipKey: "GrabberHorizontal.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GrabberHorizontal", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M1,6c0.553,0,1,0.448,1,1S1.553,8,1,8C0.447,8,0,7.552,0,7S0.447,6,1,6z M4,7c0,0.552,0.447,1,1,1 c0.553,0,1-0.448,1-1S5.553,6,5,6C4.447,6,4,6.448,4,7z M8,7c0,0.552,0.447,1,1,1c0.553,0,1-0.448,1-1S9.553,6,9,6 C8.447,6,8,6.448,8,7z M12,7c0,0.552,0.447,1,1,1c0.553,0,1-0.448,1-1s-0.447-1-1-1C12.447,6,12,6.448,12,7z",
        className: "iconColor"
    }))
};

const $T = {
    name: "GrabberReorderList",
    suppressMirroring: true,
    tooltipKey: "GrabberReorderList.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GrabberReorderList", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M9,3H5V2h4V3z M9,6H5v1h4V6z M9,10H5v1h4V10z",
        className: "iconColor"
    }))
};

const YT = {
    name: "GrabberReorderToken",
    suppressMirroring: true,
    tooltipKey: "GrabberReorderToken.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GrabberReorderToken", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6,5c0,0.552-0.448,1-1,1S4,5.552,4,5s0.448-1,1-1S6,4.448,6,5z M5,8C4.448,8,4,8.448,4,9s0.448,1,1,1 s1-0.448,1-1S5.552,8,5,8z M9,4C8.448,4,8,4.448,8,5s0.448,1,1,1s1-0.448,1-1S9.552,4,9,4z M9,8C8.448,8,8,8.448,8,9s0.448,1,1,1 s1-0.448,1-1S9.552,8,9,8z",
        className: "iconColor"
    }))
};

const qT = {
    name: "GrabberResizer",
    suppressMirroring: false,
    tooltipKey: "GrabberResizer.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GrabberResizer", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#231F20",
        d: "M11,4c0.552,0,1,0.448,1,1s-0.448,1-1,1s-1-0.448-1-1S10.448,4,11,4z M11,7 c0.552,0,1,0.448,1,1s-0.448,1-1,1s-1-0.448-1-1S10.448,7,11,7z M8,10c0.552,0,1,0.448,1,1s-0.448,1-1,1s-1-0.448-1-1S7.448,10,8,10 z M5,10c0.552,0,1,0.448,1,1s-0.448,1-1,1s-1-0.448-1-1S4.448,10,5,10z M8,7c0.552,0,1,0.448,1,1S8.552,9,8,9S7,8.552,7,8 S7.448,7,8,7z M11,10c0.552,0,1,0.448,1,1s-0.448,1-1,1s-1-0.448-1-1S10.448,10,11,10z",
        className: "iconColor"
    }))
};

const XT = {
    name: "GrabberVertical",
    suppressMirroring: true,
    tooltipKey: "GrabberVertical.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "GrabberVertical", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,12c0.553,0,1,0.448,1,1s-0.447,1-1,1c-0.553,0-1-0.448-1-1S6.447,12,7,12z M6,1c0,0.552,0.447,1,1,1 c0.553,0,1-0.448,1-1S7.553,0,7,0C6.447,0,6,0.448,6,1z M6,5c0,0.552,0.447,1,1,1c0.553,0,1-0.448,1-1S7.553,4,7,4 C6.447,4,6,4.448,6,5z M6,9c0,0.552,0.447,1,1,1c0.553,0,1-0.448,1-1S7.553,8,7,8C6.447,8,6,8.448,6,9z",
        className: "iconColor"
    }))
};

const ZT = {
    name: "HelpButton",
    suppressMirroring: true,
    tooltipKey: "HelpButton.icon.label",
    localeOverrides: {
        ar: {
            suppressMirroring: false
        }
    },
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "HelpButton", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6.512,8.286V7.982c0-0.128,0.01-0.243,0.028-0.345C6.559,7.537,6.588,7.44,6.628,7.349 C6.72,7.143,6.877,6.967,7.04,6.814L7.4,6.469c0.345-0.312,0.539-0.841,0.172-1.235c-0.214-0.231-0.61-0.271-0.889-0.145 C6.585,5.135,6.5,5.196,6.428,5.274C6.356,5.351,6.302,5.44,6.264,5.542C6.227,5.643,6.205,5.747,6.2,5.854L5.216,5.765 C5.248,5.509,5.316,5.282,5.42,5.082c0.104-0.2,0.238-0.369,0.404-0.508C5.989,4.435,6.179,4.33,6.392,4.257 C6.818,4.113,7.304,4.112,7.732,4.25C8.13,4.378,8.468,4.648,8.648,5.03c0.156,0.333,0.183,0.758,0.08,1.111 c-0.076,0.256-0.225,0.473-0.412,0.66C8.217,6.9,8.106,7.003,7.984,7.11C7.877,7.201,7.791,7.28,7.724,7.349 C7.6,7.47,7.518,7.614,7.48,7.782c-0.017,0.08-0.024,0.179-0.024,0.296v0.208H6.512z M6.352,9.398c0-0.798,1.273-0.815,1.28-0.017 C7.639,10.18,6.352,10.195,6.352,9.398z M7,2C4.239,2,2,4.239,2,7s2.239,5,5,5s5-2.239,5-5S9.761,2,7,2z M7,11c-2.206,0-4-1.794-4-4 s1.794-4,4-4s4,1.794,4,4S9.206,11,7,11z",
        className: "iconColor"
    }))
};

const JT = {
    name: "HelpButtonToolbar",
    suppressMirroring: true,
    tooltipKey: "HelpButtonToolbar.icon.label",
    localeOverrides: {
        ar: {
            suppressMirroring: false
        }
    },
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "HelpButtonToolbar", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6.268,8.356c0-0.384,0.056-0.7,0.168-0.948C6.548,7.16,6.756,6.892,7.06,6.604L7.6,6.088 c0.176-0.16,0.312-0.324,0.408-0.492c0.24-0.419,0.178-1.021-0.162-1.368C7.402,3.776,6.571,3.82,6.154,4.282 C5.934,4.526,5.816,4.82,5.8,5.164L4.324,5.032c0.088-0.752,0.388-1.344,0.9-1.776C6.079,2.534,7.405,2.412,8.41,2.878 c1.059,0.491,1.559,1.796,1.128,2.886C9.446,5.996,9.32,6.204,9.16,6.388C9,6.572,8.772,6.792,8.476,7.048 c-0.328,0.288-0.542,0.518-0.642,0.69c-0.1,0.172-0.15,0.426-0.15,0.762v0.312H6.268V8.356z M6.988,9.544 c1.238,0,1.224,1.846,0,1.848C5.756,11.393,5.752,9.544,6.988,9.544z M7,0C3.134,0,0,3.134,0,7c0,3.866,3.134,7,7,7s7-3.134,7-7 C14,3.134,10.866,0,7,0z M7,13c-3.308,0-6-2.692-6-6s2.692-6,6-6s6,2.692,6,6S10.308,13,7,13z",
        className: "iconColor"
    }))
};

const QT = {
    name: "Hidden",
    suppressMirroring: true,
    tooltipKey: "Hidden.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Hidden", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M4.112,7.767C4.046,7.521,4,7.267,4,7c0-1.657,1.343-3,3-3c0.267,0,0.521,0.046,0.767,0.112L6.865,5.014 C5.872,5.081,5.081,5.871,5.014,6.865L4.112,7.767z M8.986,7.135C8.919,8.129,8.128,8.919,7.135,8.986L6.233,9.888 C6.479,9.954,6.733,10,7,10c1.657,0,3-1.343,3-3c0-0.267-0.046-0.521-0.112-0.767L8.986,7.135z M1.893,9.986l0.72-0.72 C1.603,8.405,1,7.454,1,7c0-0.937,2.558-4,6-4c0.575,0,1.123,0.091,1.641,0.238l0.794-0.794C8.676,2.171,7.858,2,7,2 C3.134,2,0,5.333,0,7C0,7.797,0.722,8.973,1.893,9.986z M12.107,4.014l-0.72,0.72C12.397,5.595,13,6.546,13,7c0,0.937-2.558,4-6,4 c-0.575,0-1.123-0.091-1.641-0.238l-0.794,0.794C5.324,11.829,6.142,12,7,12c3.866,0,7-3.333,7-5 C14,6.203,13.278,5.027,12.107,4.014z M1.833,12.857L12.857,1.833c0.191-0.191,0.191-0.5,0-0.69c-0.191-0.191-0.5-0.191-0.69,0 L1.143,12.167c-0.191,0.191-0.191,0.5,0,0.69C1.238,12.952,1.363,13,1.488,13S1.738,12.952,1.833,12.857z",
        className: "iconColor"
    }))
};

const eR = {
    name: "History",
    suppressMirroring: true,
    tooltipKey: "History.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "History", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10,7v1H6V3h1v4H10z M7,0C4.81,0,2.878,1.022,1.598,2.598L0,1v4h4L2.299,3.299C3.396,1.904,5.09,1,7,1 c2.967,0,5.431,2.167,5.91,5h1.011C13.434,2.609,10.526,0,7,0z M12.91,8c-0.478,2.833-2.942,5-5.91,5c-3.309,0-6-2.691-6-6H0 c0,3.866,3.134,7,7,7c3.526,0,6.434-2.609,6.92-6H12.91z",
        className: "iconColor"
    }))
};

const tR = {
    name: "Home",
    suppressMirroring: true,
    tooltipKey: "Home.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Home", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M14,7l-2-2.096V0h-2v2.808L7.541,0.23c-0.283-0.295-0.799-0.295-1.082,0L0,7h2v7h10V7H14z M8,13L8,13l-2,0V9 h2L8,13L8,13z M11,13H9V8H5v5H3V6H2.993L7,1.832L11.008,6H11V13z",
        className: "iconColor"
    }))
};

const oR = {
    name: "Household",
    suppressMirroring: true,
    tooltipKey: "Household.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Household", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,5c0.828,0,1.5,0.895,1.5,2c0,1.105-0.672,2-1.5,2S5.5,8.105,5.5,7C5.5,5.895,6.172,5,7,5z M14,7h-2v7H2V7 H0l6.459-6.77c0.283-0.295,0.799-0.295,1.082,0L10,2.808V0h2v4.904L14,7z M11.008,6L7,1.832L2.992,6H3v7h1.867 C4.722,12.337,4.5,11.281,4.5,11c0-0.416,0.083-0.664,0.25-0.961S5.141,9.503,5.422,9.32C5.875,9.773,6.401,10,7,10 c0.594,0,1.122-0.227,1.586-0.68c0.281,0.183,0.504,0.422,0.668,0.719S9.5,10.6,9.5,11c0,0.272-0.191,1.337-0.315,2H11V6H11.008z",
        className: "iconColor"
    }))
};

const nR = {
    name: "Image",
    suppressMirroring: true,
    tooltipKey: "Image.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Image", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M5,5c0,0.552-0.448,1-1,1S3,5.552,3,5s0.448-1,1-1S5,4.448,5,5z M14,2v10c0,0.55-0.45,1-1,1H9H1 c-0.55,0-1-0.45-1-1V2c0-0.55,0.45-1,1-1h12C13.55,1,14,1.45,14,2z M9,12V6.41L3.41,12H9z M13,2H1v10h1l7-7l4,3.2V2z",
        className: "iconColor"
    }))
};

const aR = {
    name: "Import",
    suppressMirroring: true,
    tooltipKey: "Import.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Import", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M5.927,6.926l-5.78-6.073c-0.195-0.195-0.195-0.512,0-0.707s0.512-0.195,0.707,0l6.073,5.78l2-2v5h-5 L5.927,6.926z M4,9.999v3c0,0.552,0.448,1,1,1h8c0.552,0,1-0.448,1-1v-8c0-0.552-0.448-1-1-1h-3v1h3v8H5v-3H4z",
        className: "iconColor"
    }))
};

const rR = {
    name: "Increment",
    suppressMirroring: true,
    tooltipKey: "Increment.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Increment", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7.376,4.171l3.5,4c0.183,0.208,0.161,0.523-0.047,0.706c-0.207,0.182-0.523,0.162-0.705-0.047L7,5.259 l-3.124,3.57C3.694,9.038,3.378,9.058,3.171,8.876C2.963,8.694,2.942,8.378,3.124,8.171l3.5-4C6.719,4.062,6.856,4,7,4 S7.281,4.062,7.376,4.171z",
        className: "iconColor"
    }))
};

const sR = {
    name: "Information",
    suppressMirroring: true,
    tooltipKey: "Information.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Information", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,0C3.134,0,0,3.134,0,7c0,3.866,3.134,7,7,7s7-3.134,7-7C14,3.134,10.866,0,7,0z M7,13 c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M7,11c-0.414,0-0.75-0.336-0.75-0.75v-3C6.25,6.836,6.586,6.5,7,6.5 s0.75,0.336,0.75,0.75v3C7.75,10.664,7.414,11,7,11z M6,4c0-0.552,0.448-1,1-1s1,0.448,1,1S7.552,5,7,5S6,4.552,6,4z",
        className: "iconColor"
    }))
};

const iR = {
    name: "InformationButtonSmall",
    suppressMirroring: true,
    tooltipKey: "InformationButtonSmall.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "InformationButtonSmall", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,10c-0.414,0-0.75-0.336-0.75-0.75v-2C6.25,6.836,6.586,6.5,7,6.5s0.75,0.336,0.75,0.75v2 C7.75,9.664,7.414,10,7,10z M7,5.5c0.414,0,0.75-0.336,0.75-0.75S7.414,4,7,4S6.25,4.336,6.25,4.75S6.586,5.5,7,5.5z M12,7 c0,2.761-2.239,5-5,5S2,9.761,2,7s2.239-5,5-5S12,4.239,12,7z M11,7c0-2.206-1.794-4-4-4S3,4.794,3,7s1.794,4,4,4S11,9.206,11,7z",
        className: "iconColor"
    }))
};

const lR = {
    name: "Italic",
    suppressMirroring: true,
    tooltipKey: "Italic.icon.label",
    localeOverrides: {
        da: {
            mappedName: "italicDaDeEsSv"
        },
        de: {
            mappedName: "italicDaDeEsSv"
        },
        es: {
            mappedName: "italicDaDeEsSv"
        },
        hu: {
            mappedName: "italicHu"
        },
        it: {
            mappedName: "italicIt"
        },
        no: {
            mappedName: "italicDaDeEsSv"
        },
        ru: {
            mappedName: "italicRu"
        },
        sv: {
            mappedName: "italicDaDeEsSv"
        },
        tr: {
            mappedName: "italicTr"
        },
        uk: {
            mappedName: "italicRu"
        }
    },
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Italic", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M8.728,2l-1.522,8.62h1.148l-0.22,1H4l0.22-1h1.141L6.882,2H5.69l0.22-1h4.134l-0.22,1H8.728z",
        className: "iconColor"
    }))
};

const cR = {
    name: "ItalicDaDeEsSv",
    suppressMirroring: true,
    tooltipKey: "ItalicDaDeEsSv.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Italic_x5F_Da_x5F_De_x5F_Es_x5F_Sv", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M8.274,11.62l-3.52-5.34H4.71l-0.913,5.34H2L3.841,1h1.797L4.813,5.71h0.044L9.555,1H12L6.595,6.01 l4.05,5.61C10.645,11.62,8.274,11.62,8.274,11.62z",
        className: "iconColor"
    }))
};

const dR = {
    name: "ItalicHu",
    suppressMirroring: true,
    tooltipKey: "ItalicHu.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Italic_x5F_Hu", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7.277,1c0.85,0,1.65,0.155,2.4,0.465c0.75,0.311,1.363,0.801,1.838,1.471s0.712,1.505,0.712,2.505 c0,1.22-0.28,2.297-0.84,3.232c-0.561,0.935-1.333,1.66-2.318,2.175S6.978,11.62,5.748,11.62H1.772L3.647,1H7.277z M5.822,10 c0.95,0,1.763-0.2,2.438-0.6C8.935,9,9.445,8.47,9.79,7.811c0.345-0.66,0.518-1.37,0.518-2.131c0-0.899-0.295-1.642-0.885-2.228 c-0.59-0.585-1.455-0.877-2.595-0.877H5.192L3.888,10H5.822z",
        className: "iconColor"
    }))
};

const uR = {
    name: "ItalicIt",
    suppressMirroring: true,
    tooltipKey: "ItalicIt.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Italic_x5F_It", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6.802,12.159c-0.942,0-1.778-0.189-2.508-0.569C3.565,11.21,3,10.675,2.6,9.984C2.2,9.295,2,8.5,2,7.6 c0-1.21,0.279-2.32,0.836-3.33s1.32-1.808,2.288-2.393C6.09,1.292,7.162,1,8.338,1c0.78,0,1.502,0.149,2.165,0.449 C11.167,1.75,11.666,2.14,12,2.62l-1.474,1.095c-0.192-0.3-0.484-0.562-0.874-0.788C9.262,2.702,8.804,2.59,8.277,2.59 c-0.821,0-1.563,0.228-2.227,0.683C5.387,3.728,4.87,4.323,4.5,5.058C4.13,5.792,3.945,6.56,3.945,7.359 c0,0.591,0.121,1.125,0.365,1.605c0.243,0.479,0.598,0.862,1.064,1.147S6.392,10.54,7.03,10.54c0.547,0,1.064-0.115,1.55-0.346 c0.486-0.229,0.917-0.569,1.292-1.02l1.2,1.05c-0.466,0.58-1.056,1.048-1.77,1.402C8.588,11.982,7.755,12.159,6.802,12.159z",
        className: "iconColor"
    }))
};

const mR = {
    name: "ItalicRu",
    suppressMirroring: true,
    tooltipKey: "ItalicRu.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Italic_x5F_Ru", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M8.274,11.62l-3.52-5.34H4.71l-0.913,5.34H2L3.841,1h1.797L4.813,5.71h0.044L9.555,1H12L6.595,6.01 l4.05,5.61C10.645,11.62,8.274,11.62,8.274,11.62z",
        className: "iconColor"
    }))
};

const pR = {
    name: "ItalicTr",
    suppressMirroring: true,
    tooltipKey: "ItalicTr.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Italic_x5F_Tr", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7.803,2.62l-1.59,9H4.368l1.575-9h-3.15L3.078,1h8.13l-0.285,1.62H7.803z",
        className: "iconColor"
    }))
};

const fR = {
    name: "JobTemplate",
    suppressMirroring: true,
    tooltipKey: "JobTemplate.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "JobTemplate", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M5,8H4V6h1V8z M4,3v2h1V4h1V3H4z M7,3v1h1v1h1V3H7z M12.088,10.571c-0.081,0.442-0.253,0.853-0.5,1.208 l0.644,0.645l-0.809,0.809l-0.643-0.645c-0.357,0.246-0.767,0.419-1.209,0.5V14H8.429v-0.912c-0.442-0.081-0.853-0.254-1.209-0.5 l-0.643,0.645l-0.809-0.809l0.645-0.645c-0.247-0.355-0.419-0.766-0.5-1.208H5V9.429h0.912c0.081-0.442,0.253-0.852,0.5-1.208 L5.768,7.576l0.809-0.809L7.22,7.412c0.357-0.246,0.767-0.419,1.209-0.5V6h1.143v0.912c0.442,0.081,0.852,0.254,1.209,0.5 l0.643-0.645l0.809,0.809l-0.644,0.644c0.247,0.356,0.419,0.766,0.5,1.208H13v1.143H12.088z M10,10c0-0.553-0.447-1-1-1 c-0.553,0-1,0.447-1,1c0,0.553,0.447,1,1,1C9.553,11,10,10.553,10,10z M4,12H2V1h6.586L11,3.414V5h1V3.414 c0-0.265-0.105-0.52-0.293-0.707L9.293,0.293C9.105,0.105,8.851,0,8.586,0H2C1.448,0,1,0.448,1,1v11c0,0.552,0.448,1,1,1h2V12z",
        className: "iconColor"
    }))
};

const gR = {
    name: "Layers",
    suppressMirroring: true,
    tooltipKey: "Layers.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Layers", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,0L0,4l7,4l7-4L7,0z M2.016,4L7,1.151L11.984,4L7,6.849L2.016,4z M12.383,6.076L14,7l-7,4L0,7l1.617-0.924 l1.008,0.576L2.016,7L7,9.849L11.984,7l-0.609-0.348L12.383,6.076z M12.383,9.076L14,10l-7,4l-7-4l1.617-0.924l1.008,0.576L2.016,10 L7,12.849L11.984,10l-0.609-0.348L12.383,9.076z",
        className: "iconColor"
    }))
};

const hR = {
    name: "LinesPlot",
    suppressMirroring: true,
    tooltipKey: "LinesPlot.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "LinesPlot", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M14,13v1H0V0h1v13H14z M11.368,6.411l1.592-3.714c0.108-0.253-0.009-0.547-0.263-0.656 c-0.254-0.11-0.547,0.007-0.657,0.263l-1.398,3.261L6.88,1.175C6.789,1.069,6.658,1.006,6.52,1C6.376,0.985,6.245,1.048,6.146,1.146 l-3,3c-0.195,0.195-0.195,0.512,0,0.707s0.512,0.195,0.707,0l2.618-2.618l3.732,4.354L9.381,8.508L6.9,5.2 C6.801,5.067,6.622,4.995,6.475,5C6.308,5.009,6.157,5.1,6.071,5.243l-3,5c-0.143,0.237-0.065,0.544,0.172,0.686 C3.323,10.977,3.412,11,3.5,11c0.169,0,0.335-0.086,0.429-0.243l2.617-4.362L9.1,9.8c0.107,0.143,0.284,0.22,0.46,0.197 c0.177-0.021,0.33-0.136,0.4-0.3l0.969-2.261l1.191,1.39C12.22,8.941,12.359,9,12.5,9c0.115,0,0.231-0.04,0.325-0.121 c0.21-0.18,0.234-0.495,0.055-0.705L11.368,6.411z",
        className: "iconColor"
    }))
};

const bR = {
    name: "Link",
    suppressMirroring: true,
    tooltipKey: "Link.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Link", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#1A1A1A",
        d: "M8.376,7.342l0.869,0.869c-0.242,0.25-0.454,0.467-0.511,0.524 C8.321,9.147,7.815,9.427,7.267,9.586L7.178,9.61C7.033,9.648,6.903,9.673,6.777,9.694C6.618,9.716,6.459,9.74,6.296,9.74 c-0.064,0-0.127-0.011-0.19-0.019l-0.085-0.01C5.874,9.699,5.725,9.694,5.583,9.664c-0.65-0.135-1.247-0.452-1.725-0.929 L1.008,5.886c-1.345-1.345-1.345-3.533,0-4.879C1.681,0.336,2.564,0,3.447,0s1.767,0.336,2.439,1.007l1.76,1.761 C7.139,2.775,6.65,2.872,6.18,3.024L5.025,1.869C4.606,1.45,4.046,1.22,3.447,1.22c-0.6,0-1.16,0.23-1.578,0.649 c-0.87,0.87-0.871,2.285-0.001,3.155l2.023,2.023l0.827,0.826c0.211,0.212,0.459,0.375,0.73,0.485 c0.265,0.108,0.552,0.165,0.848,0.165c0.6,0,1.16-0.231,1.578-0.65C7.935,7.811,8.143,7.593,8.376,7.342z M12.994,8.117 l-2.849-2.849C9.497,4.62,8.631,4.262,7.707,4.262c-0.924,0-1.79,0.358-2.439,1.005C5.212,5.325,4.999,5.542,4.758,5.792 l0.869,0.869C5.86,6.41,6.067,6.192,6.129,6.13c0.417-0.419,0.978-0.65,1.578-0.65c0.599,0,1.16,0.231,1.578,0.65l2.849,2.849 c0.87,0.87,0.869,2.285-0.001,3.155c-0.418,0.419-0.978,0.649-1.578,0.649c-0.599,0-1.159-0.23-1.577-0.649l-1.156-1.156 c-0.046,0.015-0.089,0.035-0.136,0.048L7.561,11.06c-0.199,0.053-0.373,0.087-0.543,0.114c-0.253,0.036-0.455,0.059-0.657,0.063 l1.757,1.758C8.766,13.642,9.632,14,10.556,14c0.924,0,1.79-0.358,2.438-1.005C13.643,12.346,14,11.48,14,10.556 C14,9.632,13.643,8.766,12.994,8.117z",
        className: "iconColor"
    }))
};

const vR = {
    name: "LinkBroken",
    suppressMirroring: true,
    tooltipKey: "LinkBroken.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "LinkBroken", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M8.5,0L8.5,0C8.775,0,9,0.225,9,0.5v2C9,2.775,8.775,3,8.5,3h0C8.225,3,8,2.775,8,2.5v-2 C8,0.225,8.225,0,8.5,0z M14,5.5L14,5.5C14,5.225,13.775,5,13.5,5h-2C11.225,5,11,5.225,11,5.5v0C11,5.775,11.225,6,11.5,6h2 C13.775,6,14,5.775,14,5.5z M12.854,1.146c-0.195-0.195-0.512-0.195-0.707,0l-2,2c-0.195,0.195-0.195,0.512,0,0.707 C10.244,3.951,10.372,4,10.5,4s0.256-0.049,0.354-0.146l2-2C13.049,1.658,13.049,1.342,12.854,1.146z M10.363,8L9,8.5l0.391,1.299 c0.357,1.09-0.212,2.247-1.262,2.6c-0.2,0.067-0.407,0.101-0.615,0.101c-0.864,0-1.626-0.558-1.899-1.389L4.932,9.029 c-0.124-0.377-0.392-0.69-0.746-0.87L2.604,7.356C1.613,6.853,1.213,5.623,1.713,4.614C2.054,3.927,2.74,3.5,3.503,3.5 c0.307,0,0.602,0.071,0.877,0.211L5,4l1-1L5.06,2.373C3.342,1.501,1.231,2.21,0.369,3.948c-0.862,1.738-0.162,3.874,1.556,4.746 l1.582,0.803l0.683,2.082c0.605,1.846,2.593,2.855,4.417,2.242c1.824-0.612,2.822-2.623,2.216-4.469L10.363,8z",
        className: "iconColor"
    }))
};

const yR = {
    name: "Location",
    suppressMirroring: true,
    tooltipKey: "Location.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Location", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M8.161,7.809L7,14L5.839,7.809C4.2,7.309,3,5.803,3,4c0-2.209,1.791-4,4-4s4,1.791,4,4 C11,5.803,9.8,7.309,8.161,7.809z",
        className: "iconColor"
    }))
};

const xR = {
    name: "LockClosed",
    suppressMirroring: true,
    tooltipKey: "LockClosed.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "LockClosed", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M11,5.277V4c0-2.209-1.791-4-4-4S3,1.791,3,4v1.277C2.405,5.624,2,6.262,2,7v5c0,1.105,0.895,2,2,2h6 c1.105,0,2-0.895,2-2V7C12,6.262,11.595,5.624,11,5.277z M4,4c0-1.654,1.346-3,3-3c1.654,0,3,1.346,3,3v1H4V4z M11,12 c0,0.551-0.449,1-1,1H4c-0.551,0-1-0.449-1-1V7c0-0.551,0.449-1,1-1h6c0.551,0,1,0.449,1,1V12z M7,11L7,11c-0.552,0-1-0.448-1-1V9 c0-0.552,0.448-1,1-1h0c0.552,0,1,0.448,1,1v1C8,10.552,7.552,11,7,11z",
        className: "iconColor"
    }))
};

const SR = {
    name: "Matrix",
    suppressMirroring: true,
    tooltipKey: "Matrix.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Matrix", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,0H1C0.448,0,0,0.448,0,1v12c0,0.552,0.448,1,1,1h12c0.552,0,1-0.448,1-1V1C14,0.448,13.552,0,13,0z M13,13H1V1h12V13z M3,12H2v-1h1V12z M12,12h-1v-1h1V12z M6,12H5v-1h1V12z M9,12H8v-1h1V12z M3,9H2V8h1V9z M12,9h-1V8h1V9z M6,9H5V8 h1V9z M9,9H8V8h1V9z M3,6H2V5h1V6z M12,6h-1V5h1V6z M6,6H5V5h1V6z M9,6H8V5h1V6z M3,3H2V2h1V3z M12,3h-1V2h1V3z M6,3H5V2h1V3z M9,3 H8V2h1V3z",
        className: "iconColor"
    }))
};

const wR = {
    name: "MaximizeView",
    suppressMirroring: true,
    tooltipKey: "MaximizeView.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "MaximizeView", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M5.854,8.854l-3,3L5,14H0V9l2.146,2.146l3-3c0.195-0.195,0.512-0.195,0.707,0 C6.048,8.341,6.049,8.658,5.854,8.854z M14,0H9l2.146,2.146l-3,3c-0.195,0.195-0.195,0.512,0,0.707C8.244,5.951,8.372,6,8.5,6 s0.256-0.049,0.354-0.146l3-3L14,5V0z",
        className: "iconColor"
    }))
};

const CR = {
    name: "Measure",
    suppressMirroring: true,
    tooltipKey: "Measure.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Measure", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13.689,4.123L9.877,0.311c-0.415-0.415-1.088-0.415-1.503,0L0.311,8.374c-0.415,0.415-0.415,1.088,0,1.503 l3.811,3.811c0.415,0.415,1.088,0.415,1.503,0l8.063-8.063C14.104,5.211,14.104,4.538,13.689,4.123z M4.919,12.981L4.875,13 c-0.026,0-0.04-0.014-0.045-0.019L1.019,9.17l8.062-8.151l3.9,3.812L4.919,12.981z M7.25,8L5.421,6.141l0.716-0.724L8,7.25L7.25,8z M7.412,4.128l0.711-0.719l2.455,2.429L9.841,6.583L7.412,4.128z M6.603,9.857l-0.743,0.751L3.434,8.15l0.713-0.72L6.603,9.857z",
        className: "iconColor"
    }))
};

const ER = {
    name: "MedicalConditions",
    suppressMirroring: true,
    tooltipKey: "MedicalConditions.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "MedicalConditions", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7.25,6.774V5.807C7.653,5.766,8.088,5.75,8.5,5.75c0.138,0,0.25-0.112,0.25-0.25S8.638,5.25,8.5,5.25 c-0.476,0-0.884,0.021-1.25,0.057V4c0-0.138-0.112-0.25-0.25-0.25S6.75,3.862,6.75,4v1.373C5.733,5.546,5.25,5.909,5.25,6.5 c0,0.408,0.593,0.533,1.5,0.693v1.034C6.665,8.235,6.581,8.248,6.495,8.25C6.357,8.253,6.247,8.367,6.25,8.505 C6.253,8.641,6.364,8.75,6.5,8.75c0.002,0,0.003,0,0.005,0C6.589,8.748,6.668,8.734,6.75,8.727V10c0,0.138,0.112,0.25,0.25,0.25 S7.25,10.138,7.25,10V8.66c0.536-0.11,0.999-0.316,1.258-0.591C8.674,7.893,8.758,7.693,8.75,7.49 C8.734,7.075,8.123,6.931,7.25,6.774z M5.755,6.439C5.804,6.148,6.207,5.976,6.75,5.875v0.81C6.357,6.615,5.906,6.526,5.755,6.439z M8.145,7.726C7.972,7.909,7.638,8.054,7.25,8.147V7.282C7.657,7.357,8.113,7.454,8.247,7.55C8.237,7.605,8.202,7.665,8.145,7.726z M14,5.232l-1.982-3.464L8.982,3.536L9,0H5l0.018,3.536L1.982,1.768L0,5.232L3.035,7L0,8.768l1.982,3.464l3.035-1.768V14h3.965 v-3.536l3.035,1.768L14,8.768L10.965,7L14,5.232z M12.64,9.133l-0.989,1.728L8.994,9.313L7.982,9.897V13H6.018V9.897L5.006,9.313 L2.35,10.861L1.36,9.133L4,7.595v-1.19L1.36,4.867l0.99-1.728l2.657,1.548l1.014-0.586L6.005,1h1.99L7.979,4.101l1.014,0.586 l2.657-1.548l0.989,1.728L10,6.405v1.19L12.64,9.133z",
        className: "iconColor"
    }))
};

const IR = {
    name: "MenuCheck",
    suppressMirroring: true,
    tooltipKey: "MenuCheck.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "MenuCheck", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6.5,9.999c-0.132,0-0.259-0.052-0.354-0.146l-2-2c-0.195-0.195-0.195-0.512,0-0.707 c0.195-0.195,0.512-0.195,0.707,0L6.4,8.693l2.671-4.451C9.215,4.004,9.524,3.93,9.757,4.071c0.237,0.142,0.314,0.449,0.172,0.686 l-3,5C6.85,9.889,6.714,9.977,6.562,9.996C6.541,9.998,6.521,9.999,6.5,9.999z",
        className: "iconColor"
    }))
};

const _R = {
    name: "MoveLeft",
    suppressMirroring: false,
    tooltipKey: "MoveLeft.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "MoveLeft", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10.5,11c-0.141,0-0.281-0.059-0.379-0.175l-3-3.5c-0.161-0.187-0.161-0.463,0-0.65l3-3.5 c0.18-0.21,0.496-0.233,0.705-0.054c0.21,0.18,0.234,0.495,0.054,0.705L8.159,7l2.721,3.175c0.18,0.209,0.156,0.525-0.054,0.705 C10.731,10.96,10.615,11,10.5,11z M5.825,10.879c0.21-0.18,0.234-0.495,0.054-0.705L3.159,7L5.88,3.825 C6.059,3.615,6.035,3.3,5.825,3.12C5.617,2.941,5.301,2.965,5.12,3.174l-3,3.5c-0.161,0.187-0.161,0.463,0,0.65l3,3.5 C5.219,10.941,5.359,11,5.5,11C5.615,11,5.731,10.96,5.825,10.879z",
        className: "iconColor"
    }))
};

const DR = {
    name: "MoveRight",
    suppressMirroring: false,
    tooltipKey: "MoveRight.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "MoveRight", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M3.5,11c-0.115,0-0.231-0.04-0.325-0.121c-0.21-0.18-0.234-0.495-0.054-0.705L5.841,7l-2.72-3.175 C2.941,3.615,2.965,3.3,3.175,3.12C3.385,2.941,3.7,2.965,3.879,3.174l3,3.5c0.161,0.187,0.161,0.463,0,0.65l-3,3.5 C3.781,10.941,3.641,11,3.5,11z M8.879,10.825l3-3.5c0.161-0.187,0.161-0.463,0-0.65l-3-3.5C8.7,2.965,8.384,2.941,8.175,3.12 C7.965,3.3,7.941,3.615,8.121,3.825L10.841,7L8.12,10.175C7.94,10.384,7.964,10.7,8.174,10.88C8.269,10.96,8.385,11,8.5,11 C8.641,11,8.781,10.941,8.879,10.825z",
        className: "iconColor"
    }))
};

const LR = {
    name: "NestedGroup",
    suppressMirroring: true,
    tooltipKey: "NestedGroup.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "NestedGroup", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M4,14H1c-0.552,0-1-0.448-1-1V1c0-0.552,0.448-1,1-1h3v1H1v12h3V14z M13,0h-3v1h3v12h-3v1h3 c0.552,0,1-0.448,1-1V1C14,0.448,13.552,0,13,0z M11,3H3v1h8V3z M11,6H3v1h8V6z M11,9H3v1h8V9z",
        className: "iconColor"
    }))
};

const TR = {
    name: "NewStarburst",
    suppressMirroring: true,
    tooltipKey: "NewStarburst.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "NewStarburst", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,9v4c0,0.552-0.448,1-1,1H2c-0.552,0-1-0.448-1-1V1c0-0.552,0.448-1,1-1h2v1H2v12h10V9H13z M12.5,4H9.707 l1.445-1.445c0.194-0.194,0.194-0.513,0-0.707s-0.513-0.194-0.707,0L9,3.293V0.5C9,0.225,8.775,0,8.5,0S8,0.225,8,0.5v2.793 L6.555,1.848c-0.194-0.194-0.513-0.194-0.707,0s-0.194,0.513,0,0.707L7.293,4H4.5C4.225,4,4,4.225,4,4.5S4.225,5,4.5,5h2.793 L5.848,6.445c-0.194,0.194-0.194,0.513,0,0.707s0.513,0.194,0.707,0L8,5.707V8.5C8,8.775,8.225,9,8.5,9S9,8.775,9,8.5V5.707 l1.445,1.445c0.194,0.194,0.513,0.194,0.707,0s0.194-0.513,0-0.707L9.707,5H12.5C12.775,5,13,4.775,13,4.5S12.775,4,12.5,4z",
        className: "iconColor"
    }))
};

const RR = {
    name: "NormalView",
    suppressMirroring: true,
    tooltipKey: "NormalView.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "NormalView", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13.854,13.854C13.756,13.951,13.628,14,13.5,14s-0.256-0.049-0.354-0.146l-3-3L8,13V8h5l-2.146,2.146l3,3 C14.049,13.342,14.049,13.658,13.854,13.854z M3.854,3.146l-3-3c-0.195-0.195-0.512-0.195-0.707,0s-0.195,0.512,0,0.707l3,3L1,6h5V1 L3.854,3.146z",
        className: "iconColor"
    }))
};

const kR = {
    name: "Notification",
    suppressMirroring: true,
    tooltipKey: "Notification.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Notification", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M5,11h4c0,1.105-0.895,2-2,2S5,12.105,5,11z M13,8v2H1V8c0.947,0,1.714-1.053,1.714-2V5.286 C2.714,2.929,4.643,1,7,1s4.286,1.929,4.286,4.286V6C11.286,6.947,12.053,8,13,8z M12,8.779C10.955,8.296,10.286,7.1,10.286,6V5.286 C10.286,3.475,8.812,2,7,2S3.714,3.475,3.714,5.286V6c0,1.1-0.669,2.296-1.714,2.779V9h10V8.779z",
        className: "iconColor"
    }))
};

const AR = {
    name: "NumericField",
    suppressMirroring: true,
    tooltipKey: "NumericField.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "NumericField", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,2H1C0.448,2,0,2.448,0,3v8c0,0.552,0.448,1,1,1h12c0.552,0,1-0.448,1-1V3C14,2.448,13.552,2,13,2z M13,11H1V3h12V11z M4.297,8.941H3.781V5.947c0-0.266,0.008-0.512,0.023-0.738C3.75,5.268,3.691,5.322,3.629,5.373 C3.43,5.539,3.212,5.719,2.976,5.912L2.7,5.558l1.16-0.899h0.437V8.941z M7.968,8.941H5.135V8.502l1.122-1.134 c0.338-0.342,0.562-0.586,0.671-0.732s0.19-0.288,0.244-0.425s0.081-0.284,0.081-0.442c0-0.227-0.067-0.403-0.202-0.53 s-0.319-0.19-0.554-0.19c-0.176,0-0.343,0.029-0.499,0.088C5.84,5.194,5.663,5.301,5.466,5.455L5.185,5.101 c0.4-0.336,0.838-0.504,1.312-0.504c0.398,0,0.714,0.103,0.948,0.306c0.232,0.205,0.35,0.482,0.35,0.834 c0,0.188-0.034,0.369-0.103,0.543c-0.068,0.175-0.17,0.353-0.307,0.532C7.248,6.994,7.019,7.241,6.697,7.556L5.803,8.438v0.023 h2.165V8.941z M11.238,5.66c0,0.273-0.077,0.498-0.23,0.674s-0.372,0.293-0.657,0.352v0.023c0.342,0.043,0.597,0.152,0.767,0.328 c0.168,0.176,0.253,0.404,0.253,0.686c0,0.408-0.142,0.724-0.425,0.945S10.255,9,9.726,9C9.499,9,9.29,8.983,9.101,8.95 C8.909,8.917,8.726,8.856,8.548,8.769V8.276c0.182,0.09,0.376,0.159,0.583,0.208s0.407,0.073,0.601,0.073 c0.723,0,1.084-0.282,1.084-0.847c0-0.504-0.399-0.756-1.198-0.756H9.201V6.507h0.422c0.336,0,0.599-0.071,0.788-0.216 c0.189-0.143,0.284-0.342,0.284-0.596c0-0.205-0.069-0.365-0.206-0.48C10.351,5.1,10.16,5.042,9.916,5.042 c-0.189,0-0.364,0.026-0.526,0.077C9.23,5.172,9.044,5.266,8.835,5.402l-0.264-0.36c0.176-0.139,0.378-0.247,0.607-0.327 c0.23-0.078,0.475-0.118,0.732-0.118c0.418,0,0.743,0.095,0.978,0.286C11.12,5.072,11.238,5.332,11.238,5.66z",
        className: "iconColor"
    }))
};

const MR = {
    name: "Open",
    suppressMirroring: true,
    tooltipKey: "Open.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Open", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12.999,4.001L12.999,4.001c0-0.553-0.448-1.001-1-1.001h-5L6.212,1.427C6.082,1.165,5.814,1,5.522,1h-4.06 C1.178,1,0.918,1.161,0.791,1.416L0,3c0,0.001,0,9,0,9c0,0.55,0.449,1,0.999,1H1h10.998h0.096c0.514,0,0.944-0.389,0.995-0.901L14,5 C14.005,4.404,13.588,4.002,12.999,4.001z M12.095,12H1.999c-0.002,0,1-7,1-7h9.988L12.095,12z",
        className: "iconColor"
    }))
};

const NR = {
    name: "Overflow",
    suppressMirroring: true,
    tooltipKey: "Overflow.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Overflow", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M8.5,1.5C8.5,2.328,7.828,3,7,3S5.5,2.328,5.5,1.5S6.172,0,7,0S8.5,0.672,8.5,1.5z M7,5 C6.172,5,5.5,5.672,5.5,6.5S6.172,8,7,8s1.5-0.672,1.5-1.5S7.828,5,7,5z M7,10c-0.828,0-1.5,0.672-1.5,1.5S6.172,13,7,13 s1.5-0.672,1.5-1.5S7.828,10,7,10z",
        className: "iconColor"
    }))
};

const OR = {
    name: "OverflowLite",
    suppressMirroring: true,
    tooltipKey: "OverflowLite.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "OverflowLite", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,2c0.552,0,1,0.448,1,1S7.552,4,7,4S6,3.552,6,3S6.448,2,7,2z M6,7c0,0.552,0.448,1,1,1s1-0.448,1-1 S7.552,6,7,6S6,6.448,6,7z M6,11c0,0.552,0.448,1,1,1s1-0.448,1-1s-0.448-1-1-1S6,10.448,6,11z",
        className: "iconColor"
    }))
};

const PR = {
    name: "PageControlDot",
    suppressMirroring: true,
    tooltipKey: "PageControlDot.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "PageControlDot", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,4C5.344,4,4,5.344,4,7c0,1.656,1.344,3,3,3c1.656,0,3-1.344,3-3C10,5.344,8.656,4,7,4z M7,9 C5.898,9,5,8.102,5,7s0.898-2,2-2s2,0.898,2,2S8.102,9,7,9z",
        className: "iconColor"
    }))
};

const BR = {
    name: "PageControlDotSelected",
    suppressMirroring: true,
    tooltipKey: "PageControlDotSelected.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "PageControlDotSelected", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10,7c0,1.656-1.344,3-3,3c-1.656,0-3-1.344-3-3c0-1.656,1.344-3,3-3C8.656,4,10,5.344,10,7z",
        className: "iconColor"
    }))
};

const zR = {
    name: "Pan",
    suppressMirroring: true,
    tooltipKey: "Pan.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Pan", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M11,2V1.5C11,0.675,10.325,0,9.5,0c-0.385,0-0.734,0.151-1,0.392C8.234,0.151,7.885,0,7.5,0C6.675,0,6,1,6,1 C4.895,1,4,1.895,4,3v1.97V5v0.981v0.834L3.636,6.451c-0.601-0.601-1.584-0.601-2.185,0c-0.601,0.601-0.601,1.584,0,2.185L4.847,12 C5.002,12.155,5.523,12.545,6,12.722C6.472,12.891,6.972,13,7.5,13h1c2.304,0,4.246-1.761,4.5-4V4C13,2.895,12.105,2,11,2z M8.5,12 h-1c-0.539,0-1.044-0.12-1.5-0.338c-0.505-0.231-3.843-3.733-3.843-3.733c-0.209-0.209-0.209-0.562,0-0.771 C2.259,7.056,2.396,7,2.544,7c0.084,0,0.247,0.021,0.385,0.158c0,0,1.027,1.055,1.094,1.094S5,8.525,5,8V7.815V7V5V3 c0-0.551,0.448-1,1-1v5l1-1V3V1.5C7,1.229,7.229,1,7.5,1c0.15,0,0.263,0.073,0.33,0.134L8,1.287V6h1V1.287l0.17-0.153 C9.237,1.073,9.35,1,9.5,1C9.771,1,10,1.229,10,1.5V6l1,1V3c0.552,0,1,0.449,1,1v4.904L12,9C11.755,10.692,10.258,12,8.5,12z",
        className: "iconColor"
    }))
};

const FR = {
    name: "PinPropertyPane",
    suppressMirroring: true,
    tooltipKey: "PinPropertyPane.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "PinPropertyPane", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10,8H8v1l-1,3L6,9V8H4c0-1.066,0.848-1.937,1.901-1.99L5.6,3H4.5C4.225,3,4,2.775,4,2.5S4.225,2,4.5,2h1h3 h1C9.775,2,10,2.225,10,2.5S9.775,3,9.5,3H8.4L8.099,6.01C9.152,6.063,10,6.934,10,8z",
        className: "iconColor"
    }))
};

const jR = {
    name: "Play",
    suppressMirroring: false,
    tooltipKey: "Play.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Play", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M2,2v10l10-5L2,2z M3.5,4.427L8.646,7L3.5,9.573V4.427z",
        className: "iconColor"
    }))
};

const VR = {
    name: "Police",
    suppressMirroring: true,
    tooltipKey: "Police.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Police", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10,4c0-1.933-1-4-3-4S4,2.067,4,4L3,5c1.319,0,2.638,0.87,3.383,1.462c0.363,0.289,0.871,0.289,1.234,0 C8.362,5.87,9.681,5,11,5L10,4z M7,5C6.448,5,6,4.328,6,3.5S6.448,2,7,2s1,0.672,1,1.5S7.552,5,7,5z M9.983,6.228 C9.892,8.329,8.598,10,7,10S4.108,8.329,4.017,6.228c0.55,0.206,1.145,0.541,1.743,1.017C6.112,7.524,6.553,7.679,7,7.679 s0.888-0.154,1.239-0.434C8.837,6.769,9.433,6.434,9.983,6.228z M2.007,14c-0.056-0.987,0.247-2.266,1.044-3.06 c0.443-0.442,1.003-0.757,1.618-0.94c0.5,0.462,1.085,0.777,1.724,0.906c0.207,0.051,0.419,0.081,0.638,0.081 s0.431-0.03,0.638-0.081C8.307,10.777,8.892,10.462,9.392,10c0.615,0.183,1.174,0.499,1.618,0.94c0.797,0.794,1.018,2.06,0.988,3.06 H2.007z",
        className: "iconColor"
    }))
};

const HR = {
    name: "Poverty",
    suppressMirroring: true,
    tooltipKey: "Poverty.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Poverty", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7.5,4c0,1.105-0.672,2-1.5,2S4.5,5.105,4.5,4S5.172,2,6,2S7.5,2.895,7.5,4z M10,2H9v1h1V2z M1,7V1h10v2h1V1 c0-0.553-0.447-1-1-1H1C0.447,0,0,0.447,0,1v6c0,0.553,0.447,1,1,1h7V7H1z M3,2H2v1h1V2z M3,5H2v1h1V5z M12,5h-2v6H8l3,3l3-3h-2V5z",
        className: "iconColor"
    }))
};

const UR = {
    name: "RectangularSelection",
    suppressMirroring: true,
    tooltipKey: "RectangularSelection.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "RectangularSelection", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6,2H4V1h2V2z M10,1H8v1h2V1z M6,12H4v1h2V12z M10,12H8v1h2V12z M1,4H0v2h1V4z M1,8H0v2h1V8z M14,4h-1v2h1V4 z M14,8h-1v2h1V8z M0,1v2h1V2h1V1H0z M12,1v1h1v1h1V1H12z M13,11v1h-1v1h2v-2H13z M1,12v-1H0v2h2v-1H1z",
        className: "iconColor"
    }))
};

const GR = {
    name: "Redo",
    suppressMirroring: false,
    tooltipKey: "Redo.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Redo", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6.5,0c2.215,0,4.206,1.203,5.388,3.112L14,1v5H9l2.157-2.157C10.171,2.107,8.437,1,6.5,1 C3.467,1,1,3.691,1,7s2.467,6,5.5,6C6.776,13,7,13.224,7,13.5S6.776,14,6.5,14C2.916,14,0,10.859,0,7C0,3.141,2.916,0,6.5,0z",
        className: "iconColor"
    }))
};

const KR = {
    name: "Refresh",
    suppressMirroring: true,
    tooltipKey: "Refresh.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Refresh", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,7.5c0,2.333-1.288,4.471-3.28,5.449C9.649,12.983,9.574,13,9.5,13c-0.185,0-0.362-0.103-0.449-0.28 c-0.122-0.248-0.02-0.547,0.229-0.669C10.932,11.24,12,9.454,12,7.5c0-2.094-1.305-3.258-2.599-3.901L7,6V1h5l-1.862,1.862 C11.989,3.887,13,5.501,13,7.5z M2,6.5c0-1.954,1.068-3.74,2.72-4.551C4.968,1.827,5.07,1.528,4.949,1.28 C4.828,1.032,4.528,0.929,4.28,1.051C2.288,2.029,1,4.167,1,6.5c0,1.999,1.011,3.613,2.862,4.638L2,13h5V8l-2.401,2.401 C3.305,9.758,2,8.594,2,6.5z",
        className: "iconColor"
    }))
};

const WR = {
    name: "Reset",
    suppressMirroring: true,
    tooltipKey: "Reset.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Reset", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M0,0h2v14H0V0z M8.228,3C8.151,3,8.076,3.013,8,3.016V0L4,3.464L8,7V4.016C8.076,4.013,8.151,4,8.228,4 C10.859,4,13,6.019,13,8.5S10.859,13,8.228,13c-1.28,0-2.481-0.472-3.384-1.327c-0.2-0.189-0.516-0.184-0.707,0.019 c-0.19,0.2-0.182,0.517,0.019,0.706C5.245,13.431,6.691,14,8.228,14C11.411,14,14,11.532,14,8.5S11.411,3,8.228,3z",
        className: "iconColor"
    }))
};

const $R = {
    name: "ReverseRoute",
    suppressMirroring: true,
    tooltipKey: "ReverseRoute.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ReverseRoute", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12,10l-2.5,3L7,10h2V1.5C9,1.224,9.224,1,9.5,1S10,1.224,10,1.5V10H12z M4,4v8.5C4,12.776,4.224,13,4.5,13 S5,12.776,5,12.5V4h2L4.5,1L2,4H4z",
        className: "iconColor"
    }))
};

const YR = {
    name: "Save",
    suppressMirroring: true,
    tooltipKey: "Save.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Save", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,0H1C0.448,0,0,0.448,0,1v10l3,3h10c0.552,0,1-0.448,1-1V1C14,0.448,13.552,0,13,0z M13,13H3.414 L1,10.586V1h12V13z M11,6H3V2h8V6z M4,7v4h6V7H4z M9,10H5V8h4V10z",
        className: "iconColor"
    }))
};

const qR = {
    name: "SaveAs",
    suppressMirroring: true,
    tooltipKey: "SaveAs.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "SaveAs", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M11,6h-0.887c-0.18-0.163-0.414-0.348-0.638-0.423l-3-1C6.322,4.526,6.162,4.5,6,4.5 c-0.395,0-0.781,0.16-1.061,0.439C4.651,5.227,4.505,5.609,4.506,6H3V2h8V6z M6.232,10.354C6.175,10.301,6.037,10.167,5.899,10H5V8 h0.086L4.753,7H4v4h2.879L6.232,10.354z M8.879,13H3.414L1,10.586V1h12v7.88l1,1V1c0-0.552-0.448-1-1-1H1C0.448,0,0,0.448,0,1v10 l3,3h6.879L8.879,13z M6,6l1,3l2-2L6,6z M8,10l2-2l2,2l-2,2L8,10z M11,13l2-2l1,1l-2,2L11,13z",
        className: "iconColor"
    }))
};

const XR = {
    name: "Search",
    suppressMirroring: true,
    tooltipKey: "Search.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Search", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M2.097,12.812l2.866-2.866C5.807,10.597,6.852,11,8,11c2.761,0,5-2.239,5-5s-2.239-5-5-5S3,3.239,3,6 c0,1.148,0.403,2.193,1.053,3.037l-2.866,2.866C1.062,12.028,1,12.193,1,12.358s0.062,0.33,0.187,0.455 C1.438,13.062,1.847,13.062,2.097,12.812z M8,2c2.205,0,4,1.795,4,4s-1.795,4-4,4S4,8.205,4,6S5.795,2,8,2z",
        className: "iconColor"
    }))
};

const ZR = {
    name: "SentimentLevelNegative",
    suppressMirroring: true,
    tooltipKey: "SentimentLevelNegative.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "SentimentLevelNegative", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V13H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M7,13c-3.309,0-6-2.691-6-6s2.691-6,6-6 s6,2.691,6,6S10.309,13,7,13z M5,3c0.552,0,1,0.672,1,1.5S5.552,6,5,6C4.448,6,4,5.328,4,4.5S4.448,3,5,3z M9.4,11 C8.946,9.863,8.297,9.174,7,9.174c-1.297,0-1.946,0.689-2.4,1.826c0,0-0.548-0.011-0.6,0c0.292-1.561,1.512-3,3-3 c1.488,0,2.708,1.439,3,3H9.4z M9,6C8.448,6,8,5.328,8,4.5S8.448,3,9,3c0.552,0,1,0.672,1,1.5S9.552,6,9,6z",
        className: "iconColor"
    }))
};

const JR = {
    name: "SentimentLevelNeutral",
    suppressMirroring: true,
    tooltipKey: "SentimentLevelNeutral.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Sentiment", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V13H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M7,13c-3.309,0-6-2.691-6-6s2.691-6,6-6 s6,2.691,6,6S10.309,13,7,13z M9,3c0.552,0,1,0.672,1,1.5S9.552,6,9,6C8.448,6,8,5.328,8,4.5S8.448,3,9,3z M5,3 c0.552,0,1,0.672,1,1.5S5.552,6,5,6C4.448,6,4,5.328,4,4.5S4.448,3,5,3z M11,8.5c0,0-2.857,1-4,1c-1.143,0-4-1-4-1V8h8V8.5z",
        className: "iconColor"
    }))
};

const QR = {
    name: "SentimentLevelPositive",
    suppressMirroring: true,
    tooltipKey: "SentimentLevelPositive.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "SentimentLevelPositive", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V13H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7c3.866,0,7-3.134,7-7S10.866,0,7,0z M7,13c-3.309,0-6-2.691-6-6 s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M5,3c0.552,0,1,0.672,1,1.5S5.552,6,5,6C4.448,6,4,5.328,4,4.5S4.448,3,5,3z M7,11 c-1.488,0-2.708-1.439-3-3c0.052,0.011,0.6,0,0.6,0C5.054,9.137,5.703,9.826,7,9.826c1.297,0,1.946-0.689,2.4-1.826H10 C9.708,9.561,8.488,11,7,11z M9,6C8.448,6,8,5.328,8,4.5S8.448,3,9,3c0.552,0,1,0.672,1,1.5S9.552,6,9,6z",
        className: "iconColor"
    }))
};

const ek = {
    name: "ShapeRoundedSquareFilled",
    suppressMirroring: true,
    tooltipKey: "ShapeRoundedSquareFilled.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ShapeRoundedSquareFilled", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M2,14c-1.103,0-2-0.897-2-2V2c0-1.103,0.897-2,2-2h10c1.103,0,2,0.897,2,2v10c0,1.103-0.897,2-2,2H2z",
        className: "iconColor"
    }))
};

const tk = {
    name: "Shortcut",
    suppressMirroring: true,
    tooltipKey: "Shortcut.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Shortcut", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,0H1C0.45,0,0,0.45,0,1v12c0,0.55,0.45,1,1,1h12c0.55,0,1-0.45,1-1V1C14,0.45,13.55,0,13,0z M13,13H1V1 h12V13z M9,10L7.821,6.917C6.115,8.287,5,9,7,11c-2,0-5-3-0.863-5.643L4,4h6L9,10z",
        className: "iconColor"
    }))
};

const ok = {
    name: "SingleColumnView",
    suppressMirroring: true,
    tooltipKey: "SingleColumnView.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "SingleColumnView", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M11,10H3c-0.552,0-1,0.448-1,1v2c0,0.552,0.448,1,1,1h8c0.552,0,1-0.448,1-1v-2C12,10.448,11.552,10,11,10z M11,13H3v-2h8V13z M11,5H3C2.448,5,2,5.448,2,6v2c0,0.552,0.448,1,1,1h8c0.552,0,1-0.448,1-1V6C12,5.448,11.552,5,11,5z M11,8H3V6 h8V8z M11,0H3C2.448,0,2,0.448,2,1v2c0,0.552,0.448,1,1,1h8c0.552,0,1-0.448,1-1V1C12,0.448,11.552,0,11,0z M11,3H3V1h8V3z",
        className: "iconColor"
    }))
};

const nk = {
    name: "SortArrowSecondaryDown",
    suppressMirroring: true,
    tooltipKey: "SortArrowSecondaryDown.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "SortArrowSecondaryDown", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10.854,8.854l-3,3C7.756,11.951,7.628,12,7.5,12s-0.256-0.049-0.354-0.146l-3-3 c-0.195-0.195-0.195-0.512,0-0.707s0.512-0.195,0.707,0L7,10.293V6.5C7,6.225,7.225,6,7.5,6S8,6.225,8,6.5v3.793l2.147-2.147 c0.195-0.195,0.512-0.195,0.707,0S11.049,8.658,10.854,8.854z",
        className: "iconColor"
    }))
};

const ak = {
    name: "SortArrowSecondaryUp",
    suppressMirroring: true,
    tooltipKey: "SortArrowSecondaryUp.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "SortArrowSecondaryDown", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10.854,9.854c-0.195,0.195-0.512,0.195-0.707,0L8,7.707V11.5C8,11.775,7.775,12,7.5,12S7,11.775,7,11.5 V7.707L4.853,9.853c-0.195,0.195-0.512,0.195-0.707,0c-0.195-0.195-0.195-0.512,0-0.707l3-3C7.244,6.049,7.372,6,7.5,6 s0.256,0.049,0.354,0.146l3,3C11.049,9.342,11.049,9.659,10.854,9.854z",
        className: "iconColor"
    }))
};

const rk = {
    name: "Stop",
    suppressMirroring: true,
    tooltipKey: "Stop.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Stop", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12,2v10H2V2H12z",
        className: "iconColor"
    }))
};

const sk = {
    name: "SwitchOff",
    suppressMirroring: true,
    tooltipKey: "SwitchOff.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "SwitchOff", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,3C4.791,3,3,4.791,3,7c0,2.209,1.791,4,4,4s4-1.791,4-4C11,4.791,9.209,3,7,3z M7,10 c-1.654,0-3-1.346-3-3s1.346-3,3-3s3,1.346,3,3S8.654,10,7,10z",
        className: "iconColor"
    }))
};

const ik = {
    name: "SwitchOn",
    suppressMirroring: true,
    tooltipKey: "SwitchOn.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "SwitchOn", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,11H6V3h1V11z",
        className: "iconColor"
    }))
};

const lk = {
    name: "Sync",
    suppressMirroring: true,
    tooltipKey: "Sync.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Sync", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12,9l-1.478-1.478L7.26,10.785c-0.287,0.287-0.757,0.287-1.044,0s-0.287-0.757,0-1.044l3.263-3.263L8,5h4V9 z M7.785,3.215c-0.287-0.287-0.757-0.287-1.044,0L3.478,6.478L2,5v4h4L4.522,7.522L7.785,4.26C8.072,3.972,8.072,3.503,7.785,3.215z M14,5v4c0,2.75-2.25,5-5,5H5c-2.75,0-5-2.25-5-5V5c0-2.75,2.25-5,5-5h4C11.75,0,14,2.25,14,5z M13,5c0-2.206-1.794-4-4-4H5 C2.794,1,1,2.794,1,5v4c0,2.206,1.794,4,4,4h4c2.206,0,4-1.794,4-4V5z",
        className: "iconColor"
    }))
};

const ck = {
    name: "TabOverflow",
    suppressMirroring: true,
    tooltipKey: "TabOverflow.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "TabOverflow", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M1,1v10h10V1H1z M10,10H2V2h8V10z M13,3v10H3v-1h9V3H13z",
        className: "iconColor"
    }))
};

const dk = {
    name: "TableActions",
    suppressMirroring: true,
    tooltipKey: "TableActions.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "TableActions", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M9,9l-2,4L5,9H9z M5,0v7h4V0H5z M8,6H6V5h2V6z M8,4H6V3h2V4z M8,2H6V1h2V2z",
        className: "iconColor"
    }))
};

const uk = {
    name: "TextField",
    suppressMirroring: true,
    tooltipKey: "TextField.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "TextField", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M9,10H8V4h1V10z M14,3v8c0,0.55-0.45,1-1,1H1c-0.55,0-1-0.45-1-1V3c0-0.55,0.45-1,1-1h12 C13.55,2,14,2.45,14,3z M13,3H1v8h12V3z M6.32,9.712V6.425c0-0.562-0.142-0.973-0.426-1.23S5.176,4.808,4.593,4.808 c-0.281,0-0.565,0.037-0.853,0.11S3.188,5.092,2.945,5.221l0.242,0.593c0.199-0.094,0.412-0.179,0.64-0.255 C4.054,5.483,4.295,5.445,4.55,5.445c0.349,0,0.602,0.087,0.76,0.261c0.158,0.175,0.237,0.445,0.237,0.811v0.286L4.729,6.834 c-1.544,0.047-2.316,0.56-2.316,1.538c0,0.454,0.135,0.806,0.404,1.055S3.459,9.8,3.934,9.8c0.363,0,0.664-0.054,0.903-0.16 c0.238-0.107,0.478-0.312,0.718-0.613H5.59l0.154,0.686H6.32V9.712z M3.466,8.961c-0.154-0.135-0.231-0.328-0.231-0.58 c0-0.334,0.126-0.579,0.38-0.734c0.253-0.155,0.657-0.243,1.21-0.264l0.712-0.031v0.435c0,0.439-0.127,0.779-0.38,1.018 S4.556,9.163,4.114,9.163C3.835,9.163,3.619,9.096,3.466,8.961z",
        className: "iconColor"
    }))
};

const mk = {
    name: "Time",
    suppressMirroring: true,
    tooltipKey: "Time.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Time", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M7,13c-3.309,0-6-2.691-6-6s2.691-6,6-6 s6,2.691,6,6S10.309,13,7,13z M10,7v1H6V3h1v4H10z",
        className: "iconColor"
    }))
};

const pk = {
    name: "TreeExpandClosed",
    suppressMirroring: false,
    tooltipKey: "TreeExpandClosed.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "TreeExpandClosed", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M8,2v7l5-3.5L8,2z M9,3.921L11.256,5.5L9,7.079V3.921z",
        className: "iconColor"
    }))
};

const fk = {
    name: "TreeExpandOpened",
    suppressMirroring: false,
    tooltipKey: "TreeExpandOpened.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "TreeExpandOpened", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13,3v5H8L13,3z",
        className: "iconColor"
    }))
};

const gk = {
    name: "Underline",
    suppressMirroring: true,
    tooltipKey: "Underline.icon.label",
    localeOverrides: {
        es: {
            mappedName: "underlineEsFrIt"
        },
        fr: {
            mappedName: "underlineEsFrIt"
        },
        hu: {
            mappedName: "underlineHu"
        },
        it: {
            mappedName: "underlineEsFrIt"
        },
        pb: {
            mappedName: "underlineEsFrIt"
        },
        pt: {
            mappedName: "underlineEsFrIt"
        },
        ru: {
            mappedName: "underlineRu"
        },
        uk: {
            mappedName: "underlineUk"
        }
    },
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Underline", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,11.89c-0.758,0-1.441-0.17-2.049-0.51c-0.609-0.34-1.086-0.825-1.432-1.455S3,8.561,3,7.72V1h1.769v6.646 c0,0.71,0.177,1.312,0.533,1.807C5.657,9.947,6.223,10.195,7,10.195s1.343-0.248,1.698-0.743c0.355-0.494,0.534-1.097,0.534-1.807V1 H11v6.72c0,0.841-0.173,1.575-0.519,2.205c-0.346,0.63-0.824,1.115-1.432,1.455C8.441,11.72,7.758,11.89,7,11.89z M12,13H2v1h10V13z",
        className: "iconColor"
    }))
};

const hk = {
    name: "UnderlineEsFrIt",
    suppressMirroring: true,
    tooltipKey: "UnderlineEsFrIt.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Underline_x5F_Es_x5F_Fr_x5F_It", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7.502,2.574c-0.49,0-0.925,0.123-1.305,0.368c-0.38,0.245-0.57,0.607-0.57,1.087 c0,0.311,0.08,0.562,0.24,0.758C6.027,4.982,6.242,5.14,6.512,5.26s0.65,0.255,1.14,0.405c0.61,0.189,1.127,0.39,1.552,0.6 s0.79,0.521,1.095,0.93c0.305,0.41,0.458,0.936,0.458,1.575c0,0.73-0.173,1.351-0.518,1.86c-0.345,0.51-0.81,0.893-1.395,1.147 s-1.237,0.382-1.958,0.382c-0.71,0-1.393-0.132-2.047-0.397c-0.655-0.265-1.188-0.637-1.598-1.117l1.35-1.26 c0.26,0.35,0.605,0.633,1.035,0.848c0.43,0.215,0.86,0.322,1.29,0.322c0.51,0,0.958-0.13,1.343-0.39 C8.645,9.904,8.838,9.51,8.838,8.979c0-0.35-0.103-0.635-0.308-0.854c-0.205-0.22-0.463-0.393-0.772-0.518 c-0.31-0.125-0.765-0.282-1.365-0.473c-0.53-0.16-0.985-0.35-1.365-0.57c-0.38-0.22-0.695-0.527-0.945-0.922 C3.832,5.247,3.707,4.74,3.707,4.12c0-0.69,0.185-1.268,0.555-1.733s0.85-0.812,1.44-1.042C6.292,1.114,6.922,1,7.593,1 c0.56,0,1.117,0.097,1.672,0.292s1.027,0.478,1.417,0.848l-1.23,1.35C9.252,3.22,8.97,3,8.605,2.83 C8.24,2.66,7.872,2.574,7.502,2.574z M12,13H2v1h10V13z",
        className: "iconColor"
    }))
};

const bk = {
    name: "UnderlineHu",
    suppressMirroring: true,
    tooltipKey: "UnderlineHu.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Underline_x5F_Hu", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6.266,1h1.509L12,11.62h-1.995L9.092,9.19H4.839l-0.886,2.43H2L6.266,1z M8.482,7.57l-1.51-4.32L5.435,7.57 H8.482z M13,13H1v1h12V13z",
        className: "iconColor"
    }))
};

const vk = {
    name: "UnderlineRu",
    suppressMirroring: true,
    tooltipKey: "UnderlineRu.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Underline_x5F_Ru", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M6.584,7.795c-1.22,0-2.123-0.242-2.707-0.728C3.292,6.583,3,5.825,3,4.795V1h1.938v3.36 c0,0.62,0.159,1.075,0.477,1.365C5.733,6.016,6.251,6.16,6.969,6.16c0.4,0,0.798-0.027,1.192-0.083 c0.395-0.055,0.695-0.122,0.9-0.202V1H11v10.62H9.061V7.465C8.733,7.555,8.346,7.633,7.9,7.697C7.454,7.763,7.016,7.795,6.584,7.795 z M12,13H2v1h10V13z",
        className: "iconColor"
    }))
};

const yk = {
    name: "UnderlineUk",
    suppressMirroring: true,
    tooltipKey: "UnderlineUk.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Underline_x5F_Uk", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 184H14V198H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M3,1h8v10.62H9.241V2.65H4.759v8.97H3V1z M12,13H2v1h10V13z",
        className: "iconColor"
    }))
};

const xk = {
    name: "Undo",
    suppressMirroring: false,
    tooltipKey: "Undo.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Undo", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M14,7c0,3.859-2.916,7-6.5,7C7.224,14,7,13.776,7,13.5S7.224,13,7.5,13c3.033,0,5.5-2.691,5.5-6 s-2.467-6-5.5-6C5.563,1,3.829,2.107,2.843,3.843L5,6H0V1l2.112,2.112C3.294,1.203,5.285,0,7.5,0C11.084,0,14,3.141,14,7z",
        className: "iconColor"
    }))
};

const Sk = {
    name: "UnpinnedPropertyPane",
    suppressMirroring: true,
    tooltipKey: "UnpinnedPropertyPane.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "UnpinnedPropertyPane", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M8.59,6.1L8.6,6l0.3-3h0.6C9.775,3,10,2.775,10,2.5C10,2.225,9.775,2,9.5,2h-5C4.225,2,4,2.225,4,2.5 C4,2.775,4.225,3,4.5,3h0.6l0.3,3l0.01,0.1C4.598,6.354,4,7.107,4,8h2v1l1,3l1-3V8h2C10,7.107,9.402,6.354,8.59,6.1z M7.895,3 l-0.3,3H6.405l-0.3-3H7.895z",
        className: "iconColor"
    }))
};

const wk = {
    name: "Upload",
    suppressMirroring: true,
    tooltipKey: "Upload.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Upload", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12,4V1H2v3C1.448,4,1,3.552,1,3V1c0-0.552,0.448-1,1-1h10c0.552,0,1,0.448,1,1v2C13,3.552,12.552,4,12,4z M11,6L7,2L3,6h3v7c0,0.552,0.448,1,1,1s1-0.448,1-1V6H11z",
        className: "iconColor"
    }))
};

const Ck = {
    name: "User",
    suppressMirroring: true,
    tooltipKey: "User.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "User", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M5,3c0-1.657,0.895-3,2-3s2,1.343,2,3c0,1.657-0.895,3-2,3S5,4.657,5,3z M10.185,6.881 c-0.361-0.354-0.817-0.607-1.319-0.75C8.356,6.669,7.715,7,7,7S5.644,6.669,5.134,6.131c-0.502,0.143-0.958,0.396-1.319,0.75 C3.063,7.617,2.846,8.732,3.104,9.742l0.753,3.854C3.903,13.83,4.108,14,4.348,14h5.305c0.239,0,0.445-0.169,0.491-0.404 l0.753-3.854C11.154,8.732,10.937,7.617,10.185,6.881z",
        className: "iconColor"
    }))
};

const Ek = {
    name: "UserGroup",
    suppressMirroring: true,
    tooltipKey: "UserGroup.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "UserGroup", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M1,3c0-1.105,0.672-2,1.5-2S4,1.895,4,3c0,1.105-0.672,2-1.5,2S1,4.104,1,3z M4.006,9.107 C4.002,9.071,4,9.036,4,9c0-0.517,0.127-1.005,0.379-1.451C4.537,7.267,4.746,7.03,4.977,6.816c-0.025-0.273-0.09-0.535-0.223-0.777 C4.59,5.742,4.367,5.503,4.086,5.32C3.622,5.773,3.094,6,2.5,6C1.901,6,1.375,5.773,0.922,5.32C0.641,5.503,0.417,5.742,0.25,6.039 S0,6.656,0,7l0.491,4.554C0.518,11.807,0.733,12,0.988,12h3.095c0.083,0,0.159-0.026,0.228-0.063L4.006,9.107z M11.5,4 C12.328,4,13,3.104,13,2c0-1.105-0.672-2-1.5-2S10,0.895,10,2C10,3.104,10.672,4,11.5,4z M13.754,5.039 c-0.164-0.297-0.387-0.536-0.668-0.719C12.622,4.773,12.094,5,11.5,5c-0.593,0-1.114-0.224-1.564-0.668C9.975,4.547,10,4.769,10,5 c0,0.554-0.119,1.068-0.328,1.509c0.4,0.269,0.722,0.621,0.957,1.047C10.875,8.001,11,8.486,11,9l-0.182,2h2.265 c0.258,0,0.474-0.197,0.498-0.454L14,6C14,5.656,13.918,5.336,13.754,5.039z M9.754,8.039C9.918,8.336,10,8.656,10,9l-0.419,4.546 C9.557,13.803,9.341,14,9.083,14H5.988c-0.255,0-0.47-0.192-0.497-0.446L5,9c0-0.344,0.083-0.664,0.25-0.961S5.641,7.503,5.922,7.32 C6.375,7.773,6.901,8,7.5,8c0.594,0,1.122-0.227,1.586-0.68C9.367,7.503,9.59,7.742,9.754,8.039z M7.5,3C6.672,3,6,3.895,6,5 s0.672,2,1.5,2S9,6.104,9,5S8.328,3,7.5,3z",
        className: "iconColor"
    }))
};

const Ik = {
    name: "UserGroupLimit",
    suppressMirroring: true,
    tooltipKey: "UserGroupLimit.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "UserGroupLimit", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M2.5,2C2.676,2,3,2.379,3,3S2.676,4,2.5,4S2,3.62,2,3S2.324,2,2.5,2 M2.5,1C1.672,1,1,1.895,1,3 c0,1.105,0.672,2,1.5,2S4,4.104,4,3C4,1.895,3.328,1,2.5,1L2.5,1z M1.063,6.653C1.506,6.882,1.991,7,2.5,7 C2.919,7,3.316,6.923,3.689,6.77C3.623,6.865,3.563,6.96,3.508,7.057C3.171,7.654,3,8.308,3,9c0,0.072,0.004,0.142,0.012,0.215 L3.204,11H1.437L1.001,6.954C1.005,6.847,1.025,6.748,1.063,6.653 M4.086,5.32C3.622,5.773,3.094,6,2.5,6 C1.901,6,1.375,5.773,0.922,5.32C0.641,5.503,0.417,5.742,0.25,6.039S0,6.656,0,7l0.491,4.554C0.518,11.807,0.733,12,0.988,12h3.095 c0.083,0,0.159-0.026,0.228-0.063l-0.305-2.83C4.002,9.071,4,9.036,4,9c0-0.517,0.127-1.005,0.379-1.451 C4.537,7.267,4.746,7.03,4.977,6.816c-0.025-0.273-0.09-0.535-0.223-0.777C4.59,5.742,4.367,5.503,4.086,5.32L4.086,5.32z M11.5,1 c0.176,0,0.5,0.38,0.5,1s-0.324,1-0.5,1S11,2.62,11,2S11.324,1,11.5,1 M11.5,0C10.672,0,10,0.895,10,2c0,1.105,0.672,2,1.5,2 S13,3.104,13,2C13,0.895,12.328,0,11.5,0L11.5,0z M12.94,5.654c0.036,0.097,0.056,0.199,0.06,0.307L12.627,10h-0.714l0.083-0.909 L12,9.045V9c0-0.684-0.167-1.333-0.496-1.928c-0.181-0.328-0.401-0.623-0.657-0.882c0.021-0.081,0.041-0.163,0.057-0.246 C11.099,5.981,11.297,6,11.5,6C12.014,6,12.496,5.884,12.94,5.654 M13.086,4.32C12.622,4.773,12.094,5,11.5,5 c-0.593,0-1.114-0.224-1.564-0.668C9.975,4.547,10,4.769,10,5c0,0.554-0.119,1.068-0.328,1.509c0.4,0.269,0.722,0.621,0.957,1.047 C10.875,8.001,11,8.486,11,9l-0.182,2h2.265c0.258,0,0.474-0.197,0.498-0.454L14,6c0-0.344-0.082-0.664-0.246-0.961 S13.367,4.503,13.086,4.32L13.086,4.32z M9.086,7.32C8.622,7.773,8.094,8,7.5,8C6.901,8,6.375,7.773,5.922,7.32 C5.641,7.503,5.417,7.742,5.25,8.039S5,8.656,5,9l0.491,4.554C5.518,13.807,5.733,14,5.988,14h3.095 c0.258,0,0.474-0.197,0.498-0.454L10,9c0-0.344-0.082-0.664-0.246-0.961S9.367,7.503,9.086,7.32z M9,5c0,1.105-0.672,2-1.5,2 S6,6.104,6,5s0.672-2,1.5-2S9,3.895,9,5z",
        className: "iconColor"
    }))
};

const _k = {
    name: "UserSession",
    suppressMirroring: true,
    tooltipKey: "UserSession.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "UserSession", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M4,7H3V4h1V7z M6,5H5v2h1V5z M8,4H7v3h1V4z M8.379,9.549C8.492,9.347,8.628,9.166,8.779,9H1V2h11v2.059 c0.374,0.088,0.709,0.279,1,0.538V1c0-0.552-0.448-1-1-1H1C0.448,0,0,0.448,0,1v8c0,0.552,0.448,1,1,1h7.196 C8.251,9.848,8.298,9.693,8.379,9.549z M13.086,9.32C12.622,9.773,12.094,10,11.5,10c-0.599,0-1.125-0.227-1.578-0.68 C9.641,9.503,9.417,9.742,9.25,10.039S9,10.656,9,11l0.491,2.554C9.518,13.808,9.733,14,9.988,14h3.095 c0.258,0,0.474-0.197,0.498-0.454L14,11c0-0.344-0.082-0.664-0.246-0.961S13.367,9.503,13.086,9.32z M11.5,5C10.672,5,10,5.895,10,7 s0.672,2,1.5,2S13,8.105,13,7S12.328,5,11.5,5z",
        className: "iconColor"
    }))
};

const Dk = {
    name: "ViewNavigationWindow",
    suppressMirroring: true,
    tooltipKey: "ViewNavigationWindow.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ViewNavigationWindow", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M9,8H3V3h6V8z M14,1v12c0,0.552-0.448,1-1,1H1c-0.552,0-1-0.448-1-1V1c0-0.552,0.448-1,1-1h12 C13.552,0,14,0.448,14,1z M13,1H1v12h12V1z",
        className: "iconColor"
    }))
};

const Lk = {
    name: "ViewTiles",
    suppressMirroring: true,
    tooltipKey: "ViewTiles.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ViewTiles", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M5,1v4H1V1H5 M1,0C0.448,0,0,0.448,0,1v4c0,0.552,0.448,1,1,1h4c0.552,0,1-0.448,1-1V1c0-0.552-0.448-1-1-1 H1z M13,1v4H9V1H13 M9,0C8.448,0,8,0.448,8,1v4c0,0.552,0.448,1,1,1h4c0.552,0,1-0.448,1-1V1c0-0.552-0.448-1-1-1H9z M5,9v4H1V9H5 M1,8C0.448,8,0,8.448,0,9v4c0,0.552,0.448,1,1,1h4c0.552,0,1-0.448,1-1V9c0-0.552-0.448-1-1-1H1z M13,9v4H9V9H13 M9,8 C8.448,8,8,8.448,8,9v4c0,0.552,0.448,1,1,1h4c0.552,0,1-0.448,1-1V9c0-0.552-0.448-1-1-1H9z",
        className: "iconColor"
    }))
};

const Tk = {
    name: "Visible",
    suppressMirroring: true,
    tooltipKey: "Visible.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Visible", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,4C5.343,4,4,5.343,4,7s1.343,3,3,3s3-1.343,3-3S8.657,4,7,4z M7,2C3.134,2,0,5.333,0,7s3.134,5,7,5 s7-3.333,7-5S10.866,2,7,2z M7,11c-3.442,0-6-3.063-6-4s2.558-4,6-4s6,3.063,6,4S10.442,11,7,11z",
        className: "iconColor"
    }))
};

const Rk = {
    name: "Zoom",
    suppressMirroring: true,
    tooltipKey: "Zoom.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "Zoom", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12.854,12.146l-2.128-2.128C11.521,9.065,12,7.839,12,6.5C12,3.462,9.538,1,6.5,1S1,3.462,1,6.5 S3.462,12,6.5,12c1.339,0,2.565-0.479,3.519-1.274l2.128,2.128C12.244,12.951,12.372,13,12.5,13s0.256-0.049,0.354-0.146 C13.049,12.658,13.049,12.342,12.854,12.146z M6.5,5C7.327,5,8,5.673,8,6.5S7.327,8,6.5,8S5,7.327,5,6.5S5.673,5,6.5,5z M7,8.95 C7.979,8.751,8.751,7.979,8.95,7h2C10.716,9.078,9.078,10.716,7,10.949V8.95z M10.949,6h-2C8.751,5.021,7.979,4.249,7,4.05v-2 C9.078,2.284,10.716,3.922,10.949,6z M6,2.051v2C5.021,4.249,4.249,5.021,4.05,6h-2C2.284,3.922,3.922,2.284,6,2.051z M2.051,7h2 C4.249,7.979,5.021,8.751,6,8.95v2C3.922,10.716,2.284,9.078,2.051,7z",
        className: "iconColor"
    }))
};

const kk = {
    name: "ZoomIn",
    suppressMirroring: true,
    tooltipKey: "ZoomIn.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ZoomIn", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12.854,12.146l-2.128-2.128C11.521,9.065,12,7.839,12,6.5C12,3.462,9.538,1,6.5,1S1,3.462,1,6.5 S3.462,12,6.5,12c1.339,0,2.565-0.479,3.519-1.274l2.128,2.128C12.244,12.951,12.372,13,12.5,13s0.256-0.049,0.354-0.146 C13.049,12.658,13.049,12.342,12.854,12.146z M2,6.5C2,4.019,4.019,2,6.5,2S11,4.019,11,6.5S8.981,11,6.5,11S2,8.981,2,6.5z M9,6.5 C9,6.776,8.776,7,8.5,7H7v1.5C7,8.776,6.776,9,6.5,9S6,8.776,6,8.5V7H4.5C4.224,7,4,6.776,4,6.5S4.224,6,4.5,6H6V4.5 C6,4.224,6.224,4,6.5,4S7,4.224,7,4.5V6h1.5C8.776,6,9,6.224,9,6.5z",
        className: "iconColor"
    }))
};

const Ak = {
    name: "ZoomInButton",
    suppressMirroring: true,
    tooltipKey: "ZoomInButton.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ZoomInButton", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M10,8H8v2H6V8H4V6h2V4h2v2h2V8z M13,7c0,3.309-2.691,6-6,6s-6-2.691-6-6s2.691-6,6-6S13,3.691,13,7z M12,7 c0-2.757-2.243-5-5-5S2,4.243,2,7s2.243,5,5,5S12,9.757,12,7z",
        className: "iconColor"
    }))
};

const Mk = {
    name: "ZoomOut",
    suppressMirroring: true,
    tooltipKey: "ZoomOut.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ZoomOut", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12.854,12.146l-2.128-2.128C11.521,9.065,12,7.839,12,6.5C12,3.462,9.538,1,6.5,1S1,3.462,1,6.5 S3.462,12,6.5,12c1.339,0,2.565-0.479,3.519-1.274l2.128,2.128C12.244,12.951,12.372,13,12.5,13s0.256-0.049,0.354-0.146 C13.049,12.658,13.049,12.342,12.854,12.146z M2,6.5C2,4.019,4.019,2,6.5,2S11,4.019,11,6.5S8.981,11,6.5,11S2,8.981,2,6.5z M8.5,7 h-4C4.224,7,4,6.776,4,6.5S4.224,6,4.5,6h4C8.776,6,9,6.224,9,6.5S8.776,7,8.5,7z",
        className: "iconColor"
    }))
};

const Nk = {
    name: "ZoomOutButton",
    suppressMirroring: true,
    tooltipKey: "ZoomOutButton.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ZoomOutButton", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,1C3.691,1,1,3.691,1,7s2.691,6,6,6s6-2.691,6-6S10.309,1,7,1z M7,12c-2.757,0-5-2.243-5-5s2.243-5,5-5 s5,2.243,5,5S9.757,12,7,12z M10,8H4V6h6V8z",
        className: "iconColor"
    }))
};

const Ok = {
    name: "ZoomToFit",
    suppressMirroring: true,
    tooltipKey: "ZoomToFit.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ZoomToFit", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12.854,12.146l-2.128-2.128C11.521,9.065,12,7.839,12,6.5C12,3.462,9.538,1,6.5,1S1,3.462,1,6.5 S3.462,12,6.5,12c1.339,0,2.565-0.479,3.519-1.274l2.128,2.128C12.244,12.951,12.372,13,12.5,13s0.256-0.049,0.354-0.146 C13.049,12.658,13.049,12.342,12.854,12.146z M2,6.5C2,4.019,4.019,2,6.5,2S11,4.019,11,6.5S8.981,11,6.5,11S2,8.981,2,6.5z M9,7v2 H7V8h1V7H9z M7,4h2v2H8V5H7V4z M4,6V4h2v1H5v1H4z M6,9H4V7h1v1h1V9z",
        className: "iconColor"
    }))
};

const Pk = {
    name: "AccessibleStatus",
    suppressMirroring: true,
    tooltipKey: "AccessibleStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "AccessibleStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M6,4c0-0.552,0.448-1,1-1s1,0.448,1,1c0,0.552-0.448,1-1,1S6,4.552,6,4z M9.1,6H4.9 C4.403,6,4,6.336,4,6.75S4.403,7.5,4.9,7.5h1.126L5.054,9.86c-0.159,0.386,0.045,0.821,0.455,0.97 c0.41,0.15,0.872-0.042,1.031-0.428L7,9.285l0.454,1.102c0.158,0.385,0.62,0.575,1.03,0.425c0.41-0.15,0.614-0.583,0.456-0.968 L7.974,7.5H9.1c0.497,0,0.9-0.336,0.9-0.75S9.597,6,9.1,6z M14,7c0,3.866-3.134,7-7,7s-7-3.134-7-7c0-3.866,3.134-7,7-7 S14,3.134,14,7z M13,7c0-3.309-2.691-6-6-6S1,3.691,1,7s2.691,6,6,6S13,10.309,13,7z",
        className: "information"
    }))
};

const Bk = {
    name: "AccessibleWarningStatus",
    suppressMirroring: true,
    tooltipKey: "AccessibleWarningStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "AccessibleWarningStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#916000",
        d: "M13.935,12.087L8.408,1C8.063,0.328,7.652,0,7,0S5.799,0.417,5.592,1 L0.065,12.087C0.027,12.219,0,12.356,0,12.5c0,0.83,0.672,1.5,1.5,1.5h11c0.828,0,1.5-0.671,1.5-1.5 C14,12.356,13.973,12.219,13.935,12.087z M12.5,13h-11C1.225,13,1,12.775,1,12.5c0-0.012,0.002-0.032,0.008-0.064L6.486,1.446 C6.505,1.41,6.521,1.373,6.534,1.335C6.606,1.131,6.789,1,7,1c0.158,0,0.283,0,0.519,0.458l5.474,10.978 C12.998,12.467,13,12.487,13,12.5C13,12.775,12.775,13,12.5,13z M6,5c0-0.552,0.448-1,1-1s1,0.448,1,1c0,0.552-0.448,1-1,1 S6,5.552,6,5z M10,7.75C10,8.164,9.597,8.5,9.1,8.5H7.974l0.966,2.344c0.158,0.385-0.046,0.818-0.456,0.968 c-0.41,0.15-0.871-0.041-1.03-0.425L7,10.285L6.54,11.403c-0.159,0.386-0.621,0.578-1.031,0.428c-0.41-0.15-0.614-0.584-0.455-0.97 L6.026,8.5H4.9C4.403,8.5,4,8.164,4,7.75S4.403,7,4.9,7h4.2C9.597,7,10,7.336,10,7.75z",
        className: "warning"
    }))
};

const zk = {
    name: "AnimatedProgressIndicator",
    suppressMirroring: true,
    tooltipKey: "AnimatedProgressIndicator.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "AnimatedProgressIndicator", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "#016DBA",
        d: "M14,7h-1h-1c0-2.761-2.239-5-5-5S2,4.239,2,7s2.239,6,5,6c3.309,0,6-2.691,6-6 c0,3.866-2.134,7-6,7s-7-3.134-7-7s3.134-7,7-7S14,3.134,14,7z",
        className: "information"
    }))
};

const Fk = {
    name: "CanceledStatus",
    suppressMirroring: true,
    tooltipKey: "CanceledStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "CanceledStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#636F80",
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M7,13 c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M9.794,4.913L4.913,9.794C4.644,9.593,4.406,9.356,4.206,9.087 l4.882-4.882C9.356,4.407,9.594,4.644,9.794,4.913z",
        className: "neutral"
    }))
};

const jk = {
    name: "ClusteredStatus",
    suppressMirroring: true,
    tooltipKey: "ClusteredStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ClusteredStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M13,0H1C0.448,0,0,0.448,0,1v12c0,0.552,0.448,1,1,1h12c0.552,0,1-0.448,1-1V1 C14,0.448,13.552,0,13,0z M13,13H1V1h12V13z M3,6V3h3v3H3z M6,11H3V8h3V11z M8,6V3h3v3H8z M11,11H8V8h3V11z",
        className: "information"
    }))
};

const Vk = {
    name: "CompleteStatus",
    suppressMirroring: true,
    tooltipKey: "CompleteStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "CompleteStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#0A7C12",
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M7,13 c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M9,4h1.5L6,10L3,6.5h1.5L6,8L9,4z",
        className: "success"
    }))
};

const Hk = {
    name: "CompleteWithWarningsStatus",
    suppressMirroring: true,
    tooltipKey: "CompleteWithWarningsStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "CompleteWithWarningsStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#0A7C12",
        d: "M7.5,4H9L5,9L3,6h1.5L5,7L7.5,4z M6.394,10.96C6.262,10.971,6.135,11,6,11 c-2.757,0-5-2.243-5-5s2.243-5,5-5c2.601,0,4.72,2.004,4.954,4.545c0.323,0.065,0.698,0.22,1.042,0.541C11.996,6.058,12,6.029,12,6 c0-3.314-2.686-6-6-6S0,2.686,0,6c0,3.273,2.622,5.929,5.879,5.994L6.394,10.96z",
        className: "success"
    }), e.createElement("path", {
        fill: "#916000",
        d: "M13.967,13.043L11.203,7.5C11.031,7.164,10.826,7,10.5,7S9.899,7.209,9.797,7.5l-2.764,5.543 C7.014,13.11,7,13.178,7,13.25C7,13.664,7.336,14,7.75,14h5.5c0.414,0,0.75-0.336,0.75-0.75C14,13.178,13.986,13.11,13.967,13.043z M11,13h-1v-1h1V13z M11,11.5h-1V9h1V11.5z",
        className: "warning"
    }))
};

const Uk = {
    name: "ConditionalCompleteStatus",
    suppressMirroring: true,
    tooltipKey: "ConditionalCompleteStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ConditionalCompleteStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#0A7C12",
        d: "M6,3h1L4.5,7.5L2.5,5h1l1,1L6,3z M5,10l0.002-1C5.001,9,5.001,9,5,9 C2.794,9,1,7.206,1,5s1.794-4,4-4s4,1.794,4,4c0,0.019-0.005,0.037-0.006,0.056C9.331,5.022,9.668,5,10,5l0,0c0-2.75-2.25-5-5-5 S0,2.25,0,5S2.25,10,5,10L5,10z",
        className: "success"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M10.004,6C7.877,6,6.129,6.713,6.006,7.5L6,9l3,2v2.334C9,13.701,9.373,14,10.004,14 C10.635,14,11,13.701,11,13.334L10.997,11L14,9V7.5C13.877,6.713,12.132,6,10.004,6z M10.004,9c-1.718,0-3.11-0.447-3.11-1 s1.392-1,3.11-1s3.11,0.447,3.11,1C13.114,8.553,11.722,9,10.004,9z",
        className: "information"
    }))
};

const Gk = {
    name: "ConditionalStatus",
    suppressMirroring: true,
    tooltipKey: "ConditionalStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ConditionalStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0,0h14v14H0V0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M12.5,11c-0.178,0-0.346,0.036-0.505,0.093L9.518,7.698l2.329-2.329 c0.204-0.204,0.204-0.534,0-0.738L7.369,0.153c-0.204-0.204-0.534-0.204-0.738,0L2.153,4.631c-0.204,0.204-0.204,0.534,0,0.738 l2.295,2.295l-2.491,3.415C1.811,11.032,1.66,11,1.5,11C0.672,11,0,11.672,0,12.5S0.672,14,1.5,14S3,13.328,3,12.5 c0-0.302-0.091-0.583-0.245-0.819L5.164,8.38l1.468,1.468c0.204,0.204,0.534,0.204,0.738,0l1.434-1.434l2.417,3.314 C11.083,11.954,11,12.216,11,12.5c0,0.828,0.672,1.5,1.5,1.5s1.5-0.672,1.5-1.5S13.328,11,12.5,11z M7,8.802L3.198,5L7,1.198 L10.802,5L7,8.802z",
        className: "information"
    }))
};

const Kk = {
    name: "DebugStatus",
    suppressMirroring: true,
    tooltipKey: "DebugStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "DebugStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M4,0.5C4,0.224,4.224,0,4.5,0S5,0.224,5,0.5S4.776,1,4.5,1S4,0.776,4,0.5z M9.5,1 C9.776,1,10,0.776,10,0.5S9.776,0,9.5,0S9,0.224,9,0.5S9.224,1,9.5,1z M7,2C5.611,2,4.44,2.837,4,4h6C9.56,2.837,8.389,2,7,2z M13.854,12.147c0.194,0.194,0.194,0.513,0,0.707s-0.513,0.194-0.707,0L11.88,12h-1.085C10.474,12.873,9.146,14,7,14 s-3.474-1.127-3.795-2H2.12l-1.267,0.854c-0.194,0.194-0.513,0.194-0.707,0s-0.194-0.513,0-0.707l1.414-1.001 c0.02-0.02,0.045-0.028,0.066-0.044c0.031-0.022,0.06-0.048,0.095-0.063c0.056-0.023,0.115-0.033,0.174-0.035 C1.902,11.003,1.907,11,1.913,11H3V9H0.5C0.225,9,0,8.775,0,8.5S0.225,8,0.5,8H3V6H1.913C1.907,6,1.902,5.997,1.896,5.996 c-0.06-0.002-0.119-0.012-0.174-0.035C1.686,5.946,1.657,5.92,1.626,5.898C1.605,5.882,1.58,5.874,1.56,5.854L0.146,4.853 c-0.194-0.194-0.194-0.513,0-0.707s0.513-0.194,0.707,0L2.12,5H3h8.88l1.267-0.854c0.194-0.194,0.513-0.194,0.707,0 c0.194,0.194,0.194,0.513,0,0.707L12.44,5.854c-0.02,0.02-0.045,0.028-0.066,0.044c-0.031,0.022-0.06,0.048-0.095,0.063 c-0.056,0.023-0.115,0.033-0.174,0.035C12.098,5.997,12.093,6,12.087,6H11v2h2.5C13.775,8,14,8.225,14,8.5S13.775,9,13.5,9H11v2 h1.087c0.006,0,0.011,0.003,0.017,0.004c0.059,0.002,0.118,0.012,0.174,0.035c0.036,0.015,0.064,0.041,0.095,0.063 c0.022,0.016,0.047,0.024,0.066,0.044L13.854,12.147z M10,6H4v5c0,2,3,2,3,2c3,0,3-2,3-2V6z",
        className: "information"
    }))
};

const Wk = {
    name: "DisconnectedStatus",
    suppressMirroring: true,
    tooltipKey: "DisconnectedStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "DisconnectedStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#916000",
        d: "M8.37,0.13C3.439-0.805-0.805,3.438,0.13,8.37c0.522,2.755,2.744,4.978,5.5,5.5 c4.932,0.935,9.175-3.308,8.24-8.24C13.348,2.874,11.126,0.652,8.37,0.13z M8.374,12.847c-4.37,0.976-8.196-2.851-7.22-7.22 c0.492-2.203,2.27-3.981,4.473-4.473c4.37-0.976,8.196,2.851,7.22,7.22C12.355,10.577,10.577,12.355,8.374,12.847z M8,4.014L4,8 L3,7.003c0,0,0.592-1.418,1-1.993L3.207,4.203c-0.276-0.275-0.276-0.721,0-0.997c0.276-0.275,0.724-0.275,1,0L5,4.014 c0.543-0.404,2-0.997,2-0.997L8,4.014z M6,9.986L10,6l1,0.997c0,0-0.592,1.418-1,1.993l0.793,0.807c0.276,0.275,0.276,0.721,0,0.997 c-0.276,0.275-0.724,0.275-1,0L9,9.986c-0.543,0.404-2,0.997-2,0.997L6,9.986z",
        className: "warning"
    }))
};

const $k = {
    name: "EmbeddedStatus",
    suppressMirroring: true,
    tooltipKey: "EmbeddedStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "EmbeddedStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M7,13 c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M9,9H5V5h4V9z",
        className: "information"
    }))
};

const Yk = {
    name: "ErrorStatus",
    suppressMirroring: true,
    tooltipKey: "ErrorStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ErrorStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#D80000",
        d: "M9.854,9.146c0.195,0.195,0.195,0.512,0,0.707C9.756,9.951,9.628,10,9.5,10 S9.244,9.951,9.146,9.854L7,7.707L4.854,9.854C4.756,9.951,4.628,10,4.5,10S4.244,9.951,4.146,9.854 c-0.195-0.195-0.195-0.512,0-0.707L6.293,7L4.146,4.854c-0.195-0.195-0.195-0.512,0-0.707c0.195-0.195,0.512-0.195,0.707,0L7,6.293 l2.146-2.146c0.195-0.195,0.512-0.195,0.707,0c0.195,0.195,0.195,0.512,0,0.707L7.707,7L9.854,9.146z M14,7c0,3.866-3.134,7-7,7 s-7-3.134-7-7s3.134-7,7-7S14,3.134,14,7z M13,7c0-3.309-2.691-6-6-6S1,3.691,1,7s2.691,6,6,6S13,10.309,13,7z",
        className: "alert"
    }))
};

const qk = {
    name: "FlaggedStatus",
    suppressMirroring: true,
    tooltipKey: "FlaggedStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "statusIcon", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#D80000",
        d: "M2.5,14L2.5,14C2.224,14,2,13.776,2,13.5v-13C2,0.224,2.224,0,2.5,0l0,0 C2.776,0,3,0.224,3,0.5v13C3,13.776,2.776,14,2.5,14z M5,1v7c2,0,5-2,7-1V2C10,0,7,2,5,1z",
        className: "alert"
    }))
};

const Xk = {
    name: "HiddenStatus",
    suppressMirroring: true,
    tooltipKey: "HiddenStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "HiddenStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#916000",
        d: "M4.112,7.767C4.046,7.521,4,7.267,4,7c0-1.657,1.343-3,3-3c0.267,0,0.521,0.046,0.767,0.112 L6.865,5.014C5.872,5.081,5.081,5.871,5.014,6.865L4.112,7.767z M8.986,7.135C8.919,8.129,8.128,8.919,7.135,8.986L6.233,9.888 C6.479,9.954,6.733,10,7,10c1.657,0,3-1.343,3-3c0-0.267-0.046-0.521-0.112-0.767L8.986,7.135z M1.893,9.986l0.72-0.72 C1.603,8.405,1,7.454,1,7c0-0.937,2.558-4,6-4c0.575,0,1.123,0.091,1.641,0.238l0.794-0.794C8.676,2.171,7.858,2,7,2 C3.134,2,0,5.333,0,7C0,7.797,0.722,8.973,1.893,9.986z M12.107,4.014l-0.72,0.72C12.397,5.595,13,6.546,13,7c0,0.937-2.558,4-6,4 c-0.575,0-1.123-0.091-1.641-0.238l-0.794,0.794C5.324,11.829,6.142,12,7,12c3.866,0,7-3.333,7-5 C14,6.203,13.278,5.027,12.107,4.014z M1.833,12.857L12.857,1.833c0.191-0.191,0.191-0.5,0-0.69c-0.191-0.191-0.5-0.191-0.69,0 L1.143,12.167c-0.191,0.191-0.191,0.5,0,0.69C1.238,12.952,1.363,13,1.488,13S1.738,12.952,1.833,12.857z",
        className: "warning"
    }))
};

const Zk = {
    name: "HistoricalStatus",
    suppressMirroring: true,
    tooltipKey: "HistoricalStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "HistoricalStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M10,7.5C10,7.776,9.776,8,9.5,8h-3C6.224,8,6,7.776,6,7.5v-4C6,3.224,6.224,3,6.5,3 S7,3.224,7,3.5V7h2.5C9.776,7,10,7.224,10,7.5z M4,5L2.29,3.29C3.389,1.897,5.088,1,7,1c3.314,0,6,2.686,6,6h1c0-3.866-3.134-7-7-7 C4.812,0,2.86,1.005,1.577,2.577L0,1v4H4z M12.651,9c-0.825,2.329-3.04,4-5.651,4c-3.314,0-6-2.686-6-6H0c0,3.866,3.134,7,7,7 c3.17,0,5.845-2.109,6.706-5H12.651z",
        className: "information"
    }))
};

const Jk = {
    name: "ImportantStatus",
    suppressMirroring: true,
    tooltipKey: "ImportantStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ImportantStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#D80000",
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M7,13 c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M7,8C6.586,8,6.25,7.664,6.25,7.25v-3.5C6.25,3.336,6.586,3,7,3 s0.75,0.336,0.75,0.75v3.5C7.75,7.664,7.414,8,7,8z M8,10c0,0.552-0.448,1-1,1s-1-0.448-1-1s0.448-1,1-1S8,9.448,8,10z",
        className: "alert"
    }))
};

const Qk = {
    name: "IncompleteInProgressStatus",
    suppressMirroring: true,
    tooltipKey: "IncompleteInProgressStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "IncompleteInProgressStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M6.271,11.986C6.181,11.99,6.092,12,6,12c-3.314,0-6-2.686-6-6s2.686-6,6-6s6,2.686,6,6 c0,0.092-0.01,0.181-0.014,0.271C11.67,6.16,11.339,6.088,10.995,6.05C10.995,6.033,11,6.017,11,6c0-2.757-2.243-5-5-5S1,3.243,1,6 s2.243,5,5,5c0.017,0,0.033-0.005,0.05-0.005C6.088,11.339,6.16,11.67,6.271,11.986z M8.971,6.284C8.98,6.189,9,6.097,9,6H3 c0,1.654,1.346,3,3,3c0.097,0,0.189-0.02,0.284-0.029C6.738,7.721,7.721,6.738,8.971,6.284z M10.5,9.5C10.776,9.5,11,9.276,11,9V7.5 C11,7.224,10.776,7,10.5,7S10,7.224,10,7.5V9C10,9.276,10.224,9.5,10.5,9.5z M10,13.5V12c0-0.276,0.224-0.5,0.5-0.5S11,11.724,11,12 v1.5c0,0.276-0.224,0.5-0.5,0.5S10,13.776,10,13.5z M7.879,8.379c0-0.128,0.049-0.256,0.146-0.354c0.195-0.195,0.512-0.195,0.707,0 l1.061,1.061c0.195,0.195,0.195,0.512,0,0.707s-0.512,0.195-0.707,0L8.025,8.732C7.928,8.635,7.879,8.507,7.879,8.379z M11.061,11.561c0-0.128,0.049-0.256,0.146-0.354c0.195-0.195,0.512-0.195,0.707,0l1.061,1.061c0.195,0.195,0.195,0.512,0,0.707 s-0.512,0.195-0.707,0l-1.061-1.061C11.109,11.816,11.061,11.688,11.061,11.561z M7,10.5C7,10.224,7.224,10,7.5,10H9 c0.276,0,0.5,0.224,0.5,0.5S9.276,11,9,11H7.5C7.224,11,7,10.776,7,10.5z M11.5,10.5c0-0.276,0.224-0.5,0.5-0.5h1.5 c0.276,0,0.5,0.224,0.5,0.5S13.776,11,13.5,11H12C11.724,11,11.5,10.776,11.5,10.5z M7.879,12.621c0-0.128,0.049-0.256,0.146-0.354 l1.061-1.061c0.195-0.195,0.512-0.195,0.707,0s0.195,0.512,0,0.707l-1.061,1.061c-0.195,0.195-0.512,0.195-0.707,0 C7.928,12.877,7.879,12.749,7.879,12.621z M11.061,9.439c0-0.128,0.049-0.256,0.146-0.354l1.061-1.061 c0.195-0.195,0.512-0.195,0.707,0s0.195,0.512,0,0.707l-1.061,1.061c-0.195,0.195-0.512,0.195-0.707,0 C11.109,9.695,11.061,9.567,11.061,9.439z",
        className: "information"
    }))
};

const eA = {
    name: "IncompleteStatus",
    suppressMirroring: true,
    tooltipKey: "IncompleteStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "IncompleteStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#D80000",
        d: "M7,0C3.134,0,0,3.134,0,7c0,3.866,3.134,7,7,7s7-3.134,7-7C14,3.134,10.866,0,7,0z M7,13c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M11,7c0,2.209-1.791,4-4,4S3,9.209,3,7H11z",
        className: "alert"
    }))
};

const tA = {
    name: "IncompleteWarningStatus",
    suppressMirroring: true,
    tooltipKey: "IncompleteWarningStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "IncompleteWarningStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#916000",
        d: "M3,6h6c0,0.041-0.01,0.079-0.012,0.12C8.754,6.337,8.55,6.586,8.424,6.892L7.61,8.524 C7.144,8.822,6.594,9,6,9C4.343,9,3,7.657,3,6z M6.395,10.96C6.262,10.971,6.135,11,6,11c-2.757,0-5-2.243-5-5s2.243-5,5-5 c2.601,0,4.72,2.004,4.954,4.545c0,0,0,0,0,0c0.323,0.065,0.698,0.22,1.041,0.541C11.996,6.057,12,6.029,12,6c0-3.314-2.686-6-6-6 S0,2.686,0,6c0,3.273,2.622,5.929,5.879,5.994L6.395,10.96z M14,13.25c0,0.414-0.336,0.75-0.75,0.75h-5.5C7.336,14,7,13.664,7,13.25 c0-0.072,0.014-0.14,0.032-0.207L9.797,7.5C9.899,7.209,10.174,7,10.5,7s0.531,0.164,0.703,0.5l2.764,5.543 C13.986,13.11,14,13.178,14,13.25z M11,12h-1v1h1V12z M11,9h-1v2.5h1V9z",
        className: "warning"
    }))
};

const oA = {
    name: "InformationStatus",
    suppressMirroring: true,
    tooltipKey: "InformationStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "InformationStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M7,13 c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M7,11c-0.414,0-0.75-0.336-0.75-0.75v-3C6.25,6.836,6.586,6.5,7,6.5 s0.75,0.336,0.75,0.75v3C7.75,10.664,7.414,11,7,11z M6,4c0-0.552,0.448-1,1-1s1,0.448,1,1S7.552,5,7,5S6,4.552,6,4z",
        className: "information"
    }))
};

const nA = {
    name: "InvalidStatus",
    suppressMirroring: true,
    tooltipKey: "InvalidStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "InvalidStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#D80000",
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M1,7 c0-1.475,0.537-2.825,1.423-3.87l8.448,8.448C9.825,12.463,8.475,13,7,13C3.691,13,1,10.309,1,7z M11.577,10.87L3.13,2.423 C4.175,1.537,5.525,1,7,1c3.309,0,6,2.691,6,6C13,8.475,12.463,9.825,11.577,10.87z",
        className: "alert"
    }))
};

const aA = {
    name: "LockedStatus",
    suppressMirroring: true,
    tooltipKey: "LockedStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "LockedStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#636F80",
        d: "M6,11V8h2v3H6z M12,6v7c0,0.552-0.448,1-1,1H3c-0.552,0-1-0.448-1-1V6 c0-0.552,0.448-1,1-1c0-2.761,1.791-5,4-5s4,2.239,4,5C11.552,5,12,5.448,12,6z M4,5h6c0-2.206-1.346-4-3-4S4,2.794,4,5z M11,6H3v7 h8V6z",
        className: "neutral"
    }))
};

const rA = {
    name: "LowPriorityStatus",
    suppressMirroring: true,
    tooltipKey: "LowPriorityStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "LowPriorityStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M7,0C3.134,0,0,3.134,0,7c0,3.866,3.134,7,7,7s7-3.134,7-7C14,3.134,10.866,0,7,0z M7,13c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M10,8l-3,3L4,8h2.5V3.5C6.5,3.224,6.724,3,7,3 s0.5,0.224,0.5,0.5V8H10z",
        className: "information"
    }))
};

const sA = {
    name: "MediumPriorityStatus",
    suppressMirroring: true,
    tooltipKey: "MediumPriorityStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "MediumPriorityStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#916000",
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M7,13 c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M7,3C4.791,3,3,4.791,3,7s1.791,4,4,4s4-1.791,4-4S9.209,3,7,3z M7,9.5C5.621,9.5,4.5,8.378,4.5,7S5.621,4.5,7,4.5S9.5,5.622,9.5,7S8.379,9.5,7,9.5z",
        className: "warning"
    }))
};

const iA = {
    name: "MergedStatus",
    suppressMirroring: true,
    tooltipKey: "MergedStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "MergedStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#0A7C12",
        d: "M13,0H1C0.448,0,0,0.448,0,1v12c0,0.552,0.448,1,1,1h12c0.552,0,1-0.448,1-1V1 C14,0.448,13.552,0,13,0z M13,13H1V1h12V13z M5,8H3V3h5v2H5V8z M11,6v5H6V9h3V6H11z",
        className: "success"
    }))
};

const lA = {
    name: "NeutralStatus",
    suppressMirroring: true,
    tooltipKey: "NeutralStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "NeutralStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "#636F80",
        d: "M7,0C3.134,0,0,3.134,0,7c0,3.866,3.134,7,7,7s7-3.134,7-7C14,3.134,10.866,0,7,0z M7,13 c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z",
        className: "neutral"
    }), e.createElement("path", {
        fill: "#CDD1D8",
        d: "M7,13c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z",
        className: "neutralFill"
    }))
};

const cA = {
    name: "NewStatus",
    suppressMirroring: true,
    tooltipKey: "NewStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "NewStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M8.446,7.626l0.306,1.127L7.625,8.446L7,11L6.375,8.446L5.248,8.753l0.306-1.127L3,7 l2.554-0.623l-0.306-1.13l1.127,0.307L7,3l0.625,2.554l1.127-0.307l-0.306,1.13L11,7L8.446,7.626z M7.354,13.854l6.5-6.5 c0.195-0.195,0.195-0.512,0-0.707l-6.5-6.5c-0.195-0.195-0.512-0.195-0.707,0l-6.5,6.5c-0.195,0.195-0.195,0.512,0,0.707l6.5,6.5 C6.744,13.951,6.872,14,7,14S7.256,13.951,7.354,13.854z M7,1.207L12.793,7L7,12.793L1.207,7L7,1.207z",
        className: "information"
    }))
};

const dA = {
    name: "OnDemandStatus",
    suppressMirroring: true,
    tooltipKey: "OnDemandStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "OnDemandStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#0A7C12",
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M7,13c-3.309,0-6-2.691-6-6 s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M10,10L7.857,8.571L7,12L6.143,8.571L4,10l1.429-2.143L2,7l3.429-0.857L4,4l2.143,1.429 L7,2l0.857,3.429L10,4L8.571,6.143L12,7L8.571,7.857L10,10z",
        className: "success"
    }))
};

const uA = {
    name: "OutOfSyncStatus",
    suppressMirroring: true,
    tooltipKey: "OutOfSyncStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "OutOfSyncStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#916000",
        d: "M7,9v1H5v2L3,9.5L5,7v2H7z M11,4.5L9,2v2H7v1h2v2L11,4.5z M14,7c0,3.866-3.134,7-7,7 s-7-3.134-7-7c0-3.866,3.134-7,7-7S14,3.134,14,7z M7,13c1.475,0,2.825-0.537,3.87-1.423L2.423,3.13C1.537,4.175,1,5.525,1,7 C1,10.309,3.691,13,7,13z M13,7c0-3.309-2.691-6-6-6C5.525,1,4.175,1.537,3.13,2.423l8.448,8.448C12.463,9.825,13,8.475,13,7z",
        className: "warning"
    }))
};

const mA = {
    name: "PausedStatus",
    suppressMirroring: true,
    tooltipKey: "PausedStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "PausedStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M13,0H1C0.448,0,0,0.448,0,1v12c0,0.552,0.448,1,1,1h12c0.552,0,1-0.448,1-1V1 C14,0.448,13.552,0,13,0z M13,13H1V1h12V13z M6,11H3V3h3V11z M11,3v8H8V3H11z",
        className: "information"
    }))
};

const pA = {
    name: "ProgressStatus",
    suppressMirroring: true,
    tooltipKey: "ProgressStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ProgressStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M2.935,1.309C4.082,0.488,5.482,0,7,0c0.261,0,0.519,0.017,0.773,0.045l-0.333,3 C7.293,3.028,7.151,3,7,3C6.134,3,5.337,3.284,4.681,3.753L2.935,1.309z M8.781,3.437c0.556,0.279,1.035,0.679,1.406,1.172 l2.406-1.805c-0.649-0.864-1.491-1.572-2.466-2.06L8.781,3.437z M3.674,9.217l-2.498,1.665C2.432,12.761,4.571,14,7,14v-3 C5.614,11,4.392,10.291,3.674,9.217z M3.101,7.867C3.038,7.587,3,7.298,3,7c0-0.866,0.284-1.663,0.753-2.319L1.309,2.935 C0.488,4.082,0,5.482,0,7c0,0.522,0.062,1.029,0.17,1.518L3.101,7.867z M10.734,5.6C10.898,6.037,11,6.506,11,7h3 c0-0.865-0.165-1.691-0.452-2.456L10.734,5.6z",
        className: "information"
    }))
};

const fA = {
    name: "ReadOnlyStatus",
    suppressMirroring: true,
    tooltipKey: "ReadOnlyStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ReadOnlyStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0,0h14v14H0V0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#636F80",
        d: "M4.708,11.769L1,13l1.238-3.701L4.708,11.769z M11.43,5.329l1.286-1.287 c0.379-0.379,0.379-1,0-1.379l-1.378-1.379c-0.379-0.379-0.999-0.379-1.378,0L8.673,2.573L11.43,5.329z M4.19,4.938l0.707-0.707 L1.854,1.147c-0.195-0.195-0.512-0.195-0.707,0s-0.195,0.512,0,0.707L4.19,4.938z M12.707,12.147L9.742,9.141L9.035,9.849L12,12.854 C12.098,12.951,12.226,13,12.354,13s0.256-0.049,0.354-0.146C12.902,12.658,12.902,12.342,12.707,12.147z M7.613,3.634L3.155,8.095 l2.757,2.757L10.37,6.39L7.613,3.634z",
        className: "neutral"
    }))
};

const gA = {
    name: "RequiredStatus",
    suppressMirroring: true,
    tooltipKey: "RequiredStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "RequiredStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0,0h14v14H0V0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#D80000",
        d: "M13,0H1C0.448,0,0,0.448,0,1v12c0,0.552,0.448,1,1,1h12c0.552,0,1-0.448,1-1V1 C14,0.448,13.552,0,13,0z M13,13H1V1h12V13z M3.25,8.567L5.992,7L3.25,5.433C3.011,5.295,2.929,4.988,3.067,4.75 C3.204,4.512,3.512,4.43,3.75,4.567L6.5,6.138V3.5C6.5,3.225,6.725,3,7,3s0.5,0.225,0.5,0.5v2.638l2.75-1.572 c0.238-0.138,0.546-0.055,0.683,0.183c0.138,0.238,0.055,0.546-0.183,0.683L8.008,7l2.743,1.567 c0.238,0.137,0.321,0.445,0.183,0.683c-0.137,0.238-0.445,0.32-0.683,0.183L7.5,7.862V10.5C7.5,10.775,7.275,11,7,11 s-0.5-0.225-0.5-0.5V7.862L3.75,9.433C3.511,9.571,3.204,9.489,3.067,9.25C2.929,9.012,3.011,8.705,3.25,8.567z",
        className: "alert"
    }))
};

const hA = {
    name: "RevertedStatus",
    suppressMirroring: true,
    tooltipKey: "RevertedStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "RevertedStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#916000",
        d: "M7,0C3.134,0,0,3.134,0,7c0,3.866,3.134,7,7,7s7-3.134,7-7C14,3.134,10.866,0,7,0z M7,13c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M10,7c0,1.657-1.343,3-3,3V9c1.103,0,2-0.897,2-2S8.103,5,7,5 S5,5.897,5,7h1.5l-2,2l-2-2H4c0-1.657,1.343-3,3-3S10,5.343,10,7z",
        className: "warning"
    }))
};

const bA = {
    name: "ReviewStatus",
    suppressMirroring: true,
    tooltipKey: "ReviewStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ReviewStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#0A7C12",
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M7,13c-3.309,0-6-2.691-6-6 s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M7,11c-2.209,0-4-1.791-4-4s1.791-4,4-4V11z",
        className: "success"
    }))
};

const vA = {
    name: "ScheduledStatus",
    suppressMirroring: true,
    tooltipKey: "ScheduledStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ScheduledStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M7,0C3.134,0,0,3.134,0,7c0,3.866,3.134,7,7,7s7-3.134,7-7C14,3.134,10.866,0,7,0z M7,13c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M10,7.5C10,7.776,9.776,8,9.5,8h-3C6.224,8,6,7.776,6,7.5v-4 C6,3.224,6.224,3,6.5,3S7,3.224,7,3.5V7h2.5C9.776,7,10,7.224,10,7.5z",
        className: "information"
    }))
};

const yA = {
    name: "StoppedStatus",
    suppressMirroring: true,
    tooltipKey: "StoppedStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "StoppedStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTopPane"
    }), e.createElement("path", {
        fill: "#D80000",
        d: "M13,0H1C0.448,0,0,0.448,0,1v12c0,0.552,0.448,1,1,1h12c0.552,0,1-0.448,1-1V1 C14,0.448,13.552,0,13,0z M13,13H1V1h12V13z M11,11H3V3h8V11z",
        className: "alert"
    }))
};

const xA = {
    name: "StoppingStatus",
    suppressMirroring: true,
    tooltipKey: "StoppingStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "StoppingStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#D80000",
        d: "M13,6.194V1H1v12h5.194c0.21,0.362,0.45,0.703,0.741,1H1c-0.552,0-1-0.448-1-1V1 c0-0.552,0.448-1,1-1h12c0.552,0,1,0.448,1,1v5.935C13.703,6.644,13.362,6.404,13,6.194z M11,5.55V3H3v8h2.55 c-0.016-0.167-0.05-0.329-0.05-0.5c0-2.761,2.239-5,5-5C10.671,5.5,10.833,5.534,11,5.55z",
        className: "alert"
    }), e.createElement("path", {
        fill: "#0A7C12",
        d: "M9.5,10.5C9.5,10.776,9.276,11,9,11H7.5C7.224,11,7,10.776,7,10.5S7.224,10,7.5,10H9 C9.276,10,9.5,10.224,9.5,10.5z M13.5,10H12c-0.276,0-0.5,0.224-0.5,0.5S11.724,11,12,11h1.5c0.276,0,0.5-0.224,0.5-0.5 S13.776,10,13.5,10z M8.379,7.879c-0.128,0-0.256,0.048-0.354,0.146c-0.195,0.195-0.195,0.512,0,0.707l1.061,1.061 c0.195,0.195,0.512,0.195,0.707,0s0.195-0.512,0-0.707L8.732,8.025C8.635,7.928,8.507,7.879,8.379,7.879z M11.561,11.061 c-0.128,0-0.256,0.048-0.354,0.146c-0.195,0.195-0.195,0.512,0,0.707l1.061,1.061c0.195,0.195,0.512,0.195,0.707,0 c0.195-0.195,0.195-0.512,0-0.707l-1.061-1.061C11.816,11.109,11.689,11.061,11.561,11.061z M10.5,7C10.224,7,10,7.224,10,7.5V9 c0,0.276,0.224,0.5,0.5,0.5S11,9.276,11,9V7.5C11,7.224,10.776,7,10.5,7z M10.5,11.5c-0.276,0-0.5,0.224-0.5,0.5v1.5 c0,0.276,0.224,0.5,0.5,0.5s0.5-0.224,0.5-0.5V12C11,11.724,10.776,11.5,10.5,11.5z M12.622,7.879c-0.128,0-0.256,0.048-0.354,0.146 l-1.061,1.061c-0.195,0.195-0.195,0.512,0,0.707s0.512,0.195,0.707,0l1.061-1.061c0.195-0.195,0.195-0.512,0-0.707 C12.877,7.928,12.75,7.879,12.622,7.879z M9.44,11.061c-0.128,0-0.256,0.048-0.354,0.146l-1.061,1.061 c-0.195,0.195-0.195,0.512,0,0.707c0.195,0.195,0.512,0.195,0.707,0l1.061-1.061c0.195-0.195,0.195-0.512,0-0.707 C9.695,11.109,9.568,11.061,9.44,11.061z",
        className: "success"
    }))
};

const SA = {
    name: "SubmittedStatus",
    suppressMirroring: true,
    tooltipKey: "SubmittedStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "SubmittedStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#0A7C12",
        d: "M7,0C3.134,0,0,3.134,0,7c0,3.866,3.134,7,7,7s7-3.134,7-7C14,3.134,10.866,0,7,0z M7,13c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M11,7c0,2.209-1.791,4-4,4S3,9.209,3,7s1.791-4,4-4 S11,4.791,11,7z",
        className: "success"
    }))
};

const wA = {
    name: "VisibleStatus",
    suppressMirroring: true,
    tooltipKey: "VisibleStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "VisibleStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M7,4C5.343,4,4,5.343,4,7s1.343,3,3,3s3-1.343,3-3S8.657,4,7,4z M7,2C3.134,2,0,5.333,0,7 s3.134,5,7,5s7-3.333,7-5S10.866,2,7,2z M7,11c-3.442,0-6-3.063-6-4s2.558-4,6-4s6,3.063,6,4S10.442,11,7,11z",
        className: "information"
    }))
};

const CA = {
    name: "WarningStatus",
    suppressMirroring: true,
    tooltipKey: "WarningStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "WarningStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#916000",
        d: "M13.9353,12.0869L8.4082,0.9999C8.0627,0.3281,7.6516,0,7,0S5.7987,0.4174,5.5918,0.9999 l-5.5272,11.087C0.0273,12.219,0,12.3557,0,12.4997C0,13.3292,0.6717,14,1.5002,14h10.9996C13.3282,14,14,13.3292,14,12.4997 C14,12.3557,13.9727,12.219,13.9353,12.0869z M12.5,13h-11C1.2246,13,1,12.7754,1,12.4995c0-0.0122,0.002-0.0322,0.0078-0.064 L6.4863,1.4463C6.5049,1.4102,6.5205,1.373,6.5342,1.335C6.6064,1.1313,6.7891,1,7,1c0.1582,0,0.2832,0,0.5186,0.4575l5.4736,10.978 C12.998,12.4673,13,12.4873,13,12.4995C13,12.7754,12.7754,13,12.5,13z M7,9C6.5859,9,6.25,8.6641,6.25,8.25v-3.5 C6.25,4.3359,6.5859,4,7,4s0.75,0.3359,0.75,0.75v3.5C7.75,8.6641,7.4141,9,7,9z M8,11c0,0.5523-0.4477,1-1,1s-1-0.4477-1-1 s0.4477-1,1-1S8,10.4477,8,11z",
        className: "warning"
    }))
};

const EA = {
    name: "ZeroStateReport",
    suppressMirroring: true,
    tooltipKey: "ZeroStateReport.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "ZeroStateReport", t.className ].join(" "),
        width: "158",
        height: "94",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 158 94",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "#86134F",
        d: "M8,47c0,0.552-0.448,1-1,1s-1-0.448-1-1s0.448-1,1-1S8,46.448,8,47 z M7,52c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S7.552,52,7,52z M1,34c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S1.552,34,1,34z M7,34c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S7.552,34,7,34z M7,40c-0.552,0-1,0.448-1,1s0.448,1,1,1 s1-0.448,1-1S7.552,40,7,40z M19,46c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S19.552,46,19,46z M13,34c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S13.552,34,13,34z M19,34c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S19.552,34,19,34z M19,40 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S19.552,40,19,40z M13,28c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S13.552,28,13,28z M25,64c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S25.552,64,25,64z M25,52c-0.552,0-1,0.448-1,1s0.448,1,1,1 s1-0.448,1-1S25.552,52,25,52z M25,58c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S25.552,58,25,58z M25,40c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S25.552,40,25,40z M25,22c-0.552,0-1,0.448-1,1s0.448,1,1,1c0.552,0,1-0.448,1-1S25.552,22,25,22z M25,16 c-0.552,0-1,0.448-1,1s0.448,1,1,1c0.552,0,1-0.448,1-1S25.552,16,25,16z M19,16c-0.552,0-1,0.448-1,1s0.448,1,1,1 c0.552,0,1-0.448,1-1S19.552,16,19,16z M25,10c-0.552,0-1,0.448-1,1s0.448,1,1,1c0.552,0,1-0.448,1-1S25.552,10,25,10z M31,16 c-0.552,0-1,0.448-1,1s0.448,1,1,1c0.552,0,1-0.448,1-1S31.552,16,31,16z M37,22c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S37.552,22,37,22z M37,16c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S37.552,16,37,16z M49,16c-0.552,0-1,0.448-1,1s0.448,1,1,1 s1-0.448,1-1S49.552,16,49,16z M55,16c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S55.552,16,55,16z M37,4c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S37.552,4,37,4z M37,10c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S37.552,10,37,10z M43,10 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S43.552,10,43,10z M49,10c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S49.552,10,49,10z M127,58c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S127.552,58,127,58z M115,70c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S115.552,70,115,70z M121,70c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S121.552,70,121,70z M121,76 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S121.552,76,121,76z M121,58c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S121.552,58,121,58z M127,64c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S127.552,64,127,64z M127,70c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S127.552,70,127,70z M145,70c-0.552,0-1,0.448-1,1s0.448,1,1,1c0.552,0,1-0.448,1-1S145.552,70,145,70z M145,76c-0.552,0-1,0.448-1,1s0.448,1,1,1c0.552,0,1-0.448,1-1S145.552,76,145,76z M133,70c-0.552,0-1,0.448-1,1s0.448,1,1,1 s1-0.448,1-1S133.552,70,133,70z M139,58c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S139.552,58,139,58z M133,46 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S133.552,46,133,46z M139,46c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S139.552,46,139,46z M139,52c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S139.552,52,139,52z M145,46c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S145.552,46,145,46z M145,34c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S145.552,34,145,34z M145,40 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S145.552,40,145,40z M157,64c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S157.552,64,157,64z M151,64c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S151.552,64,151,64z M151,52c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S151.552,52,151,52z M151,46c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S151.552,46,151,46z",
        opacity: "0.25",
        className: "ZScolor1OpacityDots"
    }), e.createElement("path", {
        fill: "#86134F",
        d: "M92,35h14l12,12l-9.076-6.85c-2.758-2.069-5.973-3.446-9.375-4.012 L92,35z M35,50c-2.815-2.252-2-13-2-13v15.91h31C64,52.91,40,54,35,50z M106.726,52c-11.598,0-21-10.074-21-22.5 c0-2.003,0.247-3.943,0.706-5.792c-1.716,3.043-2.706,6.549-2.706,10.292c0,11.598,9.402,21,21,21 c8.696,0,16.157-5.286,19.346-12.819C120.29,48.108,113.933,52,106.726,52z",
        opacity: "0.1",
        className: "ZScolor1Opacity"
    }), e.createElement("path", {
        fill: "#86134F",
        d: "M43,75L43,75c0.552,0,1,0.448,1,1v7c0,0.552-0.448,1-1,1l0,0c-0.552,0-1-0.448-1-1v-7 C42,75.448,42.448,75,43,75z M68,84L68,84c0.552,0,1-0.448,1-1v-7c0-0.552-0.448-1-1-1l0,0c-0.552,0-1,0.448-1,1v7 C67,83.552,67.448,84,68,84z M58,84L58,84c0.552,0,1-0.448,1-1V73c0-0.552-0.448-1-1-1l0,0c-0.552,0-1,0.448-1,1v10 C57,83.552,57.448,84,58,84z M82.999,84L82.999,84c0.552,0,1-0.448,1-1v-7c0-0.552-0.448-1-1-1l0,0c-0.552,0-1,0.448-1,1v7 C81.999,83.552,82.447,84,82.999,84z M78,84L78,84c0.552,0,1-0.448,1-1V73c0-0.552-0.448-1-1-1l0,0c-0.552,0-1,0.448-1,1v10 C77,83.552,77.448,84,78,84z M98,84L98,84c0.552,0,1-0.448,1-1V73c0-0.552-0.448-1-1-1l0,0c-0.552,0-1,0.448-1,1v10 C97,83.552,97.448,84,98,84z M48,84L48,84c0.552,0,1-0.448,1-1V69c0-0.552-0.448-1-1-1l0,0c-0.552,0-1,0.448-1,1v14 C47,83.552,47.448,84,48,84z M73,84L73,84c0.552,0,1-0.448,1-1V69c0-0.552-0.448-1-1-1l0,0c-0.552,0-1,0.448-1,1v14 C72,83.552,72.448,84,73,84z M108,84L108,84c0.552,0,1-0.448,1-1v-7c0-0.552-0.448-1-1-1l0,0c-0.552,0-1,0.448-1,1v7 C107,83.552,107.448,84,108,84z M88,84L88,84c0.552,0,1-0.448,1-1V73c0-0.552-0.448-1-1-1h0c-0.552,0-1,0.448-1,1v10 C87,83.552,87.447,84,88,84z M63,84L63,84c0.552,0,1-0.448,1-1V69c0-0.552-0.448-1-1-1l0,0c-0.552,0-1,0.448-1,1v14 C62,83.552,62.448,84,63,84z M53,84L53,84c0.552,0,1-0.448,1-1V63c0-0.552-0.448-1-1-1l0,0c-0.552,0-1,0.448-1,1v20 C52,83.552,52.448,84,53,84z M103,84L103,84c0.552,0,1-0.448,1-1V63c0-0.552-0.448-1-1-1l0,0c-0.552,0-1,0.448-1,1v20 C102,83.552,102.448,84,103,84z M93,84L93,84c0.552,0,1-0.448,1-1V69c0-0.552-0.448-1-1-1l0,0c-0.552,0-1,0.448-1,1v14 C92,83.552,92.448,84,93,84z M126,33.5c0,11.874-9.626,21.5-21.5,21.5S83,45.374,83,33.5C83,21.626,92.626,12,104.5,12 S126,21.626,126,33.5z M84.025,34H105V13.025c-0.168-0.004-0.331-0.025-0.5-0.025C93.178,13,84,22.178,84,33.5 C84,33.669,84.021,33.832,84.025,34z M118.625,48.332L105.293,35H84.076c0.771,10.619,9.609,19,20.424,19 C109.981,54,114.947,51.836,118.625,48.332z M125,33.5c0-10.815-8.381-19.653-19-20.424V34v0.293l13.332,13.332 C122.836,43.947,125,38.981,125,33.5z M75,33l-7.882,1.639c-0.1,0.017-0.193,0.066-0.265,0.138l-2.822,2.868l-4.734,0.962 c-0.113,0.023-0.214,0.085-0.286,0.176l-3.394,4.311l-2.606-6.18c-0.079-0.187-0.306-0.28-0.462-0.3 c-0.2,0.006-0.376,0.136-0.445,0.326l-3.472,9.702l-2.313-5.735c-0.072-0.18-0.242-0.3-0.434-0.308 c-0.185-0.013-0.369,0.101-0.454,0.274l-2.835,5.76l-2.581,0.82l-1.743-1.771c-0.099-0.101-0.237-0.155-0.379-0.144 c-0.141,0.011-0.272,0.082-0.356,0.198L35,50l2.979-3.212l1.554,1.579c0.128,0.131,0.317,0.174,0.491,0.123l3.061-0.972 c0.127-0.041,0.232-0.132,0.291-0.252l2.447-4.973l2.385,5.911c0.077,0.19,0.248,0.329,0.461,0.308 c0.202-0.004,0.38-0.134,0.449-0.326l3.482-9.729l2.441,5.789c0.068,0.16,0.213,0.272,0.383,0.295 c0.169,0.022,0.339-0.046,0.447-0.181l3.791-4.817l4.704-0.956c0.095-0.019,0.182-0.066,0.25-0.136l2.813-3.007L75,33z M72,53H33V35 h-1v19h40V53z",
        className: "ZScolor1"
    }))
};

const IA = {
    name: "DebuggerChangeIndicator",
    suppressMirroring: true,
    tooltipKey: "DebuggerChangeIndicator.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "DebuggerChangeIndicator", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M0 0H14V14H0z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13.5,9C13.776,9,14,8.776,14,8.5S13.776,8,13.5,8H11V6h0.707l2.146-2.146c0.195-0.195,0.195-0.512,0-0.707 s-0.512-0.195-0.707,0L11.293,5H11c0,0-0.009-1.806-1.884-2.614l0.831-1.663C10.07,0.476,9.97,0.176,9.723,0.052 c-0.246-0.121-0.545-0.023-0.67,0.224L8.14,2.101C7.8,2.04,7.427,2,7,2S6.2,2.04,5.86,2.101L4.947,0.276 C4.823,0.029,4.524-0.07,4.276,0.052C4.029,0.176,3.93,0.476,4.053,0.723l0.831,1.663C3.009,3.194,3,5,3,5H2.707L0.854,3.146 c-0.195-0.195-0.512-0.195-0.707,0s-0.195,0.512,0,0.707L2.293,6H3v2H0.5C0.224,8,0,8.223,0,8.5S0.224,9,0.5,9H3v2H2.293 l-2.146,2.146c-0.195,0.195-0.195,0.512,0,0.707C0.244,13.951,0.372,14,0.5,14s0.256-0.049,0.354-0.146L2.707,12h0.527 C3.601,12.872,4.547,14,7,14s3.399-1.127,3.766-2h0.527l1.854,1.854C13.244,13.951,13.372,14,13.5,14s0.256-0.049,0.354-0.146 c0.195-0.195,0.195-0.512,0-0.707L11.707,11H11V9H13.5z M7,3c2.799,0,2.99,1.677,3,2H4C4,4.918,4.034,3,7,3z M7,13 c-2.799,0-2.99-1.677-3-2V6h6v5C10,11.081,9.966,13,7,13z",
        className: "iconColor"
    }), e.createElement("path", {
        fill: "#D80000",
        d: "M12,4c0,1.657-1.343,3-3,3S6,5.657,6,4s1.343-3,3-3S12,2.343,12,4z",
        className: "alert"
    }))
};

const _A = {
    name: "InsightFoundStatus",
    suppressMirroring: true,
    tooltipKey: "InsightFoundStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "InsightFoundStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M13.884,5.759C13.956,6.162,14,6.576,14,7c0,3.866-3.134,7-7,7s-7-3.134-7-7c0-3.866,3.134-7,7-7 c0.424,0,0.838,0.044,1.241,0.116c-0.278,0.266-0.508,0.575-0.7,0.911C7.363,1.011,7.183,1,7,1C3.691,1,1,3.691,1,7s2.691,6,6,6 s6-2.691,6-6c0-0.183-0.011-0.363-0.027-0.542C13.308,6.266,13.618,6.036,13.884,5.759z M5.5,10c0,0.552,0.448,1,1,1h1 c0.552,0,1-0.448,1-1V9c0-0.772,0.305-1.499,0.802-2.09C9.36,6.841,9.406,6.763,9.458,6.689C9.147,6.559,8.864,6.38,8.599,6.178 C8.577,6.207,8.56,6.238,8.537,6.266C8.1,6.786,7.791,7.38,7.63,8H6.38C6.227,7.369,5.926,6.788,5.5,6.308 C5.087,5.845,4.922,5.247,5.034,4.624c0.141-0.783,0.811-1.453,1.592-1.591C6.752,3.011,6.877,3,7,3c0,0,0,0,0,0v0 c0-0.346,0.058-0.676,0.141-0.996c-0.224-0.01-0.454,0.003-0.689,0.044C5.25,2.261,4.266,3.246,4.05,4.447 C3.875,5.423,4.174,6.323,4.753,6.973C5.246,7.528,5.5,8.255,5.5,8.998V9V10z",
        className: "iconColor"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M14,3c0,1.657-1.343,3-3,3S8,4.657,8,3s1.343-3,3-3S14,1.343,14,3z",
        className: "information"
    }))
};

const DA = {
    name: "InsightStatus",
    suppressMirroring: true,
    tooltipKey: "InsightStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "InsightStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        fill: "#016DBA",
        d: "M7,0C3.134,0,0,3.134,0,7s3.134,7,7,7s7-3.134,7-7S10.866,0,7,0z M7,13 c-3.309,0-6-2.691-6-6s2.691-6,6-6s6,2.691,6,6S10.309,13,7,13z M6.452,2.049C5.25,2.261,4.266,3.246,4.05,4.447 C3.875,5.423,4.174,6.323,4.753,6.973C5.246,7.528,5.5,8.255,5.5,8.998V9v1c0,0.552,0.448,1,1,1h1c0.552,0,1-0.448,1-1V9 c0-0.772,0.305-1.499,0.802-2.09C9.737,6.393,10,5.729,10,5C10,3.164,8.35,1.713,6.452,2.049z M8.537,6.266 C8.1,6.786,7.791,7.38,7.63,8H6.38C6.227,7.369,5.926,6.788,5.5,6.308C5.087,5.845,4.922,5.247,5.034,4.624 c0.141-0.783,0.811-1.453,1.592-1.591C6.752,3.011,6.877,3,7,3c1.103,0,2,0.897,2,2C9,5.468,8.84,5.906,8.537,6.266z",
        className: "information"
    }))
};

const LA = {
    name: "ThumbnailUnknownObject16x9",
    suppressMirroring: true,
    tooltipKey: "ThumbnailUnknownObject16x9.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "thumbnailUnknownObject16x9", t.className ].join(" "),
        width: "160",
        height: "90",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 160 90",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "#FFF",
        d: "M160,90H0V0h160V90z",
        className: "thumbBackgroundFill"
    }), e.createElement("linearGradient", {
        id: "thumbColorBackgroundGradLightUnknown_1_",
        x1: "8",
        x2: "154",
        y1: "45",
        y2: "45",
        gradientTransform: "matrix(1 0 0 -1 0 90)",
        gradientUnits: "userSpaceOnUse"
    }, e.createElement("stop", {
        offset: "0",
        stopColor: "#B0B7C2",
        stopOpacity: 0
    }), e.createElement("stop", {
        offset: "0.5",
        stopColor: "#B0B7C2",
        stopOpacity: .25
    }), e.createElement("stop", {
        offset: "1",
        stopColor: "#B0B7C2",
        stopOpacity: 0
    })), e.createElement("path", {
        fill: "url(#thumbColorBackgroundGradLightUnknown_1_)",
        d: "M30,18c0,0.552-0.448,1-1,1 s-1-0.448-1-1s0.448-1,1-1S30,17.448,30,18z M30,12c0,0.552-0.448,1-1,1s-1-0.448-1-1s0.448-1,1-1S30,11.448,30,12z M36,24 c0,0.552-0.448,1-1,1s-1-0.448-1-1s0.448-1,1-1S36,23.448,36,24z M29,23c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S29.552,23,29,23z M137,29c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S137.552,29,137,29z M41,35c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S41.552,35,41,35z M101,35c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S101.552,35,101,35z M119,35 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S119.552,35,119,35z M131,35c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S131.552,35,131,35z M17,41c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S17.552,41,17,41z M29,41c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S29.552,41,29,41z M41,41c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S41.552,41,41,41z M53,41 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S53.552,41,53,41z M59,41c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S59.552,41,59,41z M65,41c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S65.552,41,65,41z M95,41c-0.552,0-1,0.448-1,1s0.448,1,1,1 s1-0.448,1-1S95.552,41,95,41z M101,41c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S101.552,41,101,41z M107,41 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S107.552,41,107,41z M113,41c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S113.552,41,113,41z M119,41c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S119.552,41,119,41z M125,41c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S125.552,41,125,41z M131,41c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S131.552,41,131,41z M131,23 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S131.552,23,131,23z M131,29c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S131.552,29,131,29z M143,23c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S143.552,23,143,23z M149,23c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S149.552,23,149,23z M143,17c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S143.552,17,143,17z M143,41 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S143.552,41,143,41z M149,41c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S149.552,41,149,41z M11,47c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S11.552,47,11,47z M17,47c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S17.552,47,17,47z M29,47c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S29.552,47,29,47z M35,47 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S35.552,47,35,47z M41,47c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S41.552,47,41,47z M47,47c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S47.552,47,47,47z M53,47c-0.552,0-1,0.448-1,1s0.448,1,1,1 s1-0.448,1-1S53.552,47,53,47z M59,47c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S59.552,47,59,47z M107,47c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S107.552,47,107,47z M125,47c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S125.552,47,125,47z M23,53 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S23.552,53,23,53z M29,53c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S29.552,53,29,53z M41,53c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S41.552,53,41,53z M59,53c-0.552,0-1,0.448-1,1s0.448,1,1,1 s1-0.448,1-1S59.552,53,59,53z M107,53c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S107.552,53,107,53z M113,53 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S113.552,53,113,53z M125,53c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S125.552,53,125,53z M131,65c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S131.552,65,131,65z M131,71c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S131.552,71,131,71z M23,59c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S23.552,59,23,59z M41,59 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S41.552,59,41,59z M107,59c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S107.552,59,107,59z M23,65c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S23.552,65,23,65z M29,65c-0.552,0-1,0.448-1,1 s0.448,1,1,1s1-0.448,1-1S29.552,65,29,65z M23,71c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S23.552,71,23,71z M11,65 c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S11.552,65,11,65z M11,71c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1 S11.552,71,11,71z M17,71c-0.552,0-1,0.448-1,1s0.448,1,1,1s1-0.448,1-1S17.552,71,17,71z M11,77c-0.552,0-1,0.448-1,1s0.448,1,1,1 s1-0.448,1-1S11.552,77,11,77z M144.866,59.584L151,67.25l-1.5,1.25l-5.5-8.204l-5.5,8.204l-1.5-1.25l6.147-7.682L134,57l0.5-2 l8.955,3.514L143,48.5h2l-0.457,10.042L153.5,55l0.5,2L144.866,59.584z M18.866,32.584L25,40.25l-1.5,1.25L18,33.296L12.5,41.5 L11,40.25l6.147-7.682L8,30l0.5-2l8.955,3.514L17,21.5h2l-0.457,10.042L27.5,28l0.5,2L18.866,32.584z",
        className: "thumbColorBackgroundGradLightUnknown"
    }), e.createElement("linearGradient", {
        id: "thumbColor1GradLightUnknown_1_",
        x1: "80",
        x2: "80",
        y1: "13",
        y2: "77",
        gradientTransform: "matrix(1 0 0 -1 0 90)",
        gradientUnits: "userSpaceOnUse"
    }, e.createElement("stop", {
        offset: "0",
        stopColor: "#33A3FF",
        stopOpacity: 0
    }), e.createElement("stop", {
        offset: "0.5",
        stopColor: "#33A3FF",
        stopOpacity: .25
    }), e.createElement("stop", {
        offset: "1",
        stopColor: "#33A3FF",
        stopOpacity: 0
    })), e.createElement("path", {
        fill: "url(#thumbColor1GradLightUnknown_1_)",
        d: "M68.866,68.084L75,75.75L73.5,77L68,68.796 L62.5,77L61,75.75l6.147-7.682L58,65.5l0.5-2l8.955,3.514L67,57h2l-0.457,10.042L77.5,63.5l0.5,2L68.866,68.084z M92.866,24.084 L99,31.75L97.5,33L92,24.796L86.5,33L85,31.75l6.147-7.682L82,21.5l0.5-2l8.955,3.514L91,13h2l-0.457,10.042L101.5,19.5l0.5,2 L92.866,24.084z",
        className: "thumbColor1GradLightUnknown"
    }), e.createElement("linearGradient", {
        id: "thumbColor1GradMedUnknown_1_",
        x1: "80",
        x2: "80",
        y1: "9",
        y2: "81",
        gradientTransform: "matrix(1 0 0 -1 0 90)",
        gradientUnits: "userSpaceOnUse"
    }, e.createElement("stop", {
        offset: "0",
        stopColor: "#33A3FF",
        stopOpacity: 0
    }), e.createElement("stop", {
        offset: "0.5",
        stopColor: "#33A3FF",
        stopOpacity: .5
    }), e.createElement("stop", {
        offset: "1",
        stopColor: "#33A3FF",
        stopOpacity: 0
    })), e.createElement("path", {
        fill: "url(#thumbColor1GradMedUnknown_1_)",
        d: "M112.866,72.084L119,79.75L117.5,81l-5.5-8.204 L106.5,81l-1.5-1.25l6.147-7.682L102,69.5l0.5-2l8.955,3.514L111,61h2l-0.457,10.042L121.5,67.5l0.5,2L112.866,72.084z M48.866,20.084L55,27.75L53.5,29L48,20.796L42.5,29L41,27.75l6.147-7.682L38,17.5l0.5-2l8.955,3.514L47,9h2l-0.457,10.042 L57.5,15.5l0.5,2L48.866,20.084z",
        className: "thumbColor1GradMedUnknown"
    }), e.createElement("path", {
        fill: "#33A3FF",
        d: "M80.866,45.084L87,52.75L85.5,54L80,45.796L74.5,54L73,52.75l6.147-7.682L70,42.5l0.5-2 l8.955,3.514L79,34h2l-0.457,10.042L89.5,40.5l0.5,2L80.866,45.084z",
        className: "thumbColor1"
    }))
};

const TA = {
    name: "TrendDownStatus",
    suppressMirroring: true,
    tooltipKey: "TrendDownStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "TrendDownStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M7,12.024l2.148-2.148L2.145,2.872C2.049,2.775,2,2.648,2,2.521c0-0.128,0.049-0.255,0.146-0.352 c0.195-0.194,0.51-0.193,0.704,0.001l7,7.003L12,7.024v5H7z",
        className: "iconColor"
    }))
};

const RA = {
    name: "TrendNoChangeStatus",
    suppressMirroring: true,
    tooltipKey: "TrendNoChangeStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "TrendNoChangeStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M9,10V7H1.5C1.224,7,1,6.776,1,6.5S1.224,6,1.5,6H9V3l4,3.5L9,10z",
        className: "iconColor"
    }))
};

const kA = {
    name: "TrendUpStatus",
    suppressMirroring: true,
    tooltipKey: "TrendUpStatus.icon.label",
    localeOverrides: {},
    render: (t, o) => e.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        className: [ "TrendUpStatus", t.className ].join(" "),
        width: "14",
        height: "14",
        x: "0",
        y: "0",
        version: "1.1",
        viewBox: "0 0 14 14",
        xmlSpace: "preserve",
        ref: o
    }, t), t.tooltip && e.createElement("title", null, t.tooltip), e.createElement("path", {
        fill: "none",
        d: "M14,14H0V0h14V14z",
        className: "svgToolTipPane"
    }), e.createElement("path", {
        d: "M12.024,7L9.877,4.852l-7.005,7.002C2.775,11.951,2.648,12,2.521,12c-0.128,0-0.255-0.049-0.352-0.146 c-0.194-0.195-0.193-0.51,0.001-0.704l7.003-7L7.024,2h5V7z",
        className: "iconColor"
    }))
};

const AA = i("sas_RC");

function MA(e) {
    let t = 0;
    function o(o) {
        return `${o}-${e}-${t++}`;
    }
    function a(e) {
        const t = l(AA);
        const a = c();
        const [r, s] = n();
        if (qI(e)) {
            if (qI(a.current)) {
                a.current = o(t);
            }
            return a.current;
        } else {
            if (r && r.length === e) {
                return r;
            }
            const n = r ? [ ...r ] : [];
            {
                for (let a = n.length; a < e; a++) {
                    n.push(o(t));
                }
                n.length = e;
            }
            s(n);
            return n;
        }
    }
    return a;
}

const NA = e => lb(`NovaComponents-${e}-gui-icu`);

const OA = new WeakSet;

function PA(e) {
    if (typeof e.persist === "function") e.persist();
    OA.add(e);
}

function BA(e) {
    return OA.has(e);
}

let zA = -1;

function FA(e = false) {
    if (zA === -1 || e) {
        const e = ly();
        const t = document.createElement("div");
        const o = t.style;
        o.width = "50px";
        o.height = "50px";
        o.overflow = "scroll";
        e.appendChild(t);
        zA = Math.ceil(t.offsetWidth - t.clientWidth);
        e.removeChild(t);
    }
    return zA;
}

function jA(e) {
    if (typeof e === "string") {
        const t = /^(\d*\.\d+|\d+)(px|rem)$/.exec(e);
        if (t !== null) {
            switch (t[2]) {
              case "px":
                return parseFloat(t[1]);

              case "rem":
                const e = parseFloat(t[1]) * parseFloat(getComputedStyle(document.documentElement).fontSize);
                return isNaN(e) ? 0 : e;
            }
        }
    } else if (typeof e === "number") {
        return e;
    }
    return 0;
}

const VA = "data-sas-usetruncationtooltip";

const HA = "sas.updatetooltip";

const UA = (e, t) => {
    const o = document.createElement("span");
    if (e.innerHTML) {
        const t = e.childNodes;
        t.forEach((e => {
            const t = e.cloneNode(true);
            o.appendChild(t);
        }));
    } else {
        o.textContent = t ?? GA(e);
    }
    const n = getComputedStyle(e);
    const a = n.webkitLineClamp !== "none";
    {
        o.style.position = "absolute";
        o.style.visibility = "hidden";
        o.style.top = "0";
        o.style.left = "0";
        o.style.whiteSpace = n.whiteSpace;
        o.style.fontFamily = n.fontFamily;
        o.style.fontSize = n.fontSize;
        o.style.fontWeight = n.fontWeight;
        o.style.fontVariant = n.fontVariant;
        o.style.paddingLeft = n.paddingLeft;
        o.style.paddingRight = n.paddingRight;
        o.style.borderLeftWidth = n.borderLeftWidth;
        o.style.borderRightWidth = n.borderRightWidth;
        o.style.borderLeftStyle = n.borderLeftStyle;
        o.style.borderRightStyle = n.borderRightStyle;
        if (a) {
            o.style.width = n.width;
            o.style.wordBreak = n.wordBreak;
        }
    }
    document.body.append(o);
    const r = o.getBoundingClientRect()[a ? "height" : "width"].toFixed(2);
    const s = e.getBoundingClientRect()[a ? "height" : "width"].toFixed(2);
    document.body.removeChild(o);
    return parseFloat(s) < parseFloat(r);
};

const GA = e => {
    if (e?.tagName === "INPUT") {
        const t = e;
        return t.value.length > 0 ? t.value : t.placeholder;
    }
    return e.textContent;
};

const KA = (e, t) => {
    const o = e.title;
    if (t !== o) {
        e.title = t;
    }
};

const WA = e => {
    const t = c(null);
    const o = e?.tooltip;
    const n = e?.truncateRef;
    const i = c(false);
    const l = s((() => {
        const e = t.current;
        if (e) {
            const t = n?.current ?? e;
            const a = GA(t);
            if (a?.length && UA(t)) {
                KA(e, o ? `${a}\n\n${o}` : `${a}`);
            } else if (o) {
                KA(e, o);
            } else {
                e.removeAttribute("title");
            }
        }
    }), [ o, n ]);
    const d = r((() => new MutationObserver(l)), [ l ]);
    const u = s((() => {
        if (!t.current) return;
        l();
        d.disconnect();
        d.observe(n?.current ?? t.current, {
            attributeFilter: [ "value" ],
            subtree: true,
            characterData: true
        });
        i.current = true;
    }), [ l, d, n ]);
    const m = s((() => {
        d.disconnect();
        i.current = false;
    }), [ d ]);
    a((() => {
        if (t.current) {
            if (i.current) {
                l();
                d.observe(n?.current ?? t.current, {
                    attributeFilter: [ "value" ],
                    subtree: true,
                    characterData: true
                });
            }
        }
        return () => {
            if (i.current) {
                d.disconnect();
            }
        };
    }), [ d, l, o, n ]);
    return s((e => {
        if (e === null) {
            t.current?.removeEventListener("mouseenter", l);
            t.current?.removeEventListener("focusin", u);
            t.current?.removeEventListener("focusout", m);
            t.current?.removeEventListener(HA, l);
            t.current?.removeAttribute(VA);
        } else {
            e.addEventListener("mouseenter", l);
            e.addEventListener("focusin", u);
            e.addEventListener("focusout", m);
            e.addEventListener(HA, l);
            e.setAttribute(VA, "true");
        }
        t.current = e;
    }), [ u, m, l ]);
};

const $A = i({
    density: "medium"
});

const YA = () => {
    const e = l($A);
    return e ?? {
        density: "medium"
    };
};

const qA = i(undefined);

function XA(e) {
    const t = e?.mode ?? "polite";
    const {politeSpeechManager: o, assertiveSpeechManager: n} = l(qA) ?? {};
    return t === "polite" ? o : n;
}

const ZA = function(e, t = []) {
    const [o, r] = n("");
    const i = c(null);
    const l = s((() => {
        if (i.current !== null && !!e) {
            r(i.current.closest(`[${e}]`)?.getAttribute(e) ?? "");
        } else {
            r("");
        }
    }), [ e ]);
    const d = s((e => {
        i.current = e;
        l();
    }), [ l ]);
    a((() => {
        l();
    }), [ l, ...t ]);
    return [ o, d ];
};

const JA = () => {
    const e = "SASDesign-Icon-gui-icu";
    const t = lb(e);
    return s((o => {
        const {tooltip: n, icon: a, testId: r} = o;
        let {ariaLabel: s, ariaHidden: i} = o;
        const l = a?.tooltipKey;
        let c = l ? t(l) : undefined;
        if (c === `${e}.${l}` && !r || c === "__0__") {
            if (c === "__0__" && !s) {
                s = "";
            }
            c = "";
        }
        const d = n === undefined ? c : n;
        if (s === "" && d === "") {
            i = true;
        } else {
            s = s || n || c;
        }
        return {
            ariaLabel: !!s ? s : undefined,
            ariaHidden: i,
            tooltip: !!d ? d : undefined
        };
    }), [ t ]);
};

const QA = {
    HelpButton: ZT,
    HelpButtonToolbar: JT,
    Bold: $L,
    BoldDaDeHuSv: YL,
    BoldEs: qL,
    BoldFrIt: XL,
    BoldRu: ZL,
    BoldTr: JL,
    Underline: gk,
    UnderlineEsFrIt: hk,
    UnderlineHu: bk,
    UnderlineRu: vk,
    UnderlineUk: yk,
    Italic: lR,
    ItalicDaDeEsSv: cR,
    ItalicHu: dR,
    ItalicIt: uR,
    ItalicRu: mR,
    ItalicTr: pR
};

const eM = e => QA[e];

var tM = "sas_components-SVG-SVG_svg";

var oM = "sas_components-SVG-SVG_icon";

var nM = "sas_components-SVG-SVG_inner";

var aM = "sas_components-SVG-SVG_allowMirroring";

var rM = "sas_components-SVG-SVG_disabled";

var sM = {
    svg: tM,
    icon: oM,
    inner: nM,
    allowMirroring: aM,
    disabled: rM
};

const iM = new Map;

const lM = new Map;

const cM = e => !!iM.get(e);

const dM = e => {
    const o = cM(e.id) ? uM(e.id) : undefined;
    if (o !== undefined) {
        iM.set(e.id, o);
    }
    const {childClassName: n, ...a} = o ?? {};
    return t("svg", a, t("use", {
        className: ke(n, e.mirroringStyle),
        href: `#${e.id}`
    }));
};

const uM = e => {
    const t = document.getElementById(e);
    const o = t?.parentElement?.classList.contains(sM.icon);
    const n = t?.querySelector("path:not(.svgToolTipPane)");
    return {
        className: t?.getAttribute("class") ?? undefined,
        width: t?.getAttribute("width") ?? undefined,
        height: t?.getAttribute("height") ?? undefined,
        viewBox: t?.getAttribute("viewBox") ?? undefined,
        childClassName: o ? n?.getAttribute("class") ?? undefined : ""
    };
};

const mM = (e, t, o, n) => {
    const a = lM.get(t.id);
    if (!cM(t.id) && !a) {
        pM(e, t, n).then((() => {
            const e = document.getElementById(t.id);
            const o = uM(t.id);
            iM.set(t.id, o);
            if (e) {
                iM.set(t.id, o);
                lM.get(t.id).forEach((e => {
                    e();
                }));
                lM.delete(t.id);
            }
        }));
    }
    lM.set(t.id, [ ...a ?? [], o ]);
};

const pM = (e, t, o) => {
    let n = document.getElementById("sas-svg-area");
    if (n === null) {
        n = fM();
    }
    const {spanStyleTokens: a, spanClassName: r, mirroringStyle: s, ...i} = t;
    const l = document.createElement("span");
    Object.entries(a).map((([e, t]) => {
        l.style.setProperty(e, t);
    }));
    l.className = `${r}`;
    l.dataset.testid = t.id;
    n.prepend(l);
    if (o) {
        return Promise.reject();
    } else {
        return new Promise((function(t) {
            if (l) {
                const o = E(l);
                const n = e.render({
                    ...i,
                    ref: () => {
                        t();
                    }
                });
                o.render(n);
            }
        }));
    }
};

const fM = () => {
    let e = document.getElementById("sas-svg-area");
    if (!e) {
        e = document.createElement("div");
        e.id = "sas-svg-area";
        e.style.position = "absolute";
        e.style.overflow = "hidden";
        e.style.height = "0";
        e.style.width = "0";
        e.dataset.testid = "sas-svg-area";
        document.body.prepend(e);
    }
    return e;
};

if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", fM);
} else {
    fM();
}

const gM = e => {
    const {icon: t, tooltip: o, type: n, ariaLabel: a, ariaHidden: r, testId: s, ariaLabelledBy: i, ariaDescribedBy: l, disabled: c, className: d, style: u, theme: m, ...p} = e;
    const f = {
        icon: t,
        tooltip: o,
        type: n,
        ariaLabel: a,
        ariaHidden: r,
        testId: s,
        ariaLabelledBy: i,
        ariaDescribedBy: l,
        disabled: c,
        theme: m,
        className: d,
        style: u
    };
    return [ f, p ];
};

const hM = f(u(((e, o) => {
    const [{testId: s, type: i, icon: l}, {role: c, ...d}] = gM(e);
    const [u, m] = n(undefined);
    const p = C_();
    const f = r((() => ({
        ...bM(p, {
            type: i || "",
            disabled: e.disabled
        }),
        ...e.theme?.(p)
    })), [ p, i, e ]);
    const g = db();
    const h = ay();
    const [b, v] = ZA("dir", [ h ]);
    const y = JA();
    const {ariaLabel: x, ariaHidden: S, tooltip: w} = y(e);
    const C = u ? u : l;
    const E = `sas-svg-${C.name.toLowerCase()}`;
    const I = cM(E);
    const _ = q_();
    a((() => {
        let e = false;
        const t = t => {
            const o = t.charAt(0).toUpperCase() + t.slice(1);
            const n = eM(o);
            if (e) return;
            return n;
        };
        const o = () => {
            const o = l.localeOverrides[g.split("-")?.[0]];
            if (o) {
                const n = o.mappedName ? t(o.mappedName) : {
                    ...l
                };
                if (e) {
                    return;
                }
                if (n) {
                    n.suppressMirroring = o.suppressMirroring ?? l.suppressMirroring;
                    m(n);
                } else {
                    m(undefined);
                }
            } else {
                m(undefined);
            }
        };
        o();
        return () => {
            e = true;
        };
    }), [ g, l ]);
    a((() => {
        let t = false;
        !I && mM(C, {
            className: sM.inner,
            id: E,
            spanClassName: ke(sM.svg, i === "icon" && sM.icon, e.disabled && sM.disabled),
            spanStyleTokens: f,
            mirroringStyle: ke(!C.suppressMirroring && b === "rtl" && sM.allowMirroring)
        }, _, t);
        return () => {
            t = true;
        };
    }), [ C, E, I, b, _, e.disabled, f, i, h ]);
    const D = dM({
        className: sM.inner,
        id: E,
        spanClassName: ke(sM.svg, i === "icon" && sM.icon, e.disabled && sM.disabled),
        spanStyleTokens: f,
        mirroringStyle: ke(!C.suppressMirroring && b === "rtl" && sM.allowMirroring)
    });
    return t("span", Ee({}, d, {
        ref: e => {
            v(e);
            D_(o, e);
        },
        className: ke(sM.svg, i === "icon" && sM.icon, e.disabled && sM.disabled, e.className),
        "data-testid": s,
        style: {
            ...f,
            ...e.style
        },
        "aria-label": e.ariaLabelledBy ? undefined : x,
        role: c ?? "img",
        "aria-hidden": S,
        title: w,
        "aria-labelledby": e.ariaLabelledBy,
        "aria-describedby": e.ariaDescribedBy
    }), D);
})));

const bM = (e, t) => {
    const o = __(vM(e), "icon");
    const n = __(SM(e), "thumbnail");
    const a = {
        ...__({
            opacity: t?.disabled ? .3 : 1
        }, "svg"),
        ...t?.type === "icon" || t?.type === "" ? o : {},
        ...t?.type === "svg" || t?.type === "" ? {
            "--viya-logo": e.themeVariant === "light" ? "#032954" : "#fff"
        } : {},
        ...t?.type === "pnp" || t?.type === "" ? __(CM(e), "pnp") : {},
        ...t?.type === "boss" || t?.type === "" ? {
            ...__(CM(e), "pnp"),
            ...__(EM(e), "boss")
        } : {},
        ...t?.type === "help" || t?.type === "" ? __(yM(e), "help") : {},
        ...t?.type === "zerostate" || t?.type === "" ? __(xM(e), "zerostate") : {},
        ...t?.type === "thumbnail" || t?.type === "" ? n : {},
        ...t?.type === "eg-studio" || t?.type === "" ? __(wM(e), "eg-studio") : {},
        ...t?.type === "report" || t?.type === "" ? _M(e) : {},
        ...t?.type === "vendor" || t?.type === "icon" || t?.type === "" ? __(IM(e), "vendor") : {},
        ...t?.type === "vendor" || t?.type === "icon" || t?.type === "" ? {
            "--icon-default-fg": o["--icon-default-fg"],
            "--thumbnail-backgroundfill": n["--thumbnail-backgroundfill"],
            "--thumbnail-sas-logo": n["--thumbnail-sas-logo"],
            "--thumbnail-slack-background": n["--thumbnail-slack-background"]
        } : {}
    };
    return a;
};

const vM = e => {
    const t = {
        "default-fg": e.tokensExperimental["color-text-neutral"],
        "neutral-fg": e.tokensExperimental["color-status-icon-neutral"],
        "alert-fg": e.tokensExperimental["color-status-icon-alert"],
        "warning-fg": e.tokensExperimental["color-status-icon-warning"],
        "success-fg": e.tokensExperimental["color-status-icon-success"],
        "information-fg": e.tokensExperimental["color-status-icon-info"],
        "nodeStatus-bg": Jv(e.tokensExperimental["color-text-neutral-inverse"], .8)
    };
    switch (e.themeVariant) {
      case "high-contrast":
      case "dark":
        return {
            ...t,
            "neutralfill-fg": Jv(e.tokensExperimental["color-status-icon-neutral"], .6)
        };

      default:
        return {
            ...t,
            "neutralfill-fg": Jv(e.tokensExperimental["color-status-icon-neutral"], .5)
        };
    }
};

const yM = e => {
    if (e.themeVariant === "high-contrast") {
        return {
            "color1-fill": e.tokensExperimental["color-dataviz-graph7"]
        };
    }
    return {
        "color1-fill": e.tokensExperimental["color-primary"]
    };
};

const xM = e => {
    switch (e.themeVariant) {
      case "high-contrast":
        return {
            zscolor1: e.tokensExperimental["color-secondary"],
            "zscolor1-opacity": "0.4",
            "zscolor1-dots-opacity": "0.5",
            zscolor2: e.tokensExperimental["color-neutral"],
            "zscolor2-opacity1": "0.6",
            "zscolor2-opacity2": "0.3"
        };

      case "dark":
        return {
            zscolor1: e.tokensExperimental["color-neutral"],
            "zscolor1-opacity": "0.3",
            "zscolor1-dots-opacity": "0.25",
            zscolor2: e.tokensExperimental["color-neutral"],
            "zscolor2-opacity1": "0.6",
            "zscolor2-opacity2": "0.3"
        };

      default:
        return {
            zscolor1: e.tokensExperimental["color-text-secondary"],
            "zscolor1-opacity": "0.1",
            "zscolor1-dots-opacity": "0.25",
            zscolor2: e.tokensExperimental["color-neutral"],
            "zscolor2-opacity1": "0.8",
            "zscolor2-opacity2": "0.4"
        };
    }
};

const SM = e => {
    switch (e.themeVariant) {
      case "high-contrast":
        return {
            backgroundfill: e.tokensExperimental["color-container-background-0"],
            overlay: e.tokensExperimental["color-container-background-0"],
            shortcut: e.tokensExperimental["color-text-neutral"],
            color1: e.tokensExperimental["color-dataviz-graph1"],
            color2: e.tokensExperimental["color-dataviz-graph5"],
            color3: e.tokensExperimental["color-dataviz-graph4"],
            color4: e.tokensExperimental["color-dataviz-graph3"],
            "slack-background": "#000000",
            "jira-background": "#000000",
            "facebook-logo": "#FFFFFF",
            "sas-logo": "#FFFFFF"
        };

      case "dark":
        return {
            backgroundfill: e.tokensExperimental["color-container-background-0"],
            overlay: e.tokensExperimental["color-container-background-0"],
            shortcut: e.tokensExperimental["color-text-neutral"],
            color1: e.tokensExperimental["color-dataviz-graph1"],
            color2: e.tokensExperimental["color-dataviz-graph5"],
            color3: e.tokensExperimental["color-dataviz-graph4"],
            color4: e.tokensExperimental["color-dataviz-graph3"],
            "slack-background": "#4A154B",
            "jira-background": "#0D56C9",
            "facebook-logo": "#FFFFFF",
            "sas-logo": "#FFFFFF"
        };

      default:
        return {
            backgroundfill: e.tokensExperimental["color-container-background-0"],
            overlay: e.tokensExperimental["color-container-background-0"],
            shortcut: e.tokensExperimental["color-text-neutral"],
            color1: e.tokensExperimental["color-dataviz-graph1"],
            color2: e.tokensExperimental["color-dataviz-graph5"],
            color3: e.tokensExperimental["color-dataviz-graph4"],
            color4: e.tokensExperimental["color-dataviz-graph3"],
            "slack-background": "#36C5F0",
            "jira-background": "#0D56C9",
            "facebook-logo": "#1877F2",
            "sas-logo": "#012036"
        };
    }
};

const wM = e => {
    switch (e.themeVariant) {
      case "high-contrast":
        return {
            bg: e.tokensExperimental["color-container-border-4"],
            "bg-white": e.tokensExperimental["color-container-background-0"],
            codedata: e.tokensExperimental["color-text-primary"],
            codetext: e.tokensExperimental["color-neutral"],
            codeeditormarkers: e.tokensExperimental["color-text-neutral"],
            codemarker: e.tokensExperimental["color-text-neutral"],
            codenumber: "#28E6D1",
            codeproc: "#ACD8F9",
            codebgnotab: e.tokensExperimental["color-container-background-0"],
            "codebgnotab-stroke": e.tokensExperimental["color-text-neutral"],
            codebg: e.tokensExperimental["color-container-background-2"],
            "codebg-stroke": e.tokensExperimental["color-container-border-4"],
            processarrows: e.tokensExperimental["color-container-border-4"],
            processflows: e.tokensExperimental["color-container-border-4"],
            "processflows-o25": .25,
            "processflows-o50": .5,
            "processflows-o75": .75,
            processflowarrows: e.tokensExperimental["color-container-border-4"],
            nodecolumn: "#73CCFF",
            nodetransform: "#FFF93E",
            nodedata: e.tokensExperimental["color-neutral"],
            modelfitbg: e.tokensExperimental["color-container-background-0"],
            "modelfitbg-stroke": "#FFFFFF",
            nocurve: e.tokensExperimental["color-text-neutral"],
            highthreshold: e.tokensExperimental["color-status-alert"],
            medthreshold: e.tokensExperimental["color-status-warning"],
            lowthreshold: e.tokensExperimental["color-status-info"],
            columnfill: e.tokensExperimental["color-container-background-0"],
            columnborder: e.tokensExperimental["color-container-border-4"],
            columnmap: e.tokensExperimental["color-label-text"],
            maparrow: e.tokensExperimental["color-label-text"],
            columninfo: e.tokensExperimental["color-label-text"],
            "columninfo-opacity": .6,
            columnbordermissing: e.tokensExperimental["color-label-text"],
            "columnbordermissing-opacity": 1,
            columnmapmissing: e.tokensExperimental["color-label-text"],
            "columnmapmissing-opacity": 1,
            columninfomissing: e.tokensExperimental["color-label-text"],
            "columninfomissing-opacity": 1,
            columnwarning: e.tokensExperimental["color-status-warning"],
            "columnwarning-stroke": "#000000",
            columnmapwarning: e.tokensExperimental["color-status-warning"],
            columninfowarning: e.tokensExperimental["color-status-warning"],
            "columninfowarning-opacity": .5,
            columnalert: e.tokensExperimental["color-status-alert"],
            "columnalert-stroke": "#000000",
            columnmapalert: e.tokensExperimental["color-status-alert"],
            columninfoalert: e.tokensExperimental["color-status-alert"],
            "columninfoalert-opacity": 1
        };

      case "dark":
        return {
            bg: e.tokensExperimental["color-container-border-4"],
            "bg-white": e.tokensExperimental["color-container-background-0"],
            codedata: e.tokensExperimental["color-text-primary"],
            codetext: e.tokensExperimental["color-neutral"],
            codeeditormarkers: e.tokensExperimental["color-text-neutral"],
            codemarker: e.tokensExperimental["color-text-neutral"],
            codenumber: "#0CACA4",
            codeproc: "#8F8FFF",
            codebgnotab: e.tokensExperimental["color-container-background-0"],
            "codebgnotab-stroke": "none",
            codebg: e.tokensExperimental["color-container-background-2"],
            "codebg-stroke": "none",
            processarrows: e.tokensExperimental["color-container-border-4"],
            processflows: e.tokensExperimental["color-container-border-4"],
            "processflows-o25": .25,
            "processflows-o50": .5,
            "processflows-o75": .75,
            processflowarrows: e.tokensExperimental["color-container-border-4"],
            nodecolumn: "#35A5FF",
            nodetransform: "#EBCF5C",
            nodedata: e.tokensExperimental["color-neutral"],
            modelfitbg: e.tokensExperimental["color-container-background-0"],
            "modelfitbg-stroke": "none",
            nocurve: e.tokensExperimental["color-text-neutral"],
            highthreshold: e.tokensExperimental["color-status-alert"],
            medthreshold: e.tokensExperimental["color-status-warning"],
            lowthreshold: e.tokensExperimental["color-status-info"],
            columnfill: e.tokensExperimental["color-container-background-0"],
            columnborder: e.tokensExperimental["color-container-border-4"],
            columnmap: e.tokensExperimental["color-label-text"],
            maparrow: e.tokensExperimental["color-label-text"],
            columninfo: e.tokensExperimental["color-label-text"],
            "columninfo-opacity": .3,
            columnbordermissing: e.tokensExperimental["color-label-text"],
            "columnbordermissing-opacity": .5,
            columnmapmissing: e.tokensExperimental["color-label-text"],
            "columnmapmissing-opacity": .5,
            columninfomissing: e.tokensExperimental["color-label-text"],
            "columninfomissing-opacity": .3,
            columnwarning: e.tokensExperimental["color-status-warning"],
            "columnwarning-stroke": "none",
            columnmapwarning: e.tokensExperimental["color-status-warning"],
            columninfowarning: e.tokensExperimental["color-status-warning"],
            "columninfowarning-opacity": .3,
            columnalert: e.tokensExperimental["color-status-alert"],
            "columnalert-stroke": "none",
            columnmapalert: e.tokensExperimental["color-status-alert"],
            columninfoalert: e.tokensExperimental["color-status-alert"],
            "columninfoalert-opacity": .3
        };

      default:
        return {
            bg: e.tokensExperimental["color-container-border-4"],
            "bg-white": e.tokensExperimental["color-container-background-0"],
            codedata: e.tokensExperimental["color-text-primary"],
            codetext: e.tokensExperimental["color-neutral"],
            codeeditormarkers: e.tokensExperimental["color-text-neutral"],
            codemarker: e.tokensExperimental["color-text-neutral"],
            codenumber: "#08726D",
            codeproc: "#000080",
            codebgnotab: e.tokensExperimental["color-container-background-0"],
            "codebgnotab-stroke": "none",
            codebg: e.tokensExperimental["color-container-background-2"],
            "codebg-stroke": "none",
            processarrows: e.tokensExperimental["color-container-border-4"],
            processflows: e.tokensExperimental["color-container-border-4"],
            "processflows-o25": .25,
            "processflows-o50": .5,
            "processflows-o75": .75,
            processflowarrows: e.tokensExperimental["color-container-border-4"],
            nodecolumn: "#277FC7",
            nodetransform: "#C79F27",
            nodedata: e.tokensExperimental["color-neutral"],
            modelfitbg: e.tokensExperimental["color-container-background-2"],
            "modelfitbg-stroke": "none",
            nocurve: e.tokensExperimental["color-text-neutral"],
            highthreshold: e.tokensExperimental["color-status-alert"],
            medthreshold: e.tokensExperimental["color-status-warning"],
            lowthreshold: e.tokensExperimental["color-status-info"],
            columnfill: e.tokensExperimental["color-container-background-0"],
            columnborder: e.tokensExperimental["color-container-border-4"],
            columnmap: e.tokensExperimental["color-label-text"],
            maparrow: e.tokensExperimental["color-label-text"],
            columninfo: e.tokensExperimental["color-label-text"],
            "columninfo-opacity": .3,
            columnbordermissing: e.tokensExperimental["color-label-text"],
            "columnbordermissing-opacity": .5,
            columnmapmissing: e.tokensExperimental["color-label-text"],
            "columnmapmissing-opacity": .5,
            columninfomissing: e.tokensExperimental["color-label-text"],
            "columninfomissing-opacity": .3,
            columnwarning: e.tokensExperimental["color-status-warning"],
            "columnwarning-stroke": "none",
            columnmapwarning: e.tokensExperimental["color-status-warning"],
            columninfowarning: e.tokensExperimental["color-status-warning"],
            "columninfowarning-opacity": .3,
            columnalert: e.tokensExperimental["color-status-alert"],
            "columnalert-stroke": "none",
            columnmapalert: e.tokensExperimental["color-status-alert"],
            columninfoalert: e.tokensExperimental["color-status-alert"],
            "columninfoalert-opacity": .3
        };
    }
};

const CM = e => ({
    "layout-tiles": e.tokensExperimental["color-container-background-0"],
    "layout-border": e.tokensExperimental["color-container-border-4"],
    "layout-background": e.tokensExperimental["color-container-background-2"]
});

const EM = e => ({
    "layout-fill": e.tokensExperimental["color-container-background-1"]
});

const IM = e => {
    switch (e.themeVariant) {
      case "high-contrast":
        return {
            adformTypeLarge: "#fff",
            adformBlueLarge: "#fff",
            adformGreenLarge: "#fff",
            adformYellowLarge: "#fff",
            adformBlue: "#fff",
            adformGreen: "#fff",
            adformYellow: "#fff",
            clouderaLogo: "#fff",
            facebookBlue: "#fff",
            f: e.tokensExperimental["color-container-background-0"],
            thumbFacebookLogo: "#fff",
            impalaLogo: "#fff",
            instagramLogo: "#fff",
            linkedInLogo: "#fff",
            mariaDBLogo: "#fff",
            mongoLogo: "#fff",
            mongoLeaf: "#00ed64",
            mySQLTeal: e.tokensExperimental["color-container-background-0"],
            mySQLTealLarge: "#fff",
            mySQLOrange: "#fff",
            oracleRed: "#fff",
            oracleDB: "#fff",
            sasLogo: "#fff",
            singleStoreText: "#fff",
            slackText: "#fff",
            slackBlue: "#36c5f0",
            slackGreen: "#2eb67d",
            slackRed: "#e01e5a",
            slackYellow: "#ecb22e",
            ghostOutline: "#fff",
            ghostFill: "#000",
            snowflakeLogo: "#fff",
            sparkText: "#fff",
            sparkStar: "#e26a1a",
            syniverseText: "#fff",
            teradataText: "#fff",
            teradataDot: "#fff",
            twitterBlue: "#fff",
            youTubeFrame: "#fff",
            youTubePlay: "#000",
            youTubeText: "#fff",
            primary: e.tokensExperimental["color-primary"],
            primaryOp: "40%"
        };

      case "dark":
        return {
            adformTypeLarge: "#fff",
            adformBlueLarge: "#fff",
            adformGreenLarge: "#fff",
            adformYellowLarge: "#fff",
            adformBlue: "#0981bd",
            adformGreen: "#60c1a4",
            adformYellow: "#ebd769",
            clouderaLogo: "#fff",
            facebookBlue: "#fff",
            f: e.tokensExperimental["color-container-background-0"],
            thumbFacebookLogo: "#fff",
            impalaLogo: "#fff",
            instagramLogo: "#fff",
            linkedInLogo: "#fff",
            mariaDBLogo: "#fff",
            mongoLogo: "#fff",
            mongoLeaf: "#00ed64",
            mySQLTeal: "#00758f",
            mySQLTealLarge: "#fff",
            mySQLOrange: "#fff",
            oracleRed: "#fff",
            oracleDB: "#fff",
            sasLogo: "#fff",
            singleStoreText: "#fff",
            slackText: "#fff",
            slackBlue: "#fff",
            slackGreen: "#fff",
            slackRed: "#fff",
            slackYellow: "#fff",
            ghostOutline: "#fff",
            ghostFill: "#000",
            snowflakeLogo: "#fff",
            sparkText: "#fff",
            sparkStar: "#e26a1a",
            syniverseText: "#fff",
            teradataText: "#fff",
            teradataDot: "#fff",
            twitterBlue: "#1d9bf0",
            youTubeFrame: "#ff0000",
            youTubePlay: "#fff",
            youTubeText: "#fff",
            primary: e.tokensExperimental["color-primary"],
            primaryOp: "70%"
        };

      default:
        return {
            adformTypeLarge: "#737374",
            adformBlueLarge: "#0981bd",
            adformGreenLarge: "#60c1a4",
            adformYellowLarge: "#ebd769",
            adformBlue: "#0981bd",
            adformGreen: "#60c1a4",
            adformYellow: "#ebd769",
            clouderaLogo: "#f26622",
            facebookBlue: "#1877f2",
            f: "#fff",
            thumbFacebookLogo: "#1877f2",
            impalaLogo: "#266792",
            instagramLogo: "#000",
            linkedInLogo: "#0a66c2",
            mariaDBLogo: "#003545",
            mongoLogo: "#00684a",
            mongoLeaf: "#00684a",
            mySQLTeal: "#00758f",
            mySQLTealLarge: "#00758f",
            mySQLOrange: "#f29111",
            oracleRed: "#e30613",
            oracleDB: "#000",
            sasLogo: "#0766d1",
            singleStoreText: "#000",
            slackText: "#000",
            slackBlue: "#36c5f0",
            slackGreen: "#2eb67d",
            slackRed: "#e01e5a",
            slackYellow: "#ecb22e",
            ghostOutline: "#000",
            ghostFill: "#fff",
            snowflakeLogo: "#2bb5e9",
            sparkText: "#424143",
            sparkStar: "#e26a1a",
            syniverseText: "#000",
            teradataText: "#3d4952",
            teradataDot: "#ff6600",
            twitterBlue: "#1d9bf0",
            youTubeFrame: "#ff0000",
            youTubePlay: "#fff",
            youTubeText: "#282828",
            primary: e.tokensExperimental["color-primary"],
            primaryOp: "10%"
        };
    }
};

const _M = e => ({
    "--report-neutral-color": e.tokensExperimental["color-neutral"],
    "--report-theme-background": e.tokensExperimental["color-container-background-0"],
    "--report-theme-primary": e.tokensExperimental["color-primary"],
    "--report-text-color": e.tokensExperimental["color-text-neutral"],
    "--report-background-color": e.tokensExperimental["color-container-background-0"],
    "--data-color-one": e.tokensExperimental["color-dataviz-graph1"],
    "--data-color-two": e.tokensExperimental["color-dataviz-graph2"],
    "--data-color-three": e.tokensExperimental["color-dataviz-graph3"],
    "--data-color-four": e.tokensExperimental["color-dataviz-graph4"],
    "--data-color-five": e.tokensExperimental["color-dataviz-graph5"],
    "--data-color-six": e.tokensExperimental["color-dataviz-graph6"],
    "--data-color-seven": e.tokensExperimental["color-dataviz-graph7"],
    "--data-color-eight": e.tokensExperimental["color-dataviz-graph8"]
});

Dh("react-svg");

const DM = Dh("react-svg");

const LM = (e, t) => zT;

const TM = (e, t) => zT;

const RM = () => {
    const [e, t] = n({
        resolveSVG: LM,
        resolveIcon: TM
    });
    a((() => {
        let e = false;
        import("./chunk6.mjs").then((o => {
            if (e) return;
            t({
                resolveSVG: o.resolveSVG,
                resolveIcon: o.resolveIcon
            });
        })).catch((e => DM.error(e)));
        return () => {
            e = true;
        };
    }), []);
    return e;
};

var kM = "sas_components-Icon-Icon_icon";

var AM = {
    icon: kM
};

const MM = f(u((function e(o, n) {
    const a = C_();
    const r = {
        ...NM(a, {
            disabled: o.disabled,
            tokens: o.tokens,
            color: o.color
        }),
        ...o.theme?.(a)
    };
    return t(hM, {
        id: o.id,
        ref: n,
        style: {
            ...r,
            ...o.style
        },
        icon: o.icon,
        className: ke(AM.icon, o.className),
        testId: o.testId,
        type: "icon",
        role: o.role,
        onClick: e => {
            if (o.disabled) {
                e.stopPropagation();
                return;
            }
            o.onClick?.(e);
            o.onPress?.();
        },
        onKeyDown: e => {
            if (o.disabled) return;
            if (e.key === " " || e.key === "Enter") {
                o.onPress?.();
            }
        },
        onDoubleClick: e => {
            if (o.disabled) return;
            o.onDoubleClick?.(e);
        },
        ariaHidden: o.ariaHidden,
        tabIndex: o.tabIndex ?? (o.onPress ? 0 : undefined),
        ariaLabel: o.ariaLabel,
        tooltip: o.tooltip
    });
})));

const NM = (e, t) => {
    let o = t?.tokens ? t?.tokens().fg : undefined;
    const n = t?.tokens?.();
    if (t?.color) {
        switch (t?.color) {
          case "primary":
            o = e.tokensExperimental["color-icon-primary"];
            break;

          case "secondary":
            o = e.tokensExperimental["color-icon-secondary"];
            break;

          case "alert":
            o = e.tokensExperimental["color-status-icon-alert"];
            break;

          case "warning":
            o = e.tokensExperimental["color-status-icon-warning"];
            break;

          case "success":
            o = e.tokensExperimental["color-status-icon-success"];
            break;

          case "informational":
            o = e.tokensExperimental["color-status-icon-info"];
            break;

          case "neutral":
            o = e.tokensExperimental["color-status-icon-neutral"];
            break;

          default:
            o = undefined;
        }
    }
    let a = {
        "default-override-fg": undefined,
        "neutral-override-fg": undefined,
        "alert-override-fg": undefined,
        "warning-override-fg": undefined,
        "success-override-fg": undefined,
        "information-override-fg": undefined
    };
    if (t?.disabled) {
        a = {
            "default-override-fg": e.tokensExperimental["color-action-icon-standard-disabled"],
            "neutral-override-fg": e.tokensExperimental["color-action-icon-standard-disabled"],
            "alert-override-fg": e.tokensExperimental["color-action-icon-standard-disabled"],
            "warning-override-fg": e.tokensExperimental["color-action-icon-standard-disabled"],
            "success-override-fg": e.tokensExperimental["color-action-icon-standard-disabled"],
            "information-override-fg": e.tokensExperimental["color-action-icon-standard-disabled"]
        };
    }
    return {
        ...__({
            "default-override-fg": o ?? n?.["default-fg"] ?? n?.fg ?? a["default-override-fg"],
            "neutral-override-fg": o ?? n?.["neutral-fg"] ?? n?.fg ?? a["neutral-override-fg"],
            "alert-override-fg": o ?? n?.["alert-fg"] ?? n?.fg ?? a["alert-override-fg"],
            "warning-override-fg": o ?? n?.["warning-fg"] ?? n?.fg ?? a["warning-override-fg"],
            "success-override-fg": o ?? n?.["success-fg"] ?? n?.fg ?? a["success-override-fg"],
            "information-override-fg": o ?? n?.["information-fg"] ?? n?.fg ?? a["information-override-fg"]
        }, "icon"),
        ...!e.enableNovaTokens && OM(e, t)
    };
};

const OM = (e, t) => {
    let o = t?.tokens ? t?.tokens().fg : undefined;
    const n = t?.tokens?.();
    if (t?.color) {
        switch (t?.color) {
          case "primary":
            o = e.c.primary;
            break;

          case "secondary":
            o = e.c.secondary;
            break;

          case "alert":
            o = e.stateStatusContent.alert.fg;
            break;

          case "warning":
            o = e.stateStatusContent.warning.fg;
            break;

          case "success":
            o = e.stateStatusContent.success.fg;
            break;

          case "informational":
            o = e.stateStatusContent.informational.fg;
            break;

          case "neutral":
            o = e.c.neutral;
            break;

          default:
            o = undefined;
        }
    }
    let a = {
        "default-override-fg": undefined,
        "neutral-override-fg": undefined,
        "alert-override-fg": undefined,
        "warning-override-fg": undefined,
        "success-override-fg": undefined,
        "information-override-fg": undefined
    };
    if (t?.disabled) {
        a = {
            "default-override-fg": e.stateStandard.disabled.fg,
            "neutral-override-fg": e.stateStandard.disabled.fg,
            "alert-override-fg": e.stateStandard.disabled.fg,
            "warning-override-fg": e.stateStandard.disabled.fg,
            "success-override-fg": e.stateStandard.disabled.fg,
            "information-override-fg": e.stateStandard.disabled.fg
        };
    }
    return __({
        "default-override-fg": o ?? n?.["default-fg"] ?? n?.fg ?? a["default-override-fg"],
        "neutral-override-fg": o ?? n?.["neutral-fg"] ?? n?.fg ?? a["neutral-override-fg"],
        "alert-override-fg": o ?? n?.["alert-fg"] ?? n?.fg ?? a["alert-override-fg"],
        "warning-override-fg": o ?? n?.["warning-fg"] ?? n?.fg ?? a["warning-override-fg"],
        "success-override-fg": o ?? n?.["success-fg"] ?? n?.fg ?? a["success-override-fg"],
        "information-override-fg": o ?? n?.["information-fg"] ?? n?.fg ?? a["information-override-fg"]
    }, "icon");
};

var PM = "sas_components-Button-__internal__-BaseButton_button";

var BM = "sas_components-Button-__internal__-BaseButton_round-icon";

var zM = "sas_components-Button-__internal__-BaseButton_small";

var FM = "sas_components-Button-__internal__-BaseButton_icon-inner";

var jM = "sas_components-Button-__internal__-BaseButton_disabled";

var VM = "sas_components-Button-__internal__-BaseButton_active";

var HM = "sas_components-Button-__internal__-BaseButton_high-contrast";

var UM = "sas_components-Button-__internal__-BaseButton_text";

var GM = "sas_components-Button-__internal__-BaseButton_icon-with-text";

var KM = "sas_components-Button-__internal__-BaseButton_normal-button";

var WM = "sas_components-Button-__internal__-BaseButton_normal-button-with-text";

var $M = {
    button: PM,
    roundIcon: BM,
    small: zM,
    iconInner: FM,
    disabled: jM,
    active: VM,
    highContrast: HM,
    text: UM,
    iconWithText: GM,
    normalButton: KM,
    normalButtonWithText: WM
};

const YM = 400;

const qM = 75;

const XM = fb(tt);

const ZM = u((function e({enableContinuousPress: o = false, children: r, className: i, disabled: l = false, focusable: d, icon: u, onBlur: m, onClick: p, onPress: f, onMouseDown: g, onMouseUp: h, onMouseEnter: b, onMouseMove: v, onMouseLeave: y, onKeyDown: x, onKeyUp: S, style: w, testId: C, text: E, theme: I, tokens: _, type: D, variant: L, ariaLabel: T, tooltip: R, ariaLabelledBy: k, ariaDescribedBy: A, ...M}, N) {
    const [O, P] = n(false);
    const B = L || oN.Standard;
    const z = c(null);
    const F = XM();
    const j = C_();
    const {density: V} = YA();
    const H = {
        ...eN(j, {
            disabled: l,
            variant: B,
            tokens: _,
            density: V
        }),
        ...I?.(j, {
            disabled: l
        })
    };
    const U = {
        ...H,
        ...w
    };
    let G;
    if (B === oN.Small || B === oN.PrimarySmall || B === oN.LightSmall || B === oN.SmallIcon) {
        G = $M.small;
    } else if (B === oN.RoundIcon) {
        G = $M.roundIcon;
    } else {
        G = $M.button;
    }
    const K = B === oN.Standard || B === oN.Small || B === oN.Primary || B === oN.PrimarySmall;
    const W = K && E;
    const $ = JA();
    const {...Y} = u ? $(u) : {};
    let q, X;
    if (u && !E) {
        q = R || (R === "" ? undefined : Y.tooltip);
        X = T || R || (R === "" && T === "" ? undefined : Y.ariaLabel);
    } else {
        q = R ?? "";
        X = T ?? (R === undefined ? "" : `${E}, ${R}`);
    }
    const Z = c(null);
    const J = WA({
        tooltip: q,
        truncateRef: Z
    });
    const Q = c({
        timeoutId: -1,
        disabled: l,
        onPress: f
    });
    Q.current.disabled = l;
    Q.current.onPress = f;
    const ee = e => {
        if (o && !Q.current.disabled) {
            Q.current.onPress?.(Q.current.event);
            Q.current.timeoutId = window.setTimeout((() => {
                ee(qM);
            }), e);
        }
    };
    const te = () => {
        if (Q.current.timeoutId >= 0) {
            clearTimeout(Q.current.timeoutId);
            Q.current.timeoutId = -1;
        }
    };
    const oe = s((e => {
        z.current = e;
        D_(N, e);
    }), [ N ]);
    a((() => () => te()), []);
    const ne = XA();
    a((() => {
        if (document.activeElement === z.current) {
            const e = X || q || E;
            const t = q && !X?.startsWith(q) ? q : "";
            const o = l ? F("disabledButton.msg", {
                label: e,
                tooltip: t
            }) : F("enabledButton.msg", {
                label: e,
                tooltip: t
            });
            ne?.notify(o);
        }
    }), [ l ]);
    return t("button", Ee({}, M, {
        "aria-disabled": l,
        "aria-label": X,
        "aria-labelledby": k,
        "aria-describedby": A,
        className: ke(i, G, !l && O && $M.active, l && $M.disabled, j.themeVariant === "high-contrast" ? $M.highContrast : undefined, K && $M.normalButton, W && $M.normalButtonWithText),
        "data-testid": C,
        ref: e => {
            oe(e);
            J(e);
        },
        style: U,
        tabIndex: d ?? true ? undefined : -1,
        title: q,
        type: D || "button",
        onBlur: e => {
            m?.(e);
            P(false);
        },
        onClick: e => {
            if (cD() !== sD.Firefox || e.nativeEvent.detail !== 0) {
                p?.(e);
                if (!l && !o) {
                    D !== "submit" && e.preventDefault();
                    f?.(e);
                }
            }
        },
        onKeyDown: e => {
            const t = e.key === "Enter" || e.key === " ";
            const n = e.altKey || e.ctrlKey || e.shiftKey || e.metaKey;
            const a = t && !n;
            if (t && D !== "submit") {
                e.preventDefault();
            }
            if (a) {
                if (l) {
                    e.stopPropagation();
                    return;
                }
                x?.(e);
                PA(e);
                P(true);
                if (o) {
                    f?.(e);
                }
            } else {
                x?.(e);
            }
        },
        onKeyUp: e => {
            const t = e.key === "Enter" || e.key === " ";
            const n = e.altKey || e.ctrlKey || e.shiftKey || e.metaKey;
            const a = t && !n;
            if (t) {
                e.preventDefault();
            }
            if (a) {
                if (l) {
                    e.stopPropagation();
                    return;
                }
                if (O) {
                    P(false);
                    if (!o) {
                        f?.(e);
                    }
                }
            }
            S?.(e);
        },
        onMouseDown: e => {
            g?.(e);
            if (!l && o && (cD() !== sD.Firefox || e.nativeEvent.detail !== 0) && e.button === 0) {
                Q.current.event = e;
                ee(YM);
            }
            if (bD() === fD.Mac) {
                const t = cD();
                if (t === sD.Firefox || t === sD.Safari) {
                    z.current?.focus();
                    e.preventDefault();
                }
            }
        },
        onMouseUp: e => {
            h?.(e);
            e.preventDefault();
            te();
        },
        onMouseLeave: e => {
            y?.(e);
            e.preventDefault();
            te();
        },
        onMouseEnter: e => {
            b?.(e);
        },
        onMouseMove: e => {
            v?.(e);
        }
    }), u && t(MM, Ee({}, u, {
        className: ke(E && $M.iconWithText, u.className, $M.iconInner),
        tooltip: "",
        ariaLabel: "",
        ariaHidden: true,
        disabled: false
    })), t("span", {
        className: $M.text,
        ref: Z
    }, E), r);
}));

const JM = Dh("Button");

const QM = u((function e(o, n) {
    if (qI(o.icon) && (qI(o.text) || o.text.trim() === "")) {
        JM.error("An icon or text must be set, and text cannot be blank.");
    }
    return t(ZM, Ee({}, o, {
        ref: n
    }));
}));

const eN = (e, {disabled: t, tokens: o, variant: n, density: a}) => {
    let r;
    const s = new Set([ oN.Primary, oN.PrimarySmall, oN.PrimaryLight, oN.PrimaryIcon ]);
    const i = {
        "hover-bd": "var(--button-bd)",
        "hover-bg": "var(--button-bg)",
        "hover-fg": "var(--button-fg)",
        "active-bd": "var(--button-bd)",
        "active-bg": "var(--button-bg)",
        "active-fg": "var(--button-fg)"
    };
    if (n === oN.Primary || n === oN.PrimarySmall) {
        r = {
            fg: e.tokensExperimental["color-action-text-emphasis-normal"],
            bg: e.tokensExperimental["color-action-background-emphasis-normal"],
            bd: e.tokensExperimental["color-action-border-emphasis-normal"],
            "hover-fg": e.tokensExperimental["color-action-text-emphasis-hover"],
            "hover-bg": e.tokensExperimental["color-action-background-emphasis-hover"],
            "hover-bd": e.tokensExperimental["color-action-border-emphasis-hover"],
            "active-fg": e.tokensExperimental["color-action-text-emphasis-selected"],
            "active-bg": e.tokensExperimental["color-action-background-emphasis-selected"],
            "active-bd": e.tokensExperimental["color-action-border-emphasis-selected"],
            ...t ? {
                fg: e.tokensExperimental["color-action-text-emphasis-disabled"],
                bg: e.tokensExperimental["color-action-background-emphasis-disabled"],
                bd: e.tokensExperimental["color-action-border-emphasis-disabled"],
                ...i
            } : {}
        };
    } else if (n === oN.PrimaryLight || n === oN.PrimaryIcon) {
        r = {
            fg: e.themeVariant === "light" ? e.tokensExperimental["color-text-primary-inverse"] : e.tokensExperimental["color-text-primary"],
            bg: e.tokensExperimental["color-action-background-subtle-normal"],
            bd: e.tokensExperimental["color-action-border-subtle-normal"],
            "hover-fg": e.tokensExperimental["color-action-text-emphasis-hover"],
            "hover-bg": e.tokensExperimental["color-action-background-emphasis-hover"],
            "hover-bd": e.tokensExperimental["color-action-border-emphasis-hover"],
            "active-fg": e.tokensExperimental["color-action-text-emphasis-selected"],
            "active-bg": e.tokensExperimental["color-action-background-emphasis-selected"],
            "active-bd": e.tokensExperimental["color-action-border-emphasis-selected"],
            ...t ? {
                fg: e.tokensExperimental["color-action-text-emphasis-disabled"],
                bg: e.tokensExperimental["color-action-background-emphasis-disabled"],
                bd: e.tokensExperimental["color-action-border-emphasis-disabled"],
                ...i
            } : {}
        };
    } else if (n === oN.Light || n === oN.Icon || n === oN.LightSmall || n === oN.SmallIcon) {
        r = {
            fg: e.tokensExperimental["color-action-text-subtle-normal"],
            bg: e.tokensExperimental["color-action-background-subtle-normal"],
            bd: e.tokensExperimental["color-action-border-subtle-normal"],
            "hover-fg": e.tokensExperimental["color-action-text-subtle-hover"],
            "hover-bg": e.tokensExperimental["color-action-background-subtle-hover"],
            "hover-bd": e.tokensExperimental["color-action-border-subtle-hover"],
            "active-fg": e.tokensExperimental["color-action-text-subtle-selected"],
            "active-bg": e.tokensExperimental["color-action-background-subtle-selected"],
            "active-bd": e.tokensExperimental["color-action-border-subtle-selected"],
            ...t ? {
                fg: e.tokensExperimental["color-action-text-subtle-disabled"],
                bg: e.tokensExperimental["color-action-background-subtle-disabled"],
                bd: e.tokensExperimental["color-action-border-subtle-disabled"],
                ...i
            } : {}
        };
    } else {
        r = {
            fg: e.tokensExperimental["color-action-text-standard-normal"],
            bg: e.tokensExperimental["color-action-background-standard-normal"],
            bd: e.tokensExperimental["color-action-border-standard-normal"],
            "hover-fg": e.tokensExperimental["color-action-text-standard-hover"],
            "hover-bg": e.tokensExperimental["color-action-background-standard-hover"],
            "hover-bd": e.tokensExperimental["color-action-border-standard-hover"],
            "active-fg": e.tokensExperimental["color-action-text-standard-selected"],
            "active-bg": e.tokensExperimental["color-action-background-standard-selected"],
            "active-bd": e.tokensExperimental["color-action-border-standard-selected"],
            ...t ? {
                fg: e.tokensExperimental["color-action-text-standard-disabled"],
                bg: e.tokensExperimental["color-action-background-standard-disabled"],
                bd: e.tokensExperimental["color-action-border-standard-disabled"],
                ...i
            } : {}
        };
    }
    let l;
    if (s.has(n) && e.themeVariant === "light") {
        l = "var(--focus-dark-bg)";
    } else {
        l = "var(--focus-light-bg)";
    }
    const c = "calc(-2px + calc(-1 * var(--focus-width)))";
    return {
        ...__({
            ...r,
            ...o ? o({
                disabled: t,
                state: nN.Normal
            }) : undefined,
            ...{
                "animation-duration": e.tokensExperimental["duration-100"],
                "animation-timing-function": e.tokensExperimental["ease-in"],
                "animation-duration-hover": e.tokensExperimental["duration-300"],
                "animation-timing-function-hover": e.tokensExperimental["ease-in-out"],
                "font-size": a === "high" ? e.tokensExperimental["font-size-body-text-s"] : e.tokensExperimental["font-size-body-text-m"],
                "font-size-s": e.tokensExperimental["font-size-body-text-s"],
                "focus-outline": l,
                "focus-outline-active": e.themeVariant === "high-contrast" ? "var(--focus-dark-bg)" : l,
                "focus-outline-offset": c,
                "border-radius-xs": e.tokensExperimental["size-border-radius-xs"]
            }
        }, "button"),
        ...__({
            ...o ? o({
                disabled: t,
                state: nN.Hover
            }) : undefined
        }, "button-hover"),
        ...__({
            ...o ? o({
                disabled: t,
                state: nN.Active
            }) : undefined
        }, "button-active"),
        ...__({
            m: e.tokensExperimental["space-base-m"],
            s: e.tokensExperimental["space-base-s"],
            xs: e.tokensExperimental["space-base-xs"],
            xxs: e.tokensExperimental["space-base-xxs"],
            pd: a === "high" ? e.tokensExperimental["space-squish-xs"] : e.tokensExperimental["space-squish-s"],
            "pd-inline": a === "high" ? e.tokensExperimental["space-base-s"] : e.tokensExperimental["space-base-m"],
            "min-block-size": a === "high" ? 0 : "1.75rem"
        }, "button-spacing"),
        ...__({
            height: a === "high" ? e.tokensExperimental["font-size-body-text-s"] : e.tokensExperimental["font-size-body-text-m"],
            width: a === "high" ? e.tokensExperimental["font-size-body-text-s"] : e.tokensExperimental["font-size-body-text-m"]
        }, "icon"),
        ...!e.enableNovaTokens && tN(e, {
            disabled: t,
            tokens: o,
            variant: n
        })
    };
};

const tN = (e, {disabled: t, tokens: o, variant: n}) => {
    let a;
    if (n === oN.Primary || n === oN.PrimarySmall) {
        a = e.statePrimary;
    } else if (n === oN.PrimaryLight || n === oN.PrimaryIcon) {
        a = e.statePrimaryContent;
    } else if (n === oN.Light || n === oN.Icon || n === oN.LightSmall || n === oN.SmallIcon) {
        a = e.stateStandardContent;
    } else {
        a = e.stateStandard;
    }
    return {
        ...__({
            ...!t ? a.normal : a.disabled,
            ...o ? o({
                disabled: t,
                state: nN.Normal
            }) : undefined,
            ...{
                "font-size": e.font.size.m,
                "font-size-s": e.font.size.s
            }
        }, "button"),
        ...__({
            ...!t ? a.hover : a.disabled,
            ...o ? o({
                disabled: t,
                state: nN.Hover
            }) : undefined
        }, "button-hover"),
        ...__({
            ...!t ? a.active : a.disabled,
            ...o ? o({
                disabled: t,
                state: nN.Active
            }) : undefined
        }, "button-active")
    };
};

let oN = function(e) {
    e["Standard"] = "button";
    e["Small"] = "small";
    e["Light"] = "light";
    e["Primary"] = "primary";
    e["PrimarySmall"] = "primary-small";
    e["PrimaryLight"] = "primary-light";
    e["PrimaryIcon"] = "primary-icon";
    e["Icon"] = "icon";
    e["RoundIcon"] = "round-icon";
    e["LightSmall"] = "light-small";
    e["SmallIcon"] = "small-icon";
    return e;
}({});

let nN = function(e) {
    e["Normal"] = "normal";
    e["Hover"] = "hover";
    e["Active"] = "active";
    return e;
}({});

var aN = {
    horizontal: "sas_components-Layouts-Flow-Flow_flow_horizontal",
    vertical: "sas_components-Layouts-Flow-Flow_flow_vertical"
};

var rN = "sas_components-Layouts-Flow-Flow_wrap";

var sN = {
    flow: aN,
    wrap: rN
};

const iN = u((function e(o, n) {
    const {className: a, style: r, wrap: s, spacing: i, orientation: l, testId: c, ...d} = o;
    const u = C_();
    const m = i ?? "m";
    const p = l ?? "horizontal";
    const f = I_({
        "gap-size": u.spacing.core[m]
    }, "flow");
    return t("div", Ee({
        "data-testid": c
    }, d, {
        ref: n,
        className: ke(s && sN.wrap, sN.flow[p], a),
        style: {
            ...f,
            ...r
        }
    }), o.children);
}));

const lN = e => {
    const t = XA();
    const o = k_(e.isOpen);
    const n = !e.isOpen && o;
    a((() => {
        if (n && e.message) {
            t?.notify(e.message);
        }
    }), [ t, n, e.message ]);
};

var cN = "sas_components-BusyStateIndicator-BusyStateAnimationElement_bar-container";

var dN = "sas_components-BusyStateIndicator-BusyStateAnimationElement_progress-bar";

var uN = {
    barContainer: cN,
    progressBar: dN
};

const mN = fb(ot);

const pN = u((function e(o, n) {
    const a = mN();
    const r = C_();
    const s = fN(r, {
        tokens: o.tokens
    });
    return t(iN, {
        spacing: "s",
        tabIndex: o.tabIndex ?? 0,
        ref: n,
        className: ke(uN.barContainer, o.className),
        style: {
            ...s,
            ...o.style
        },
        "aria-label": o.ariaLabel ?? a("busyStateIndicatorAnimation.default.aria"),
        "aria-describedby": o.ariaDescribedBy,
        role: "img",
        title: a("busyStateIndicatorAnimation.default.tooltip.label")
    }, t("div", {
        className: uN.progressBar
    }));
}));

const fN = (e, t) => ({
    ...__({
        bg: e.tokensExperimental["color-primary"],
        "animation-start": e.tokensExperimental["color-primary"],
        "animation-end": e.tokensExperimental["color-container-background-0"],
        width: e.tokensExperimental["size-container-xs"],
        "border-radius": e.tokensExperimental["size-border-radius-xxs"],
        height: "4px",
        ...t?.tokens?.() ?? {}
    }, "busy-state-bar"),
    ...!e.enableNovaTokens && gN(e, t)
});

const gN = (e, t) => {
    switch (e.baseReportThemeName) {
      case "highcontrast2018":
      case "highcontrast2017":
        return {
            ...__({
                bg: e.c.hcBusy,
                "animation-start": e.c.colorPrimary,
                "animation-end": e.c.white,
                ...t?.tokens?.() ?? {}
            }, "busy-state-bar")
        };
    }
    return {
        ...__({
            bg: e.stateStatusContent.informational.fg,
            "animation-start": e.c.colorPrimary,
            "animation-end": e.c.white,
            ...t?.tokens?.() ?? {}
        }, "busy-state-bar")
    };
};

var hN = "sas_components-BusyStateIndicator-BusyStateIndicator_overlay";

var bN = "sas_components-BusyStateIndicator-BusyStateIndicator_state";

var vN = "sas_components-BusyStateIndicator-BusyStateIndicator_state-text";

var yN = "sas_components-BusyStateIndicator-BusyStateIndicator_container";

var xN = "sas_components-BusyStateIndicator-BusyStateIndicator_children-container";

var SN = "sas_components-BusyStateIndicator-BusyStateIndicator_fill-parent-container";

var wN = "sas_components-BusyStateIndicator-BusyStateIndicator_button-container";

var CN = {
    overlay: hN,
    state: bN,
    stateText: vN,
    container: yN,
    childrenContainer: xN,
    fillParentContainer: SN,
    buttonContainer: wN
};

const EN = fb(ot);

const IN = MA("BusyStateIndicator-text");

const _N = e => {
    if (e === undefined || e === null) return 300;
    return e > 0 ? e : 0;
};

const DN = u((function e(o, r) {
    const s = EN();
    const i = XA();
    const {text: l, buttonText: d, onButtonPress: u, active: m, children: p, testId: f} = o;
    const g = IN();
    const h = _N(o.delay);
    const [b, v] = n(false);
    const y = c(null);
    const x = c(null);
    const S = c(null);
    const w = c(null);
    const C = c(null);
    const E = c(false);
    const I = C_();
    const _ = !!m && (b || h === 0);
    const D = {
        ...LN(I, {
            tokens: o.tokens
        }),
        ...o.theme?.(I)
    };
    a((() => {
        if (!m) {
            v(false);
            return;
        }
        const e = setTimeout((() => v(true)), h);
        return () => clearTimeout(e);
    }), [ m ]);
    const L = o.activeMsg ?? s("active.aria");
    a((() => {
        if (_) {
            if (!C.current) {
                C.current = document.activeElement;
            }
            if (!o.disableAutoFocus && x.current?.contains(document.activeElement)) {
                S.current?.focus();
            } else if (L) {
                i?.notify(L);
            }
        } else if (C.current) {
            if (!o.disableAutoFocus) {
                C.current?.focus?.();
            }
            C.current = null;
        }
    }), [ i, _, L, o.disableAutoFocus ]);
    const T = c(o.onActive);
    T.current = o.onActive;
    a((() => {
        if (_) {
            T.current?.();
        }
    }), [ _ ]);
    lN({
        isOpen: _,
        message: o.dismissedMsg ?? s("dismissed.aria")
    });
    if (!_ && !y.current?.contains(document.activeElement)) {
        C.current = null;
    }
    const R = t(iN, {
        className: ke(CN.state, o.className),
        style: {
            ...D,
            ...o.style
        },
        "data-testid": f,
        ref: y,
        orientation: "vertical"
    }, t(pN, {
        ref: e => {
            D_(o.busyStateAnimationRef, e);
            S.current = e;
        },
        ariaLabel: o.ariaLabel,
        ariaDescribedBy: l ? g : undefined,
        tokens: o.animationTokens
    }), l ? t("span", {
        className: CN.stateText,
        id: g
    }, l) : null, d ? t("div", {
        className: CN.buttonContainer
    }, t(QM, {
        variant: oN.Small,
        onPress: u,
        text: d
    })) : null);
    if (!p) {
        return _ ? R : null;
    }
    return t("div", {
        className: ke(CN.container, o.fillParentContainer && CN.fillParentContainer, o.containerClassName),
        style: {
            ...D,
            ...o.containerStyle
        },
        ref: r
    }, _ ? t("span", {
        tabIndex: 0,
        ref: w,
        onFocus: () => {
            if (!E.current) {
                S.current?.focus();
            }
        },
        "data-autofocus-inside": "true"
    }) : null, t("div", {
        className: CN.childrenContainer,
        ref: x
    }, p), _ ? t("div", {
        className: ke(CN.overlay, o.overlayClassName),
        style: o.overlayStyle,
        onKeyDown: e => {
            if (e.key === "Tab" && e.shiftKey && e.target === S.current) {
                E.current = true;
                w.current?.focus();
                E.current = false;
            }
        }
    }, R) : null);
}));

const LN = (e, t) => ({
    ...__({
        "font-size-m": e.tokensExperimental["font-size-body-text-m"],
        "overlay-bg": t?.tokens?.().bg ?? Jv(e.tokensExperimental["color-container-background-0"], .9),
        fg: t?.tokens?.().fg ?? e.tokensExperimental["color-body-text"],
        pd: e.tokensExperimental["space-base-s"]
    }, "busy-state"),
    ...__({
        bg: e.tokensExperimental["color-container-background-0"]
    }, "button-container"),
    ...!e.enableNovaTokens && TN(e, t)
});

const TN = (e, t) => {
    let o = "";
    let n = "";
    switch (e.themeVariant) {
      case "dark":
        o = Jv(e.c.p_2, .6);
        n = e.c.white;
        break;

      case "high-contrast":
        o = Jv(e.c.black, .6);
        n = e.c.white;
        break;

      default:
        o = Jv(e.c.white, .8);
        n = e.c.n_3;
    }
    return {
        ...__({
            "font-size-m": e.font.size.m,
            "overlay-bg": t?.tokens?.().bg ?? o,
            fg: t?.tokens?.().fg ?? n
        }, "busy-state"),
        ...__({
            bg: e.backgrounds.panes.bg
        }, "button-container")
    };
};

function RN(e) {
    const t = c(e);
    a((() => {
        t.current = e;
    }));
    const o = c();
    a((() => () => {
        o.current = undefined;
    }), []);
    if (o.current === undefined) {
        o.current = new ResizeObserver((function e(o, n) {
            const a = t.current;
            a(o, n);
        }));
    }
    return o.current;
}

function kN(e, t) {
    const o = RN((function([t]) {
        setTimeout((() => {
            if (a.current) {
                e(t);
            }
        }), 0);
    }));
    const n = t?.box;
    const a = c(null);
    return [ s((e => {
        if (e) {
            if (e !== a.current && a.current) {
                o.unobserve(a.current);
            }
            a.current = e;
            o.observe(a.current, {
                box: n
            });
        } else {
            if (a.current) {
                o.unobserve(a.current);
            }
            a.current = null;
        }
    }), [ o, n ]), s((() => a.current), []) ];
}

const AN = /[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02BB-\u02C1\u02D0\u02D1\u02E0-\u02E4\u02EE\u0370-\u0373\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0482\u048A-\u052F\u0531-\u0556\u0559-\u0589\u0903-\u0939\u093B\u093D-\u0940\u0949-\u094C\u094E-\u0950\u0958-\u0961\u0964-\u0980\u0982\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C0\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09FA\u09FC\u09FD\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A40\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A76\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC0\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0\u0AE1\u0AE6-\u0AF0\u0AF9\u0B02\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C41-\u0C44\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C77\u0C7F\u0C80\u0C82-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D4F\u0D54-\u0D61\u0D66-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E4F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F17\u0F1A-\u0F34\u0F36\u0F38\u0F3E-\u0F47\u0F49-\u0F6C\u0F7F\u0F85\u0F88-\u0F8C\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE-\u0FDA\u1000-\u102C\u1031\u1038\u103B\u103C\u103F-\u1057\u105A-\u105D\u1061-\u1070\u1075-\u1081\u1083\u1084\u1087-\u108C\u108E-\u109C\u109E-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1360-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u167F\u1681-\u169A\u16A0-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1735\u1736\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17B6\u17BE-\u17C5\u17C7\u17C8\u17D4-\u17DA\u17DC\u17E0-\u17E9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A19\u1A1A\u1A1E-\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1A80-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1B04-\u1B33\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B4B\u1B50-\u1B6A\u1B74-\u1B7C\u1B82-\u1BA1\u1BA6\u1BA7\u1BAA\u1BAE-\u1BE5\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1BFC-\u1C2B\u1C34\u1C35\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200E\u202A\u202D\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u214F\u2160-\u2188\u2336-\u237A\u2395\u249C-\u24E9\u26AC\u2800-\u28FF\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u302E\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31BA\u31F0-\u321C\u3220-\u324F\u3260-\u327B\u327F-\u32B0\u32C0-\u32CB\u32D0-\u3376\u337B-\u33DD\u33E0-\u33FE\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA60C\uA610-\uA62B\uA640-\uA66E\uA680-\uA69D\uA6A0-\uA6EF\uA6F2-\uA6F7\uA722-\uA787\uA789-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA824\uA827\uA830-\uA837\uA840-\uA873\uA880-\uA8C3\uA8CE-\uA8D9\uA8F2-\uA8FE\uA900-\uA925\uA92E-\uA946\uA952\uA953\uA95F-\uA97C\uA983-\uA9B2\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA2F\uAA30\uAA33\uAA34\uAA40-\uAA42\uAA44-\uAA4B\uAA4D\uAA50-\uAA59\uAA5C-\uAA7B\uAA7D-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAAEB\uAAEE-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB67\uAB70-\uABE4\uABE6\uABE7\uABE9-\uABEC\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uE000-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD00\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD8D\uDD8E\uDDD0-\uDDFC\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDF9F-\uDFC3\uDFC8-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD6F\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD804[\uDC00\uDC02-\uDC37\uDC47-\uDC4D\uDC66-\uDC6F\uDC82-\uDCB2\uDCB7\uDCB8\uDCBB-\uDCC1\uDCCD\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD2C\uDD36-\uDD46\uDD50-\uDD72\uDD74-\uDD76\uDD82-\uDDB5\uDDBF-\uDDC8\uDDCD\uDDD0-\uDDDF\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2E\uDE32\uDE33\uDE35\uDE38-\uDE3D\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9\uDEB0-\uDEDE\uDEE0-\uDEE2\uDEF0-\uDEF9\uDF02\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC37\uDC40\uDC41\uDC45\uDC47-\uDC59\uDC5B\uDC5D\uDC5F\uDC80-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDCC4-\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB1\uDDB8-\uDDBB\uDDBE\uDDC1-\uDDDB\uDE00-\uDE32\uDE3B\uDE3C\uDE3E\uDE41-\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEAC\uDEAE\uDEAF\uDEB6\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF20\uDF21\uDF26\uDF30-\uDF3F]|[\uD806\uD80D][\uDC00-\uDC2E\uDC38\uDC3B\uDCA0-\uDCF2\uDCFF\uDDA0-\uDDA7\uDDAA-\uDDD3\uDDDC-\uDDDF\uDDE1-\uDDE4\uDE00\uDE07\uDE08\uDE0B-\uDE32\uDE39\uDE3A\uDE3F-\uDE46\uDE50\uDE57\uDE58\uDE5C-\uDE89\uDE97\uDE9A-\uDEA2\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2F\uDC3E-\uDC45\uDC50-\uDC6C\uDC70-\uDC8F\uDCA9\uDCB1\uDCB4\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD93\uDD94\uDD96\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDEF5-\uDEF8\uDFC0-\uDFD4\uDFFF]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F\uDED0-\uDEED\uDEF5\uDF00-\uDF2F\uDF37-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE9A\uDF00-\uDF4A\uDF50-\uDF87\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C\uDC9F]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD72\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEDA\uDEDC-\uDF14\uDF16-\uDF4E\uDF50-\uDF88\uDF8A-\uDFC2\uDFC4-\uDFCB]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85-\uDE8B]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDD4F\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83C[\uDD10-\uDD2E\uDD30-\uDD69\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|[\uDBBF\uDBFF][\uDC00-\uDFFD]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;

const MN = /[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0600-\u0605\u0608\u060B\u060D\u061B\u061C\u061E-\u064A\u0660-\u0669\u066B-\u066F\u0671-\u06D5\u06DD\u06E5\u06E6\u06EE\u06EF\u06FA-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08E2\u200F\u202B\u202E\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC57-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD3F\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE50-\uDE58\uDE60-\uDE9F\uDEC0-\uDEE4\uDEEB-\uDEF6\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF59\uDFE0-\uDFF6]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59\uDD5E\uDD5F]|\uD83B[\uDC71-\uDCB4\uDD01-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]/;

const NN = /[!-@\[-\x60\x7B-\x84\x86-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02B9\u02BA\u02C2-\u02CF\u02D2-\u02DF\u02E5-\u02ED\u02EF-\u036F\u0374\u0375\u037E\u0384\u0385\u0387\u03F6\u0483-\u0489\u058A\u058D-\u058F\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0600-\u0607\u0609\u060A\u060C\u060E-\u061A\u064B-\u066C\u0670\u06D6-\u06E4\u06E7-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07F6-\u07F9\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09F2\u09F3\u09FB\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AF1\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0BF3-\u0BFA\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C78-\u0C7E\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E3F\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39-\u0F3D\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1390-\u1399\u1400\u169B\u169C\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DB\u17DD\u17F0-\u17F9\u1800-\u180E\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1940\u1944\u1945\u19DE-\u19FF\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u200B-\u200D\u2010-\u2027\u202F-\u205E\u2060-\u2064\u206A-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BF\u20D0-\u20F0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u2150-\u215F\u2189-\u218B\u2190-\u2335\u237B-\u2394\u2396-\u2426\u2440-\u244A\u2460-\u249B\u24EA-\u26AB\u26AD-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B98-\u2BFF\u2CE5-\u2CEA\u2CEF-\u2CF1\u2CF9-\u2CFF\u2D7F\u2DE0-\u2E4F\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3001-\u3004\u3008-\u3020\u302A-\u302D\u3030\u3036\u3037\u303D-\u303F\u3099-\u309C\u30A0\u30FB\u31C0-\u31E3\u321D\u321E\u3250-\u325F\u327C-\u327E\u32B1-\u32BF\u32CC-\u32CF\u3377-\u337A\u33DE\u33DF\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA60D-\uA60F\uA66F-\uA67F\uA69E\uA69F\uA6F0\uA6F1\uA700-\uA721\uA788\uA802\uA806\uA80B\uA825\uA826\uA828-\uA82B\uA838\uA839\uA874-\uA877\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFB29\uFD3E\uFD3F\uFDFD\uFE00-\uFE19\uFE20-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD]|\uD800[\uDD01\uDD40-\uDD8C\uDD90-\uDD9B\uDDA0\uDDFD\uDEE0-\uDEFB\uDF76-\uDF7A]|\uD802[\uDD1F\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6\uDF39-\uDF3F]|\uD803[\uDD24-\uDD27\uDD30-\uDD39\uDE60-\uDE7E\uDF46-\uDF50]|[\uD804\uDB40][\uDC01\uDC38-\uDC46\uDC52-\uDC65\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDE60-\uDE6C\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE06\uDE09\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4\uDFD5-\uDFF1]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE2]|\uD82F[\uDC9D\uDC9E\uDCA0-\uDCA3]|\uD834[\uDD67-\uDD69\uDD73-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE00-\uDE45\uDF00-\uDF56]|\uD835[\uDEDB\uDF15\uDF4F\uDF89\uDFC3\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF\uDEFF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83B[\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDD0C\uDD2F\uDD6A-\uDD6C\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED5\uDEE0-\uDEEC\uDEF0-\uDEFA\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD00-\uDD0B\uDD0D-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95]/;

const ON = /[\t-\r\x20\x85\u1680\u2000-\u200A\u2028\u2029\u205F\u3000]/;

const PN = e => {
    for (let t = 0; t < e.length; t++) {
        const o = e.charAt(t);
        if (o.match(ON)) {
            continue;
        }
        if (o.match(NN)) {
            return true;
        } else {
            return false;
        }
    }
    return false;
};

const BN = e => {
    let t = e.length;
    while (t--) {
        const o = e.charAt(t);
        if (o.match(ON)) {
            continue;
        }
        if (o.match(NN)) {
            return true;
        } else {
            return false;
        }
    }
    return false;
};

const zN = e => PN(e) || BN(e);

const FN = e => {
    let t = "neutral";
    for (let o = 0; o < e.length; o++) {
        const n = e.charAt(o);
        if (n.match(ON) || n.match(NN)) {
            continue;
        }
        if (n.match(MN)) {
            t = "rtl";
            break;
        }
        if (n.match(AN)) {
            t = "ltr";
            break;
        }
    }
    return t;
};

const jN = (e, t) => {
    const o = FN(e);
    if (o !== "neutral" && t !== o && zN(e)) {
        return true;
    }
    return false;
};

const VN = e => `‪${e}‬`;

const HN = e => `‫${e}‬`;

const UN = (e, t) => {
    const o = jN(e, t);
    return !o ? e : t === "ltr" ? HN(e) : VN(e);
};

const GN = () => {
    const e = ay();
    return s((t => UN(t, e ? "rtl" : "ltr")), [ e ]);
};

const KN = (e, t) => {
    const o = FN(e);
    if (o !== "neutral" && t !== o && zN(e)) {
        if (o === "ltr" && $N(e) || o === "rtl" && YN(e)) {
            return undefined;
        }
        return t === "ltr" ? "rtl" : "ltr";
    }
    if (o === "neutral" && e.match(/\b/)) {
        return "auto";
    }
    return undefined;
};

const WN = e => {
    const t = ay();
    return typeof e === "string" ? KN(e, t ? "rtl" : "ltr") : undefined;
};

const $N = e => {
    let t = e.length;
    while (t--) {
        const o = e.charAt(t);
        if (o.match(ON) || o.match(NN)) {
            continue;
        }
        if (o.match(MN)) {
            return true;
        } else {
            return false;
        }
    }
    return false;
};

const YN = e => {
    let t = e.length;
    while (t--) {
        const o = e.charAt(t);
        if (o.match(ON) || o.match(NN)) {
            continue;
        }
        if (o.match(AN)) {
            return true;
        } else {
            return false;
        }
    }
    return false;
};

var qN = "sas_components-Heading-Heading_heading";

var XN = "sas_components-Heading-Heading_text";

var ZN = "sas_components-Heading-Heading_nowrap";

var JN = "sas_components-Heading-Heading_icon";

var QN = "sas_components-Heading-Heading_icon-only";

var eO = {
    heading: qN,
    text: XN,
    nowrap: ZN,
    icon: JN,
    iconOnly: QN
};

const tO = Dh("Heading");

const oO = u((function e(o, a) {
    const {className: r, style: s, level: i, variant: l, children: d, wrapText: u, icon: m, focusable: p, testId: f, disabled: g, dir: h, textProps: b, ...v} = o;
    const y = C_();
    const x = jD(L_.ENABLE_KEYBOARD_TOOLTIPS) ?? "false";
    const S = jD(L_.FOCUS_TRUNCATED_HEADINGS) ?? "false";
    let w = {
        fg: g ? y.tokensExperimental["color-action-text-standard-disabled"] : y.tokensExperimental["color-heading-text"],
        focus: "var(--focus-light-bg)"
    };
    if (y.themeVariant === "light" && l === nO.PrimaryLight) {
        w = {
            fg: g ? y.tokensExperimental["color-action-text-emphasis-disabled"] : y.tokensExperimental["color-text-primary-inverse"],
            focus: "var(--focus-dark-bg)"
        };
    }
    const {density: C} = YA();
    const E = I_({
        ...w,
        "font-weight-default": y.tokensExperimental["font-style-weight-400"],
        "font-family": y.tokensExperimental["font-family-secondary"],
        "line-height": y.tokensExperimental["font-space-line-height"],
        "font-size": C && C === "high" ? y?.tokensExperimental["font-size-body-text-s"] : y.tokensExperimental[`font-size-heading-text-${i}`]
    }, "heading");
    const I = c(null);
    const _ = c(null);
    const D = WA({
        truncateRef: _
    });
    const L = WN(d);
    const [T, R] = n(false);
    const k = p === undefined && !u && x === "true" && S === "true";
    const [A] = kN((() => {
        if (!k) return;
        R(_.current !== null && UA(_.current));
    }));
    if (![ 1, 2, 3, 4, 5, 6 ].includes(i)) {
        tO.error(`Heading level must be an integer between 1 and 6 (current value: ${i})`);
        return null;
    }
    return t(`h${i}`, {
        ...v,
        className: ke(eO.heading, r, !u && eO.nowrap),
        style: {
            ...E,
            ...s
        },
        "aria-disabled": g ? true : undefined,
        "data-testid": f,
        tabIndex: p ?? (k && T) ? 0 : undefined,
        ref: e => {
            D_(a, e);
            D_(A, e);
            I.current = e;
            if (!u) {
                D(e);
            }
        }
    }, m ? t(MM, Ee({}, m, {
        className: ke(eO.icon, !d ? eO.iconOnly : undefined, m.className),
        disabled: g
    })) : undefined, d ? t("span", Ee({}, b, {
        className: ke(eO.text, b?.className),
        ref: _,
        dir: b?.dir ?? L
    }), d) : undefined);
}));

let nO = function(e) {
    e["Standard"] = "standard";
    e["PrimaryLight"] = "primary-light";
    return e;
}({});

var aO = "sas_components-Resizable-Resizable_inner";

var rO = "sas_components-Resizable-Resizable_content";

var sO = "sas_components-Resizable-Resizable_grip-icon-wrapper";

var iO = "sas_components-Resizable-Resizable_grip-cursor-rtl";

var lO = {
    inner: aO,
    content: rO,
    gripIconWrapper: sO,
    gripCursorRtl: iO
};

const cO = fb(nt);

const dO = ({tooltip: e, ariaLabel: o, className: n, style: r, resizableElementRef: s, onResize: i, testId: l, onMouseEnter: c, onMouseLeave: d, setIsDragging: u}) => {
    const m = ay();
    const p = cO();
    const {startResize: f, onArrowKeyResize: g, abortResize: h, isDragging: b} = mO({
        ref: s,
        onResize: i
    });
    a((() => {
        u?.(b);
    }), [ b, u ]);
    const v = C_();
    const y = I_({
        "color-text-label": v.c.colorTextLabel
    }, "resizer");
    return t("div", {
        role: "img",
        tabIndex: 0,
        className: ke(lO.gripIconWrapper, m && lO.gripCursorRtl, n),
        style: r,
        onMouseDown: f,
        onKeyDown: g,
        onMouseUp: h,
        "data-testid": l,
        title: e ?? p("gripIcon.label"),
        "aria-label": o ?? p("gripIcon.aria"),
        onMouseEnter: c,
        onMouseLeave: d
    }, t(MM, {
        icon: qT,
        tooltip: "",
        ariaLabel: "",
        style: y
    }));
};

function uO(e) {
    const [t, o] = n(false);
    const r = c([ NaN, NaN ]);
    a((() => {
        if (!t) return;
        function n(e, t) {
            const o = {
                deltaX: e - r.current[0],
                deltaY: t - r.current[1]
            };
            r.current = [ e, t ];
            return o;
        }
        function a(t) {
            e.onDrag(t, n(t.clientX, t.clientY));
        }
        function s(t) {
            o(false);
            e.onDragEnd(t, n(t.clientX, t.clientY));
        }
        function i(e) {
            o(false);
            document.removeEventListener("mousemove", a);
            document.removeEventListener("mouseup", s);
            document.removeEventListener("mouseleave", i);
        }
        document.addEventListener("mousemove", a);
        document.addEventListener("mouseup", s);
        document.addEventListener("mouseleave", i);
        return () => {
            document.removeEventListener("mousemove", a);
            document.removeEventListener("mouseup", s);
            document.removeEventListener("mouseleave", i);
        };
    }));
    return {
        startDrag: e => {
            r.current = e;
            o(true);
        },
        abortDrag: () => {
            o(false);
        },
        isDragging: t
    };
}

function mO(e) {
    const t = e.ref;
    const o = ay();
    const {startDrag: n, abortDrag: a, isDragging: r} = uO({
        onDrag: (n, a) => {
            const r = t.current;
            const s = r.getBoundingClientRect();
            const i = {
                width: o ? s.width - a.deltaX : s.width + a.deltaX,
                height: s.height + a.deltaY
            };
            e.onResize(i);
        },
        onDragEnd: (n, a) => {
            const r = t.current;
            const s = r.getBoundingClientRect();
            const i = {
                width: o ? s.width - a.deltaX : s.width + a.deltaX,
                height: s.height + a.deltaY
            };
            e.onResize(i);
        }
    });
    const s = n => {
        const a = t.current;
        const r = a.getBoundingClientRect();
        let s;
        switch (n.key) {
          case "ArrowLeft":
            s = {
                width: o ? r.width + 5 : r.width - 5,
                height: r.height
            };
            e.onResize(s);
            break;

          case "ArrowRight":
            s = {
                width: o ? r.width - 5 : r.width + 5,
                height: r.height
            };
            e.onResize(s);
            break;

          case "ArrowUp":
            s = {
                width: r.width,
                height: r.height - 5
            };
            e.onResize(s);
            break;

          case "ArrowDown":
            s = {
                width: r.width,
                height: r.height + 5
            };
            e.onResize(s);
            break;
        }
    };
    return {
        startResize: e => {
            if (e.button !== 0) return;
            n([ e.clientX, e.clientY ]);
            e.preventDefault();
        },
        onArrowKeyResize: s,
        abortResize: a,
        isDragging: r
    };
}

const pO = new Map;

const fO = e => {
    const t = c(null);
    const o = s((o => {
        if (o === null) {
            if (t.current) {
                pO.delete(t.current);
            }
        } else {
            pO.set(o, e);
        }
        if (o && o === document.activeElement) {
            o.setAttribute("data-keyboard-tooltip", "dummyData");
            o.removeAttribute("data-keyboard-tooltip");
        }
        t.current = o;
    }), [ e ]);
    return o;
};

var gO = "sas_components-InvisibleText-InvisibleText_sr-only";

var hO = {
    srOnly: gO
};

const bO = e => {
    const {children: o, srOnly: n, testId: a, ...r} = e;
    return t("span", Ee({
        "data-testid": a,
        hidden: !n
    }, r, {
        className: ke(n && hO.srOnly, r.className)
    }), o);
};

const vO = e => {
    const o = Nz(e);
    return t(XO, Ee({}, e, o));
};

const yO = (e, t, o, n, r) => {
    a((() => {
        const a = a => {
            if (t && !t.contains(a.target)) {
                let t = false;
                if (o?.contains(a.target)) {
                    t = true;
                }
                if (n && r !== undefined) {
                    const e = n.get(r);
                    if (!t && e) {
                        const o = Array.from(n.values()).filter((t => t.group === e.group && t.level > e.level));
                        o?.forEach((e => {
                            if (e.popoverElement.contains(a.target)) {
                                t = true;
                                return;
                            }
                        }));
                    }
                }
                !t && e?.();
            }
        };
        window.addEventListener("mousedown", a);
        return () => {
            window.removeEventListener("mousedown", a);
        };
    }), [ e, t, o, n, r ]);
};

const xO = i({
    activePopovers: new Map,
    openPopover: () => 0,
    closePopover: () => {}
});

function SO() {
    const e = l(xO);
    if (!e) {
        throw new Error(`usePopoverManager must be used within a PopoverManagerProvider`);
    }
    return e;
}

var wO = "sas_components-Popover-Popover_popover";

var CO = "sas_components-Popover-Popover_popover-inner";

var EO = "sas_components-Popover-Popover_popover-outer";

var IO = "sas_components-Popover-Popover_popover-hide";

var _O = "sas_components-Popover-Popover_popover-title";

var DO = "sas_components-Popover-Popover_popover-pane";

var LO = "sas_components-Popover-Popover_hasTitle";

var TO = "sas_components-Popover-Popover_hasFooter";

var RO = "sas_components-Popover-Popover_popover-footer";

var kO = "sas_components-Popover-Popover_arrow";

var AO = "sas_components-Popover-Popover_viewport-overlay";

var MO = "sas_components-Popover-Popover_block-pointer-events";

var NO = {
    popover: wO,
    popoverInner: CO,
    popoverOuter: EO,
    popoverHide: IO,
    popoverTitle: _O,
    popoverPane: DO,
    hasTitle: LO,
    hasFooter: TO,
    popoverFooter: RO,
    arrow: kO,
    viewportOverlay: AO,
    blockPointerEvents: MO
};

const OO = MA("Popover");

const PO = (e, t) => {
    bb.subscribe(e, t);
};

const BO = (e, t) => {
    bb.unsubscribe(e, t);
};

const zO = u((function e({isOpen: o = true, ...n}, a) {
    return t(Me, {
        mode: "wait"
    }, o ? t(FO, Ee({
        ref: a,
        isOpen: o
    }, n)) : null);
}));

const FO = u((function e(o, i) {
    const [l, d] = n(null);
    const [u, m] = n(null);
    const [p, f] = n(null);
    const [h, b] = n(false);
    const v = ay();
    const [y, x] = OO(2);
    const S = r((() => ({
        getBoundingClientRect: () => ({
            x: 0,
            y: 0,
            height: 0,
            width: 0,
            bottom: 0,
            left: 0,
            top: 0,
            right: 0,
            toJSON: () => {}
        })
    })), []);
    const [w, C] = n(undefined);
    const E = SO();
    const I = o.placement ? v && (o.placement === "top-start" || o.placement === "bottom-start") ? o.placement.replace("start", "end") : v && (o.placement === "top-end" || o.placement === "bottom-end") ? o.placement.replace("end", "start") : o.placement : v ? "left" : "right";
    let _;
    if (o.referenceElementRef?.current) {
        _ = o.referenceElementRef?.current;
    } else if (o.position) {
        _ = S;
    }
    const {styles: D, attributes: L, update: T, forceUpdate: R, state: k} = no(_, u, {
        placement: I,
        modifiers: [ {
            name: "arrow",
            options: {
                element: p,
                padding: 5
            }
        }, {
            name: "offset",
            options: {
                offset: [ 0, o.hideArrow ? 0 : 14 ]
            }
        }, {
            name: "flip",
            options: {
                flipVariations: false
            }
        }, {
            name: "preventOverflow",
            options: {
                padding: {
                    top: 10,
                    left: 0,
                    bottom: 10,
                    right: 0
                },
                boundary: o.popoverRoot ?? undefined
            }
        } ]
    });
    const A = c(null);
    const M = c(null);
    const N = c(null);
    const [O, P] = n({
        maxHeight: undefined,
        maxWidth: undefined
    });
    const B = s((e => {
        if (!e?.rects?.reference) return;
        const t = o.style;
        const n = o.popoverRoot ? o.popoverRoot.getBoundingClientRect().height : window.innerHeight;
        const a = o.popoverRoot ? o.popoverRoot.getBoundingClientRect().width : window.innerWidth;
        const r = o.hideArrow ? 0 : 14;
        const s = e.placement;
        const i = s.indexOf("top") !== -1 || s.indexOf("bottom") !== -1 ? "vertical" : s.indexOf("left") !== -1 || s.indexOf("right") !== -1 ? "horizontal" : "auto";
        const l = i === "vertical" ? 10 : 20;
        const c = e.rects.reference;
        const d = A.current?.getBoundingClientRect().height ?? 0;
        const u = M.current?.getBoundingClientRect().height ?? 0;
        const m = o.popoverRoot ? o.popoverRoot.getBoundingClientRect().top : 0;
        const p = c.y - l - r - d - u - m;
        const f = n - c.y - c.height - l - r - d - u + m;
        let g = n - l - d - u;
        const h = o.popoverRoot ? o.popoverRoot.getBoundingClientRect().left : 0;
        const b = c.x - r - h;
        const v = a - c.x - c.width - r + h;
        let y = a;
        if (i === "vertical") {
            g = Math.max(f, p);
        } else if (i === "horizontal") {
            y = Math.max(b, v);
        } else if (i === "auto") {
            if (Math.max(v, b) >= Math.max(p, f)) {
                y = Math.max(v, b);
            } else {
                g = Math.max(p, f);
            }
        }
        const x = t?.maxHeight ?? "100vh";
        const S = t?.maxWidth ?? "100vw";
        const w = `min(${g}px, ${x})`;
        const C = `min(${y}px, ${S})`;
        P({
            maxHeight: w,
            maxWidth: C
        });
        if (N.current) {
            if (typeof w === "string") N.current.style.maxHeight = w;
            if (typeof C === "string") N.current.style.maxWidth = C;
        }
    }), [ o.popoverRoot, o.hideArrow, o.style ]);
    g(i, (() => ({
        update: () => T,
        forceUpdate: () => R,
        container: l,
        state: k
    })));
    const [z] = kN((() => {
        T?.();
        B(k);
    }));
    if (o.popoverRoot) {
        z(o.popoverRoot);
    }
    a((() => {
        if (l) {
            T?.();
        }
    }), [ l, T ]);
    a((() => {
        if (o.position) {
            S.getBoundingClientRect = () => o.position;
        }
        T?.();
        B(k);
    }), [ v, o.children, o.position, T, S, k, B ]);
    const F = C_();
    const j = y_();
    const [V, H] = n(undefined);
    a((() => {
        if (l && V === undefined) {
            const e = window.getComputedStyle(l).getPropertyValue("padding-inline-end");
            if (cD() === sD.Firefox && l?.scrollHeight > l.offsetHeight) {
                const t = -l.offsetWidth + l.scrollWidth + FA();
                t > 0 ? H(`calc(${e} + ${t}px)`) : H(e);
            } else {
                H(e);
            }
        }
    }), [ l, V ]);
    const U = cy();
    const G = o.popoverRoot ?? U;
    const K = c(false);
    a((() => {
        if (w === -1) {
            for (const e of E.activePopovers.values()) {
                if (e.referenceElementRef === o.referenceElementRef && e.popoverElement === u) {
                    return C(e.id);
                }
            }
        }
        if (!u || w !== undefined) return;
        const e = E.openPopover({
            popoverElement: u,
            referenceElementRef: o.referenceElementRef
        });
        K.current = false;
        C(e);
    }), [ o.referenceElementRef, o.position, w, u, E ]);
    const W = e => {
        C(undefined);
        K.current = true;
        $.current.closePopover(e);
        d(null);
        P({
            maxHeight: undefined,
            maxWidth: undefined
        });
        H(undefined);
    };
    const $ = c(E);
    $.current = E;
    a((() => () => {
        if (w !== undefined && w > -1 && $.current && !K.current) {
            W(w);
        }
    }), [ w ]);
    a((() => {
        if (w !== undefined && w > -1 && $.current && !K.current && o.isOpen === false) {
            W(w);
        }
    }), [ w, o.isOpen ]);
    yO(o.isModal ? undefined : () => {
        o.onClose?.();
        o.onOutsideClick?.();
    }, u, o.referenceElementRef?.current, E.activePopovers, w);
    const Y = o.onClose;
    const q = s((e => {
        const t = e.target;
        if (o.isOpen === false || !Y || o.isModal) return;
        if (e instanceof MouseEvent || e instanceof WheelEvent) {
            const e = document.getElementsByClassName(NO.popover);
            for (const o of e) {
                if (o && o.contains(t)) {
                    return;
                }
            }
        }
        Y();
    }), [ Y, o.isOpen, o.isModal ]);
    a((() => {
        window.addEventListener("resize", q);
        window.addEventListener("wheel", q);
        document.addEventListener("wheel", q);
        window.addEventListener("blur", q);
        return () => {
            window.removeEventListener("resize", q);
            window.removeEventListener("wheel", q);
            document.removeEventListener("wheel", q);
            window.removeEventListener("blur", q);
        };
    }), [ q ]);
    a((() => {
        if (!o.isModal && o.isOpen !== false) {
            const e = () => {
                b(true);
            };
            const t = () => {
                Y?.();
            };
            PO("popover:disableFocusLockNonModal", e);
            PO("popover:onCloseNonModal", t);
            return () => {
                BO("popover:disableFocusLockNonModal", e);
                BO("popover:onCloseNonModal", t);
            };
        }
    }), [ o.isModal, o.isOpen, Y ]);
    const X = aL();
    a((() => {
        if (o.isOpen && o.isModal) {
            X(true);
            return () => {
                X(false);
            };
        }
    }), [ o.isOpen, X, o.isModal ]);
    const Z = L.popper?.["data-popper-placement"] ?? "";
    const J = {
        x: 0,
        y: 0
    };
    if (Z.startsWith("top")) {
        J.y = 16;
    } else if (Z.startsWith("bottom")) {
        J.y = -16;
    } else if (Z.startsWith("right")) {
        J.x = -16;
    } else if (Z.startsWith("left")) {
        J.x = 16;
    }
    const Q = jD(L_.PLAY_VISUAL_EFFECTS) === "true";
    const ee = !Q ? undefined : {
        closed: {
            opacity: 0,
            ...J
        },
        open: {
            opacity: 1,
            x: 0,
            y: 0,
            transition: {
                type: "tween",
                duration: .3,
                ease: [ 0, .5, .2, 1 ]
            }
        },
        exit: {
            opacity: 0,
            ...J,
            transition: {
                type: "tween",
                duration: .3,
                ease: [ .5, 0, .8, 1 ]
            }
        }
    };
    const te = t("div", Ee({
        id: o.id,
        "data-testid": o.testId,
        ref: m,
        style: {
            ...D.popper,
            ...jO(F, {
                font: o.font,
                theme: o.theme
            }),
            ...o.futureTheme?.(F)
        }
    }, L.popper, {
        className: ke(NO.popoverOuter, o.hideOnRefHidden ? NO.popoverHide : undefined),
        role: o.role,
        "aria-label": o.ariaLabel,
        "aria-labelledby": o.ariaLabelledby ?? (o.title ? y : undefined),
        "aria-describedby": o.ariaDescribedby ?? (o.focusable ? x : undefined),
        tabIndex: o.focusable ? 0 : undefined,
        onKeyDown: e => {
            b(false);
            if (e.key === "Escape") {
                o.onClose?.();
                o.onEscape?.();
                e.stopPropagation();
            }
            if (e.key === " ") {
                e.stopPropagation();
            }
            if (N.current && N.current.scrollBy && document.activeElement === u) {
                if (e.key === "ArrowUp") {
                    N.current.scrollBy({
                        top: -50,
                        left: 0,
                        behavior: "auto"
                    });
                    e.stopPropagation();
                }
                if (e.key === "ArrowDown") {
                    N.current.scrollBy({
                        top: 50,
                        left: 0,
                        behavior: "auto"
                    });
                    e.stopPropagation();
                }
                if (e.key === "ArrowLeft") {
                    N.current.scrollBy({
                        top: 0,
                        left: -50,
                        behavior: "auto"
                    });
                    e.stopPropagation();
                }
                if (e.key === "ArrowRight") {
                    N.current.scrollBy({
                        top: 0,
                        left: 50,
                        behavior: "auto"
                    });
                    e.stopPropagation();
                }
            }
        },
        onClick: e => e.stopPropagation()
    }, !o.isModal && {
        onMouseDown: () => b(false)
    }, {
        onContextMenu: e => {
            if (!o.allowOnContextMenuPropagation) {
                e.stopPropagation();
            }
        }
    }), t(Ne.div, Ee({
        variants: ee,
        initial: "closed",
        animate: "open",
        exit: "exit"
    }, Q ? o.animation : null, {
        className: NO.popover
    }), t("div", {
        "data-landmark-label": !o.onClose && !o.isModal ? o.landmarkLabel || o.title : undefined,
        className: ke(NO.popoverInner, o.innerClassName),
        onContextMenu: e => o.disableContextMenu ? e.preventDefault() : undefined
    }, o.title ? t(oO, {
        id: y,
        testId: gb(o.testId, "title"),
        level: o.isModal ? 1 : 2,
        style: o.titleStyle,
        className: ke(NO.popoverTitle, o.titleClassName),
        ref: A
    }, o.title) : null, t("div", {
        id: x,
        "data-testid": gb(o.testId, "content"),
        className: ke(NO.popoverPane, o.className, !!o.title && NO.hasTitle, !!o.footer && NO.hasFooter),
        style: {
            ...o.style,
            maxHeight: O.maxHeight,
            maxWidth: O.maxWidth,
            paddingInlineEnd: V
        },
        ref: e => {
            if (e && O.maxHeight === undefined) {
                B(k);
            }
            if (e && k && O.maxHeight !== undefined) {
                d(e);
            }
            N.current = e;
        }
    }, o.children), o.footer ? t("div", {
        ref: M,
        "data-testid": gb(o.testId, "footer"),
        className: NO.popoverFooter
    }, o.footer) : null), o.hideArrow ? null : t("div", Ee({}, L.arrow, {
        "data-testid": gb(o.testId, "arrow"),
        ref: f,
        style: {
            ...jO(F, {
                font: o.font,
                theme: o.theme
            }),
            ...D.arrow
        },
        className: NO.arrow
    }))));
    if (G === null || o.isOpen === false || !o.referenceElementRef && !o.position) {
        return null;
    }
    return _e(t("div", {
        className: ke(NO.viewportOverlay, o.overlayClassName, !o.isModal ? NO.blockPointerEvents : null),
        style: j,
        onMouseDown: e => {
            if (o.isModal && e.currentTarget === e.target) {
                e.preventDefault();
            }
        }
    }, t(De, Ee({}, !o.isModal && {
        disabled: h
    }, {
        returnFocus: o.returnFocus !== false
    }, o.focusLockProps), te)), G);
}));

const jO = (e, t) => ({
    ...__({
        bg: e.tokensExperimental["color-container-background-0"],
        fg: e.tokensExperimental["color-text-neutral"],
        sh: e.tokensExperimental["shadow-depth-m"],
        bd: e.tokensExperimental["color-container-border-4"],
        padding: e.tokensExperimental["space-base-m"],
        "border-radius": e.tokensExperimental["size-border-radius-xxs"],
        "font-size-m": e.tokensExperimental["font-size-body-text-m"],
        "title-font-weight": e.tokensExperimental["font-style-weight-700"],
        "title-fg": e.tokensExperimental["color-heading-text"],
        "title-font-family": t?.font?.fontFamily ?? e.tokensExperimental["font-family-secondary"],
        ...t?.font,
        ...t?.theme?.()
    }, "popover"),
    ...__({
        bg: e.tokensExperimental["color-container-background-0"],
        bd: e.tokensExperimental["color-container-border-4"]
    }, "popover-arrow"),
    ...!e.enableNovaTokens && VO(e, t)
});

const VO = (e, t) => {
    let o;
    switch (e.themeVariant) {
      case "dark":
        o = {
            bd: e.c.p2
        };

      case "high-contrast":
        o = {
            bd: e.c.white
        };

      default:
        o = {
            bd: e.c.n3
        };
    }
    return {
        ...__({
            ...e.backgroundsDepth.medium,
            bd: e.stateStandard.normal.bd,
            "font-size-m": e.font.size.m,
            "title-font-weight": e.font.weight.thick,
            "title-fg": e.c.primary,
            "title-fontFamily": t?.font?.fontFamily ?? e.font.family,
            ...t?.font,
            ...t?.theme?.()
        }, "popover"),
        ...__(o, "popover-arrow")
    };
};

var HO = "sas_components-Menu-__internal__-MenuPopover_opening";

var UO = "sas_components-Menu-__internal__-MenuPopover_closing";

var GO = "sas_components-Menu-__internal__-MenuPopover_menu-popover";

var KO = "sas_components-Menu-__internal__-MenuPopover_menu-popover-inner";

var WO = {
    opening: HO,
    closing: UO,
    menuPopover: GO,
    menuPopoverInner: KO
};

const $O = e => {
    const o = c(null);
    const r = c(null);
    const {getActionsByKeyEvent: i} = MD();
    const [l, d] = n(false);
    const [u, m] = n();
    const {isOpen: p, showFocus: f, onDismiss: g, focusLocation: h, isSubMenu: b, enableContextMenuEvent: v, placement: y, referenceElementRef: x, animation: S, onItemSelected: w, popoverTheme: C, isBusy: E} = e;
    a((() => {
        if (p) {
            d(true);
            const e = setTimeout((() => d(false)), 10);
            return () => clearTimeout(e);
        }
    }), [ p ]);
    const I = r.current && document.activeElement && r.current === document.activeElement;
    a((() => {
        if (!p) return;
        if (b) return;
        if (f && Mz(h)) return;
        if (I) return;
        r.current?.focus();
    }), [ p, b, I, h, f ]);
    a((() => {
        if (p && !E && e.sections.length === 0) {
            g?.(true);
        }
    }), [ p, E, e.sections, g ]);
    const _ = s((t => {
        if (h?.length && r.current && document.activeElement && r.current === document.activeElement && (t.key === "Enter" || t.key === " ")) {
            t.preventDefault();
            let o = e.sections;
            for (let e = 0; e < h.length; e++) {
                const t = o[h[e][0]];
                if (!t || qO(t)) return;
                const n = t.items[h[e][1]];
                if (n.disabled) return;
                if (n.subSections) o = n.subSections; else w(h, n.key);
            }
        }
    }), [ h, w, e.sections ]);
    a((() => {
        if (p && cD() === sD.Firefox) m(`${FA()}px`);
    }), [ p ]);
    const D = c();
    D.current = g;
    const L = s((e => {
        const t = e.target;
        if (!p || l || !t || !D.current) return;
        if (e instanceof MouseEvent || e instanceof WheelEvent) {
            const e = document.getElementsByClassName(WO.menuPopover);
            for (const o of e) {
                if (o && o.contains(t)) {
                    return;
                }
            }
        }
        D.current();
    }), [ l, p ]);
    a((() => {
        window.addEventListener("mousedown", L);
        window.addEventListener("resize", L);
        window.addEventListener("wheel", L);
        document.addEventListener("wheel", L);
        return () => {
            window.removeEventListener("mousedown", L);
            window.removeEventListener("resize", L);
            window.removeEventListener("wheel", L);
            document.removeEventListener("wheel", L);
        };
    }), [ L ]);
    const T = e => {
        if (!v) {
            e.stopPropagation();
            if (!e.ctrlKey || e.button !== 2) {
                e.preventDefault();
            }
        }
    };
    const R = e => {
        const {actions: t} = i(e);
        if (t.includes("openLandmarks")) {
            g?.();
        }
    };
    const k = t => {
        const n = t.target;
        if (n && o.current === n) e.onSubmenuClosed?.(e.menuLevel);
    };
    const A = () => {
        e.onSubmenuClosed?.(e.menuLevel);
    };
    const M = () => {
        r.current?.focus();
    };
    const N = {
        closed: {
            opacity: 0,
            x: b ? -8 : 0,
            y: b ? 0 : -8
        },
        open: {
            opacity: 1,
            x: 0,
            y: 0,
            transition: {
                type: "tween",
                duration: .3,
                ease: [ 0, .5, .2, 1 ]
            }
        },
        exit: {
            opacity: 0,
            x: b ? -8 : 0,
            y: b ? 0 : -8,
            transition: {
                type: "tween",
                duration: .3,
                ease: [ .5, 0, .8, 1 ]
            }
        }
    };
    const O = C_();
    return t(zO, {
        futureTheme: C,
        isOpen: p,
        className: ke(WO.menuPopover, p ? WO.opening : WO.closing),
        style: {
            maxWidth: e.maxWidth ?? "25rem",
            maxHeight: e.maxHeight ?? "75vh",
            padding: "0",
            "--popover-border-radius": "0.25rem",
            "--menu-scrollbar-offset": u,
            "--menu-anim-dur-enter": O.animation.duration.enter.m,
            "--menu-anim-tf-enter": O.animation.timingFunction.enter.m,
            "--menu-anim-dur-exit": O.animation.duration.exit.m,
            "--menu-anim-tf-exit": O.animation.timingFunction.exit.m
        },
        hideArrow: true,
        allowOnContextMenuPropagation: true,
        focusLockProps: {
            disabled: true
        },
        referenceElementRef: x,
        ref: e => {
            if (e) {
                e?.container?.addEventListener("contextmenu", T);
                e?.container?.addEventListener("keydown", R);
                e?.container?.addEventListener("mousedown", k);
                e?.container?.addEventListener("scroll", A);
                e?.container?.addEventListener("focus", M);
            } else {
                o.current?.removeEventListener("contextmenu", T);
                o.current?.removeEventListener("keydown", R);
                o.current?.removeEventListener("mousedown", k);
                o.current?.removeEventListener("scroll", A);
                o.current?.removeEventListener("focus", M);
            }
            D_(o, e?.container);
            if (!l && cD() === sD.Firefox && e?.container && r.current) {
                if (e.container.offsetHeight >= e.container.scrollHeight) {
                    e.container.style.paddingInlineEnd = "0px";
                    if (e.container.offsetWidth < r.current.offsetWidth) {
                        m(undefined);
                    }
                } else if (e.container.style.paddingInlineEnd === "0px") {
                    const t = FA();
                    e.container.style.paddingInlineEnd = `${t}px`;
                    m(`${t}px`);
                }
            }
        },
        placement: y,
        position: e.position,
        animation: {
            variants: N,
            ...S
        },
        testId: e.testId
    }, t(Le, {
        className: WO.menuPopoverInner
    }, t(RB, {
        ref: r,
        sections: e.sections,
        focusLocation: h,
        disabled: e.disabled,
        onKeyDown: e.onKeyDown,
        onKeyUp: _,
        onItemSelected: w,
        onItemClosed: e.onItemClosed,
        onItemHovered: e.onItemHovered,
        onItemLeaved: e.onItemLeaved,
        showFocus: f,
        tokens: e.tokens,
        onSubmenuClosed: e.onSubmenuClosed,
        menuLevel: e.menuLevel,
        listTheme: e.listTheme,
        theme: e.theme,
        popoverTheme: C,
        isBusy: E
    })));
};

const YO = fb(at);

const qO = e => "render" in e;

const XO = e => {
    const o = c(null);
    const n = c();
    const {showFocus: r, focusLocation: i, onItemSelected: l} = e;
    const {x: d, y: u, dockingElement: m, verticalAlign: p = "end", horizontalAlign: f = "start"} = e.position;
    o.current = m ?? null;
    let g = e.placement ?? "bottom-start";
    if (m) {
        const e = p === "start" ? "top" : "bottom";
        const t = f ?? "start";
        g = `${e}-${t}`;
    } else {
        if (n.current?.x !== d || n.current?.y !== u) n.current = {
            bottom: u,
            height: 0,
            left: d,
            right: d,
            top: u,
            width: 0,
            x: d,
            y: u
        };
    }
    const h = XA();
    const b = YO();
    const v = c();
    const y = s(((e, t) => {
        v.current = [ ...e ];
        l(e, t);
    }), [ l ]);
    a((() => {
        if (!v.current) return;
        const t = v.current;
        let o = e.sections[t[0][0]];
        if (o && !qO(o)) {
            let e = o.items[t[0][1]];
            for (let n = 1; n < t.length; n++) {
                if (e?.subSections) {
                    const [a, r] = t[n];
                    o = e.subSections[a];
                    if (o && !qO(o)) {
                        e = o.items[r];
                    }
                }
            }
            if (o && e) {
                if (o.selectedKey !== undefined) e.checked = o.selectedKey === e.key; else if (o.selectedIndex !== undefined) e.checked = o.selectedIndex === t[t.length - 1][1];
                if (e.checked !== undefined) h?.notify(b(e.checked ? "item.checked.msg" : "item.notChecked.msg", {
                    item: e.text
                }));
            }
        }
        v.current = undefined;
    }));
    return t($O, Ee({}, e, {
        isOpen: e.isOpen,
        referenceElementRef: o,
        placement: g,
        position: n.current,
        maxHeight: e.maxHeight,
        testId: e.testId,
        sections: e.sections,
        focusLocation: i,
        disabled: e.disabled,
        onKeyDown: e.onKeyDown,
        onItemSelected: y,
        onItemClosed: e.onItemClosed,
        onItemHovered: e.onItemHovered,
        onItemLeaved: e.onItemLeaved,
        onSubmenuClosed: e.onSubmenuClosed,
        showFocus: r,
        tokens: e.tokens,
        menuLevel: 0
    }));
};

const ZO = e => {
    const t = c(false);
    const [o, a] = n(false);
    function r() {
        if (t.current) {
            t.current = false;
            return;
        }
        a(false);
        e.onDismiss?.();
    }
    function s(o) {
        if (e.disabled) return;
        if (o.button === 0) {
            t.current = true;
        }
    }
    function i() {
        if (e.disabled) return;
        const n = !o;
        a(n);
        n ? e.onOpen?.() : e.onDismiss?.();
        t.current = false;
    }
    return {
        handleDismiss: r,
        handleMouseDown: s,
        handlePress: i,
        setMenuIsOpen: a,
        menuIsOpen: o
    };
};

var JO = "sas_components-MenuButton-__internal__-BaseMenuButton_icon";

var QO = {
    icon: JO
};

const eP = u((function e({children: o, icon: a, onItemSelected: r, onItemClosed: i, onDismiss: l, onOpen: d, onMouseDown: u, onMouseUp: m, onKeyDown: p, onKeyUp: f, parentWidth: g, renderButton: h, sections: b, hideDownArrow: v, menuAlign: y, menuDockingElement: x, testId: S, buttonTheme: w, listTheme: C, menuTheme: E, popoverTheme: I, ..._}, D) {
    const [L, T] = n();
    const R = c(null);
    const {handleDismiss: k, handleMouseDown: A, handlePress: M, setMenuIsOpen: N, menuIsOpen: O} = ZO({
        disabled: _.disabled,
        onDismiss: () => {
            R.current?.focus();
            l?.();
        },
        onOpen: () => {
            T(undefined);
            d?.();
        }
    });
    const P = (e, t) => {
        R.current?.focus();
        r?.(e, t);
        N(false);
        l?.();
    };
    const B = s((e => {
        R.current = e;
        D_(D, e);
    }), [ D ]);
    const z = c(false);
    const F = s((e => {
        if (_.disabled) return;
        if (!z.current) {
            return;
        }
        z.current = false;
        f?.(e);
        let t;
        const o = e.altKey || e.ctrlKey || e.shiftKey || e.metaKey;
        if ((e.key === "Enter" || e.key === " ") && !o) {
            t = Vz(-1, b, false);
        } else if (e.altKey && e.key === "ArrowDown") {
            t = Vz(-1, b, false);
        } else if (e.altKey && e.key === "ArrowUp") {
            t = Vz(0, b, true);
        }
        if (t !== undefined) {
            e.preventDefault();
            T(t);
            N(true);
            d?.();
            e.stopPropagation();
        }
    }), [ f, d, _.disabled, b, N ]);
    const j = C_();
    const V = {
        ..._,
        theme: w,
        icon: a,
        children: v ?? !!a ? null : t(MM, {
            icon: CT,
            className: ke($M.iconInner, QO.icon),
            tooltip: "",
            ariaHidden: true
        }),
        onMouseDown: e => {
            A(e);
            u?.(e);
        },
        onMouseUp: m,
        onClick: M,
        onKeyDown: e => {
            if (z.current) {
                return;
            }
            z.current = true;
            if (e.altKey && (e.key === "ArrowDown" || e.key === "ArrowUp")) {
                e.stopPropagation();
            }
            p?.(e);
        },
        onKeyUp: e => {
            F(e);
        }
    };
    return t("div", {
        "data-testid": S,
        className: _.className ? `${_.className}-container` : undefined
    }, h ? h({
        ...V,
        menuIsOpen: O,
        setButtonRef: B
    }) : t(ZM, Ee({
        tokens: () => tP(O, V.variant, _.text, j)
    }, V, {
        icon: V.icon ? {
            ...V.icon,
            theme: O ? () => {
                if (j.themeVariant === "high-contrast") {
                    return {
                        "--icon-default-override-fg": j.tokensExperimental["color-action-icon-emphasis-selected"],
                        "--icon-success-override-fg": j.tokensExperimental["color-action-icon-emphasis-selected"],
                        "--icon-alert-override-fg": j.tokensExperimental["color-action-icon-emphasis-selected"],
                        "--icon-warning-override-fg": j.tokensExperimental["color-action-icon-emphasis-selected"],
                        "--icon-information-override-fg": j.tokensExperimental["color-action-icon-emphasis-selected"],
                        "--icon-neutral-override-fg": j.tokensExperimental["color-action-icon-emphasis-selected"]
                    };
                } else if (V.variant === oN.PrimaryIcon) {
                    switch (j.themeVariant) {
                      case "dark":
                        return {
                            "--icon-default-override-fg": j.tokensExperimental["color-icon-primary"],
                            "--icon-success-override-fg": j.tokensExperimental["color-icon-primary"],
                            "--icon-alert-override-fg": j.tokensExperimental["color-icon-primary"],
                            "--icon-warning-override-fg": j.tokensExperimental["color-icon-primary"],
                            "--icon-information-override-fg": j.tokensExperimental["color-icon-primary"],
                            "--icon-neutral-override-fg": j.tokensExperimental["color-icon-primary"]
                        };

                      default:
                        return {
                            "--icon-default-override-fg": j.tokensExperimental["color-action-icon-emphasis-normal"],
                            "--icon-success-override-fg": j.tokensExperimental["color-action-icon-emphasis-normal"],
                            "--icon-alert-override-fg": j.tokensExperimental["color-action-icon-emphasis-normal"],
                            "--icon-warning-override-fg": j.tokensExperimental["color-action-icon-emphasis-normal"],
                            "--icon-information-override-fg": j.tokensExperimental["color-action-icon-emphasis-normal"],
                            "--icon-neutral-override-fg": j.tokensExperimental["color-action-icon-emphasis-normal"]
                        };
                    }
                } else {
                    return undefined;
                }
            } : undefined
        } : undefined,
        ref: B,
        testId: gb(S, "button"),
        "aria-haspopup": true,
        "aria-expanded": O
    })), t(vO, {
        testId: gb(S, "menu"),
        isOpen: O,
        sections: b,
        position: {
            dockingElement: x ?? R.current,
            ...y
        },
        onItemSelected: P,
        onItemClosed: i,
        onDismiss: k,
        defaultFocusLocation: L,
        theme: E,
        listTheme: C,
        popoverTheme: I
    }));
}));

const tP = (e, t, o, n) => {
    const a = e && t !== oN.PrimaryLight ? {
        fg: n.tokensExperimental["color-action-text-standard-selected"],
        bg: n.tokensExperimental["color-action-background-standard-selected"],
        bd: o ? n.tokensExperimental["color-action-border-standard-selected"] : "transparent"
    } : {};
    switch (n.themeVariant) {
      case "dark":
      case "high-contrast":
        return e && (t === oN.Primary || t === oN.PrimaryIcon || t === oN.PrimarySmall || t === oN.PrimaryLight) ? {
            bg: n.tokensExperimental["color-action-background-emphasis-selected"],
            bd: n.tokensExperimental["color-action-border-emphasis-selected"],
            fg: n.tokensExperimental["color-action-text-emphasis-selected"]
        } : a;

      default:
        return e && (t === oN.Primary || t === oN.PrimaryIcon || t === oN.PrimarySmall || t === oN.PrimaryLight) ? {
            bg: n.tokensExperimental["color-action-background-emphasis-selected"],
            bd: "transparent",
            fg: n.tokensExperimental["color-text-primary-inverse"]
        } : a;
    }
};

const oP = fb(rt);

const nP = e => {
    const t = oP();
    const o = lb(e.library);
    const n = o(`${e.contentKey}.help.tip.txt`);
    const a = n && n !== `${e.library}.${e.contentKey}.help.tip.txt` ? n : t("default.tooltip.msg");
    const r = o(`${e.contentKey}.help.aria.txt`);
    let s = r && r !== `${e.library}.${e.contentKey}.help.aria.txt` ? r : t("default.tooltip.msg");
    s = e.additionalAriaText ? `${e.additionalAriaText}, ${s}` : s;
    const i = t("dialog.content.aria");
    return {
        buttonAriaLabel: s,
        buttonTooltip: a,
        dialogAriaLabel: i
    };
};

var aP = "sas_components-HelpPopup-__internal__-BaseHelpPopup_container";

var rP = {
    container: aP
};

const sP = e => {
    const [a, r] = n(false);
    const s = e.isOpen !== undefined && e.setIsOpen !== undefined ? e.isOpen : a;
    const i = e.variant === "toolbar" ? JT : ZT;
    const l = c(null);
    const d = C_();
    const u = I_({
        pd: d.spacing.core.m,
        min: d.spacing.size.xxs,
        "font-size-l": d.fontNova.size.l
    }, "help-popup-container");
    const {buttonTooltip: m, buttonAriaLabel: p, dialogAriaLabel: f} = nP(e);
    return t(o, null, t(QM, {
        style: {
            display: "inline-flex"
        },
        disabled: e.disabled,
        testId: gb(e.testId, "button"),
        ref: t => {
            l.current = t;
            D_(e.buttonRef, t);
        },
        onPress: () => {
            r(true);
            e.setIsOpen?.(true);
        },
        icon: {
            icon: i
        },
        tooltip: m,
        ariaLabel: p,
        variant: oN.Icon,
        className: e.className,
        focusable: e.focusable ?? true,
        tokens: () => tP(a, oN.Icon, undefined, d)
    }), t(zO, {
        testId: e.testId,
        referenceElementRef: l,
        isOpen: s,
        onClose: () => {
            r(false);
            e.setIsOpen?.(false);
            e.onClose?.();
        },
        onEscape: e.onEscape,
        ariaLabel: f,
        role: "dialog",
        style: {
            ...u,
            maxWidth: `${d.spacing.size.l}`,
            maxHeight: "50vh"
        },
        focusable: true,
        className: rP.container,
        placement: "auto"
    }, t(dP, e)));
};

const iP = e => t(h, {
    fallback: null
}, t(sP, e));

var lP = "sas_components-HelpPopup-__internal__-HelpPopupContent_content";

var cP = {
    content: lP
};

const dP = e => {
    const o = lb(e.library);
    const s = o(`${e.contentKey}.help.content.txt`).replace(/\\([^\\])/g, "$1");
    const {resolveSVG: i, resolveIcon: l} = RM();
    const [c, d] = n({});
    const u = YI();
    a((() => {
        const t = async () => {
            const t = new DOMParser;
            const o = t.parseFromString(s, "text/html");
            const n = [];
            for (const e of o.body.children) {
                pP(e, n);
            }
            const a = async t => {
                const o = await _y({
                    dataProvider: e.dataProvider,
                    customParams: {
                        locale: $h(),
                        ...t
                    }
                });
                if (o) {
                    const e = uP(t.docsetId, t.docsetTarget, t.docsetTargetAnchor);
                    return {
                        key: e,
                        url: o
                    };
                }
            };
            const r = await Promise.all(n.map((e => a(e))));
            const i = {};
            for (const e of r) {
                if (e) {
                    i[e.key] = e.url;
                }
            }
            u.current && d(i);
        };
        t();
    }), [ e.dataProvider, s, u ]);
    const m = r((() => gP(s, c, i, l)), [ s, c, i, l ]);
    const p = C_();
    const f = I_({
        mg: p.spacing.core.m,
        "small-mg": p.spacing.core.s,
        "tiny-mg": p.spacing.core.xs,
        "none-mg": p.spacing.core.none,
        pd: p.spacing.core.m,
        "tiny-pd": p.spacing.core.xs,
        "small-pd": p.spacing.core.s,
        "indent-pd": p.spacing.core.xl,
        "font-size-m": p.fontNova.size.m,
        "line-height": p.fontNova.lineHeight,
        "font-weight-default": p.fontNova.weight.default,
        "font-weight-thick": p.fontNova.weight.thick,
        fg: p.c.colorTextDefault,
        "title-fg": p.c.colorTextPrimary,
        "caution-fg": p.c.colorAlert,
        "caution-bd": p.c.colorAlert,
        "note-bd": p.c.colorUiBorder,
        "note-fg": p.c.colorTextLabel,
        "gen-title-bd": Jv(p.c.colorUiPop, .5),
        "tip-bd": p.c.colorInfo,
        "tip-title-fg": p.c.colorInfo,
        "link-fg": p.stateStandardNova.normal.fg
    }, "help-popup-content-xis");
    return t("div", {
        style: f,
        className: cP.content,
        onKeyDown: e => PA(e),
        onClick: e => e.stopPropagation()
    }, m);
};

const uP = (e, t, o) => `${e}.${t}.${o}`;

const mP = e => {
    const t = {};
    for (let o = 0; o < e.length; o++) {
        const n = e.item(o);
        if (!n) continue;
        if (n.name === "class") {
            t.className = n.value;
        } else {
            t[n.name] = n.value;
        }
    }
    return t;
};

const pP = (e, t) => {
    for (const o of e.childNodes) {
        if (o instanceof Element) {
            const e = mP(o.attributes);
            if (o.tagName === "A" && e["data-help-docset"] && e["data-help-topic"]) {
                const o = e["data-help-docset"];
                const n = e["data-help-topic"];
                const a = e["data-help-anchor"];
                if (a) {
                    t.push({
                        docsetId: o,
                        docsetTarget: n,
                        docsetTargetAnchor: a
                    });
                } else {
                    t.push({
                        docsetId: o,
                        docsetTarget: n
                    });
                }
            } else {
                pP(o, t);
            }
        }
    }
    return t;
};

const fP = (e, o, n, a, r) => {
    const s = [];
    for (const [n, i] of e.childNodes.entries()) {
        if (i instanceof Element) {
            const e = mP(i.attributes);
            if (i.tagName === "A" && e["data-help-docset"] && e["data-help-topic"]) {
                const a = o[uP(e["data-help-docset"], e["data-help-topic"], e["data-help-anchor"])];
                if (a) {
                    s.push(t("a", Ee({}, e, {
                        href: a,
                        target: "_blank",
                        key: n
                    }), i.textContent));
                } else {
                    s.push(i.textContent);
                }
            } else if (i.tagName === "BR") {
                s.push(t("br", null));
            } else if (i.tagName === "SPAN" && e["data-icon-name"]) {
                const o = e => e.slice(0, 1).toUpperCase() + e.slice(1);
                const i = o(e["data-icon-name"]);
                const l = r?.(i);
                const c = a?.(i);
                if (l && l.name !== "GenericKnownObject") {
                    s.push(t(MM, {
                        icon: l,
                        key: n
                    }));
                } else if (c && c.name !== "GenericKnownObject") {
                    s.push(t(hM, {
                        icon: c,
                        type: i.startsWith("Thumbnail") ? "thumbnail" : undefined,
                        key: n
                    }));
                } else {
                    s.push(t(MM, {
                        icon: zT,
                        key: n
                    }));
                }
            } else {
                s.push(fP(i, o, n, a, r));
            }
        } else if (i.textContent) {
            s.push(i.textContent);
        }
    }
    return t(e.tagName.toLowerCase(), {
        key: n,
        ...mP(e.attributes)
    }, s);
};

const gP = (e, n, a, r) => {
    const s = new DOMParser;
    const i = s.parseFromString(e, "text/html");
    return i.body.children.length === 0 ? fP(i.body, n, undefined, a, r) : t(o, null, [ ...i.body.children ].map(((e, t) => fP(e, n, t, a, r))));
};

let hP = function(e) {
    e["Standard"] = "standard";
    e["PrimaryLight"] = "primary-light";
    return e;
}({});

const bP = e => {
    if (e.ranges) {
        const o = [];
        let n = 0;
        e.ranges.forEach((([a, r], s) => {
            if (Number.isInteger(a) && Number.isInteger(r) && a >= 0 && r >= a && a >= n) {
                if (a > n) {
                    o.push(e.text.slice(n, a));
                }
                o.push(t("mark", {
                    key: s,
                    className: e.className,
                    style: e.style
                }, e.text.slice(a, r + 1)));
                n = r + 1;
            }
        }));
        if (n < e.text.length) {
            o.push(e.text.slice(n));
        }
        return o;
    }
    if (e.highlight) {
        const o = typeof e.highlight === "string" ? [ e.highlight ] : e.highlight;
        const n = new RegExp(`(${o.map(vP).join("|")})`, !e.caseSensitive ? "gi" : "g");
        return !n.test(e.text) ? e.text : e.text.split(n).map(((o, a) => n.test(o) ? t("mark", {
            key: a,
            className: e.className,
            style: e.style
        }, o) : o));
    }
    return e.text;
};

const vP = e => e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");

var yP = "sas_components-Label-Label_label";

var xP = "sas_components-Label-Label_text-container";

var SP = "sas_components-Label-Label_text";

var wP = "sas_components-Label-Label_icon";

var CP = "sas_components-Label-Label_help";

var EP = "sas_components-Label-Label_nowrap";

var IP = "sas_components-Label-Label_required-mark";

var _P = "sas_components-Label-Label_highlight";

var DP = {
    label: yP,
    textContainer: xP,
    text: SP,
    icon: wP,
    help: CP,
    nowrap: EP,
    requiredMark: IP,
    highlight: _P
};

const LP = u(((e, o) => {
    const n = C_();
    const a = n.themeVariant === "light" && e.variant === hP.PrimaryLight;
    const r = bP({
        text: e.children ?? "",
        className: DP.highlight,
        ...e.highlightableConfig
    });
    const s = WA();
    const i = {
        ...TP(n, {
            disabled: e.disabled,
            primaryLight: a,
            tokens: e.tokens
        }),
        ...e.theme?.(n)
    };
    const l = "*";
    return t("div", {
        className: ke(DP.label, e.className, e.wrapText === false && DP.nowrap),
        style: {
            ...i,
            ...e.style
        },
        "data-testid": e.testId,
        ref: e.containerRef
    }, e.icon ? t(MM, Ee({}, e.icon, {
        className: ke(e.icon.className, DP.icon),
        disabled: e.disabled,
        tokens: () => e.variant === hP.PrimaryLight ? {
            fg: e.tokens?.().fg ?? (a ? n.c.colorTextInverse : n.c.colorTextLabel)
        } : {}
    })) : null, t("span", {
        className: DP.textContainer
    }, t("label", {
        htmlFor: e.htmlFor,
        className: DP.text,
        ref: t => {
            if (e.wrapText === false && !e.suppressTooltip) {
                s(t);
            }
            D_(o, t);
        },
        id: e.id,
        "aria-disabled": e.disabled
    }, r), e.required && t("span", {
        className: DP.requiredMark,
        "aria-hidden": true
    }, l), e.helpPopup ? t(iP, Ee({
        testId: gb(e.testId, "helpPopup")
    }, e.helpPopup, {
        className: ke(e.helpPopup.className, DP.help),
        additionalAriaText: e.children
    })) : null));
}));

const TP = (e, t) => {
    let o = t?.tokens?.().fg ?? (t?.primaryLight ? e.tokensExperimental["color-text-primary-inverse"] : e.tokensExperimental["color-label-text"]);
    o = t?.disabled ? t?.primaryLight ? e.tokensExperimental["color-action-text-emphasis-disabled"] : e.tokensExperimental["color-action-text-subtle-disabled"] : o;
    return {
        ...__({
            fg: o,
            "asterisk-fg": t?.disabled ? o : e.tokensExperimental["color-status-text-alert"],
            "font-size": e.tokensExperimental["font-size-body-text-m"],
            "font-weight": e.tokensExperimental["font-style-weight-400"],
            "highlighted-bg": e.tokensExperimental["color-action-background-control-primary"],
            "highlighted-fg": e.tokensExperimental["color-text-primary-inverse"],
            "text-cursor": "text"
        }, "label"),
        ...__({
            "squish-xxs": e.tokensExperimental["space-inline-xxs"]
        }, "help-icon-spacing")
    };
};

var RP = "sas_components-Text-Text_text";

var kP = "sas_components-Text-Text_nowrap";

var AP = "sas_components-Text-Text_has-max-lines";

var MP = "sas_components-Text-Text_highlight";

var NP = "sas_components-Text-Text_right-align";

var OP = "sas_components-Text-Text_left-align";

var PP = {
    text: RP,
    nowrap: kP,
    hasMaxLines: AP,
    highlight: MP,
    rightAlign: NP,
    leftAlign: OP
};

const BP = u(((e, o) => {
    const {testId: n, dir: a, className: r, style: s, theme: i, wrapText: l, preventTruncationTooltip: c, focusable: d, disabled: u, variant: m, tokens: p, ariaLabel: f, maxLines: g, children: h, highlightableConfig: b, ...v} = e;
    const y = C_();
    const x = {
        ...zP(y, {
            disabled: u,
            variant: m,
            tokens: p
        }),
        ...i?.(y)
    };
    const S = WA();
    const w = bP({
        text: typeof h === "string" ? h : "",
        className: PP.highlight,
        ...b
    });
    const C = a ?? WN(h);
    const E = ay();
    return t("span", Ee({
        "aria-label": f,
        dir: C,
        tabIndex: d ? 0 : undefined
    }, v, {
        "aria-disabled": u,
        "data-testid": n,
        className: ke(PP.text, r, E ? PP.rightAlign : PP.leftAlign, l === false ? PP.nowrap : g !== undefined && PP.hasMaxLines),
        style: {
            ...x,
            WebkitLineClamp: l !== false ? g : undefined,
            ...s
        },
        ref: e => {
            if ((l === false || g !== undefined) && !c) {
                S(e);
            }
            D_(o, e);
        }
    }), typeof h === "string" ? w : h);
}));

const zP = (e, t) => {
    const o = {
        fg: t?.disabled ? e.tokensExperimental["color-action-text-standard-disabled"] : e.tokensExperimental["color-body-text"],
        "font-size-m": e.tokensExperimental["font-size-body-text-m"],
        "font-weight": e.tokensExperimental["font-style-weight-400"],
        "highlighted-bg": e.tokensExperimental["color-action-background-control-primary"],
        "highlighted-fg": e.tokensExperimental["color-highlight-text-inverse"]
    };
    if (e.themeVariant === "light" && t?.variant === "primary-light") {
        o.fg = t?.disabled ? e.tokensExperimental["color-action-text-standard-disabled"] : e.tokensExperimental["color-text-primary-inverse"];
    }
    return {
        ...__({
            ...o,
            ...t?.tokens && t.tokens?.({
                disabled: t?.disabled
            })
        }, "text"),
        ...!e.enableNovaTokens && FP(e, t)
    };
};

const FP = (e, t) => {
    const o = {
        fg: t?.disabled ? e.stateStandard.disabled.fg : e.themeVariant === "light" ? e.c.n_3 : e.c.white,
        "font-size-m": e.font.size.m,
        "font-weight": e.font.weight.normal,
        "highlighted-bg": e.text.highlighted.bg,
        "highlighted-fg": e.text.highlighted.fg
    };
    if (e.themeVariant === "light" && t?.variant === "primary-light") {
        o.fg = t?.disabled ? e.statePrimary.disabled.fg : e.c.white;
    }
    return {
        ...__({
            ...o,
            ...t?.tokens && t.tokens?.({
                disabled: t?.disabled
            })
        }, "text")
    };
};

const jP = u(((e, o) => t(BP, Ee({}, e, {
    ref: o
}))));

var VP = "sas_components-Checkbox-Checkbox_container";

var HP = "sas_components-Checkbox-Checkbox_no-label";

var UP = "sas_components-Checkbox-Checkbox_main";

var GP = "sas_components-Checkbox-Checkbox_disabled";

var KP = "sas_components-Checkbox-Checkbox_read-only";

var WP = "sas_components-Checkbox-Checkbox_box";

var $P = "sas_components-Checkbox-Checkbox_mixed";

var YP = "sas_components-Checkbox-Checkbox_selected";

var qP = "sas_components-Checkbox-Checkbox_label";

var XP = "sas_components-Checkbox-Checkbox_help-button";

var ZP = "sas_components-Checkbox-Checkbox_description";

var JP = {
    container: VP,
    noLabel: HP,
    main: UP,
    disabled: GP,
    readOnly: KP,
    box: WP,
    mixed: $P,
    selected: YP,
    label: qP,
    helpButton: XP,
    description: ZP
};

const QP = MA("Checkbox");

const eB = u((function e(o, n) {
    const a = QP();
    const s = C_();
    const i = c(null);
    const l = r((() => {
        const e = parseFloat(window.getComputedStyle(document.documentElement).fontSize);
        let t = parseFloat(s.enableNovaTokens ? s.tokensExperimental["font-size-body-text-m"] : s.font.size.m) * (isNaN(e) ? 16 : e);
        if (i.current) {
            t = parseFloat(window.getComputedStyle(i.current).getPropertyValue("font-size"));
        }
        const n = Math.round(t * (s.enableNovaTokens ? parseFloat(s.tokensExperimental["font-space-line-height"]) : s.font.lineHeight));
        return o.label ? `${Math.round((n - t) / 2)}px` : undefined;
    }), [ s.enableNovaTokens, s.font.lineHeight, s.font.size.m, s.tokensExperimental, o.label ]);
    const d = fO({
        traverseChildren: true
    });
    return t("div", {
        className: ke(JP.container, !o.label && JP.noLabel, o.className),
        style: o.style,
        "data-testid": o.testId
    }, t("div", {
        ref: e => {
            d(e);
            D_(n, e);
        },
        role: "checkbox",
        "data-testid": gb(o.testId, "checkbox"),
        "aria-checked": o.checked,
        className: ke(JP.main, o.disabled && JP.disabled, o.readOnly && JP.readOnly),
        "aria-disabled": o.disabled,
        "aria-readonly": o.readOnly,
        "aria-required": o.required,
        "aria-describedby": o.description ? a : undefined,
        "aria-labelledby": o.ariaLabelledBy,
        "aria-label": o.ariaLabel,
        onClick: e => {
            if (!o.disabled && !o.readOnly && !e.isDefaultPrevented()) {
                e.preventDefault();
                o.onPress?.(e);
            }
        },
        tabIndex: o.focusable === false ? -1 : 0,
        onKeyDown: e => {
            if (!o.disabled && !o.readOnly && !e.isDefaultPrevented() && e.key === " ") {
                e.preventDefault();
                o.onPress?.(e);
            }
        }
    }, o.label && t(LP, Ee({
        testId: gb(o.testId, "label")
    }, o.labelProps, {
        className: ke(JP.label, o.labelProps?.className),
        theme: () => ({
            "--label-text-cursor": "inherit",
            "--label-fg": "var(--checkbox-label-fg)"
        }),
        disabled: o.disabled,
        wrapText: o.wrapText,
        required: o.required && !o.readOnly,
        ref: e => {
            D_(i, e);
            D_(o.labelProps?.ref, e);
        }
    }), o.label), t("span", {
        className: ke(JP.box, {
            [JP.mixed]: o.checked === "mixed",
            [JP.selected]: o.checked === true
        }),
        title: o.tooltip,
        style: {
            marginTop: l
        }
    }, o.checked === true ? t(MM, {
        icon: aT,
        tokens: () => ({
            fg: "var(--checkbox-icon-fg)"
        }),
        tooltip: "",
        ariaLabel: ""
    }) : null)), o.helpPopup ? t(iP, Ee({
        className: JP.helpButton
    }, o.helpPopup, {
        additionalAriaText: o.label ?? o.ariaLabel
    })) : null, o.description && t(jP, {
        id: a,
        testId: gb(o.testId, "description"),
        className: JP.description,
        disabled: o.disabled,
        wrapText: o.wrapDescription,
        tokens: () => ({
            fg: "var(--checkbox-description-fg)"
        })
    }, o.description));
}));

const tB = u((function e(o, n) {
    const {style: a, ...s} = o;
    const i = C_();
    const l = r((() => ({
        ...oB(i, {
            disabled: s.disabled,
            readOnly: s.readOnly,
            description: s.description
        }),
        ...s.theme?.(i)
    })), [ i, s ]);
    return t(eB, Ee({}, s, {
        style: {
            ...l,
            ...a
        },
        ref: n
    }));
}));

const oB = (e, t) => {
    const {disabled: o, readOnly: n, description: a} = t ?? {};
    const r = {
        disabled: {
            bd: e.tokensExperimental["color-action-border-on-off-disabled"],
            bg: e.tokensExperimental["color-action-background-on-off-disabled"],
            fg: e.tokensExperimental["color-action-text-on-off-disabled"]
        },
        disabledSelected: {
            bd: e.tokensExperimental["color-action-border-on-off-selected-disabled"],
            bg: e.tokensExperimental["color-action-background-on-off-selected-disabled"],
            fg: e.tokensExperimental["color-action-text-on-off-selected-disabled"]
        },
        normal: {
            bd: e.tokensExperimental["color-action-border-on-off-normal"],
            bg: e.tokensExperimental["color-action-background-on-off-normal"],
            fg: e.tokensExperimental["color-action-text-on-off-normal"]
        },
        readOnly: {
            bd: e.tokensExperimental["color-action-border-on-off-read-only"],
            bg: e.tokensExperimental["color-action-background-on-off-read-only"],
            fg: e.tokensExperimental["color-action-text-on-off-read-only"]
        },
        selected: {
            bd: "transparent",
            bg: e.tokensExperimental["color-action-background-on-off-selected"],
            fg: e.tokensExperimental["color-action-text-on-off-selected"]
        }
    };
    return {
        ...__({
            "spacing-s": e.tokensExperimental["space-base-s"],
            "spacing-xs": e.tokensExperimental["space-base-xs"],
            "spacing-xxs": e.tokensExperimental["space-base-xxs"],
            "font-size-xs": e.tokensExperimental["font-size-body-text-xs"],
            "font-size-m": e.tokensExperimental["font-size-body-text-m"],
            "squish-xxs": e.tokensExperimental["space-squish-xxs"],
            "row-gap": a ? e.tokensExperimental["space-base-xs"] : 0,
            "label-fg": o ? r.disabled.fg : e.tokensExperimental["color-body-text"],
            "description-fg": o ? e.tokensExperimental["color-action-text-control-disabled"] : e.tokensExperimental["color-label-text"],
            "icon-fg": o && n ? r.disabled.fg : o ? r.disabledSelected.fg : n ? e.tokensExperimental["color-action-icon-on-off-read-only"] : r.selected.fg,
            ...r.normal
        }, "checkbox"),
        ...__(r.selected, "checkbox-selected"),
        ...__(r.disabled, "checkbox-disabled"),
        ...__(r.disabledSelected, "checkbox-disabled-selected"),
        ...__(r.readOnly, "checkbox-read-only"),
        ...!e.enableNovaTokens && nB(e, t)
    };
};

const nB = (e, t) => {
    const o = e.stateSecondaryToggle;
    let n = {
        fg: e.c.n_3,
        bg: e.c.white,
        bd: e.c.n2
    };
    let a = e.c.n_1;
    switch (e.themeVariant) {
      case "dark":
        n = {
            fg: e.c.white,
            bg: e.c.p_3,
            bd: Jv(e.c.white, .2)
        };
        a = Jv(e.c.white, .8);
        break;

      case "high-contrast":
        n = {
            fg: e.c.white,
            bg: e.c.black,
            bd: e.c.white
        };
        a = e.c.white;
        break;
    }
    return {
        ...__({
            "font-size-s": e.font.size.s,
            "font-size-m": e.font.size.m,
            "label-fg": t?.disabled ? o.disabled.fg : e.c.n_3,
            "description-fg": t?.disabled ? o.disabled.fg : a,
            ...o.normal,
            "icon-fg": t?.disabled && t?.readOnly ? o.disabled.fg : t?.disabled ? o.disabledSelected.fg : t?.readOnly ? n.fg : o.selected.fg
        }, "checkbox"),
        ...__(o.selected, "checkbox-selected"),
        ...__(o.disabled, "checkbox-disabled"),
        ...__(o.disabledSelected, "checkbox-disabled-selected"),
        ...__(n, "checkbox-read-only")
    };
};

const aB = (e, t) => oB(e, t);

var rB = "sas_components-RadioButton-__internal__-RadioButton_input-container";

var sB = "sas_components-RadioButton-__internal__-RadioButton_selected";

var iB = "sas_components-RadioButton-__internal__-RadioButton_disabled";

var lB = "sas_components-RadioButton-__internal__-RadioButton_read-only";

var cB = "sas_components-RadioButton-__internal__-RadioButton_label";

var dB = "sas_components-RadioButton-__internal__-RadioButton_normal";

var uB = "sas_components-RadioButton-__internal__-RadioButton_no-label";

var mB = "sas_components-RadioButton-__internal__-RadioButton_focus-visible";

var pB = "sas_components-RadioButton-__internal__-RadioButton_description";

var fB = "sas_components-RadioButton-__internal__-RadioButton_description-text";

var gB = "sas_components-RadioButton-__internal__-RadioButton_input";

var hB = {
    inputContainer: rB,
    selected: sB,
    disabled: iB,
    readOnly: lB,
    label: cB,
    normal: dB,
    noLabel: uB,
    focusVisible: mB,
    description: pB,
    descriptionText: fB,
    input: gB
};

const bB = MA("RadioButton");

const vB = u(((e, o) => {
    const [a, r, s] = bB(3);
    const i = c(null);
    const [l, d] = n(false);
    const u = () => {
        i.current?.focus();
    };
    const m = () => {
        d(true);
        e.onFocus?.();
    };
    const p = () => {
        d(false);
    };
    const f = t => {
        if (t.key === " ") {
            e.onPress?.();
        }
    };
    const g = c(null);
    const h = C_();
    const b = parseFloat(h.enableNovaTokens ? h.fontNova.size.m : h.font.size.m) * 16;
    const v = Math.round(b * (h.enableNovaTokens ? h.fontNova.lineHeight : h.font.lineHeight));
    const y = e.label ? `${Math.floor((v - 14) / 2)}px` : undefined;
    const x = fO({
        startElementRef: g,
        selectors: [ `.${hB.label} label` ]
    });
    return t("div", {
        className: ke(e.className),
        style: e.style,
        "data-testid": e.testId
    }, t("div", {
        ref: e => {
            g.current = e;
            D_(o, e);
        },
        className: ke(hB.normal, e.selected && hB.selected, e.disabled && hB.disabled, e.readOnly && hB.readOnly, !e.label && hB.noLabel, l && hB.focusVisible),
        tabIndex: !l && e.focusable ? 0 : -1,
        onFocus: u,
        onMouseDown: e.onPress,
        title: e.label ? undefined : e.tooltip
    }, t("span", {
        className: ke(hB.inputContainer, e.className),
        style: {
            marginTop: y
        }
    }, t("input", {
        id: a,
        ref: e => {
            x(e);
            D_(i, e);
        },
        className: hB.input,
        value: e.value,
        name: e.groupName,
        type: "radio",
        style: {
            position: "absolute",
            width: "100%",
            height: "100%",
            opacity: 0
        },
        tabIndex: l ? 0 : -1,
        onChange: e.onPress ?? (() => {}),
        onFocus: m,
        onBlur: p,
        role: "radio",
        "aria-disabled": e.disabled,
        "aria-checked": e.selected,
        "aria-labelledby": e.label ? `${r} ${e.ariaLabelledBy ?? ""}`.trim() : e.ariaLabelledBy,
        "aria-label": e.ariaLabel,
        "aria-describedby": e.description && s,
        checked: e.selected,
        onKeyDown: f
    })), e.label ? t(LP, {
        id: r,
        disabled: e.disabled,
        className: hB.label,
        wrapText: e.wrapLabel ?? true,
        tokens: () => ({
            fg: h.c.colorTextDefault
        })
    }, e.label) : null), e.description ? t("div", {
        className: hB.description
    }, t(jP, {
        id: s,
        disabled: e.disabled,
        className: ke(hB.descriptionText, e.disabled && hB.disabled),
        wrapText: e.wrapDescription ?? true
    }, e.description)) : null);
}));

const yB = u(((e, o) => {
    const n = C_();
    const a = r((() => xB(n)), [ n ]);
    return t(vB, Ee({
        ref: o
    }, e, {
        style: {
            ...a,
            ...e.style
        }
    }));
}));

const xB = e => ({
    ...__({
        "spacing-s": e.tokensExperimental["space-inline-s"],
        "spacing-xs": e.tokensExperimental["space-base-xs"],
        "spacing-xxs": e.tokensExperimental["space-base-xxs"],
        fg: e.tokensExperimental["color-action-text-control-normal"],
        bg: e.tokensExperimental["color-action-background-on-off-normal"],
        bd: e.tokensExperimental["color-action-border-on-off-normal"],
        "font-size-s": e.tokensExperimental["font-size-body-text-xs"],
        "description-fg": e.tokensExperimental["color-label-text"],
        "trans-duration": e.tokensExperimental["duration-200"],
        "trans-tf-ease-in-out": e.tokensExperimental["ease-in-out"],
        "trans-tf-ease-in": e.tokensExperimental["ease-in"],
        "trans-tf-ease-out": e.tokensExperimental["ease-out"]
    }, "radio"),
    ...__({
        fg: e.tokensExperimental["color-action-text-on-off-selected"],
        bg: e.tokensExperimental["color-action-background-on-off-selected"],
        bd: e.tokensExperimental["color-action-border-on-off-selected"]
    }, "radio-selected"),
    ...__({
        fg: e.tokensExperimental["color-action-text-on-off-disabled"],
        bg: e.tokensExperimental["color-action-background-on-off-disabled"],
        bd: e.tokensExperimental["color-action-border-on-off-disabled"]
    }, "radio-disabled"),
    ...__({
        fg: e.tokensExperimental["color-action-text-on-off-selected-disabled"],
        bg: e.tokensExperimental["color-action-background-on-off-selected-disabled"],
        bd: e.tokensExperimental["color-action-border-on-off-selected-disabled"]
    }, "radio-disabled-selected"),
    ...__({
        fg: e.tokensExperimental["color-action-icon-on-off-read-only"],
        bd: e.tokensExperimental["color-action-border-on-off-read-only"],
        bg: e.tokensExperimental["color-action-background-on-off-read-only"]
    }, "radio-read-only"),
    ...!e.enableNovaTokens && SB(e)
});

const SB = e => {
    const t = e.stateSecondaryToggle;
    let o = {
        fg: e.c.n_3,
        bg: e.c.white,
        bd: e.c.n2
    };
    switch (e.themeVariant) {
      case "dark":
        o = {
            fg: e.c.white,
            bg: e.c.p_3,
            bd: Jv(e.c.white, .2)
        };
        break;

      case "high-contrast":
        o = {
            fg: e.c.white,
            bg: e.c.black,
            bd: e.c.white
        };
        break;
    }
    return {
        ...__({
            ...t.normal,
            "font-size-s": e.font.size.s,
            "description-fg": e.c.colorTextLabel
        }, "radio"),
        ...__(t.selected, "radio-selected"),
        ...__(t.disabled, "radio-disabled"),
        ...__(t.disabledSelected, "radio-disabled-selected"),
        ...__(o, "radio-read-only")
    };
};

const wB = e => xB(e);

const CB = (e, t, o, n, a, r) => {
    const s = t === "high" ? e.tokensExperimental["font-size-body-text-s"] : e.tokensExperimental["font-size-body-text-m"];
    let i = {
        ...aB(e),
        ...wB(e),
        ...EB(e, a),
        ...I_({
            "squish-s": e.spacing.insetSquish.s.padding,
            s: e.spacing.core.s,
            xs: e.spacing.core.xs,
            xl: e.spacing.core.xl
        }, "list-spacing"),
        ...I_({
            "font-size-m": e.enableNovaTokens ? s : e.font.size.m,
            "font-size-s": e.enableNovaTokens ? e.fontNova.size.s : e.font.size.s
        }, "list"),
        ...n,
        ...!!r ? I_({
            "white-space": r
        }, "list-item") : {}
    };
    const l = o;
    if (l) {
        i = {
            ...i,
            ...I_(l({
                state: "normal"
            }), "list-item"),
            ...I_(l({
                state: "hover"
            }), "list-item-hover"),
            ...I_(l({
                state: "pressed"
            }), "list-item-active"),
            ...I_(l({
                state: "selected"
            }), "list-item-selected"),
            ...I_(l({
                state: "disabled"
            }), "list-item-disabled")
        };
    }
    return i;
};

const EB = (e, t) => {
    if (e.enableNovaTokens) {
        let o, n, a, r;
        if (t === "primary-light" && e.themeVariant === "light") {
            o = e.c.colorTextInverse;
            n = e.c.colorTextInverse;
            a = Jv(e.c.colorUiLight, .1);
            r = "var(--focus-dark-bg)";
        } else {
            o = e.c.colorTextDefault;
            n = e.stateStandardNova.hover.fg;
            a = e.stateStandardNova.hover.bg;
            r = "var(--focus-light-bg)";
        }
        return {
            "--list-item-fg": o,
            "--list-item-disabled-fg": e.stateStandardNova.disabled.fg,
            "--list-item-disabled-bg": "transparent",
            "--list-item-secondary-fg": e.c.colorTextLabel,
            "--list-item-hover-bg": a,
            "--list-item-hover-fg": n,
            "--list-item-focus-outline": r,
            "--list-item-selected-bg": e.stateStandardNova.selected.bg,
            "--list-item-selected-fg": e.stateStandardNova.selected.fg,
            "--list-item-selected-focus-outline": e.themeVariant === "high-contrast" ? "var(--focus-dark-bg)" : r,
            "--list-item-active-bg": e.stateStandardNova.active.bg,
            "--list-item-active-fg": e.stateStandardNova.active.fg,
            "--list-item-selected-filter": e.stateStandardNova.selected.filter,
            "--list-item-active-filter": e.stateStandardNova.active.filter,
            "--list-item-separator-bd": e.c.colorUiBorder,
            "--list-item-highlighted-bg": e.text.highlighted.bg,
            "--list-item-highlighted-fg": e.text.highlighted.fg
        };
    }
    switch (e.themeVariant) {
      case "dark":
        return {
            "--list-item-fg": e.c.white,
            "--list-item-disabled-fg": e.stateStandard.disabled.fg,
            "--list-item-disabled-bg": "transparent",
            "--list-item-secondary-fg": Ve(.2, e.c.white),
            "--list-item-hover-bg": Ve(.9, e.c.white),
            "--list-item-hover-fg": e.c.white,
            "--list-item-focus-outline": "var(--focus-light-bg)",
            "--list-item-selected-bg": Ve(.85, e.c.white),
            "--list-item-selected-fg": e.c.white,
            "--list-item-active-bg": Ve(.85, e.c.white),
            "--list-item-active-fg": e.stateStandard.active.fg,
            "--list-item-selected-filter": e.stateStandard.selected.filter,
            "--list-item-active-filter": e.stateStandard.active.filter,
            "--list-item-separator-bd": e.c.white15
        };

      case "high-contrast":
        return {
            "--list-item-fg": e.c.white,
            "--list-item-disabled-fg": e.stateStandard.disabled.fg,
            "--list-item-disabled-bg": "transparent",
            "--list-item-secondary-fg": e.c.white,
            "--list-item-hover-bg": e.stateStandard.hover.bg,
            "--list-item-hover-fg": e.stateStandard.hover.fg,
            "--list-item-focus-outline": "var(--focus-light-bg)",
            "--list-item-selected-bg": e.stateStandard.selected.bg,
            "--list-item-selected-fg": e.stateStandard.selected.fg,
            "--list-item-active-bg": e.stateStandard.active.bg,
            "--list-item-active-fg": e.stateStandard.active.fg,
            "--list-item-selected-filter": e.stateStandard.selected.filter,
            "--list-item-active-filter": e.stateStandard.active.filter,
            "--list-item-separator-bd": e.c.white
        };

      default:
        return {
            "--list-item-fg": e.c.n_3,
            "--list-item-disabled-fg": e.stateStandard.disabled.fg,
            "--list-item-disabled-bg": "transparent",
            "--list-item-secondary-fg": e.c.n_1,
            "--list-item-hover-bg": e.stateStandard.hover.bg,
            "--list-item-hover-fg": e.stateStandard.hover.fg,
            "--list-item-focus-outline": "var(--focus-light-bg)",
            "--list-item-selected-bg": e.stateStandard.selected.bg,
            "--list-item-selected-fg": e.stateStandard.selected.fg,
            "--list-item-active-bg": e.stateStandard.active.bg,
            "--list-item-active-fg": e.stateStandard.active.fg,
            "--list-item-selected-filter": e.stateStandard.selected.filter,
            "--list-item-active-filter": e.stateStandard.active.filter,
            "--list-item-separator-bd": e.c.n_3
        };
    }
};

const IB = (e, t) => {
    let o = {};
    if (t) {
        const n = {};
        Object.entries(t(e).font ?? {}).forEach((([e, t]) => {
            const o = e.replace(/([A-Z])/g, (e => `-${e.toLowerCase()}`));
            if (t && o) n[o] = t;
        }));
        o = I_(n, "list-item");
    }
    return o;
};

var _B = "sas_components-Menu-__internal__-MenuListDesign_listContainer";

var DB = "sas_components-Menu-__internal__-MenuListDesign_isBusy";

var LB = "sas_components-Menu-__internal__-MenuListDesign_list";

var TB = {
    listContainer: _B,
    isBusy: DB,
    list: LB
};

const RB = u((function e(o, n) {
    const a = C_();
    const {density: r} = YA();
    const s = kB(a, {
        tokenOverrides: o.tokens
    });
    const i = o.sections.some((e => !qO(e) && e.items.some((e => e.icon))));
    const l = o.disabled || !!o.sections.length && !o.sections.some((e => qO(e) || e.items.some((e => !e.disabled))));
    const c = (e, t) => e.render({
        index: t,
        key: t,
        focusLocation: o.focusLocation?.[0]?.[0] === t ? o.focusLocation : null,
        onItemHovered: o.onItemHovered,
        onItemLeaved: o.onItemLeaved
    });
    return t("div", {
        onKeyDown: o.onKeyDown,
        onKeyUp: o.onKeyUp,
        className: ke(TB.listContainer, o.className, o.isBusy && TB.isBusy),
        style: {
            ...s,
            ...o.style,
            ...o.theme?.(a)
        }
    }, o.sections.map(((e, t) => {
        if (!qO(e) || !e.showAboveMenu) return null;
        return c(e, t);
    })), t("div", {
        ref: n,
        tabIndex: o.tabIndex ?? 0,
        role: !o.isBusy ? "menu" : undefined,
        "aria-disabled": l
    }, o.isBusy ? t(DN, {
        active: true,
        delay: 0
    }) : t("ul", {
        className: ke(TB.list),
        role: "presentation",
        style: {
            ...CB(a, r),
            ...o.listTheme?.(a)
        }
    }, o.sections.map(((e, n) => {
        if (qO(e)) {
            return e.showAboveMenu ? null : c(e, n);
        }
        const a = e.items.some((e => e.closable || e.subSections));
        const r = !e.items.some((e => !e.disabled));
        return t(Az, {
            key: n,
            section: e,
            index: n,
            disabled: o.disabled || r,
            onSubmenuClosed: () => {
                o.onSubmenuClosed?.(o.menuLevel);
            }
        }, e.items.map(((s, l) => {
            if (e.selectedKey !== undefined) s.checked = e.selectedKey === s.key; else if (e.selectedIndex !== undefined) s.checked = e.selectedIndex === l;
            return t(xz, {
                key: `${l}-${s.text}`,
                ref: n === 0 && l === 0 ? o.firstItemRef : undefined,
                item: s,
                disabled: o.disabled || r || !s.subSections?.length && s.disabled,
                closable: s.closable,
                index: l,
                listIndex: MB([ n, l ], o.sections),
                sectionIndex: n,
                additionalAriaText: s.additionalAriaText,
                onSelected: o.onItemSelected,
                onClosed: o.onItemClosed,
                showFocus: o.showFocus,
                focusLocation: o.focusLocation,
                onItemHovered: o.onItemHovered,
                onItemLeaved: o.onItemLeaved,
                onSubmenuClosed: o.onSubmenuClosed,
                testId: s.testId,
                isRadio: e.selectedIndex !== undefined,
                menuHasIndentation: NB(o.sections),
                tokens: o.tokens,
                menuLevel: o.menuLevel,
                needStartIconSpacing: i,
                hasMenuItemRightIcon: a,
                onEscape: o.onKeyDown,
                onSpace: o.onKeyDown,
                popoverTheme: o.popoverTheme,
                listTheme: o.listTheme,
                menuTheme: o.theme
            });
        })));
    })))));
}));

const kB = (e, t) => ({
    ...__({
        "disabled-opacity": 1,
        "disabled-color": e.stateStandardNova.disabled.fg,
        "font-weight-thick": e.fontNova.weight.thick,
        "heading-size-small": e.tokensExperimental["font-size-body-text-s"],
        "font-family": t?.tokenOverrides?.().fontFamily ?? "inherit",
        "title-fg": e.stateStandardNova.normal.fg
    }, "menu"),
    ...__({
        "stretch-xs": e.spacing.insetStretch.xs.padding,
        "squish-s": e.spacing.insetSquish.s.padding,
        l: e.spacing.core.l,
        m: e.spacing.core.m,
        s: e.spacing.core.s,
        xs: e.spacing.core.xs
    }, "menu-spacing"),
    ...__({
        "spacing-m": e.spacing.core.m,
        "spacing-s": e.spacing.core.s,
        "spacing-xs": e.spacing.core.xs,
        "spacing-xxs": e.spacing.core.xxs,
        "font-size-m": e.fontNova.size.m,
        "font-size-s": e.fontNova.size.s,
        "font-size-xs": e.fontNova.size.xs,
        "description-fg": e.c.colorTextLabel,
        fg: undefined,
        "font-family": "inherit"
    }, "menu-list-item"),
    ...__({
        "hover-fg": e.stateStandardNova.hover.fg,
        "hover-bg": e.stateStandardNova.hover.bg,
        "active-fg": e.stateStandardNova.active.fg,
        "active-bg": e.stateStandardNova.active.bg,
        "active-filter": e.stateStandardNova.active.filter
    }, "close-button-icon"),
    ...!e.enableNovaTokens && AB(e, t)
});

const AB = (e, t) => {
    let o = "";
    let n = "";
    switch (e.themeVariant) {
      case "dark":
        o = e.c.white;
        n = e.c.white80;
        break;

      case "high-contrast":
        o = e.c.white;
        n = e.c.white;
        break;

      default:
        o = e.c.n_3;
        n = e.c.n_1;
    }
    return {
        ...__({
            "disabled-opacity": .3,
            "disabled-color": e.stateStandard.disabled.fg,
            "font-weight-thick": e.font.weight.thick,
            "heading-size-small": e.tokensExperimental["font-size-body-text-s"],
            "font-family": t?.tokenOverrides?.().fontFamily ?? "inherit",
            "title-fg": o
        }, "menu"),
        ...__({
            "font-size-m": e.font.size.m,
            "font-size-s": e.font.size.s,
            "font-size-xs": e.font.size.xs,
            "description-fg": n
        }, "menu-list-item"),
        ...__({
            "hover-fg": e.stateStandard.hover.fg,
            "hover-bg": e.stateStandard.hover.bg,
            "active-fg": e.stateStandard.active.fg,
            "active-bg": e.stateStandard.active.bg,
            "active-filter": e.stateStandard.active.filter
        }, "close-button-icon")
    };
};

function MB(e, t) {
    const [o, n] = e;
    const a = t.map((e => qO(e) ? 0 : e.items.length));
    const r = a.slice(0, o).reduce(((e, t) => e + t), 0);
    return r + n;
}

function NB(e) {
    function t(e) {
        if (Symbol.iterator in Object(e) === false) return false;
        for (const {indentation: t, subSections: o} of e) {
            if (t > 0) return true;
            if (o) return NB(o);
        }
        return false;
    }
    return e.some((e => t(e.items)));
}

let OB = function(e) {
    e["Drag"] = "drag";
    e["Drop"] = "drop";
    e["DrillDown"] = "drillDown";
    e["DrillUp"] = "drillUp";
    e["Error"] = "error";
    e["InputFull"] = "inputFull";
    e["Notification"] = "notification";
    e["PopupClose"] = "popupClose";
    e["PopupOpen"] = "popupOpen";
    e["ProcessComplete"] = "processComplete";
    return e;
}({});

var PB = new URL("../umd/assets/audio/drag.mp3", import.meta.url).href;

var BB = new URL("../umd/assets/audio/drillDown.mp3", import.meta.url).href;

var zB = new URL("../umd/assets/audio/drillUp.mp3", import.meta.url).href;

var FB = new URL("../umd/assets/audio/drop.mp3", import.meta.url).href;

var jB = new URL("../umd/assets/audio/error.mp3", import.meta.url).href;

var VB = new URL("../umd/assets/audio/inputFull.mp3", import.meta.url).href;

var HB = new URL("../umd/assets/audio/notification.mp3", import.meta.url).href;

var UB = new URL("../umd/assets/audio/popupClose.mp3", import.meta.url).href;

var GB = new URL("../umd/assets/audio/popupOpen.mp3", import.meta.url).href;

var KB = new URL("../umd/assets/audio/processComplete.mp3", import.meta.url).href;

class WB {
    constructor(e) {
        switch (e.source) {
          case OB.Drag:
            this.audio = new Audio(PB);
            break;

          case OB.DrillDown:
            this.audio = new Audio(BB);
            break;

          case OB.DrillUp:
            this.audio = new Audio(zB);
            break;

          case OB.Drop:
            this.audio = new Audio(FB);
            break;

          case OB.Error:
            this.audio = new Audio(jB);
            break;

          case OB.InputFull:
            this.audio = new Audio(VB);
            break;

          case OB.Notification:
            this.audio = new Audio(HB);
            break;

          case OB.PopupClose:
            this.audio = new Audio(UB);
            break;

          case OB.PopupOpen:
            this.audio = new Audio(GB);
            break;

          case OB.ProcessComplete:
            this.audio = new Audio(KB);
            break;

          default:
            if (e.source) {
                this.audio = new Audio(e.source);
            }
            break;
        }
        if (this.audio) {
            this.audio.onerror = () => {
                Dh("Earcon").error(`Error loading audio source '${e.source}'. Verify the path is correct.`);
            };
        }
    }
    setOnCanPlay=e => {
        if (this.audio) {
            this.audio.oncanplay = e;
        }
    };
    setOnCanPlayThrough=e => {
        if (this.audio) {
            this.audio.oncanplaythrough = e;
        }
    };
    setOnError=e => {
        if (this.audio) {
            this.audio.onerror = e;
        }
    };
    play=() => {
        if (this.audio) {
            this.audio.play();
        }
    };
    pause=() => {
        this.audio?.pause();
    };
    getPaused=() => this.audio?.paused;
    getDuration=() => this.audio?.duration;
    getCurrentTime=() => this.audio?.currentTime;
    setCurrentTime=e => {
        if (this.audio) {
            this.audio.currentTime = e;
        }
    };
    setLoop=e => {
        if (this.audio) {
            this.audio.loop = e;
        }
    };
    playFromStart=() => {
        if (this.audio) {
            this.audio.currentTime = 0;
            this.play();
        }
    };
}

const $B = e => {
    const t = jD(L_.PLAY_EARCONS)?.toString().toLocaleLowerCase() === "true";
    return r((() => new WB({
        source: t ? e.source : undefined
    })), [ e.source, t ]);
};

var YB = "sas_components-Menu-__internal__-MenuListItem_item-secondaryText";

var qB = "sas_components-Menu-__internal__-MenuListItem_item-text";

var XB = "sas_components-Menu-__internal__-MenuListItem_item-container";

var ZB = "sas_components-Menu-__internal__-MenuListItem_item";

var JB = "sas_components-Menu-__internal__-MenuListItem_disabled";

var QB = "sas_components-Menu-__internal__-MenuListItem_item-inner";

var ez = "sas_components-Menu-__internal__-MenuListItem_item-textSeparator";

var tz = "sas_components-Menu-__internal__-MenuListItem_item-icon";

var oz = "sas_components-Menu-__internal__-MenuListItem_navigation-icon";

var nz = "sas_components-Menu-__internal__-MenuListItem_focused";

var az = "sas_components-Menu-__internal__-MenuListItem_selected";

var rz = "sas_components-Menu-__internal__-MenuListItem_item-hoverable";

var sz = "sas_components-Menu-__internal__-MenuListItem_text-container";

var iz = "sas_components-Menu-__internal__-MenuListItem_has-secondaryText";

var lz = "sas_components-Menu-__internal__-MenuListItem_info-has-priority";

var cz = "sas_components-Menu-__internal__-MenuListItem_checkmark";

var dz = "sas_components-Menu-__internal__-MenuListItem_item-disabled";

var uz = "sas_components-Menu-__internal__-MenuListItem_operation-item";

var mz = "sas_components-Menu-__internal__-MenuListItem_close-button";

var pz = "sas_components-Menu-__internal__-MenuListItem_close-button-icon";

var fz = "sas_components-Menu-__internal__-MenuListItem_close-button-disabled";

var gz = "sas_components-Menu-__internal__-MenuListItem_has-icon-spacing";

var hz = "sas_components-Menu-__internal__-MenuListItem_has-right-icon";

var bz = {
    itemSecondaryText: YB,
    itemText: qB,
    itemContainer: XB,
    item: ZB,
    disabled: JB,
    itemInner: QB,
    itemTextSeparator: ez,
    itemIcon: tz,
    navigationIcon: oz,
    focused: nz,
    selected: az,
    itemHoverable: rz,
    textContainer: sz,
    hasSecondaryText: iz,
    infoHasPriority: lz,
    checkmark: cz,
    itemDisabled: dz,
    operationItem: uz,
    closeButton: mz,
    closeButtonIcon: pz,
    closeButtonDisabled: fz,
    hasIconSpacing: gz,
    hasRightIcon: hz
};

const vz = fb(at);

const yz = MA("MenuListItem");

const xz = u((function e(n, r) {
    const i = c(null);
    const l = c(null);
    const d = c(false);
    const u = ay();
    const m = vz();
    const p = WA();
    const f = c(null);
    const g = WA();
    const h = c(null);
    const b = C_();
    const v = $B({
        source: OB.Error
    });
    const [y, x, S, w, C, E] = yz(6);
    const {index: I, sectionIndex: _, onSelected: D, onClosed: L, onItemHovered: T, onItemLeaved: R, showFocus: k, item: A} = n;
    const M = () => {
        const e = [];
        const t = [];
        if (A.icon && "tooltip" in A.icon && A.icon.tooltip) e.push(A.icon.tooltip);
        if (e.length || f.current && UA(f.current) || h.current && UA(h.current)) {
            if (A.text) e.push(A.text);
            if (A.info?.infoText) e.push(A.info.infoText);
        }
        if (e.length) t.push(e.join(", "));
        if (A.tooltip) t.push(A.tooltip);
        if (A.closable && !A.subSections?.length && !n.disabled) t.push(m("item.delete.tooltip.label"));
        return t.join("\n");
    };
    const N = fO({
        getTooltip: M
    });
    const O = s((() => {
        if (A.subSections || n.disabled) return;
        D([ [ _, I ] ], A.key);
    }), [ D, _, I, A, n.disabled ]);
    const P = s(((e, t) => {
        D([ [ _, I ], ...e ], t);
    }), [ D, _, I ]);
    const B = s((() => {
        if (A.subSections || n.disabled || !A.closable || !L) return;
        L([ [ _, I ] ]);
    }), [ L, _, I, A, n.disabled ]);
    const z = s((e => {
        if (!L) return;
        L([ [ _, I ], ...e ]);
    }), [ L, _, I ]);
    const F = s((() => {
        T?.([ [ _, I ] ]);
    }), [ T, _, I ]);
    const j = s((e => {
        T?.([ [ _, I ], ...e ]);
    }), [ T, _, I ]);
    const V = s((() => {
        R?.([ [ _, I ] ]);
    }), [ R, _, I ]);
    const H = s((e => {
        R?.([ [ _, I ], ...e ]);
    }), [ R, _, I ]);
    const [U, ...G] = n.focusLocation || [];
    const K = !!U && U[0] === _ && U[1] === I;
    const W = K && n.focusLocation.length === 1;
    const $ = W && k;
    a((() => {
        $ && l.current?.focus();
    }), [ $ ]);
    const Y = A.subSections;
    let q = !!Y && !!Y.length;
    if (Y && q) {
        q = q && Y.some((e => e.title || e.items.length > 0));
    }
    const X = k ? q && K && !W : q && K;
    const Z = !A.subSections && A.closable;
    const J = K && (k || X);
    const Q = A.indentation ?? 0;
    const ee = n.additionalAriaText ?? A.tooltip;
    const te = m("item.level.aria", {
        num: (Q + 1).toString()
    });
    const oe = [];
    if (A.icon && "icon" in A.icon) oe.push(y);
    oe.push(S);
    if (A.info?.infoText) oe.push(E);
    if (ee) oe.push(w);
    if (n.menuHasIndentation) oe.push(x);
    const ne = Sz(b, {
        overrides: n.tokens,
        indentationLevel: Q
    });
    return t(o, null, t("div", {
        ref: i,
        role: "presentation",
        className: bz.itemContainer,
        onMouseEnter: !n.disabled ? F : undefined,
        onMouseLeave: !n.disabled ? V : undefined
    }, t("li", {
        id: n.id,
        "aria-labelledby": oe.join(" "),
        "aria-describedby": Z ? C : undefined,
        title: A.tooltip,
        ref: e => {
            D_(l, e);
            D_(r, e);
            if ($) N(e);
        },
        tabIndex: W ? 0 : -1,
        onBlur: () => {
            d.current = false;
        },
        onKeyDown: e => {
            d.current = true;
            if ((e.key === "Enter" || e.key === " " || e.key === "ArrowRight") && A.subSections?.length && n.disabled) {
                e.preventDefault();
                e.stopPropagation();
                v.play();
            }
        },
        onKeyUp: e => {
            if (!d.current) return;
            d.current = false;
            if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                if (A.convertKeyToMouse) {
                    l.current?.click();
                } else {
                    O();
                }
                if (!A.subSections?.length && n.disabled) v.play();
            } else if (e.key === "Delete" || bD() === fD.Mac && e.key === "Backspace") {
                e.preventDefault();
                B();
                if (A.subSections || n.disabled || !A.closable || !L) v.play();
            }
        },
        onClick: e => {
            if (!e.defaultPrevented) {
                O();
                e.preventDefault();
            }
        },
        style: ne,
        className: ke(bz.item, (q || Z) && bz.operationItem, J && !n.disabled && bz.selected, $ && bz.focused, !A.icon && n.needStartIconSpacing && bz.hasIconSpacing, !q && !Z && n.hasMenuItemRightIcon && bz.hasRightIcon, n.disabled && bz.disabled),
        "data-testid": A.testId,
        "aria-checked": A.checked,
        "aria-disabled": n.disabled ? true : undefined,
        "aria-haspopup": q ? true : undefined,
        role: A.checked === undefined ? "menuitem" : n.isRadio ? "menuitemradio" : "menuitemcheckbox"
    }, t("div", {
        className: bz.itemInner
    }, A.checked && t(MM, {
        icon: IR,
        className: ke(bz.checkmark, bz.itemIcon),
        disabled: n.disabled
    }), A.icon ? t(MM, Ee({
        id: y,
        className: bz.itemIcon
    }, "icon" in A.icon ? A.icon : {
        tooltip: "",
        ariaLabel: "",
        icon: A.icon,
        ariaHidden: true
    }, {
        disabled: n.disabled
    })) : null, t("div", {
        className: ke(bz.textContainer, A.info?.infoHasPriority && bz.infoHasPriority, A.info?.infoText && bz.hasSecondaryText)
    }, t("span", {
        id: S,
        ref: e => {
            p(e);
            f.current = e;
        },
        className: ke(bz.itemText, n.disabled && bz.itemDisabled),
        "data-testid": gb(n.testId, "text")
    }, A.text), A.info?.infoText ? t("span", {
        id: E,
        ref: e => {
            g(e);
            h.current = e;
        },
        className: ke(bz.itemSecondaryText, n.disabled && bz.itemDisabled)
    }, A.info?.infoText) : null), n.menuHasIndentation ? t(bO, {
        id: x
    }, te) : null, ee ? t(bO, {
        id: w
    }, ee) : null, Z ? t(bO, {
        id: C
    }, A.closableAriaText ?? m("item.delete.aria")) : null, q && t(MM, {
        className: bz.navigationIcon,
        icon: ET,
        disabled: n.disabled
    }), Z ? t("span", {
        className: ke(bz.closeButton, n.disabled && bz.closeButtonDisabled)
    }, t(MM, {
        testId: gb(n.testId, "closeButton"),
        tooltip: A.closeIconTooltip ?? m("item.close.icon.tooltip.label"),
        ariaHidden: true,
        icon: cT,
        className: bz.closeButtonIcon,
        tabIndex: -1,
        onClick: e => {
            B();
            e.stopPropagation();
        },
        disabled: n.disabled
    })) : null))), X ? t($O, {
        testId: gb(n.testId, "menu"),
        maxHeight: A.submenuMaxHeight,
        onKeyDown: e => {
            if (e.key === "Escape") {
                n.onEscape(e);
                e.stopPropagation();
            }
            if (e.key === " ") {
                n.onSpace(e);
                e.stopPropagation();
            }
        },
        isOpen: X,
        isSubMenu: true,
        disabled: n.disabled || A.disabled,
        sections: A.subSections,
        referenceElementRef: i,
        placement: `${u ? "left" : "right"}-start`,
        focusLocation: G || null,
        showFocus: k,
        onItemHovered: j,
        onItemLeaved: H,
        onItemSelected: P,
        onItemClosed: z,
        onSubmenuClosed: n.onSubmenuClosed,
        menuLevel: n.menuLevel ? n.menuLevel + 1 : 1,
        popoverTheme: n.popoverTheme,
        listTheme: n.listTheme,
        theme: n.menuTheme
    }) : null);
}));

const Sz = (e, t) => ({
    ...__({
        "indentation-level": t?.indentationLevel,
        "font-family": t?.overrides?.().fontFamily ?? "inherit",
        fg: t?.overrides?.().fg ?? undefined
    }, "menu-list-item"),
    ...!e.enableNovaTokens && wz(t)
});

const wz = e => __({
    "indentation-level": e?.indentationLevel,
    "font-family": e?.overrides?.().fontFamily ?? "inherit",
    fg: e?.overrides?.().fg ?? undefined
}, "menu-list-item");

var Cz = "sas_components-Divider-Divider_divider";

var Ez = {
    divider: Cz
};

const Iz = e => {
    const o = C_();
    const n = {
        ..._z(o, {
            disabled: e.disabled
        }),
        ...e.theme?.(o)
    };
    return t("hr", {
        className: ke(Ez.divider, e.className),
        style: {
            ...n,
            ...e.style
        }
    });
};

const _z = (e, t) => __({
    bd: t.disabled ? e.tokensExperimental["color-action-border-standard-disabled"] : e.tokensExperimental["color-container-border-4"]
}, "divider");

var Dz = "sas_components-Menu-__internal__-MenuListSection_title";

var Lz = "sas_components-Menu-__internal__-MenuListSection_title-disabled";

var Tz = "sas_components-Menu-__internal__-MenuListSection_divider";

var Rz = {
    title: Dz,
    titleDisabled: Lz,
    divider: Tz
};

const kz = MA("Menu-group");

const Az = e => {
    const n = kz();
    const a = WA();
    const r = e.index === 0;
    const s = !!e.section.title;
    const i = ke(Rz.title, e.disabled && Rz.titleDisabled);
    const l = t("div", {
        className: Rz.divider,
        onMouseEnter: e.onSubmenuClosed
    }, t(Iz, null));
    return s ? t("div", {
        key: e.index,
        role: "group",
        "aria-labelledby": n,
        "aria-disabled": e.disabled ? "true" : undefined
    }, !r && l, t("div", {
        ref: a,
        id: n,
        className: i,
        onMouseEnter: e.onSubmenuClosed
    }, e.section.title), e.children) : t(o, {
        key: e.index
    }, !r && l, e.children);
};

function Mz(e) {
    return e && e.length > 0 && e[e.length - 1].length === 2;
}

function Nz(e) {
    const {sections: t, isOpen: o, onDismiss: n, defaultFocusLocation: r} = e;
    const {focusLocation: i, showFocus: l, onItemHovered: d, onItemLeaved: u, onDrillDown: m, onDrillUp: p, onPrevious: f, onNext: g, onHome: h, onEnd: b, onSubmenuClosed: v, forceShowFocus: y, onTypeAhead: x} = Oz(t);
    const S = $B({
        source: OB.Error
    });
    const w = ay();
    {
        const e = c(d);
        const t = c(r);
        a((() => {
            e.current = d;
        }), [ d ]);
        a((() => {
            t.current = r;
        }), [ r ]);
        a((() => {
            if (o && t.current) {
                e.current([ t.current ]);
                y();
            } else {
                e.current(null);
            }
        }), [ o, y ]);
    }
    const C = s((e => {
        if (!o) return;
        switch (e.key) {
          case "Enter":
          case " ":
            if (!i) return S?.play();
            e.preventDefault();
            e.stopPropagation();
            if (zz(i, t)) {
                m();
            }
            return;

          case "Escape":
            e.preventDefault();
            e.stopPropagation();
            if (i && i.length > 1) {
                return p();
            }
            return n && n(true);

          case "Tab":
            return n && n(true);

          case "ArrowLeft":
            return w ? m() : p();

          case "ArrowUp":
            e.preventDefault();
            return f();

          case "ArrowRight":
            return w ? p() : m();

          case "ArrowDown":
            e.preventDefault();
            return g();

          case "Home":
            e.preventDefault();
            return h();

          case "End":
            e.preventDefault();
            return b();

          case "Delete":
            if (!i) S?.play();
            return;

          default:
            if (e.key.length === 1) {
                return x(e.key);
            }
            return;
        }
    }), [ o, i, t, w, n, g, f, h, b, m, p, x, S ]);
    return {
        focusLocation: i,
        showFocus: l,
        onKeyDown: C,
        onItemHovered: d,
        onItemLeaved: u,
        onSubmenuClosed: v
    };
}

function Oz(e) {
    const [t, o] = n(null);
    const [r, i] = n(false);
    const l = $B({
        source: OB.Error
    });
    const c = s((t => {
        if (!jz(t, e)) return;
        i(false);
        o(t);
    }), [ e ]);
    const d = s((n => {
        if (!n?.length || !t?.length || !jz(n, e)) return;
        if (r || zz(n, e) || !n.some(((e, o) => e[0] !== t[o][0] || e[1] !== t[o][0]))) return;
        o(t.slice(0, -1));
    }), [ r, t, e ]);
    const u = s((t => {
        if (!jz(t, e)) return;
        i(true);
        o(t);
    }), [ e ]);
    const m = s((() => {
        if (!t || !Fz(t)) return l?.play();
        u(t.slice(0, t.length - 1));
    }), [ t, u, l ]);
    const p = s((() => {
        if (!t || !zz(t, e)) return l?.play();
        u([ ...t, [ 0, 0 ] ]);
    }), [ t, e, u, l ]);
    const f = s((o => {
        const n = Pz(t, e);
        if (n.length === 0) return;
        const a = t ? t.slice(0, t.length - 1) : [];
        const r = t?.[t.length - 1];
        const [s, i = -1] = o || !r ? [ -1 ] : r;
        const l = n[s];
        let c;
        if (l && (qO(l) && l.focusableCount && l.focusableCount > i + 1 || !qO(l) && l.items.length > i + 1)) {
            c = [ s, i + 1 ];
        } else {
            c = Vz(s, n);
        }
        if (c) u([ ...a, c ]);
    }), [ t, e, u ]);
    const g = s((o => {
        const n = Pz(t, e);
        if (n.length === 0) return;
        const a = t ? t.slice(0, t.length - 1) : [];
        const r = t?.[t.length - 1];
        const [s, i = -1] = o || !r ? [ n.length ] : r;
        const l = n[s];
        let c;
        if (i > 0 && l && (qO(l) && l.focusableCount && l.focusableCount > 0 || !qO(l))) {
            c = [ s, i - 1 ];
        } else {
            c = Vz(s, n, true);
        }
        if (c) u([ ...a, c ]);
    }), [ t, e, u ]);
    const h = s((t => o((o => {
        const n = (t ?? 0) + 1;
        const a = o?.length ?? 0;
        if (n <= a) {
            const t = o ? o.slice(0, n) : [];
            if (jz(t, e)) {
                i(true);
                return t;
            }
        }
        return o;
    }))), [ e ]);
    const b = s((o => {
        const n = Pz(t, e);
        if (n.length === 0) return;
        const a = t ? t.slice(0, t.length - 1) : [];
        const r = t?.[t.length - 1];
        let s;
        let i = false;
        for (let e = 0; e < n.length; e++) {
            const t = n[e];
            if (!qO(t)) {
                const n = t.items;
                for (let t = 0; t < n.length; t++) {
                    const a = n[t];
                    if (a.text.toLowerCase().startsWith(o.toLowerCase())) {
                        const o = [ e, t ];
                        s = s ?? o;
                        if (r) {
                            const n = r[0];
                            const a = r[1];
                            if (e === n && t > a || e > n) {
                                s = o;
                                i = true;
                                break;
                            }
                        } else {
                            i = true;
                            break;
                        }
                    }
                }
            }
            if (i) break;
        }
        if (s) u([ ...a, s ]); else l?.play();
    }), [ t, e, u, l ]);
    const v = s((() => f(true)), [ f ]);
    const y = s((() => g(true)), [ g ]);
    const x = s((() => i(true)), []);
    a((() => {
        if (!t) return;
        let n;
        const a = t.length;
        for (let r = 0; r < a; r++) {
            const s = t[r];
            const i = s[0];
            const l = s[1];
            n = n ? n : e;
            const c = n[i];
            if (c) {
                if (qO(c)) return;
                const e = c.items;
                const t = e[l];
                if (t) {
                    if (r < a - 1) n = t.subSections;
                } else if (l === e.length) {
                    return f();
                }
            } else {
                if (n.length === 0) {
                    return r === 0 ? o(null) : m();
                }
                return f();
            }
        }
    }), [ t, e, f, m ]);
    return {
        focusLocation: t,
        showFocus: r,
        onItemHovered: c,
        onItemLeaved: d,
        onDrillUp: m,
        onDrillDown: p,
        onNext: f,
        onPrevious: g,
        onHome: v,
        onEnd: y,
        onSubmenuClosed: h,
        forceShowFocus: x,
        onTypeAhead: b
    };
}

function Pz(e, t) {
    if (!e) return t;
    let o = null;
    let n = t;
    for (const [t, a] of e) {
        if (o) {
            if (!o.subSections) break;
            n = o.subSections;
        }
        const e = n?.[t];
        if (!e) break;
        if (qO(e) || a === undefined) break;
        o = e?.items[a];
        if (!o || !o.subSections) break;
    }
    return n;
}

function Bz(e, t) {
    const o = Pz(e, t);
    const [n, a] = e[e.length - 1];
    if (n === undefined || a === undefined) return undefined;
    const r = o[n];
    if (qO(r)) return undefined;
    return r.items[a];
}

function zz(e, t) {
    const o = Bz(e, t);
    return !!o && !!o.subSections && o.subSections.length > 0;
}

function Fz(e) {
    return e && e.length > 1;
}

function jz(e, t) {
    if (!e) return true;
    const [o, n] = e[e.length - 1];
    if (o === undefined || n === undefined) return false;
    const a = Pz(e, t);
    const r = a[o];
    if (qO(r)) return !!r.focusableCount && r.focusableCount > n;
    return !!r.items[n];
}

function Vz(e, t, o) {
    let n = e;
    do {
        if (!o && ++n >= t.length) n = 0; else if (o && --n < 0) n = t.length - 1;
        const e = t[n];
        if (qO(e)) {
            if (e.focusableCount && e.focusableCount > 0) return [ n, o ? e.focusableCount - 1 : 0 ];
        } else {
            return [ n, o ? e.items.length - 1 : 0 ];
        }
    } while (n !== e);
}

const Hz = e => t(vO, e);

var Uz = "sas_components-SplitButton-__internal__-BaseSplitButton_container";

var Gz = "sas_components-SplitButton-__internal__-BaseSplitButton_button";

var Kz = "sas_components-SplitButton-__internal__-BaseSplitButton_menu";

var Wz = "sas_components-SplitButton-__internal__-BaseSplitButton_active";

var $z = {
    container: Uz,
    button: Gz,
    menu: Kz,
    active: Wz
};

const Yz = MA("SplitButton");

const qz = fb(st);

const Xz = u((function e({disabled: o, onItemSelected: a, onPress: r, variant: s, tokens: i, theme: l, items: d, text: u, className: m, style: p, updateButtonAction: f = false, menuAlign: g, testId: h, focusable: b = true, autoFocus: v, ...y}, x) {
    const S = s || oN.Standard;
    const [w, C] = n(-1);
    const [E, I] = n();
    const [_, D] = n(false);
    const L = qz();
    const T = c(null);
    const R = C_();
    const k = {
        ...Zz(R, {
            disabled: o,
            variant: S,
            tokens: i
        }),
        ...l?.(R, {
            disabled: o ?? false
        })
    };
    const {handleDismiss: A, handleMouseDown: M, handlePress: N, setMenuIsOpen: O, menuIsOpen: P} = ZO({
        disabled: o,
        onDismiss: () => {
            T.current?.focus();
            y.onClose?.();
        },
        onOpen: () => {
            C(-1);
            y.onOpen?.();
        }
    });
    if (f && E !== undefined) {
        const e = d[E];
        u = typeof e === "string" ? e : e.text;
    }
    const B = WA();
    const z = fO({
        traverseChildren: true
    });
    const F = function(e) {
        if (!o && !P) {
            if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                D(true);
            }
            if (e.key === "ArrowDown" || e.key === "ArrowUp") {
                e.preventDefault();
                O(true);
                y.onOpen?.();
                C(e.key === "ArrowDown" ? 0 : d.length - 1);
            }
        }
    };
    const j = function(e) {
        if (!o && !P) {
            if ((e.key === "Enter" || e.key === " ") && _) {
                D(false);
                H();
            }
        }
    };
    const V = function(e) {
        const t = e[0][1];
        a(t);
        O(false);
        y.onClose?.();
        if (f) {
            I(t);
        }
        T.current?.focus();
    };
    const H = function() {
        if (f && E !== undefined) {
            a(E);
        } else {
            r?.();
        }
    };
    const U = Yz();
    const G = [];
    if (!o) {
        G.push(U);
    }
    if (y.ariaDescribedBy) {
        if (typeof y.ariaDescribedBy === "string") {
            G.push(y.ariaDescribedBy);
        } else {
            G.push(...y.ariaDescribedBy);
        }
    }
    return t("div", {
        ref: e => {
            T.current = e;
            D_(x, e);
            B(e);
            z(e);
        },
        role: "group",
        "aria-roledescription": y.ariaRoleDescription === "" ? undefined : y.ariaRoleDescription ?? L("role.aria"),
        "aria-expanded": P,
        "aria-haspopup": "menu",
        "aria-label": u,
        "aria-describedby": G.join(" "),
        "aria-disabled": o,
        "aria-current": y.ariaCurrent,
        className: ke($z.container, m),
        "data-testid": h,
        tabIndex: b ? 0 : -1,
        onKeyDown: F,
        onKeyUp: j,
        style: {
            ...k,
            ...p
        },
        onBlur: () => D(false),
        "data-autofocus": v,
        onFocus: y.onFocus
    }, !o ? t(bO, {
        id: U
    }, L("button.aria")) : null, t(ZM, {
        className: ke($z.button, !o && _ && $z.active, y.buttonClassName),
        focusable: false,
        disabled: o,
        onPress: H,
        text: u,
        variant: s,
        theme: () => ({
            "--button-fg": undefined,
            "--button-active-fg": undefined,
            "--button-hover-fg": undefined,
            "--button-bg": undefined,
            "--button-active-bg": undefined,
            "--button-hover-bg": undefined,
            "--button-bd": undefined,
            "--button-active-bd": undefined,
            "--button-hover-bd": undefined,
            "--button-opacity": undefined,
            "--button-active-opacity": undefined,
            "--button-hover-opacity": undefined,
            "--button-filter": undefined,
            "--button-active-filter": undefined,
            "--button-hover-filter": undefined
        }),
        style: y.buttonStyle,
        testId: gb(h, "actionButton")
    }), t(ZM, {
        className: ke($z.menu, !o && P && $z.active),
        icon: {
            icon: CT,
            tooltip: ""
        },
        focusable: false,
        disabled: o,
        variant: s,
        onPress: N,
        onMouseDown: M,
        theme: () => {
            if (P && s === oN.Primary && R.themeVariant === "high-contrast") {
                return {
                    "--button-fg": R.tokensExperimental["color-action-text-emphasis-selected"],
                    "--button-active-fg": R.tokensExperimental["color-action-text-emphasis-selected"],
                    "--button-hover-fg": R.tokensExperimental["color-action-text-emphasis-selected"],
                    "--button-bg": undefined,
                    "--button-active-bg": undefined,
                    "--button-hover-bg": undefined,
                    "--button-bd": undefined,
                    "--button-active-bd": undefined,
                    "--button-hover-bd": undefined,
                    "--button-opacity": undefined,
                    "--button-active-opacity": undefined,
                    "--button-hover-opacity": undefined,
                    "--button-filter": undefined,
                    "--button-active-filter": undefined,
                    "--button-hover-filter": undefined
                };
            }
            if (!R.enableNovaTokens && P && R.themeVariant === "high-contrast") {
                return {
                    "--button-fg": R.stateStandard.active.fg,
                    "--button-active-fg": R.stateStandard.active.fg,
                    "--button-hover-fg": R.stateStandard.active.fg,
                    "--button-bg": undefined,
                    "--button-active-bg": undefined,
                    "--button-hover-bg": undefined,
                    "--button-bd": undefined,
                    "--button-active-bd": undefined,
                    "--button-hover-bd": undefined,
                    "--button-opacity": undefined,
                    "--button-active-opacity": undefined,
                    "--button-hover-opacity": undefined,
                    "--button-filter": undefined,
                    "--button-active-filter": undefined,
                    "--button-hover-filter": undefined
                };
            }
            return {
                "--button-fg": undefined,
                "--button-active-fg": undefined,
                "--button-hover-fg": undefined,
                "--button-bg": undefined,
                "--button-active-bg": undefined,
                "--button-hover-bg": undefined,
                "--button-bd": undefined,
                "--button-active-bd": undefined,
                "--button-hover-bd": undefined,
                "--button-opacity": undefined,
                "--button-active-opacity": undefined,
                "--button-hover-opacity": undefined,
                "--button-filter": undefined,
                "--button-active-filter": undefined,
                "--button-hover-filter": undefined
            };
        },
        ariaLabel: L("menubutton.aria"),
        testId: gb(h, "menuButton")
    }), t(Hz, {
        isOpen: P,
        sections: [ {
            items: d.map((e => typeof e === "string" ? {
                text: e
            } : e))
        } ],
        position: {
            dockingElement: T.current,
            ...g
        },
        onItemSelected: V,
        onDismiss: A,
        defaultFocusLocation: [ 0, w ],
        theme: () => ({
            "--menu-font-family": i?.({}).fontFamily ?? k["--button-fontFamily"]
        })
    }));
}));

const Zz = (e, t) => ({
    ...eN(e, {
        disabled: t.disabled,
        variant: t.variant,
        tokens: t.tokens
    }),
    "--split-button-divider": t.variant === oN.Primary || t.variant === oN.PrimarySmall ? t.disabled ? e.tokensExperimental["color-action-border-emphasis-disabled"] : e.tokensExperimental["color-action-text-emphasis-normal"] : t.disabled ? e.tokensExperimental["color-action-border-standard-disabled"] : e.tokensExperimental["color-action-border-standard-normal"],
    "--split-button-menu-padding": t.variant === oN.Small || t.variant === oN.PrimarySmall ? e.tokensExperimental["space-base-xs"] : e.tokensExperimental["space-squish-s"]
});

const Jz = u((function e(o, n) {
    return t(Xz, Ee({}, o, {
        ref: n
    }));
}));

var Qz = "sas_components-Dialog-Dialog_dialog";

var eF = "sas_components-Dialog-Dialog_with-sub-content-footer";

var tF = "sas_components-Dialog-Dialog_dialog-inner";

var oF = "sas_components-Dialog-Dialog_dialog-header";

var nF = "sas_components-Dialog-Dialog_dialog-title";

var aF = "sas_components-Dialog-Dialog_accent-icon";

var rF = "sas_components-Dialog-Dialog_dialog-content";

var sF = "sas_components-Dialog-Dialog_dialog-footer";

var iF = "sas_components-Dialog-Dialog_dialog-sub-footer";

var lF = "sas_components-Dialog-Dialog_dialog-footer-controls";

var cF = "sas_components-Dialog-Dialog_dialog-footer-buttons";

var dF = "sas_components-Dialog-Dialog_close-icon-wrapper";

var uF = "sas_components-Dialog-Dialog_close-icon";

var mF = "sas_components-Dialog-Dialog_drag-cursor";

var pF = "sas_components-Dialog-Dialog_no-drag-cursor";

var fF = "sas_components-Dialog-Dialog_drag-icon";

var gF = "sas_components-Dialog-Dialog_drag-icon-wrapper";

var hF = "sas_components-Dialog-Dialog_accent";

var bF = "sas_components-Dialog-Dialog_header-image";

var vF = "sas_components-Dialog-Dialog_header-logo";

var yF = "sas_components-Dialog-Dialog_busy-state-indicator-container";

var xF = {
    dialog: Qz,
    withSubContentFooter: eF,
    dialogInner: tF,
    dialogHeader: oF,
    dialogTitle: nF,
    accentIcon: aF,
    dialogContent: rF,
    dialogFooter: sF,
    dialogSubFooter: iF,
    dialogFooterControls: lF,
    dialogFooterButtons: cF,
    closeIconWrapper: dF,
    closeIcon: uF,
    dragCursor: mF,
    noDragCursor: pF,
    dragIcon: fF,
    dragIconWrapper: gF,
    accent: hF,
    headerImage: bF,
    headerLogo: vF,
    busyStateIndicatorContainer: yF
};

const SF = MA("dialog-header");

const wF = MA("dialog-accent-icon");

const CF = u(((e, r) => {
    const i = NA("Dialog");
    const l = C_();
    const d = ay();
    const u = e.role ?? "dialog";
    const m = SF();
    const p = wF();
    const f = c(null);
    const g = e.customFooterAlignment ?? "left";
    const h = e.draggable ?? true;
    const b = {
        drag: true,
        dragListener: false,
        dragConstraints: f,
        dragElastic: false,
        dragMomentum: false
    };
    const v = h === true ? b : typeof h === "object" ? {
        ...b,
        ...h
    } : false;
    const y = typeof v === "object" && Object.keys(v).length > 0 ? v : undefined;
    const x = e.resizable ?? false;
    const S = c(null);
    const w = c(null);
    const C = c(null);
    const E = c(false);
    const I = jA(e.size?.maxWidth);
    const _ = jA(e.size?.maxHeight);
    const D = Oe(_ > 0 ? _ : document.documentElement.clientHeight - 64);
    const L = Oe(I > 0 ? I : document.documentElement.clientWidth - 64);
    const T = e.accent ? `${p} ${m}` : m;
    const [R, k] = n(e.size ?? {});
    const {viewportWidth: A, viewportHeight: M} = N();
    function N() {
        return {
            viewportWidth: document.documentElement.clientWidth || 0,
            viewportHeight: document.documentElement.clientHeight || 0
        };
    }
    const O = {
        ...EF(l, {
            accent: e.accent,
            variant: e.variant,
            contentPadding: e.contentPadding,
            footerControls: !!e.footerControls,
            renderCustomFooter: !!e.renderCustomFooter
        }),
        ...e.theme?.(l)
    };
    let P;
    switch (e.accent) {
      case "alert":
        P = Yk;
        break;

      case "warning":
        P = CA;
        break;

      default:
        P = oA;
    }
    const B = !e.hideCloseIcon && e.dismissAction ? t("div", {
        className: xF.closeIconWrapper
    }, t(QM, {
        testId: gb(e.testId, "closeIconBtn"),
        className: xF.closeIcon,
        variant: oN.Icon,
        icon: {
            icon: lT,
            theme: () => ({
                "--icon-default-override-fg": l.themeVariant === "light" ? "var(--dialog-header-fg)" : undefined
            })
        },
        ariaLabel: i("dialog.close.aria", {
            title: e.title
        }),
        onPress: e.dismissAction?.onPress,
        style: e.variant === "alternate" && (l.themeVariant === "light" || l.themeVariant === "high-contrast") ? {
            ["--button-focus-outline"]: "var(--focus-dark-bg)"
        } : undefined
    })) : null;
    let z = undefined;
    if (e.firstAction?.isDefault) {
        z = "first";
    } else if (e.secondAction?.isDefault) {
        z = "second";
    } else if (e.dismissAction?.isDefault) {
        z = "dismiss";
    }
    const F = t => {
        if (t.defaultPrevented) return;
        if (e.busyStateIndicatorProps?.active) {
            t.preventDefault();
            return;
        }
        E.current = true;
        if (!BA(t) && t.key === "Escape") {
            t.stopPropagation();
            e.dismissAction?.onPress?.();
        }
        if (!BA(t) && t.key === "Enter") {
            if (e.firstAction?.isDefault && !e.firstAction?.disabled) {
                t.preventDefault();
                e.firstAction.onPress?.();
            } else if (e.secondAction?.isDefault && !e.secondAction?.disabled) {
                t.preventDefault();
                e.secondAction.onPress?.();
            } else if (e.dismissAction?.isDefault && !e.dismissAction?.disabled) {
                t.preventDefault();
                e.dismissAction.onPress?.();
            }
        }
    };
    a((() => {
        if (!S.current || !w.current || !C.current) return;
        const e = S.current;
        const t = w.current;
        const o = C.current;
        const n = e.style.minWidth;
        const a = e.style.maxWidth;
        const r = e.style.width;
        e.style.width = "0";
        const s = e.offsetWidth;
        e.style.width = "";
        e.style.maxWidth = "none";
        e.style.minWidth = "0";
        t.style.display = "none";
        o.style.display = "none";
        const i = e.offsetWidth;
        e.style.width = r;
        e.style.maxWidth = a;
        e.style.minWidth = n;
        t.style.display = "";
        o.style.display = "";
        let l = s;
        if (i > l) {
            l = i;
            k((e => ({
                ...e,
                minWidth: l
            })));
        }
    }), [ R.minWidth ]);
    function j() {
        return !!(e.firstAction?.initialFocus || e.secondAction?.initialFocus || e.dismissAction?.initialFocus);
    }
    const V = Pe();
    function H(e) {
        V.start(e, {
            snapToCursor: false
        });
    }
    const U = Oe(0);
    const G = Oe(0);
    const [K, W] = Be();
    const $ = c();
    const [Y, q] = n(false);
    const X = 5;
    const Z = s((e => {
        switch (e.key) {
          case "ArrowLeft":
            {
                const e = U.get();
                const t = $.current?.left ?? A / 2;
                U.set(Math.max(e - X, t));
                break;
            }

          case "ArrowRight":
            {
                const e = U.get();
                const t = $.current?.right ?? A / 2;
                U.set(Math.min(e + X, t));
                break;
            }

          case "ArrowUp":
            {
                const e = G.get();
                const t = $.current?.top ?? M / 2;
                G.set(Math.max(e - X, t));
                break;
            }

          case "ArrowDown":
            {
                const e = G.get();
                const t = $.current?.bottom ?? M / 2;
                G.set(Math.min(e + X, t));
                break;
            }
        }
    }), [ U, G, M, A ]);
    const J = y ? t("div", {
        role: "img",
        tabIndex: 0,
        className: xF.dragIconWrapper,
        onKeyDown: Z,
        "data-testid": gb(e.testId, "dragIcon"),
        title: i("dialog.dragIcon.label"),
        "aria-label": i("dialog.dragIcon.aria")
    }, t(MM, {
        theme: () => ({
            "--icon-default-override-fg": "var(--dialog-header-fg)"
        }),
        className: xF.dragIcon,
        icon: YT,
        tooltip: "",
        ariaLabel: ""
    })) : null;
    const Q = x ? t(dO, {
        resizableElementRef: S,
        onResize: e => {
            const t = U.get();
            const o = G.get();
            const n = $.current;
            k((t => {
                if (jA(t.height) >= e.height) {
                    ne.current = e.height;
                    return {
                        ...t,
                        height: e.height
                    };
                } else {
                    if (n && Math.abs(o - n.bottom) >= 5) {
                        ne.current = e.height;
                        return {
                            ...t,
                            height: e.height
                        };
                    }
                }
                return t;
            }));
            k((o => {
                if (jA(o.width) >= e.width) {
                    oe.current = e.width;
                    return {
                        ...o,
                        width: e.width
                    };
                } else {
                    if (n && Math.abs(t - (d ? n.left : n.right)) >= 5) {
                        oe.current = e.width;
                        return {
                            ...o,
                            width: e.width
                        };
                    }
                }
                return o;
            }));
        },
        setIsDragging: q,
        testId: gb(e.testId, "resizeGripIcon"),
        tooltip: i("dialog.gripIcon.label"),
        ariaLabel: i("dialog.gripIcon.aria")
    }) : null;
    const ee = s((() => {
        const {viewportWidth: e, viewportHeight: t} = N();
        let o;
        let n = t;
        let a = e;
        if (LF(y?.dragConstraints) && y?.dragConstraints?.current) {
            o = y?.dragConstraints?.current?.getBoundingClientRect();
            n = o.height;
            a = o.width;
        }
        const r = jA(R.maxWidth);
        const s = jA(R.maxHeight);
        return {
            maxWidth: r > 0 ? r : a,
            maxHeight: s > 0 ? s : n
        };
    }), [ R.maxWidth, R.maxHeight, y?.dragConstraints ]);
    const te = s(((e, t, o) => {
        const n = S.current;
        if (!n || !o) return;
        const a = Math.abs(e - (d ? o.left : o.right));
        const r = Math.abs(t - o.bottom);
        const s = n.getBoundingClientRect();
        const {maxWidth: i, maxHeight: l} = ee();
        W(K.current, {
            maxHeight: Math.min(s?.height + r, l),
            maxWidth: Math.min(s?.width + a, i)
        });
    }), [ K, W, d, ee ]);
    const oe = c(null);
    const ne = c(null);
    a((() => {
        if (!S.current) return;
        const e = S.current.getBoundingClientRect();
        const {maxWidth: t, maxHeight: o} = ee();
        let n = d ? e?.width / 2 : -(e?.width / 2);
        let a = -(e?.height / 2);
        if (e.height > o) {
            a = -(o / 2);
        }
        if (e.width > t) {
            n = d ? t / 2 : -(t / 2);
        }
        U.set(n);
        G.set(a);
        if (f.current) {
            oe.current = Math.min(e.width, t);
            ne.current = Math.min(e.height, o);
        }
    }), [ d, U, G, ee ]);
    a((() => {
        const e = () => {
            if (!(f.current && S.current)) return;
            const e = S.current;
            const t = e.getBoundingClientRect();
            let o = t.width;
            let n = t.height;
            const a = f.current.getBoundingClientRect();
            const r = a.width;
            const s = a.height;
            if (oe.current !== null && ne.current !== null) {
                o = oe.current <= r ? oe.current : f.current.getBoundingClientRect().width;
                n = ne.current <= s ? ne.current : f.current.getBoundingClientRect().height;
                if (R.width !== undefined && R.height !== undefined) k((e => ({
                    ...e,
                    width: o,
                    height: n
                })));
            }
            const i = (r - o) / 2;
            const l = (s - n) / 2;
            const c = i - r / 2;
            const u = l - s / 2;
            U.set(d ? -c : c);
            G.set(u);
            te(c, u, $.current);
        };
        const t = () => {
            setTimeout(e, 0);
        };
        window.addEventListener("resize", t);
        return () => {
            window.removeEventListener("resize", t);
        };
    }), [ d, U, G, S, te, R ]);
    const ae = e.hideAnimation ? undefined : {
        hidden: {
            scale: .5,
            opacity: 0,
            transition: {
                type: "tween",
                duration: .25,
                ease: [ 0, .5, .2, 1 ]
            }
        }
    };
    return t(o, null, t("div", {
        ref: f,
        style: {
            position: "fixed",
            inset: 32,
            zIndex: -1,
            pointerEvents: "none"
        }
    }), t(Ne.div, Ee({
        exit: "hidden",
        variants: ae
    }, y ? {
        ...y
    } : {}, {
        dragControls: V,
        onMeasureDragConstraints: e => {
            $.current = e;
            const t = U.get();
            const o = G.get();
            if (!Y) {
                te(t, o, e);
            }
        },
        onDragStart: () => {
            q(true);
        },
        onDragEnd: () => {
            q(false);
        },
        "data-testid": gb(e.testId, "dialog"),
        ref: e => {
            S.current = e;
            D_(r, e);
            D_(K, e);
        },
        role: u,
        "aria-labelledby": T,
        className: ke(xF.dialog, e.subContentFooterControl && xF.withSubContentFooter, e.className),
        style: {
            ...O,
            ...e.style,
            x: U,
            y: G,
            ...R,
            maxWidth: L,
            maxHeight: D
        },
        "aria-describedby": e.ariaDescribedBy,
        "aria-label": e.ariaLabel,
        onKeyDown: F,
        onMouseDown: () => {
            E.current = true;
        }
    }), t("div", {
        className: xF.dialogInner,
        role: e.isModal === false ? "region" : undefined,
        "data-landmark-label": e.isModal === false ? e.landmarkLabel ?? e.title : undefined,
        style: {
            minHeight: R.minHeight
        }
    }, t(DN, Ee({}, e.busyStateIndicatorProps, {
        fillParentContainer: true,
        containerClassName: xF.busyStateIndicatorContainer
    }), t("div", {
        ref: w,
        "data-testid": gb(e.testId, "header"),
        className: ke(xF.dialogHeader, y && xF.dragCursor, e.accent ? xF.accent : undefined),
        onPointerDown: H,
        onMouseDown: e => {
            document.activeElement?.blur();
            e.preventDefault();
        }
    }, e.headerImage ? t(hM, {
        className: xF.headerImage,
        icon: e.headerImage
    }) : null, e.headerLogo ? t(hM, {
        className: xF.headerLogo,
        icon: e.headerLogo
    }) : null, t(oO, {
        testId: gb(e.testId, "heading"),
        id: m,
        level: e.isModal ? 1 : 2,
        className: ke(xF.dialogTitle, xF.noDragCursor),
        variant: nO.PrimaryLight,
        wrapText: e.titleWrapText,
        icon: e.accent ? {
            icon: P,
            className: xF.accentIcon
        } : undefined
    }, e.title)), B, t("section", Ee({
        ref: C,
        className: xF.dialogContent
    }, !j() && {
        ["data-autofocus-inside"]: true
    }), e.children), e.subContentFooterControl ? t("div", Ee({
        className: xF.dialogSubFooter,
        "data-testid": gb(e.testId, "subContentFooter")
    }, !j() && {
        ["data-autofocus-inside"]: true
    }), e.subContentFooterControl) : null, e.footerControls || e.firstAction || e.secondAction || e.dismissAction || e.renderCustomFooter ? t("div", Ee({
        "data-testid": gb(e.testId, "footer"),
        className: xF.dialogFooter
    }, z === undefined && !j() && {
        ["data-autofocus-inside"]: true
    }), e.renderCustomFooter && g === "left" && t("div", {
        "data-autofocus-inside": true,
        "data-testid": gb(e.testId, "footerControls")
    }, e.renderCustomFooter?.()), e.footerControls && t("div", {
        className: xF.dialogFooterControls,
        "data-autofocus-inside": true,
        "data-testid": gb(e.testId, "footerControls")
    }, e.footerControls), t(iN, {
        spacing: "s",
        className: xF.dialogFooterButtons
    }, e.firstAction ? t(DF, {
        buttonRef: e.firstActionRef,
        action: e.firstAction,
        isDefault: z === "first",
        testId: gb(e.testId, "firstButton")
    }) : null, e.secondAction ? t(DF, {
        buttonRef: e.secondActionRef,
        action: e.secondAction,
        isDefault: z === "second",
        testId: gb(e.testId, "secondButton")
    }) : null, e.dismissAction ? t(DF, {
        buttonRef: e.dismissActionRef,
        action: e.dismissAction,
        isDefault: z === "dismiss",
        testId: gb(e.testId, "dismissButton")
    }) : null), e.renderCustomFooter && g === "right" && t("div", {
        "data-autofocus-inside": true,
        "data-testid": gb(e.testId, "footerControls")
    }, e.renderCustomFooter?.())) : null, Q, J))));
}));

const EF = (e, t) => {
    let o = {};
    const n = t?.variant === "alternate";
    if (!t?.accent) {
        switch (e.themeVariant) {
          case "dark":
            o = {
                "drag-icon-focus": "var(--focus-light-bg)"
            };
            break;

          case "high-contrast":
            o = {
                "drag-icon-focus": n ? "var(--focus-dark-bg)" : "var(--focus-light-bg)"
            };
            break;

          default:
            o = {
                "drag-icon-focus": "var(--focus-dark-bg)"
            };
        }
    }
    let a;
    if (t?.accent) {
        switch (t?.accent) {
          case "alert":
            a = {
                accent: e.tokensExperimental["color-status-alert"],
                bg: "transparent",
                "drag-icon-focus": "var(--focus-light-bg)"
            };
            break;

          case "warning":
            a = {
                accent: e.tokensExperimental["color-status-warning"],
                bg: "transparent",
                "drag-icon-focus": "var(--focus-light-bg)"
            };
            break;

          default:
            a = {
                accent: e.tokensExperimental["color-status-info"],
                bg: "transparent",
                "drag-icon-focus": "var(--focus-light-bg)"
            };
        }
    }
    let r = t?.contentPadding;
    if (t?.contentPadding && typeof t?.contentPadding === "string" && t?.contentPadding.includes(" ")) {
        const e = t?.contentPadding.split(" ");
        if (e.length < 4) {
            r = e[1];
        } else {
            r = e[3];
        }
    }
    const s = {
        pd: t?.contentPadding ?? e.tokensExperimental["space-base-xl"],
        "start-pd": r
    };
    return {
        ...__({
            ...s,
            fg: e.tokensExperimental["color-text-neutral"],
            bg: e.tokensExperimental["color-container-background-0"],
            bd: e.tokensExperimental["color-container-border-4"],
            bw: e.tokensExperimental["size-border-width-s"],
            sh: e.tokensExperimental["shadow-depth-xl"],
            "border-radius": e.tokensExperimental["size-border-radius-xs"]
        }, "dialog-content"),
        ...__({
            fg: e.tokensExperimental["color-heading-text"],
            "font-size": e.tokensExperimental["font-size-heading-text-3"],
            "font-weight": e.tokensExperimental["font-style-weight-700"],
            "space-top": e.tokensExperimental["space-base-xl"],
            "space-bottom": e.tokensExperimental["space-base-null"],
            "icon-size": e.tokensExperimental["size-icon-m"],
            bg: "transparent",
            ...o,
            ...a
        }, "dialog-header"),
        ...__({
            s: e.tokensExperimental["space-base-s"],
            m: e.tokensExperimental["space-base-m"],
            l: e.tokensExperimental["space-base-l"],
            xl: e.tokensExperimental["space-base-xl"],
            none: e.tokensExperimental["space-base-null"]
        }, "dialog-spacing"),
        ...__({
            "anim-dur-enter": e.tokensExperimental["duration-300"],
            "anim-tf-enter": e.tokensExperimental["ease-out"],
            "anim-dur-exit": e.tokensExperimental["duration-250"],
            "anim-tf-exit": e.tokensExperimental["ease-out"],
            fg: e.tokensExperimental["color-text-neutral-inverse"]
        }, "dialog"),
        ...__({
            width: t?.footerControls ? "auto" : "100%",
            stretchToFit: t?.footerControls ? "inherit" : "1"
        }, "dialog-footer"),
        ...!e.enableNovaTokens && IF(e, t)
    };
};

const IF = (e, t) => {
    let o = {};
    let n = {};
    if (!t?.accent) {
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            o = {
                bg: e.c.black,
                fg: e.c.white,
                "drag-icon-focus": "var(--focus-light-bg)"
            };
        }
        switch (e.themeVariant) {
          case "dark":
            n = {
                bg: "transparent",
                fg: e.c.white,
                "drag-icon-focus": "var(--focus-light-bg)"
            };
            break;

          case "high-contrast":
            n = {
                bg: "transparent",
                fg: e.c.white,
                "drag-icon-focus": "var(--focus-light-bg)"
            };
            break;

          default:
            n = {
                bg: "transparent",
                fg: e.c.n_3,
                "drag-icon-focus": "var(--focus-dark-bg)"
            };
        }
    }
    let a;
    if (t?.accent) {
        switch (t?.accent) {
          case "alert":
            a = {
                accent: e.c.alert,
                bg: "transparent",
                fg: e.c.alert,
                "drag-icon-focus": "var(--focus-light-bg)"
            };
            break;

          case "warning":
            a = {
                accent: e.c.warning,
                bg: "transparent",
                fg: e.c.warning,
                "drag-icon-focus": "var(--focus-light-bg)"
            };
            break;

          default:
            a = {
                accent: e.c.informational,
                bg: "transparent",
                fg: e.c.informational,
                "drag-icon-focus": "var(--focus-light-bg)"
            };
        }
    }
    return {
        ...__({
            ...e.backgroundsDepth.large
        }, "dialog-content"),
        ...__({
            "font-size-m": e.font.size.m,
            "font-weight": e.font.weight.thick
        }, "dialog"),
        ...__({
            ...n,
            ...o,
            ...a
        }, "dialog-header")
    };
};

const _F = e => e.items !== undefined;

const DF = e => {
    const o = e.action;
    const n = c(null);
    return _F(o) ? t(Jz, {
        ref: t => {
            n.current = t;
            D_(e.buttonRef, t);
        },
        testId: e.testId,
        variant: e.isDefault ? oN.Primary : oN.Standard,
        text: o.text,
        onPress: o.onPress,
        autoFocus: o.isDefault || o.initialFocus ? true : undefined,
        disabled: o.disabled,
        items: o.items,
        onItemSelected: o.onItemSelected
    }) : t(QM, {
        ref: t => {
            n.current = t;
            D_(e.buttonRef, t);
        },
        testId: e.testId,
        variant: e.isDefault ? oN.Primary : oN.Standard,
        onPress: o.onPress,
        "data-autofocus": o.isDefault || o.initialFocus ? true : undefined,
        disabled: o.disabled,
        text: o.text,
        ariaLabel: o.ariaLabel,
        className: o.className
    });
};

const LF = e => typeof e === "object" && e.hasOwnProperty("current");

const TF = e => {
    const t = e ?? document.body;
    const o = t.querySelectorAll('button, details, [href]:not(use), input, select, textarea, [tabindex]:not([tabindex="-1"])');
    const n = Array.from(o);
    const a = n.filter((e => e.getAttribute("tabindex") === "-1" ? false : true)).filter((e => !e.hasAttribute("disabled"))).filter((e => {
        const o = t.ownerDocument.defaultView?.getComputedStyle(e);
        if (o?.position === "fixed" && o?.display !== "none") {
            return true;
        }
        return e.offsetParent !== null;
    })).filter((e => t.ownerDocument.defaultView?.getComputedStyle(e).display === "none" ? false : true));
    return a;
};

const RF = e => {
    const t = TF(e);
    return t.length > 0 ? t[0] : null;
};

const kF = () => {
    if (!(document.activeElement instanceof HTMLElement)) return null;
    const e = TF();
    const t = e.indexOf(document.activeElement);
    return e[(t + 1) % e.length] ?? null;
};

const AF = ({onOpen: e, onClose: t, isOpen: o}) => {
    const {current: n} = YI();
    const r = c(null);
    const i = c({
        onOpen: true,
        onClose: false
    });
    const l = s((() => {
        if (r.current) {
            const e = r.current.querySelectorAll('*[data-autofocus-inside="true"]');
            for (const t of e) {
                const e = RF(t);
                if (e) {
                    e.focus();
                    break;
                }
            }
        }
    }), []);
    const d = s((async () => {
        await my(0);
        if (!n) return;
        l();
        e?.();
    }), [ e, l, n ]);
    const u = s((async () => {
        if (!n) return;
        t?.();
    }), [ t, n ]);
    a((() => {
        if (o && i.current.onOpen) {
            d();
            i.current.onOpen = false;
        }
        if (!o) {
            i.current.onOpen = true;
        }
    }), [ d, o ]);
    a((() => {
        if (!o && i.current.onClose) {
            u();
            i.current.onClose = false;
        }
        if (o) {
            i.current.onClose = true;
        }
    }), [ o, u ]);
    return {
        dialogRef: r
    };
};

const MF = fb(it);

const NF = i(undefined);

const OF = NF.Provider;

const PF = e => {
    const [, r] = n(0);
    const s = c(false);
    const i = c(false);
    const l = c(e.onClose);
    l.current = e.onClose;
    if (s.current) {
        i.current = true;
    }
    a((() => {
        s.current = true;
        r((e => e + 1));
        return () => {
            if (i.current) l.current?.();
        };
    }), []);
    return t(o, null, e.children);
};

const BF = ({draggable: e = true, ...o}) => {
    MF();
    const n = o.isModal ?? true;
    const {isOpen: r, onOpen: i, onClose: d, ...u} = o;
    const {dialogRef: m} = AF({
        onOpen: i,
        isOpen: r
    });
    const p = c(new Set).current;
    const f = l(NF);
    const g = o.dismissAction?.onPress;
    const h = o.firstAction?.onPress;
    const b = o.secondAction?.onPress;
    const v = s((() => {
        p.forEach((e => e?.apply(null)));
        g?.apply(null);
    }), [ p, g ]);
    const y = s((() => {
        p.forEach((e => e?.apply(null)));
        h?.apply(null);
    }), [ p, h ]);
    const x = s((() => {
        p.forEach((e => e?.apply(null)));
        b?.apply(null);
    }), [ p, b ]);
    const S = {
        ...u,
        ...u.dismissAction && u.dismissAction.onPress && {
            dismissAction: {
                ...u.dismissAction,
                onPress: v
            }
        },
        ...u.firstAction && u.firstAction.onPress && {
            firstAction: {
                ...u.firstAction,
                onPress: y
            }
        },
        ...u.secondAction && u.secondAction.onPress && {
            secondAction: {
                ...u.secondAction,
                onPress: x
            }
        }
    };
    const w = o.hideAnimation ?? false;
    const C = jD(L_.PLAY_VISUAL_EFFECTS) === "true" && !w;
    a((() => {
        if (!n) {
            f?.add(v);
            return () => {
                f?.delete(v);
            };
        }
    }), [ n, f, v ]);
    return t(gL, {
        id: o.id,
        isOpen: o.isOpen,
        showBlockLayer: n,
        focusLockProps: o.focusLockProps,
        onContextMenu: o.onContextMenu,
        testId: gb(o.testId, "modal"),
        hideAnimation: !C
    }, t(PF, {
        onClose: o.onClose
    }, t(OF, {
        value: p
    }, o.renderLayout ? o.renderLayout() : t(CF, Ee({
        ref: m,
        isOpen: o.isOpen,
        isModal: n
    }, S, {
        hideAnimation: !C,
        draggable: e
    })))));
};

const zF = e => t(BF, e);

const FF = "formatNumber.b.msg";

const jF = "formatNumber.m.msg";

const VF = "formatNumber.k.msg";

const HF = (e, t = 1) => new Intl.NumberFormat(e, {
    maximumFractionDigits: t
});

const UF = e => {
    const {localize: t, value: o, defaultFormattedValue: n} = e;
    if (qI(o)) return n ? n : "";
    return t(`boolean.${o}.msg`);
};

const GF = e => {
    const {formatLocale: t, localize: o, value: n, defaultFormattedValue: a} = e;
    const r = [ {
        divider: 1e18,
        siSymbol: "E",
        abbrevKey: ""
    }, {
        divider: 1e15,
        siSymbol: "P",
        abbrevKey: ""
    }, {
        divider: 1e12,
        siSymbol: "T",
        abbrevKey: ""
    }, {
        divider: 1e9,
        siSymbol: "G",
        abbrevKey: FF
    }, {
        divider: 1e6,
        siSymbol: "M",
        abbrevKey: jF
    }, {
        divider: 1e3,
        siSymbol: "k",
        abbrevKey: VF
    } ];
    if (qI(n) || isNaN(n)) return a ? a : "";
    for (let e = 0; e < r.length; e++) {
        if (n >= r[e].divider) {
            const a = HF(t).format(n / r[e].divider);
            if (r[e].abbrevKey.length > 0) {
                return o(r[e].abbrevKey, {
                    value: a
                });
            } else {
                return a;
            }
        }
    }
    return HF(t).format(n);
};

const KF = e => `[${WF(e.startDate)} TO ${WF(e.endDate)}]`;

const WF = e => {
    const t = new Date(e.toDateString());
    const o = t.getDate();
    const n = o < 10 ? `0${o}` : o;
    const a = t.getMonth() + 1;
    const r = a < 10 ? `0${a}` : a;
    const s = t.getFullYear();
    return `${s}-${r}-${n}`;
};

const $F = e => {
    if (e.valueType === "integer" || e.valueType === "long") {
        return `[${e.start.toFixed(0)} TO ${e.end.toFixed(0)}]`;
    }
    return `[${e.start.toFixed(2)} TO ${e.end.toFixed(2)}]`;
};

var YF = "sas_components-Input-__internal__-MessagePopover-MessagePopover_content";

var qF = "sas_components-Input-__internal__-MessagePopover-MessagePopover_message-text";

var XF = {
    content: YF,
    messageText: qF
};

const ZF = 160;

const JF = e => {
    const o = C_();
    const {density: n} = YA();
    const a = {
        ...I_(ej(o, n, e.status), "message-popover")
    };
    const r = e.referenceElementRef?.current?.getBoundingClientRect().width ?? 0;
    const s = Math.max(r, ZF).toString();
    return t(zO, {
        referenceElementRef: e.referenceElementRef,
        hideArrow: true,
        className: XF.content,
        placement: "bottom-start",
        focusLockProps: {
            disabled: true
        },
        style: {
            ...a,
            width: "auto",
            maxWidth: e.maxWidth ?? `${s}px`,
            minWidth: e.minWidth
        },
        testId: e.testId,
        hideOnRefHidden: e.hideOnRefHidden,
        onClose: e.onClose
    }, t(jP, {
        className: XF.messageText,
        testId: gb(e.testId, "messageContainer")
    }, e.message));
};

const QF = e => !e.hidden && e.message ? t(JF, e) : null;

const ej = (e, t, o) => {
    if (e.enableNovaTokens) {
        return {
            bd: e.themeVariant === "high-contrast" ? `1px solid ${e.tokensExperimental["color-container-border-4"]}` : "none",
            bg: e.tokensExperimental["color-container-background-1"],
            fg: e.tokensExperimental["color-body-text"],
            "pd-squish-s": e.tokensExperimental["space-squish-s"],
            "font-size": t === "high" ? e.tokensExperimental["font-size-body-text-s"] : e.tokensExperimental["font-size-body-text-m"]
        };
    } else {
        return {
            bd: `1px solid ${e.stateStatus[o].bd}`,
            bg: e.stateStatus[o].bg,
            fg: e.stateStatus[o].fg,
            "pd-squish-s": e.spacing.insetSquish.s.padding,
            "font-size": e.font.size.xs
        };
    }
};

function tj() {
    tj = Object.assign || function(e) {
        for (var t = 1; t < arguments.length; t++) {
            var o = arguments[t];
            for (var n in o) {
                if (Object.prototype.hasOwnProperty.call(o, n)) {
                    e[n] = o[n];
                }
            }
        }
        return e;
    };
    return tj.apply(this, arguments);
}

function oj(e, t) {
    if (e == null) return {};
    var o = {};
    var n = Object.keys(e);
    var a, r;
    for (r = 0; r < n.length; r++) {
        a = n[r];
        if (t.indexOf(a) >= 0) continue;
        o[a] = e[a];
    }
    return o;
}

var nj = [ "bottom", "height", "left", "right", "top", "width" ];

var aj = function e(t, o) {
    if (t === void 0) {
        t = {};
    }
    if (o === void 0) {
        o = {};
    }
    return nj.some((function(e) {
        return t[e] !== o[e];
    }));
};

var rj = new Map;

var sj;

var ij = function e() {
    var t = [];
    rj.forEach((function(e, o) {
        var n = o.getBoundingClientRect();
        if (aj(n, e.rect)) {
            e.rect = n;
            t.push(e);
        }
    }));
    t.forEach((function(e) {
        e.callbacks.forEach((function(t) {
            return t(e.rect);
        }));
    }));
    sj = window.requestAnimationFrame(e);
};

function lj(e, t) {
    return {
        observe: function o() {
            var n = rj.size === 0;
            if (rj.has(e)) {
                rj.get(e).callbacks.push(t);
            } else {
                rj.set(e, {
                    rect: undefined,
                    hasRectChanged: false,
                    callbacks: [ t ]
                });
            }
            if (n) ij();
        },
        unobserve: function o() {
            var n = rj.get(e);
            if (n) {
                var a = n.callbacks.indexOf(t);
                if (a >= 0) n.callbacks.splice(a, 1);
                if (!n.callbacks.length) rj["delete"](e);
                if (!rj.size) cancelAnimationFrame(sj);
            }
        }
    };
}

var cj = typeof window !== "undefined" ? e.useLayoutEffect : e.useEffect;

function dj(t, o) {
    if (o === void 0) {
        o = {
            width: 0,
            height: 0
        };
    }
    var n = e.useState(t.current), a = n[0], r = n[1];
    var s = e.useReducer(uj, o), i = s[0], l = s[1];
    var c = e.useRef(false);
    cj((function() {
        if (t.current !== a) {
            r(t.current);
        }
    }));
    cj((function() {
        if (a && !c.current) {
            c.current = true;
            var e = a.getBoundingClientRect();
            l({
                rect: e
            });
        }
    }), [ a ]);
    e.useEffect((function() {
        if (!a) {
            return;
        }
        var e = lj(a, (function(e) {
            l({
                rect: e
            });
        }));
        e.observe();
        return function() {
            e.unobserve();
        };
    }), [ a ]);
    return i;
}

function uj(e, t) {
    var o = t.rect;
    if (e.height !== o.height || e.width !== o.width) {
        return o;
    }
    return e;
}

var mj = function e() {
    return 50;
};

var pj = function e(t) {
    return t;
};

var fj = function e(t, o) {
    var n = o ? "offsetWidth" : "offsetHeight";
    return t[n];
};

var gj = function e(t) {
    var o = Math.max(t.start - t.overscan, 0);
    var n = Math.min(t.end + t.overscan, t.size - 1);
    var a = [];
    for (var r = o; r <= n; r++) {
        a.push(r);
    }
    return a;
};

function hj(t) {
    var o;
    var n = t.size, a = n === void 0 ? 0 : n, r = t.estimateSize, s = r === void 0 ? mj : r, i = t.overscan, l = i === void 0 ? 1 : i, c = t.paddingStart, d = c === void 0 ? 0 : c, u = t.paddingEnd, m = u === void 0 ? 0 : u, p = t.parentRef, f = t.horizontal, g = t.scrollToFn, h = t.useObserver, b = t.initialRect, v = t.onScrollElement, y = t.scrollOffsetFn, x = t.keyExtractor, S = x === void 0 ? pj : x, w = t.measureSize, C = w === void 0 ? fj : w, E = t.rangeExtractor, I = E === void 0 ? gj : E;
    var _ = f ? "width" : "height";
    var D = f ? "scrollLeft" : "scrollTop";
    var L = e.useRef({
        scrollOffset: 0,
        measurements: []
    });
    var T = e.useState(0), R = T[0], k = T[1];
    L.current.scrollOffset = R;
    var A = h || dj;
    var M = A(p, b), N = M[_];
    L.current.outerSize = N;
    var O = e.useCallback((function(e) {
        if (p.current) {
            p.current[D] = e;
        }
    }), [ p, D ]);
    var P = g || O;
    g = e.useCallback((function(e) {
        P(e, O);
    }), [ O, P ]);
    var B = e.useState({}), z = B[0], F = B[1];
    var j = e.useCallback((function() {
        return F({});
    }), []);
    var V = e.useRef([]);
    var H = e.useMemo((function() {
        var e = V.current.length > 0 ? Math.min.apply(Math, V.current) : 0;
        V.current = [];
        var t = L.current.measurements.slice(0, e);
        for (var o = e; o < a; o++) {
            var n = S(o);
            var r = z[n];
            var i = t[o - 1] ? t[o - 1].end : d;
            var l = typeof r === "number" ? r : s(o);
            var c = i + l;
            t[o] = {
                index: o,
                start: i,
                size: l,
                end: c,
                key: n
            };
        }
        return t;
    }), [ s, z, d, a, S ]);
    var U = (((o = H[a - 1]) == null ? void 0 : o.end) || d) + m;
    L.current.measurements = H;
    L.current.totalSize = U;
    var G = v ? v.current : p.current;
    var K = e.useRef(y);
    K.current = y;
    cj((function() {
        if (!G) {
            k(0);
            return;
        }
        var e = function e(t) {
            var o = K.current ? K.current(t) : G[D];
            k(o);
        };
        e();
        G.addEventListener("scroll", e, {
            capture: false,
            passive: true
        });
        return function() {
            G.removeEventListener("scroll", e);
        };
    }), [ G, D ]);
    var W = vj(L.current), $ = W.start, Y = W.end;
    var q = e.useMemo((function() {
        return I({
            start: $,
            end: Y,
            overscan: l,
            size: H.length
        });
    }), [ $, Y, l, H.length, I ]);
    var X = e.useRef(C);
    X.current = C;
    var Z = e.useMemo((function() {
        var e = [];
        var t = function t(o, n) {
            var a = q[o];
            var r = H[a];
            var s = tj(tj({}, r), {}, {
                measureRef: function e(t) {
                    if (t) {
                        var o = X.current(t, f);
                        if (o !== s.size) {
                            var n = L.current.scrollOffset;
                            if (s.start < n) {
                                O(n + (o - s.size));
                            }
                            V.current.push(a);
                            F((function(e) {
                                var t;
                                return tj(tj({}, e), {}, (t = {}, t[s.key] = o, t));
                            }));
                        }
                    }
                }
            });
            e.push(s);
        };
        for (var o = 0, n = q.length; o < n; o++) {
            t(o);
        }
        return e;
    }), [ q, O, f, H ]);
    var J = e.useRef(false);
    cj((function() {
        if (J.current) {
            F({});
        }
        J.current = true;
    }), [ s ]);
    var Q = e.useCallback((function(e, t) {
        var o = t === void 0 ? {} : t, n = o.align, a = n === void 0 ? "start" : n;
        var r = L.current, s = r.scrollOffset, i = r.outerSize;
        if (a === "auto") {
            if (e <= s) {
                a = "start";
            } else if (e >= s + i) {
                a = "end";
            } else {
                a = "start";
            }
        }
        if (a === "start") {
            g(e);
        } else if (a === "end") {
            g(e - i);
        } else if (a === "center") {
            g(e - i / 2);
        }
    }), [ g ]);
    var ee = e.useCallback((function(e, t) {
        var o = t === void 0 ? {} : t, n = o.align, r = n === void 0 ? "auto" : n, s = oj(o, [ "align" ]);
        var i = L.current, l = i.measurements, c = i.scrollOffset, d = i.outerSize;
        var u = l[Math.max(0, Math.min(e, a - 1))];
        if (!u) {
            return;
        }
        if (r === "auto") {
            if (u.end >= c + d) {
                r = "end";
            } else if (u.start <= c) {
                r = "start";
            } else {
                return;
            }
        }
        var m = r === "center" ? u.start + u.size / 2 : r === "end" ? u.end : u.start;
        Q(m, tj({
            align: r
        }, s));
    }), [ Q, a ]);
    var te = e.useCallback((function() {
        for (var e = arguments.length, t = new Array(e), o = 0; o < e; o++) {
            t[o] = arguments[o];
        }
        ee.apply(void 0, t);
        requestAnimationFrame((function() {
            ee.apply(void 0, t);
        }));
    }), [ ee ]);
    return {
        virtualItems: Z,
        totalSize: U,
        scrollToOffset: Q,
        scrollToIndex: te,
        measure: j
    };
}

var bj = function e(t, o, n, a) {
    while (t <= o) {
        var r = (t + o) / 2 | 0;
        var s = n(r);
        if (s < a) {
            t = r + 1;
        } else if (s > a) {
            o = r - 1;
        } else {
            return r;
        }
    }
    if (t > 0) {
        return t - 1;
    } else {
        return 0;
    }
};

function vj(e) {
    var t = e.measurements, o = e.outerSize, n = e.scrollOffset;
    var a = t.length - 1;
    var r = function e(o) {
        return t[o].start;
    };
    var s = bj(0, a, r, n);
    var i = s;
    while (i < a && t[i].end < n + o) {
        i++;
    }
    return {
        start: s,
        end: i
    };
}

const yj = ({length: e, start: t, isValidIndex: o}) => {
    for (let n = t; n < e; n++) {
        if (o(n)) return n;
    }
    return undefined;
};

const xj = ({wrap: e, ...t}) => yj(t) ?? (e ? yj({
    ...t,
    start: 0,
    length: t.start
}) : undefined);

const Sj = ({start: e, isValidIndex: t}) => {
    for (let o = e; o >= 0; o--) {
        if (t(o)) return o;
    }
    return undefined;
};

const wj = ({wrap: e, ...t}) => Sj(t) ?? (e ? Sj({
    ...t,
    start: t.length - 1
}) : undefined);

const Cj = ({length: e, start: t, isValidIndex: o, pageSize: n}) => {
    let a;
    for (let r = t; r < e; r++) {
        if (o(r)) {
            n--;
            a = r;
        }
        if (n === 0) return r;
    }
    return a ?? undefined;
};

const Ej = ({start: e, isValidIndex: t, pageSize: o}) => {
    let n;
    for (let a = e; a >= 0; a--) {
        if (t(a)) {
            o--;
            n = a;
        }
        if (o === 0) return a;
    }
    return n ?? undefined;
};

var Ij = "sas_components-ListBox-List_list";

var _j = "sas_components-ListBox-List_item";

var Dj = "sas_components-ListBox-List_item-hoverable";

var Lj = "sas_components-ListBox-List_disabled";

var Tj = "sas_components-ListBox-List_selected";

var Rj = "sas_components-ListBox-List_virtual-item";

var kj = "sas_components-ListBox-List_item-inner";

var Aj = "sas_components-ListBox-List_item-separator";

var Mj = "sas_components-ListBox-List_item-top-separator";

var Nj = "sas_components-ListBox-List_item-icon";

var Oj = "sas_components-ListBox-List_navigation-icon";

var Pj = "sas_components-ListBox-List_item-spacer";

var Bj = "sas_components-ListBox-List_navigation-item";

var zj = "sas_components-ListBox-List_item-textSeparator";

var Fj = "sas_components-ListBox-List_item-secondaryText";

var jj = "sas_components-ListBox-List_focused";

var Vj = "sas_components-ListBox-List_pseudo-focused";

var Hj = "sas_components-ListBox-List_item-text";

var Uj = "sas_components-ListBox-List_highlight";

var Gj = "sas_components-ListBox-List_item-actionIcon";

var Kj = "sas_components-ListBox-List_item-selection-control";

var Wj = "sas_components-ListBox-List_theme-override";

var $j = "sas_components-ListBox-List_indented";

var Yj = {
    list: Ij,
    item: _j,
    itemHoverable: Dj,
    disabled: Lj,
    selected: Tj,
    virtualItem: Rj,
    itemInner: kj,
    itemSeparator: Aj,
    itemTopSeparator: Mj,
    itemIcon: Nj,
    navigationIcon: Oj,
    itemSpacer: Pj,
    navigationItem: Bj,
    itemTextSeparator: zj,
    itemSecondaryText: Fj,
    focused: jj,
    pseudoFocused: Vj,
    itemText: Hj,
    highlight: Uj,
    itemActionIcon: Gj,
    itemSelectionControl: Kj,
    themeOverride: Wj,
    indented: $j
};

const qj = fb(lt);

const Xj = e => typeof e === "boolean" ? e ? 1 : 0 : e;

const Zj = f(u((function e(o, n) {
    const s = qj();
    const i = c(null);
    const l = WA();
    const d = WA();
    const u = C_();
    const m = IB(o.index, o.tokens);
    const p = Xj(o.indented);
    const f = JA();
    a((() => {
        o.focused && i.current?.focus();
    }), [ o.focused ]);
    const g = o.displayMode;
    const h = ke(o.className, Yj.item, o.navigation && Yj.navigationItem, {
        [Yj.itemHoverable]: !o.selected && g !== "checkbox" && g !== "radio",
        [Yj.selected]: o.selected && g !== "checkbox" && g !== "radio"
    }, o.focused && Yj.focused, o.showSelectedPseudoFocus && Yj.pseudoFocused, o.indented && Yj.indented, o.disabled && Yj.disabled, o.showSeparator && Yj.itemTopSeparator);
    const b = g === "checkbox" ? t("span", {
        "aria-hidden": "true"
    }, t(eB, {
        checked: o.selected,
        focusable: false,
        className: Yj.itemSelectionControl,
        onPress: () => {
            if (o.disabled) return;
            o.onSelected?.({
                index: o.index
            });
        },
        disabled: o.disabled
    })) : g === "radio" ? t("span", {
        "aria-hidden": "true"
    }, t(vB, {
        selected: o.selected,
        className: Yj.itemSelectionControl,
        disabled: o.disabled
    })) : null;
    const v = o.concatSecondaryText && o.secondaryText;
    const y = bP({
        text: o.text ?? "",
        className: ke(Yj.highlight, o.highlightableConfig?.text?.className),
        ...o.highlightableConfig?.text
    });
    const x = bP({
        text: o.secondaryText ?? "",
        className: ke(Yj.highlight, o.highlightableConfig?.secondaryText?.className),
        ...o.highlightableConfig?.secondaryText
    });
    const S = o.secondaryText ? t("span", {
        "data-testid": gb(o.testId, "secondaryText"),
        className: Yj.itemSecondaryText,
        ref: d
    }, x) : null;
    const w = "-";
    const C = r((() => {
        if (!o.icon) return;
        const e = o.icon.render({}, undefined);
        return {
            testId: gb(o.testId, "icon"),
            icon: o.icon,
            tooltip: o.iconTooltip,
            ariaLabel: o.iconAriaLabel,
            ariaAriaHidden: o.iconAriaHidden,
            style: {
                width: `${e.props.width}px`,
                height: `${e.props.height}px`
            }
        };
    }), [ o.icon, o.iconAriaHidden, o.iconAriaLabel, o.iconTooltip, o.testId ]);
    const E = r((() => {
        const e = [];
        if (!qI(p)) e.push(s("indentation.level.msg", {
            level: `${p + 1}`
        }));
        const t = e => {
            const {ariaLabel: t, tooltip: o} = f({
                ...e
            });
            return t ?? o;
        };
        const n = C && !C.ariaAriaHidden ? t(C) : undefined;
        if (n) e.push(n);
        if (o.ariaLabel) {
            e.push(o.ariaLabel);
        } else {
            if (o.text) e.push(o.text);
            if (o.secondaryText) e.push(o.secondaryText);
        }
        if (o.tooltip) e.push(o.tooltip);
        return e.length !== 0 ? e.join(", ") : undefined;
    }), [ f, C, p, s, o.ariaLabel, o.secondaryText, o.text, o.tooltip ]);
    return t("li", {
        id: o.id,
        role: "option",
        tabIndex: o.focusable ? 0 : -1,
        "aria-label": E,
        "aria-selected": !!o.selected,
        "aria-disabled": o.disabled,
        "aria-setsize": o["aria-setsize"],
        "aria-posinset": o["aria-posinset"],
        title: o.tooltip,
        onClick: e => {
            if (o.disabled) {
                e.stopPropagation();
                e.preventDefault();
                return;
            }
            if (!e.defaultPrevented) {
                o.onSelected?.({
                    index: o.index
                });
                e.preventDefault();
            }
        },
        onKeyDown: e => {
            if (o.disabled && (e.key === "Enter" || e.key === " ")) {
                e.stopPropagation();
                e.preventDefault();
            }
        },
        onFocus: o.onFocus,
        className: h,
        ref: e => {
            D_(n, e);
            i.current = e;
        },
        "data-testid": o.testId,
        style: {
            ...m,
            ...I_({
                "indentation-level": Math.max(0, !qI(p) ? p : 0)
            }, "list-item"),
            ...o.style
        }
    }, t("div", {
        className: Yj.itemInner
    }, b, C && t(MM, Ee({}, C, {
        className: Yj.itemIcon,
        tokens: () => ({
            fg: o.selected && u.themeVariant === "high-contrast" ? "var(--list-item-selected-fg)" : undefined
        }),
        disabled: o.disabled
    })), t("span", {
        className: Yj.itemText,
        "data-testid": gb(o.testId, "text"),
        ref: l
    }, y), v ? t("span", {
        "aria-hidden": true,
        className: Yj.itemTextSeparator
    }, w) : null, o.concatSecondaryText ? S : null, t("div", {
        className: Yj.itemSpacer
    }), !o.concatSecondaryText ? S : null, o.actionIcon && t(QM, {
        className: Yj.itemActionIcon,
        variant: oN.Icon,
        onPress: () => {
            if (o.disabled) return;
            o.onActionPress?.({
                index: o.index
            });
        },
        focusable: false,
        icon: {
            className: Yj.itemIcon,
            icon: o.actionIcon
        }
    }), o.navigation && t(MM, {
        className: Yj.navigationIcon,
        icon: ET,
        disabled: o.disabled
    })));
})));

const Jj = u((function e(o, n) {
    const a = c(null);
    const i = c(null);
    const l = Math.round(o.itemHeight ?? 30);
    const d = c({
        start: 0,
        end: 0
    });
    const u = Math.min(o.count ?? 0, 295e3);
    const m = hj({
        size: u,
        parentRef: i,
        estimateSize: s((() => l), [ l ]),
        overscan: 3,
        rangeExtractor: s((e => {
            d.current = e;
            return gj(e);
        }), [])
    });
    const p = e => u < e || e > -1 ? o.renderItem?.({
        index: e
    })?.props : undefined;
    const f = e => !!p(e)?.disabled;
    const g = e => p(e)?.text ?? "";
    const h = d.current.end - d.current.start;
    const v = h === 0 ? 10 : h;
    const y = Qj({
        length: u,
        pageCount: v,
        scrollToIndex: m.scrollToIndex,
        isItemDisabled: f,
        getItemText: g,
        selectedIndex: o.selectedIndex,
        setFocusedIndex: o.setFocusedIndex,
        onSelectFocusedItem: o.onSelectFocusedItem
    });
    const x = C_();
    const {density: S} = YA();
    const w = r((() => CB(x, S, o.theme, o.font, o.variant, o.whiteSpace)), [ x, S, o.theme, o.font, o.variant, o.whiteSpace ]);
    const C = r((() => ({
        position: "relative",
        height: `${m.totalSize}px`,
        width: "100%",
        maxHeight: "initial"
    })), [ m ]);
    if (o.virtualizerRef) o.virtualizerRef.current = m;
    if (o.pageSizeRef) o.pageSizeRef.current = v;
    return t("div", {
        ref: i,
        style: {
            height: o.style?.height ?? `200px`,
            width: o.style?.width ?? `400px`,
            maxHeight: o.style?.maxHeight,
            overflow: "auto"
        }
    }, t("ul", {
        ref: e => {
            a.current = e;
            D_(n, e);
        },
        className: ke(o.className, !!o.theme && Yj.themeOverride, Yj.list),
        style: {
            ...w,
            ...o.style,
            ...C
        },
        role: o.role ?? "listbox",
        "aria-label": o.ariaLabel,
        tabIndex: o.tabIndex ?? -1,
        "aria-labelledby": Array.isArray(o.ariaLabelledBy) ? o.ariaLabelledBy.length ? o.ariaLabelledBy.join(" ") : undefined : o.ariaLabelledBy,
        "aria-describedby": Array.isArray(o.ariaDescribedBy) ? o.ariaDescribedBy.length ? o.ariaDescribedBy.join(" ") : undefined : o.ariaDescribedBy,
        "data-testid": o.testId,
        onKeyDown: y,
        id: o.id
    }, m.virtualItems.map((e => {
        const n = e.index;
        const a = o.renderItem({
            index: n
        }) ?? t(Zj, {
            text: "",
            focused: false,
            selected: false,
            key: `null-${n}`,
            index: n
        });
        return b(a, {
            className: Yj.virtualItem,
            style: {
                height: `${e.size}px`,
                transform: `translateY(${e.start}px)`
            },
            "aria-posinset": n + 1,
            "aria-setsize": u
        });
    }))));
}));

const Qj = ({length: e, pageCount: t, scrollToIndex: o, isItemDisabled: n, getItemText: a, selectedIndex: r, setFocusedIndex: i, onSelectFocusedItem: l, doLooping: c}) => {
    const d = $B({
        source: OB.Error
    });
    return s((s => {
        if (e <= 0) {
            return;
        }
        const u = e - 1;
        const m = e => e ?? r;
        switch (s.key) {
          case "ArrowDown":
            i?.((t => {
                const n = m(t) ?? -1;
                const a = n < e - 1 ? n + 1 : e - 1;
                o?.(a);
                return a;
            }));
            break;

          case "ArrowUp":
            i?.((t => {
                const n = m(t) ?? e;
                const a = n > 0 ? n - 1 : 0;
                o?.(a);
                return a;
            }));
            break;

          case "PageDown":
            {
                i?.((e => {
                    const n = m(e) ?? -1;
                    const a = Math.min(n + t, u);
                    o?.(a);
                    return a;
                }));
                break;
            }

          case "PageUp":
            {
                i?.((e => {
                    const n = m(e) ?? 0;
                    const a = Math.max(n - t, 0);
                    o?.(a);
                    return a;
                }));
            }
            break;

          case "End":
            {
                const t = e - 1;
                o?.(t);
                i?.(t);
            }
            break;

          case "Home":
            {
                const e = 0;
                o?.(e);
                i?.(e);
            }
            break;

          case " ":
          case "Enter":
            l?.();
            break;

          default:
            if (s.key.trim().length === 1) {
                i?.((t => {
                    const r = m(t) ?? -1;
                    const i = s.key.toLowerCase();
                    const l = xj({
                        length: e,
                        start: r + 1,
                        isValidIndex: e => !n?.(e) && !!a(e)?.toLowerCase().startsWith(i),
                        wrap: c ?? false
                    });
                    if (l !== undefined) o?.(l); else d.play();
                    return l ?? r;
                }));
                s.stopPropagation();
            }
        }
        s.preventDefault();
    }), [ e, r, i, l, o, t, c, d, n, a ]);
};

const eV = u((function e(o, n) {
    const a = c(null);
    const s = r((() => v.toArray(o.children).filter((e => y(e) && e.type && e.type?.name !== "ListSeparator"))), [ o.children ]);
    const i = tV({
        length: s.length,
        selectedIndex: o.selectedIndex,
        setFocusedIndex: o.setFocusedIndex,
        onSelectFocusedItem: o.onSelectFocusedItem,
        ulRef: a
    });
    const l = C_();
    const {density: d} = YA();
    const u = r((() => CB(l, d, o.theme, o.font, o.variant, o.whiteSpace)), [ l, d, o.theme, o.font, o.variant, o.whiteSpace ]);
    return t("ul", {
        ref: e => {
            a.current = e;
            D_(n, e);
        },
        className: ke(o.className, !!o.theme && Yj.themeOverride, Yj.list),
        style: {
            ...u,
            ...o.style
        },
        role: o.role ?? "listbox",
        "aria-label": o.ariaLabel,
        tabIndex: o.focusable === false ? -1 : undefined,
        "aria-labelledby": Array.isArray(o.ariaLabelledBy) ? o.ariaLabelledBy.length ? o.ariaLabelledBy.join(" ") : undefined : o.ariaLabelledBy,
        "aria-describedby": Array.isArray(o.ariaDescribedBy) ? o.ariaDescribedBy.length ? o.ariaDescribedBy.join(" ") : undefined : o.ariaDescribedBy,
        "data-testid": o.testId,
        onKeyDown: i,
        id: o.id
    }, o.children);
}));

const tV = ({length: e, doLooping: t, selectedIndex: o, setFocusedIndex: n, onSelectFocusedItem: a, ulRef: r}) => {
    const i = $B({
        source: OB.Error
    });
    return s((s => {
        if (e <= 0) {
            return;
        }
        const l = e - 1;
        const c = e => e ?? o;
        const d = () => {
            const t = r?.current?.parentElement;
            const o = t?.scrollHeight ?? 0;
            const n = t?.offsetHeight ?? 0;
            const a = o / e;
            return Math.round(a !== 0 && n !== 0 ? n / a : 10);
        };
        const u = e => {
            const t = e.scrollHeight > e.clientHeight;
            const o = window.getComputedStyle(e).overflowY;
            const n = o.indexOf("hidden") !== -1;
            return t && !n;
        };
        const m = e => !e || e === document.body ? document.body : u(e) ? e : m(e.parentNode);
        const p = (r?.current?.children ? [ ...r?.current?.children ] : []).filter((e => e.getAttribute("role") !== "separator"));
        const f = e => p[e];
        const g = (e, t) => f(e)?.scrollIntoView?.(t);
        const h = e => {
            const t = f(e);
            const o = m(r?.current);
            if (!t || !o) {
                return false;
            }
            const n = t.getBoundingClientRect();
            const a = o.getBoundingClientRect();
            return n.top >= a.top && n.bottom <= a.bottom;
        };
        const b = e => f(e).textContent?.trim();
        const v = e => f(e).getAttribute("aria-disabled") === "true";
        switch (s.key) {
          case "ArrowDown":
            n?.((o => {
                const n = c(o) ?? -1;
                const a = n < e - 1 ? n + 1 : t ? 0 : e - 1;
                if (!h(a)) {
                    g(a, false);
                }
                return a;
            }));
            break;

          case "ArrowUp":
            n?.((o => {
                const n = c(o) ?? e;
                const a = n > 0 ? n - 1 : t ? e - 1 : 0;
                if (!h(a)) {
                    g(a, true);
                }
                return a;
            }));
            break;

          case "PageDown":
            {
                const e = d();
                n?.((o => {
                    const n = c(o) ?? -1;
                    const a = n === l;
                    const r = Math.min(n + e, a && t ? 0 : l);
                    g(r, false);
                    return r;
                }));
                break;
            }

          case "PageUp":
            {
                const e = d();
                n?.((o => {
                    const n = c(o) ?? 0;
                    const a = n === 0;
                    const r = Math.max(n - e, a && t ? l : 0);
                    g(r, true);
                    return r;
                }));
            }
            break;

          case "End":
            {
                const t = e - 1;
                g(t, false);
                n?.(t);
            }
            break;

          case "Home":
            {
                const e = 0;
                g(e, true);
                n?.(e);
            }
            break;

          case " ":
          case "Enter":
            a?.();
            break;

          default:
            if (s.key.trim().length === 1) {
                n?.((o => {
                    const n = c(o) ?? -1;
                    const a = s.key.toLowerCase();
                    const r = xj({
                        length: e,
                        start: n + 1,
                        isValidIndex: e => !v?.(e) && !!b(e)?.toLowerCase().startsWith(a),
                        wrap: t ?? false
                    });
                    if (r !== undefined) {
                        if (!h(r)) g(r, false);
                    } else i.play();
                    return r ?? n;
                }));
                s.stopPropagation();
            }
            return;
        }
        s.preventDefault();
    }), [ e, o, r, n, a, t, i ]);
};

const oV = () => t("li", {
    role: "separator",
    className: Yj.itemSeparator
});

var nV = "sas_components-OptionPopper-OptionPopper_option-popper";

var aV = "sas_components-OptionPopper-OptionPopper_option-popper-list";

var rV = {
    optionPopper: nV,
    optionPopperList: aV
};

const sV = u((function e(o, r) {
    const [s, i] = n(undefined);
    const l = o.referenceElementRef.current?.getBoundingClientRect().width;
    a((() => {
        if (o.referenceElementRef.current) {
            i(l);
        }
    }), [ o.referenceElementRef, l ]);
    let c = -1;
    let d = -1;
    const u = e => {
        if (e && !o.displayListItemIcon) {
            const {icon: t, ...o} = e;
            return o;
        }
        return e;
    };
    const m = (e, n) => t(Zj, Ee({}, u(e), {
        onActionPress: o.onActionPress,
        onSelected: o.onSelected,
        index: n,
        key: n,
        selected: o.focusedIndex === n,
        showSelectedPseudoFocus: o.showSelectedPseudoFocus,
        focused: !!o.listItemFocusable && o.focusedIndex === n,
        focusable: !!o.listItemFocusable && o.focusedIndex === n,
        ref: o.focusedIndex === n ? o.focusedItemRef : undefined,
        testId: e?.testId ?? gb(o.testId, `list-listItem-${n}`),
        tokens: o.listItemTokens,
        disabled: o.isItemDisabled?.(n)
    }));
    const p = {
        selectedIndex: o.selectedIndex,
        setFocusedIndex: o.setFocusedIndex,
        onSelectFocusedItem: o.onSelectFocusedItem,
        testId: gb(o.testId, "list"),
        ...o.listTokens,
        id: o.listId,
        ariaLabelledBy: o.ariaLabelledBy,
        ariaLabel: o.ariaLabel,
        ref: o.ulRef
    };
    const f = {
        closed: {
            opacity: 0
        },
        open: {
            opacity: 1,
            transition: {
                type: "tween",
                duration: .3,
                ease: [ .5, 0, .8, 1 ]
            }
        },
        exit: {
            opacity: 0,
            transition: {
                type: "tween",
                duration: .25,
                ease: [ 0, .5, .2, 1 ]
            }
        }
    };
    return t(zO, Ee({
        referenceElementRef: o.referenceElementRef,
        isOpen: o.isOpen,
        placement: "bottom-start",
        hideArrow: true,
        style: {
            ...o.style,
            maxHeight: o.style?.maxHeight ?? "75vh",
            minWidth: o.style?.minWidth ?? s
        },
        className: ke(rV.optionPopper, o.className),
        testId: gb(o.testId, "optionPopper"),
        ref: e => {
            if (e?.container) {
                D_(r, e?.container);
            }
        },
        onClose: o.onClose,
        returnFocus: o.returnFocus,
        focusLockProps: o.focusLockProps
    }, o.popoverTokens, {
        disableContextMenu: o.disableContextMenu,
        animation: {
            variants: f,
            ...o.animation
        },
        hideOnRefHidden: o.hideOnRefHidden
    }), o.virtualItems ? t(Jj, Ee({
        count: o.virtualItems.count,
        renderItem: ({index: e}) => m(o.virtualItems?.renderItem({
            index: e
        }) ?? null, e),
        virtualizerRef: o.virtualItems.virtualizerRef,
        pageSizeRef: o.virtualItems.pageSizeRef,
        itemHeight: o.virtualItems.itemHeight,
        style: {
            width: `${o.virtualItems?.width ?? 150}px`,
            height: `100%`,
            maxHeight: o.style?.maxHeight ?? "75vh"
        }
    }, p)) : t(eV, Ee({
        className: rV.optionPopperList
    }, p), !o.items ? null : o.items.map((e => {
        if (e.separator) {
            c++;
            return t(oV, {
                key: `${c}-separator`
            });
        } else {
            d++;
            return m(e, d);
        }
    }))));
}));

var iV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_offscreen";

var lV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_container";

var cV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_input";

var dV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_has-input-icon";

var uV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_readonly";

var mV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_disabled";

var pV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_hide-border";

var fV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_input-icon";

var gV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_message";

var hV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_warning-message";

var bV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_alert-message";

var vV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_non-editable-input";

var yV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_composite";

var xV = "sas_data-CatalogSearch-__internal__-__CatalogInput-CatalogInput_rtl";

var SV = {
    offscreen: iV,
    container: lV,
    input: cV,
    hasInputIcon: dV,
    readonly: uV,
    disabled: mV,
    hideBorder: pV,
    inputIcon: fV,
    message: gV,
    warningMessage: hV,
    alertMessage: bV,
    nonEditableInput: vV,
    composite: yV,
    rtl: xV
};

const wV = e => e?.message !== undefined;

const CV = MA("CatalogInput-SuggestionList");

const EV = MA("CatalogInput-SuggestionListItem");

const IV = MA("CatalogInput-ValidationMessage");

const _V = Dh("CatalogSearchInput");

const DV = 200;

const LV = fb(ct);

const TV = u((function e({onHistoryItemDoubleClick: o, ...i}, l) {
    const u = c(null);
    const [m, p] = n(false);
    const [f, g] = n(undefined);
    const [h, b] = n(false);
    const v = LV();
    const y = i.editable ?? true;
    const [x, S] = n(true);
    const {suggestionItems: w, onSuggestionItemSelected: C} = i;
    const E = i.onCommit;
    const I = i.onChange;
    const _ = i.onCancel;
    const D = i.onFocus;
    const L = i.onMouseDown;
    const T = i.onBlur;
    const R = i.value;
    const k = i.commitOnEnterInDialog !== undefined ? i.commitOnEnterInDialog : true;
    const [A, M] = n(false);
    const N = i.suggestionsDisplay || "always";
    const O = r((() => w?.filter((e => !e.separator))), [ w ]);
    const P = ay();
    const B = s((() => {
        g(undefined);
        M(false);
    }), [ g, M ]);
    const z = s((e => {
        if (!O || !w || e >= O.length || e < 0) {
            return;
        }
        return w.indexOf(O[e]);
    }), [ O, w ]);
    const F = s((e => {
        const t = z(e);
        if (t === undefined) {
            return;
        }
        C?.({
            index: t
        });
        const o = w?.[t];
        if (o?.suggestionType !== "catalog") {
            B();
        }
    }), [ z, C, B, w ]);
    const j = c(null);
    const V = s((e => {
        j.current = e;
        D_(l, e);
    }), [ l ]);
    const H = c(null);
    d((() => {
        if (A && u?.current && j.current && H.current) {
            u.current.style.maxWidth = `${j.current.getBoundingClientRect().width}px`;
            H.current.style.maxWidth = `${j.current.getBoundingClientRect().width}px`;
        }
    }), [ A, u, j, H ]);
    const U = JI((() => {
        B();
        p(false);
        if (f === undefined || f === null) {
            E?.({
                value: R,
                reason: "blur"
            });
        }
    }));
    const G = U.onBlur;
    const K = U.onFocus;
    const W = s((e => {
        if (!u.current?.contains(e.relatedTarget)) {
            G();
            T?.();
            !y && window.getSelection().empty();
            b(false);
            p(false);
        }
    }), [ y, T, G ]);
    const $ = s((() => {
        p(true);
        if (N === "always" || N === "secondFocus" && !x) {
            M(true);
        }
        if (x) {
            S(false);
        }
        D?.();
    }), [ x, N, D ]);
    const Y = s((e => {
        if (j.current && e.target !== j.current) {
            j.current.focus();
            return;
        }
        K();
        if (e.relatedTarget !== null) {
            $();
        }
    }), [ $, K ]);
    const q = s(((e, t, o) => {
        if (!e) {
            return undefined;
        }
        let n = 0;
        if (o === "decrement") {
            if (!qI(t)) {
                n = Math.max(t - 1, 0);
            } else {
                n = e.length - 1;
            }
        } else {
            if (!qI(t) && !!e) {
                n = Math.min(t + 1, e.length - 1);
            }
        }
        if (e[n].separator) {
            return q(e, n, o);
        }
        return n;
    }), []);
    const X = s(((e, t) => {
        if (!w || !O) {
            return {
                nextFocusedIndex: undefined,
                nextSuggestionIndex: undefined
            };
        }
        const o = q(O, e, t);
        const n = e ? w.indexOf(O[e]) : undefined;
        const a = q(w, n, t);
        return {
            nextFocusedIndex: o,
            nextSuggestionIndex: a
        };
    }), [ w, O, q ]);
    const Z = s((() => {
        L?.();
    }), [ L ]);
    const J = s((e => {
        if (k && e.key === "Enter") {
            PA(e);
        }
        if (e.key === "Escape") {
            B();
            const t = _?.();
            if (A || _ && t !== false) {
                e.preventDefault();
                e.stopPropagation();
            }
            return;
        }
        if (!A && e.key !== "Enter" && kV(e.key) && N !== "never") {
            M(true);
            if (R === "" && N === "secondFocus" && e.key === " ") {
                e.preventDefault();
                e.stopPropagation();
            }
        }
        if (!A || !w || w.length === 0) {
            return;
        }
        if (e.key === "ArrowDown") {
            e.preventDefault();
            e.stopPropagation();
            const t = X(f, "increment");
            g(t.nextFocusedIndex);
        } else if (e.key === "ArrowUp") {
            e.preventDefault();
            e.stopPropagation();
            const t = X(f, "decrement");
            g(t.nextFocusedIndex);
        }
    }), [ B, k, f, X, _, N, R, A, w ]);
    const Q = s((e => {
        const t = e.target.value;
        I({
            value: t
        });
        g(undefined);
    }), [ I ]);
    const ee = s((e => {
        if (e.key === "Enter") {
            e.preventDefault();
            e.stopPropagation();
            if (!qI(f) && !!O && w) {
                const e = w.indexOf(O[f]);
                const t = w[e];
                const o = t.text;
                const n = t.suggestionType;
                if (!!o) {
                    C?.({
                        index: e
                    });
                    if (n && n !== "catalog") {
                        B();
                    }
                    return;
                }
            }
            B();
            E?.({
                reason: "enter",
                value: R
            });
        }
    }), [ B, f, w, O, C, E, R ]);
    const te = s((e => {
        b(true);
        const t = e.target;
        const o = t?.value;
        if (o?.length && UA(t, o)) {
            t.setAttribute("title", o);
        } else {
            t.removeAttribute("title");
        }
    }), [ b ]);
    const oe = s((() => b(false)), []);
    const ne = s((() => {
        if (!A && N !== "never") {
            M(true);
        }
    }), [ N, A ]);
    const ae = C_();
    const re = r((() => {
        const e = i.theme;
        const t = i.placeholderTheme;
        let o = {};
        if (e) {
            o = {
                ...I_(e({
                    state: "normal"
                }), "input"),
                ...I_(e({
                    state: "alert"
                }), "input-alert"),
                ...I_(e({
                    state: "warning"
                }), "input-warning")
            };
        }
        if (t) {
            o = {
                ...o,
                ...I_(t(), "input-placeholder")
            };
        }
        return o;
    }), [ i.theme, i.placeholderTheme ]);
    const se = jD(L_.FOCUS_OVERRIDE) === "true";
    let ie;
    let le;
    if (ae.themeVariant !== "high-contrast" && y && !i.disabled && !se) {
        ie = "none";
    }
    if ((ae.themeVariant === "high-contrast" || i.disabled) && i.variant === "composite") {
        le = "transparent";
    }
    const ce = {
        ...I_(RV(ae, i.status), "input"),
        ...I_({
            "pd-squish-s": ae.spacing.insetSquish.s.padding,
            "mg-xs": ae.spacing.core.xs
        }, "input"),
        ...I_({
            outline: ie,
            "noneditable-bd": le
        }, "input-focus"),
        ...re,
        ...i.font
    };
    const de = CV();
    const ue = EV(w ? w.length : 0);
    const me = IV();
    const pe = [];
    if (i.status) pe.push(me);
    if (i.ariaDescribedBy) pe.push(...i.ariaDescribedBy);
    const fe = c();
    const ge = s((({index: e}) => {
        if (o) {
            _V.debug("history double click check is enabled");
            const t = z(e);
            _V.debug(`suggestionIndex: ${t}`);
            if (t) {
                if (w?.[t]?.suggestionType === "history") {
                    _V.debug("history item detected");
                    if (fe.current) {
                        _V.debug(`double-click detected on:  ${t}`);
                        const [n, a] = fe.current;
                        fe.current = undefined;
                        clearTimeout(n);
                        if (a === e) {
                            const e = z(a);
                            if (e !== undefined) {
                                o({
                                    index: e
                                });
                                B();
                            }
                        }
                        return;
                    }
                    const n = setTimeout((() => {
                        _V.debug(`entering timeout handler`);
                        if (fe.current) {
                            const [e, t] = fe.current;
                            fe.current = undefined;
                            clearTimeout(e);
                            F(t);
                            _V.debug(`history item ${t} was single-clicked`);
                        }
                    }), DV);
                    fe.current = [ n, e ];
                    return;
                }
            }
        }
        _V.debug((() => `single click detected on:  ${e} at ${Date.now()}`));
        F(e);
    }), [ F, w, z, o, B ]);
    let he = "";
    if (O?.length === 0) {
        he = v("narrator.noresults.msg");
    } else if (A) {
        if (O?.length === 1) he = v("narrator.result.msg"); else {
            he = v("narrator.results.msg", {
                numResults: O?.length.toString() || ""
            });
        }
    }
    const be = XA();
    a((() => {
        if (A || O?.length === 0) {
            be?.notify(he);
        }
    }), [ be, A, O?.length, he ]);
    const ve = r((() => t(sV, {
        ref: u,
        focusedIndex: f,
        listId: de,
        isOpen: A,
        referenceElementRef: j,
        displayListItemIcon: true,
        ulRef: H,
        items: !!w ? w.map(((e, t) => ({
            ...e,
            id: ue[t]
        }))) : [],
        onSelectFocusedItem: () => {
            if (!qI(f)) {
                F(f);
            }
        },
        onSelected: ge,
        listItemFocusable: true,
        testId: gb(i.testId, "suggestionPopper"),
        focusLockProps: {
            disabled: true
        },
        style: {
            marginBlockStart: "1px"
        },
        showSelectedPseudoFocus: true
    })), [ A, u, f, de, j, H, w, F, ge, i.testId, ue ]);
    return t("div", {
        className: ke(SV.container, i.className),
        style: {
            ...ce,
            ...i.style
        },
        onBlur: W,
        onFocus: Y,
        onMouseDown: Z,
        "data-testid": i.testId
    }, t("input", {
        style: i.font,
        tabIndex: i.tabindex,
        className: ke(SV.input, i.hideBorder && SV.hideBorder, i.status && SV.hasInputIcon, i.disabled && SV.disabled, !y && SV.readonly, i.variant === "composite" && i.status === undefined && !y && SV.composite, i.variant === "composite" && !y && SV.nonEditableInput, P && SV.rtl),
        "data-testid": gb(i.testId, "input"),
        ref: V,
        value: R,
        placeholder: !y ? undefined : i.placeholder,
        onChange: Q,
        onKeyDown: J,
        onKeyPress: ee,
        onMouseEnter: te,
        onMouseLeave: oe,
        onClick: ne,
        onFocus: () => {
            p(true);
        },
        type: "text",
        spellCheck: "false",
        autoComplete: "off",
        "aria-autocomplete": A ? "list" : undefined,
        "aria-haspopup": A ? true : undefined,
        "aria-disabled": i.disabled,
        "aria-invalid": i.status === "alert" ? true : undefined,
        "aria-describedby": pe.length > 0 ? pe.join(" ") : undefined,
        "aria-controls": A ? de : undefined,
        "aria-activedescendant": A && !qI(f) && z(f) !== undefined ? ue[z(f)] : undefined,
        "aria-label": i.ariaLabel,
        "aria-labelledby": i.ariaLabelledBy,
        id: i.id,
        readOnly: !y || i.disabled,
        "aria-readonly": !y,
        maxLength: i.maxLength,
        "data-landmark-label": i.landmarkLabel,
        role: i.role
    }), i.status ? t("span", {
        "aria-live": "off",
        role: "status",
        style: {
            width: "0"
        }
    }, t("span", {
        className: SV.offscreen,
        id: me
    }, v("invalidInput.msg", {
        message: wV(i.message) ? i.message.message : i.message
    }))) : null, !m && i.status ? t("div", {
        className: SV.inputIcon,
        onMouseEnter: te,
        onMouseLeave: oe
    }, t(MM, {
        icon: i.status === "alert" ? Yk : CA,
        color: i.status
    })) : null, ve, i.status ? t(QF, Ee({
        status: i.status,
        referenceElementRef: j
    }, wV(i.message) ? i.message : {
        message: i.message
    }, {
        hidden: !m && !h,
        testId: gb(i.testId, "messagePopper")
    })) : null);
}));

const RV = (e, t) => {
    if (e.enableNovaTokens) {
        if (t) {
            return {
                ...e.stateStatusNova[t],
                "placeholder-fg": e.c.colorTextLabel,
                "selection-bg": e.textNova.selection.bg,
                "selection-fg": e.textNova.selection.fg,
                "disabled-opacity": 1,
                "disabled-fg": e.stateInputNova.disabled.fg,
                "disabled-bd": e.stateInputNova.disabled.bd,
                "disabled-bg": e.stateInputNova.disabled.bg,
                "noneditable-bg": e.stateInputNova.nonEditable.bg,
                "noneditable-bd": e.stateInputNova.nonEditable.bd
            };
        } else {
            return {
                ...e.stateInputNova.normal,
                "selection-bg": e.textNova.selection.bg,
                "selection-fg": e.textNova.selection.fg,
                "disabled-opacity": 1,
                "focus-bd": e.stateInputNova.focused.bd,
                "placeholder-fg": e.c.colorTextLabel,
                "readonly-bg": e.stateInputNova.readOnly.bg,
                "readonly-bd": e.stateInputNova.readOnly.bd,
                "readonly-fg": e.stateInputNova.readOnly.fg,
                "noneditable-bg": e.stateInputNova.nonEditable.bg,
                "noneditable-bd": e.stateInputNova.nonEditable.bd,
                "noneditable-fg": e.stateInputNova.nonEditable.fg,
                "disabled-fg": e.stateInputNova.disabled.fg,
                "disabled-bd": e.stateInputNova.disabled.bd,
                "disabled-bg": e.stateInputNova.disabled.bg
            };
        }
    } else {
        if (t) {
            const o = {
                ...e.stateStatus[t],
                "selection-bg": e.text.selection.bg,
                "selection-fg": e.text.selection.fg
            };
            if (e.baseReportThemeName === "highcontrast2017" || e.baseReportThemeName === "highcontrast2018") {
                return {
                    ...o,
                    "placeholder-fg": e.c.hcDisabled,
                    "disabled-opacity": .5
                };
            }
            switch (e.themeVariant) {
              case "dark":
                return {
                    ...o,
                    "placeholder-fg": Jv(e.c.white, .3),
                    "disabled-opacity": .25
                };

              case "high-contrast":
                return {
                    ...o,
                    "placeholder-fg": Jv(e.c.white, .5),
                    "disabled-opacity": .5
                };

              default:
                return {
                    ...o,
                    "placeholder-fg": e.c.n1,
                    "disabled-opacity": .3
                };
            }
        } else {
            if (e.baseReportThemeName === "highcontrast2017" || e.baseReportThemeName === "highcontrast2018") {
                return {
                    bd: e.c.white,
                    bg: e.c.black,
                    fg: e.c.white,
                    "selection-bg": e.text.selection.bg,
                    "selection-fg": e.text.selection.fg,
                    "placeholder-fg": e.c.hcDisabled,
                    "disabled-opacity": .5,
                    "focus-bd": e.c.p0
                };
            }
            switch (e.themeVariant) {
              case "dark":
                return {
                    bd: Jv(e.c.white, .3),
                    bg: e.c.p_3,
                    fg: e.c.white,
                    "selection-bg": e.text.selection.bg,
                    "selection-fg": e.text.selection.fg,
                    "placeholder-fg": Jv(e.c.white, .3),
                    "disabled-opacity": .25,
                    "focus-bd": e.c.p0
                };

              case "high-contrast":
                return {
                    bd: e.c.white,
                    bg: e.c.black,
                    fg: e.c.white,
                    "selection-bg": e.text.selection.bg,
                    "selection-fg": e.text.selection.fg,
                    "placeholder-fg": Jv(e.c.white, .5),
                    "disabled-opacity": .5,
                    "focus-bd": e.c.p3
                };

              default:
                return {
                    bd: e.c.n1,
                    bg: e.c.white,
                    fg: e.c.n_3,
                    "selection-bg": e.text.selection.bg,
                    "selection-fg": e.text.selection.fg,
                    "placeholder-fg": e.c.n1,
                    "disabled-opacity": .3,
                    "focus-bd": e.c.p0
                };
            }
        }
    }
};

const kV = e => ![ "Alt", "AltGraph", "CapsLock", "Control", "Fn", "FnLock", "Meta", "NumLock", "ScrollLock", "Shift", "Symbol", "SymbolLock", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowUp", "End", "Home", "PageDown", "PageUp", "Meta", "NumLock", "ScrollLock", "Shift", "Symbol", "SymbolLock", "Copy", "CrSel", "Cut", "Delete", "EraseEof", "ExSel", "Insert", "Accept", "Again", "Attn", "Cancel", "ContextMenu", "Escape", "Execute", "Find", "Help", "Pause", "Play", "Props", "Select", "ZoomIn", "ZoomOut", "BrightnessDown", "BrightnessUp", "Eject", "LogOff", "Power", "WakeUp", "ChannelDown", "ChannelUp", "Close", "MailForward", "MailReply", "MailSend", "MediaClose", "MediaFastForward", "MediaPause", "MediaPlay", "MediaPlayPause", "MediaRecord", "MediaRewind", "MediaStop", "MediaTrackNext", "MediaTrackPrevious", "New", "Open", "Print", "Save", "SpellCheck", "AudioBalanceLeft", "AudioBalanceRight", "AudioBassBoostDown", "AudioBassBoostToggle", "AudioBassBoostUp", "AudioFaderFront", "AudioFaderRear", "AudioSurroundModeNext", "AudioTrebleDown", "AudioTrebleUp", "AudioVolumeDown", "AudioVolumeUp", "AudioVolumeMute", "MicrophoneToggle", "MicrophoneVolumeDown", "MicrophoneVolumeUp", "MicrophoneVolumeMute", "SpeechCorrectionList", "SpeechInputToggle", "LaunchApplication1", "LaunchApplication2", "LaunchCalendar", "LaunchContacts", "LaunchMail", "LaunchMediaPlayer", "LaunchMusicPlayer", "LaunchPhone", "LaunchScreenSaver", "LaunchSpreadsheet", "LaunchWebBrowser", "LaunchWebCam", "LaunchWordProcessor", "BrowserBack", "BrowserFavorites", "BrowserForward", "BrowserHome", "BrowserRefresh", "BrowserSearch", "BrowserStop", "AppSwitch", "Call", "Camera", "CameraFocus", "EndCall", "GoBack", "GoHome", "HeadsetHook", "LastNumberRedial", "Notification", "MannerMode", "VoiceDial", "TV", "TV3DMode", "TVAntennaCable", "TVAudioDescription", "TVAudioDescriptionMixDown", "TVAudioDescriptionMixUp", "TVContentsMenu", "TVDataService", "TVInput", "TVInputComponent1", "TVInputComponent2", "TVInputComposite1", "TVInputComposite2", "TVInputHDMI1", "TVInputHDMI2", "TVInputHDMI3", "TVInputHDMI4", "TVInputVGA1", "TVMediaContext", "TVNetwork", "TVNumberEntry", "TVPower", "TVRadioService", "TVSatellite", "TVSatelliteBS", "TVSatelliteCS", "TVSatelliteToggle", "TVTerrestrialAnalog", "TVTerrestrialDigital", "TVTimer" ].includes(e);

const AV = i(undefined);

AV.Provider;

const MV = () => l(AV);

let NV;

const OV = new URLSearchParams(window.location.search).get("nova-format")?.replace("_", "-")?.toLowerCase();

const PV = OV ? dh(OV) : null;

let BV = () => {
    YD((e => {
        NV = e;
    }));
    BV = () => {};
};

const zV = e => {
    let t = null;
    const o = YD((o => {
        t = o;
        e();
        t.registerChangeListener(L_.FORMAT_LOCALE_KEY, e);
    }));
    return () => {
        o();
        t?.deRegisterChangeListener(L_.FORMAT_LOCALE_KEY, e);
    };
};

const FV = () => NV?.get(L_.FORMAT_LOCALE_KEY);

const jV = (e = true) => {
    BV();
    const t = MV();
    const o = x(zV, FV);
    const n = db();
    const a = PV ?? t ?? o ?? n;
    return e ? dh(a) : a;
};

let VV = function(e) {
    e[e["Sunday"] = 0] = "Sunday";
    e[e["Monday"] = 1] = "Monday";
    e[e["Tuesday"] = 2] = "Tuesday";
    e[e["Wednesday"] = 3] = "Wednesday";
    e[e["Thursday"] = 4] = "Thursday";
    e[e["Friday"] = 5] = "Friday";
    e[e["Saturday"] = 6] = "Saturday";
    return e;
}({});

function HV(e) {
    return Array.isArray(e) ? t => e.includes(t.getDay()) : t => e === t.getDay();
}

const UV = (e, {today: t}) => {
    if (e.getFullYear() < t.getFullYear()) {
        return true;
    } else if (e.getFullYear() > t.getFullYear()) {
        return false;
    } else if (e.getMonth() < t.getMonth()) {
        return true;
    } else if (e.getMonth() > t.getMonth()) {
        return false;
    } else if (e.getDate() < t.getDate()) {
        return true;
    } else {
        return false;
    }
};

const GV = (e, {today: t}) => {
    if (e.getFullYear() > t.getFullYear()) {
        return true;
    } else if (e.getFullYear() < t.getFullYear()) {
        return false;
    } else if (e.getMonth() > t.getMonth()) {
        return true;
    } else if (e.getMonth() < t.getMonth()) {
        return false;
    } else if (e.getDate() > t.getDate()) {
        return true;
    } else {
        return false;
    }
};

function KV(e) {
    return (t, o) => e.some((e => e(t, o)));
}

function WV(e) {
    const t = [];
    if (e.weekdays) {
        t.push(HV(e.weekdays));
    }
    if (e.pastDates) {
        t.push(UV);
    }
    return KV(t);
}

var $V = "sas_components-Input-Input_offscreen";

var YV = "sas_components-Input-Input_container";

var qV = "sas_components-Input-Input_input";

var XV = "sas_components-Input-Input_has-input-icon";

var ZV = "sas_components-Input-Input_readonly";

var JV = "sas_components-Input-Input_disabled";

var QV = "sas_components-Input-Input_hide-border";

var eH = "sas_components-Input-Input_input-icon";

var tH = "sas_components-Input-Input_has-status-and-clear";

var oH = "sas_components-Input-Input_has-status-xor-clear";

var nH = "sas_components-Input-Input_composite";

var aH = "sas_components-Input-Input_rtl";

var rH = "sas_components-Input-Input_inplace-edit";

var sH = "sas_components-Input-Input_composite-input-icon";

var iH = "sas_components-Input-Input_clear-button";

var lH = {
    offscreen: $V,
    container: YV,
    input: qV,
    hasInputIcon: XV,
    readonly: ZV,
    disabled: JV,
    hideBorder: QV,
    inputIcon: eH,
    hasStatusAndClear: tH,
    hasStatusXorClear: oH,
    composite: nH,
    rtl: aH,
    inplaceEdit: rH,
    compositeInputIcon: sH,
    clearButton: iH
};

const cH = MA("Input-SuggestionList");

const dH = MA("Input-SuggestionListItem");

const uH = MA("Input-ValidationMessage");

const mH = MA("Input-clearButton");

const pH = MA("Input-describedby");

const fH = fb(dt);

const gH = e => e?.message !== undefined;

const hH = u((function e(i, l) {
    const u = c(null);
    const m = c(null);
    const [p, f] = n(false);
    const [h, b] = n(false);
    const [v, y] = n(undefined);
    const [x, S] = n(false);
    const [w, C] = n("");
    const E = fH();
    const I = ay();
    const _ = c(null);
    const D = c(false);
    const L = c(-1);
    const T = c(false);
    const R = c(null);
    const k = c("");
    const A = r((() => {
        if (!x) return [];
        if (i.suggestionItemsFilterFunction) {
            return i.suggestionItemsFilterFunction?.(w, L.current !== -1 ? L.current : w.length);
        }
        return i.suggestionItems ? vH(i.suggestionItems, w, i.filterType, i.suppressSecondaryTextMatch) : [];
    }), [ i, x, w ]);
    const M = A.length > 0;
    const N = e => {
        if (!A || e >= A.length || e < 0) {
            return;
        }
        const {text: t} = A[e];
        _?.current?.setSelectionRange(L.current, L.current + t?.length - 1, undefined);
        const {text: o} = A[e];
        i.onChange?.({
            value: o || "",
            reason: "suggestion",
            cursorPosition: _?.current?.selectionStart ?? w.length,
            focusedIndex: e
        });
        i.onCommit?.({
            value: o || "",
            reason: "suggestion"
        });
        P();
    };
    const O = YI();
    const P = s((() => {
        if (O.current) {
            S(false);
            y(undefined);
            D.current = false;
        }
    }), [ O ]);
    const B = () => {
        const e = [];
        if (i.keyboardTooltip) {
            e.push(i.keyboardTooltip);
        }
        if (i.value === "" && _.current && i.placeholder && UA(_.current, i.placeholder)) {
            e.push(i.placeholder);
        }
        if (i.value && _.current && UA(_.current)) {
            e.push(_.current.value);
        }
        if (i.customTooltip) e.push(i.customTooltip);
        return e.join(`\n\n`);
    };
    const z = WA({
        tooltip: i.customTooltip
    });
    const F = i.type === "number" ? "tel" : i.type;
    const j = fO({
        getTooltip: () => i.getKeyboardTooltip?.() ?? B()
    });
    const V = e => {
        if (e) {
            D_(l, e);
            R.current = e;
        }
        if (F !== "password") {
            z(e);
            j(e);
        }
    };
    const H = s((e => {
        _.current = e;
        D_(l, e);
        if (F !== "password") {
            z(e);
            j(e);
        }
    }), [ l, j, z, F ]);
    g(i.suggestionsRef, (() => ({
        isOpen: () => M,
        closeSuggestions: () => P()
    })), [ M, P ]);
    const [U, G] = n(false);
    const K = i.editable ?? true;
    d((() => {
        !K && _.current?.setSelectionRange(0, 0, undefined);
    }), [ K ]);
    d((function e() {
        if (!U) return;
        G(false);
        const t = [ "text", "url", "password", "tel", "search", "week", "month" ];
        setTimeout((() => {
            if (!_.current || _.current !== document.activeElement || F && !t.includes(F.toLowerCase())) return;
            if (!i.disabled && i.value && K && !i.suggestionItemsFilterFunction || p) {
                _.current.setSelectionRange(0, i.value.length, undefined);
            } else if (!i.disabled && i.value && K && i.suggestionItemsFilterFunction || p) {
                if (v !== undefined && v !== null && v >= 0) {
                    const {text: e} = A[v];
                    _?.current?.setSelectionRange(L.current, L.current + e?.length - 1, undefined);
                }
            } else {
                _.current.setSelectionRange(0, 0, undefined);
            }
            _.current.scrollIntoView?.({
                block: "nearest"
            });
        }), 0);
    }), [ U, i.value, F, i.disabled, p, K, i.suggestionItemsFilterFunction, A, v, i.variant ]);
    const W = !K || i.disabled;
    const $ = c(i.onChange);
    a((() => {
        $.current = i.onChange;
    }), [ i.onChange ]);
    const Y = typeof v === "number" ? A?.[v]?.text : undefined;
    a((() => {
        if (qI(Y)) {
            return;
        }
        $.current?.({
            value: Y,
            reason: "suggestion",
            cursorPosition: L.current !== -1 ? L.current : w.length,
            focusedIndex: v
        });
        G(true);
    }), [ Y, w, v ]);
    const q = JI((() => {
        P();
        O.current && b(false);
        if (v !== undefined && v !== null && v >= 0) i.onCommit?.({
            value: i.value,
            reason: "suggestion"
        }); else i.onCommit?.({
            value: i.value,
            reason: "blur"
        });
    }));
    const X = e => {
        const t = u.current?.contains(e.relatedTarget) || u.current?.contains(e.target);
        const o = m.current !== null && (m.current === e.relatedTarget || m.current === e.target);
        window.getSelection && window.getSelection()?.empty();
        if (O.current && !t && !o) {
            q.onBlur();
            i.onBlur?.();
            ie(false);
            b(false);
            if (i.isInPlaceEditMode) {
                f(!!i.status);
            }
            D.current = false;
        }
        if (!W && h && i.revertToLastCommittedValue && _.current) {
            k.current = _.current.value;
        }
    };
    const Z = () => {
        if (O.current) {
            q.onFocus();
            b(true);
            G(true);
            S(true);
            if (i.isInPlaceEditMode && !i.disabled && !T.current) {
                f(true);
            }
            i.onFocus?.();
        }
    };
    const J = e => {
        if (m && e.target === m.current) return;
        if (_.current && e.target !== _.current) {
            _.current.focus();
            return;
        }
        Z();
    };
    const Q = e => {
        i.onMouseDown?.(e);
    };
    const ee = e => {
        i.onMouseUp?.(e);
        L.current = _.current?.selectionStart ?? _.current?.value.length ?? 0;
    };
    const te = e => {
        const t = e.ctrlKey || e.metaKey;
        if (_.current && K && !t && (e.key.length === 1 || e.keyCode === 229)) {
            if (i.maxLength && i.value.length >= i.maxLength) _e.play?.();
        }
        const o = i.commitOnEnterInDialog ?? false;
        if (e.key === "Enter") {
            if (o) PA(e);
            if (!W && h && i.revertToLastCommittedValue && _.current) {
                k.current = _.current.value;
            }
        }
        const n = (u?.current?.children ? [ ...u?.current?.children[0].children ] : []).filter((e => e.getAttribute("role") !== "separator"));
        const a = e => n[e];
        const r = (e, t) => a(e)?.scrollIntoView?.(t);
        const s = e => {
            y((t => {
                let o;
                if (e === "ArrowDown") {
                    o = !qI(t) ? Math.min(t + 1, A.length - 1) : 0;
                } else if (e === "ArrowUp") {
                    o = !qI(t) ? Math.max(t - 1, 0) : A.length - 1;
                }
                if (o === undefined) return;
                r(o, {
                    block: "nearest"
                });
                return o;
            }));
        };
        if (e.key === "Escape") {
            if (!W && h && i.revertToLastCommittedValue) {
                PA(e);
                oe(k.current.toString());
                setTimeout((() => {
                    _.current?.setSelectionRange(0, k.current.length, undefined);
                }), 0);
                return;
            }
            P();
            const t = i.onCancel?.();
            G(true);
            if (M || t === true) {
                if (i.role !== "combobox") {
                    e.preventDefault();
                    e.stopPropagation();
                }
            }
            return;
        }
        L.current = _.current?.selectionStart ?? _.current?.value.length ?? 0;
        if (!M || !A || A.length === 0) {
            D.current = false;
            return;
        }
        if (e.key === "ArrowDown") {
            e.preventDefault();
            O.current && s(e.key);
            if (v && v + 1 === A.length) _e.play?.();
        } else if (e.key === "ArrowUp") {
            e.preventDefault();
            O.current && s(e.key);
            if (v === 0) _e.play?.();
        }
        if (e.key === "PageDown") {
            e.preventDefault();
            e.stopPropagation();
            return;
        } else if (e.key === "PageUp") {
            e.preventDefault();
            e.stopPropagation();
            return;
        }
    };
    const oe = e => {
        i.onChange?.({
            value: e,
            reason: "onChange"
        });
        if (O.current) {
            C(e);
            S(true);
            y(undefined);
            D.current = true;
        }
    };
    const ne = e => {
        L.current = _.current?.selectionStart ?? _.current?.value.length ?? 0;
        oe(e.target.value);
    };
    const ae = async () => {
        oe("");
        _.current?.focus();
        Z();
        _.current?.removeAttribute("title");
    };
    const re = e => {
        if (O.current && e.key === "Enter") {
            P();
            if (v !== undefined && v !== null && v >= 0) {
                i.onCommit?.({
                    value: i.value,
                    reason: "suggestion"
                });
            } else {
                i.onCommit?.({
                    value: i.value,
                    reason: "enter"
                });
            }
            if (i.isInPlaceEditMode) {
                f(!!i.status);
                T.current = !i.status;
            }
        }
    };
    a((() => {
        if (!p && R.current && i.isInPlaceEditMode && T.current) {
            R.current.focus();
            T.current = false;
        }
    }), [ i.isInPlaceEditMode, p ]);
    const [se, ie] = n(false);
    const le = () => ie(true);
    const ce = () => ie(false);
    const de = C_();
    const {density: ue} = YA();
    const me = jD(L_.FOCUS_OVERRIDE) === "true";
    const pe = {
        ...yH(de, {
            disabled: i.disabled,
            font: i.font,
            theme: i.theme,
            placeholderTheme: i.placeholderTheme,
            status: i.status,
            editable: K,
            variant: i.variant,
            density: ue,
            isCustomFocusTurnedOn: me
        }),
        ...i.futureTheme?.(de)
    };
    const fe = cH();
    const ge = dH(A?.length || 0);
    const he = uH();
    const be = pH();
    const ve = [];
    if (i.iconProps?.icon && i.value && !(i.iconProps?.tooltip === "" && i.iconProps?.ariaLabel === "")) ve.push(i.iconProps?.id);
    if (i.customTooltip) ve.push(be);
    if (i.ariaDescribedBy) {
        ve.push(...i.ariaDescribedBy);
    }
    const ye = [ "url", "email", "tel" ];
    const xe = _ && _.current && i.isInPlaceEditMode && p;
    a((() => {
        if (xe) {
            _.current.setSelectionRange(0, 0);
            _.current.focus();
        }
    }), [ xe ]);
    let Se = "";
    if (A?.length === 0) {
        Se = E("narrator.noresults.msg");
    } else if (M) {
        if (A?.length === 1) Se = E("narrator.result.msg"); else {
            Se = E("narrator.results.msg", {
                numResults: A?.length.toString()
            });
        }
    }
    let we = "";
    if (i.status) {
        if (h && i.message) {
            we = E("invalidInput.msg", {
                message: gH(i.message) ? i.message.message : i.message
            });
        } else if (i.ariaLabel) {
            if (i.status === "warning") {
                we = E("invalidEntryWarning.aria", {
                    label: i.ariaLabel
                });
            } else {
                we = E("invalidEntryError.aria", {
                    label: i.ariaLabel
                });
            }
        }
    }
    const Ce = XA();
    a((() => {
        if (i.status) {
            f(!!i.status);
            Ce?.notify(we);
        }
        if (h && D.current && i.value !== "" && i.suggestionItems && A?.length >= 0) {
            Ce?.notify(Se);
            if (M) D.current = false;
        }
    }), [ i.status, Ce, we, M, i.suggestionItems, A?.length, Se, h, i.value, D ]);
    const Ie = !!i.showClearButton && i.value !== "" && i.required !== true && i.disabled !== true && (K || !K && i.variant === "composite");
    const _e = $B({
        source: OB.InputFull
    });
    const De = mH();
    const {clearBtnTooltip: Le, clearBtnAriaLabel: Te, orgClearBtnAriaLabel: Re, clearBtnAriaLabelledBy: Ae} = r((() => {
        const e = i.clearButtonTooltip || E("clear.tooltip.label");
        const t = i.clearButtonAriaLabel || e;
        const o = i.ariaLabel ? `${t}, ${i.ariaLabel}` : t;
        const n = i.ariaLabelledBy ? [ De, i.ariaLabelledBy ].join(" ") : undefined;
        return {
            clearBtnTooltip: e,
            clearBtnAriaLabel: o,
            orgClearBtnAriaLabel: t,
            clearBtnAriaLabelledBy: n
        };
    }), [ E, i.ariaLabel, i.ariaLabelledBy, i.clearButtonAriaLabel, i.clearButtonTooltip, De ]);
    const Me = i.ariaLabelledBy ? t(bO, {
        id: De
    }, Re) : null;
    const Ne = i.iconProps?.tooltip ?? E("icon.tooltip.label");
    const Oe = i.iconProps?.ariaLabel ?? Ne;
    return t(o, null, t("div", {
        className: ke(lH.container, {
            [lH.hasStatusXorClear]: !!i.status !== Ie,
            [lH.hasStatusAndClear]: !!i.status && Ie
        }, i.className),
        style: {
            ...pe,
            ...i.style
        },
        onBlur: X,
        onFocus: J,
        onMouseDown: e => {
            Q(e);
        },
        onMouseUp: e => {
            ee(e);
        },
        "data-testid": i.testId
    }, i.iconProps?.icon && i.value && t("span", {
        className: ke(lH.compositeInputIcon)
    }, t(MM, Ee({
        className: ke(lH.compositeInputIcon, i.iconProps.className)
    }, i.iconProps, {
        style: {
            "--icon-height": ue === "high" ? de.tokensExperimental["font-size-body-text-s"] : de.tokensExperimental["font-size-body-text-m"],
            "--icon-width": ue === "high" ? de.tokensExperimental["font-size-body-text-s"] : de.tokensExperimental["font-size-body-text-m"]
        },
        id: i.iconProps.id,
        tooltip: Ne,
        ariaLabel: Oe
    }))), i.isInPlaceEditMode && !p ? t(jP, {
        className: lH.inplaceEdit,
        ref: V,
        testId: gb(i.testId, "inplaceEdit"),
        disabled: i.disabled,
        focusable: true,
        wrapText: false,
        onClick: () => {
            Z();
        },
        theme: () => ({
            "--text-font-size-m": "var(--input-font-size)"
        })
    }, i.value) : t("input", Ee({
        dir: I && F && ye.includes(F.toLowerCase()) ? "ltr" : undefined,
        tabIndex: i.tabindex
    }, (i.title || i.customTooltip) && {
        title: i.title ?? i.customTooltip
    }, {
        className: ke(lH.input, {
            [lH.hasInputIcon]: i.status,
            [lH.hideBorder]: i.hideBorder,
            [lH.disabled]: i.disabled,
            [lH.readonly]: !K,
            [lH.composite]: i.variant === "composite",
            [lH.rtl]: I
        }),
        "data-testid": gb(i.testId, "input"),
        ref: H,
        value: i.value,
        placeholder: !K && (i.variant === undefined || i.variant === "standard") ? undefined : i.placeholder,
        onChange: ne,
        onKeyDown: te,
        onKeyPress: re,
        onMouseEnter: le,
        onMouseLeave: ce,
        onKeyUp: () => {},
        type: F === "email" ? "text" : F ?? "text",
        autoComplete: F === "password" ? "new-password" : !!i.enableAutoComplete ? "on" : "off",
        "aria-autocomplete": M ? "list" : undefined,
        "aria-haspopup": M ? true : undefined,
        "aria-required": i.required,
        "aria-disabled": i.disabled,
        "aria-hidden": i.ariaHidden,
        "aria-invalid": i.status === "alert" || i.ariaInvalid ? true : undefined,
        "aria-describedby": ve.length > 0 ? ve.join(" ") : undefined,
        "aria-controls": M ? fe : undefined,
        "aria-activedescendant": M && !qI(v) ? ge[v] : undefined,
        "aria-label": i.ariaLabel,
        "aria-labelledby": i.ariaLabelledBy,
        id: i.id,
        readOnly: !K || i.disabled,
        "aria-readonly": !K,
        maxLength: i.maxLength,
        "data-landmark-label": i.landmarkLabel,
        role: i.role,
        onFocus: e => {
            if (i.disabled || !K) e.target.setSelectionRange(0, 0, undefined);
        }
    })), i.customTooltip ? t(bO, {
        id: be
    }, i.customTooltip) : null, i.status ? t("span", {
        "aria-live": "off",
        role: "status",
        style: {
            width: "0",
            overflow: "hidden"
        }
    }, t("span", {
        className: lH.offscreen,
        id: he
    }, E("invalidInput.msg", {
        message: gH(i.message) ? i.message.message : i.message
    }))) : null, Ie ? t(o, null, t(QM, {
        ref: e => {
            {
                m.current = e;
                D_(i.clearButtonRef, e);
            }
        },
        className: lH.clearButton,
        variant: oN.Icon,
        disabled: i.disabled,
        icon: {
            icon: lT
        },
        tooltip: Le,
        ariaLabel: Te,
        ariaLabelledBy: Ae,
        onPress: () => {
            ae();
        },
        testId: gb(i.testId, "clearButton"),
        tokens: i.clearButtonTokens,
        theme: () => ({
            "--button-active-bd": "transparent"
        })
    }), Me) : null, !h && i.status ? t("div", {
        className: lH.inputIcon,
        onMouseEnter: le,
        onMouseLeave: ce
    }, t(MM, Ee({
        icon: i.status === "alert" ? Yk : CA,
        disabled: i.disabled,
        testId: gb(i.testId, "statusIcon")
    }, ue === "high" && {
        style: {
            "--icon-height": de.tokensExperimental["size-icon-s"],
            "--icon-width": de.tokensExperimental["size-icon-s"]
        }
    }))) : null, t(sV, Ee({
        ref: u,
        onClose: () => S(false),
        focusedIndex: v,
        listId: fe,
        style: {
            width: i.style?.width ?? _?.current?.width,
            overflow: "auto"
        },
        isOpen: M,
        referenceElementRef: _,
        hideOnRefHidden: true,
        showSelectedPseudoFocus: true
    }, i.enableVirtualScrolling ? {
        virtualItems: {
            count: A.length ?? 0,
            renderItem: ({index: e}) => ({
                text: A[e].text,
                secondaryText: A[e].secondaryText,
                concatSecondaryText: A[e].concatSecondaryText,
                icon: A[e].icon,
                iconAriaLabel: A[e].iconAriaLabel,
                iconTooltip: A[e].iconTooltip,
                id: A[e].id,
                indented: A[e].indented,
                tooltip: A[e].tooltip,
                showSeparator: A[e].showSeparator
            }),
            width: i.inputContainerWidth ?? _.current?.getBoundingClientRect().width
        }
    } : {
        items: A?.map(((e, t) => ({
            ...e,
            id: ge[t]
        })))
    }, {
        onSelectFocusedItem: () => !qI(v) && N(v),
        onSelected: ({index: e}) => N(e),
        listItemFocusable: false,
        testId: gb(i.testId, "suggestionPopper"),
        ariaLabel: i.ariaLabelForSuggestionsList ?? E("suggestedValues.aria"),
        focusLockProps: {
            disabled: true
        }
    })), i.status ? t(QF, Ee({
        status: i.status,
        referenceElementRef: _
    }, gH(i.message) ? i.message : {
        message: i.message
    }, {
        hidden: !h && !se,
        testId: gb(i.testId, "messagePopper"),
        hideOnRefHidden: true,
        onClose: () => _.current?.blur()
    })) : null));
}));

function bH(e, t = "beginsWith") {
    if (e === "") {
        return null;
    }
    const o = vD(e).replace(/\s/g, "\\s");
    const n = t === "contains" ? new RegExp(`${o}`, "i") : new RegExp(`^${o}`, "i");
    return n;
}

function vH(e, t, o, n = false) {
    const a = bH(t, o);
    if (!a) return [];
    return e.filter((e => {
        if (n) {
            return e.text && a.test(e.text);
        }
        return e.text && a.test(e.text) || e.secondaryText && a.test(e.secondaryText);
    }));
}

const yH = (e, t) => {
    const o = t?.theme;
    const n = t?.placeholderTheme;
    let a = {};
    if (o) {
        a = {
            ...__(o({
                state: "normal"
            }) ?? {}, "input"),
            ...__(o({
                state: "alert"
            }) ?? {}, "input-alert"),
            ...__(o({
                state: "warning"
            }) ?? {}, "input-warning")
        };
    }
    if (n) {
        a = {
            ...a,
            ...__(n() ?? {}, "input-placeholder")
        };
    }
    let r;
    let s;
    if (e.themeVariant !== "high-contrast" && t?.editable && !t?.disabled && !t?.isCustomFocusTurnedOn || t?.variant === "composite") {
        r = "none";
    }
    if ((e.themeVariant === "high-contrast" || t?.disabled) && t?.variant === "composite") {
        s = "transparent";
    }
    let i = {};
    if (t?.status) {
        i = {
            ...t.status === "alert" ? {
                bg: e.tokensExperimental["color-action-background-control-alert"],
                bd: e.tokensExperimental["color-action-border-control-alert"]
            } : {},
            ...t.status === "warning" ? {
                bg: e.tokensExperimental["color-action-background-control-warning"],
                bd: e.tokensExperimental["color-action-border-control-warning"]
            } : {},
            fg: e.tokensExperimental["color-action-text-control-normal"]
        };
    } else {
        i = {
            fg: e.tokensExperimental["color-action-text-control-normal"],
            bg: e.tokensExperimental["color-action-background-control-normal"],
            bd: e.tokensExperimental["color-action-border-control-normal"],
            "focus-bd": e.tokensExperimental["color-action-border-control-selected"],
            "readonly-bg": e.tokensExperimental["color-action-background-control-read-only"],
            "readonly-bd": e.tokensExperimental["color-action-border-control-read-only"],
            "readonly-fg": e.tokensExperimental["color-action-text-control-read-only"]
        };
    }
    const l = t?.density === "high" ? {
        pd: e.tokensExperimental["space-squish-xs"],
        "font-size": e.tokensExperimental["font-size-body-text-s"],
        "min-height": "1.5rem"
    } : {
        pd: e.tokensExperimental["space-squish-s"],
        "font-size": e.tokensExperimental["font-size-body-text-m"],
        "min-height": "1.75rem"
    };
    return {
        ...__({
            ...i,
            ...l,
            "placeholder-fg": e.tokensExperimental["color-action-text-control-placeholder"],
            "selection-bg": e.tokensExperimental["color-action-background-control-primary"],
            "selection-fg": e.tokensExperimental["color-highlight-text-inverse"],
            "disabled-fg": e.tokensExperimental["color-action-text-control-disabled"],
            "disabled-bd": e.tokensExperimental["color-action-border-control-disabled"],
            "disabled-bg": e.tokensExperimental["color-action-background-control-disabled"],
            "noneditable-bg": e.tokensExperimental["color-action-background-control-read-only"],
            "noneditable-bd": e.tokensExperimental["color-action-border-control-read-only"],
            "min-width": e.tokensExperimental["size-container-xxs"],
            "spacing-xs": e.tokensExperimental["space-base-xs"],
            "line-height": "normal",
            "inplace-edit-text-fg": e.tokensExperimental["color-action-text-control-normal"],
            ...t?.font,
            "bottom-bd-bw": e.tokensExperimental["size-border-width-s"],
            "bottom-bd": e.tokensExperimental["color-action-border-bottom-control-normal"],
            "bottom-hover-bd": e.tokensExperimental["color-action-border-bottom-control-hover"],
            "bottom-disabled-bd": e.tokensExperimental["color-action-border-control-disabled"],
            "bottom-selected-bd": e.tokensExperimental["color-action-border-bottom-control-selected"],
            "bottom-warning-bd": e.tokensExperimental["color-action-border-bottom-control-warning"],
            "bottom-alert-bd": e.tokensExperimental["color-action-border-bottom-control-alert"],
            "icon-padding": e.tokensExperimental["space-base-xs"]
        }, "input"),
        ...__({
            outline: r,
            "noneditable-bd": s
        }, "input-focus"),
        ...a,
        ...!e.enableNovaTokens && xH(e, t)
    };
};

const xH = (e, t) => {
    const o = t?.theme;
    const n = t?.placeholderTheme;
    let a = {};
    if (o) {
        a = {
            ...__(o({
                state: "normal"
            }) ?? {}, "input"),
            ...__(o({
                state: "alert"
            }) ?? {}, "input-alert"),
            ...__(o({
                state: "warning"
            }) ?? {}, "input-warning")
        };
    }
    if (n) {
        a = {
            ...a,
            ...__(n() ?? {}, "input-placeholder")
        };
    }
    let r;
    if ((e.themeVariant === "high-contrast" || t?.disabled) && t?.variant === "composite") {
        if (e.baseReportThemeName === "highcontrast2017" || e.baseReportThemeName === "highcontrast2018") {
            r = e.c.p0;
        } else {
            r = e.c.p3;
        }
    }
    let s;
    let i = {};
    if (t?.status) {
        const o = {
            ...e.stateStatus[t?.status],
            "readonly-bg": e.stateStatus[t?.status].bg,
            "readonly-bd": "transparent",
            "readonly-fg": e.stateStatus[t?.status].fg,
            "noneditable-bg": e.stateStatus[t?.status].bg,
            "noneditable-bd": e.stateStatus[t?.status].bd,
            "noneditable-fg": e.stateStatus[t?.status].fg,
            "disabled-fg": e.stateStandard.disabled.fg,
            "disabled-bd": e.stateStandard.disabled.bd,
            "disabled-bg": e.stateStandard.disabled.bg,
            "selection-bg": e.text.selection.bg,
            "selection-fg": e.text.selection.fg,
            "font-size": e.font.size.m,
            "line-height": "normal"
        };
        switch (e.themeVariant) {
          case "dark":
            i = {
                ...o,
                "placeholder-fg": Jv(e.c.white, .3)
            };
            break;

          case "high-contrast":
            if (e.baseReportThemeName === "highcontrast2017" || e.baseReportThemeName === "highcontrast2018") {
                i = {
                    ...o,
                    "placeholder-fg": e.c.hcDisabled
                };
            } else {
                i = {
                    ...o,
                    "placeholder-fg": Jv(e.c.white, .5)
                };
            }
            break;

          default:
            i = {
                ...o,
                "placeholder-fg": e.c.n1
            };
            break;
        }
    } else {
        switch (e.themeVariant) {
          case "dark":
            s = {
                bd: Jv(e.c.white, .3),
                bg: e.c.p_3,
                fg: e.c.white,
                "font-size": e.font.size.m,
                "line-height": "normal",
                "selection-bg": e.text.selection.bg,
                "selection-fg": e.text.selection.fg,
                "placeholder-fg": Jv(e.c.white, .3),
                "focus-bd": e.c.p0,
                ...i
            };
            break;

          case "high-contrast":
            if (e.baseReportThemeName === "highcontrast2017" || e.baseReportThemeName === "highcontrast2018") {
                s = {
                    bd: e.c.white,
                    bg: e.c.black,
                    fg: e.c.white,
                    "font-size": e.font.size.m,
                    "line-height": "normal",
                    "selection-bg": e.text.selection.bg,
                    "selection-fg": e.text.selection.fg,
                    "placeholder-fg": e.c.hcDisabled,
                    "focus-bd": e.c.p0,
                    ...i
                };
            } else {
                s = {
                    bd: e.c.white,
                    bg: e.c.black,
                    fg: e.c.white,
                    "font-size": e.font.size.m,
                    "line-height": "normal",
                    "selection-bg": e.text.selection.bg,
                    "selection-fg": e.text.selection.fg,
                    "placeholder-fg": Jv(e.c.white, .5),
                    "focus-bd": e.c.p3,
                    ...i
                };
            }
            break;

          default:
            s = {
                bd: e.c.n1,
                bg: e.c.white,
                fg: e.c.n_3,
                "font-size": e.font.size.m,
                "line-height": "normal",
                "selection-bg": e.text.selection.bg,
                "selection-fg": e.text.selection.fg,
                "placeholder-fg": e.c.n1,
                "focus-bd": e.c.p0,
                ...i
            };
        }
    }
    return {
        ...__({
            "readonly-bg": e.stateStandardContent.normal.bg,
            "readonly-bd": "transparent",
            "readonly-fg": e.stateStandardContent.normal.fg,
            "noneditable-bg": e.stateStandard.normal.bg,
            "noneditable-bd": e.stateStandard.normal.bd,
            "noneditable-fg": e.stateStandard.normal.fg,
            "disabled-fg": e.stateStandard.disabled.fg,
            "disabled-bd": e.stateStandard.disabled.bd,
            "disabled-bg": e.stateStandard.disabled.bg,
            ...i,
            ...s,
            ...t?.font
        }, "input"),
        ...__({
            "noneditable-bd": r
        }, "input-focus"),
        ...a
    };
};

const SH = u((function e({...o}, n) {
    return t(hH, Ee({}, o, {
        ref: n
    }));
}));

const wH = i(undefined);

wH.Provider;

const CH = () => l(wH);

const EH = [ "decimal", "currency", "percent", "unit" ];

const IH = e => {
    const [t, o] = e.split("_");
    if (t === "datetime") {
        if (o === "long") {
            return {
                year: "numeric",
                month: "long",
                day: "2-digit",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit"
            };
        } else if (o === "medium") {
            return {
                year: "numeric",
                month: "short",
                day: "2-digit",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit"
            };
        }
        return {
            year: "numeric",
            month: "numeric",
            day: "numeric",
            hour: "numeric",
            minute: "numeric",
            second: "numeric"
        };
    }
    if (t === "time") {
        if (o === "long") {
            return {
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit"
            };
        }
        return {
            hour: "numeric",
            minute: "numeric",
            second: "numeric"
        };
    }
    if (t === "date") {
        if (o === "long") {
            return {
                year: "numeric",
                month: "long",
                day: "2-digit"
            };
        }
        return {
            year: "numeric",
            month: "numeric",
            day: "numeric"
        };
    }
    return {};
};

class _H {
    constructor(e) {
        this.locale = e;
        this.locale = e.replace("_", "-");
    }
    formatDateTime(e, t) {
        const o = ph(this.locale);
        return new Intl.DateTimeFormat(o, IH(t)).format(e);
    }
    parseDateTime(e, t) {
        return Date.parse(e);
    }
    isDateTimeFormatSupported(e) {
        const [t, o] = e.split("_");
        return [ "date", "time", "datetime" ].includes(t) && [ "long", "short" ].includes(o);
    }
    getDateTimeFormatType(e) {
        const [t] = e.split("_");
        switch (t) {
          case "datetime":
          case "date":
          case "time":
            return t;

          default:
            return "";
        }
    }
    getDateTimeFormatPattern(e) {
        throw new Error("getDateTimeFormatPattern is not yet supported in BrowserFormatter");
    }
    formatNumeric(e, t, o) {
        const n = !!t ? {
            style: t
        } : undefined;
        const a = ph(this.locale);
        const r = new Intl.NumberFormat(a, {
            ...n,
            useGrouping: true,
            maximumFractionDigits: o?.maximumFractionDigits,
            minimumFractionDigits: o?.minimumFractionDigits
        }).format(e);
        return r;
    }
    parseNumeric(e, t) {
        const o = Number.parseFloat(e);
        if (t === "percent") {
            return o / 100;
        }
        return o;
    }
    isNumericFormatSupported(e) {
        return EH.includes(e);
    }
}

const DH = e => {
    const t = db();
    const o = e ?? t;
    const n = r((() => new _H(o)), [ o ]);
    return n;
};

pb(dt);

let LH;

Gh("NovaComponents-Input-gui-icu").then((e => {
    LH = e;
}));

const TH = e => {
    const t = e.localizer ?? LH;
    let o = false, n, a;
    if (e.isRequired && e.value.trim() === "") {
        o = true;
        n = "alert";
        a = t("required.error.msg");
    } else if (e.value !== "" && e.value.length < e.minLength) {
        const r = e.minLength.toString();
        o = true;
        n = "alert";
        a = t("minlength.error.msg", {
            minlength: r
        });
    }
    return {
        isError: o,
        status: n,
        message: a
    };
};

const RH = e => {
    const t = $B({
        source: OB.InputFull
    });
    const [o, a] = n(e.initialValue ?? "");
    const [r, i] = n({
        status: undefined,
        message: ""
    });
    const l = lb("NovaComponents-Input-gui-icu");
    const c = YI();
    const d = s((e => {
        const t = e.value;
        a(t);
        i({
            status: undefined,
            message: undefined
        });
    }), []);
    const u = s((n => {
        setTimeout((() => {
            const a = TH({
                value: o,
                localizer: l,
                ...e
            });
            if (!c.current) return;
            a.isError ? i({
                status: a.status,
                message: a.message
            }) : i({
                status: undefined,
                message: undefined
            });
            if (a.status === "alert" && n?.reason === "enter") t.play();
        }), 0);
    }), [ t, l, c, e, o ]);
    const m = u;
    const p = s((() => {
        a("");
        i({
            status: undefined,
            message: undefined
        });
    }), []);
    return {
        handleChange: d,
        value: o,
        errors: r,
        handleBlur: m,
        handleCancel: p,
        handleCommit: u
    };
};

const kH = e => {
    const t = $B({
        source: OB.InputFull
    });
    const o = jV();
    const r = DH(o);
    const s = e.initialValue ?? "";
    const [i, l] = n(s);
    const [d, u] = n(e.initialValue ? Number(e.initialValue) : null);
    const [m, p] = n({
        status: undefined,
        message: ""
    });
    const [f, g] = n("");
    const h = YI();
    const b = n => {
        const a = n.value;
        const [r] = NH(o);
        const s = a.lastIndexOf(r) !== -1 ? a.slice(a.lastIndexOf(r) + 1) : "";
        const i = e.validateInputFunction(a, o, e.isRequired, e.allowIntegersOnly, true, e.minLength, e.numberFormatOptions, e.parseAndFormatFunction);
        u(i.values.rawValue);
        i.isError ? p({
            status: "alert",
            message: i.message
        }) : p({
            status: undefined,
            message: undefined
        });
        if (s !== "" && e.numberFormatOptions?.maximumFractionDigits && s.length > e.numberFormatOptions?.maximumFractionDigits) {
            t.play();
        } else if (i.status === "alert") {
            t.play();
            l(a);
        } else l(a);
    };
    const v = e => y(false, e);
    const y = (n, a) => {
        setTimeout((() => {
            const r = e.validateInputFunction(i, o, e.isRequired, e.allowIntegersOnly, false, e.minLength, e.numberFormatOptions, e.parseAndFormatFunction);
            if (!h.current) return;
            if (r.isError) {
                if (a?.reason === "enter") t.play();
                l(i);
            } else if (i === "") {
                l("");
            } else if (!n && !e.disableAutoFormatting) {
                l(r.values.formatValue);
            } else if (n && !e.disableAutoFormatting) {
                const e = NH(o);
                const t = r.values.formatValue.replace(new RegExp(`[${e[1]}]`, "gu"), "");
                l(t);
            } else {
                l(i);
                u(r.values.rawValue);
            }
            r.isError ? p({
                status: "alert",
                message: r.message
            }) : p({
                status: undefined,
                message: undefined
            });
        }), 0);
    };
    const x = () => y(true);
    const S = v;
    const w = () => {
        l("");
        p({
            status: undefined,
            message: undefined
        });
        u(null);
    };
    const C = c();
    const E = c(false);
    if (!mh(o)) C.current = S;
    a((() => {
        if (!E.current) {
            E.current = true;
            return;
        }
        C.current?.();
    }), [ e.isRequired, e.allowIntegersOnly, e.minLength, e.numberFormatOptions?.maximumFractionDigits, e.numberFormatOptions?.minimumFractionDigits ]);
    a((() => {
        if (!e.initialValue || m.status || o === f || e.disableAutoFormatting) return;
        g(o);
        const t = e.parseAndFormatFunction ? e.parseAndFormatFunction(d ? d?.toString() : e.initialValue) : MH(d ? r.formatNumeric(d, undefined, e.numberFormatOptions) : r.formatNumeric(Number(e.initialValue)), o, e.numberFormatOptions);
        if (t && !isNaN(parseFloat(t.formatValue))) {
            l(t.formatValue);
            u(t.rawValue);
        }
    }), [ o, d, f, m.status, e, r ]);
    return {
        handleChange: b,
        value: i,
        errors: m,
        handleBlur: S,
        handleCancel: w,
        handleCommit: v,
        handleFocus: x
    };
};

const AH = e => e ? ph(e) : "en-US";

const MH = (e, t, o, n, a = true) => {
    const r = OH(e, t, a);
    if (!r) {
        return {
            rawValue: NaN,
            formatValue: NaN.toString()
        };
    }
    const s = AH(t);
    const i = new Intl.NumberFormat(s, {
        useGrouping: true,
        ...o
    });
    const l = i.resolvedOptions().locale;
    const [c, d] = NH(l);
    const u = new RegExp(`[${c}]`, "gu");
    const m = new RegExp(`[${d}]`, "gu");
    let p = "";
    if (e) {
        p = e.trim().replace(m, "").replace(u, ".").replace(/^\u200e/, "").replace(/\u2212/, "-");
    }
    const f = n ? n.formatNumeric(Number(p) + 0, undefined, o) : i.format(parseFloat(p) + 0);
    return {
        rawValue: parseFloat(p) + 0,
        formatValue: f
    };
};

const NH = (e = "en-US") => {
    const t = 1.1.toLocaleString(e).replace(/1/gu, "");
    let o = 11111..toLocaleString(e).replace(/1/gu, "");
    const n = /^\s$/;
    if (n.test(o)) {
        o = "\\s";
    }
    return [ t, o ];
};

const OH = (e, t, o) => {
    const n = AH(t);
    const a = new Intl.NumberFormat(n);
    const [r, s] = NH(a.resolvedOptions().locale);
    if (e.length >= 2 && e.charAt(0) === "0" && (e.charAt(1) === s || s === "\\s" && e.charAt(1) === " ")) {
        return false;
    }
    const i = o ? `^\\u200e?[\\u2212+-]?((\\d+|([1-9]\\d{0,2}|\\d{0,2}[1-9])([${s}]\\d{3})*)?([${r}]\\d*)?|(([1-9]\\d{0,2}|\\d{0,2}[1-9])(([${s}]\\d{3})*)?)([${s}]\\d{0,3})?)?$` : `^\\u200e?[\\u2212+-]?((\\d+|([1-9]\\d{0,2}|\\d{0,2}[1-9])([${s}]\\d{3})*)([${r}]\\d+)?|([${r}]\\d+))$`;
    return new RegExp(i).test(e);
};

const PH = (e, t = false, o = "en-US", n = false) => {
    const [a] = NH(o);
    const r = `^[−+-]?${n ? "" : `[${a}]?`}$`;
    return new RegExp(r).test(e) && t;
};

const BH = (e, t = "en-US") => {
    const [o] = NH(t);
    const n = `\\${o}`;
    return new RegExp(n).test(e);
};

const zH = (e, t, o, n, a, r, s, i, l) => {
    let c;
    if (i) {
        c = i(e);
    } else {
        c = MH(e, t, s, l, a);
    }
    let d = false, u, m;
    if (e) {
        if (isNaN(c.rawValue) && !PH(e, a, t)) {
            d = true;
            u = "alert";
            m = n ? LH("numericValidator.integers.error.msg") : LH("numericValidator.numeric.error.msg");
        } else if (n && BH(e, t)) {
            d = true;
            u = "alert";
            m = LH("numericValidator.integers.error.msg");
        } else if (r && e.length < r && !a) {
            const e = r.toString();
            d = true;
            u = "alert";
            m = LH("minlength.error.msg", {
                minlength: e
            });
        }
    } else if (o && !a) {
        d = true;
        u = "alert";
        m = LH("required.error.msg");
    }
    return {
        isError: d,
        status: u,
        message: m,
        values: c
    };
};

const FH = e => {
    const t = e.length;
    if (t >= 7 && e.slice(0, 7) === "mailto:" && ED(e.charAt(7))) {
        return e.slice(7);
    }
    if (t >= 8 && e.slice(0, 8) === "https://" && ED(e.charAt(8))) {
        return e.slice(8);
    }
    if (t >= 7 && (e.slice(0, 7) === "http://" || e.slice(0, 7) === "ftps://") && ED(e.charAt(7))) {
        return e.slice(7);
    }
    if (t >= 6 && e.slice(0, 6) === "ftp://" && ED(e.charAt(6))) {
        return e.slice(6);
    }
    return e;
};

pb(dt);

let jH;

Gh("NovaComponents-Input-gui-icu").then((e => {
    jH = e;
}));

const VH = e => {
    let t = false, o = undefined, n = undefined;
    const a = e.value.lastIndexOf(":");
    const r = e.value.slice(a).indexOf("/") !== -1 ? e.value.slice(a).indexOf("/") + a : e.value.length;
    const s = FH(e.value);
    const i = TH({
        value: e.value,
        isRequired: e.isRequired,
        minLength: e.minLength
    });
    if (i.isError) {
        t = i.isError;
        o = i.status;
        n = i.message;
    } else {
        if (e.value) {
            if (!e.isLive) {
                if (FH(e.value).length === e.value.length && !xD(e.value) && !wD(e.value)) {
                    t = true;
                    o = "alert";
                    n = e.message || jH("urlValidator.msg");
                }
                if (FH(e.value).length < e.value.length && !xD(FH(e.value)) && !wD(e.value)) {
                    t = true;
                    o = "alert";
                    n = e.message || jH("urlValidator.msg");
                }
                const i = s.indexOf(":");
                let l = e.value.slice(a + 1, r);
                l = i >= 0 && CD(l) ? l : "";
                if (l !== "" && (parseInt(l) > 99999 || s.lastIndexOf("/") >= 0 && s.lastIndexOf("/") < i) || i >= 0 && l === "" || ID(s, ":") > 1) {
                    t = true;
                    o = "alert";
                    n = e.message || jH("urlValidator.msg");
                }
            } else {
                if (!yD(e.value) && !wD(e.value)) {
                    t = true;
                    o = "alert";
                    n = e.message || jH("urlValidator.msg");
                }
            }
            if (!SD(e.value)) {
                t = true;
                o = "alert";
                n = jH("emailValidatorConsecutivePeriods.msg");
            }
        }
    }
    return {
        isError: t,
        status: o,
        message: n
    };
};

const HH = e => {
    const t = $B({
        source: OB.InputFull
    });
    const [o, a] = n(e.initialValue ?? "");
    const [r, s] = n({
        status: undefined,
        message: ""
    });
    const i = o => {
        const n = o.value;
        const r = VH({
            value: n,
            isLive: true,
            isRequired: e.isRequired,
            message: e.message,
            urlRegex: e.urlRegex,
            liveURLRegex: e.liveURLRegex,
            minLength: e.minLength
        });
        a(n);
        r.isError ? s({
            status: r.status,
            message: r.message
        }) : s({
            status: undefined,
            message: undefined
        });
        if (r.status === "alert") t.play();
    };
    const l = () => {
        const t = VH({
            value: o,
            isLive: false,
            isRequired: e.isRequired,
            message: e.message,
            urlRegex: e.urlRegex,
            liveURLRegex: e.liveURLRegex,
            minLength: e.minLength
        });
        t.isError && s({
            status: t.status,
            message: t.message
        });
    };
    const c = n => {
        const a = VH({
            value: o,
            isLive: false,
            isRequired: e.isRequired,
            message: e.message,
            urlRegex: e.urlRegex,
            liveURLRegex: e.liveURLRegex,
            minLength: e.minLength
        });
        a.isError && s({
            status: a.status,
            message: a.message
        });
        if (a.status === "alert" && n?.reason === "enter") t.play();
    };
    const d = () => {
        a("");
        s({
            status: undefined,
            message: undefined
        });
    };
    return {
        handleChange: i,
        value: o,
        errors: r,
        handleBlur: l,
        handleCancel: d,
        handleCommit: c
    };
};

pb(dt);

let UH;

Gh("NovaComponents-Input-gui-icu").then((e => {
    UH = e;
}));

const GH = e => {
    let t = false, o = undefined, n;
    const a = e.liveEmailRegex || /^[A-Za-z0-9_@!.#$%&'*+()\-/=?^_`{|}~\u00A1-\u1FFF\u2070-\uD7FF\uE000-\uFFFF]*$/;
    const r = e.emailRegex || /^[A-Za-z0-9!.#$%&'*+()\-/=?^_`{|}~\u00A1-\u1FFF\u2070-\uD7FF\uE000-\uFFFF]((\.)?[A-Za-z0-9!.#$%&'*+()\-/=?^_`{|}~\u00A1-\u1FFF\u2070-\uD7FF\uE000-\uFFFF])*\@[A-Za-z0-9-\u00A1-\u1FFF\u2070-\uD7FF\uE000-\uFFFF](?!.*\.$)((\.)?[A-Za-z0-9-\u00A1-\u1FFF\u2070-\uD7FF\uE000-\uFFFF])*\.[\u0000-\uFFFF]{2,63}$/;
    const s = e.value.indexOf(".");
    const i = e.consecutiveDotsRegex || /^(?!.*?\.\.)/;
    const l = e.value.slice(0, e.value.indexOf("@"));
    const c = e.value.slice(e.value.indexOf("@") + 1);
    const d = /^[0-9]*$/;
    const u = e => {
        const t = /^[ -~]+$/;
        return !t.test(e);
    };
    const m = u => {
        if (!e.isLive && s >= 0 && !new RegExp(i).test(u)) {
            t = true;
            o = "alert";
            n = UH("emailValidatorConsecutivePeriods.msg");
            return {
                isError: t,
                status: o,
                message: n
            };
        }
        if (!e.isLive && e.value.indexOf("@") > -1 && e.value.indexOf("@") !== e.value.lastIndexOf("@")) {
            t = true;
            o = "alert";
            n = UH("emailValidatorSingleInstance.msg");
            return {
                isError: t,
                status: o,
                message: n
            };
        }
        if (!e.isLive && (l.charAt(0) === "." || l.charAt(l.length - 1) === ".")) {
            t = true;
            o = "alert";
            n = UH("emailValidator.msg");
            return {
                isError: t,
                status: o,
                message: n
            };
        }
        const m = c.split(".");
        let p = "";
        for (let e = 0; e < m.length; e++) {
            if (m[e].length > 63 || m[e][0] === "-" || m[e][m[e].length - 1] === "-") {
                t = true;
                o = "alert";
                n = UH("emailValidator.msg");
                return {
                    isError: t,
                    status: o,
                    message: n
                };
            }
            p += m[e];
        }
        const f = m.length === 0 ? "" : m[m.length - 1];
        if (!e.isLive && f !== "" && (p.length > 255 || d.test(f))) {
            t = true;
            o = "alert";
            n = UH("emailValidator.msg");
            return {
                isError: t,
                status: o,
                message: n
            };
        }
        if (e.isLive && (!new RegExp(a).test(u) || /\s/.test(u))) {
            t = true;
            o = "alert";
            n = UH("emailValidator.msg");
            return {
                isError: t,
                status: o,
                message: n
            };
        }
        if (!e.isLive && u.length > 0 && !new RegExp(r).test(u) || l.length > 64 || /\s/.test(u)) {
            t = true;
            o = "alert";
            n = UH("emailValidator.msg");
            return {
                isError: t,
                status: o,
                message: n
            };
        }
    };
    const p = u(e.value.slice(e.value.indexOf("@") + 1));
    const f = u(e.value.slice(0, e.value.indexOf("@")));
    const g = TH({
        value: e.value,
        isRequired: e.isRequired,
        minLength: e.minLength
    });
    if (g.isError) {
        t = g.isError;
        o = g.status;
        n = g.message;
        return {
            isError: t,
            status: o,
            message: n
        };
    }
    m(e.value);
    if (p || f) {
        const e = p ? c.normalize("NFC").toLowerCase() : c;
        if (e.charAt(2) === "−" && e.charAt(3) === "−" || e.charAt(0) === "Mc" || e.charAt(0) === "Mn" || e.charAt(0) === "Me") {
            t = true;
            o = "alert";
            n = UH("emailValidator.msg");
            return {
                isError: t,
                status: o,
                message: n
            };
        }
    }
    return {
        isError: t,
        status: o,
        message: n
    };
};

const KH = e => {
    const [t, o] = n(e.initialValue ?? "");
    const a = $B({
        source: OB.InputFull
    });
    const [r, s] = n({
        status: undefined,
        message: ""
    });
    const i = YI();
    const l = t => {
        const n = t.value;
        const r = GH({
            value: n,
            isLive: true,
            isRequired: e.isRequired,
            emailRegex: e.emailRegex,
            liveEmailRegex: e.liveEmailRegex,
            minLength: e.minLength
        });
        o(n);
        r.isError ? s({
            status: r.status,
            message: r.message
        }) : s({
            status: undefined,
            message: undefined
        });
        if (r.status === "alert") a.play();
    };
    const c = o => {
        setTimeout((() => {
            if (!i.current) return;
            const n = GH({
                value: t,
                isLive: false,
                isRequired: e.isRequired,
                emailRegex: e.emailRegex,
                liveEmailRegex: e.liveEmailRegex,
                minLength: e.minLength
            });
            n.isError ? s({
                status: n.status,
                message: n.message
            }) : s({
                status: undefined,
                message: undefined
            });
            if (n.status === "alert" && o?.reason === "enter") a.play();
        }), 0);
    };
    const d = c;
    const u = () => {
        o("");
        s({
            status: undefined,
            message: undefined
        });
    };
    return {
        handleChange: l,
        value: t,
        errors: r,
        handleBlur: d,
        handleCommit: c,
        handleCancel: u
    };
};

pb(dt);

let WH;

Gh("NovaComponents-Input-gui-icu").then((e => {
    WH = e;
}));

const $H = e => {
    let t = false, o = undefined, n = undefined;
    const a = e.liveTelephoneRegex || /^[\d|\+\d{1,3}\s|\(]+[\)|\d|\s|\-|\.]{0,}$/;
    const r = e.telephoneRegex || /^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{3})[-. )]*(\d{3})[-. ]*(\d{4})(?: *x(\d+))?\s*$/;
    const s = TH({
        value: e.value,
        isRequired: e.isRequired,
        minLength: e.minLength
    });
    if (s.isError) {
        ({isError: t, status: o, message: n} = s);
    } else {
        if (e.value) {
            if (!e.isLive) {
                if (!new RegExp(r).test(e.value)) {
                    t = true;
                    o = "alert";
                    n = e.message || WH("telephoneValidator.msg");
                }
            } else {
                if (!new RegExp(a).test(e.value)) {
                    t = true;
                    o = "alert";
                    n = e.message || WH("telephoneValidator.msg");
                }
            }
        }
    }
    return {
        isError: t,
        status: o,
        message: n
    };
};

const YH = e => {
    const t = $B({
        source: OB.InputFull
    });
    const [o, a] = n("");
    const [r, s] = n({
        status: undefined,
        message: ""
    });
    const i = o => {
        const n = o.value;
        const r = $H({
            value: n,
            isLive: true,
            isRequired: e.isRequired,
            message: e.message,
            telephoneRegex: e.telephoneRegex,
            liveTelephoneRegex: e.liveTelephoneRegex,
            minLength: e.minLength
        });
        a(n);
        r.isError ? s({
            status: r.status,
            message: r.message
        }) : s({
            status: undefined,
            message: undefined
        });
        if (r.status === "alert") t.play();
    };
    const l = n => {
        setTimeout((() => {
            const a = $H({
                value: o,
                isLive: false,
                isRequired: e.isRequired,
                message: e.message,
                telephoneRegex: e.telephoneRegex,
                liveTelephoneRegex: e.liveTelephoneRegex,
                minLength: e.minLength
            });
            a.isError && s({
                status: a.status,
                message: a.message
            });
            if (a.status === "alert" && n?.reason === "enter") t.play();
        }), 0);
    };
    const c = l;
    const d = () => {
        a("");
        s({
            status: undefined,
            message: undefined
        });
    };
    return {
        handleChange: i,
        value: o,
        errors: r,
        handleBlur: c,
        handleCancel: d,
        handleCommit: l
    };
};

pb(dt);

let qH;

Gh("NovaComponents-Input-gui-icu").then((e => {
    qH = e;
}));

const XH = e => {
    let t = false, o = undefined, n = undefined;
    const a = e.inclusiveMode >= 0 && e.inclusiveMode <= 3 ? e.inclusiveMode : 3;
    const r = zH(e.value, e.appLocale, e.isRequired, e.allowIntegersOnly, e.isLive, e.minLength, e.numberFormatOptions, e.parseAndFormatFunction, e.formatter);
    if (r.isError) {
        t = r.isError;
        o = r.status;
        n = r.message;
    } else {
        if (e.value) {
            const s = r.values.rawValue;
            const i = e.formatter && e.maxValue ? e.formatter?.formatNumeric(e.maxValue, undefined, e.numberFormatOptions) : e.maxValue?.toLocaleString(e.appLocale, e.numberFormatOptions);
            const l = e.formatter && e.minValue ? e.formatter?.formatNumeric(e.minValue, undefined, e.numberFormatOptions) : e.minValue?.toLocaleString(e.appLocale, e.numberFormatOptions);
            if (s > e.maxValue) {
                if (a < 2) {
                    t = true;
                    o = "alert";
                    n = qH("rangeValidator.maxRangeExclusive.msg", {
                        maxValue: i
                    });
                } else {
                    t = true;
                    o = "alert";
                    n = qH("rangeValidator.maxRangeInclusive.msg", {
                        maxValue: i
                    });
                }
            } else if (s === e.maxValue && a < 2) {
                t = true;
                o = "alert";
                n = qH("rangeValidator.maxRangeExclusive.msg", {
                    maxValue: i
                });
            } else if (s < e.minValue) {
                if (a === 0 || a === 2) {
                    t = true;
                    o = "alert";
                    n = qH("rangeValidator.minRangeExclusive.msg", {
                        minValue: l
                    });
                } else {
                    t = true;
                    o = "alert";
                    n = qH("rangeValidator.minRangeInclusive.msg", {
                        minValue: l
                    });
                }
            } else if (s === e.minValue && !(a === 1 || a === 3)) {
                t = true;
                o = "alert";
                n = qH("rangeValidator.minRangeExclusive.msg", {
                    minValue: l
                });
            }
        }
    }
    return {
        isError: t,
        status: o,
        message: n,
        values: r.values
    };
};

fb(dt);

var ZH = "sas_components-withLabels-withLabels_withLabels";

var JH = "sas_components-withLabels-withLabels_labelTop";

var QH = "sas_components-withLabels-withLabels_field-width-as-percentage";

var eU = "sas_components-withLabels-withLabels_labelLeft";

var tU = "sas_components-withLabels-withLabels_input";

var oU = "sas_components-withLabels-withLabels_label";

var nU = "sas_components-withLabels-withLabels_description";

var aU = "sas_components-withLabels-withLabels_text";

var rU = "sas_components-withLabels-withLabels_suffix";

var sU = {
    withLabels: ZH,
    labelTop: JH,
    fieldWidthAsPercentage: QH,
    labelLeft: eU,
    input: tU,
    label: oU,
    description: nU,
    text: aU,
    suffix: rU
};

const iU = e => {
    if (typeof e !== "string") return false;
    return e.includes("%");
};

const lU = e => {
    const o = C_();
    const {density: n} = YA();
    const a = iU(e.fieldWidth);
    const r = e => ({
        fg: e.disabled ? o.stateStandardNova.disabled.fg : o.c.colorTextLabel
    });
    const s = I_({
        "field-label-width": e.fieldLabelWidth,
        "field-label-min-width": e.fieldLabelMinWidth,
        "field-width": e.fieldWidth,
        "field-min-width": e.fieldMinWidth,
        "field-suffix-min-width": e.suffix && (e.fieldSuffixMinWidth || "3rem"),
        "spacing-xs": o.spacing.core.xs,
        "spacing-s": o.spacing.core.s,
        "spacing-m": o.spacing.core.m,
        "spacing-end": n === "high" ? o.tokensExperimental["space-base-s"] : o.tokensExperimental["space-base-m"],
        ...e.labelSpacing?.leftAligned ? {
            "horizontal-spacing-override": o.spacing.core[e.labelSpacing.leftAligned]
        } : {},
        ...e.labelSpacing?.topAligned ? {
            "vertical-spacing-override": o.spacing.core[e.labelSpacing.topAligned]
        } : {},
        "font-size-s": o.fontNova.size.s
    }, "with-labels");
    const i = n === "high" ? {
        "--label-font-size": o.tokensExperimental["font-size-body-text-s"]
    } : undefined;
    return t("div", {
        className: ke(e.className, sU.withLabels, a && sU.fieldWidthAsPercentage, e.labelPosition === "left" ? sU.labelLeft : sU.labelTop),
        style: {
            ...s,
            ...e.style
        },
        "data-testid": e.testId
    }, e.children && t("div", {
        className: sU.input
    }, e.children), e.label && t("div", {
        className: sU.label
    }, t(LP, {
        containerRef: e.labelContainerRef,
        id: e.labelId,
        testId: gb(e.testId, "label"),
        className: e.labelClassName,
        style: {
            ...i,
            ...e.labelStyle
        },
        disabled: e.disabled,
        required: !e.suppressRequiredIndicator && e.required,
        htmlFor: !e.suppressHtmlFor ? e.inputId : undefined,
        wrapText: e.wrapLabel,
        helpPopup: e.labelHelp,
        highlightableConfig: e.labelHighlightableConfig,
        theme: e.labelTheme
    }, e.label)), e.suffix && t("div", {
        className: sU.suffix
    }, t(jP, Ee({
        id: e.suffixId,
        testId: gb(e.testId, "suffix"),
        disabled: e.disabled,
        wrapText: false,
        tokens: r
    }, n === "high" && {
        style: {
            "--text-font-size-m": o.tokensExperimental["font-size-body-text-s"]
        }
    }), e.suffix)), e.description && t("div", {
        className: sU.description
    }, t(jP, {
        id: e.descriptionId,
        testId: gb(e.testId, "description"),
        className: sU.text,
        disabled: e.disabled,
        wrapText: e.wrapDescription,
        tokens: r
    }, e.description)));
};

const cU = MA("withLabels");

function dU(e) {
    const o = `${e.name}WithLabels`;
    const n = u((function n(a, r) {
        const [s, i, l, c] = cU(4);
        const d = a.id || s;
        const u = a;
        const {className: m, style: p, label: f, labelId: g, labelClassName: h, labelStyle: b, labelPosition: v, labelHelp: y, labelContainerRef: x, labelHighlightableConfig: S, labelTheme: w, suffix: C, description: E, wrapLabel: I, wrapDescription: _, suppressHtmlFor: D, suppressRequiredIndicator: L, fieldLabelWidth: T, fieldLabelMinWidth: R, fieldMinWidth: k, fieldWidth: A, fieldSuffixMinWidth: M, labelSpacing: N, labelingAttr: O, inputStyle: P, inputClassName: B, ariaLabel: z, ariaLabelledBy: F, ariaDescribedBy: j, ...V} = a;
        const H = iU(A);
        const U = g ?? i;
        const G = O === "aria-label" || O === undefined && !!z ? [ f, z ].filter((e => !!e)).join(", ") : undefined;
        const K = O === "aria-labelledby" || O === undefined && !G ? [ U ].concat(F ?? []).join(" ") : undefined;
        let W = [];
        if (C) W.push(l);
        if (E) W.push(c);
        if (j) W = W.concat(j);
        const $ = {};
        if (G !== undefined) $.ariaLabel = G;
        if (K !== undefined) $.ariaLabelledBy = K;
        if (W.length > 0) $.ariaDescribedBy = [ W.join(" ") ];
        return t(lU, Ee({
            className: o + (m ? ` ${m}` : ""),
            style: p
        }, u, {
            suppressRequiredIndicator: L || a.readOnly || a.editable === false,
            inputId: O === "htmlFor" || O === undefined && !G ? d : undefined,
            labelId: U,
            suffixId: l,
            descriptionId: c,
            testId: gb(a.testId, "withLabels")
        }), t(e, Ee({}, V, {
            id: d,
            ref: r,
            className: B,
            "data-with-labels": true,
            style: {
                maxWidth: "100%",
                ...P,
                width: H ? "100%" : A,
                minWidth: k
            }
        }, $)));
    }));
    n.displayName = o;
    return n;
}

function uU() {
    const e = c(undefined);
    if (e.current === undefined) {
        const t = [];
        const o = [];
        e.current = {
            refs: t,
            createSetRef(e) {
                let n = o[e];
                if (n === undefined) {
                    n = function(o) {
                        t[e] = o;
                    };
                    o[e] = n;
                }
                return n;
            }
        };
    }
    return e.current;
}

function mU(e) {
    if (e % 4e3 === 0) {
        return false;
    } else if (e % 400 === 0) {
        return true;
    } else if (e % 100 === 0) {
        return false;
    } else if (e % 4 === 0) {
        return true;
    } else {
        return false;
    }
}

function pU(e, t) {
    if (e === 1) {
        return mU(t) ? 29 : 28;
    } else if (e === 3 || e === 5 || e === 8 || e === 10) {
        return 30;
    } else {
        return 31;
    }
}

function* fU(e, t, o) {
    const n = new Date(t, e, 1).getDay();
    const a = e === 0 ? t - 1 : t;
    const r = e === 0 ? 11 : e - 1;
    const s = pU(r, a);
    if (o && mh(o)) {
        const o = new Date(a, r, 1).getDay();
        const i = e === 0 ? 10 : e - 2;
        const l = pU(i, a);
        {
            for (let e = o - 1; e >= 0; --e) {
                yield new Date(a, i, l - e);
            }
        }
        for (let e = 0; e < s - n; ++e) {
            yield new Date(a, r, e + 1);
        }
        {
            for (let e = n - 1; e >= 0; --e) {
                yield new Date(a, r, s - e);
            }
        }
        const c = pU(e, t);
        for (let o = 0; o < c; ++o) {
            yield new Date(t, e, o + 1);
        }
        {
            const o = e === 11 ? t + 1 : t;
            const a = (e + 1) % 12;
            const r = (n + c - 1) % 7;
            for (let e = 0; e < 6 - r; ++e) {
                yield new Date(o, a, e + 1);
            }
        }
        {
            const o = (n + c - 1) % 7;
            const a = e === 11 ? t + 1 : t;
            const r = (e + 1) % 12;
            const s = pU(r, a);
            for (let e = 6 - o; e < s; ++e) {
                yield new Date(a, r, e + 1);
            }
        }
        return;
    } else {
        {
            for (let e = n - 1; e >= 0; --e) {
                yield new Date(a, r, s - e);
            }
        }
        const o = pU(e, t);
        for (let n = 0; n < o; ++n) {
            yield new Date(t, e, n + 1);
        }
        {
            const a = e === 11 ? t + 1 : t;
            const r = (e + 1) % 12;
            const s = (n + o - 1) % 7;
            for (let e = 0; e < 6 - s; ++e) {
                yield new Date(a, r, e + 1);
            }
        }
    }
}

function gU(e) {
    return function* t(o) {
        let n = [];
        for (const t of o) {
            if (n.length === e) {
                yield n;
                n = [];
            }
            n.push(t);
        }
        if (n.length !== 0) {
            yield n;
        }
    };
}

function hU(e, t, o) {
    let n;
    n = fU(e, t, o);
    n = gU(7)(n);
    return [ ...n ];
}

function bU(e, t) {
    let o = new Date(e, 0, 1).getDay();
    for (let n = 0; n < t; ++n) {
        o += pU(n, e);
    }
    return 1 + Math.floor(o / 7);
}

const vU = 1582;

const yU = 9999;

const xU = new Date(vU, 0, 1);

const SU = new Date(yU, 11, 31);

const wU = -271821;

function CU(e) {
    const t = new Intl.DateTimeFormat(e, {
        year: "numeric",
        month: "numeric",
        day: "numeric"
    }).formatToParts(new Date);
    const o = t.findIndex((({type: e}) => e === "year"));
    const n = t.findIndex((({type: e}) => e === "month"));
    return o > n ? "after" : "before";
}

function EU(e) {
    const t = new Intl.DateTimeFormat(e, {
        month: "long"
    });
    const o = [];
    for (let e = 0; e < 12; e++) {
        const n = new Date(0, e, 2, 0, 0, 0);
        o.push(t.format(n));
    }
    return o;
}

function IU(e) {
    const t = new Intl.DateTimeFormat(e, {
        weekday: "narrow"
    });
    const o = [];
    for (let e = 5; e < 12; e++) {
        const n = new Date(2020, 0, e, 0, 0, 0);
        o.push(t.format(n));
    }
    return o;
}

function _U(e) {
    const t = new Intl.DateTimeFormat(e, {
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
    });
    const o = [];
    let n = new Date(2020, 0, 5, 0, 0, 0);
    let a = t.formatToParts(n);
    let r = a.find((e => e.type === "dayPeriod"));
    r && o.push(r.value);
    n = new Date(2020, 0, 5, 13, 0, 0);
    a = t.formatToParts(n);
    r = a.find((e => e.type === "dayPeriod"));
    r && o.push(r.value);
    return o;
}

function DU(e) {
    const t = new Intl.DateTimeFormat(e, {
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
    }).formatToParts(new Date);
    const o = t.findIndex((({type: e}) => e === "dayPeriod"));
    if (o === -1) {
        return "none";
    }
    const n = t.findIndex((({type: e}) => e === "hour"));
    return o > n ? "after" : "before";
}

function LU(e) {
    const t = new Intl.DateTimeFormat(e, {
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
    }).formatToParts(new Date);
    const o = t.findIndex((({type: e}) => e === "hour"));
    const n = t.slice(o).find((({type: e}) => e === "literal"));
    return n ? n.value : ":";
}

function TU(e) {
    const t = new Intl.DateTimeFormat(e, {
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
    }).formatToParts(new Date);
    const o = t.findIndex((({type: e}) => e === "hour"));
    const n = t.slice(o).find((({type: e}) => e === "literal"));
    return n ? n.value : ":";
}

function RU(e) {
    const t = new Intl.DateTimeFormat(e, {
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
    }).formatToParts(new Date);
    const o = t.findIndex((({type: e}) => e === "minute"));
    const n = t.slice(o).find((({type: e}) => e === "literal"));
    return n ? n.value : ":";
}

function kU(e) {
    const t = new Intl.DateTimeFormat(e, {
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
    }).formatToParts(new Date);
    const o = t.findIndex((({type: e}) => e === "second"));
    const n = t.slice(o).find((({type: e}) => e === "literal"));
    return n ? n.value : "";
}

function AU(e, t) {
    if (t) {
        const o = new Intl.DateTimeFormat(e, {
            year: "numeric",
            month: "short"
        }).format(t);
        return o;
    }
    return "";
}

function MU(e, t) {
    return e.getDate() === t.getDate() && e.getMonth() === t.getMonth() && e.getFullYear() === t.getFullYear();
}

function NU(e) {
    return e + 543;
}

function OU(e) {
    return e >= 543 ? e - 543 : 0;
}

const PU = e => {
    const [t, o, n] = [ e.getFullYear(), e.getMonth(), e.getDate() ];
    return [ 0, 31, mU(t) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30 ].slice(0, o + 1).reduce(((e, t) => e + t)) + n;
};

const BU = (e, t) => {
    if (e === 1) return new Date(t, 0, 1);
    const o = new Date(t, 0, 1).getDay();
    return new Date(t, 0, (e - 1) * 7 - (o - 1));
};

const zU = e => {
    if (e.getFullYear() === 9999) return 0;
    const t = new Date(e.getFullYear(), e.getMonth(), e.getDate() - e.getDay());
    const o = new Date(t);
    o.setDate(o.getDate() + 6);
    return o.getFullYear() - e.getFullYear();
};

const FU = e => {
    if (e.getFullYear() === 9999) return 53;
    const t = e.getFullYear() + zU(e);
    const o = VV.Saturday;
    const n = VV.Friday;
    const a = new Date(t, 0, 1).getDay();
    return a === o || mU(t) && a === n ? 53 : 52;
};

const jU = e => {
    if (zU(e) > 0) return 1;
    const t = new Date(e.getFullYear(), 0, 1).getDay();
    return Math.floor((PU(e) + t - 1) / 7) + 1;
};

const VU = (e, t) => {
    const o = e.getFullYear() + zU(e);
    return uh(t) ? NU(o) : o;
};

const HU = e => {
    if (!e) {
        e = new Date;
    } else {
        e = new Date(e.getTime());
    }
    if (e.getFullYear() === wU) {
        e.setFullYear(wU + 1);
    }
    e.setMonth(0);
    const t = e.getTimezoneOffset();
    e.setMonth(5);
    const o = e.getTimezoneOffset();
    return t > o ? t : o;
};

const UU = e => {
    if (!e) {
        e = new Date;
    }
    return e.getTimezoneOffset() < HU(e);
};

var GU = "sas_components-Select-Select_read-only";

var KU = "sas_components-Select-Select_select";

var WU = "sas_components-Select-Select_item-icon";

var $U = "sas_components-Select-Select_select-icon";

var YU = "sas_components-Select-Select_expanded";

var qU = "sas_components-Select-Select_disabled";

var XU = "sas_components-Select-Select_focus-visible";

var ZU = "sas_components-Select-Select_text-wrapper";

var JU = "sas_components-Select-Select_label";

var QU = "sas_components-Select-Select_label-disabled";

var eG = "sas_components-Select-Select_label-icon-only";

var tG = "sas_components-Select-Select_label-placeholder sas_components-Select-Select_label";

var oG = "sas_components-Select-Select_dropdown-popover";

var nG = "sas_components-Select-Select_dropdown-popover-item";

var aG = "sas_components-Select-Select_status";

var rG = "sas_components-Select-Select_status-icon";

var sG = "sas_components-Select-Select_icon-only";

var iG = {
    readOnly: GU,
    select: KU,
    itemIcon: WU,
    selectIcon: $U,
    expanded: YU,
    disabled: qU,
    focusVisible: XU,
    textWrapper: ZU,
    label: JU,
    labelDisabled: QU,
    labelIconOnly: eG,
    labelPlaceholder: tG,
    dropdownPopover: oG,
    dropdownPopoverItem: nG,
    status: aG,
    statusIcon: rG,
    iconOnly: sG
};

const lG = fb(ut);

const cG = MA("Select");

const dG = e => {
    const o = lG();
    const n = e.focusable ?? true;
    const a = C_();
    const {density: r} = YA();
    const s = {
        ...uG(a, {
            readOnly: e.readOnly ?? false,
            status: e.status,
            theme: e.theme,
            font: e.font,
            density: r
        }),
        ...e.futureTheme?.(a)
    };
    const i = e.status === "alert" || e.status === "warning";
    const l = !e.hasFocus && i;
    const d = l ? e.status === "alert" ? t(MM, {
        icon: Yk,
        color: "alert"
    }) : t(MM, {
        icon: CA,
        color: "warning"
    }) : undefined;
    const u = c(null);
    const m = WA({
        tooltip: e.tooltip,
        truncateRef: u
    });
    const p = cG();
    const f = cG();
    const g = e.required ? [ p ] : [];
    if (Array.isArray(e.ariaDescribedBy)) {
        g.push(...e.ariaDescribedBy);
    } else if (e.ariaDescribedBy !== undefined) {
        g.push(e.ariaDescribedBy);
    }
    const h = [];
    if (Array.isArray(e.ariaLabelledBy)) {
        h.push(...e.ariaLabelledBy);
    } else if (e.ariaLabelledBy !== undefined) {
        h.push(e.ariaLabelledBy);
    }
    const b = cG();
    const v = [];
    const y = JA();
    const x = e.icon ? y({
        icon: e.icon,
        tooltip: e.iconTooltip,
        ariaLabel: e.iconAriaLabel,
        ariaHidden: !!e.label && !!e.iconAriaHidden
    }) : undefined;
    if (e.readOnly) {
        if (h.length !== 0) {
            if (e.icon) h.push(b);
        }
        if (e.ariaLabel) {
            v.push(e.ariaLabel);
            if (h.length === 0) {
                if (e.icon) {
                    if (x?.tooltip) v.push(x.tooltip);
                }
            }
        }
    }
    const S = fO({
        traverseChildren: true
    });
    const w = e.icon ? t("div", {
        className: ke(iG.itemIcon, !!!e.label && iG.iconOnly)
    }, t(MM, Ee({
        id: b,
        icon: e.icon
    }, x, {
        disabled: e.disabled,
        testId: gb(e.testId, "itemIcon")
    }))) : undefined;
    return e.readOnly ? t("div", {
        ref: t => {
            D_(e.innerRef, t);
            S(t);
            m(t);
        },
        role: "textbox",
        "aria-disabled": e.disabled,
        "aria-describedby": g.length ? g.join(" ") : undefined,
        "aria-label": v.join(" "),
        "aria-labelledby": h.length ? h.join(" ") : undefined,
        "aria-readonly": "true",
        title: e.tooltip,
        className: ke(e.className, iG.readOnly, iG.focusVisible, e.disabled && iG.disabled),
        tabIndex: n ? 0 : -1,
        "data-testid": e.testId,
        style: {
            ...s,
            ...e.style
        }
    }, t("div", {
        className: iG.textWrapper
    }, w, t("span", {
        id: f,
        ref: t => {
            D_(e.textRef, t);
            D_(u, t);
        },
        className: ke(iG.label, e.disabled && iG.labelDisabled, !!!e.label && iG.labelIconOnly),
        "data-testid": gb(e.testId, "readOnlyValue")
    }, e.label ?? ""))) : t("div", {
        ref: t => {
            D_(e.innerRef, t);
            S(t);
            m(t);
        },
        role: "combobox",
        "aria-haspopup": "listbox",
        "aria-controls": e.listId,
        "aria-expanded": e.isOpen ? "true" : "false",
        "aria-activedescendant": e.ariaActiveDescendant,
        "aria-disabled": e.disabled,
        "aria-invalid": e.status === "alert" ? true : undefined,
        "aria-describedby": g.length ? g.join(" ") : undefined,
        "aria-label": e.ariaLabel,
        "aria-labelledby": h.length ? h.join(" ") : undefined,
        title: e.tooltip,
        className: ke(e.className, iG.select, !e.isOpen && iG.focusVisible, e.disabled && iG.disabled, e.isOpen && iG.expanded, i ? iG.status : undefined),
        tabIndex: n ? 0 : -1,
        "data-testid": e.testId,
        style: {
            ...s,
            ...e.style
        },
        onClick: () => {
            e.toggleOpen?.();
            e.onPress?.();
        },
        onKeyDown: t => {
            if (t.key === " ") {
                e.toggleOpen?.();
            }
            e.onKeyDown?.(t);
        }
    }, e.required ? t(bO, {
        id: p
    }, o("required.aria")) : null, t("div", {
        className: iG.textWrapper,
        "aria-live": !e.isOpen ? "polite" : undefined
    }, w, t("span", {
        id: f,
        ref: t => {
            D_(e.textRef, t);
            D_(u, t);
        },
        className: ke(!i && e.isPlaceholder ? iG.labelPlaceholder : iG.label, e.labelClassName, e.disabled && iG.labelDisabled, e.label === "" && iG.labelIconOnly),
        "data-testid": gb(e.testId, "value")
    }, e.label ?? "")), e.status || l ? t("div", Ee({
        className: iG.statusIcon
    }, r === "high" && {
        style: {
            "--icon-height": a.tokensExperimental["size-icon-s"],
            "--icon-width": a.tokensExperimental["size-icon-s"]
        }
    }), d) : null, pD(e.renderIcon, MM, {
        className: iG.selectIcon,
        disabled: e.disabled,
        testId: gb(e.testId, "icon"),
        icon: CT,
        role: "presentation"
    }));
};

const uG = (e, t) => {
    const o = t?.theme;
    let n;
    if (o) {
        const e = o({
            state: "placeholder"
        })?.fg;
        n = {
            ...__(o({
                state: "normal"
            }) ?? {}, "select"),
            ...__(o({
                state: "hover"
            }) ?? {}, "select-hover"),
            ...__(o({
                state: "active"
            }) ?? {}, "select-active"),
            ...__(e ? {
                fg: e
            } : {}, "select-placeholder")
        };
    }
    const a = () => {
        switch (t?.status) {
          case "alert":
            return {
                "status-bd": e.tokensExperimental["color-action-border-control-alert"]
            };

          case "warning":
            return {
                "status-bd": e.tokensExperimental["color-action-border-control-warning"]
            };
        }
    };
    const r = t?.readOnly ? {
        bd: e.tokensExperimental["color-action-border-control-read-only"],
        bg: e.tokensExperimental["color-action-background-control-read-only"],
        fg: e.tokensExperimental["color-action-text-control-read-only"]
    } : {
        bd: e.tokensExperimental["color-action-border-control-normal"],
        bg: e.tokensExperimental["color-action-background-control-normal"],
        fg: e.tokensExperimental["color-action-text-control-normal"]
    };
    const s = t?.density === "high" ? e.tokensExperimental["font-size-body-text-s"] : e.tokensExperimental["font-size-body-text-m"];
    const i = t?.density === "high" ? {
        pd: e.tokensExperimental["space-squish-xs"],
        "min-block-size": "1.5rem"
    } : {
        pd: e.tokensExperimental["space-squish-s"],
        "min-block-size": "1.75rem"
    };
    return {
        ...__({
            "font-size": t?.font?.fontSize ?? s,
            ...a(),
            ...r,
            ...i,
            "hover-fg": e.tokensExperimental["color-action-text-control-hover"],
            "hover-bd": e.tokensExperimental["color-action-border-control-hover"],
            "hover-bg": e.tokensExperimental["color-action-background-control-hover"],
            "disabled-opacity": 1,
            "placeholder-fg": e.tokensExperimental["color-action-text-control-placeholder"],
            "placeholder-active-fg": e.tokensExperimental["color-action-text-control-placeholder"],
            "active-fg": e.tokensExperimental["color-action-text-control-selected"],
            "active-bd": e.tokensExperimental["color-action-border-control-selected"],
            "active-bg": e.tokensExperimental["color-action-background-control-selected"],
            "disabled-fg": e.tokensExperimental["color-action-text-control-disabled"],
            "disabled-bg": e.tokensExperimental["color-action-background-control-disabled"],
            "disabled-bd": e.tokensExperimental["color-action-border-control-disabled"],
            "font-family": t?.font?.fontFamily ?? "inherit",
            "font-style": t?.font?.fontStyle ?? "inherit",
            "font-weight": t?.font?.fontWeight ?? "inherit",
            "text-decoration": t?.font?.textDecoration ?? "inherit",
            "spacing-xs": e.tokensExperimental["space-base-xs"],
            "bd-bottom": e.tokensExperimental["color-action-border-bottom-control-normal"],
            "bd-bottom-bw": e.tokensExperimental["size-border-width-s"],
            "active-bottom-bd": e.tokensExperimental["color-action-border-bottom-control-selected"],
            "warning-bottom-bd": e.tokensExperimental["color-action-border-bottom-control-warning"],
            "alert-bottom-bd": e.tokensExperimental["color-action-border-bottom-control-alert"],
            "hover-bottom-bd": e.tokensExperimental["color-action-border-bottom-control-hover"]
        }, "select"),
        ...n,
        ...!e.enableNovaTokens && mG(e, t)
    };
};

const mG = (e, t) => {
    const o = t?.theme;
    let n;
    if (o) {
        const e = o({
            state: "placeholder"
        })?.fg;
        n = {
            ...__(o({
                state: "normal"
            }) ?? {}, "select"),
            ...__(o({
                state: "hover"
            }) ?? {}, "select-hover"),
            ...__(o({
                state: "active"
            }) ?? {}, "select-active"),
            ...__(e ? {
                fg: e
            } : {}, "select-placeholder")
        };
    }
    const a = () => {
        switch (t?.status) {
          case "alert":
            return {
                "status-bd": e.stateStatus.alert.bd
            };

          case "warning":
            return {
                "status-bd": e.stateStatus.warning.bd
            };
        }
    };
    const r = __({
        "font-size": t?.font?.fontSize ?? e.font.size.m,
        ...a()
    }, "select");
    switch (e.baseReportThemeName) {
      case "highcontrast2018":
      case "highcontrast2017":
        return {
            ...__({
                ...e.stateStandard.normal,
                "hover-bd": e.stateStandard.hover.bd,
                "hover-bg": e.stateStandard.hover.bg,
                "hover-fg": e.stateStandard.hover.fg,
                "active-bd": "dt.stateStandard.normal.bd",
                "active-filter": e.stateStandard.active.filter,
                "disabled-opacity": .3,
                "placeholder-fg": e.c.n1,
                "disabled-bg": e.stateStandard.disabled.bg,
                "disabled-fg": e.stateStandard.disabled.fg,
                "disabled-bd": e.stateStandard.disabled.bd
            }, "select"),
            ...r,
            ...n
        };
    }
    switch (e.themeVariant) {
      case "dark":
        return {
            ...__({
                ...e.stateStandard.normal,
                "hover-bd": e.stateStandard.hover.bd,
                "hover-bg": e.stateStandard.hover.bg,
                "hover-fg": e.stateStandard.hover.fg,
                "active-bd": e.stateStandard.active.bd,
                "active-filter": e.stateStandard.active.filter,
                "disabled-opacity": .3,
                "placeholder-fg": Jv(e.c.white, .65),
                "disabled-bg": e.stateStandard.disabled.bg,
                "disabled-fg": e.stateStandard.disabled.fg,
                "disabled-bd": e.stateStandard.disabled.bd
            }, "select"),
            ...r,
            ...n
        };

      case "high-contrast":
        return {
            ...__({
                ...e.stateStandard.normal,
                "hover-bd": e.stateStandard.hover.bd,
                "hover-bg": e.stateStandard.hover.bg,
                "hover-fg": e.stateStandard.hover.fg,
                "active-bd": e.stateStandard.normal.bd,
                "active-filter": e.stateStandard.active.filter,
                "disabled-opacity": .5,
                "placeholder-fg": e.c.n1,
                "disabled-bg": e.stateStandard.disabled.bg,
                "disabled-fg": e.stateStandard.disabled.fg,
                "disabled-bd": e.stateStandard.disabled.bd
            }, "select"),
            ...r,
            ...n
        };

      default:
        return {
            ...__({
                ...e.stateStandard.normal,
                "hover-bd": e.stateStandard.hover.bd,
                "hover-bg": e.stateStandard.hover.bg,
                "hover-fg": e.stateStandard.hover.fg,
                "active-bd": e.stateStandard.active.bd,
                "active-filter": e.stateStandard.active.filter,
                "disabled-opacity": .3,
                "placeholder-fg": e.c.n1,
                "disabled-bg": e.stateStandard.disabled.bg,
                "disabled-fg": e.stateStandard.disabled.fg,
                "disabled-bd": e.stateStandard.disabled.bd
            }, "select"),
            ...r,
            ...n
        };
    }
};

const pG = e => "separator" in e;

const fG = e => [ e.fontStyle, e.fontWeight, e.fontSize, e.fontFamily ].join(" ");

const gG = e => {
    const t = window.getComputedStyle(e);
    return [ t.getPropertyValue("font-style"), t.getPropertyValue("font-variant"), t.getPropertyValue("font-weight"), t.getPropertyValue("font-size"), t.getPropertyValue("font-family") ].join(" ");
};

var hG = "sas_components-Dropdown-__internal__-DropdownDesign_offscreen";

var bG = "sas_components-Dropdown-__internal__-DropdownDesign_container";

var vG = "sas_components-Dropdown-__internal__-DropdownDesign_dropdown-popover";

var yG = "sas_components-Dropdown-__internal__-DropdownDesign_dropdown-popover-item";

var xG = "sas_components-Dropdown-__internal__-DropdownDesign_message";

var SG = {
    offscreen: hG,
    container: bG,
    dropdownPopover: vG,
    dropdownPopoverItem: yG,
    message: xG
};

const wG = MA("Dropdown-list");

const CG = MA("Dropdown-ValidationMessage");

const EG = fb(mt);

const IG = e => {
    const o = EG();
    const i = C_();
    const l = ay();
    const d = YI();
    const u = o("placeholder.msg");
    const {count: m, renderItem: p, itemHeight: f, width: h} = e.virtualItems ?? {};
    const b = c();
    const v = c();
    const y = e.virtualItems?.virtualizerRef ?? b;
    const x = e.virtualItems?.pageSizeRef ?? v;
    const S = e.focusable ?? true;
    const w = !e.style?.width;
    const C = !h;
    const [E, I] = n(undefined);
    const [_, D] = n(false);
    const [L, T] = n(e.required);
    const [R, k] = n(false);
    const [A, M] = n(false);
    const N = !qI(e.unselectedValue);
    const O = N && e.unselectedValue?.item !== null;
    const P = e.unselectedValue?.placeholder;
    const B = e.isItemDisabled;
    const z = s((t => {
        if (e.hasInput) return false;
        if (O && t === 0) return false;
        return !!B?.(O ? t - 1 : t);
    }), [ e.hasInput, O, B ]);
    const F = t => {
        if (t !== ne && !z?.(t)) {
            e.onSelected?.(!O ? t : t > 0 ? t - 1 : undefined);
            T(false);
        }
    };
    const j = c(null);
    const V = c(null);
    const H = c(null);
    const U = c(null);
    const G = c(null);
    const K = CG();
    const W = wG();
    const $ = `${W}-item`;
    const Y = `${W}-nullItem`;
    const q = r((() => {
        if (!O) {
            return null;
        }
        const t = e.unselectedValue?.item?.text ?? P ?? u;
        return {
            ...e.unselectedValue?.item,
            text: t,
            id: Y
        };
    }), [ e.unselectedValue, O, P, u, Y ]);
    const {items: X, displayListItemIcon: Z} = r((() => {
        let t = e.displayListItemIcon;
        if (!e.values || e.virtualItems) {
            return {
                items: undefined,
                displayListItemIcon: t
            };
        }
        const o = [];
        let n = 0;
        if (q) o.push(q);
        let a = false;
        for (const r of e.values) {
            if (pG(r)) {
                a = true;
                continue;
            } else {
                const e = r;
                o.push({
                    ...r,
                    id: $ + n++,
                    showSeparator: e.showSeparator ?? a
                });
                a = false;
                if (t === undefined && r.icon !== undefined) {
                    t = true;
                }
            }
        }
        return {
            items: o,
            displayListItemIcon: !!t
        };
    }), [ e.values, e.virtualItems, e.displayListItemIcon, q, $ ]);
    const J = s((e => p?.({
        index: e
    }) ?? X?.[O ? e + 1 : e]), [ O, X, p ]);
    const Q = s((e => {
        if (O) return e === 0 ? q : J(e - 1);
        return J(e);
    }), [ J, O, q ]);
    const ee = Math.min(m ? m + (O ? 1 : 0) : X?.length ?? 0, 295e3);
    const te = r((() => xj({
        length: ee,
        start: 0,
        isValidIndex: e => !z?.(e)
    }) ?? -1), [ ee, z ]);
    const oe = t => {
        if (qI(t)) {
            if (e.unselectedValue && !O) return -1;
            return te;
        }
        const o = m ?? e.values?.length ?? 0;
        t = Math.max(-1, t);
        t = Math.min(t, o - 1);
        return O && t !== -1 ? t + 1 : t ?? (e.hasInput ? -1 : 0);
    };
    const ne = oe(e.selectedIndex);
    const ae = oe(e.focusedIndex);
    const re = t => e.setFocusedIndex?.(!O ? t : t > 0 ? t - 1 : undefined);
    const se = s((({index: e}) => {
        if (O) {
            if (e <= 0) return q;
            e--;
        }
        const t = J(e);
        return {
            ...t,
            id: $ + e
        };
    }), [ J, O, $, q ]);
    const ie = r((() => e.virtualItems ? {
        count: ee,
        renderItem: se,
        virtualizerRef: y,
        pageSizeRef: x,
        width: h ?? E,
        itemHeight: f
    } : undefined), [ e.virtualItems, ee, se, y, x, h, E, f ]);
    const le = !qI(ae) && ae < ee && ae > -1;
    const ce = le ? ie ? se({
        index: ae
    })?.id : Q(ae)?.id : undefined;
    const de = c(undefined);
    const ue = c(false);
    const me = s((() => {
        if (ie) {
            y?.current?.scrollToIndex?.(ae, {
                align: ue.current ? "start" : "auto"
            });
        } else {
            if (!U.current || !G.current) return;
            const e = -(U.current.offsetTop + U.current.clientTop);
            const t = G.current.offsetTop + e;
            const o = t + G.current.offsetHeight;
            const n = de.current ?? U.current.scrollTop;
            if (o > n + U.current.clientHeight) {
                U.current.scrollTop = o - U.current.clientHeight;
            } else if (t < n) {
                U.current.scrollTop = t;
            } else if (de.current !== undefined) {
                U.current.scrollTop = de.current;
            }
            de.current = U.current.scrollTop;
        }
    }), [ ae, ie, y ]);
    a((() => {
        me();
    }), [ ae, me ]);
    a((() => {
        ue.current = e.isOpen;
    }), [ e.isOpen ]);
    const pe = t => {
        if (t) {
            if (z?.(ae)) return;
            F(ae);
        } else {
            re(ne);
        }
        e.setIsOpen?.(false);
    };
    const fe = () => {
        e.setIsOpen?.(true);
        j?.current?.focus();
    };
    const ge = () => {
        if (e.disabled || e.editable === false) return;
        if (e.isOpen) {
            pe(true);
        } else if (e.onBeforeOpen) {
            e.onBeforeOpen().then((e => {
                if (!e) {
                    fe();
                }
            }));
        } else {
            fe();
        }
    };
    Qv([ U, j ], (() => {
        setTimeout((() => {
            if (document.activeElement === j.current) {
                pe(true);
                T(false);
            }
        }), 50);
    }));
    const he = () => {
        const t = 10;
        if (!e.isOpen) return t;
        if (ie) return x.current ?? t;
        const o = U.current?.scrollHeight ?? 0;
        const n = U.current?.offsetHeight ?? 0;
        const a = o / ee;
        return Math.round(a !== 0 && n !== 0 ? n / a : t);
    };
    const be = $B({
        source: OB.InputFull
    });
    const ve = $B({
        source: OB.Error
    });
    const ye = t => {
        if (ee <= 0 || e.disabled || e.readOnly) {
            return;
        }
        let o = true;
        if (e.hasInput) {
            M(t.key !== "Tab");
        }
        switch (t.key) {
          case "ArrowUp":
            if (t.altKey) {
                ge();
            } else {
                const t = wj({
                    length: ee,
                    start: Math.max(ae - 1, 0),
                    isValidIndex: t => e.isOpen || !z?.(t)
                });
                if (e.isOpen) re(t ?? 0); else if (t !== undefined) F(t);
                if (t === 0) be.play();
            }
            break;

          case "ArrowDown":
            if (t.altKey) {
                ge();
            } else {
                const t = xj({
                    length: ee,
                    start: Math.min(ae + 1, ee - 1),
                    isValidIndex: t => e.isOpen || !z?.(t)
                });
                if (e.isOpen) re(t ?? ee - 1); else if (t !== undefined) F(t);
                if (t === ee - 1) be.play();
            }
            break;

          case "ArrowLeft":
          case "ArrowRight":
            if (!e.isOpen || e.hasInput) {
                o = false;
            }
            break;

          case "PageUp":
            {
                const t = Ej({
                    length: ee,
                    start: Math.max(ae - 1, 0),
                    isValidIndex: t => e.isOpen || !z?.(t),
                    pageSize: he()
                });
                if (e.isOpen) re(t ?? 0); else if (t !== undefined) F(t);
                if (t === 0) be.play();
            }
            break;

          case "PageDown":
            {
                const t = Cj({
                    length: ee,
                    start: Math.min(ae + 1, ee - 1),
                    isValidIndex: t => e.isOpen || !z?.(t),
                    pageSize: he()
                });
                if (t !== undefined) {
                    if (e.isOpen) re(t); else F(t);
                }
                if (t === ee - 1) be.play();
            }
            break;

          case "Home":
            {
                const t = xj({
                    length: ee,
                    start: 0,
                    isValidIndex: t => e.isOpen || !z?.(t)
                });
                if (e.isOpen) re(t ?? 0); else if (t !== undefined) F(t);
            }
            break;

          case "End":
            {
                const t = wj({
                    length: ee,
                    start: ee - 1,
                    isValidIndex: t => e.isOpen || !z?.(t)
                });
                if (t !== undefined) {
                    if (e.isOpen) re(t); else F(t);
                }
            }
            break;

          case " ":
            ge();
            break;

          case "Enter":
            if (e.isOpen) {
                pe(true);
            } else {
                o = false;
            }
            break;

          case "Escape":
            if (e.isOpen) {
                t.preventDefault();
                t.stopPropagation();
                pe(false);
            } else {
                o = false;
            }
            break;

          default:
            if (ee <= 0 || t.key.length !== 1 || e.hasInput) {
                o = false;
                break;
            }
            const n = t.key.toLowerCase();
            const a = xj({
                length: ee,
                start: ae + 1,
                isValidIndex: e => {
                    const t = Q(e);
                    return !z?.(e) && !!xe(t ?? undefined)?.toLowerCase().startsWith(n);
                },
                wrap: true
            });
            if (a !== undefined) e.isOpen ? re(a) : F(a); else ve.play();
            break;
        }
        if (o) {
            t.preventDefault();
            t.stopPropagation();
        }
    };
    const xe = s((t => {
        if (qI(t)) {
            if (ae === -1) return e.hasInput ? undefined : "";
            return "";
        }
        if (ne === -1 && e.hasInput) return undefined;
        if (e.displayIconOnly) return "\ufeff";
        let o = t.text;
        {
            const n = t.secondaryText;
            if (e.displaySecondaryText && !qI(n)) {
                o += ` (${n})`;
            }
        }
        return o !== "" ? o : "\ufeff";
    }), [ ae, e.displayIconOnly, e.displaySecondaryText, e.hasInput, ne ]);
    const Se = N && (O && ae === 0 || ae === -1);
    const we = N ? P ?? u : undefined;
    const Ce = ee !== 0 && ae >= 0 && ae < ee ? Q(ae) : undefined;
    const Ee = z?.(ae);
    const Ie = Se || ee === 0 ? we : Ee ? " " : xe(Ce ?? undefined);
    const _e = !Ee && Z && Ce ? Ce.icon : undefined;
    const De = !Ee && Z && Ce ? Ce.iconAriaLabel : undefined;
    const Le = !Ee && Z && (e.displayIconOnly || !!Ce) ? Ce?.iconTooltip : undefined;
    const Te = Z && e.displayIconOnly ? false : !!Ce?.iconAriaHidden ?? !!Ce;
    const Re = 2;
    const Ae = 28;
    const Me = 96;
    const Ne = s((() => {
        if (!w && !C || !V.current) return;
        const t = H.current;
        const o = V.current;
        const n = t.getBoundingClientRect();
        const a = o.getBoundingClientRect();
        const r = gG(o);
        const s = n?.width ?? 0;
        const c = FA();
        const d = document.createElement("canvas").getContext("2d");
        const u = Math.min(1e3, ee);
        if (!d) return;
        const m = ({includeIcon: e, includeIndentation: t, includeText: o, includeSecondary: n, fontFamily: a}) => {
            d.font = a;
            let r = 0;
            for (let a = 0; a < u; a++) {
                const {text: s, secondaryText: l, indented: c, icon: u} = J(a) || {};
                let m = 0;
                if (e) m += parseInt(u?.render({}, undefined).props.width ?? "0", 10);
                if (t) {
                    const e = typeof c === "boolean" ? c ? 1 : 0 : c;
                    if (e && e > -1) m += e * jA(i.spacing.core.xl);
                }
                if (o) m += d.measureText(s ?? "").width;
                if (n) {
                    const e = l ? ` (${l})` : "";
                    m += d.measureText(e).width;
                }
                r = Math.max(r, m);
            }
            return r;
        };
        if (w && o.parentElement) {
            let s = m({
                fontFamily: r,
                includeIcon: true,
                includeIndentation: false,
                includeText: !e.displayIconOnly,
                includeSecondary: !e.displayIconOnly && !!e.displaySecondaryText
            });
            if (we) {
                s = Math.max(s, d.measureText(we).width);
            }
            if (s) {
                s += l ? 1 : 0;
                s += c;
                o.parentElement.style.width = `${Math.ceil(s)}px`;
                if (!!!e.style?.minWidth) {
                    const e = !l ? (a.left ?? 0) - (n?.left ?? 0) : (n?.right ?? 0) - (a.right ?? 0);
                    t.style.minWidth = s + e < Me ? "initial" : "";
                }
            }
        }
        if (C && s > 0) {
            const t = e.listTokens?.font ? fG(e.listTokens?.font) : undefined;
            let o = m({
                fontFamily: t ?? r,
                includeIcon: !!e.displayListItemIcon,
                includeIndentation: true,
                includeText: true,
                includeSecondary: true
            });
            o += c + Ae;
            I(Math.max(o, s - Re));
        }
    }), [ w, C, ee, e.listTokens?.font, e.displayIconOnly, e.displaySecondaryText, e.style?.minWidth, e.displayListItemIcon, J, i.spacing.core.xl, we, l ]);
    const [Oe] = kN((() => Ne()));
    a((() => {
        if (w) {
            const e = window.getComputedStyle(H.current).maxWidth;
            if (e.indexOf("%") > -1 && H.current?.parentElement) Oe(H.current?.parentElement);
        }
        return () => {
            Oe(null);
        };
    }), [ w, Oe ]);
    a(Ne, [ Ne ]);
    const Pe = () => {
        if (!e.required || !qI(e.status)) return e.status;
        if (e.disabled || e.readOnly) return "none";
        const t = !L && (O && ae === 0 || !O && ae === -1) || e.hasInput && ae === -1 && e.value === "" && (!R || R && !A);
        return t ? "alert" : "none";
    };
    const Be = Pe();
    g(e.selectAPIRef, (() => ({
        resetRequiredTrigger: () => T(e.required)
    })));
    const ze = qI(e.message) && e.required && Be === "alert" ? o("required.msg") : e.message;
    const Fe = () => {
        D(true);
    };
    const je = XA();
    let Ve, He;
    {
        const t = JI((() => {
            if (!d.current) return;
            pe(!z?.(ae));
            k(false);
            T(false);
        }));
        Ve = () => {
            if (Be && ze) je?.notify(ze);
            t.onBlur();
            if (e.hasInput) {
                M(false);
            }
        };
        He = () => {
            t.onFocus();
            k(true);
            if (e.hasInput) {
                M(false);
            }
        };
    }
    const Ue = () => D(false);
    const Ge = w ? e.style?.maxWidth ?? "25rem" : undefined;
    const Ke = r((() => Z ? parseInt(_e?.render({}, undefined).props.width ?? 0) : 0), [ Z, _e ]);
    const We = {
        ...I_({
            "max-width": Ge,
            "icon-width": `${Ke}px`,
            "font-size-m": i.fontNova.size.m,
            ..._G(i, Be)
        }, "dropdown"),
        ...I_({
            "squish-s": i.spacing.insetSquish.s.padding
        }, "dropdown-spacing")
    };
    const $e = !qI(ce) && e.isOpen ? ce : undefined;
    const Ye = (Be === "warning" || Be === "alert") && !!ze;
    const qe = () => {
        const t = [];
        if (Ye) {
            t.push(K);
        }
        if (Array.isArray(e.ariaDescribedBy)) {
            e.ariaDescribedBy.length && t.push(...e.ariaDescribedBy);
        } else if (!qI(e.ariaDescribedBy)) {
            t.push(e.ariaDescribedBy);
        }
        return t;
    };
    const {setIsOpen: Xe} = e;
    const Ze = s((() => Xe?.(false)), [ Xe ]);
    const Je = {
        closed: {
            opacity: 0
        },
        open: {
            opacity: 1,
            transition: {
                type: "tween",
                duration: .3,
                ease: [ .5, 0, .8, 1 ]
            }
        },
        exit: {
            opacity: 0,
            transition: {
                type: "tween",
                duration: .25,
                ease: [ 0, .5, .2, 1 ]
            }
        }
    };
    return t("div", {
        className: ke(SG.container, e.className),
        style: {
            ...We,
            ...e.style
        },
        ref: H,
        onKeyDown: ye,
        onMouseEnter: Fe,
        onMouseLeave: Ue,
        onBlur: Ve,
        onFocus: He,
        onContextMenu: e => e.preventDefault()
    }, pD(e.renderSelectBox, dG, {
        innerRef: t => {
            j.current = t;
            D_(e.selectBoxRef, t);
        },
        textRef: V,
        testId: e.testId,
        listId: W,
        isPlaceholder: Se,
        label: Ie,
        onPress: ee <= 0 || e.disabled || e.readOnly ? undefined : ge,
        isOpen: e.isOpen,
        disabled: e.disabled,
        hasFocus: R,
        status: Be,
        required: e.required,
        focusable: S,
        ariaActiveDescendant: $e,
        ariaLabel: e.ariaLabel,
        ariaLabelledBy: e.ariaLabelledBy,
        ariaDescribedBy: qe(),
        icon: _e,
        iconAriaLabel: De,
        iconTooltip: Le,
        iconAriaHidden: Te,
        ...e.selectTokens,
        selectedIndex: ne,
        focusedIndex: ae,
        setFocusedIndex: re,
        tooltip: e.tooltip ?? Q(ae)?.tooltip ?? "",
        readOnly: e.readOnly,
        futureTheme: e.futureTheme
    }), t(sV, {
        listId: W,
        isOpen: e.isOpen,
        focusedIndex: ae,
        focusedItemRef: G,
        showSelectedPseudoFocus: e.showSelectedPseudoFocus,
        referenceElementRef: j,
        items: X,
        virtualItems: ie,
        ref: e => {
            U.current = e;
            if (e && ue.current) {
                me();
                ue.current = false;
            }
        },
        testId: e.testId,
        popoverTokens: e.popoverTokens,
        className: e.popoverClassName,
        style: {
            "--focus-light-bg": `${i.tokensExperimental["color-action-background-focus"]} ${i.tokensExperimental["style-action-border-focus"]} ${i.tokensExperimental["size-action-border-width-focus"]}`,
            "--focus-dark-bg": `${i.tokensExperimental["color-action-background-focus-inverse"]} ${i.tokensExperimental["style-action-border-focus"]} ${i.tokensExperimental["size-action-border-width-focus"]}`,
            maxWidth: "25rem",
            ...e.popoverStyles
        },
        listTokens: e.listTokens,
        listItemTokens: e.listItemTokens,
        ariaLabelledBy: e.ariaLabelledBy,
        ariaLabel: e.ariaLabel,
        onSelected: ({index: t}) => {
            if (z?.(t)) return;
            F(t);
            e.setIsOpen?.(false);
            j.current?.focus();
            if (!ie) de.current = U.current?.scrollTop || 0;
        },
        displayListItemIcon: Z,
        onClose: Ze,
        focusLockProps: {
            disabled: true
        },
        isItemDisabled: z,
        disableContextMenu: true,
        animation: {
            variants: Je,
            ...e.animation
        }
    }), Ye ? t("span", {
        "aria-live": "polite",
        role: "status",
        className: SG.offscreen,
        id: K
    }, ze) : null, e.isOpen || !R && !_ || !Ye ? null : t(zO, {
        hideArrow: true,
        referenceElementRef: H,
        className: SG.message,
        style: We,
        placement: "bottom-start",
        focusLockProps: {
            disabled: true
        },
        animation: {
            variants: Je,
            ...e.animation
        }
    }, t("span", null, ze)));
};

const _G = (e, t) => {
    const o = {
        "message-bd": e.themeVariant === "high-contrast" ? `1px solid ${e.c.colorUiBorder}` : "none"
    };
    switch (t) {
      case "alert":
        return {
            ...o,
            "message-bg": e.stateStatusPadBoxNova.alert.bg,
            "message-fg": e.stateStatusPadBoxNova.alert.fg
        };

      case "warning":
        return {
            ...o,
            "message-bg": e.stateStatusPadBoxNova.warning.bg,
            "message-fg": e.stateStatusPadBoxNova.warning.fg
        };

      default:
        return {};
    }
};

const DG = e => {
    const [o, a] = n(false);
    const [r, s] = n(e.selectedIndex);
    const [i, l] = n(e.selectedIndex);
    if (i !== e.selectedIndex) {
        s(e.selectedIndex);
        l(e.selectedIndex);
    }
    return t(IG, Ee({}, e, {
        isOpen: o,
        setIsOpen: a,
        focusedIndex: r,
        setFocusedIndex: s,
        showSelectedPseudoFocus: true,
        listTokens: {
            ...e.listTokens
        }
    }));
};

var LG = "sas_components-Calendar-Calendar_container";

var TG = "sas_components-Calendar-Calendar_header-month-year-container";

var RG = "sas_components-Calendar-Calendar_header";

var kG = "sas_components-Calendar-Calendar_header-year-input";

var AG = "sas_components-Calendar-Calendar_header-month-button";

var MG = "sas_components-Calendar-Calendar_calendar";

var NG = "sas_components-Calendar-Calendar_month-row";

var OG = "sas_components-Calendar-Calendar_weekday-header";

var PG = "sas_components-Calendar-Calendar_with-week-numbers";

var BG = "sas_components-Calendar-Calendar_legend-special-day";

var zG = "sas_components-Calendar-Calendar_legend-disabled";

var FG = "sas_components-Calendar-Calendar_legend-selected";

var jG = "sas_components-Calendar-Calendar_legend-today";

var VG = "sas_components-Calendar-Calendar_legend-non-work-day";

var HG = "sas_components-Calendar-Calendar_special-day";

var UG = "sas_components-Calendar-Calendar_non-work-day";

var GG = "sas_components-Calendar-Calendar_week-number-cell";

var KG = "sas_components-Calendar-Calendar_weekday-header-cell";

var WG = "sas_components-Calendar-Calendar_day-cell";

var $G = "sas_components-Calendar-Calendar_day-cell-focused";

var YG = "sas_components-Calendar-Calendar_day-cell-today";

var qG = "sas_components-Calendar-Calendar_day-cell-external";

var XG = "sas_components-Calendar-Calendar_day-cell-selected";

var ZG = "sas_components-Calendar-Calendar_day-cell-interval";

var JG = "sas_components-Calendar-Calendar_day-cell-disabled";

var QG = "sas_components-Calendar-Calendar_day-cell-content";

var eK = "sas_components-Calendar-Calendar_selected";

var tK = "sas_components-Calendar-Calendar_legend";

var oK = "sas_components-Calendar-Calendar_legend-item";

var nK = "sas_components-Calendar-Calendar_legend-spacer";

var aK = "sas_components-Calendar-Calendar_legend-square";

var rK = "sas_components-Calendar-Calendar_legend-text";

var sK = "sas_components-Calendar-Calendar_today-button";

var iK = "sas_components-Calendar-Calendar_today-button-footer";

var lK = {
    container: LG,
    headerMonthYearContainer: TG,
    header: RG,
    headerYearInput: kG,
    headerMonthButton: AG,
    calendar: MG,
    monthRow: NG,
    weekdayHeader: OG,
    withWeekNumbers: PG,
    legendSpecialDay: BG,
    legendDisabled: zG,
    legendSelected: FG,
    legendToday: jG,
    legendNonWorkDay: VG,
    specialDay: HG,
    nonWorkDay: UG,
    weekNumberCell: GG,
    weekdayHeaderCell: KG,
    dayCell: WG,
    dayCellFocused: $G,
    dayCellToday: YG,
    dayCellExternal: qG,
    dayCellSelected: XG,
    dayCellInterval: ZG,
    dayCellDisabled: JG,
    dayCellContent: QG,
    selected: eK,
    legend: tK,
    legendItem: oK,
    legendSpacer: nK,
    legendSquare: aK,
    legendText: rK,
    todayButton: sK,
    todayButtonFooter: iK
};

const cK = fb(pt);

const dK = u((function e(o, n) {
    const a = cK();
    const r = jV();
    const {refs: i, createSetRef: l} = uU();
    const d = c(null);
    const u = new Intl.DateTimeFormat(r, {
        day: "numeric"
    }).format(new Date(2022, 0, 4));
    const m = e => {
        p(e);
    };
    const p = s((e => {
        d.current = i[e];
        const t = d.current;
        if (!t) {
            return;
        }
        const o = t?.innerText;
        if (o?.length && UA(t, o)) {
            t.setAttribute("title", o);
        } else {
            t.removeAttribute("title");
        }
    }), [ i ]);
    const f = (e, n, a, r) => t("div", {
        key: e,
        className: ke(lK.legendItem),
        "aria-hidden": "true"
    }, r === "specialDay" ? t("div", {
        "data-testid": gb(o.testId, `${r}-legendSquare`),
        className: ke(lK.legendSquare),
        "aria-hidden": "true"
    }, t("div", {
        "data-testid": gb(o.testId, `${r}-legendSquare`),
        className: ke(n),
        "aria-hidden": "true"
    }, u)) : t("div", {
        "data-testid": gb(o.testId, `${r}-legendSquare`),
        className: ke(lK.legendSquare, n),
        "aria-hidden": "true"
    }, u), t("div", {
        ref: l(e),
        "data-testid": gb(o.testId, `${r}-legendText`),
        className: ke(lK.legendText),
        "aria-hidden": "true",
        onMouseEnter: () => m(e)
    }, a));
    const g = e => {
        switch (e) {
          case "Selected":
            return f(1, [ lK.legendSelected ], a("selected.label"), "selected");

          case "NonWorkday":
            return f(2, [ lK.legendNonWorkDay ], o.nonWorkDayLegendText ?? a("weekend.label"), "weekend");

          case "NotAvailable":
            return f(3, [ lK.legendDisabled, lK.dayCellDisabled ], a("notAvailable.label"), "notAvailable");

          case "SpecialDay":
            return f(4, [ lK.legendSpecialDay ], o.specialDayLegendText ?? a("specialDay.label"), "specialDay");

          default:
            return f(0, [ lK.legendToday ], a("today.label"), "today");
        }
    };
    const h = e => t(iN, {
        spacing: "xxs",
        orientation: "vertical",
        ref: n
    }, t(iN, {
        spacing: "m",
        orientation: "horizontal"
    }, e.slice(0, 2).map((e => g(e)))), e.length > 2 ? t(iN, {
        spacing: "m",
        orientation: "horizontal"
    }, e.slice(2, 4).map((e => g(e)))) : null, e.length === 5 ? t(iN, {
        spacing: "m",
        orientation: "horizontal"
    }, e.slice(4).map((e => g(e)))) : null);
    const b = () => {
        if (!o.legendItems) return;
        const e = [];
        if (o.legendItems.find((e => e === "Today"))) e.push("Today");
        if (o.legendItems.find((e => e === "Selected"))) e.push("Selected");
        if (o.legendItems.find((e => e === "NonWorkday"))) e.push("NonWorkday");
        if (o.legendItems.find((e => e === "NotAvailable"))) e.push("NotAvailable");
        if (o.legendItems.find((e => e === "SpecialDay"))) e.push("SpecialDay");
        return h(e);
    };
    const v = () => {
        const e = [ "Today", "Selected", "NonWorkday", "NotAvailable", "SpecialDay" ];
        return h(e);
    };
    return t("div", {
        className: lK.legend
    }, o.legendItems === undefined || o.legendItems.length === 0 || o.legendItems.length === 5 ? v() : o.legendItems.length > 0 ? b() : null);
}));

const uK = fb(pt);

const mK = {
    selectedDate: null,
    selectedText: ""
};

const pK = () => {
    const e = uK();
    const t = c(mK);
    const o = (t, o) => {
        const n = e(o, {
            date: t.toLocaleDateString(undefined, {
                year: "numeric",
                month: "long",
                day: "numeric"
            })
        });
        return n;
    };
    const n = (e, n) => {
        const a = n ? o(e, "notselected.date.aria") : o(e, "select.date.aria");
        t.current = {
            selectedDate: e,
            selectedText: a
        };
    };
    const a = () => {
        t.current = mK;
    };
    return {
        ariaSelectedDate: t.current.selectedDate,
        ariaSelectedText: t.current.selectedText,
        resetAllAriaSelected: a,
        handleAriaDateSelection: n
    };
};

const fK = MA("calendar");

const gK = MA("Calendar-selection");

const hK = MA("Calendar-selection-state");

const bK = MA("Calendar-interval-start");

const vK = MA("Calendar-interval-end");

const yK = MA("Calendar-select");

const xK = MA("Calendar-today");

const SK = MA("Calendar-special-day");

const wK = MA("Calendar-non-workday");

const CK = fb(pt);

const EK = Dh("Calendar");

const IK = new Date(1582, 0, 1);

const _K = new Date(9999, 11, 31);

let DK;

let LK;

const TK = u((function e({onChange: o, intervalSelection: i, ...l}, d) {
    const u = kW({
        type: "dayOnly"
    });
    const p = kW({
        type: "monthOnly"
    });
    const f = s(((e, t) => {
        if (parseInt(u(e)) > 7 && t === 0) return false;
        if (parseInt(u(e)) <= 7 && t >= 4) return false;
        return true;
    }), [ u ]);
    const g = CK();
    const h = jV();
    const b = r((() => new Date), []);
    const v = fK(7);
    const y = ay();
    const x = YI();
    const S = l.singleSelection ?? true;
    const [w, C] = n(l.dateRange);
    const [E, I] = n(l.dateRange ? l.dateRange : []);
    const [_, D] = n([]);
    const L = l.nonWorkDays ?? [ 0, 6 ];
    DK = l.minDate && GV(l.minDate, {
        today: IK
    }) && (UV(l.minDate, {
        today: _K
    }) || MU(l.minDate, _K)) ? new Date(l.minDate) : new Date(IK);
    DK.setHours(0, 0, 0, 0);
    LK = l.maxDate && (GV(l.maxDate, {
        today: IK
    }) || MU(l.maxDate, IK)) && UV(l.maxDate, {
        today: _K
    }) ? new Date(l.maxDate) : new Date(_K);
    LK.setHours(23, 59, 59);
    if (l.minDate && l.maxDate && l.minDate.getTime() > l.maxDate.getTime()) {
        EK.warn("minDate > MaxDate -> dates switched");
        const e = new Date(l.minDate.getTime());
        const t = new Date(l.maxDate.getTime());
        DK = new Date(t.getTime());
        LK = new Date(e.getTime());
    }
    let T = l.value ?? new Date;
    if (l.minDate && T.getTime() < l.minDate.getTime()) {
        T = new Date(l.minDate);
    } else if (l.maxDate && T.getTime() > l.maxDate.getTime()) {
        T = new Date(l.maxDate);
    }
    a((() => {
        if (l.value && (l.minDate || l.maxDate) && !MU(l.value, T)) {
            o?.({
                value: T
            });
        }
    }), []);
    const R = e => UV(e, {
        today: DK
    });
    const k = e => GV(e, {
        today: LK
    });
    const A = e => {
        if (!l.showNonWorkDays) {
            return false;
        }
        return L.some((t => e.getDay() === t));
    };
    const M = e => {
        if (!l.specialDates) {
            return false;
        }
        const t = t => {
            if (t.startDate && t.endDate) {
                const o = t.startDate;
                const n = t.endDate;
                if (o && e.getTime() >= o.getTime() && n && e.getTime() <= n.getTime()) {
                    return true;
                }
            } else {
                const o = t.startDate;
                return o && MU(o, e);
            }
            return false;
        };
        return l.specialDates.dateRange.some((e => t(e)));
    };
    const N = r((() => {
        if (!l.disabledDays) {
            return undefined;
        } else if (typeof l.disabledDays === "function") {
            return l.disabledDays;
        } else {
            return WV(l.disabledDays);
        }
    }), [ l.disabledDays ]);
    const O = s((e => {
        let t = false;
        if (R(e) || k(e)) t = true;
        if (!t && l.disabledDates) {
            t = l.disabledDates.some((t => MU(t, e)));
        }
        if (!t && l.enabledDates) {
            t = l.enabledDates.every((t => !MU(t, e)));
        }
        if (!t && N) {
            t = N(e, {
                today: b
            });
        }
        return t;
    }), [ N, l.disabledDates, l.enabledDates, b ]);
    const P = e => {
        if (!R(e) && !k(e)) {
            if (x.current && S && !i && _.length > 0) return true;
        }
        return false;
    };
    const [B, z] = n(l.value ?? new Date);
    const [F, j] = n(false);
    const [V, H] = m(((e, t) => {
        switch (t.type) {
          case "step":
            {
                const n = new Date(e);
                n.setHours(0, 0, 0);
                let a = 0;
                if (t.direction === "up") {
                    a = -7;
                } else if (t.direction === "down") {
                    a = 7;
                } else if (t.direction === "left") {
                    a = y ? 1 : -1;
                } else if (t.direction === "right") {
                    a = y ? -1 : 1;
                } else if (t.direction === "startOfWeek") {
                    a = n.getDay() * -1;
                } else if (t.direction === "endOfWeek") {
                    a = 6 - n.getDay();
                }
                n.setDate(n.getDate() + a);
                if (n.getTime() < DK.getTime() || n.getTime() > LK.getTime()) {
                    return new Date(e);
                }
                if (n.getMonth() !== e.getMonth()) {
                    const e = new Date(n.getFullYear(), n.getMonth(), B.getDate());
                    if (e.getMonth() !== n.getMonth()) {
                        while (e.getMonth() !== n.getMonth()) e.setDate(e.getDate() - 1);
                    }
                    if (P(e)) {
                        o?.({
                            value: e
                        });
                    }
                }
                return n;
            }

          case "monthStep":
            {
                const n = new Date(e);
                n.setHours(0, 0, 0);
                if (t.direction === "next") {
                    const e = new Date(n.getFullYear(), n.getMonth() + 2, 0).getDate();
                    if (n.getDate() > e) n.setDate(e);
                    n.setMonth(n.getMonth() + 1);
                } else if (t.direction === "previous") {
                    const e = new Date(n.getFullYear(), n.getMonth(), 0).getDate();
                    if (n.getDate() > e) n.setDate(e);
                    n.setMonth(n.getMonth() - 1);
                }
                const a = new Date(n.getFullYear(), n.getMonth() + 1, 0).getDate();
                const r = new Date(n);
                if (O(r)) {
                    while (O(r) && r.getDate() !== 1) {
                        r.setDate(r.getDate() - 1);
                        if (!O(r)) n.setDate(r.getDate());
                    }
                    if (O(r)) {
                        while (O(r) && r.getDate() < a) {
                            r.setDate(r.getDate() + 1);
                            if (!O(r)) n.setDate(r.getDate());
                        }
                    }
                }
                if (n.getTime() < DK.getTime() || n.getTime() > LK.getTime()) {
                    return new Date(e);
                }
                const s = new Date(n.getFullYear(), n.getMonth(), r.getDate());
                if (s.getMonth() !== n.getMonth()) {
                    while (s.getMonth() !== n.getMonth()) s.setDate(s.getDate() - 1);
                }
                if (P(s)) {
                    o?.({
                        value: s
                    });
                }
                return n;
            }

          case "yearStep":
            {
                const n = new Date(e);
                n.setHours(0, 0, 0);
                if (t.direction === "next") {
                    n.setFullYear(n.getFullYear() + 1);
                } else if (t.direction === "previous") {
                    n.setFullYear(n.getFullYear() - 1);
                }
                if (n.getTime() < DK.getTime() || n.getTime() > LK.getTime()) {
                    return new Date(e);
                }
                const a = new Date(n.getFullYear(), n.getMonth(), B.getDate());
                if (a.getMonth() !== n.getMonth()) {
                    while (a.getMonth() !== n.getMonth()) a.setDate(a.getDate() - 1);
                }
                if (P(a)) {
                    o?.({
                        value: a
                    });
                }
                return n;
            }

          case "decadeStep":
            {
                const n = new Date(e);
                n.setHours(0, 0, 0);
                if (t.direction === "next") {
                    n.setFullYear(n.getFullYear() + 10);
                } else if (t.direction === "previous") {
                    n.setFullYear(n.getFullYear() - 10);
                }
                if (n.getTime() < DK.getTime() || n.getTime() > LK.getTime()) {
                    return new Date(e);
                }
                const a = new Date(n.getFullYear(), n.getMonth(), B.getDate());
                if (a.getMonth() !== n.getMonth()) {
                    while (a.getMonth() !== n.getMonth()) a.setDate(a.getDate() - 1);
                }
                if (P(a)) {
                    o?.({
                        value: a
                    });
                }
                return n;
            }

          case "monthSelect":
            let n = t.value.year;
            if (uh(h)) n = OU(n);
            const a = new Date(n, t.value.month + 1, 0).getDate();
            let r;
            if (e.getDate() > a) {
                r = new Date(n, t.value.month, a);
            } else r = new Date(n, t.value.month, e.getDate());
            const s = new Date(r);
            if (O(s)) {
                while (O(s) && s.getDate() !== 1) {
                    s.setDate(s.getDate() - 1);
                    if (!O(s)) r.setDate(s.getDate());
                }
                if (O(s)) {
                    while (O(s) && s.getDate() < a) {
                        s.setDate(s.getDate() + 1);
                        if (!O(s)) r.setDate(s.getDate());
                    }
                }
            }
            const i = new Date(r.getFullYear(), r.getMonth(), r.getDate());
            if (i.getMonth() !== r.getMonth()) {
                while (i.getMonth() !== r.getMonth()) i.setDate(i.getDate() - 1);
            }
            if (P(i)) {
                if (mh(h) && typeof t.value.day === "number") i.setDate(t.value.day);
                setTimeout((() => {
                    o?.({
                        value: i
                    });
                }), 0);
            }
            if (mh(h) && typeof t.value.day === "number") r.setDate(t.value.day);
            return r;

          case "selection":
            return t.value;

          default:
            return e;
        }
    }), T);
    const U = r((() => hU(V.getMonth(), V.getFullYear(), h)), [ V, h ]);
    const G = r((() => {
        if (!mh(h)) return U;
        const e = U.findIndex((e => e.find((e => {
            const t = e.getDate() === V.getDate() && e.getMonth() === V.getMonth();
            return t;
        }))));
        let t = 0;
        const o = parseInt(u(V));
        if (o >= 1 && o <= 7) {
            const o = U[e].find((e => parseInt(u(e)) === 1));
            if (o) {
                t = e;
            } else {
                t = e - 1;
            }
        } else {
            for (let o = e - 1; o >= e - 5; o--) {
                const e = U[o].find((e => parseInt(u(e)) === 1));
                if (e) {
                    t = o;
                    break;
                }
            }
        }
        let n = t + 5;
        for (let e = n; e >= n - 1; e--) {
            const t = U[e]?.findIndex((e => parseInt(u(e)) === 1));
            if (t >= 0) {
                n = t === 0 ? e - 1 : e;
                break;
            }
        }
        const a = U.filter(((e, o) => o >= t && o <= n));
        return a;
    }), [ V, u, U, h ]);
    const K = fK(U.length);
    const {refs: W, createSetRef: $} = uU();
    const Y = c(null);
    const q = c(null);
    const [X, Z] = n(false);
    {
        const e = c(V);
        a((() => {
            if (!F && (e.current === V || !X)) {
                return;
            }
            e.current = V;
            function t(e) {
                for (let t = 0; t < G.length * 7; ++t) {
                    const o = G[Math.floor(t / 7)][t % 7];
                    if (MU(o, e)) {
                        return W[t];
                    }
                }
            }
            t(V)?.focus();
            j(false);
        }), [ V, W, G, X, d, F ]);
    }
    const J = r((() => l.showWeekNumbers ? bU(V.getFullYear(), V.getMonth()) : NaN), [ V, l.showWeekNumbers ]);
    const Q = (e, t, o) => {
        const n = 1 + (e - 1) * 7;
        const a = new Date(o, 0, n);
        const r = a.getDate() - a.getDay();
        const s = r + 6;
        const i = new Date(a.setDate(s));
        if (t === 11 && i.getMonth() === 0) return 1;
        return e;
    };
    const [ee, te] = n(undefined);
    const oe = s((e => {
        if (_ && _.length > 0) {
            const t = _[0]?.startDate;
            const o = _[0]?.endDate;
            if (S && i && t && e.getTime() >= t.getTime() && o && e.getTime() <= o.getTime()) {
                return true;
            }
            if (!S && !i) {
                return _.some((t => t.startDate && MU(t.startDate, e)));
            }
        }
        if (E) {
            const t = E[0]?.startDate;
            const o = E[0]?.endDate;
            if (S && i && t && e.getTime() >= t.getTime() && o && e.getTime() <= o.getTime()) {
                return true;
            }
            if (!S && !i) {
                return E.some((t => t.startDate && MU(t.startDate, e)));
            }
        }
        return false;
    }), [ E, i, _, S ]);
    const ne = () => {
        if (_ && _[0]?.startDate && _[0]?.endDate) return true;
        if (E && E[0]?.startDate && E[0]?.endDate) return true;
        return false;
    };
    const ae = e => {
        if (_ && _[0]?.startDate && _[0]?.endDate) {
            const t = _[0]?.startDate;
            const o = _[0]?.endDate;
            if (e.getTime() > t.getTime() && o && e.getTime() < o.getTime()) {
                return true;
            }
        }
        if (E) {
            const t = E[0]?.startDate;
            const o = E[0]?.endDate;
            if (t && o && e.getTime() > t.getTime() && o && e.getTime() < o.getTime()) {
                return true;
            }
        }
        return false;
    };
    const {ariaSelectedText: re, ariaSelectedDate: se, handleAriaDateSelection: ie, resetAllAriaSelected: le} = pK();
    const ce = s((e => {
        if (O(e)) return;
        const t = new Date(e);
        t.setHours(0, 0, 0, 0);
        const n = oe(t);
        const a = [];
        I([]);
        if (!i) {
            ie(e, n);
        }
        if (S) {
            if (i) {
                if (_[0]?.startDate && !_[0]?.endDate) {
                    if (t.getTime() < _[0].startDate.getTime()) {
                        a.push({
                            startDate: t,
                            endDate: _[0].startDate
                        });
                        D(a);
                    } else if (t.getTime() >= _[0].startDate.getTime()) {
                        a.push({
                            startDate: _[0].startDate,
                            endDate: t
                        });
                        D(a);
                    }
                } else {
                    a.push({
                        startDate: t,
                        endDate: undefined
                    });
                    D(a);
                }
                o?.({
                    value: new Date(e),
                    dateRange: a
                });
            } else {
                _.length = 0;
                _.push({
                    startDate: t,
                    endDate: undefined
                });
                o?.({
                    value: new Date(e)
                });
            }
        } else {
            if (n) {
                const e = _?.findIndex((e => e.startDate && MU(e.startDate, t)));
                if (e >= 0) {
                    _?.splice(e, 1);
                    o?.({
                        value: null,
                        dateRange: _
                    });
                }
            } else {
                _.push({
                    startDate: t,
                    endDate: undefined
                });
                o?.({
                    value: new Date(t),
                    dateRange: _
                });
            }
        }
    }), [ i, O, oe, o, _, S, ie ]);
    const de = s((e => {
        if (O(e)) return;
        H({
            type: "selection",
            value: e
        });
        z(new Date(e));
        ce(e);
    }), [ ce, O ]);
    const ue = e => {
        j(true);
        Z(true);
        H({
            type: "selection",
            value: e
        });
        if (!O(e)) {
            z(new Date(e));
            ce(e);
        }
        l.onTodayButtonPress?.(e);
        setTimeout((() => q.current?.reset()), 0);
    };
    const me = C_();
    const pe = MK(me, {
        showTodayButton: l.showTodayButton,
        showLegend: l.showLegend,
        formatedCalendar: G
    });
    const fe = c(null);
    const ge = gK();
    const he = hK();
    const be = bK();
    const ve = vK();
    const ye = yK();
    const xe = e => {
        const t = [];
        if (i) {
            const o = _[0]?.startDate;
            const n = _[0]?.endDate;
            if (o && n && (MU(e, o) || MU(e, n))) {
                t.push(ve);
            }
            if (o && !n && MU(e, o)) {
                t.push(be);
            }
        }
        if (!i && se && MU(e, se)) {
            t.push(ye);
        }
        return t.join(" ");
    };
    const Se = () => {
        const e = [];
        if (_ && _.length > 0) {
            e.push(he);
        }
        e.push(ge);
        return e.join(" ");
    };
    const we = s((() => {
        if (i) {
            const e = _[0]?.startDate;
            const t = _[0]?.endDate;
            if (!e || !t) return "";
            return g("interval.endDate.aria", {
                startDate: e.toLocaleDateString(undefined, {
                    year: "numeric",
                    month: "long",
                    day: "numeric"
                }) ?? "",
                endDate: t.toLocaleDateString(undefined, {
                    year: "numeric",
                    month: "long",
                    day: "numeric"
                }) ?? ""
            });
        } else if (!S) {
            const e = [];
            if (_ && _.length > 0) {
                const t = [ ..._ ];
                t.sort(((e, t) => {
                    const o = e.startDate?.getTime() ?? 0;
                    const n = t.startDate?.getTime() ?? 0;
                    return o < n ? -1 : o > n ? 1 : 0;
                }));
                t.forEach((t => e.push(t.startDate?.toLocaleDateString(undefined, {
                    year: "numeric",
                    month: "long",
                    day: "numeric"
                }))));
                return g("multipleSelectState.aria", {
                    dates: e?.join(", ")
                });
            } else {
                return "";
            }
        } else {
            if (_ && _.length > 0) {
                return g("singleSelectState.aria", {
                    date: _[0]?.startDate?.toLocaleDateString(undefined, {
                        year: "numeric",
                        month: "long",
                        day: "numeric"
                    }) ?? ""
                });
            } else {
                return "";
            }
        }
    }), [ i, g, _, S ]);
    a((() => {
        if (S && i && l.dateRange) {
            if (w && w.length > 0 && l.dateRange[0].startDate && w[0].startDate && l.dateRange[0].endDate && w[0].endDate && (!MU(l.dateRange[0].startDate, w[0].startDate) || !MU(l.dateRange[0].endDate, w[0].endDate))) {
                D([]);
                I(l.dateRange);
                C(l.dateRange);
            } else {
                if (_.length === 0) {
                    _.push({
                        startDate: l.dateRange[0].startDate,
                        endDate: l.dateRange[0].endDate
                    });
                }
            }
        }
    }), [ i, w, l.dateRange, _, S ]);
    a((() => {
        if (l.value && !i && _ && _.length === 0) {
            D([ {
                startDate: l.value,
                endDate: undefined
            } ]);
        }
    }), [ i, l.value, _ ]);
    const Ce = jD(L_.FOCUS_OVERRIDE) === "true";
    return t("div", {
        ref: fe,
        "data-testid": l.testId,
        className: lK.container,
        style: pe,
        role: "group",
        "aria-label": l.ariaLabel ?? g("calendar.aria"),
        "aria-labelledby": l.ariaLabelledBy,
        onKeyDown: e => {
            if (e.key === "Enter") {
                PA(e);
            }
        },
        onMouseDown: e => {
            if (e.button === 2) {
                e.preventDefault();
            }
        }
    }, i && t("div", null, t(bO, {
        id: be,
        testId: gb(l.testId, "-interval-start")
    }, g("interval.startDate.aria", {
        startDate: _[0]?.startDate?.toLocaleDateString(undefined, {
            year: "numeric",
            month: "long",
            day: "numeric"
        }) ?? ""
    })), t(bO, {
        id: ve,
        testId: gb(l.testId, "-interval-end")
    }, g("interval.endDate.aria", {
        startDate: _[0]?.startDate?.toLocaleDateString(undefined, {
            year: "numeric",
            month: "long",
            day: "numeric"
        }) ?? "",
        endDate: _[0]?.endDate?.toLocaleDateString(undefined, {
            year: "numeric",
            month: "long",
            day: "numeric"
        }) ?? ""
    }))), t("div", {
        role: "grid",
        ref: Y,
        className: lK.calendar,
        "aria-label": g("calendar.aria"),
        "aria-describedby": Se(),
        onFocusCapture: () => {
            te((e => e === undefined || Ce ? true : e));
            Z(true);
        },
        onBlurCapture: e => {
            if (!e.currentTarget.contains(e.relatedTarget)) {
                te(undefined);
                Z(false);
            }
        },
        onMouseDown: () => {
            te(Ce ? true : false);
        },
        onKeyDown: () => {
            te(true);
        }
    }, t(bO, {
        id: he,
        testId: gb(l.testId, "-selection-state")
    }, we()), t(bO, {
        id: ge
    }, g(i ? "intervalSelect.msg" : !S ? "multiSelect.msg" : "singleSelect.msg")), !i && re ? t(bO, {
        testId: gb(l.testId, "-selected-text-description"),
        id: ye
    }, re) : null, t("div", {
        role: "row",
        className: ke(lK.weekdayHeader, l.showWeekNumbers && lK.withWeekNumbers)
    }, t(kK, {
        dayOfWeekIds: v,
        showWeekNumbers: l.showWeekNumbers
    })), G.map(((e, o) => t("div", {
        key: o,
        role: "row",
        className: ke(lK.monthRow, l.showWeekNumbers && lK.withWeekNumbers),
        onKeyDown: e => {
            switch (e.key) {
              case "ArrowDown":
                H({
                    type: "step",
                    direction: "down"
                });
                break;

              case "ArrowUp":
                H({
                    type: "step",
                    direction: "up"
                });
                break;

              case "ArrowLeft":
                H({
                    type: "step",
                    direction: "left"
                });
                break;

              case "ArrowRight":
                H({
                    type: "step",
                    direction: "right"
                });
                break;

              case "Home":
                H({
                    type: "step",
                    direction: "startOfWeek"
                });
                break;

              case "End":
                H({
                    type: "step",
                    direction: "endOfWeek"
                });
                break;

              case "PageUp":
                if (e.shiftKey && e.ctrlKey) H({
                    type: "decadeStep",
                    direction: "previous"
                }); else if (e.shiftKey) H({
                    type: "yearStep",
                    direction: "previous"
                }); else H({
                    type: "monthStep",
                    direction: "previous"
                });
                break;

              case "PageDown":
                if (e.shiftKey && e.ctrlKey) H({
                    type: "decadeStep",
                    direction: "next"
                }); else if (e.shiftKey) H({
                    type: "yearStep",
                    direction: "next"
                }); else H({
                    type: "monthStep",
                    direction: "next"
                });
                break;

              case "Enter":
              case " ":
                const t = new Date(V);
                if (R(t) || k(t)) return;
                z(t);
                ce(t);
                break;
            }
        }
    }, l.showWeekNumbers && t("div", {
        id: `${K[o]}`,
        role: "rowheader",
        "aria-label": g("week.aria", {
            weekNumber: String(Q(J + o, V.getMonth(), V.getFullYear()))
        }),
        className: lK.weekNumberCell
    }, Q(J + o, V.getMonth(), V.getFullYear())), e.map(((e, n) => t(AK, {
        testId: `calendarDay(${e.getMonth()}/${e.getDate()}/${e.getFullYear()})`,
        key: n,
        ref: e => {
            D_($(o * 7 + n), e);
        },
        day: e,
        today: MU(e, b),
        selected: S && i && ne() || !S && _.length > 0 ? oe(e) : l.value ? S && (MU(e, l.value) || MU(e, T)) : false,
        inInterval: S && i && ne() ? ae(e) : false,
        focused: MU(e, V),
        focusVisible: MU(e, V) && !!ee,
        disabled: O(e),
        inCurrentMonth: mh(h) ? f(e, o) : e.getMonth() === V.getMonth(),
        ariaLabel: e.toLocaleDateString(undefined, {
            year: "numeric",
            month: "long",
            day: "numeric"
        }),
        ariaDescribedBy: xe(e),
        onPress: de,
        onBlur: () => {
            le();
        },
        nonWorkDay: A(e),
        specialDay: M(e),
        nonWorkDayAriaLabel: l.nonWorkDayLegendText,
        specialDayAriaLabel: l.specialDates?.legendText,
        intervalSelection: i,
        singleSelection: S
    }, mh(h) ? u(e) : e.getDate()))))))), l.showTodayButton ? t("div", {
        className: lK.todayButtonFooter
    }, t(QM, {
        variant: oN.Small,
        text: g("today.label"),
        onPress: () => {
            ue(b);
        },
        ariaLabel: g("today.label"),
        testId: gb(l.testId, "todayButton"),
        className: lK.todayButton
    })) : null, t(RK, {
        ref: e => {
            D_(d, e);
            D_(q, e);
        },
        month: V.getMonth(),
        focusDate: V.getDate(),
        formatedMonth: parseInt(p(V)) - 1,
        year: uh(h) ? NU(V.getFullYear()) : V.getFullYear(),
        onChange: e => H({
            type: "monthSelect",
            value: e
        }),
        onPreviousButtonPress: e => l.onPreviousButtonPress?.(e),
        onNextButtonPress: e => l.onNextButtonPress?.(e),
        onMonthSelect: e => l.onMonthSelect?.(e),
        onYearChange: e => l.onYearChange?.(e),
        selectClassName: l.selectClassName
    }), l.showLegend ? t(dK, {
        specialDayLegendText: l.specialDates?.legendText,
        nonWorkDayLegendText: l.nonWorkDayLegendText,
        legendItems: l.legendItems,
        testId: gb(l.testId, "legend")
    }) : null);
}));

const RK = u((function e(o, i) {
    const l = kW({
        type: "dayOnly"
    });
    const d = kW({
        type: "monthOnly"
    });
    const u = kW({
        type: "yearOnly"
    });
    const m = CK();
    const p = jV();
    const f = DK.getMonth();
    const h = LK.getMonth();
    const b = parseInt(d(DK));
    const v = parseInt(d(LK));
    const y = parseInt(u(DK));
    const x = parseInt(u(LK));
    const S = mh(p) ? y : DK.getFullYear();
    const w = mh(p) ? x : LK.getFullYear();
    const C = r((() => CU(p)), [ p ]);
    const E = r((() => EU(p)), [ p ]);
    const [I, _] = n(String(o.year));
    const [D, L] = n(null);
    const T = r((() => {
        const e = D ?? u(new Date(o.year, o.month, o.focusDate));
        return e;
    }), [ o.month, o.focusDate, u, D, o.year ]);
    const R = parseInt(d(new Date(o.year, o.month, o.focusDate)));
    const [k, A] = n(true);
    const [M, N] = n(true);
    const O = YI();
    const P = r((() => (e, t, o, n, a, r) => {
        const s = zH(e, t, o, n, a, mh(p) ? 3 : r);
        const i = uh(p) ? 5 : 4;
        const l = uh(p) ? NU(S).toString() : mh(p) ? y : S.toString();
        const c = uh(p) ? NU(w).toString() : mh(p) ? x : w.toString();
        if (s.isError) {
            s.message = m("minMaxYear.error.msg", {
                min: l.toString(),
                max: c.toString()
            });
            if (O.current) A(false);
        } else {
            let t = parseInt(e);
            if (uh(p)) t = OU(t);
            if (e.includes(" ") || !a && (t < S || t > w) || a && (t.toString().length === i || e.length === i) && (t < S || t > w)) {
                s.isError = true;
                s.message = m("minMaxYear.error.msg", {
                    min: l.toString(),
                    max: c.toString()
                });
                if (O.current) A(false);
            } else if (O.current && e.length > 3 || mh(p) && e.length >= 3) {
                A(true);
            }
        }
        if (O.current) _(e);
        return s;
    }), [ p, m, w, S, O, y, x ]);
    const B = kH({
        validateInputFunction: P,
        isRequired: true,
        allowIntegersOnly: true,
        minLength: mh(p) ? 3 : 4,
        initialValue: String(o.year),
        disableAutoFormatting: true
    });
    const z = s(((e, t) => {
        const n = parseInt(d(new Date(t, e, o.focusDate)));
        const a = parseInt(u(new Date(t, e, o.focusDate)));
        if (a === y && n < b) {
            N(false);
            return;
        } else if (a === x && n > v) {
            N(false);
            return;
        } else {
            return N(true);
        }
    }), [ d, u, o.focusDate, x, y, v, b ]);
    const F = s(((e, t) => {
        const o = new Date(t, e, 5);
        const n = new Date(DK);
        n.setDate(1);
        if (uh(p)) n.setFullYear(NU(n.getFullYear()));
        const a = new Date(LK);
        a.setDate(27);
        if (uh(p)) a.setFullYear(NU(a.getFullYear()));
        if (o.getTime() < n.getTime() || o.getTime() > a.getTime()) N(false); else N(true);
    }), [ p ]);
    function j(e) {
        L(e.value);
        if (!O.current) return;
        B.handleChange(e);
        if (e.value.length >= 4 || mh(p) && e.value.length >= 3) {
            const t = P(e.value, p, true, true, false, mh(p) ? 3 : 4);
            if (!t.isError) {
                if (mh(p)) {
                    const t = R - 1;
                    const {year: n, month: a, day: r} = $(o.focusDate, o.month, o.year, parseInt(e.value), t, t);
                    o.onChange({
                        month: a,
                        year: n,
                        day: r
                    });
                    o.onYearChange(W(a, n));
                    z(a, n);
                } else F(o.month, parseInt(e.value));
            }
        }
    }
    function V() {
        if (!O.current) return;
        const e = mh(p) ? T : I;
        if (!isNaN(parseInt(e)) || e.trim() === "") {
            const t = P(e, p, true, true, false, mh(p) ? 3 : 4);
            if (t.isError) {
                B.handleBlur();
                return;
            }
        }
    }
    const H = s((() => {
        if (!mh(p)) {
            _(String(o.year));
            P(String(o.year), p, true, true, false, 4);
            F(o.month, o.year);
        }
    }), [ p, o.month, o.year, F, P ]);
    a((() => {
        H();
    }), [ H ]);
    a((() => {
        if (mh(p)) {
            z(o.month, o.year);
        }
    }), [ z, o.month, o.year, p ]);
    const U = c(null);
    const G = c(null);
    g(i, (() => ({
        isValid: () => {
            if (!k || !M) return false;
            return true;
        },
        focus: () => !M ? U.current?.focus() : G.current?.focus(),
        reset: H
    })));
    const K = m("minMaxMonth.error.msg", {
        min: AU(p, DK),
        max: AU(p, LK)
    });
    const W = (e, t) => {
        const n = new Date(t, e + 1, 0).getDate();
        return new Date(t, e, o.focusDate > n ? n : o.focusDate);
    };
    const $ = s(((e, t, o, n, a, r) => {
        let s = n;
        let i = r;
        let c = e;
        let m = 0;
        let f = new Date;
        let g = parseInt(u(f));
        let h = g - f.getFullYear();
        if (!mh(p) || h === 0) return {
            day: e,
            month: t,
            year: n
        };
        while (h !== 0 && m < 5) {
            m++;
            s -= h;
            f = new Date(s, i, c);
            g = parseInt(u(f));
            h = g - n;
        }
        m = 0;
        while (h !== 0 && m < 12) {
            m++;
            if (h < 0) {
                i++;
            } else if (h > 0) {
                i--;
            }
            f = new Date(s, i, c);
            g = parseInt(u(f));
            h = g - n;
        }
        if (typeof a === "number" && h === 0) {
            const e = a + 1;
            let t = parseInt(d(new Date(s, i, c)));
            let o = t - e;
            m = 0;
            while (o !== 0 && h === 0 && m < 12) {
                m++;
                if (o > 0) {
                    i--;
                } else if (o < 0) {
                    i++;
                }
                f = new Date(s, i, c);
                g = parseInt(u(f));
                h = g - n;
                if (h > 0) {
                    i--;
                    break;
                } else if (h < 0) {
                    i++;
                    break;
                } else {
                    t = parseInt(d(new Date(s, i, c)));
                    o = t - e;
                }
            }
            t = parseInt(d(new Date(s, i, c)));
            o = t - e;
            m = 0;
            while (o !== 0 && m < 31) {
                m++;
                if (o > 0) {
                    c--;
                } else if (o < 0) {
                    c++;
                }
                f = new Date(s, i, c);
                t = parseInt(d(new Date(s, i, c)));
                o = t - e;
            }
        }
        const b = parseInt(l(new Date(s, i, c))) - parseInt(l(new Date(o, t, e)));
        if (b !== 0) c -= b;
        const v = new Date(s, i, c);
        return {
            year: v.getFullYear(),
            month: v.getMonth(),
            day: v.getDate()
        };
    }), [ u, d, p, l ]);
    const Y = t(SH, {
        ref: G,
        testId: "calendarHeaderYearInput",
        className: lK.headerYearInput,
        value: mh(p) ? T : I,
        onCommit: e => {
            if (!O.current) return;
            if (e.reason === "blur" && o.year === parseInt(e.value)) return;
            if (e.reason === "enter") {
                const t = P(e.value, p, true, true, false, mh(p) ? 3 : 4);
                if (t.isError) {
                    B.handleBlur();
                    return;
                }
            }
            if (k) {
                if (mh(p)) {
                    const t = R - 1;
                    const {year: n, month: a, day: r} = $(o.focusDate, o.month, o.year, parseInt(e.value), t, t);
                    o.onChange({
                        month: a,
                        year: n,
                        day: r
                    });
                    o.onYearChange(W(a, n));
                    L(null);
                } else {
                    o.onChange({
                        month: o.month,
                        year: parseInt(e.value)
                    });
                    o.onYearChange(W(o.month, parseInt(e.value)));
                }
            }
        },
        onFocus: () => {
            if (!O.current) return;
            const e = mh(p) ? T : I;
            if (!isNaN(parseInt(e)) || e.trim() === "") {
                const t = P(e, p, true, true, false, mh(p) ? 3 : 4);
                if (t.isError) {
                    B.handleBlur();
                    return;
                }
            }
        },
        onChange: j,
        onBlur: V,
        status: k ? undefined : "alert",
        message: B.errors.message,
        maxLength: uh(p) ? 5 : 4,
        ariaLabel: m("year.aria"),
        required: true
    });
    return t("div", {
        className: lK.header
    }, t(QM, {
        icon: {
            icon: _T,
            tooltip: m("previousMonth.aria")
        },
        variant: oN.Icon,
        focusable: false,
        onPress: () => {
            const e = o.month === 0 ? 11 : o.month - 1;
            const t = o.month === 0 ? o.year - 1 : o.year;
            o.onChange({
                month: e,
                year: t
            });
            o.onPreviousButtonPress(W(e, t));
            if (o.month === 0) _(String(o.year - 1));
        },
        testId: "calendarHeaderPreviousButton",
        disabled: !k || (mh(p) ? parseInt(T) === y && R <= b : o.month <= f && o.year === (uh(p) ? NU(S) : S))
    }), t("div", {
        className: lK.headerMonthYearContainer
    }, C === "before" && Y, t(DG, {
        testId: "calendarHeaderMonthSelect",
        selectBoxRef: U,
        className: lK.headerMonthButton,
        popoverClassName: o.selectClassName,
        selectedIndex: o.formatedMonth,
        values: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ].map((e => ({
            text: E[e]
        }))),
        onSelected: e => {
            if (typeof e === "number" && !isNaN(parseInt(I)) && k) {
                if (!mh(p)) {
                    o.onChange({
                        month: e,
                        year: parseInt(I)
                    });
                    o.onMonthSelect(W(e, o.year));
                    F(e, parseInt(I));
                    return;
                }
                const t = o.formatedMonth - e;
                let n = t > 0 ? o.month - t : o.month + Math.abs(t);
                if (n < 0) {
                    n = 12 - Math.abs(n);
                }
                if (n >= 12) {
                    n = n - 12;
                }
                const {year: a, month: r, day: s} = $(o.focusDate, o.month, o.year, parseInt(T), e, n);
                o.onChange({
                    month: r,
                    year: a,
                    day: s
                });
                o.onMonthSelect(W(r, a));
                z(r, a);
            }
        },
        ariaLabel: m("month.aria"),
        message: k && !M ? K : undefined,
        status: k && !M ? "alert" : undefined,
        disabled: !k
    }), C === "after" && Y), t(QM, {
        icon: {
            icon: ET,
            tooltip: m("nextMonth.aria")
        },
        variant: oN.Icon,
        focusable: false,
        onPress: () => {
            const e = o.month === 11 ? 0 : o.month + 1;
            const t = o.month === 11 ? o.year + 1 : o.year;
            o.onChange({
                month: e,
                year: t
            });
            o.onNextButtonPress(W(e, t));
            if (o.month === 11) _(String(o.year + 1));
        },
        testId: "calendarHeaderNextButton",
        disabled: !k || (mh(p) ? parseInt(T) === x && R >= v : o.month >= h && o.year === (uh(p) ? NU(w) : w))
    }));
}));

const kK = f((function e(n) {
    const a = CK();
    const s = jV();
    const i = r((() => IU(s)), [ s ]);
    return t(o, null, n.showWeekNumbers ? t("div", {
        role: "gridcell"
    }) : null, [ 0, 1, 2, 3, 4, 5, 6 ].map((e => t("div", {
        key: e,
        id: n.dayOfWeekIds[e],
        role: "columnheader",
        "aria-label": a(`weekday.${e}.aria`),
        className: lK.weekdayHeaderCell,
        style: {
            gridColumnStart: `day-start ${1 + e}`
        }
    }, i[e]))));
}));

const AK = f(u((function e(n, a) {
    const r = xK();
    const s = SK();
    const i = wK();
    const l = CK();
    const c = () => {
        const e = [];
        if (n.today) {
            e.push(r);
        }
        if (n.specialDay) {
            e.push(s);
        }
        if (n.nonWorkDay) {
            e.push(i);
        }
        e.push(n.ariaDescribedBy);
        return e.join(" ");
    };
    const d = () => n.specialDayAriaLabel ?? l("specialDay.aria");
    const u = () => n.nonWorkDayAriaLabel ?? l("weekend.aria");
    const m = () => l("multiSelect.msg");
    const p = () => l("intervalSelect.msg");
    const f = () => {
        let e = "";
        if (n.specialDay) {
            e = d();
        }
        if (n.nonWorkDay) {
            if (e.length > 0) {
                e += `\n\n${u()}`;
            } else {
                e = u();
            }
        }
        if (!n.singleSelection) {
            if (e.length > 0) {
                e += `\n\n${m()}`;
            } else {
                e = m();
            }
        } else if (n.intervalSelection) {
            if (e.length > 0) {
                e += `\n\n${p()}`;
            } else {
                e = p();
            }
        }
        return e;
    };
    const g = fO({
        tooltip: f()
    });
    const h = () => {
        let e = "";
        if (n.specialDay) {
            e = d();
        }
        if (n.nonWorkDay) {
            if (e.length > 0) {
                e += `\n${u()}`;
            } else {
                e = u();
            }
        }
        return e;
    };
    return t(o, null, t("div", {
        role: "gridcell",
        "data-testid": n.testId,
        ref: e => {
            g(e);
            D_(a, e);
        },
        className: ke(lK.dayCell, !n.inCurrentMonth && lK.dayCellExternal, n.today && lK.dayCellToday, n.focused && n.focusVisible && lK.dayCellFocused, !n.disabled && n.selected && lK.dayCellSelected, !n.disabled && n.selected && n.inInterval && lK.dayCellInterval, n.disabled && lK.dayCellDisabled, n.nonWorkDay && n.inCurrentMonth && lK.nonWorkDay),
        tabIndex: n.focused ? 0 : -1,
        "aria-label": n.ariaLabel,
        "aria-describedby": c(),
        "aria-selected": n.disabled ? undefined : n.selected,
        "aria-disabled": n.disabled || undefined,
        onClick: e => {
            if (e.button === 0) {
                n.onPress(n.day);
            }
        },
        onKeyDown: e => {
            switch (e.key) {
              case " ":
              case "Spacebar":
              case "ArrowUp":
              case "ArrowDown":
              case "PageUp":
              case "PageDown":
                e.preventDefault();
                break;
            }
        },
        onBlur: n.onBlur,
        title: h()
    }, n.specialDay ? t("div", {
        className: ke(lK.specialDay, n.selected && lK.selected)
    }, t("span", {
        className: lK.dayCellContent
    }, n.children)) : t("span", {
        className: lK.dayCellContent
    }, n.children)), n.today && t(bO, {
        id: r,
        testId: gb(n.testId, "-today")
    }, l("today.description.aria")), n.specialDay && t(bO, {
        id: s
    }, n.specialDayAriaLabel ?? l("specialDay.aria")), n.nonWorkDay && t(bO, {
        id: i
    }, n.nonWorkDayAriaLabel ?? l("weekend.aria")));
})));

const MK = (e, t) => ({
    ...__({
        "row-gap": e.tokensExperimental["space-block-xs"],
        "col-gap": e.tokensExperimental["space-inline-s"],
        "header-row-gap": e.tokensExperimental["space-block-m"],
        "font-size-xxs": e.tokensExperimental["font-size-body-text-xxs"],
        "font-size-s": e.tokensExperimental["font-size-body-text-s"],
        "font-size-m": e.tokensExperimental["font-size-body-text-m"],
        "font-weight": e.tokensExperimental["font-style-weight-400"],
        "line-height": e.tokensExperimental["font-space-line-height"],
        "calendar-row-template": `repeat(${t?.showTodayButton ? t?.formatedCalendar.length : 7}, 1.5rem)`,
        "today-button-row-template": `repeat(${t?.showLegend ? 1 : 7 - t?.formatedCalendar.length}, 1.5rem)`
    }, "calendar-cell"),
    ...__({
        bg: e.tokensExperimental["color-action-background-subtle-normal"],
        bd: e.tokensExperimental["color-action-border-subtle-normal"],
        fg: e.tokensExperimental["color-action-text-subtle-normal"]
    }, "day-cell-normal"),
    ...__({
        bg: e.tokensExperimental["color-action-background-standard-hover"],
        fg: e.tokensExperimental["color-action-text-standard-hover"]
    }, "day-cell-hover"),
    ...__({
        bg: e.tokensExperimental["color-action-background-secondary-selected"],
        bd: e.tokensExperimental["color-action-border-secondary-selected"],
        fg: e.tokensExperimental["color-action-text-secondary-selected"]
    }, "day-cell-selected"),
    ...__({
        bg: e.stateStandardContentNova.disabled,
        bd: e.tokensExperimental["color-action-border-subtle-disabled"],
        fg: e.tokensExperimental["color-action-text-subtle-disabled"]
    }, "day-cell-external"),
    ...__({
        pd: e.tokensExperimental["space-squish-xs"]
    }, "day-cell"),
    ...__({
        outline: e.themeVariant === "high-contrast" ? "var(--focus-dark-bg)" : "var(--focus-light-bg)"
    }, "day-cell-selected-focus"),
    ...__({
        outline: "var(--focus-light-bg)"
    }, "day-cell-interval-focus"),
    ...__({
        bd: e.tokensExperimental["color-primary"],
        fg: e.tokensExperimental["color-text-primary"],
        bg: "transparent"
    }, "day-cell-today"),
    ...__({
        fg: e.tokensExperimental["color-action-text-subtle-normal"],
        "col-grid-gap": e.tokensExperimental["space-base-null"]
    }, "weekday"),
    ...__({
        "font-size": e.tokensExperimental["font-size-body-text-s"],
        "font-weight": e.tokensExperimental["font-style-weight-400"],
        fg: e.tokensExperimental["color-label-text"],
        pd: e.tokensExperimental["space-squish-xs"]
    }, "week-number-cell"),
    ...__({
        bg: e.tokensExperimental["color-container-border-4"],
        bw: e.tokensExperimental["size-border-width-s"]
    }, "calendar-divider"),
    ...__({
        bg: e.tokensExperimental["color-action-background-subtle-selected-inactive"],
        bd: e.tokensExperimental["color-action-border-subtle-selected-inactive"],
        fg: e.tokensExperimental["color-action-text-subtle-selected-inactive"]
    }, "day-cell-interval"),
    ...__({
        fg: e.c.colorTextDefault
    }, "special-day"),
    ...__({
        bg: Jv(e.tokensExperimental["color-neutral"], .08),
        fg: e.tokensExperimental["color-action-text-subtle-normal"],
        bd: e.themeVariant === "high-contrast" ? e.c.colorTextDefault : "transparent"
    }, "non-work-day"),
    ...__({
        "legend-gap": e.tokensExperimental["space-base-m"],
        "font-size-s": e.tokensExperimental["font-size-body-text-s"],
        "font-size-m": e.tokensExperimental["font-size-body-text-m"]
    }, "calendar-legend"),
    ...!e.enableNovaTokens && NK(e)
});

const NK = e => {
    let t, o, n, a, r, s;
    switch (e.themeVariant) {
      case "dark":
        t = {
            fg: e.c.white80
        };
        o = {
            fg: e.c.p2,
            bg: "transparent",
            bd: e.c.p
        };
        n = {
            bg: e.c.white15
        };
        a = {
            fg: e.c.white,
            bg: "transparent",
            bd: e.stateSecondary.selected.bd
        };
        r = {
            fg: e.c.white80
        };
        s = {
            bg: e.stateStandard.normal.bg,
            bd: "transparent"
        };
        break;

      case "high-contrast":
      default:
        t = {
            fg: e.c.n_1
        };
        o = {
            fg: e.c.p,
            bg: "transparent",
            bd: e.c.p
        };
        n = {
            bg: e.c.n3
        };
        a = {
            fg: e.themeVariant === "high-contrast" ? e.c.white : e.stateSecondary.selected.fg,
            bg: e.themeVariant === "high-contrast" ? "transparent" : e.stateSecondary.selected.bg,
            bd: e.themeVariant === "high-contrast" ? e.stateSecondary.selected.bd : "transparent"
        };
        r = {
            fg: e.c.n_1
        };
        s = {
            bg: e.stateStandard.normal.bg,
            bd: e.themeVariant === "high-contrast" ? e.c.colorTextDefault : "transparent"
        };
        break;
    }
    return {
        ...__({
            "font-size-xxs": e.font.size.xxs,
            "font-size-s": e.font.size.s,
            "font-size-m": e.font.size.m,
            "font-weight": e.font.weight.thick
        }, "calendar-cell"),
        ...__(e.stateStandardContent.normal, "day-cell-normal"),
        ...__(e.stateStandardContent.hover, "day-cell-hover"),
        ...__(e.stateStandardContent.disabled, "day-cell-external"),
        ...__(e.stateSecondary.selected, "day-cell-selected"),
        ...__(o, "day-cell-today"),
        ...__(t, "weekday"),
        ...__(n, "calendar-divider"),
        ...__(a, "day-cell-interval"),
        ...__(r, "special-day"),
        ...__(s, "non-work-day"),
        ...__({
            "font-size-s": e.font.size.s,
            "font-size-m": e.font.size.m
        }, "calendar-legend")
    };
};

var OK = "sas_components-TextArea-TextArea_offscreen";

var PK = "sas_components-TextArea-TextArea_container";

var BK = "sas_components-TextArea-TextArea_textarea";

var zK = "sas_components-TextArea-TextArea_fixed-height";

var FK = "sas_components-TextArea-TextArea_editable";

var jK = "sas_components-TextArea-TextArea_read-only";

var VK = "sas_components-TextArea-TextArea_disabled";

var HK = "sas_components-TextArea-TextArea_status-icon";

var UK = "sas_components-TextArea-TextArea_status-focusout";

var GK = "sas_components-TextArea-TextArea_with-scrollbar";

var KK = "sas_components-TextArea-TextArea_status-message-container";

var WK = {
    offscreen: OK,
    container: PK,
    textarea: BK,
    fixedHeight: zK,
    editable: FK,
    readOnly: jK,
    disabled: VK,
    statusIcon: HK,
    statusFocusout: UK,
    withScrollbar: GK,
    statusMessageContainer: KK
};

const $K = fb(ft);

const YK = u((function e(o, r) {
    const [i, l] = n(false);
    const [u, m] = n(false);
    const [p, f] = n(false);
    const [g, h] = n(false);
    const [b, v] = n(false);
    const [y, x] = n("1px");
    const S = c(null);
    const w = c(0);
    const C = $B({
        source: OB.InputFull
    });
    const {disabled: E, readOnly: I, required: _, value: D, autoExpand: L} = o;
    const T = o.status ?? (b ? "alert" : null);
    {
        d((function e() {
            if (E || I || !g) return;
            h(false);
            setTimeout((() => {
                const e = S.current;
                if (e && !o.disableAutoSelection) {
                    e.setSelectionRange(0, e.value?.length, undefined);
                }
            }), 0);
        }), [ g, I, E, o.disableAutoSelection ]);
    }
    let R, k;
    {
        const e = JI((() => {
            if (E || I) return;
            l(false);
            if (o.onCommit) {
                o.onCommit({
                    value: D
                });
            }
        }));
        R = () => {
            if (E || I) return;
            e.onBlur();
            m(false);
            l(false);
            f(false);
            v(!!_ && D?.length < 1);
            if (o.onBlur) o.onBlur();
        };
        k = t => {
            if (E || I) return;
            e.onFocus();
            l(true);
            h(true);
            if (o.onFocus) o.onFocus(t);
        };
    }
    function A(e) {
        if (E || I) return;
        const t = e.target.value;
        v(false);
        f(true);
        o.onChange?.({
            value: t
        });
    }
    a((() => {
        if (!_ || !b || i || !D) return;
        v(false);
    }), [ _, b, i, D ]);
    function M(e) {
        if (E || I) return;
        if (e.key === "Enter") {
            if (o.onCommit) {
                o.onCommit({
                    value: D
                });
            }
        }
    }
    const N = () => m(true);
    const O = () => m(false);
    const P = T === "alert" ? Yk : T === "warning" ? CA : undefined;
    const B = jD(L_.FOCUS_OVERRIDE) === "true";
    const z = C_();
    const F = {
        ...I_({
            ...qK(z, o, T),
            pd: z.tokensExperimental["space-squish-s"],
            "mg-xs": z.tokensExperimental["space-base-xs"],
            "font-size-m": z.tokensExperimental["font-size-body-text-m"],
            "editable-focus-outline": z.themeVariant === "high-contrast" || B ? "var(--focus-light-bg)" : "none",
            "status-icon-offset": y
        }, "textarea"),
        ...I_({
            fg: z.tokensExperimental["color-action-text-control-placeholder"],
            "disabled-fg": z.tokensExperimental["color-action-text-control-disabled"]
        }, "textarea-placeholder"),
        ...I_({
            ...T === "alert" || T === "warning" ? {
                fg: z.tokensExperimental[`color-action-text-control-normal`],
                bg: z.tokensExperimental[`color-action-background-control-${T}`],
                bd: z.tokensExperimental[`color-action-border-control-${T}`]
            } : {
                fg: z.tokensExperimental["color-action-text-control-normal"],
                bg: z.tokensExperimental["color-action-background-control-selected"],
                bd: z.tokensExperimental["color-action-border-control-selected"]
            }
        }, "textarea-focus")
    };
    const j = [];
    if (o.ariaDescribedBy) j.push(...o.ariaDescribedBy);
    const V = XA();
    const H = $K();
    const U = _ ? o.message ?? H("required.invalidInput.label") : o.message ?? "";
    a((() => {
        if (p) return;
        if (i && D) V?.notify(D); else if (T) V?.notify(H("invalidInput.label", {
            message: U
        }));
    }), [ p, i, D, T, V, H, U ]);
    const G = s((() => {
        if (D && T && P && S.current && S.current.offsetHeight < S.current.scrollHeight) {
            const e = FA();
            x(`${e ? e : 1}px`);
        } else {
            x(`1px`);
        }
    }), [ D, T, P ]);
    a((() => {
        G();
    }), [ G ]);
    a((() => {
        XK(L, S.current);
    }), [ L, D, H ]);
    let K;
    const [W] = kN((() => {
        clearTimeout(K);
        K = setTimeout((function() {
            clearTimeout(K);
            K = undefined;
            XK(L, S.current);
            G();
        }), 20);
    }));
    const $ = s((e => {
        S.current = e;
        D_(r, e);
        W(e);
    }), [ r, W ]);
    const Y = e => {
        if (S.current) {
            const t = S.current.selectionStart;
            const n = S.current.selectionEnd;
            if (o.maxLength && t + e - n >= o.maxLength) C.play();
        }
    };
    a((() => {
        const e = S.current;
        if (!L || e === null) return;
        if (e.parentElement && getComputedStyle(e.parentElement).maxHeight !== "none") {
            e.style.maxHeight = "inherit";
            return;
        }
        if (o.maxRows === undefined || o.maxRows < 1) return;
        const t = getComputedStyle(e);
        e.style.maxHeight = `${parseFloat(t.lineHeight) * o.maxRows + parseFloat(t.paddingTop) + parseFloat(t.paddingBottom) + parseFloat(t.borderTopWidth) + parseFloat(t.borderBottomWidth)}px`;
    }), [ L, o.maxRows, o.style ]);
    return t("div", {
        "data-testid": o.testId,
        className: ke(WK.container, o.height ? WK.fixedHeight : "", o.className, y !== "1px" && WK.withScrollbar),
        onBlur: R,
        onFocus: k,
        style: {
            height: o.height,
            width: o.width,
            ...F,
            ...o.style
        }
    }, t("textarea", {
        "data-testid": gb(o.testId, "textarea"),
        tabIndex: o.tabIndex ?? undefined,
        ref: $,
        className: ke(WK.textarea, !I && !E && WK.editable, I && WK.readOnly, E && WK.disabled, !i && T && WK.statusFocusout),
        style: {
            lineHeight: o.style?.lineHeight
        },
        readOnly: !!I || !!E,
        "aria-required": !!_,
        "aria-haspopup": o.ariaHasPopup,
        rows: o.rows ? o.rows : undefined,
        placeholder: o.placeholder ? o.placeholder : undefined,
        maxLength: o.maxLength ? o.maxLength : undefined,
        onChange: A,
        onKeyPress: M,
        onKeyDown: e => {
            const t = e.ctrlKey || e.metaKey;
            if (!I && e.key === "Enter") {
                e.stopPropagation();
            }
            if (S.current && !E && !I && !t && e.key.length === 1) {
                Y(D?.length);
            }
            o.onKeyDown && o.onKeyDown(e);
        },
        onCompositionStart: () => {
            if (S.current && D) {
                const e = S.current.selectionStart;
                const t = S.current.selectionEnd;
                w.current = D.length + e - t;
            }
        },
        onCompositionEnd: e => {
            if (o.maxLength && w.current + e.data?.length > o.maxLength) C.play();
            w.current = 0;
        },
        onPaste: e => {
            const t = e.clipboardData.getData("text");
            const o = D?.length + t.length;
            Y(o > 0 ? o - 1 : o);
        },
        onMouseUp: e => {
            o.onMouseUp?.(e);
        },
        onMouseEnter: N,
        onMouseLeave: O,
        autoComplete: "off",
        value: D,
        "aria-disabled": !!E,
        "aria-label": o.ariaLabel,
        "aria-labelledby": o.ariaLabelledBy,
        "aria-describedby": j.length > 0 ? j.join(" ") : undefined,
        id: o.id
    }), !i && T && P ? t("div", {
        className: WK.statusIcon,
        onMouseEnter: N,
        onMouseLeave: O
    }, t(MM, {
        icon: P,
        color: T
    })) : null, !T || !U ? null : t(QF, {
        status: T,
        referenceElementRef: S,
        message: U,
        hidden: !i && !u,
        testId: gb(o.testId, "messagePopper")
    }));
}));

function qK(e, t, o) {
    if (t.disabled) {
        return {
            fg: e.tokensExperimental["color-action-text-control-disabled"],
            bg: e.tokensExperimental["color-action-background-control-disabled"],
            bd: e.tokensExperimental["color-action-border-control-disabled"],
            "disabled-focus-bd": e.themeVariant !== "high-contrast"
        };
    } else if (t.readOnly) {
        return {
            fg: e.tokensExperimental["color-action-text-control-read-only"],
            bg: e.tokensExperimental["color-action-background-control-read-only"],
            bd: e.tokensExperimental["color-action-border-control-read-only"]
        };
    } else {
        switch (o) {
          case "alert":
            return {
                fg: e.tokensExperimental["color-action-text-control-alert"],
                bg: e.tokensExperimental["color-action-background-control-alert"],
                bd: e.tokensExperimental["color-action-border-control-alert"]
            };

          case "warning":
            return {
                fg: e.tokensExperimental["color-action-text-control-warning"],
                bg: e.tokensExperimental["color-action-background-control-warning"],
                bd: e.tokensExperimental["color-action-border-control-warning"]
            };

          default:
            return {
                fg: e.tokensExperimental["color-action-text-control-normal"],
                bg: e.tokensExperimental["color-action-background-control-normal"],
                bd: e.tokensExperimental["color-action-border-control-normal"]
            };
        }
    }
}

const XK = (e, t) => {
    if (e && t) {
        t.style.overflowY = "hidden";
        t.style.height = "auto";
        const e = t.scrollHeight;
        const o = parseFloat(getComputedStyle(t).borderWidth) || 0;
        t.style.height = `${Math.ceil(e + 2 * o)}px`;
        t.style.overflowY = "auto";
    }
};

var ZK = "sas_components-MessageDialog-MessageDialog_text-area-container";

var JK = {
    textAreaContainer: ZK
};

const QK = fb(gt);

function eW() {
    const e = QK();
    return {
        OK: e("messageDialog.actions.ok.label"),
        CANCEL: e("messageDialog.actions.cancel.label"),
        YES: e("messageDialog.actions.yes.label"),
        NO: e("messageDialog.actions.no.label"),
        ABORT: e("messageDialog.actions.abort.label"),
        RETRY: e("messageDialog.actions.retry.label"),
        IGNORE: e("messageDialog.actions.ignore.label"),
        CLOSE: e("messageDialog.actions.close.label"),
        DELETE: e("messageDialog.actions.delete.label"),
        SAVE: e("messageDialog.actions.save.label"),
        DONT_SAVE: e("messageDialog.actions.dontSave.label"),
        DISCARD: e("messageDialog.actions.discard.label"),
        APPLY: e("messageDialog.actions.apply.label"),
        RESET: e("messageDialog.actions.reset.label"),
        CLOSE_TAB: e("messageDialog.actions.closeTab.label"),
        CLOSE_TABS: e("messageDialog.actions.closeTabs.label"),
        CONTINUE: e("messageDialog.actions.continue.label")
    };
}

const tW = MA("messagedialog-text");

const oW = e => {
    const o = tW();
    const r = QK();
    const [i, l] = n(false);
    const d = c(null);
    const u = R_();
    const {text: m, isOpen: p, title: f, type: g, detailText: h, includeDontShowAgainCheckbox: b, dontShowAgainCheckboxValue: v, onDontShowAgainCheckboxPress: y, onOpen: x, onClose: S, children: w, ...C} = e;
    const [E, I] = n(undefined);
    const _ = s((() => {
        I(0);
        x?.();
    }), [ x ]);
    const D = s((() => {
        I(undefined);
        if (v) y?.();
        S?.();
    }), [ v, S, y ]);
    a((() => {
        if (!p) l(false);
    }), [ p ]);
    a((() => {
        if (i) d.current?.focus();
    }), [ i ]);
    const L = i ? r("messageDialog.hideDetails.label") : r("messageDialog.showDetails.label");
    const T = i ? wT : CT;
    let R;
    if (h) {
        R = t(QM, {
            variant: oN.LightSmall,
            onPress: () => {
                l(!i);
            },
            icon: {
                icon: T
            },
            text: L
        });
    }
    let k;
    switch (g) {
      case "information":
        k = "info";
        break;

      case "warning":
        k = "warning";
        break;

      case "error":
        k = "alert";
        break;
    }
    const A = Math.floor(.75 * (document.documentElement.clientHeight ?? 0));
    return t(BF, Ee({}, C, {
        isOpen: p,
        title: f ?? u?.get("appName")?.replaceAll?.("®", ""),
        hideCloseIcon: true,
        footerControls: R,
        role: "alertdialog",
        ariaDescribedBy: o,
        accent: k,
        size: {
            minHeight: "11rem",
            minWidth: "24rem",
            maxWidth: "30rem",
            maxHeight: `${A}px`
        },
        onOpen: _,
        onClose: D
    }), t(iN, {
        orientation: "vertical",
        spacing: "s"
    }, t(jP, {
        id: o,
        tabIndex: E
    }, m), h && i && t("div", {
        className: JK.textAreaContainer
    }, t(YK, {
        ref: d,
        ariaLabel: r("messageDialog.details.aria"),
        width: "100%",
        value: h,
        readOnly: true,
        tabIndex: 0,
        style: {
            lineHeight: 1.4
        },
        autoExpand: true,
        maxRows: 10,
        onChange: () => {}
    })), b && (g === "information" || g === "warning") ? t(tB, {
        label: r("messageDialog.dontShowThisMessageAgain.label"),
        checked: v ?? false,
        onPress: y
    }) : null, t("div", null, w)));
};

const nW = u((function e(o, r) {
    const [s, i] = n(o.isDuration ? o.value.toLocaleString().replace(/[,.]/g, "") : String(o.value));
    const [l, d] = n(o.isDuration ? o.value.toLocaleString().replace(/[,.]/g, "") : String(o.value));
    const [u, m] = n("unfocused");
    const p = iW(l, {
        minValue: o.minValue,
        maxValue: o.maxValue,
        isEditing: u === "editing",
        isDuration: o.isDuration ?? false
    });
    const f = c(null);
    g(r, (() => ({
        isValid: () => p,
        focus: () => f.current?.focus()
    })));
    const h = NA("DatePicker");
    const b = YI();
    a((() => {
        function e() {
            m((e => e !== "committed" ? "editing" : e));
        }
        const t = f.current;
        t?.addEventListener("keydown", e);
        return function() {
            t?.removeEventListener("keydown", e);
        };
    }));
    return t(SH, {
        ref: e => {
            f.current = e;
            D_(o.inputRef, e);
        },
        id: o.id,
        testId: o.testId,
        className: o.className,
        style: o.style,
        ariaLabel: o.ariaLabel,
        maxLength: Math.max(String(o.minValue).length, String(o.maxValue).length),
        value: u !== "unfocused" || !p ? l : s,
        status: p ? undefined : "alert",
        message: !p ? h(o.invalidMessageKey ?? "invalidInteger.msg", {
            min: String(o.minValue),
            max: String(o.maxValue)
        }) : undefined,
        onFocus: () => {
            if (p) {
                d(s);
            }
        },
        onBlur: () => {
            setTimeout((() => m("unfocused")), 0);
        },
        onChange: e => {
            i(e.value);
            d(e.value);
            m((e => e !== "unfocused" ? "editing" : e));
            if (e.value.length > 0 && (!o.isDuration || p)) {
                o.onChange(sW(e.value, o.isDuration ?? false), "onChange");
            }
        },
        onCommit: e => {
            if (!b.current) return;
            m((e => e === "editing" ? "committed" : e));
            const t = sW(e.value, o.isDuration ?? false);
            if (!isNaN(t) && (!o.isDuration || p)) {
                o.onChange(t, "onCommit");
            }
        }
    });
}));

const aW = /^\s*[0-9]+\s*$/u;

const rW = /^-?\s*[0-9]+\s*$/u;

function sW(e, t) {
    if (t) return rW.test(e) ? Number.parseInt(e, 10) : NaN;
    return aW.test(e) ? Number.parseInt(e, 10) : NaN;
}

function iW(e, t) {
    const o = sW(e, t.isDuration);
    if (t.isEditing) {
        if (t.isDuration && e.lastIndexOf("-") === 0) return true;
        if (e.includes(" ")) return false;
        const n = e.trim().length;
        const a = Math.max(String(t.minValue).length, String(t.maxValue).length);
        return (!isNaN(o) || n === 0) && (n < a || lW(o, t));
    } else {
        return !isNaN(o) && lW(o, t);
    }
}

function lW(e, t) {
    return t.minValue <= e && e <= t.maxValue;
}

const cW = dU(nW);

const dW = fb(ht);

const uW = u((function e(o, n) {
    const a = jV();
    const r = dW();
    const s = !o.minDate ? vU : uh(a) ? NU(o.minDate?.getFullYear()) : o.minDate?.getFullYear();
    const i = !o.maxDate ? yU : uh(a) ? NU(o.maxDate?.getFullYear()) : o.maxDate?.getFullYear();
    return t(cW, {
        testId: o.testId,
        ref: n,
        id: o.id,
        label: r("year.label"),
        labelPosition: "top",
        invalidMessageKey: "invalidyear.msg",
        value: o.value,
        onChange: o.onChange,
        minValue: s,
        maxValue: i,
        wrapLabel: false,
        fieldWidth: "4.5rem"
    });
}));

const mW = dU(DG);

const pW = u((function e(o, s) {
    const i = NA("DatePicker");
    const l = jV();
    const d = r((() => EU(l)), [ l ]);
    const u = r((() => CU(l)), [ l ]);
    const [m, p] = n(true);
    const f = i("minmax.month.error.msg", {
        min: AU(l, o.minDate ?? new Date(1582, 0, 1)),
        max: AU(l, o.maxDate ?? new Date(9999, 11, 31))
    });
    const h = so((e => {
        const t = new Date(o.value.getFullYear(), e, 5);
        t.setFullYear(o.value.getFullYear());
        if (o.value.getFullYear().toString().length >= 4 && o.minDate && t.getTime() < o.minDate.getTime() || o.maxDate && t.getTime() > o.maxDate.getTime()) p(false); else p(true);
    }), [ o.maxDate, o.minDate, o.value ]);
    const b = c(null);
    const v = c(null);
    g(s, (() => ({
        isValid: () => {
            if (!v.current?.isValid() || !m) return false;
            return true;
        },
        focus: () => !m ? b.current?.focus() : v.current?.focus()
    })));
    const [y, x] = n(true);
    a((() => {
        setTimeout((() => {
            b.current?.focus();
        }));
        b.current?.setAttribute("data-autofocus", "true");
    }), []);
    a((() => {
        setTimeout((() => {
            h(o.value.getMonth());
            x(v.current?.isValid() ?? true);
        }), 0);
    }), [ o.value, h ]);
    const S = t(uW, {
        testId: gb(o.testId, "yearInput"),
        ref: v,
        value: uh(l) ? NU(o.value.getFullYear()) : o.value.getFullYear(),
        onChange: e => {
            const t = new Date(o.value);
            t.setFullYear(uh(l) ? OU(e) : e);
            const n = t instanceof Date && !isNaN(t.getTime());
            if (!n) {
                x(false);
                return;
            }
            o.onChange(t);
        },
        minDate: o.minDate,
        maxDate: o.maxDate
    });
    return t(iN, {
        spacing: "s",
        orientation: "horizontal"
    }, u === "before" && S, t(mW, {
        testId: gb(o.testId, "monthSelect"),
        popoverClassName: o.selectClassName,
        selectBoxRef: b,
        selectedIndex: o.value.getMonth(),
        values: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ].map((e => ({
            text: d[e]
        }))),
        onSelected: e => {
            const t = new Date(o.value);
            t.setDate(1);
            t.setMonth(e ?? 0);
            o.onChange(t);
            h(t.getMonth());
        },
        message: !m ? f : undefined,
        status: y && !m ? "alert" : undefined,
        disabled: !y,
        label: i("month.label"),
        labelPosition: "top",
        fieldMinWidth: "10rem",
        wrapLabel: false
    }), u === "after" && S);
}));

var fW = "sas_components-DatePicker-Pickers-TimePicker_container";

var gW = "sas_components-DatePicker-Pickers-TimePicker_separator";

var hW = "sas_components-DatePicker-Pickers-TimePicker_frCaLocale";

var bW = "sas_components-DatePicker-Pickers-TimePicker_milliseconds";

var vW = "sas_components-DatePicker-Pickers-TimePicker_hours";

var yW = "sas_components-DatePicker-Pickers-TimePicker_minutes";

var xW = {
    container: fW,
    separator: gW,
    frCaLocale: hW,
    milliseconds: bW,
    hours: vW,
    minutes: yW
};

const SW = u((function e(n, s) {
    const i = NA("DatePicker");
    const l = jV();
    const d = r((() => DU(l)), [ l ]);
    const u = r((() => _U(l)), [ l ]);
    const m = r((() => _W(l)), [ l ]);
    const p = r((() => kU(l)), [ l ]);
    const f = n.show24HourClock ?? d === "none";
    const g = r((() => f ? CW(24, (e => ({
        text: String(e).padStart(2, "0")
    }))) : CW(12, (e => ({
        text: String(e + 1)
    })))), [ f ]);
    const h = () => DW(n.value);
    const b = () => LW(n.value, n.showHoursDuration, n.showMinutesDuration);
    let v = f ? n.value.getHours() : (n.value.getHours() + 11) % 12;
    const y = c(null);
    const x = c(null);
    const S = c(null);
    a((() => {
        if (!S.current?.previousSibling) {
            setTimeout((() => {
                y.current?.focus();
                y.current?.setAttribute("data-autofocus", "true");
            }));
        }
    }), [ s ]);
    const w = c(false);
    const C = c(false);
    const E = r((() => v), [ v ]);
    const I = c(n.showHoursDuration || n.showMinutesDuration ? LW(n.value) : n.value.getMinutes());
    const _ = c(n.showHoursDuration || n.showMinutesDuration ? TW(n.value) : n.value.getSeconds());
    const D = !f && t(DG, {
        testId: gb(n.testId, "dayPeriodSelect"),
        popoverClassName: n.selectClassName,
        values: [ {
            text: u[0]
        }, {
            text: u[1]
        } ],
        selectedIndex: Math.floor(n.value.getHours() / 12),
        onSelected: e => {
            let t = n.value.getHours() % 12;
            if (e === 1) {
                t += 12;
            }
            const o = new Date(n.value);
            o.setHours(t);
            n.onChange(o);
        },
        ariaLabel: i("period.aria"),
        style: {
            minWidth: "auto"
        }
    });
    const L = () => {
        const e = n.showHoursDuration;
        const t = n.showMinutesDuration;
        const o = new Date(1970, 0, 1, 0, 0, 0, 0);
        let a = 0;
        let r = false;
        if (e) {
            if (y.current) {
                a = parseInt(y.current?.value, 10);
            }
        } else if (n.showHours) {
            a = E;
        }
        if (a !== null) {
            o.setHours(a);
            if (a < 0 || 1 / a === -Infinity) {
                r = true;
            }
            if (a < -754907) {
                o.setMinutes(3);
                o.setSeconds(58);
            }
        }
        if (t) {
            if (x.current) {
                const e = parseInt(x.current?.value, 10);
                if (e < 0 || 1 / e === -Infinity) {
                    r = true;
                }
                o.setMinutes(e);
            }
        } else {
            if (r) {
                o.setMinutes(o.getMinutes() - I.current);
            } else {
                o.setMinutes(I.current);
            }
        }
        if (n.showSeconds) {
            if (r) {
                o.setSeconds(o.getSeconds() - _.current);
            } else {
                o.setSeconds(_.current);
            }
        }
        if (n.showMilliseconds) {
            const e = n.value.getMilliseconds();
            if (r) {
                o.setMilliseconds(o.getMilliseconds() - e);
            } else {
                o.setMilliseconds(e);
            }
        }
        if (e || t) {
            if (UU(o)) {
                o.setHours(o.getHours() + 1);
            }
        }
        return o;
    };
    return t("div", {
        className: xW.container,
        ref: S
    }, !n.showHoursDuration && !n.showMinutesDuration && n.showDayPeriod && d === "before" && t(o, null, D, t(wW, null)), n.showHoursDuration ? t(nW, {
        ref: s,
        inputRef: y,
        testId: gb(n.testId, "hoursDurationInput"),
        className: xW.hours,
        value: h(),
        minValue: -2399999995,
        maxValue: 2399999995,
        onChange: (e, t) => {
            if (isNaN(e)) return;
            if (Math.abs(e) === 2399999995) {
                I.current = 0;
                _.current = 0;
                w.current = true;
                C.current = true;
            } else {
                w.current = false;
                C.current = false;
            }
            if (t === "onCommit") {
                const e = L();
                n.onChange(e);
            }
        },
        ariaLabel: i("hours.aria"),
        isDuration: true
    }) : n.showHours ? t(DG, {
        selectBoxRef: y,
        popoverClassName: n.selectClassName,
        testId: gb(n.testId, "hourSelect"),
        values: g,
        selectedIndex: E,
        onSelected: e => {
            v = e ?? 0;
            let t = e ?? 0;
            if (!f) {
                t = (t + 1) % 12;
                if (n.value.getHours() >= 12) {
                    t += 12;
                }
            }
            const o = new Date(n.value);
            o.setHours(t);
            n.onChange(o);
        },
        ariaLabel: i("hours.aria"),
        style: {
            minWidth: "auto"
        }
    }) : null, n.showHours && n.showMinutes ? t(wW, {
        className: ke(l.toLocaleLowerCase() === "fr-ca" && xW.frCaLocale),
        text: TU(l)
    }) : null, n.showMinutesDuration ? t(nW, {
        ref: s,
        inputRef: x,
        testId: gb(n.testId, "minutesDurationInput"),
        className: xW.minutes,
        value: b(),
        minValue: -4228629119,
        maxValue: 4228629119,
        onChange: (e, t) => {
            if (isNaN(e)) return;
            if (Math.abs(e) === 4228629119) {
                _.current = 0;
                C.current = true;
            } else {
                C.current = false;
            }
            if (t === "onCommit") {
                const e = L();
                n.onChange(e);
            }
        },
        ariaLabel: i("minutes.aria"),
        isDuration: true
    }) : n.showMinutes ? t(DG, {
        testId: gb(n.testId, "minuteSelect"),
        popoverClassName: n.selectClassName,
        values: EW,
        selectedIndex: I.current,
        onSelected: e => {
            I.current = e ?? 0;
            const t = n.showHoursDuration ? L() : new Date(n.value);
            !n.showHoursDuration && t.setMinutes(e ?? 0);
            n.onChange(t);
        },
        ariaLabel: i("minutes.aria"),
        style: {
            minWidth: "auto"
        },
        disabled: w.current
    }) : null, n.showSeconds && (n.showHours || n.showMinutes) ? t(wW, {
        className: ke(l.toLocaleLowerCase() === "fr-ca" && xW.frCaLocale),
        text: RU(l)
    }) : null, n.showSeconds ? t(DG, {
        testId: gb(n.testId, "secondSelect"),
        popoverClassName: n.selectClassName,
        values: IW,
        selectedIndex: _.current,
        onSelected: e => {
            _.current = e ?? 0;
            const t = n.showHoursDuration || n.showMinutesDuration ? L() : new Date(n.value);
            !n.showHoursDuration && !n.showMinutesDuration && t.setSeconds(e ?? 0);
            n.onChange(t);
        },
        ariaLabel: i("seconds.aria"),
        style: {
            minWidth: "auto"
        },
        disabled: C.current
    }) : null, n.showSeconds && p.trim().length > 0 ? t(wW, {
        className: ke(l.toLocaleLowerCase() === "fr-ca" && xW.frCaLocale),
        text: p
    }) : null, n.showMilliseconds && n.showSeconds && t(o, null, t(wW, {
        text: m
    }), t(nW, {
        ref: s,
        testId: gb(n.testId, "millisecondsInput"),
        className: xW.milliseconds,
        value: n.value.getMilliseconds(),
        minValue: 0,
        maxValue: 999,
        onChange: e => {
            if (isNaN(e)) return;
            const t = new Date(n.value);
            t.setMilliseconds(e);
            n.onChange(t);
        },
        ariaLabel: i("milliseconds.aria")
    })), !n.showHoursDuration && !n.showMinutesDuration && n.showDayPeriod && d === "after" && t(o, null, t(wW, null), D));
}));

const wW = ({text: e, className: o}) => t("span", {
    className: ke(xW.separator, o)
}, e ? ` ${e} ` : null);

function CW(e, t) {
    const o = [];
    for (let n = 0; n < e; ++n) {
        o[n] = t(n);
    }
    return o;
}

const EW = CW(60, (e => ({
    text: String(e).padStart(2, "0")
})));

const IW = CW(60, (e => ({
    text: String(e).padStart(2, "0")
})));

function _W(e) {
    const t = new Intl.NumberFormat(e).formatToParts(7.7);
    const o = t.find((e => e.type === "decimal"));
    return o?.value ?? ".";
}

const DW = e => {
    let t = false;
    const o = new Date(1970, 0, 1, 0, 0, 0, 0);
    const n = new Date(e);
    const a = new Date;
    if (MU(n, a)) {
        return 0;
    }
    let r = e.getHours();
    const s = e.getMinutes();
    const i = e.valueOf() - o.valueOf();
    if (i < 0) {
        t = true;
    }
    if (t) {
        if (s !== 0 && s < 30) {
            r = Math.trunc(i / 36e5);
        } else {
            r = Math.floor(Math.round(i / 36e5));
        }
        if (r < -754907) {
            n.setMinutes(e.getMinutes() - 3);
            n.setSeconds(e.getSeconds() - 58);
        }
    } else {
        r = Math.floor(i / 36e5);
    }
    return r;
};

const LW = (e, t, o) => {
    let n = false;
    const a = new Date(1970, 0, 1, 0, 0, 0, 0);
    const r = new Date(e);
    const s = new Date;
    if (MU(r, s)) {
        return 0;
    }
    let i = null;
    if (t) {
        i = DW(e);
    } else {
        i = e.getHours();
    }
    let l = e.getMinutes();
    const c = e.getSeconds();
    const d = e.valueOf() - a.valueOf();
    if (d < 0) {
        n = true;
    }
    if (t && !o) {
        if (n) {
            if (i && i < -754907) {
                r.setMinutes(r.getMinutes() - 3);
                r.setSeconds(r.getSeconds() - 58);
            }
        } else {
            i = Math.floor(d / 36e5);
        }
    } else {
        if (n) {
            if (c !== 0 && c < 30) {
                l = Math.trunc(d / 6e4);
            } else {
                l = Math.floor(Math.round(d / 6e4));
            }
            if (l < -45294476) {
                l = l + 4;
            }
        } else {
            l = Math.floor(d / 6e4);
        }
    }
    if (t && (i === 2399999995 || i === -2399999995)) return 0;
    if (!t && o) return l;
    if (n && c !== 0) {
        r.setMinutes(60 + r.getMinutes());
        r.setSeconds(60 + r.getSeconds());
    }
    if (n && r.getMinutes() !== 0) {
        l = 60 - r.getMinutes();
    } else {
        l = r.getMinutes();
    }
    return l;
};

const TW = (e, t, o) => {
    let n = false;
    const a = new Date(1970, 0, 1, 0, 0, 0, 0);
    const r = new Date(e);
    const s = new Date;
    if (MU(r, s)) {
        return 0;
    }
    let i = null;
    let l = null;
    if (t) i = DW(e);
    if (t || o) l = LW(e, t, o);
    let c = e.getSeconds();
    const d = e.valueOf() - a.valueOf();
    if (d < 0) {
        n = true;
    }
    if (t && !o) {
        if (n) {
            if (i && i < -754907) {
                r.setMinutes(r.getMinutes() - 3);
                r.setSeconds(r.getSeconds() - 58);
            }
        } else {
            i = Math.floor(d / 36e5);
        }
    } else {
        if (n) {
            if (c !== 0 && c < 30) {
                l = Math.trunc(d / 6e4);
            } else {
                l = Math.floor(Math.round(d / 6e4));
            }
            if (l < -45294476) {
                l = l + 4;
            }
        } else {
            l = Math.floor(d / 6e4);
        }
    }
    if (t && (i === 2399999995 || i === -2399999995)) return 0;
    if (o && (l === 4228629119 || l === -4228629119)) return 0;
    if (n && c !== 0) {
        r.setMinutes(60 + r.getMinutes());
        r.setSeconds(60 + r.getSeconds());
    }
    if (n && r.getSeconds() !== 0) {
        c = 60 - r.getSeconds();
    } else {
        c = r.getSeconds();
    }
    return c;
};

const RW = fb(ht);

function kW(e) {
    const t = RW();
    let o = jV();
    o = `${o}-u-nu-latn`;
    return r((() => {
        const n = typeof e === "string" ? {
            type: e
        } : e;
        switch (n.type) {
          case "dayOnly":
            return MW(new Intl.DateTimeFormat(o, {
                day: "numeric"
            }), o, "day");

          case "monthOnly":
            return MW(new Intl.DateTimeFormat(o, {
                month: "numeric"
            }), o, "month");

          case "yearOnly":
            return MW(new Intl.DateTimeFormat(o, {
                year: "numeric"
            }), o, "year");

          case "date":
            return AW(new Intl.DateTimeFormat(o, {
                dateStyle: "medium"
            }), o);

          case "month":
            return AW(new Intl.DateTimeFormat(o, {
                month: "short",
                year: "numeric"
            }), o);

          case "datetime":
            {
                const e = new Intl.DateTimeFormat(o, n.showSeconds === false || n.showHours === false ? {
                    year: "numeric",
                    month: "short",
                    day: "numeric",
                    hour: n.showHours === false ? undefined : "numeric",
                    minute: "numeric",
                    second: n.showSeconds === false ? undefined : "numeric"
                } : {
                    dateStyle: "medium",
                    timeStyle: "medium"
                });
                return n.showMilliseconds ? n.showDayPeriod === false ? PW(e, o, n.show24HourClock) : NW(e, o, n.show24HourClock) : n.showDayPeriod === false ? OW(e, o, n.show24HourClock, n.showHours, n.showMinutes) : n.showMinutes === false && n.showSeconds ? BW(e, o, n.show24HourClock, n.showHours) : n.showMinutes === false && n.showSeconds === false ? zW(e, o, n.show24HourClock, n.showHours) : AW(e, o, n.show24HourClock);
            }

          case "time":
            {
                const e = new Intl.DateTimeFormat(o, {
                    hour: n.showHours === false ? undefined : "numeric",
                    minute: "numeric",
                    second: n.showSeconds === false ? undefined : "numeric"
                });
                return n.showMilliseconds ? n.showDayPeriod === false ? PW(e, o, n.show24HourClock) : NW(e, o, n.show24HourClock) : n.showHoursDuration || n.showMinutesDuration ? FW(e, o, n.showHoursDuration, n.showMinutesDuration) : n.showDayPeriod === false ? OW(e, o, n.show24HourClock, n.showHours, n.showMinutes) : n.showMinutes === false && n.showSeconds ? BW(e, o, n.show24HourClock, n.showHours) : n.showMinutes === false && n.showSeconds === false ? zW(e, o, n.show24HourClock, n.showHours) : AW(e, o, n.show24HourClock);
            }

          case "quarter":
            {
                const e = CU(o);
                const n = new Intl.DateTimeFormat(o, {
                    year: "numeric"
                });
                return function o(a) {
                    const r = String(Math.floor(a.getMonth() / 3) + 1);
                    const s = n.format(a);
                    return e === "after" ? t("quarter.msg", {
                        quarter: r,
                        year: s
                    }) : t("quarterYearFirst.msg", {
                        year: s,
                        quarter: r
                    });
                };
            }

          case "week":
            {
                const e = CU(o);
                const n = new Intl.DateTimeFormat(o, {
                    year: "numeric"
                });
                const a = o => {
                    const a = String(jU(o));
                    const r = new Date(o);
                    r.setFullYear(VU(r, "none"));
                    const s = n.format(r);
                    return e === "after" ? t("week.msg", {
                        week: a,
                        year: s
                    }) : t("weekYearFirst.msg", {
                        year: s,
                        week: a
                    });
                };
                return a;
            }

          default:
            ZI(n);
        }
    }), [ o, e, t ]);
}

const AW = (e, t, o) => n => {
    const a = cD() === sD.Safari;
    if (a && n.getFullYear() < 1883) n = jW(n);
    const r = new Date(1582, 9, 15, 0, 0, 0);
    if (uh(t) && n.getTime() < r.getTime()) n = VW(n);
    if (o && !HW(t)) {
        return GW(e, n);
    }
    return e.format(n);
};

const MW = (e, t, o) => n => {
    const a = cD() === sD.Safari;
    if (a && n.getFullYear() < 1883) n = jW(n);
    const r = new Date(1582, 9, 15, 0, 0, 0);
    if (uh(t) && n.getTime() < r.getTime()) n = VW(n);
    return e.formatToParts(n).find((e => e.type === o))?.value ?? e.format(n);
};

const NW = (e, t, o) => n => {
    const a = cD() === sD.Safari;
    if (a && n.getFullYear() < 1883) n = jW(n);
    const r = new Date(1582, 9, 15, 0, 0, 0);
    if (uh(t) && n.getTime() < r.getTime()) n = VW(n);
    const s = e.formatToParts(n);
    const i = s.findIndex((({type: e}) => e === "second"));
    if (i !== -1 && !s.find((({type: e}) => e === "fractionalSecond"))) {
        s.splice(i + 1, 0, {
            type: "literal",
            value: _W(t)
        }, {
            type: "fractionalSecond",
            value: String(n.getMilliseconds()).padStart(3, "0")
        });
    }
    if (o && !HW(t)) {
        return GW(e, n);
    }
    return s.map((e => e.value)).join("");
};

const OW = (e, t, o, n, a) => r => {
    const s = cD() === sD.Safari;
    if (s && r.getFullYear() < 1883) r = jW(r);
    const i = new Date(1582, 9, 15, 0, 0, 0);
    if (uh(t) && r.getTime() < i.getTime()) r = VW(r);
    const l = e.formatToParts(r);
    if (a === false) {
        const e = l.findIndex((({type: e}) => e === "minute"));
        if (e !== -1) {
            const t = l.find((e => e.type === "minute"));
            l.splice(e - 1, n === false ? t?.value.length + 1 : t?.value.length);
        }
    }
    const c = l.findIndex((({type: e}) => e === "dayPeriod"));
    if (c !== -1) {
        const e = l.find((e => e.type === "dayPeriod"));
        l.splice(c, e?.value.length);
    }
    if (o && !HW(t)) {
        return GW(e, r, a === false);
    }
    return l.map((e => e.value)).join("");
};

const PW = (e, t, o) => n => {
    const a = cD() === sD.Safari;
    if (a && n.getFullYear() < 1883) n = jW(n);
    const r = new Date(1582, 9, 15, 0, 0, 0);
    if (uh(t) && n.getTime() < r.getTime()) n = VW(n);
    const s = e.formatToParts(n);
    const i = s.findIndex((({type: e}) => e === "second"));
    if (i !== -1 && !s.find((({type: e}) => e === "fractionalSecond"))) {
        s.splice(i + 1, 0, {
            type: "literal",
            value: _W(t)
        }, {
            type: "fractionalSecond",
            value: String(n.getMilliseconds()).padStart(3, "0")
        });
    }
    const l = s.findIndex((({type: e}) => e === "dayPeriod"));
    if (l !== -1) {
        const e = s.find((e => e.type === "dayPeriod"));
        s.splice(l, e?.value.length);
    }
    if (o && !HW(t)) {
        return GW(e, n);
    }
    return s.map((e => e.value)).join("");
};

const BW = (e, t, o, n) => a => {
    const r = cD() === sD.Safari;
    if (r && a.getFullYear() < 1883) a = jW(a);
    const s = new Date(1582, 9, 15, 0, 0, 0);
    if (uh(t) && a.getTime() < s.getTime()) a = VW(a);
    const i = e.formatToParts(a);
    if (o && !HW(t)) {
        return GW(e, a, true, false);
    }
    if (n === false) {
        const e = i.findIndex((({type: e}) => e === "hour"));
        if (e !== -1) {
            const t = i.find((e => e.type === "hour"));
            i.splice(e, t?.value.length);
        }
    }
    const l = i.findIndex((({type: e}) => e === "minute"));
    if (l !== -1) {
        const e = i.find((e => e.type === "minute"));
        i.splice(l, e?.value.length);
    }
    return i.map((e => e.value)).join("");
};

const zW = (e, t, o, n) => a => {
    const r = cD() === sD.Safari;
    if (r && a.getFullYear() < 1883) a = jW(a);
    const s = new Date(1582, 9, 15, 0, 0, 0);
    if (uh(t) && a.getTime() < s.getTime()) a = VW(a);
    const i = e.formatToParts(a);
    if (o && !HW(t)) {
        return GW(e, a, true, true);
    }
    if (n === false) {
        const e = i.findIndex((({type: e}) => e === "hour"));
        if (e !== -1) {
            const t = i.find((e => e.type === "hour"));
            i.splice(e, t?.value.length);
        }
    }
    const l = i.findIndex((({type: e}) => e === "minute"));
    if (l !== -1) {
        const e = i.find((e => e.type === "minute"));
        i.splice(l - 1, n === false ? e?.value.length + 1 : e?.value.length);
    }
    const c = i.findIndex((({type: e}) => e === "second"));
    if (c !== -1) {
        const e = i.find((e => e.type === "second"));
        i.splice(c, e?.value.length);
    }
    return i.map((e => e.value)).join("");
};

const FW = (e, t, o, n) => a => {
    const r = cD() === sD.Safari;
    if (r && a.getFullYear() < 1883) a = jW(a);
    const s = new Date(1582, 9, 15, 0, 0, 0);
    if (uh(t) && a.getTime() < s.getTime()) a = VW(a);
    const i = e.formatToParts(a);
    const l = i.findIndex((({type: e}) => e === "dayPeriod"));
    if (l !== -1) i.splice(l, 1);
    const c = UW(a);
    const d = i.map((e => e.value));
    const u = i.findIndex((({type: e}) => e === "hour"));
    if (u !== -1) {
        const e = DW(a);
        d[u] = `${c && e === 0 ? "-" : ""}${e.toString()}`;
    }
    const m = i.findIndex((({type: e}) => e === "minute"));
    if (m !== -1) {
        const e = LW(a, o, n);
        d[m] = String(e.toString()).padStart(2, c && !o && e === 0 ? "-" : "0");
    }
    const p = i.findIndex((({type: e}) => e === "second"));
    if (p !== -1) {
        const e = TW(a, o, n);
        d[p] = String(e.toString()).padStart(2, "0");
    }
    return d.join("").trim();
};

const jW = e => {
    const t = new Date(e.getTime());
    t.setMinutes(t.getMinutes() - 3);
    t.setSeconds(t.getSeconds() - 58);
    return t;
};

const VW = e => {
    const t = new Date(e.getTime());
    t.setDate(t.getDate() + 10);
    return t;
};

const HW = e => {
    const t = DU(e);
    return t === "none";
};

const UW = e => {
    let t = false;
    const o = new Date(1970, 0, 1, 0, 0, 0, 0);
    const n = e.valueOf() - o.valueOf();
    if (n < 0) {
        t = true;
    }
    return t;
};

const GW = (e, t, o, n) => {
    const a = e.formatToParts(t);
    let r = false;
    let s = false;
    const i = a.findIndex((({type: e}) => e === "hour"));
    const l = a.findIndex((({type: e}) => e === "minute"));
    const c = a.findIndex((({type: e}) => e === "second"));
    if (o) {
        if (l !== -1) {
            const e = a.find((e => e.type === "minute"));
            a.splice(i !== -1 ? l - 1 : l, e?.value.length);
            r = true;
        }
    }
    if (n) {
        if (c !== -1) {
            const e = a.find((e => e.type === "second"));
            a.splice(c, e?.value.length);
            s = true;
        }
    }
    const d = a.findIndex((({type: e}) => e === "dayPeriod"));
    const u = a.find((e => e.type === "dayPeriod"));
    if (i !== -1) {
        a[i].value = t.getHours().toString();
        if (a[i + 1].value === "") {
            a[i + 1].value = ":";
        }
    }
    if (d !== -1) {
        a.splice(d, u?.value.length);
    }
    if (i === -1 && (l === -1 || r) && (c === -1 || s)) {
        a.splice(a.length - 1);
    }
    return a.map((e => e.value)).join("").trim();
};

const KW = dU(DG);

const WW = u((function e(o, i) {
    const l = NA("DatePicker");
    const d = jV();
    const u = r((() => CU(d)), [ d ]);
    const m = o.minDate?.getMonth() || 0;
    const p = o.maxDate?.getMonth() || 11;
    const f = o.minDate?.getFullYear() || 1582;
    const h = o.maxDate?.getFullYear() || 9999;
    const [b, v] = n(true);
    const y = kW({
        type: "quarter"
    });
    const x = l("minmax.quarter.error.msg", {
        min: y(o.minDate ?? new Date(1582, 0, 1)),
        max: y(o.maxDate ?? new Date(9999, 11, 31))
    });
    const S = e => {
        if (e >= 0 && e < 3) return 1;
        if (e >= 3 && e < 6) return 2;
        if (e >= 6 && e < 9) return 3;
        if (e >= 9 && e < 12) return 4;
        return 1;
    };
    const w = s((e => {
        const t = S(m), n = S(p);
        if (o.value.getFullYear().toString().length >= 4 && e < t && o.value.getFullYear() <= f || e > n && o.value.getFullYear() >= h) v(false); else v(true);
    }), [ p, h, m, f, o.value ]);
    const C = c(null);
    const E = c(null);
    g(i, (() => ({
        isValid: () => {
            if (!E.current?.isValid() || !b) return false;
            return true;
        },
        focus: () => !b ? C.current?.focus() : E.current?.focus()
    })));
    const [I, _] = n(true);
    a((() => {
        setTimeout((() => {
            C.current?.focus();
        }));
        C.current?.setAttribute("data-autofocus", "true");
    }), []);
    a((() => {
        const e = S(o.value.getMonth());
        setTimeout((() => {
            w(e);
            _(E.current?.isValid() ?? true);
        }), 0);
    }), [ o.value, w ]);
    const D = t(uW, {
        testId: gb(o.testId, "yearInput"),
        ref: E,
        value: uh(d) ? NU(o.value.getFullYear()) : o.value.getFullYear(),
        onChange: e => {
            const t = new Date(o.value);
            t.setFullYear(uh(d) ? OU(e) : e);
            const n = t instanceof Date && !isNaN(t.getTime());
            if (!n) {
                _(false);
                return;
            }
            o.onChange(t);
        },
        minDate: o.minDate,
        maxDate: o.maxDate
    });
    return t(iN, {
        spacing: "s",
        orientation: "horizontal"
    }, u === "before" && D, t(KW, {
        testId: gb(o.testId, "quarterSelect"),
        popoverClassName: o.selectClassName,
        selectBoxRef: C,
        selectedIndex: Math.floor(o.value.getMonth() / 3),
        values: [ 1, 2, 3, 4 ].map((e => ({
            text: l(`quarter.${e}.menuItem.label`)
        }))),
        onSelected: e => {
            const t = new Date(o.value);
            t.setMonth((e ?? 0) * 3);
            o.onChange(t);
            w((e ?? 0) + 1);
        },
        message: !b ? x : undefined,
        status: I && !b ? "alert" : undefined,
        disabled: !I,
        label: l("quarter.label"),
        labelPosition: "top",
        wrapLabel: false
    }), u === "after" && D);
}));

const $W = dU(DG);

const YW = fb(ht);

const qW = u((function e({minDate: o = xU, maxDate: i = SU, ...l}, d) {
    const u = YW();
    const m = jV();
    const p = YI();
    const f = r((() => CU(m)), [ m ]);
    const h = FU(l.value);
    const b = jU(l.value);
    const v = VU(l.value, m);
    const y = v === VU(o, m) ? jU(o) : 1;
    const x = v === VU(i, m) ? jU(i) : h;
    const [S, w] = n(true);
    const C = kW({
        type: "week"
    });
    const E = u("minmax.week.error.msg", {
        min: C(o),
        max: C(i)
    });
    const I = s((e => {
        if (!p.current) return;
        w(l.value.getFullYear().toString().length < 4 || e >= y && e <= x);
    }), [ p, l.value, y, x ]);
    const _ = c(null);
    const D = c(null);
    g(d, (() => ({
        isValid: () => !!D.current?.isValid() && S,
        focus: () => !S ? _.current?.focus() : D.current?.focus()
    })));
    const [L, T] = n(true);
    a((() => {
        setTimeout((() => {
            _.current?.focus();
        }));
        _.current?.setAttribute("data-autofocus", "true");
    }), []);
    a((() => {
        setTimeout((() => {
            I(b);
            T(D.current?.isValid() ?? true);
        }), 0);
    }), [ b, I, m ]);
    const R = t(uW, {
        testId: gb(l.testId, "yearInput"),
        ref: D,
        value: VU(l.value, m),
        onChange: e => {
            const t = BU(b, uh(m) ? OU(e) : e);
            const o = !isNaN(t.getTime());
            if (!o) {
                T(false);
                return;
            }
            l.onChange(t);
        },
        minDate: o,
        maxDate: i
    });
    return t(iN, {
        spacing: "s",
        orientation: "horizontal"
    }, f === "before" && R, t($W, {
        testId: gb(l.testId, "weekSelect"),
        popoverClassName: l.selectClassName,
        selectBoxRef: _,
        selectedIndex: b - 1,
        values: [ ...Array(h) ].map(((e, t) => ({
            text: String(t + 1)
        }))),
        onSelected: e => {
            const t = VU(l.value, "none");
            const o = (e ?? 0) + 1;
            l.onChange(BU(o, t));
        },
        message: !S ? E : undefined,
        status: L && !S ? "alert" : undefined,
        disabled: !L,
        label: u("week.label"),
        labelPosition: "top",
        wrapLabel: false
    }), f === "after" && R);
}));

var XW = "sas_components-DatePicker-DatePicker_container";

var ZW = "sas_components-DatePicker-DatePicker_disabled";

var JW = "sas_components-DatePicker-DatePicker_alert";

var QW = "sas_components-DatePicker-DatePicker_warning";

var e$ = "sas_components-DatePicker-DatePicker_container-inner";

var t$ = "sas_components-DatePicker-DatePicker_focus-visible";

var o$ = "sas_components-DatePicker-DatePicker_input";

var n$ = "sas_components-DatePicker-DatePicker_icon-button";

var a$ = "sas_components-DatePicker-DatePicker_editable-icon-button";

var r$ = "sas_components-DatePicker-DatePicker_footer";

var s$ = "sas_components-DatePicker-DatePicker_form";

var i$ = "sas_components-DatePicker-DatePicker_input-enabled";

var l$ = "sas_components-DatePicker-DatePicker_input-error";

var c$ = "sas_components-DatePicker-DatePicker_active";

var d$ = "sas_components-DatePicker-DatePicker_error";

var u$ = "sas_components-DatePicker-DatePicker_reset-button";

var m$ = "sas_components-DatePicker-DatePicker_date-input";

var p$ = "sas_components-DatePicker-DatePicker_error-button";

var f$ = "sas_components-DatePicker-DatePicker_message";

var g$ = "sas_components-DatePicker-DatePicker_warning-message";

var h$ = "sas_components-DatePicker-DatePicker_alert-message";

var b$ = "sas_components-DatePicker-DatePicker_date-time-container";

var v$ = "sas_components-DatePicker-DatePicker_select";

var y$ = {
    container: XW,
    disabled: ZW,
    alert: JW,
    warning: QW,
    containerInner: e$,
    focusVisible: t$,
    input: o$,
    iconButton: n$,
    editableIconButton: a$,
    footer: r$,
    form: s$,
    inputEnabled: i$,
    inputError: l$,
    active: c$,
    error: d$,
    resetButton: u$,
    dateInput: m$,
    errorButton: p$,
    message: f$,
    warningMessage: g$,
    alertMessage: h$,
    dateTimeContainer: b$,
    select: v$
};

const x$ = fb(ht);

function S$(e) {
    return e.type === "time" || e.type === "datetime";
}

const w$ = e => {
    const o = x$();
    const a = jV();
    const [s, i] = n(true);
    const {CLOSE: l} = eW();
    const d = c(null);
    const u = c(null);
    const m = r((() => new Date(1582, 0, 1)), []);
    const p = r((() => new Date(9999, 11, 31)), []);
    const f = kW({
        type: e.type ?? "date",
        showMilliseconds: S$(e) && e.showMilliseconds
    });
    const g = r((() => {
        if (e.minDate && GV(e.minDate, {
            today: m
        }) && (UV(e.minDate, {
            today: p
        }) || MU(e.minDate, p))) {
            const t = new Date(e.minDate);
            if (e.type === "datetime" && !e.showMilliseconds) t.setMilliseconds(0);
            if (e.type === "month") {
                t.setDate(1);
                t.setHours(0);
                t.setMinutes(0);
                t.setSeconds(0);
            } else if (e.type === "quarter") {
                t.setDate(1);
                if (t.getMonth() >= 0 && t.getMonth() < 3) {
                    t.setMonth(0);
                } else if (t.getMonth() >= 3 && t.getMonth() < 6) {
                    t.setMonth(3);
                } else if (t.getMonth() >= 6 && t.getMonth() < 9) {
                    t.setMonth(6);
                } else if (t.getMonth() >= 9) {
                    t.setMonth(9);
                }
                t.setHours(0);
                t.setMinutes(0);
                t.setSeconds(0);
            }
            return t;
        } else return new Date(m);
    }), [ p, m, e.minDate, e.showMilliseconds, e.type ]);
    const h = r((() => {
        if (e.maxDate && (GV(e.maxDate, {
            today: m
        }) || MU(e.maxDate, m)) && UV(e.maxDate, {
            today: p
        })) {
            const t = new Date(e.maxDate);
            if (e.type === "datetime" && !e.showMilliseconds) t.setMilliseconds(0);
            if (e.type === "month") {
                t.setDate(new Date(t.getFullYear(), t.getMonth() + 1, 0).getDate());
                t.setHours(23);
                t.setMinutes(59);
                t.setSeconds(59);
            } else if (e.type === "quarter") {
                t.setDate(1);
                if (t.getMonth() >= 0 && t.getMonth() < 3) {
                    t.setMonth(2);
                } else if (t.getMonth() >= 3 && t.getMonth() < 6) {
                    t.setMonth(5);
                } else if (t.getMonth() >= 6 && t.getMonth() < 9) {
                    t.setMonth(8);
                } else if (t.getMonth() >= 9) {
                    t.setMonth(11);
                }
                t.setDate(new Date(t.getFullYear(), t.getMonth() + 1, 0).getDate());
                t.setHours(23);
                t.setMinutes(59);
                t.setSeconds(59);
            }
            return t;
        } else return new Date(p);
    }), [ p, m, e.maxDate, e.showMilliseconds, e.type ]);
    const b = t => {
        if (e.type !== "datetime") return true;
        const o = new Date(t);
        if (!e.showMilliseconds) o.setMilliseconds(0);
        if (o.getTime() < g.getTime() || o.getTime() > h.getTime()) return false;
        return true;
    };
    const v = e.value ?? new Date;
    const y = e.showHours ?? true;
    const x = e.showMinutes ?? true;
    const S = e.showSeconds ?? true;
    const w = e.showDayPeriod ?? true;
    let C;
    let E = o("date.dialog.aria");
    switch (e.type) {
      case null:
      case undefined:
      case "date":
        E = o("date.dialog.aria");
        C = t(TK, Ee({}, e, {
            value: v,
            onChange: t => {
                e.onChange?.({
                    value: t.value ?? new Date
                });
            },
            ref: d
        }));
        break;

      case "datetime":
        E = o("datetime.dialog.aria");
        C = t(iN, {
            orientation: "vertical",
            className: y$.dateTimeContainer
        }, t(TK, Ee({}, e, {
            value: v,
            onChange: t => {
                const o = new Date(t.value ?? new Date);
                o.setHours(v.getHours());
                o.setMinutes(v.getMinutes());
                o.setSeconds(v.getSeconds());
                o.setMilliseconds(v.getMilliseconds());
                if (!e.showMilliseconds) o.setMilliseconds(0);
                e.onChange?.({
                    value: o
                });
            },
            ref: d
        })), t(SW, {
            selectClassName: e.selectClassName,
            testId: e.testId,
            ref: u,
            value: v,
            onChange: t => {
                e.onChange?.({
                    value: t
                });
            },
            showMilliseconds: !!e.showMilliseconds,
            showHours: y,
            showMinutes: x,
            showSeconds: S,
            showDayPeriod: w,
            show24HourClock: e.show24HourClock
        }));
        break;

      case "month":
        E = o("month.dialog.aria");
        C = t(pW, {
            testId: e.testId,
            selectClassName: e.selectClassName,
            value: v,
            onChange: t => {
                e.onChange?.({
                    value: t
                });
            },
            ref: d,
            minDate: g,
            maxDate: h
        });
        break;

      case "quarter":
        E = o("quarter.dialog.aria");
        C = t(WW, {
            testId: e.testId,
            selectClassName: e.selectClassName,
            value: v,
            onChange: t => {
                e.onChange?.({
                    value: t
                });
            },
            ref: d,
            minDate: g,
            maxDate: h
        });
        break;

      case "week":
        E = o("week.dialog.aria");
        C = t(qW, {
            testId: e.testId,
            selectClassName: e.selectClassName,
            value: v,
            onChange: t => {
                e.onChange?.({
                    value: t
                });
            },
            ref: d,
            minDate: g,
            maxDate: h
        });
        break;

      case "time":
        E = o("time.dialog.aria");
        C = t(SW, {
            testId: e.testId,
            selectClassName: e.selectClassName,
            ref: d,
            value: v,
            onChange: t => {
                e.onChange?.({
                    value: t
                });
            },
            showMilliseconds: !!e.showMilliseconds,
            showHours: y,
            showMinutes: x,
            showSeconds: S,
            showDayPeriod: w,
            showHoursDuration: !!e.showHoursDuration,
            showMinutesDuration: !!e.showMinutesDuration,
            show24HourClock: e.show24HourClock
        });
        break;
    }
    const I = r((() => {
        const t = o("minmax.month.error.msg", {
            min: AU(a, g),
            max: AU(a, h)
        });
        const n = o("minmax.quarter.error.msg", {
            min: (e.format ?? f)(g),
            max: (e.format ?? f)(h)
        });
        const r = o("minmax.date.error.msg", {
            min: (e.format ?? f)(g),
            max: (e.format ?? f)(h)
        });
        const s = o("minmax.datetime.error.msg", {
            min: (e.format ?? f)(g),
            max: (e.format ?? f)(h)
        });
        switch (e.type) {
          case "month":
            return t;

          case "quarter":
            return n;

          case "datetime":
            return s;

          default:
            return r;
        }
    }), [ f, a, o, h, g, e.format, e.type ]);
    return t(zO, {
        referenceElementRef: e.referenceElementRef,
        isOpen: e.isOpen,
        placement: "auto",
        testId: gb(e.testId, "popper"),
        isModal: true,
        onEscape: () => {
            e.onEscape?.();
        },
        ariaLabel: E,
        role: "dialog",
        innerClassName: e.popoverClassName,
        overlayClassName: e.popoverOverlayClassName,
        disableContextMenu: true,
        footer: t("div", {
            className: y$.footer
        }, t(QM, {
            text: o("ok.button.label"),
            testId: "datePickerPopperOkButton",
            onPress: () => {
                if (d.current && !d.current.isValid()) {
                    d.current.focus();
                } else if (u.current && !u.current.isValid()) {
                    u.current.focus();
                } else if (!b(v)) {
                    i(false);
                } else {
                    e.onOkPress?.();
                }
            }
        }), t(oW, {
            testId: "datePickerErrorMessageDialog",
            type: "error",
            isOpen: !s,
            title: o("datetime.messagedialog.title"),
            text: I,
            dismissAction: {
                text: l,
                onPress: () => {
                    i(true);
                },
                isDefault: true
            }
        }), t(QM, {
            text: o("cancel.button.label"),
            testId: "datePickerPopperCancelButton",
            onPress: () => {
                e.onCancelPress?.();
            }
        }))
    }, C);
};

const C$ = fb(ht);

const E$ = MA("DatePicker");

const I$ = MA("DatePicker-ValidationMessage");

function _$(e) {
    return e.type === "time" || e.type === "datetime";
}

const D$ = u((function e(i, l) {
    const d = kW({
        type: i.type ?? "date",
        showMilliseconds: _$(i) && i.showMilliseconds,
        showHours: _$(i) && i.showHours,
        showMinutes: _$(i) && i.showMinutes,
        showSeconds: _$(i) && i.showSeconds,
        showDayPeriod: _$(i) && i.showDayPeriod,
        showHoursDuration: _$(i) && i.showHoursDuration,
        showMinutesDuration: _$(i) && i.showMinutesDuration,
        show24HourClock: _$(i) && i.show24HourClock
    });
    const u = RH({
        isRequired: true,
        initialValue: i.value ? (i.format ?? d)(i.value) : ""
    });
    const p = c(null);
    const f = i.type ?? "date";
    const h = i.closePickerOnTodayButtonPress ?? f === "date" ? true : false;
    const b = C$();
    const v = jV();
    const y = YI();
    const x = r((() => new Date(1582, 0, 1)), []);
    const S = r((() => new Date(9999, 11, 31)), []);
    const w = r((() => {
        if (i.minDate && GV(i.minDate, {
            today: x
        }) && (UV(i.minDate, {
            today: S
        }) || MU(i.minDate, S))) {
            const e = new Date(i.minDate);
            if (i.type === "datetime" && !i.showMilliseconds) e.setMilliseconds(0);
            if (i.type === "month") {
                e.setDate(1);
                e.setHours(0);
                e.setMinutes(0);
                e.setSeconds(0);
            } else if (i.type === "quarter") {
                e.setDate(1);
                if (e.getMonth() >= 0 && e.getMonth() < 3) {
                    e.setMonth(0);
                } else if (e.getMonth() >= 3 && e.getMonth() < 6) {
                    e.setMonth(3);
                } else if (e.getMonth() >= 6 && e.getMonth() < 9) {
                    e.setMonth(6);
                } else if (e.getMonth() >= 9) {
                    e.setMonth(9);
                }
                e.setHours(0);
                e.setMinutes(0);
                e.setSeconds(0);
            }
            return e;
        } else return new Date(x);
    }), [ S, x, i.minDate, i.showMilliseconds, i.type ]);
    const C = r((() => {
        if (i.maxDate && (GV(i.maxDate, {
            today: x
        }) || MU(i.maxDate, x)) && UV(i.maxDate, {
            today: S
        })) {
            const e = new Date(i.maxDate);
            if (i.type === "datetime" && !i.showMilliseconds) e.setMilliseconds(0);
            if (i.type === "month") {
                e.setDate(new Date(e.getFullYear(), e.getMonth() + 1, 0).getDate());
                e.setHours(23);
                e.setMinutes(59);
                e.setSeconds(59);
            } else if (i.type === "quarter") {
                e.setDate(1);
                if (e.getMonth() >= 0 && e.getMonth() < 3) {
                    e.setMonth(2);
                } else if (e.getMonth() >= 3 && e.getMonth() < 6) {
                    e.setMonth(5);
                } else if (e.getMonth() >= 6 && e.getMonth() < 9) {
                    e.setMonth(8);
                } else if (e.getMonth() >= 9) {
                    e.setMonth(11);
                }
                e.setDate(new Date(e.getFullYear(), e.getMonth() + 1, 0).getDate());
                e.setHours(23);
                e.setMinutes(59);
                e.setSeconds(59);
            }
            return e;
        } else return new Date(S);
    }), [ S, x, i.maxDate, i.showMilliseconds, i.type ]);
    const E = s((e => UV(e, {
        today: w
    })), [ w ]);
    const I = s((e => GV(e, {
        today: C
    })), [ C ]);
    const [_, D] = n("unfocused");
    const [L, T] = n(i.value ? (i.format ?? d)(i.value) : "");
    const [R, k] = n(i.value ?? new Date);
    {
        const [e, t] = n(i.value);
        if ((!!e ? e.getTime() : 0) !== (!!i.value ? i.value.getTime() : 0)) {
            t(i.value);
            k(i.value ?? new Date);
            let e = "";
            if (i.editable) {
                if (i.value === null) {
                    T("");
                    e = "";
                } else if (_ === "editing") {
                    T(L);
                    e = L;
                } else {
                    e = (i.format ?? d)(i.value);
                    T(e);
                }
            } else {
                if (i.value === null) {
                    T("");
                    e = "";
                } else {
                    e = (i.format ?? d)(i.value);
                    T(e);
                }
            }
            const o = {
                value: e
            };
            u.handleChange(o);
        }
    }
    let A;
    let M = b("date.role.aria");
    let N = b("date.button.tooltip.label");
    switch (i.type) {
      case null:
      case undefined:
      case "date":
        A = hT;
        N = b("date.button.tooltip.label");
        M = b("date.role.aria");
        break;

      case "datetime":
        A = vT;
        N = b("datetime.button.tooltip.label");
        M = b("datetime.role.aria");
        break;

      case "month":
        A = hT;
        N = b("month.button.tooltip.label");
        M = b("month.role.aria");
        break;

      case "quarter":
        A = hT;
        N = b("quarter.button.tooltip.label");
        M = b("quarter.role.aria");
        break;

      case "week":
        A = hT;
        N = b("week.button.tooltip.label");
        M = b("week.role.aria");
        break;

      case "time":
        A = mk;
        N = b("time.button.tooltip.label");
        M = b("time.role.aria");
        break;

      default:
        ZI(i);
    }
    const O = c(null);
    const P = c(null);
    const [B, z] = n(true);
    const [F, j] = n(true);
    const [V, H] = n(true);
    const U = c(i.status);
    const G = s((e => {
        const t = new Date;
        if (i.type === "quarter" || i.type === "week") {
            const o = CU(v);
            const n = e.split(" ");
            const a = o === "after" ? n[1] : n[0];
            const r = o === "after" ? n[0].substring(1) : n[1].substring(1);
            t.setDate(1);
            if (i.type === "quarter") {
                if (r === "1") {
                    t.setMonth(0);
                } else if (r === "2") {
                    t.setMonth(3);
                } else if (r === "3") {
                    t.setMonth(6);
                } else if (r === "4") {
                    t.setMonth(9);
                }
                t.setFullYear(parseInt(a));
                return t.toString();
            } else if (i.type === "week") {
                return BU(parseInt(r), parseInt(a)).toString();
            }
        } else if (i.type === "time") {
            const o = DU(v);
            const n = o === "none";
            const a = _U(v);
            const r = LU(v);
            const s = e.split(r);
            const l = n ? null : o === "before" ? s[0].split(" ")[0] : s[2].split(" ")[1];
            let c = parseInt(o === "before" ? s[0].split(" ")[1] : s[0]);
            const d = parseInt(o === "after" ? s[2].split(" ")[0] : s[2]);
            const u = i.showMilliseconds ? parseInt(o === "after" ? s[2].split(".")[1].split(" ")[0] : s[2].split(".")[1]) : 0;
            if (l && l === a[0] && c === 12) {
                c = 0;
            } else if (l && l === a[1] && c !== 12) {
                c += 12;
            }
            t.setHours(c);
            t.setMinutes(parseInt(s[1]));
            t.setSeconds(d);
            t.setMilliseconds(u);
            return t.toJSON();
        }
        return "";
    }), [ v, i.showMilliseconds, i.type ]);
    const K = e => {
        if (!y.current) return;
        T(e.value);
        if (i.editable) {
            u.handleChange(e);
            D((e => e !== "unfocused" ? "editing" : e));
            if (e.value === "") i.onChange({
                value: null
            });
        } else if (e.value === "") {
            Y.current?.focus();
            k(new Date);
            H(true);
            i.onChange({
                value: null
            });
        }
    };
    const W = s((e => {
        if (!y.current) return;
        const t = i.editable && (i.type === "quarter" || i.type === "week" || i.type === "time") ? G(e.value) : e.value;
        let o = new Date(t);
        if (!isNaN(o.getTime())) {
            if (E(o) || I(o)) {
                H(false);
                j(false);
                o = new Date;
            } else {
                H(true);
                j(true);
            }
            k(o);
            i.onChange({
                value: o
            });
        } else {
            if (i.required && e.value === "") {
                j(false);
            } else {
                H(true);
                j(true);
            }
        }
        D((e => e === "editing" ? "committed" : e));
    }), [ G, I, E, y, i ]);
    const $ = () => {
        if (!y.current) return;
        if (i.required) {
            const e = TH({
                value: L,
                isRequired: true
            });
            j(!e.isError);
        } else if (i.status) {
            j(false);
        } else j(true);
    };
    const Y = c(null);
    g(l, (() => ({
        focus() {
            Y.current?.focus();
        }
    })));
    const q = c(undefined);
    const [X, Z] = m(((e, t) => {
        switch (t.type) {
          case "dayStep":
            {
                const o = new Date(e);
                if (t.direction === "next") {
                    o.setDate(o.getDate() + 1);
                } else if (t.direction === "previous") {
                    o.setDate(o.getDate() - 1);
                }
                if (E(o) || I(o)) return new Date(e);
                i.onChange({
                    value: o
                });
                return o;
            }

          case "monthStep":
            {
                const o = new Date(e);
                if (t.direction === "next") {
                    o.setMonth(o.getMonth() + 1);
                } else if (t.direction === "previous") {
                    o.setMonth(o.getMonth() - 1);
                }
                if (E(o) || I(o)) return new Date(e);
                i.onChange({
                    value: o
                });
                return o;
            }

          case "yearStep":
            {
                const o = new Date(e);
                if (t.direction === "next") {
                    o.setFullYear(o.getFullYear() + 1);
                } else if (t.direction === "previous") {
                    o.setFullYear(o.getFullYear() - 1);
                }
                if (E(o) || I(o)) return new Date(e);
                i.onChange({
                    value: o
                });
                return o;
            }

          case "hourStep":
            {
                const o = new Date(e);
                if (t.direction === "next") {
                    o.setHours(o.getHours() + 1);
                } else if (t.direction === "previous") {
                    o.setHours(o.getHours() - 1);
                }
                i.onChange({
                    value: o
                });
                return o;
            }

          case "minuteStep":
            {
                const o = new Date(e);
                if (t.direction === "next") {
                    o.setMinutes(o.getMinutes() + 1);
                } else if (t.direction === "previous") {
                    o.setMinutes(o.getMinutes() - 1);
                }
                i.onChange({
                    value: o
                });
                return o;
            }

          case "secondStep":
            {
                const o = new Date(e);
                if (t.direction === "next") {
                    o.setSeconds(o.getSeconds() + 1);
                } else if (t.direction === "previous") {
                    o.setSeconds(o.getSeconds() - 1);
                }
                i.onChange({
                    value: o
                });
                return o;
            }

          case "selection":
            return t.value;

          default:
            return e;
        }
    }), R);
    a((() => {
        if (i.value && UV(new Date(i.value), {
            today: w
        }) || i.value && GV(new Date(i.value), {
            today: C
        })) {
            H(false);
        } else {
            H(true);
        }
        const e = () => {
            if (!i.readOnly && !i.editable) z((e => !e));
        };
        const t = () => {
            if (!y.current) return;
            i.required && u.handleBlur();
            setTimeout((() => D("unfocused")), 0);
        };
        const o = e => {
            if (i.readOnly || i.disabled) return;
            if (i.editable) D((e => e !== "committed" ? "editing" : e));
            const t = e.key;
            const o = e.altKey;
            const n = e.ctrlKey;
            const a = e.shiftKey;
            switch (t) {
              case " ":
                if (!i.editable) z((e => !e));
                break;

              case "Spacebar":
                if (!i.editable) z((e => !e));
                break;

              case "Enter":
                e.preventDefault();
                if (!i.editable) z((e => !e)); else {
                    const e = {
                        value: L
                    };
                    W(e);
                }
                break;

              case "ArrowUp":
                if (o) z((e => !e));
                break;

              case "ArrowDown":
                if (o) z((e => !e));
                break;

              case "PageUp":
                if (e.target.value === "") return;
                if (n && a && i.type === "time") Z({
                    type: "secondStep",
                    direction: "previous"
                }); else if (n && a) Z({
                    type: "yearStep",
                    direction: "previous"
                }); else if (a && i.type === "time") Z({
                    type: "minuteStep",
                    direction: "previous"
                }); else if (a) Z({
                    type: "monthStep",
                    direction: "previous"
                }); else if (i.type === "time") Z({
                    type: "hourStep",
                    direction: "previous"
                }); else Z({
                    type: "dayStep",
                    direction: "previous"
                });
                e.preventDefault();
                break;

              case "PageDown":
                if (e.target.value === "") return;
                if (n && a && i.type === "time") Z({
                    type: "secondStep",
                    direction: "next"
                }); else if (n && a) Z({
                    type: "yearStep",
                    direction: "next"
                }); else if (a && i.type === "time") Z({
                    type: "minuteStep",
                    direction: "next"
                }); else if (a) Z({
                    type: "monthStep",
                    direction: "next"
                }); else if (i.type === "time") Z({
                    type: "hourStep",
                    direction: "next"
                }); else Z({
                    type: "dayStep",
                    direction: "next"
                });
                e.preventDefault();
                break;

              case "Escape":
                i.onCancel?.();
                break;

              case "Delete":
              case "Backspace":
                if (!i.enableResetButton && !i.editable) e.preventDefault();
                break;

              default:
                if (!i.editable || _ !== "editing") {
                    if (e.target.value === "") return;
                    if (R !== i.value) i.onChange({
                        value: new Date(R)
                    });
                }
                break;
            }
        };
        const n = Y.current;
        n?.addEventListener("keydown", o);
        n?.addEventListener("mouseup", e);
        n?.addEventListener("focusout", t);
        if (!i.editable) Y.current?.setAttribute("aria-readonly", "true");
        return function() {
            n?.removeEventListener("keydown", o);
            n?.removeEventListener("mouseup", e);
            n?.removeEventListener("focusout", t);
        };
    }), [ i, X, R, L, d, w, C, u, W, _, y ]);
    const J = I$();
    const Q = E$();
    const ee = [];
    if (!i.disabled) {
        ee.push(Q);
        if (!i.editable) ee.push(J);
    }
    if (i.ariaDescribedBy) {
        if (typeof i.ariaDescribedBy === "string") {
            ee.push(i.ariaDescribedBy);
        } else {
            ee.push(...i.ariaDescribedBy);
        }
    }
    const te = r((() => {
        const e = b("minmax.month.error.msg", {
            min: AU(v, w),
            max: AU(v, C)
        });
        const t = b("minmax.quarter.error.msg", {
            min: (i.format ?? d)(w),
            max: (i.format ?? d)(C)
        });
        const o = b("minmax.date.error.msg", {
            min: (i.format ?? d)(w),
            max: (i.format ?? d)(C)
        });
        const n = b("minmax.datetime.error.msg", {
            min: (i.format ?? d)(w),
            max: (i.format ?? d)(C)
        });
        switch (i.type) {
          case "month":
            return e;

          case "quarter":
            return t;

          case "datetime":
            return n;

          default:
            return o;
        }
    }), [ d, v, b, C, w, i.format, i.type ]);
    const oe = e => {
        if (i.showHoursDuration || i.showMinutesDuration) return false;
        if (E(e) || I(e)) return true;
        if (i.disabledDates) {
            return i.disabledDates.some((t => MU(t, e)));
        }
        if (i.enabledDates) {
            return i.enabledDates.every((t => !MU(t, e)));
        }
        return false;
    };
    a((() => {
        if (i.status === "alert") {
            j(false);
        } else if (i.status === null) {
            j(true);
        }
    }), [ i.status ]);
    const ne = s((() => !V ? i.message ?? te : i.message ?? b(i.status === "warning" ? "warning.msg" : "required.error.msg")), [ V, b, te, i.message, i.status ]);
    const ae = s((() => {
        if (!y.current) return;
        const e = i.status ? i.status : i.required ? !F || !V ? "alert" : u.errors?.status : !i.showHoursDuration && !i.showMinutesDuration && (!F || !V) ? "alert" : undefined;
        if (e === U.current) return e;
        U.current = e;
        if (e === "alert") {
            const e = ne();
            setTimeout((() => i.onStatusChange?.({
                status: "alert",
                message: e
            })), 0);
        } else {
            setTimeout((() => i.onStatusChange?.({
                status: undefined,
                message: ""
            })), 0);
        }
        return e;
    }), [ y, i, F, V, u.errors?.status, ne ]);
    const re = typeof i.enableResetButton === "boolean" ? i.enableResetButton : i.enableResetButton === undefined && !i.editable;
    const [se, ie] = n(false);
    const le = C_();
    const {density: ce} = YA();
    const de = jD(L_.FOCUS_OVERRIDE) === "true";
    const ue = T$(le, {
        isCustomFocusTurnedOn: de,
        disabled: i.disabled ?? false,
        readOnly: i.readOnly ?? false
    });
    return i.readOnly ? t("div", {
        className: ke(y$.container, i.className),
        style: {
            ...ue,
            ...i.style
        },
        tabIndex: -1,
        "data-testid": i.testId,
        role: "group",
        "aria-roledescription": M,
        "aria-disabled": i.disabled
    }, t("div", {
        className: ke(y$.containerInner, se && y$.focusVisible)
    }, t(SH, {
        testId: gb(i.testId, "input"),
        ref: Y,
        id: i.id,
        className: ke(y$.dateInput),
        value: i.value ? (i.format ?? d)(i.value) : "",
        required: i.required,
        editable: false,
        disabled: i.disabled,
        message: !V ? i.message ?? te : i.message ?? b(i.status === "warning" ? "warning.msg" : "required.error.msg"),
        status: i.status ?? i.required ? u.errors?.status : undefined,
        ariaLabel: i.ariaLabel,
        ariaLabelledBy: i.ariaLabelledBy,
        ariaDescribedBy: ee,
        onChange: () => {},
        commitOnEnterInDialog: true,
        onFocus: () => ie(true),
        onBlur: () => ie(false)
    }))) : t(o, null, t("div", {
        className: ke(y$.container, i.disabled && y$.disabled, ae() === "alert" && y$.alert, ae() === "warning" && y$.warning, i.className),
        style: {
            ...ue,
            ...i.style
        },
        tabIndex: -1,
        onFocus: () => {
            if (i.disabled) Y.current?.setAttribute("aria-roledescription", M);
            if (q.current !== undefined) {
                clearTimeout(q.current);
                q.current = undefined;
            } else {
                i.onFocusIn?.();
            }
            if (document.activeElement === P.current || document.activeElement !== Y.current) {
                ie(false);
            } else {
                ie(true);
            }
        },
        onBlur: e => {
            if (!i.editable) $();
            if (q.current !== undefined || e.target === document.activeElement) {
                return;
            }
            if (!B) {
                setTimeout((() => ie(false)), 0);
                return;
            }
            q.current = setTimeout((() => {
                i.onFocusOut?.(p.current?.isValid());
                q.current = undefined;
            }));
            ie(false);
        },
        "data-testid": i.testId,
        role: "group",
        "aria-roledescription": M,
        "aria-disabled": i.disabled
    }, t("div", {
        className: ke(y$.containerInner, se && y$.focusVisible)
    }, !i.disabled ? t(bO, {
        id: Q
    }, b(i.editable ? "edit.aria" : "nonedit.aria")) : null, t(hH, {
        className: y$.input,
        testId: gb(i.testId, "input"),
        ref: Y,
        style: {
            "--input-min-width": "0",
            ...ce === "high" && {
                "--input-min-height": "calc(1.5rem - 2px)"
            }
        },
        id: i.id,
        value: i.editable ? L : i.value ? (i.format ?? d)(i.value) : "",
        showClearButton: re,
        clearButtonRef: P,
        clearButtonTooltip: b("date.resetButton.tooltip.label"),
        clearButtonAriaLabel: b("date.resetButton.tooltip.label"),
        required: i.required,
        editable: i.editable === true ? true : false,
        variant: "composite",
        onChange: K,
        onCommit: i.editable ? W : () => {},
        disabled: i.disabled,
        message: ne(),
        status: ae(),
        ariaLabel: i.ariaLabel,
        ariaLabelledBy: i.ariaLabelledBy,
        ariaDescribedBy: ee,
        commitOnEnterInDialog: i.editable !== true,
        placeholder: i.inputPlaceholder
    }), t(QM, {
        className: ke(y$.iconButton, {
            [y$.editableIconButton]: i.editable
        }),
        ref: O,
        icon: {
            icon: A,
            tooltip: N
        },
        disabled: i.disabled,
        onPress: () => {
            z((e => !e));
        },
        focusable: false,
        variant: oN.Light,
        testId: gb(i.testId, "iconButton")
    }))), t(w$, Ee({}, i, {
        isOpen: !B && !i.disabled,
        value: R,
        onChange: ({value: e}) => {
            setTimeout((() => {
                if (!y.current) return;
                const t = e ?? new Date;
                if (f === "datetime" || f === "time" && !i.showHoursDuration && !i.showMinutesDuration) {
                    if (i.showHours === false) t.setHours(0);
                    if (i.showMinutes === false) t.setMinutes(0);
                    if (i.showSeconds === false) t.setSeconds(0);
                    if (!i.showMilliseconds) t.setMilliseconds(0);
                }
                k(t);
            }), 0);
        },
        onEscape: () => {
            z(true);
            k(i.value ?? new Date);
        },
        onOkPress: () => {
            z(true);
            if (!oe(R)) {
                const e = new Date(R);
                if (f === "datetime" || f === "time" && !i.showHoursDuration && !i.showMinutesDuration) {
                    if (i.showHours === false) e.setHours(0);
                    if (i.showMinutes === false) e.setMinutes(0);
                    if (i.showSeconds === false) e.setSeconds(0);
                    if (!i.showMilliseconds) e.setMilliseconds(0);
                }
                if (e.getTime() !== R.getTime()) {
                    k(e);
                }
                Z({
                    type: "selection",
                    value: e
                });
                i.onChange({
                    value: e
                });
                T((i.format ?? d)(e));
                if (i.required) K({
                    value: (i.format ?? d)(e)
                });
                j(true);
                H(true);
            }
        },
        onCancelPress: () => {
            z(true);
            k(i.value ?? new Date);
        },
        onTodayButtonPress: e => {
            if (f !== "date" && f !== "datetime") return;
            h && z(true);
            if (!oe(e) && h) {
                const t = new Date(e);
                Z({
                    type: "selection",
                    value: t
                });
                i.onChange({
                    value: e
                });
                T((i.format ?? d)(e));
                if (i.required) K({
                    value: (i.format ?? d)(e)
                });
                j(true);
                H(true);
            }
            i.onTodayButtonPress?.(e);
            setTimeout((() => Y.current?.focus()), 0);
        },
        referenceElementRef: O
    })));
}));

const L$ = dU(D$);

const T$ = (e, t) => {
    let o;
    let n;
    if (e.themeVariant !== "high-contrast" && !t?.isCustomFocusTurnedOn && !t?.disabled && !t?.readOnly) {
        o = "none";
    } else {
        o = "var(--focus-light-bg)";
        n = "calc(-1 * var(--focus-width))";
    }
    const a = t?.readOnly ? {
        bd: "transparent",
        bg: e.tokensExperimental["color-action-background-control-normal"],
        fg: e.tokensExperimental["color-action-text-control-normal"],
        "hover-bd": "var(--date-picker-bd)",
        "hover-bg": "var(--date-picker-bg)",
        "hover-fg": "var(--date-picker-fg)",
        "active-bd": "var(--date-picker-bd)",
        "active-bg": "var(--date-picker-bg)",
        "active-fg": "var(--date-picker-fg)"
    } : {
        bd: e.tokensExperimental["color-action-border-control-normal"],
        bg: e.tokensExperimental["color-action-background-control-normal"],
        fg: e.tokensExperimental["color-action-text-control-normal"],
        "hover-bd": e.tokensExperimental["color-action-border-control-hover"],
        "hover-bg": e.tokensExperimental["color-action-background-control-hover"],
        "hover-fg": e.tokensExperimental["color-action-text-control-hover"],
        "active-bd": e.tokensExperimental["color-action-border-control-selected"],
        "active-bg": e.tokensExperimental["color-action-background-control-selected"],
        "active-fg": e.tokensExperimental["color-action-text-control-selected"]
    };
    return {
        ...__({
            ...a,
            "disabled-fg": e.tokensExperimental["color-action-text-control-disabled"],
            "disabled-bd": e.tokensExperimental["color-action-border-control-disabled"],
            "disabled-bg": e.tokensExperimental["color-action-background-control-disabled"],
            "focus-outline": o,
            "focus-outline-offset": n,
            "alert-bg": e.tokensExperimental["color-action-background-control-alert"],
            "alert-bd": e.tokensExperimental["color-action-border-control-alert"],
            "warning-bg": e.tokensExperimental["color-action-background-control-warning"],
            "warning-bd": e.tokensExperimental["color-action-border-control-warning"]
        }, "date-picker")
    };
};

const R$ = dU(D$);

const k$ = fb(ct);

const A$ = ({onOk: e, onCancel: o, testId: a}) => {
    const r = k$();
    const {CANCEL: s, OK: i} = eW();
    const l = 1e3 * 60 * 60 * 24 * 7;
    const [c, d] = n(new Date(Date.now() - l));
    const [u, m] = n(new Date(Date.now()));
    const [p, f] = n(u);
    const [g, h] = n(c);
    const b = {
        text: i,
        isDefault: true,
        disabled: false,
        onPress: () => {
            e(c, u);
        }
    };
    const v = {
        text: s,
        onPress: () => {
            o();
        }
    };
    return t(zF, {
        resizable: false,
        size: {
            width: 200
        },
        isOpen: true,
        title: r("datePicker.dialog.title"),
        firstAction: b,
        dismissAction: v,
        testId: gb(a, "dialog")
    }, t(iN, {
        orientation: "vertical",
        spacing: "m"
    }, t(R$, {
        labelPosition: "top",
        label: r("datePicker.startDate.label"),
        value: c,
        maxDate: p,
        onChange: e => {
            if (!!e.value) {
                d(e.value);
                h(e.value);
            }
        },
        testId: gb(a, "startdatepicker")
    }), t(R$, {
        label: r("datePicker.endDate.label"),
        labelPosition: "top",
        value: u,
        minDate: g,
        maxDate: new Date(Date.now()),
        onChange: e => {
            if (!!e.value) {
                m(e.value);
                f(e.value);
            }
        },
        testId: gb(a, "enddatepicker")
    })));
};

const M$ = ":";

const N$ = " ";

const O$ = "+";

const P$ = "-";

const B$ = "Previous day";

const z$ = " {  }";

const F$ = " {  }";

const j$ = -2;

const V$ = new RegExp('[\\[\\{\\("]');

const H$ = ({currentText: e, selectionStartPosition: t = -1, selectionEndPosition: o = -1, facetsForCurrentIndices: n}) => {
    const a = r((() => {
        if (n) {
            return U$({
                currentText: e,
                allFacets: n,
                selectionStartPosition: t,
                selectionEndPosition: o
            });
        }
        return null;
    }), [ e, n, t, o ]);
    return a;
};

const U$ = e => {
    if (e.currentText === undefined) return null;
    const t = {
        startIndex: 0,
        endIndex: 0,
        value: "",
        parsedFacet: "",
        facetInfo: null,
        suggestionType: "facet"
    };
    const {currentText: o, allFacets: n, selectionStartPosition: a} = e;
    const r = a < 0 || a >= o.length ? o : o.substring(0, a);
    let s = "none";
    const i = null;
    const [l, c] = G$(r);
    if (c !== undefined) {
        const e = r.substring(0, l > -1 ? l : undefined);
        const o = r.substring(l > -1 ? l + 1 : 0);
        const a = e.lastIndexOf(M$);
        const c = e.split(M$);
        if (a > -1) {
            s = W$(l > -1 ? r.charAt(l) : "");
            const e = c[c.length - 2].trim().split(N$);
            const d = s === "none" ? o.trimLeft().split(N$) : [];
            if (d.length <= 1) {
                if ($$({
                    sectionInfo: t,
                    allFacets: n,
                    currentText: r,
                    facetEndTokenIndex: a,
                    parentFacetInfo: i,
                    groupingTokenType: s,
                    partsBeforeLastFacetEndToken: e,
                    untrimmedValue: r.substring(l > -1 ? l : 0)
                })) {
                    return t;
                }
            }
            q$({
                sectionInfo: t,
                allFacets: n,
                currentText: r,
                groupingTokenType: s,
                parentFacetInfo: i,
                partsBeforeLastFacetEndToken: e,
                tokensAfterFacet: d,
                untrimmedValue: r.substring(l > -1 ? l : 0),
                facetEndTokenIndex: a
            });
            return t;
        }
    }
    const d = r.lastIndexOf(M$);
    s = "none";
    const u = r.split(M$);
    if (d > -1) {
        const e = u[u.length - 1];
        s = W$(e);
        const o = u[u.length - 2].trim().split(N$);
        const a = u[u.length - 1];
        const l = s === "none" ? a.trimLeft().split(N$) : [];
        if (l.length <= 1) {
            if ($$({
                sectionInfo: t,
                allFacets: n,
                currentText: r,
                facetEndTokenIndex: d,
                parentFacetInfo: i,
                groupingTokenType: s,
                partsBeforeLastFacetEndToken: o,
                untrimmedValue: a
            })) {
                return t;
            }
        }
        q$({
            sectionInfo: t,
            allFacets: n,
            currentText: r,
            groupingTokenType: s,
            parentFacetInfo: i,
            partsBeforeLastFacetEndToken: o,
            tokensAfterFacet: l,
            untrimmedValue: a,
            facetEndTokenIndex: d
        });
        return t;
    }
    q$({
        sectionInfo: t,
        allFacets: n,
        currentText: r,
        facetEndTokenIndex: d,
        groupingTokenType: s,
        parentFacetInfo: i,
        partsBeforeLastFacetEndToken: [],
        tokensAfterFacet: [],
        untrimmedValue: ""
    });
    return t;
};

const G$ = e => {
    let t = 0;
    while (t < e.length) {
        const o = K$(e.substring(t));
        if (o.index === -1) {
            return [ t, undefined ];
        }
        const n = Y$(o.groupingTokenType);
        const a = e.indexOf(n.closing, t + o.index + 1);
        if (a === -1) {
            return [ o.index + t, o.groupingTokenType ];
        } else {
            t = a + 1;
        }
    }
    return [ e.length, undefined ];
};

const K$ = e => {
    const t = {
        index: -1,
        groupingTokenType: "none"
    };
    const o = e.search(V$);
    if (o > -1) {
        const n = e.charAt(o);
        t.groupingTokenType = W$(n);
        if (t.groupingTokenType !== "none") {
            t.index = o;
        }
    }
    return t;
};

const W$ = e => {
    let t = "none";
    switch (e) {
      case "(":
        t = "paren";
        break;

      case "[":
        t = "bracket";
        break;

      case "{":
        t = "curly";
        break;

      case '"':
        t = "quote";
        break;
    }
    return t;
};

const $$ = e => {
    const {sectionInfo: t, currentText: o, facetEndTokenIndex: n, partsBeforeLastFacetEndToken: a, allFacets: r, groupingTokenType: s, untrimmedValue: i, parentFacetInfo: l} = {
        ...e
    };
    const c = {
        ...t
    };
    c.suggestionType = "value";
    c.startIndex = n + 1;
    c.endIndex = o.length;
    const [d, u] = X$(a[a.length - 1].trim());
    const m = d.toLocaleLowerCase();
    const p = r[m];
    if (p) {
        c.parsedFacet = d;
        c.facetInfo = {
            ...p,
            groupingTokenType: s,
            parentFacetInfo: l,
            facetModifier: u,
            acceptedValue: ""
        };
        if (Z$({
            facetInfo: p,
            groupingTokenType: s,
            currentValue: i
        }) && s !== "none") {
            const e = i.substring(i.indexOf(Y$(s).opening) + 1).trim();
            if (s === "paren") {
                const [t, o] = G$(e);
                if (o === "quote") {
                    c.facetInfo.acceptedValue = e.substring(0, t).trim();
                    c.value = e.substring(t + 1).trim();
                } else if (t > -1 && o === undefined) {
                    c.facetInfo.acceptedValue = e.substring(0, t).trim();
                    c.value = e.substring(t).trim();
                } else {
                    c.facetInfo.acceptedValue = "";
                    c.value = e;
                }
            } else if (s === "curly") {
                c.facetInfo.acceptedValue = "";
                c.value = e;
            } else {
                c.facetInfo.acceptedValue = "";
                c.value = e;
            }
        } else {
            c.value = i.trim();
        }
        t.endIndex = c.endIndex;
        t.facetInfo = c.facetInfo;
        t.parsedFacet = c.parsedFacet;
        t.startIndex = c.startIndex;
        t.suggestionType = c.suggestionType;
        t.value = c.value;
        return true;
    }
    return false;
};

const Y$ = e => {
    switch (e) {
      case "paren":
        return {
            opening: "(",
            closing: ")",
            autoClose: false
        };

      case "bracket":
        return {
            opening: "[",
            closing: "]",
            autoClose: false
        };

      case "curly":
        return {
            opening: "{",
            closing: "}",
            autoClose: false
        };

      case "quote":
        return {
            opening: '"',
            closing: '"',
            autoClose: true
        };
    }
    return {
        opening: "",
        closing: "",
        autoClose: false
    };
};

const q$ = e => {
    const {sectionInfo: t, currentText: o, partsBeforeLastFacetEndToken: n, allFacets: a, groupingTokenType: r, parentFacetInfo: s, facetEndTokenIndex: i, tokensAfterFacet: l} = {
        ...e
    };
    if (o.endsWith(N$)) {
        t.parsedFacet = "";
        t.facetInfo = null;
        t.value = "";
        t.startIndex = o.length;
        t.endIndex = o.length;
        return true;
    }
    if (i === -1) {
        const e = o.split(N$);
        const [n, i] = X$(e[e.length - 1]);
        const l = n.toLocaleLowerCase();
        const c = a[l];
        t.parsedFacet = n;
        t.facetInfo = c ? {
            ...c,
            groupingTokenType: r,
            parentFacetInfo: s,
            facetModifier: i,
            acceptedValue: ""
        } : null;
        t.startIndex = o.lastIndexOf(t.parsedFacet);
        t.endIndex = o.length;
        return true;
    }
    const [c, d] = X$(l.length > 1 ? l[l.length - 1] : n[n.length - 1].trim());
    const u = c.toLocaleLowerCase();
    const m = a[u];
    t.parsedFacet = c;
    t.facetInfo = m ? {
        ...m,
        groupingTokenType: r,
        parentFacetInfo: s,
        facetModifier: d,
        acceptedValue: ""
    } : null;
    t.value = "";
    t.startIndex = o.lastIndexOf(t.parsedFacet);
    t.endIndex = t.startIndex + t.parsedFacet.length;
    return true;
};

const X$ = e => {
    switch (e[0]) {
      case O$:
        return [ e.substring(O$.length), O$ ];

      case P$:
        return [ e.substring(P$.length), P$ ];
    }
    return [ e ];
};

const Z$ = e => e.facetInfo.valueType === "date" && (e.groupingTokenType === "bracket" || e.groupingTokenType === "quote" || e.groupingTokenType === "paren" || e.groupingTokenType === "none" && e.currentValue.trim().length === 0) || e.facetInfo.valueType === "keyword" && (e.groupingTokenType === "quote" || e.groupingTokenType === "paren" || e.groupingTokenType === "none") || e.facetInfo.valueType === "text" && (e.groupingTokenType === "quote" || e.groupingTokenType === "paren" || e.groupingTokenType === "none") || e.facetInfo.valueType === "nested" && e.groupingTokenType === "curly" || e.groupingTokenType === "none" && e.currentValue.trim().length === 0 || (e.facetInfo.valueType === "float" || e.facetInfo.valueType === "long" || e.facetInfo.valueType === "integer") && (e.groupingTokenType === "none" || e.groupingTokenType === "bracket");

const J$ = (e, t, o, n = 0) => {
    if (!e) {
        return -1;
    }
    let a = 0;
    if (n < e.length && n >= 0) {
        a = n;
    }
    const r = e.length;
    let s = 0;
    while (s < r) {
        let n = s + a;
        if (n > r - 1) {
            n = n - r;
        }
        if (o(e[n], t)) {
            return n;
        }
        s++;
    }
    return -1;
};

const Q$ = e => {
    if (qI(e)) {
        return true;
    }
    return !(e.hasOwnProperty("length") && e.length > 0);
};

const eY = (e, t, o, n = false, a) => {
    const r = [];
    if (Q$(e) || Q$(t)) {
        return r;
    }
    const s = e.concat();
    const i = t.concat();
    while (s.length > 0) {
        const e = s.shift();
        if (qI(e)) {
            continue;
        }
        const t = J$(i, e, o);
        if (t >= 0) {
            if (n) {
                r[r.length] = i[t];
            } else {
                r[r.length] = e;
            }
            if (!!a) {
                a(e, i[t]);
            }
            i.splice(t, 1);
        }
    }
    return r;
};

const tY = (e, t) => e === t;

const oY = e => {
    let t = e.value1;
    let o = e.value2;
    const {caseSensitive: n, localize: a, formatLocale: r} = e;
    const s = e.trimStringValues === undefined ? true : e.trimStringValues;
    if (t === o) return 0;
    if (o === undefined) return 1;
    if (t === undefined) return -1;
    if (o === null) return 1;
    if (t === null) return -1;
    if (o === "") return 1;
    if (t === "") return -1;
    if (typeof t === "string" && typeof o === "string") {
        let a = e.collator;
        if (!a) {
            const e = {
                sensitivity: n ? "case" : "base"
            };
            a = new Intl.Collator(r, e);
        }
        if (s) {
            t = t.trim();
            o = o.trim();
        }
        return a.compare(t, o);
    }
    if (typeof t === "object" && typeof o === "object" && typeof t.value === "number" && typeof o.value === "number") {
        t = t.value;
        o = o.value;
    }
    if (typeof t === "object" && typeof o === "object" && typeof t.value === "boolean" && typeof o.value === "boolean") {
        t = t.value ? 1 : 0;
        o = o.value ? 1 : 0;
    }
    if (typeof t === "boolean" && typeof o === "boolean" && a) {
        t = UF({
            localize: a,
            value: t
        });
        o = UF({
            localize: a,
            value: o
        });
        const n = e.collator || new Intl.Collator(r);
        return n.compare(t, o);
    }
    return t < o ? -1 : t > o ? 1 : 0;
};

const nY = e => {
    const {array: t, rootPropertyName: o, propertyName: n, descending: a, caseSensitive: r, localize: s, formatLocale: i} = e;
    const l = new Intl.Collator(i, {
        sensitivity: r ? "case" : "base"
    });
    t.sort((function(e, t) {
        if (o) {
            e = e && e[o] ? e[o] : null;
            t = t && t[o] ? t[o] : null;
        }
        if (n) {
            if (e) e = e[n];
            if (t) t = t[n];
        }
        const r = oY({
            formatLocale: i,
            value1: e,
            value2: t,
            collator: l,
            localize: s
        });
        return a ? r * -1 : r;
    }));
};

Dh("DataSelection");

Dh("DataSelectionUtilTypes");

const aY = "application/vnd.sas.collection";

const rY = `${aY}+json`;

const sY = async e => {
    const t = await aS(e);
    return t.data;
};

const iY = "application/vnd.sas.metadata.definition.search.facet";

const lY = `${iY}+json`;

Dh("DataSelection");

Dh("DataSelection");

const cY = "start";

const dY = "limit";

Dh("DataSelection");

Dh("DataSelection");

Dh("DataSelection");

Dh("DataSelection");

Dh("DataSelection");

const uY = 32767;

const mY = async e => {
    const t = {
        facet: e.facet,
        [cY]: 0,
        [dY]: e.limit
    };
    if (e.value !== "") {
        t.q = e.value;
    }
    if (e.indices.length > 0) {
        t.indices = e.indices.join(",");
    }
    const o = await sY({
        method: "GET",
        url: "/catalog/search/suggestions",
        params: t,
        headers: {
            Accept: rY,
            "Accept-Item": "text/plain"
        }
    });
    const n = o;
    return n;
};

const pY = async () => {
    const e = await sY({
        method: "GET",
        url: "/catalog/search/facets",
        params: {
            [cY]: 0,
            [dY]: 1e3,
            includeHidden: "true"
        },
        headers: {
            Accept: rY,
            "Accept-Item": lY
        }
    });
    const t = e;
    return t;
};

Dh("DataSelection");

const fY = async e => {
    const t = await mY({
        facet: e.fieldName,
        indices: e.indices,
        value: e.initialValue,
        limit: e.limit
    });
    return t.items;
};

const gY = async () => {
    const e = await pY();
    return {
        facets: e.items
    };
};

const hY = "998";

let bY = false;

let vY = false;

const yY = async () => {
    if (bY) {
        return vY;
    }
    try {
        await sY({
            method: "GET",
            url: `/licenses/products/${hY}`
        });
        bY = true;
        vY = true;
    } catch (e) {
        if (e.response.status === 404) {
            bY = true;
            vY = false;
        } else {
            bY = false;
            vY = false;
        }
    }
    return vY;
};

const xY = "SASInformationCatalog.searches.free";

const SY = async () => {
    const e = await ky({
        params: {
            [dY]: uY
        }
    });
    const t = wY(e, xY);
    if (t) {
        return JSON.parse(t);
    }
    return null;
};

const wY = (e, t) => {
    let o;
    for (const n of e.items) {
        if (n.id === t) {
            o = n.value;
            break;
        }
    }
    return o;
};

Dh("NameUtils");

Dh("DataSelection");

const CY = async e => {
    if (e.facetInfo !== undefined && (e.facetInfo.valueType === "text" || e.facetInfo.valueType === "keyword") && e.indices !== undefined && e.initialValue !== undefined) {
        const t = await fY({
            limit: e.limit,
            initialValue: e.initialValue,
            indices: e.indices,
            fieldName: e.facetInfo?.name
        });
        return {
            value: e.initialValue,
            suggestions: t,
            indices: e.indices,
            limit: e.limit
        };
    } else {
        return Promise.resolve(null);
    }
};

const EY = async () => {
    const e = await SY();
    const t = [];
    if (e !== null) {
        for (const o of e) {
            t.push({
                query: o.query,
                count: o.count,
                indicesList: o.indices,
                timestamp: o.timestamp
            });
        }
        return t;
    }
    return null;
};

const IY = async () => {
    const e = await gY();
    const t = await yY();
    const o = {};
    const n = e.facets.length;
    if (n > 0) {
        for (const n of e.facets) {
            if (n && (t || !_Y(n.name))) {
                const e = {
                    name: n.name,
                    valueType: n.type ? n.type : "text",
                    indices: n.indices,
                    hiddenIndices: n.hiddenIndices
                };
                o[e.name.toLocaleLowerCase()] = e;
            }
        }
    }
    return o;
};

const _Y = e => {
    switch (e) {
      case "Classification":
      case "Column.classification":
      case "Column.Classification":
      case "Column.informationPrivacy":
      case "Column.semanticType":
      case "Contacts":
      case "InformationPrivacy":
      case "Locale":
      case "Status":
      case "Keywords":
      case "Column.keywords":
      case "Languages":
      case "Tags":
      case "Topic":
      case "TopicKeywords":
      case "TopicParent":
        return true;

      default:
        return false;
    }
};

const DY = () => io([ "previousSearches", {} ], (() => EY()), {
    refetchOnWindowFocus: false,
    cacheTime: 6e4
});

const LY = () => io([ "searchFacets" ], (() => IY()), {
    refetchOnWindowFocus: false,
    cacheTime: 12e5
});

const TY = fb(ct);

const RY = ({facetInfo: e, enableExperimental: t}) => {
    const o = TY();
    const n = JA();
    const a = r((() => {
        const a = o("search.suggestion.help.generic.msg");
        const r = n({
            icon: JT
        });
        const s = {
            label: a,
            icon: JT,
            iconAriaLabel: r.ariaLabel === a ? "" : r.ariaLabel,
            iconTooltip: r.tooltip === a ? "" : r.tooltip,
            helpId: "infocat_search"
        };
        if (e) {
            let n = o(`search.suggestion.help.facettype.${e.valueType}.msg`);
            let a = "infocat_search";
            let i = undefined;
            switch (e.valueType) {
              case "date":
                a = "date_search";
                if (e.groupingTokenType === "bracket") {
                    n = o("search.suggestion.help.facettype.date.range.msg");
                    const t = 1e3 * 60 * 60 * 24 * 7;
                    const a = new Date(new Date(Date.now() - t).toDateString());
                    const r = new Date(new Date(Date.now()).toDateString());
                    i = `${e.name}:${N$}${KF({
                        startDate: a,
                        endDate: r
                    })}`;
                } else if (e.groupingTokenType === "quote") {
                    i = `${e.name}:${N$}"${B$}"`;
                }
                break;

              case "text":
                a = "freetext_search";
                break;

              case "keyword":
                if (e.name === "Locale") {
                    n = o("search.suggestion.help.facettype.locale.msg");
                    a = "locale_search";
                } else {
                    a = "keyword_search";
                }
                break;

              case "nested":
                a = "nested_search";
                break;

              case "integer":
              case "long":
                a = "numeric_search";
                if (e.groupingTokenType === "bracket") {
                    n = o(`search.suggestion.help.facettype.${e.valueType}.range.msg`);
                    i = `${e.name}:${N$}${$F({
                        start: 0,
                        end: 100,
                        valueType: e.valueType
                    })}`;
                } else {
                    i = `${e.name + N$}<50`;
                }
                break;

              case "float":
                a = "numeric_search";
                if (e.groupingTokenType === "bracket") {
                    n = o("search.suggestion.help.facettype.float.range.msg");
                    i = `${e.name}:${N$}${$F({
                        start: 0,
                        end: 100,
                        valueType: e.valueType
                    })}`;
                } else {
                    i = `${e.name + N$}<50.00`;
                }
                break;
            }
            if (!n.startsWith("NovaComponents")) {
                s.label = n;
                s.icon = JT;
                s.iconAriaLabel = r.ariaLabel === n ? "" : r.ariaLabel;
                s.iconTooltip = r.tooltip === n ? "" : r.tooltip;
                s.helpId = a;
                s.example = t ? i : undefined;
            }
        }
        return s;
    }), [ o, n, e, t ]);
    return a;
};

const kY = e => io([ "suggestions", {
    facetInfo: e.facetInfo?.name,
    initialQuery: e.initialQuery,
    indices: e.indices
} ], (() => CY({
    facetInfo: e.facetInfo,
    initialValue: e.initialQuery,
    indices: e.indices,
    limit: e.limit
})), {
    refetchOnWindowFocus: false,
    cacheTime: 6e4
});

const AY = fb(ct);

const MY = ({enableExperimental: e, currentText: t, currentSearchIndices: o, selectionStartPosition: n = -1, selectionEndPosition: a = -1}) => {
    const s = AY();
    const i = jV();
    const {data: l} = LY();
    const c = r((() => {
        if (l) {
            if (!o || o.length === 0) {
                const e = {};
                for (const t of Object.values(l)) {
                    if (t.indices && t.indices.length > 0) {
                        e[t.name.toLocaleLowerCase()] = t;
                    }
                }
                return e;
            }
            const e = {};
            for (const t of Object.values(l)) {
                if (t.indices && eY(t.indices, o, tY).length > 0) {
                    e[t.name.toLocaleLowerCase()] = t;
                }
            }
            return e;
        }
        return undefined;
    }), [ l, o ]);
    const d = H$({
        currentText: t,
        selectionStartPosition: n,
        selectionEndPosition: a,
        facetsForCurrentIndices: l
    });
    const u = RY({
        facetInfo: d?.facetInfo || null,
        enableExperimental: e
    });
    const {data: m} = DY();
    const p = r((() => {
        if (t === undefined || !m) return [];
        const e = t.toLocaleLowerCase();
        return m.filter((t => {
            const o = t.query?.toLocaleLowerCase();
            return o && o.startsWith(e);
        }));
    }), [ m, t ]);
    const {data: f} = kY({
        facetInfo: d?.facetInfo || undefined,
        initialQuery: d?.value,
        indices: o,
        limit: d?.facetInfo?.valueType === "text" && (d?.value === undefined || d?.value === "") ? 20 : 100
    });
    const g = r((() => {
        const e = [ {
            label: s("search.dateFilter.previousday.label"),
            value: B$
        }, {
            label: s("search.dateFilter.previousweek.label"),
            value: "Previous week"
        }, {
            label: s("search.dateFilter.previousmonth.label"),
            value: "Previous month"
        }, {
            label: s("search.dateFilter.previousquarter.label"),
            value: "Previous quarter"
        }, {
            label: s("search.dateFilter.previousyear.label"),
            value: "Previous year"
        } ];
        return e;
    }), [ s ]);
    const h = r((() => {
        let e = [];
        if (d?.suggestionType === "value") {
            const t = OY({
                localize: s,
                formatLocale: i,
                allDateSuggestions: g,
                typeAheadSuggestions: f || undefined,
                suggestionParseInfo: d
            });
            e = t;
        } else if (d?.suggestionType === "facet") {
            const o = d?.facetInfo?.name ?? d?.parsedFacet;
            const n = NY({
                allFacets: c,
                facetNameFilter: o,
                currentText: t
            });
            const a = n ? Object.values(n).map((e => {
                let t = "";
                let o = "";
                let n = 0;
                if (e.valueType === "nested") {
                    t = z$;
                    o = F$;
                    n = j$;
                }
                let a = NT;
                let r = e.label || s("search.filter.icon.tooltip.label");
                if (e.valueType === "date") {
                    a = hT;
                    r = e.label || s("search.date.icon.tooltip.label");
                } else if (e.valueType === "keyword") {
                    a = nT;
                    r = e.label || s("search.category.icon.tooltip.label");
                } else if (e.valueType === "text") {
                    a = uk;
                    r = e.label || s("search.textfield.icon.tooltip.label");
                } else if (e.valueType === "nested") {
                    a = LR;
                    r = e.label || s("search.nestedgroup.icon.tooltip.label");
                } else if (e.valueType === "integer") {
                    a = AR;
                    r = e.label || s("search.numericfield.icon.tooltip.label");
                } else if (e.valueType === "long") {
                    a = AR;
                    r = e.label || s("search.numericfield.icon.tooltip.label");
                } else if (e.valueType === "float") {
                    a = yT;
                    r = e.label || s("search.decimaltype.icon.tooltip.label");
                } else if (e.valueType === "boolean") {
                    a = QL;
                    r = e.label || s("search.booleandata.icon.tooltip.label");
                }
                return {
                    label: e.name + M$ + t,
                    value: e.name + M$ + o,
                    icon: a,
                    iconTooltip: r,
                    cursorOffset: n
                };
            })) : [];
            e = a;
        }
        return e;
    }), [ g, t, i, s, d, f, c ]);
    const b = r((() => ({
        facetOrValueSuggestions: h,
        help: u,
        history: p,
        parseInfo: d
    })), [ h, p, d, u ]);
    return b;
};

const NY = e => {
    if (e.currentText === undefined) {
        return null;
    }
    if (e.allFacets !== undefined) {
        if (e.facetNameFilter !== undefined && e.facetNameFilter.length > 0) {
            const t = e.facetNameFilter.toLocaleLowerCase().trim();
            const o = Object.keys(e.allFacets);
            const n = {};
            for (const a of o) {
                const o = e.allFacets[a];
                if (a.toLocaleLowerCase().indexOf(t) > -1 || (!!o.label ? o.label.toLocaleLowerCase().indexOf(t) > -1 : false)) {
                    n[o.name.toLocaleLowerCase()] = o;
                }
            }
            return n;
        }
        if (e.currentText.length > 0) {
            return e.allFacets;
        }
        const t = {};
        const o = [ "name", "datemodified", "datecreated", "status", "library.name" ];
        for (const n of o) {
            if (e.allFacets[n]) {
                t[n] = e.allFacets[n];
            }
        }
        return t;
    }
    return null;
};

const OY = e => {
    const t = e.suggestionParseInfo.value ? e.suggestionParseInfo.value.toLocaleLowerCase().trim() : "";
    const o = [];
    if (!e.suggestionParseInfo.facetInfo) {
        return o;
    } else if (e.suggestionParseInfo.facetInfo.valueType === "nested" || e.suggestionParseInfo.facetInfo.valueType === "long" || e.suggestionParseInfo.facetInfo.valueType === "integer" || e.suggestionParseInfo.facetInfo.valueType === "float") {
        return o;
    }
    if (e.suggestionParseInfo.facetInfo.valueType === "date") {
        for (const n of e.allDateSuggestions) {
            if (!e.suggestionParseInfo.value || n.value.toLocaleLowerCase().indexOf(t) > -1 || n.label.toLocaleLowerCase().indexOf(t) > -1) {
                o.push({
                    label: n.label,
                    value: n.value
                });
            }
        }
        o.push({
            label: e.localize("search.dateFilter.CustomRange.label"),
            value: null,
            icon: bT
        });
        return o;
    }
    if (e.typeAheadSuggestions?.suggestions) {
        for (const n of e.typeAheadSuggestions.suggestions) {
            const a = n.toLocaleLowerCase();
            if (!t || a.localeCompare(t) !== 0 && a.startsWith(t)) {
                let t = n;
                if (e.suggestionParseInfo.facetInfo?.name === "reviewStatus") {
                    t = e.localize(`status.menuitem.${n}.label`);
                    if (t.startsWith("NovaComponents")) {
                        t = n;
                    }
                } else if (e.suggestionParseInfo.facetInfo?.name === "informationPrivacy") {
                    t = e.localize(`informationPolicy.${n}.msg`);
                    if (t.startsWith("NovaComponents")) {
                        t = n;
                    }
                } else if (e.enableExperimental && e.suggestionParseInfo.facetInfo?.name === "dataLocale") {
                    t = e.localize(`locales.country.language.${n}.label`);
                    if (t.startsWith("NovaComponents")) {
                        t = n;
                    }
                }
                o.push({
                    label: t,
                    value: n
                });
            }
        }
    }
    nY({
        array: o,
        propertyName: "text",
        descending: false,
        formatLocale: e.formatLocale
    });
    return o;
};

const PY = fb(ct);

const BY = ({enableExperimental: e, currentText: t, selectionStartPosition: o = -1, selectionEndPosition: n = -1, currentSearchIndices: a, suggestionDisplayOrder: i, helpUrls: l}) => {
    const c = PY();
    const d = jV();
    const u = MY({
        enableExperimental: e,
        currentSearchIndices: a,
        currentText: t,
        selectionStartPosition: o,
        selectionEndPosition: n
    });
    const {suggestionItems: m, locations: p} = r((() => {
        const e = [];
        const t = [];
        if (u) {
            for (const o of i) {
                if (o === "help" && u.help) {
                    if (e.length > 0) {
                        e.push({
                            separator: true
                        });
                    }
                    t.push([ "help", e.length ]);
                    e.push({
                        id: u.help?.helpId,
                        text: u.help?.label,
                        secondaryText: u.help?.example,
                        icon: u.help?.icon,
                        iconAriaLabel: u.help?.iconAriaLabel,
                        iconTooltip: u.help?.iconTooltip,
                        suggestionType: "help"
                    });
                } else if (o === "history" && u.history.length > 0) {
                    if (e.length > 0) {
                        e.push({
                            separator: true
                        });
                    }
                    t.push([ "history", e.length ]);
                    const o = u.history.map((e => ({
                        id: e.query,
                        text: e.query?.replace(/\\"/g, '"'),
                        secondaryText: GF({
                            localize: c,
                            formatLocale: d,
                            value: e.count
                        }),
                        icon: eR,
                        iconTooltip: c("search.previous.search.tooltip.label"),
                        suggestionType: "history"
                    })));
                    e.push(...o);
                } else if (o === "catalog" && u.facetOrValueSuggestions.length > 0) {
                    if (e.length > 0) {
                        e.push({
                            separator: true
                        });
                    }
                    t.push([ "catalog", e.length ]);
                    const o = u.facetOrValueSuggestions.map((e => {
                        const t = {
                            id: e.value || undefined,
                            text: e.label,
                            icon: e.icon,
                            iconTooltip: e.iconTooltip || "",
                            suggestionType: "catalog"
                        };
                        return t;
                    }));
                    e.push(...o);
                }
            }
        }
        return {
            suggestionItems: e,
            locations: t
        };
    }), [ u, i, c, d ]);
    const f = s((e => {
        if (u?.parseInfo) {
            return zY({
                currentText: t || "",
                filteredPrevious: u.history,
                helpUrls: l,
                localize: c,
                parseInfo: u.parseInfo,
                suggestionIndex: e.index,
                locations: p,
                facetOrValueSuggestions: u.facetOrValueSuggestions,
                suggestionItems: m,
                suggestionHelp: u.help
            });
        }
        return;
    }), [ t, c, p, m, l, u ]);
    const g = r((() => u?.parseInfo ? {
        parseInfo: u.parseInfo,
        suggestions: m,
        onSuggestionItemSelected: f
    } : null), [ u.parseInfo, m, f ]);
    return g;
};

const zY = e => {
    if (!e.parseInfo) return;
    let t;
    let o = 0;
    for (let n = e.locations.length - 1; n >= 0; --n) {
        const a = e.locations[n];
        if (a[1] <= e.suggestionIndex) {
            t = a[0];
            o = e.suggestionIndex - a[1];
            break;
        }
    }
    if (t === "help") {
        if (e.helpUrls && e.suggestionHelp && e.helpUrls[e.suggestionHelp.helpId]) {
            if (e.helpUrls?.[e.suggestionHelp.helpId] !== undefined) {
                window.open(e.helpUrls[e.suggestionHelp.helpId], "_blank");
            }
            return;
        }
    } else if (t === "history") {
        if (e.filteredPrevious[o]) {
            return {
                historySelected: true,
                historyIndices: e.filteredPrevious[o].indicesList,
                newInputString: e.filteredPrevious[o].query,
                datePickerSelected: false
            };
        }
    } else if (t === "catalog") {
        const t = e.facetOrValueSuggestions[o];
        if (!t) return;
        if (t.label === e.localize("search.dateFilter.CustomRange.label")) {
            return {
                datePickerSelected: true,
                newInputString: undefined,
                historySelected: false
            };
        }
        let n = "";
        let a = "";
        let r = "";
        let s = t.value;
        if (e.parseInfo.suggestionType === "value") {
            r = N$;
            const t = e.parseInfo.facetInfo;
            if (s && t) {
                s = s.replace(/\"/g, '\\"');
                const {opening: e, closing: o, autoClose: n} = FY({
                    value: s,
                    facetParseInfo: t
                });
                a = N$ + e;
                if (t.groupingTokenType === "paren") {
                    const e = Y$("quote");
                    const o = t.acceptedValue.length > 0 ? `${t.acceptedValue}${N$}${e.opening}` : e.opening;
                    s = `${o}${s}${e.closing}`;
                }
                r = n ? `${o}${N$}` : N$;
            }
        }
        n = e.currentText.substring(0, e.parseInfo.startIndex).trimLeft() + a + s + r;
        return {
            newInputString: n,
            datePickerSelected: false,
            historyIndices: undefined,
            historySelected: false,
            cursorOffset: t.cursorOffset
        };
    }
    return {
        datePickerSelected: false,
        historyIndices: undefined,
        historySelected: false
    };
};

const FY = e => {
    const {value: t, facetParseInfo: o} = e;
    if (o.valueType === "date") {
        if (t.startsWith("[")) {
            return Y$("none");
        }
        return Y$("quote");
    } else if (o.groupingTokenType !== "none") {
        return Y$(o.groupingTokenType);
    }
    return Y$("quote");
};

var jY = "sas_data-CatalogSearch-CatalogSearch_suggestion-search-bar";

var VY = "sas_data-CatalogSearch-CatalogSearch_suggestion-search-input";

var HY = "sas_data-CatalogSearch-CatalogSearch_has-clear-button";

var UY = "sas_data-CatalogSearch-CatalogSearch_suggestion-search-button-container";

var GY = "sas_data-CatalogSearch-CatalogSearch_clear-search-button";

var KY = {
    suggestionSearchBar: jY,
    suggestionSearchInput: VY,
    hasClearButton: HY,
    suggestionSearchButtonContainer: UY,
    clearSearchButton: GY
};

const WY = fb(ct);

const $Y = [ "help", "history", "catalog" ];

const YY = u((function e({onSearch: o, onClearSearch: r, landmarkLabel: i, initialQuery: l = "", enableExperimental: d = false, currentSearchIndices: u, onCurrentSearchIndicesChanged: m, testId: p, placeholder: f, onFocus: h, style: b, className: v, disableHistorySearchOnDoubleClick: y, suggestionsDisplay: x, showClearButton: S = true, clearButtonLabel: w}, C) {
    const E = WY();
    const [I, _] = n(false);
    const [D, L] = n(undefined);
    const T = c(null);
    const [R, k] = n(l);
    const [A, M] = n(false);
    a((() => {
        k(l);
    }), [ l ]);
    const N = jD(L_.INVERT_APP_COLORS);
    a((() => {
        if (D === undefined) {
            const e = [];
            const t = {
                infocat_search: undefined,
                date_search: undefined,
                freetext_search: undefined,
                keyword_search: undefined,
                nested_search: undefined,
                numeric_search: undefined,
                locale_search: undefined
            };
            for (const o of Object.keys(t)) {
                const n = o;
                const a = {
                    locale: $h(),
                    softwareContextId: n,
                    softwareId: "SASInformationCatalog"
                };
                const r = _y({
                    invertColors: N === "true",
                    customParams: a
                });
                e.push(r);
                r.then((e => {
                    t[n] = e;
                }));
            }
            Promise.all(e).then((() => {
                L(t);
            }));
        }
    }), [ D, N ]);
    const [O, P] = n(false);
    a((() => {
        if (O !== false && !!R) {
            let e = 0;
            if (O !== true) {
                e = O;
            }
            T.current?.setSelectionRange(R.length + e, R.length + e);
            P(false);
        }
    }), [ R, O ]);
    a((() => {
        if (S) {
            M(R?.length > 0);
        }
    }), [ R, M, S ]);
    const B = C_();
    const z = I_({
        "spacing-xl": B.spacing.core.xl
    }, "catalog-suggestive-search");
    const F = s((() => {
        const e = R.trim();
        if (e !== R) {
            k(e);
        }
        if (e) {
            o(e, u);
        }
    }), [ R, o, u ]);
    const j = s((() => {
        k("");
        r?.();
        if (T?.current) {
            T.current.focus();
        }
    }), [ k, r ]);
    const [V, H] = n(false);
    g(C, (() => ({
        doSearch: e => {
            if (T?.current) {
                H(true);
                k(e);
            }
        }
    })), []);
    a((() => {
        if (V) {
            F();
            T.current?.focus();
            H(false);
        }
    }), [ R, F, V ]);
    const U = T.current?.selectionStart || -1;
    const G = T.current?.selectionEnd || -1;
    const K = BY({
        currentText: R,
        selectionEndPosition: G,
        selectionStartPosition: U,
        currentSearchIndices: u,
        enableExperimental: d,
        suggestionDisplayOrder: $Y,
        helpUrls: D
    });
    const W = s((e => {
        const t = K?.onSuggestionItemSelected(e);
        if (t?.historySelected && t.newInputString !== undefined) {
            if (t?.historyIndices !== undefined) {
                m(t.historyIndices);
            }
            k(t.newInputString);
            o(t.newInputString.trim(), t.historyIndices);
        }
    }), [ K, k, m, o ]);
    return t("div", {
        className: ke(KY.suggestionSearchBar, v),
        style: {
            ...z,
            ...b
        },
        onFocus: e => h?.(e)
    }, t(TV, {
        ref: T,
        className: ke(KY.suggestionSearchInput, S && KY.hasClearButton),
        suggestionItems: K?.suggestions || null,
        onCommit: e => {
            if (e.reason === "enter") {
                F();
            }
        },
        onHistoryItemDoubleClick: !y ? W : undefined,
        onSuggestionItemSelected: e => {
            const t = K?.onSuggestionItemSelected(e);
            if (t?.historySelected && t.newInputString !== undefined) {
                if (t?.historyIndices !== undefined) {
                    m(t.historyIndices);
                }
                k(t.newInputString);
            } else if (t?.datePickerSelected) {
                _(true);
            } else if (t?.newInputString !== undefined) {
                k(t.newInputString);
            }
            P(t?.cursorOffset ?? true);
        },
        onChange: e => {
            k(e.value);
        },
        value: R,
        placeholder: f ?? E("search.catalog.placeholder.label"),
        landmarkLabel: i ? i : E("search.generic.landmark.title"),
        testId: gb(p, "cataloginput"),
        tabindex: 0,
        suggestionsDisplay: V ? "never" : x
    }), t("div", {
        className: KY.suggestionSearchButtonContainer
    }, A && t(QM, {
        className: KY.clearSearchButton,
        variant: oN.Icon,
        icon: {
            icon: iT
        },
        onPress: j,
        tooltip: w ?? E("search.clear.label"),
        tokens: () => ({
            fg: B.c.colorTextDefault,
            bg: "transparent"
        })
    }), t(QM, {
        variant: oN.Icon,
        icon: {
            icon: XR
        },
        onPress: () => {
            F();
        },
        tooltip: E("search.start.label"),
        testId: gb(p, "searchbutton"),
        tokens: () => ({
            fg: B.c.colorTextDefault,
            bg: "transparent"
        })
    }), I ? t(A$, {
        onOk: (e, t) => {
            k(R.substring(0, K?.parseInfo?.startIndex).trimLeft() + N$ + KF({
                startDate: e,
                endDate: t
            }) + N$);
            _(false);
            P(true);
        },
        onCancel: () => {
            _(false);
        },
        testId: gb(p, "daterange")
    }) : null));
}));

Dh("drive");

new lo;

Dh("useContentQuery");

const qY = "contentServices";

const XY = "contentUtils";

Dh(XY);

Dh(qY);

const ZY = i(undefined);

const JY = () => l(ZY);

const QY = i(undefined);

const eq = () => l(QY);

const tq = e => ({
    direction: "ascending",
    sensitivity: "strict",
    toSortKey: e => typeof e === "number" ? e : String(e),
    ...e
});

const oq = {
    base: "base",
    accent: "accent",
    strict: "variant"
};

const nq = (e, t) => {
    const {toSortKey: o, direction: n, sensitivity: a} = tq(t);
    const r = oq[a];
    const s = new Intl.Collator(e, {
        sensitivity: r
    }).compare;
    return (e, t) => {
        const a = o(e);
        const r = o(t);
        let i = 0;
        if (a === r) {
            i = 0;
        } else if (r === null) {
            i = -1;
        } else if (a === null) {
            i = 1;
        } else if (typeof a === "number" && typeof r === "number") {
            i = a - r;
        } else {
            i = s(`${a}`, `${r}`);
        }
        return n === "descending" ? -1 * i : i;
    };
};

const aq = i(undefined);

aq.Provider;

const rq = () => l(aq) ?? nq;

const sq = e => {
    const t = jV();
    const o = rq();
    const n = r((() => {
        if (Array.isArray(e)) {
            const n = e.map((e => o(t, tq(e))));
            return iq(n);
        }
        return o(t, tq(e));
    }), [ o, t, e ]);
    return n;
};

const iq = e => (t, o) => e.reduce(((e, n) => e === 0 ? n(t, o) : e), 0);

var lq = "sas_components-MessageToast-MessageToast_container";

var cq = "sas_components-MessageToast-MessageToast_container-inner";

var dq = "sas_components-MessageToast-MessageToast_container-inner-border";

var uq = "sas_components-MessageToast-MessageToast_entering-border-anim";

var mq = "sas_components-MessageToast-MessageToast_closing-border-anim";

var pq = {
    startStart: "sas_components-MessageToast-MessageToast_entering_start_start",
    startCenter: "sas_components-MessageToast-MessageToast_entering_start_center",
    startEnd: "sas_components-MessageToast-MessageToast_entering_start_end",
    endStart: "sas_components-MessageToast-MessageToast_entering_end_start",
    endCenter: "sas_components-MessageToast-MessageToast_entering_end_center",
    endEnd: "sas_components-MessageToast-MessageToast_entering_end_end",
    centerStart: "sas_components-MessageToast-MessageToast_entering_center_start",
    centerEnd: "sas_components-MessageToast-MessageToast_entering_center_end",
    centerCenter: "sas_components-MessageToast-MessageToast_entering_center_center"
};

var fq = {
    startStart: "sas_components-MessageToast-MessageToast_closing_start_start",
    startCenter: "sas_components-MessageToast-MessageToast_closing_start_center",
    startEnd: "sas_components-MessageToast-MessageToast_closing_start_end",
    endStart: "sas_components-MessageToast-MessageToast_closing_end_start",
    endCenter: "sas_components-MessageToast-MessageToast_closing_end_center",
    endEnd: "sas_components-MessageToast-MessageToast_closing_end_end",
    centerStart: "sas_components-MessageToast-MessageToast_closing_center_start",
    centerEnd: "sas_components-MessageToast-MessageToast_closing_center_end",
    centerCenter: "sas_components-MessageToast-MessageToast_closing_center_center"
};

var gq = "sas_components-MessageToast-MessageToast_toast-content";

var hq = "sas_components-MessageToast-MessageToast_action-button";

var bq = "sas_components-MessageToast-MessageToast_section-message";

var vq = "sas_components-MessageToast-MessageToast_close-button";

var yq = "sas_components-MessageToast-MessageToast_toast-icon";

var xq = {
    container: lq,
    containerInner: cq,
    containerInnerBorder: dq,
    enteringBorderAnim: uq,
    closingBorderAnim: mq,
    entering: pq,
    closing: fq,
    toastContent: gq,
    actionButton: hq,
    sectionMessage: bq,
    closeButton: vq,
    toastIcon: yq
};

const Sq = fb(bt);

const wq = ({displayMode: e = "primary", referenceElementDock: o = [ "start", "end" ], toastDock: r = [ "start", "end" ], offset: i = [ 0, 0 ], collision: l = "fit", tokens: d, theme: u, ...m}) => {
    const p = ay();
    const f = C_();
    const g = Sq();
    const h = c(null);
    const [b, v] = n();
    const [y, x] = n();
    const S = MA("message-toast");
    const w = S();
    const [{elementAcceptsAnimation: C, prevIsOpen: E, closing: I}, _] = n({
        elementAcceptsAnimation: false,
        prevIsOpen: m.isOpen,
        closing: false
    });
    if (m.isOpen !== E) {
        _((e => ({
            ...e,
            prevIsOpen: m.isOpen,
            closing: !m.hideAnimation && e.elementAcceptsAnimation && E
        })));
    }
    const D = {
        ...Cq(f, {
            displayMode: e,
            tokens: d
        }),
        ...u?.(f)
    };
    const L = s((() => {
        if (!h.current) return;
        const e = m.referenceElementRef?.current ?? document.body;
        const [t, n] = Lq(h.current, r, e, o, i, l, p);
        v(t);
        x(n);
    }), [ l, p, i, m.referenceElementRef, o, r ]);
    a(L, [ L ]);
    const [T] = kN((() => {
        if (b === undefined || y === undefined) {
            L();
        }
    }));
    const R = i[0] !== 0 || i[1] !== 0;
    const k = `${o[0]}${o[1].charAt(0).toUpperCase()}${o[1].slice(1)}`;
    const A = m.referenceElementRef || R ? xq.entering.centerCenter : xq.entering[k];
    const M = C ? m.referenceElementRef || R ? xq.closing.centerCenter : xq.closing[k] : false;
    const N = parseFloat(f.enableNovaTokens ? f.tokensExperimental["font-size-body-text-m"] : f.font.size.m) * 16;
    const O = Math.round(N * (f.enableNovaTokens ? parseFloat(f.tokensExperimental["font-space-line-height"]) : f.font.lineHeight));
    const P = Math.trunc((window.innerHeight * .9 - 32) / O);
    const B = `${Math.round((O - 14) / 2)}px`;
    return m.isOpen || I ? t("div", {
        ref: e => {
            h.current = e;
            T(e);
        },
        "data-testid": m.testId,
        className: ke(xq.container, m.className),
        style: {
            ...D,
            visibility: b !== undefined && y !== undefined ? undefined : "hidden",
            left: b,
            top: y,
            ...m.style
        }
    }, t("div", {
        className: ke(xq.containerInner, !m.hideAnimation && A, I && M),
        ref: m.toastRef,
        "data-closing-anim": M,
        onAnimationEnd: e => {
            if (e.target === e.currentTarget) {
                if (I) {
                    _((e => ({
                        ...e,
                        prevIsOpen: false,
                        closing: false
                    })));
                } else {
                    _({
                        elementAcceptsAnimation: true,
                        prevIsOpen: false,
                        closing: false
                    });
                }
            }
        },
        onMouseEnter: m.onMouseEnter,
        onMouseLeave: m.onMouseLeave,
        onKeyDown: e => {
            if (e.key === "Escape" && m.onClose) {
                m.onClose();
            }
        }
    }, t("div", {
        className: ke(xq.containerInnerBorder, !m.hideAnimation && xq.enteringBorderAnim, I && xq.closingBorderAnim)
    }), m.hideIcon ? null : t(MM, {
        className: xq.toastIcon,
        icon: kR,
        theme: () => ({
            "--icon-default-override-fg": "var(--toast-fg)"
        }),
        style: {
            marginTop: B
        }
    }), t(iN, {
        orientation: "vertical",
        className: xq.toastContent
    }, m.children ? t(jP, {
        id: w,
        className: xq.sectionMessage,
        style: {
            WebkitLineClamp: P
        },
        theme: () => ({
            "--text-fg": "var(--toast-fg)"
        })
    }, m.children) : null, m.actionButton ? t(ZM, {
        ref: m.actionButton?.ref,
        variant: oN.LightSmall,
        className: xq.actionButton,
        theme: t => {
            if (t.baseReportThemeName === "highcontrast2018" && e === "secondary") {
                return {
                    "--button-fg": "var(--toast-fg)",
                    "--button-filter": "none",
                    "--button-bg": "transparent",
                    "--button-active-fg": "var(--toast-fg)",
                    "--button-active-bg": "transparent",
                    "--button-active-filter": "none",
                    "--button-hover-fg": "var(--toast-fg)",
                    "--button-hover-bg": "transparent",
                    "--button-hover-filter": "none"
                };
            }
            if (t.themeVariant === "high-contrast" && e === "secondary") {
                return {
                    "--button-active-filter": "none"
                };
            }
        },
        onPress: () => {
            m.actionButton?.onPress?.();
            m.onClose?.();
        },
        text: g(`action.button.${m.actionButton.type}.label`),
        ariaDescribedBy: w,
        onBlur: m.actionButton.onBlur
    }) : null), m.closeable ? t(QM, {
        className: xq.closeButton,
        style: p ? {
            left: 0,
            right: "auto"
        } : {},
        variant: oN.Icon,
        onPress: m.onClose,
        theme: t => {
            if (t.enableNovaTokens) return {};
            if (t.baseReportThemeName === "highcontrast2018" && e === "secondary") {
                return {
                    "--button-fg": "var(--toast-fg)",
                    "--button-filter": "none",
                    "--button-bg": "transparent",
                    "--button-hover-fg": "var(--toast-fg)",
                    "--button-hover-filter": "none",
                    "--button-hover-bg": "transparent",
                    "--button-active-fg": "var(--toast-fg)",
                    "--button-active-filter": "none",
                    "--button-active-bg": "transparent"
                };
            }
            if (t.themeVariant === "high-contrast") {
                return {
                    "--button-active-fg": t.stateStandard.active.fg,
                    "--button-active-filter": e === "primary" ? "invert(1) grayscale(1)" : "none"
                };
            }
            return {
                "--button-fg": "var(--toast-fg)",
                "--button-hover-fg": "var(--toast-fg)",
                "--button-active-fg": "var(--toast-fg)"
            };
        },
        icon: {
            icon: lT,
            tooltip: g("close.icon.tooltip.label")
        },
        focusable: false
    }) : null)) : null;
};

const Cq = (e, t) => ({
    ...__({
        "spacing-m": e.tokensExperimental["space-base-m"],
        "spacing-xl": e.tokensExperimental["space-base-xl"],
        "spacing-s": e.tokensExperimental["space-inline-s"],
        "spacing-none": e.tokensExperimental["space-base-null"],
        "accent-bd-width": e.tokensExperimental["size-border-width-l"],
        "accent-bd-color": e.tokensExperimental["color-action-border-emphasis-normal"],
        "font-size-m": e.tokensExperimental["font-size-body-text-m"],
        "anim-dur": e.tokensExperimental["duration-300"],
        "anim-tf-enter-exit": e.tokensExperimental["ease-in-out"],
        "anim-tf-exit": e.tokensExperimental["ease-out"],
        "action-bg": e.tokensExperimental["color-container-background-2"],
        "block-margin": e.tokensExperimental["space-base-s"],
        fg: e.tokensExperimental["color-text-primary"],
        bg: e.tokensExperimental["color-container-background-2"],
        bd: e.themeVariant === "high-contrast" ? e.tokensExperimental["color-container-border-4"] : "none",
        "border-width": e.tokensExperimental["size-border-width-s"],
        sh: e.tokensExperimental["shadow-depth-s"],
        focus: "var(--focus-light-bg-color)",
        ...t?.tokens?.()
    }, "toast"),
    ...!e.enableNovaTokens && Eq(e, t)
});

const Eq = (e, t) => {
    const o = {
        "accent-bd-width": "1px",
        "accent-bd-color": e.backgroundsDepth.large.bd,
        "font-size-m": e.font.size.m,
        "action-bg": e.backgrounds.page.bg
    };
    switch (e.baseReportThemeName) {
      case "highcontrast2018":
      case "highcontrast2017":
        return __(t?.displayMode === "primary" ? {
            fg: e.c.white,
            bg: e.c.black,
            bd: e.backgroundsDepth.large.bd,
            sh: e.backgroundsDepth.large.sh,
            focus: e.c.hcFocus,
            ...o
        } : {
            fg: e.c.black,
            bg: e.c.secondary,
            bd: e.backgroundsDepth.large.bd,
            sh: e.backgroundsDepth.large.sh,
            focus: e.c.black,
            ...o
        }, "toast");
    }
    switch (e.themeVariant) {
      case "dark":
        return __(t?.displayMode === "primary" ? {
            fg: e.c.white,
            bg: e.c.p_2,
            bd: e.backgroundsDepth.large.bd,
            sh: e.backgroundsDepth.large.sh,
            focus: e.c.p1,
            ...o
        } : {
            fg: e.c.white,
            bg: e.c.secondary,
            bd: e.backgroundsDepth.large.bd,
            sh: e.backgroundsDepth.large.sh,
            focus: e.c.colorTextDefault,
            ...o
        }, "toast");

      case "high-contrast":
        return __(t?.displayMode === "primary" ? {
            fg: e.c.white,
            bg: e.c.black,
            bd: e.backgroundsDepth.large.bd,
            sh: e.backgroundsDepth.large.sh,
            focus: e.c.w1_5,
            ...o
        } : {
            fg: e.c.black,
            bg: e.c.e2,
            bd: e.backgroundsDepth.large.bd,
            sh: e.backgroundsDepth.large.sh,
            focus: e.c.black,
            ...o
        }, "toast");

      default:
        return __(t?.displayMode === "primary" ? {
            fg: e.c.black,
            bg: e.c.white,
            bd: e.backgroundsDepth.large.bd,
            sh: e.backgroundsDepth.large.sh,
            focus: e.c.p_1,
            ...o
        } : {
            fg: e.c.white,
            bg: e.c.secondary,
            bd: e.backgroundsDepth.large.bd,
            sh: e.backgroundsDepth.large.sh,
            focus: e.c.white,
            ...o
        }, "toast");
    }
};

const Iq = e => {
    switch (e) {
      case "start":
        return "end";

      case "center":
        return "center";

      case "end":
        return "start";
    }
};

const _q = e => {
    const {width: t, height: o, left: n, top: a, dockPosition: [r, s], isRTL: i} = e;
    const l = e => {
        switch (e) {
          case "start":
            return i ? n + t : n;

          case "center":
            return n + t / 2;

          case "end":
            return i ? n : n + t;
        }
    };
    const c = e => {
        switch (e) {
          case "start":
            return a;

          case "center":
            return a + o / 2;

          case "end":
            return a + o;
        }
    };
    return {
        left: l(r),
        top: c(s),
        flippedLeft: l(Iq(r)),
        flippedTop: c(Iq(s))
    };
};

const Dq = (e, t, o, n, a) => {
    const r = e => {
        if (e >= o && e <= n) return 0;
        return e > n ? e - n : o - e;
    };
    switch (a) {
      case "none":
        return e;

      case "fit":
        return Math.min(n, Math.max(o, e));

      case "flip":
        const a = r(e);
        const s = r(t);
        return a <= s ? e : t;
    }
};

const Lq = (e, t, o, n, a, r, s) => {
    const {width: i, height: l} = e.getBoundingClientRect();
    if (i === 0 || l === 0) return [ undefined, undefined ];
    const c = o.getBoundingClientRect();
    const {left: d, top: u, flippedLeft: m, flippedTop: p} = _q({
        left: c.left,
        top: c.top,
        width: c.width,
        height: c.height,
        dockPosition: n,
        isRTL: s
    });
    const {left: f, top: g, flippedLeft: h, flippedTop: b} = _q({
        left: 0,
        top: 0,
        width: i,
        height: l,
        dockPosition: t,
        isRTL: s
    });
    const v = d - f + a[0];
    const y = u - g + a[1];
    const x = m - h + a[0];
    const S = p - b + a[1];
    const w = document.body.getBoundingClientRect();
    const C = w.top + w.height - l;
    const E = w.top;
    const I = w.left + w.width - i;
    const _ = w.left;
    const D = typeof r === "string" ? r : r[0];
    const L = typeof r === "string" ? r : r[1];
    const T = Dq(v, x, _, I, D);
    const R = Dq(y, S, E, C, L);
    return [ T, R ];
};

var Tq = "sas_components-MessageToast-MessageToaster_static-area";

var Rq = {
    staticArea: Tq
};

let kq = null;

let Aq = 0;

const Mq = 5;

function Nq() {
    let e = document.getElementById("static-area");
    if (!e) {
        e = document.createElement("div");
        e.id = "static-area";
        e.className = Rq.staticArea;
        document.body.appendChild(e);
    }
    return e;
}

function Oq() {
    Aq++;
    const e = document.createElement("div");
    e.id = `toast-${Aq}`;
    e.setAttribute("role", "alert");
    Nq().appendChild(e);
    return e;
}

function Pq(e) {
    const t = XD().get(L_.ENABLE_POPUP_DISPLAY_DURATION);
    const o = t === "true" ? XD().get(L_.POPUP_DISPLAY_DURATION) : undefined;
    const n = o ? parseFloat(o) * 1e3 : undefined;
    if (n && e && e > n || e && !n) {
        return e;
    } else if (n) {
        return n;
    } else {
        return Mq * 1e3;
    }
}

function Bq(e) {
    if (!e) {
        return;
    }
    clearTimeout(e.timeout);
    const t = Nq();
    if (t.contains(e.container)) {
        const o = () => {
            e.root.unmount();
            t.removeChild(e.container);
            e.toast?.removeEventListener("animationend", o);
        };
        const n = e.toast?.dataset.closingAnim;
        if (e.hideAnimation || !n || n === "false") {
            o();
        } else {
            e.toast?.addEventListener("animationend", o);
            e.toast?.classList.add(n);
        }
    }
    if (e === kq) {
        kq = null;
    }
}

const zq = () => {
    const e = x_();
    const o = y_();
    const n = ny();
    return function a(r, s) {
        const i = Oq();
        Bq(kq);
        const l = S();
        const c = s?.actionButton;
        const d = window.setTimeout((() => {
            if (m.hovering || l.current === document.activeElement) m.timeout = -1; else Bq(m);
        }), Pq(s?.timeout));
        const u = E(i);
        const m = {
            container: i,
            root: u,
            timeout: d,
            hovering: false,
            toast: null,
            hideAnimation: s?.hideAnimation ?? false
        };
        u.render(t(h, {
            fallback: null
        }, t("div", {
            style: o
        }, t(c_, e, t(oy, n, t(wq, Ee({
            isOpen: true,
            toastRef: e => {
                m.toast = e;
            }
        }, s, {
            actionButton: c ? {
                ...c,
                ref: l,
                onBlur: () => {
                    if (m.timeout === -1) Bq(m);
                }
            } : undefined,
            onMouseEnter: () => {
                m.hovering = true;
            },
            onMouseLeave: () => {
                m.hovering = false;
                if (m.timeout === -1 && l.current !== document.activeElement) Bq(m);
            },
            closeable: s?.closeable,
            onClose: () => {
                Bq(m);
                s?.onClose?.();
            }
        }), r))))));
        kq = m;
    };
};

fb(vt);

const Fq = fb(yt);

const jq = u((function e(o, n) {
    const a = Fq();
    const r = JY();
    const i = eq();
    const l = s(((e, t) => {
        const n = {
            type: "searchLocation",
            value: {
                name: e,
                searchQuery: e,
                idQualifier: Hq(e)
            }
        };
        r?.((e => ({
            ...e,
            location: n,
            locationContextPath: [ n ]
        })));
        i?.([]);
        o.onSearch?.(e, t);
    }), [ r, o, i ]);
    return t(YY, Ee({
        ref: n,
        initialQuery: o.initialQuery,
        enableExperimental: false,
        onCurrentSearchIndicesChanged: () => {}
    }, o, {
        placeholder: o.placeholder ?? a("content.placeholder.label"),
        onSearch: l,
        onClearSearch: o.onClearSearch
    }));
}));

const Vq = new Map;

const Hq = e => {
    const t = Vq.get(e);
    if (t) {
        Vq.set(e, t + 1);
        return `${e} ${t}`;
    } else {
        Vq.set(e, 1);
        return `${e}`;
    }
};

function Uq(e, t) {
    return !Wq(e, t) && !Kq(e, t);
}

function Gq(e, t, o) {
    const n = e.scrollWidth;
    if (n <= e.offsetWidth) {
        return;
    }
    const a = e.getBoundingClientRect();
    const r = t.left - a.left;
    const s = t.right - a.right;
    const i = 1;
    if (r <= 0 && o !== "next") {
        e.scrollLeft = e.scrollLeft + r - i;
    } else if (s > 0 && o !== "back") {
        e.scrollLeft = e.scrollLeft + s + i;
    }
}

function Kq(e, t) {
    const o = e.getBoundingClientRect();
    const n = t.getBoundingClientRect();
    return n.left + 1 < o.left;
}

function Wq(e, t) {
    const o = e.getBoundingClientRect();
    const n = t.getBoundingClientRect();
    return n.left + n.width - 1 > o.left + o.width;
}

function $q(e, t, o, n) {
    const a = t.current;
    const r = o && o.current ? o.current : undefined;
    if (!a) return;
    if (!r) return;
    let s = -1;
    if (e === "next") {
        const e = n ? Kq : Wq;
        s = r.findIndex((t => t && e(a, t)));
    } else {
        const e = n ? Wq : Kq;
        for (let t = r.length - 1; t >= 0; t--) {
            const o = r[t];
            if (o && e(a, o)) {
                s = t;
                break;
            }
        }
    }
    if (s === -1) {
        return;
    }
    const i = r[s];
    if (!i) {
        return;
    }
    e = n ? e === "back" ? "next" : "back" : e;
    Gq(a, i.getBoundingClientRect(), e);
}

function Yq(e, t, o) {
    const n = e.scrollHeight;
    if (n <= e.offsetHeight) {
        return;
    }
    const a = e.getBoundingClientRect();
    const r = t.top - a.top;
    const s = t.bottom - a.bottom;
    const i = 1;
    if (r <= 0 && o !== "next") {
        e.scrollTop = e.scrollTop + r - i;
    } else if (s > 0 && o !== "back") {
        e.scrollTop = e.scrollTop + s + i;
    }
}

function qq(e, t) {
    const o = e.getBoundingClientRect();
    const n = t.getBoundingClientRect();
    return n.top + 1 < o.top;
}

function Xq(e, t) {
    const o = e.getBoundingClientRect();
    const n = t.getBoundingClientRect();
    return n.top + n.height - 1 > o.top + o.height;
}

function Zq(e, t, o) {
    const n = ay();
    if (!t || t === "horizontal") {
        return {
            scrollToPrevious: () => $q("back", e, o, n),
            scrollToNext: () => $q("next", e, o, n),
            scrollTo: (t, o) => {
                const n = e.current;
                if (!n) return;
                Gq(n, t.getBoundingClientRect(), o);
            },
            elementIsFullyVisible: t => {
                const o = e.current;
                if (!o) return false;
                return Uq(o, t);
            },
            elementBackIsClipped: t => {
                const o = e.current;
                if (!o) return false;
                return n ? Wq(o, t) : Kq(o, t);
            },
            elementNextIsClipped: t => {
                const o = e.current;
                if (!o) return false;
                return n ? Kq(o, t) : Wq(o, t);
            }
        };
    }
    return {
        scrollTo: (t, o) => {
            const n = e.current;
            if (!n) return;
            Yq(n, t.getBoundingClientRect(), o);
        },
        elementIsFullyVisible: t => {
            const o = e.current;
            if (!o) return false;
            return !qq(o, t) && !Xq(o, t);
        },
        elementBackIsClipped: t => {
            const o = e.current;
            if (!o) return false;
            return qq(o, t);
        },
        elementNextIsClipped: t => {
            const o = e.current;
            if (!o) return false;
            return Xq(o, t);
        }
    };
}

const Jq = {
    canDrag: () => false,
    isDragging: () => false,
    getItem: () => null,
    getItemType: () => null,
    getDropResult: () => null,
    didDrop: () => false,
    getInitialClientOffset: () => null,
    getInitialSourceClientOffset: () => null,
    getClientOffset: () => null,
    getSourceClientOffset: () => null,
    getDifferenceFromInitialOffset: () => null,
    getTargetIds: () => [],
    receiveHandlerId: () => {},
    getHandlerId: () => null,
    subscribeToStateChange: () => () => {}
};

const Qq = {
    canDrop: () => false,
    isOver: () => false,
    getItem: () => null,
    getItemType: () => null,
    getDropResult: () => null,
    didDrop: () => false,
    getInitialClientOffset: () => null,
    getInitialSourceClientOffset: () => null,
    getClientOffset: () => null,
    getSourceClientOffset: () => null,
    getDifferenceFromInitialOffset: () => null,
    receiveHandlerId: () => {},
    getHandlerId: () => null,
    subscribeToStateChange: () => () => {}
};

const eX = {
    isDragging: () => false,
    getItem: () => null,
    getItemType: () => null,
    getInitialClientOffset: () => null,
    getInitialSourceClientOffset: () => null,
    getClientOffset: () => null,
    getSourceClientOffset: () => null,
    getDifferenceFromInitialOffset: () => null
};

const tX = {
    useDrag: e => [ typeof e === "function" ? e().collect?.(Jq) ?? {} : e.collect?.(Jq) ?? {}, () => null, () => null ],
    useDrop: e => [ typeof e === "function" ? e().collect?.(Qq) ?? {} : e.collect?.(Qq) ?? {}, () => null ],
    useDragLayer: e => e(eX),
    getEmptyImage: () => new Image
};

const oX = i(tX);

function nX() {
    return l(oX);
}

function aX(e, t, o, n = 500) {
    const {useDrop: r} = nX();
    const [{isOver: s}, i] = r({
        accept: t,
        canDrop: () => true,
        collect: e => ({
            isOver: e.isOver()
        }),
        drop: (e, t) => {
            if (!t.didDrop()) {
                return {
                    isBaseScrollableButtons: true
                };
            }
        }
    });
    a((() => {
        let e;
        if (s) {
            e = setTimeout((() => {
                o();
            }), n);
        }
        return () => {
            if (e) clearTimeout(e);
        };
    }), [ s, n, o ]);
    i(e);
}

var rX = "sas_components-Scrollable-Scrollable_vertical";

var sX = "sas_components-Scrollable-Scrollable_scroll-container";

var iX = "sas_components-Scrollable-Scrollable_horizontal";

var lX = "sas_components-Scrollable-Scrollable_scroll-content";

var cX = "sas_components-Scrollable-Scrollable_fade-container";

var dX = "sas_components-Scrollable-Scrollable_scroll-button";

var uX = "sas_components-Scrollable-Scrollable_show-scroll-bar-x";

var mX = "sas_components-Scrollable-Scrollable_show-scroll-bar-y";

var pX = "sas_components-Scrollable-Scrollable_show-scroll-bar";

var fX = {
    vertical: rX,
    scrollContainer: sX,
    horizontal: iX,
    scrollContent: lX,
    fadeContainer: cX,
    scrollButton: dX,
    showScrollBarX: uX,
    showScrollBarY: mX,
    showScrollBar: pX
};

const gX = fb(xt);

const hX = u((function e({variant: a = "standard", ...r}, i) {
    let l;
    const u = r.renderUsingListTags ?? true;
    if (!u) {
        l = "div";
    } else {
        l = r.allowOrderedList ? `ol` : `ul`;
    }
    const m = c(null);
    const p = c(null);
    const f = c(null);
    const g = gX();
    const {refs: h, createSetRef: b} = uU();
    const y = v.count(r.children);
    const [x, S] = n(false);
    const [w, C] = n(true);
    const [E, I] = n(false);
    const [_, D] = n(false);
    const [L, T] = kN((() => z(true)));
    const R = a === "standard" ? oN.Icon : oN.PrimaryIcon;
    const k = ay();
    const {scrollTo: A, elementIsFullyVisible: M, elementBackIsClipped: N, elementNextIsClipped: O} = Zq(m, r.orientation);
    const P = r.hideScrollButtons ?? false;
    const B = k_(r.currentIndex);
    function z(e = false) {
        if (r.disableOverflowCheck) return;
        const t = r.itemRefs ? r.itemRefs : h;
        const o = r.itemRefs ? t.length : y;
        const n = T();
        if (!m.current || !n || !t) return;
        let a = false;
        if (r.orientation === "vertical" && n.clientHeight === 0 || r.orientation !== "vertical" && n.clientWidth === 0) {
            return;
        }
        if (o <= 1) {
            a = false;
        } else if (r.orientation === "vertical") {
            const t = !!e && K.current ? 2 * K.current.offsetHeight : 0;
            a = m.current.clientHeight + t < m.current.scrollHeight;
        } else {
            const t = !!e && K.current ? 2 * K.current.offsetWidth : 0;
            a = m.current.clientWidth + t < m.current.scrollWidth;
        }
        if (E !== a) {
            I(a);
            r.onOverflowChange?.(a);
        }
        let s = -1;
        if (_ || !_ && r.selectedIndex === undefined || r.suppressScrollOnBlur) s = r.currentIndex; else s = r.selectedIndex !== undefined ? r.selectedIndex : -1;
        if (a && s !== -1 && t[s]) {
            let e = null;
            const n = t.filter((e => e !== null));
            if (s === n.length - 1 || B && B - s === -1) e = r.orientation !== "vertical" && k ? "back" : "next";
            if (s === 0 || B && B - s === 1) e = r.orientation !== "vertical" && k ? "next" : "back";
            if (!r.hideScrollButtons) {
                A(t[s], e);
                if (t[o - 1] && O(t[o - 1]) !== w) {
                    C(O(t[o - 1]));
                } else if (t[0] && N(t[0]) !== x) {
                    S(N(t[0]));
                }
            } else {
                setTimeout((() => A(t[s], e)), 0);
            }
        }
    }
    d(z);
    const F = s((e => {
        f.current = e;
        D_(i, e);
    }), [ i ]);
    const j = s((e => {
        const t = r.itemRefs ? r.itemRefs : h, o = r.itemRefs ? t.length : y;
        if (!m.current || !o) return;
        const n = t.map((e => e && M(e)));
        if (e === "back") {
            const e = n.indexOf(true);
            let t = r.currentIndex - 1, o = e - 1;
            for (let e = o; e >= 0; e--) {
                if (n[e] !== undefined) {
                    o = e;
                    break;
                }
            }
            for (let e = t; e >= 0; e--) {
                if (n[e] !== undefined) {
                    t = e;
                    break;
                }
            }
            r.setCurrentIndex(Math.max(0, e === -1 ? t : o));
        } else {
            const e = n.lastIndexOf(true);
            const t = n.findIndex(((t, o) => o > e && n[o] !== undefined));
            let a = n.findIndex(((e, t) => t > r.currentIndex && n[t] !== undefined));
            a = a === -1 ? r.currentIndex : a;
            r.setCurrentIndex(Math.min(o - 1, e === -1 ? a : t));
        }
    }), [ M, y, h, r ]);
    const V = ke(fX.scrollContent, r.contentClassName, r.contentProps?.className, P && fX[`showScrollBar${r.orientation === "vertical" ? "Y" : "X"}`]);
    const H = !u ? "div" : "li";
    const U = v.map(r.children, ((e, n) => t(o, {
        key: n
    }, n > 0 ? r.separator : null, t(H, {
        ref: b(n),
        className: r.itemClassName?.(n),
        role: r.contentProps && r.contentProps.role ? "presentation" : undefined,
        onFocus: () => {
            D(true);
        }
    }, e))));
    const G = {
        ref: e => {
            m.current = e;
            D_(r.contentRef, e);
        },
        ...{
            ...r.contentProps
        },
        className: V,
        onScroll: r.onScroll,
        onScrollCapture: () => {
            if (P) return;
            const e = r.itemRefs ? r.itemRefs : h, t = r.itemRefs ? e.length : y;
            if (!m.current || !t) return;
            const o = e[0];
            const n = e[t - 1];
            o && S(N(o));
            n && C(O(n));
        },
        style: {
            ...r.contentProps?.style,
            ...cD() === sD.Safari && {
                scrollBehavior: "auto"
            }
        }
    };
    const K = c(null);
    const W = c(null);
    aX(K, r.acceptDropTypes ?? [], s((() => {
        if (x) {
            D(true);
            j("back");
        }
    }), [ x, j ]));
    aX(W, r.acceptDropTypes ?? [], s((() => {
        if (w) {
            D(true);
            j("next");
        }
    }), [ w, j ]));
    return t("div", {
        className: ke(r.className, r.orientation === "vertical" ? fX.vertical : fX.horizontal),
        style: {
            ...r.style
        },
        ref: F,
        "data-testid": r.testId,
        onFocus: r.onFocus,
        role: r.role,
        "aria-label": r.ariaLabel,
        "data-landmark-label": r.landmarkLabel
    }, t("div", {
        className: fX.scrollContainer,
        ref: L,
        onBlur: e => {
            if (r.selectedIndex !== undefined && !T()?.contains(e.nativeEvent.relatedTarget)) {
                const e = r.itemRefs ? r.itemRefs : h;
                const t = e[r.selectedIndex] ?? null;
                if (!r.suppressScrollOnBlur && t) {
                    A(t);
                    r.setCurrentIndex(r.selectedIndex);
                }
                D(false);
            }
        }
    }, !P && E && t(QM, {
        ref: K,
        testId: gb(r.testId, "previousBtn"),
        className: fX.scrollButton,
        variant: R,
        disabled: !x,
        focusable: false,
        onPress: () => {
            D(true);
            j("back");
        },
        ariaLabel: g("back.button.aria"),
        icon: {
            icon: r.orientation === "vertical" ? wT : _T,
            tooltip: "",
            ariaLabel: ""
        },
        enableContinuousPress: true
    }), t("div", {
        className: ke(r.scrollWindowClassName, fX.fadeContainer),
        ref: e => {
            p.current = e;
            D_(r.scrollWindowRef, e);
        },
        "data-testid": gb(r.testId, "scrollWindow")
    }, t(l, Ee({}, G, {
        "aria-describedby": r.contentAriaDescribedBy
    }), U)), !P && E && t(QM, {
        ref: W,
        testId: gb(r.testId, "nextBtn"),
        className: fX.scrollButton,
        variant: R,
        disabled: !w,
        focusable: false,
        onPress: () => {
            D(true);
            j("next");
        },
        ariaLabel: g("next.button.aria"),
        icon: {
            icon: r.orientation === "vertical" ? CT : ET,
            ariaLabel: "",
            tooltip: ""
        },
        enableContinuousPress: true
    })));
}));

const bX = u((function e(o, n) {
    return t(hX, Ee({}, o, {
        ref: n
    }));
}));

var vX = "sas_components-Breadcrumb-BreadcrumbItem-SingleBreadcrumbDesign_interactive";

var yX = "sas_components-Breadcrumb-BreadcrumbItem-SingleBreadcrumbDesign_current";

var xX = "sas_components-Breadcrumb-BreadcrumbItem-SingleBreadcrumbDesign_item-text";

var SX = "sas_components-Breadcrumb-BreadcrumbItem-SingleBreadcrumbDesign_single-item";

var wX = "sas_components-Breadcrumb-BreadcrumbItem-SingleBreadcrumbDesign_single-item-focus";

var CX = "sas_components-Breadcrumb-BreadcrumbItem-SingleBreadcrumbDesign_exit-animation";

var EX = {
    interactive: vX,
    current: yX,
    itemText: xX,
    singleItem: SX,
    singleItemFocus: wX,
    exitAnimation: CX
};

const IX = u((function e(o, r) {
    const s = C_();
    const i = ay();
    const [l, d] = n(true);
    const u = {
        ..._X(s, {
            tokens: o.tokens,
            variant: o.variant
        }),
        ...o.theme?.(s)
    };
    const [m, p] = n(null);
    a((() => () => {
        if (m) {
            clearTimeout(m);
        }
    }), [ m ]);
    const f = c(true);
    a((() => {
        f.current = false;
    }), []);
    const [g, h] = n("");
    a((() => {
        if (o.animated && o.isLastItem && o.hideAnimation) {
            h(EX.exitAnimation);
        } else {
            h("");
        }
    }), [ o.animated, o.isLastItem, o.hideAnimation ]);
    const b = e => {
        if (o.onPress) {
            e.preventDefault();
            const t = setTimeout((() => {
                o.onPress?.(o.index);
            }), 0);
            p(t);
        }
    };
    const v = WA();
    const y = fO({
        tooltip: o.icon?.tooltip ?? ""
    });
    const x = e => {
        if (e) {
            S(e);
            y(e);
        }
    };
    const S = e => {
        D_(r, e);
        D_(v, e);
    };
    const w = {
        className: ke(EX.itemText, o.isCurrent ? EX.current : EX.interactive, g),
        style: {
            ...u,
            ...o.style
        },
        tabIndex: o.focused ? 0 : -1,
        "aria-current": o.isCurrent ? o.ariaCurrent ?? "page" : undefined,
        "aria-label": o.icon?.tooltip ? `${o.icon.tooltip}, ${o.value}` : `${o.value}`,
        onFocus: () => {
            o.onFocus?.();
            d(false);
        },
        onKeyDown: e => o.onKeyDown?.(e),
        onBlur: () => {
            d(true);
        },
        onClick: b,
        "data-testid": o.testId
    };
    const C = !o.hideAnimation ? 0 : .3;
    const E = i ? "100%" : "-100%";
    const I = {
        closed: {
            translate: E
        },
        open: {
            translate: 0,
            transition: {
                duration: C,
                ease: [ 0, .5, .2, 1 ]
            }
        }
    };
    return t(Me, {
        mode: "wait"
    }, t(Ne.div, {
        key: "breadcrumb-item",
        variants: I,
        animate: "open",
        initial: "closed",
        className: ke(EX.singleItem, o.focused && !l && EX.singleItemFocus, g),
        style: {
            ...u,
            ...o.style
        }
    }, o.icon && t(MM, Ee({
        tooltip: ""
    }, o.icon)), o.isCurrent ? t("span", Ee({}, w, {
        ref: x,
        role: "text"
    }), o.value) : t("a", Ee({
        ref: x,
        href: "#"
    }, w), o.value)));
}));

const _X = (e, t) => {
    let o = {
        fg: e.tokensExperimental["color-action-text-control-normal"],
        focus: "var(--focus-light-bg)",
        "font-family": "inherit"
    };
    if (e.themeVariant === "light" && t?.variant === "primary-light") {
        o = {
            ...o,
            fg: e.tokensExperimental["color-text-primary-inverse"],
            focus: "var(--focus-dark-bg)"
        };
    }
    const n = t?.tokens?.();
    if (n?.fg) {
        o.fg = n.fg;
    }
    if (n?.fontFamily) {
        o["font-family"] = n.fontFamily;
    }
    return {
        ...__({
            ...o,
            "font-weight-thick": e.tokensExperimental["font-style-weight-700"],
            "font-size-m": e.tokensExperimental["font-size-body-text-m"],
            "anim-tf-exit": e.tokensExperimental["ease-out"],
            "anim-dur-enter": e.tokensExperimental["duration-300"],
            "anim-tf-enter": e.tokensExperimental["ease-in"]
        }, "breadcrumb-text"),
        ...!e.enableNovaTokens && DX(e, t)
    };
};

const DX = (e, t) => {
    let o = {
        fg: e.stateStandard.normal.fg,
        "font-family": "inherit"
    };
    if (e.themeVariant === "light" && t?.variant === "primary-light") {
        o = {
            fg: e.c.white,
            "font-family": "inherit"
        };
    }
    const n = t?.tokens?.();
    if (n?.fg) {
        o.fg = n.fg;
    }
    if (n?.fontFamily) {
        o["font-family"] = n.fontFamily;
    }
    return {
        ...__({
            ...o,
            "font-weight-thick": e.font.weight.thick,
            "font-size-m": e.font.size.m
        }, "breadcrumb-text")
    };
};

var LX = "sas_components-Breadcrumb-BreadcrumbItem-MultiBreadcrumbDesign_current";

var TX = "sas_components-Breadcrumb-BreadcrumbItem-MultiBreadcrumbDesign_interactive";

var RX = "sas_components-Breadcrumb-BreadcrumbItem-MultiBreadcrumbDesign_action-button";

var kX = "sas_components-Breadcrumb-BreadcrumbItem-MultiBreadcrumbDesign_item-text";

var AX = "sas_components-Breadcrumb-BreadcrumbItem-MultiBreadcrumbDesign_multi-item";

var MX = "sas_components-Breadcrumb-BreadcrumbItem-MultiBreadcrumbDesign_dropdown";

var NX = "sas_components-Breadcrumb-BreadcrumbItem-MultiBreadcrumbDesign_dropdown-label";

var OX = "sas_components-Breadcrumb-BreadcrumbItem-MultiBreadcrumbDesign_dropdown-arrow";

var PX = "sas_components-Breadcrumb-BreadcrumbItem-MultiBreadcrumbDesign_exit-animation";

var BX = {
    current: LX,
    interactive: TX,
    actionButton: RX,
    itemText: kX,
    multiItem: AX,
    dropdown: MX,
    dropdownLabel: NX,
    dropdownArrow: OX,
    exitAnimation: PX
};

const zX = u((function e(o, s) {
    const i = r((() => o.values.map((e => ({
        text: e
    })))), [ o.values ]);
    const l = C_();
    const d = ay();
    const u = o.tokens?.();
    const m = WA();
    const p = {
        ...FX(l, {
            tokens: o.tokens,
            variant: o.variant
        }),
        ...o.theme?.(l)
    };
    const f = l.themeVariant === "light" && o.variant === "primary-light" ? oN.PrimaryIcon : oN.Icon;
    const g = c(true);
    a((() => {
        g.current = false;
    }), []);
    const [h, b] = n("");
    a((() => {
        if (o.animated && o.isLastItem && o.hideAnimation) {
            b(BX.exitAnimation);
        } else {
            b("");
        }
    }), [ o.animated, o.isLastItem, o.hideAnimation ]);
    const v = !o.hideAnimation ? 0 : .3;
    const y = d ? "100%" : "-100%";
    const x = {
        closed: {
            translate: y
        },
        open: {
            translate: 0,
            transition: {
                duration: v,
                ease: [ 0, .5, .2, 1 ]
            }
        }
    };
    return t(Me, {
        mode: "wait"
    }, t(Ne.div, {
        key: "multi-breadcrumb-item",
        variants: x,
        animate: "open",
        initial: "closed"
    }, t(Xz, {
        items: i,
        text: i[o.selectedIndex]?.text,
        onPress: () => o.onPress?.(o.index),
        onOpen: () => {
            o.onOpen?.(o.index);
        },
        onClose: () => {
            o.onClose?.(o.index);
        },
        onItemSelected: e => o.onPressItem?.(o.index, e ?? 0),
        focusable: o.focused,
        variant: f,
        style: {
            ...p,
            ...o.style
        },
        ref: e => {
            m(e);
            D_(s, e);
        },
        className: ke(iG.select, BX.dropdown, iG.label, BX.dropdownLabel, BX.itemText, BX.interactive, h),
        ariaCurrent: o.isCurrent ? o.ariaCurrent ?? "page" : undefined,
        testId: o.testId,
        ariaRoleDescription: "",
        theme: () => {
            const e = {
                "--button-filter": "none",
                "--button-hover-filter": "none",
                "--button-active-filter": "none",
                "--split-button-divider": "transparent",
                "--button-active-bd": "transparent"
            };
            const t = u ? {
                "--button-fg": u.fg,
                "--button-fontFamily": u.fontFamily,
                "--button-hover-fg": u.fg,
                "--button-active-fg": u.fg
            } : {};
            if (l.themeVariant === "light" && o.variant === "primary-light") {
                return {
                    ...e,
                    "--button-hover-bg": Jv(l.tokensExperimental["color-text-primary-inverse"], .15),
                    "--button-active-bg": Jv(l.tokensExperimental["color-text-primary-inverse"], .25),
                    ...t
                };
            }
            return {
                ...e,
                ...t
            };
        },
        buttonClassName: ke(BX.actionButton, o.isCurrent ? BX.current : undefined),
        onFocus: o.onFocus
    })));
}));

const FX = (e, t) => {
    let o = {
        fg: e.tokensExperimental["color-action-text-control-normal"],
        bg: e.tokensExperimental["color-action-background-control-normal"],
        bd: e.tokensExperimental["color-action-border-control-read-only"],
        focus: "var(--focus-light-bg)"
    };
    if (e.themeVariant === "light" && t?.variant === "primary-light") {
        o = {
            fg: e.tokensExperimental["color-text-primary-inverse"],
            bg: Jv(e.tokensExperimental["color-text-primary-inverse"], .1),
            bd: e.tokensExperimental["color-text-primary-inverse"],
            focus: "var(--focus-dark-bg)"
        };
    }
    const n = t?.tokens?.();
    return {
        ...__({
            filter: "none",
            "font-weight-thick": e.tokensExperimental["font-style-weight-700"],
            "font-family": n?.fontFamily ?? "inherit"
        }, "breadcrumb-text"),
        ...__({
            ...o,
            fg: n?.fg ?? "inherit",
            "focus-offset": e.themeVariant === "high-contrast" ? "calc(-1 * var(--focus-width))" : "calc(-1 * var(--focus-width) - 2px)"
        }, "breadcrumb-dropdown"),
        ...__({
            "squish-xs": e.tokensExperimental["space-squish-xs"],
            "mg-xs": e.tokensExperimental["space-inline-xs"],
            "anim-dur-enter": e.tokensExperimental["duration-300"],
            "anim-tf-enter": e.tokensExperimental["ease-in"]
        }, "breadcrumb"),
        ...!e.enableNovaTokens && jX(e, t)
    };
};

const jX = (e, t) => {
    let o = {
        ...e.stateStandard.normal,
        focus: "var(--focus-light-bg)"
    };
    if (e.themeVariant === "light" && t?.variant === "primary-light") {
        o = {
            fg: e.c.white,
            bg: Jv(e.c.white, .1),
            bd: e.c.white,
            focus: "var(--focus-dark-bg)"
        };
    }
    return {
        ...__({
            filter: e.stateStandard.normal.filter,
            "font-weight-thick": e.font.weight.thick
        }, "breadcrumb-text"),
        ...__({
            ...o,
            "focus-offset": e.themeVariant === "high-contrast" ? "calc(-1 * var(--focus-width))" : "calc(-1 * var(--focus-width) - 2px)"
        }, "breadcrumb-dropdown")
    };
};

var VX = "sas_components-Breadcrumb-HorizontalBreadcrumb_list";

var HX = "sas_components-Breadcrumb-HorizontalBreadcrumb_item-icon";

var UX = "sas_components-Breadcrumb-HorizontalBreadcrumb_opening";

var GX = "sas_components-Breadcrumb-HorizontalBreadcrumb_list-item";

var KX = {
    list: VX,
    itemIcon: HX,
    opening: UX,
    listItem: GX
};

const WX = fb(St);

const $X = MA("AriaText");

const YX = e => {
    const r = WX();
    const s = $X();
    const i = e.values ? e.values.length - 1 : -1;
    const [l, d] = n(undefined);
    const u = c(false);
    const [m, p] = n(false);
    const [f, g] = n(i);
    const [h, b] = n(i);
    const [v, y] = n(400);
    const [x, S] = n(true);
    const [w, C] = kN((() => {
        const e = C();
        if (!e) return;
        y(e.clientWidth);
    }));
    a((() => {
        b(i);
        g(i);
    }), [ i ]);
    const E = C_();
    a((() => {
        if (x) {
            S(false);
        }
    }), []);
    const I = {
        ...XX(E, {
            tokens: e.tokens,
            lastValueIndex: i,
            listMaxWidth: v,
            variant: e.variant
        }),
        ...e.theme?.(E)
    };
    const _ = t => {
        p(true);
        g(t);
        setTimeout((() => {
            e.onPress?.(t);
            d(undefined);
        }), 300);
        d(t);
    };
    a((() => {
        if (m) {
            const e = setTimeout((() => {
                p(false);
            }), 300);
            return () => clearTimeout(e);
        }
    }), [ m ]);
    const D = ay();
    const L = e => {
        if (u.current) {
            return;
        }
        switch (e.key) {
          case D ? "ArrowRight" : "ArrowLeft":
            {
                const e = Math.max(f - 1, 0);
                g(e);
                break;
            }

          case D ? "ArrowLeft" : "ArrowRight":
            {
                const e = Math.min(f + 1, i);
                g(e);
                break;
            }

          case "PageUp":
            {
                const e = Math.max(qX(k.current, M, "back") ?? f, 0);
                g(e);
                break;
            }

          case "PageDown":
            {
                const e = Math.min(qX(k.current, M, "next") ?? f, i);
                g(e);
                break;
            }

          case "Home":
            g(0);
            break;

          case "End":
            g(i);
            break;

          default:
            return;
        }
        e.preventDefault();
    };
    const T = () => e => {
        if (e.currentTarget.contains(e.target) && e.relatedTarget !== null && !e.currentTarget.contains(e.relatedTarget)) {
            b(f);
        }
    };
    const R = c(null);
    const k = c(null);
    const A = e => {
        R.current = e;
        w(e);
    };
    const {refs: M, createSetRef: N} = uU();
    const O = e.hideAnimation ?? false;
    const P = jD(L_.PLAY_VISUAL_EFFECTS) === "true" && !O && !x;
    a((() => {
        if (R.current?.contains(document.activeElement)) {
            M[f]?.focus();
        }
    }), [ M, f ]);
    return t(o, null, t(bX, {
        ref: A,
        contentRef: k,
        currentIndex: h,
        setCurrentIndex: b,
        separator: t(MM, {
            className: ke(KX.itemIcon, KX.opening),
            theme: () => ({
                "--icon-default-override-fg": "var(--breadcrumb-separator-icon-fg)"
            }),
            icon: IT
        }),
        contentClassName: KX.list,
        itemClassName: () => KX.listItem,
        contentProps: {
            onKeyDown: L,
            onFocus: T,
            "aria-label": e.ariaLabel ?? r("list.aria.label")
        },
        style: {
            ...I,
            ...e.style
        },
        selectedIndex: e.onPress ? h : undefined,
        variant: e.variant === "primary-light" ? "primary-light" : "standard",
        contentAriaDescribedBy: s,
        allowOrderedList: true,
        testId: gb(e.testId, "scrollable")
    }, e.values?.map(((o, n) => {
        const a = n === f;
        const r = N(n);
        const s = n === (e.values?.length ?? 0) - 1;
        let c = false;
        if (l !== undefined && n > l) {
            c = true;
        }
        return o.isSingle ? t(IX, {
            ref: r,
            key: n,
            index: n,
            isLastItem: s,
            animated: c,
            focused: n === f,
            isCurrent: o.isCurrent ?? n === i,
            hideAnimation: P,
            value: o.values[o.selectedIndex],
            onPress: _,
            variant: e.variant,
            testId: gb(e.testId, `breadcrumbItem-${n}`),
            onFocus: () => {
                b(n);
            },
            tokens: e.tokens,
            icon: o.icon,
            ariaCurrent: e.ariaCurrent
        }) : t(zX, {
            ref: r,
            key: n,
            index: n,
            isLastItem: s,
            animated: c,
            isCurrent: o.isCurrent ?? n === i,
            focused: a,
            hideAnimation: P,
            values: o.values,
            onOpen: t => {
                u.current = true;
                g(t);
                e.onOpen?.(t);
            },
            onClose: e => {
                u.current = false;
                g(e);
            },
            onPress: _,
            onPressItem: e.onPressItem,
            selectedIndex: o.selectedIndex,
            onFocus: () => {
                b(n);
            },
            variant: e.variant,
            testId: gb(e.testId, `breadcrumbItem-${n}`),
            theme: e.theme,
            tokens: e.tokens,
            ariaCurrent: e.ariaCurrent
        });
    }))), t("span", {
        id: s,
        hidden: true
    }, r("list.aria")));
};

function qX(e, t, o) {
    if (!e) return null;
    const n = e.getBoundingClientRect();
    const a = t.map((e => {
        if (!e) return false;
        const t = e.getBoundingClientRect();
        return t.left >= n.left && t.left + t.width <= n.left + n.width;
    }));
    const r = o === "back" ? a.indexOf(true) - 1 : a.lastIndexOf(true) + 1;
    const s = o === "back" ? 0 : t.length - 1;
    const i = o === "back" ? -1 : 1;
    let l = 0;
    let c = s;
    for (let e = r; e !== s; e += i) {
        l += t[e]?.getBoundingClientRect().width ?? 0;
        if (l > n.width) {
            c = e - i;
            break;
        }
        l += 14;
    }
    return c;
}

const XX = (e, t) => {
    const o = t?.tokens?.().fg ?? (e.themeVariant === "light" && t.variant === "primary-light" ? e.tokensExperimental["color-text-primary-inverse"] : e.tokensExperimental["color-action-text-control-normal"]);
    return {
        ...__({
            "separator-icon-fg": o,
            "squish-xs": e.tokensExperimental["space-squish-xs"],
            "squish-s": e.tokensExperimental["space-squish-s"],
            "anim-dur-enter": e.tokensExperimental["duration-250"],
            "anim-tf-enter": e.tokensExperimental["ease-in"],
            "mg-xs": e.tokensExperimental["space-inline-xs"]
        }, "breadcrumb"),
        ...!e.enableNovaTokens && ZX(e, t)
    };
};

const ZX = (e, t) => {
    const o = t?.tokens?.().fg ?? (e.themeVariant === "light" && t.variant === "primary-light" ? e.c.white : e.stateStandard.normal.fg);
    return __({
        "separator-icon-fg": o
    }, "breadcrumb");
};

var JX = "sas_components-Breadcrumb-VerticalBreadcrumb_vertical";

var QX = "sas_components-Breadcrumb-VerticalBreadcrumb_vertical-button";

var eZ = "sas_components-Breadcrumb-VerticalBreadcrumb_vertical-field";

var tZ = "sas_components-Breadcrumb-VerticalBreadcrumb_vertical-field-icon";

var oZ = "sas_components-Breadcrumb-VerticalBreadcrumb_default-cursor";

var nZ = {
    vertical: JX,
    verticalButton: QX,
    verticalField: eZ,
    verticalFieldIcon: tZ,
    defaultCursor: oZ
};

const aZ = fb(wt);

const rZ = MA("VerticalBreadcrumbList");

const sZ = e => {
    const o = aZ();
    const a = rZ();
    const s = c(null);
    const i = c(null);
    const l = r((() => {
        const t = e.values || [];
        return t.map(((e, t) => ({
            text: e.values[e.selectedIndex],
            icon: e.icon?.icon,
            originalIndex: t,
            className: nZ.defaultCursor,
            iconTooltip: e.icon?.tooltip ?? "",
            iconAriaLabel: e.icon?.ariaLabel
        }))).reverse();
    }), [ e.values ]);
    const [d, u] = n(0);
    const [m, p] = n(false);
    const {onBlur: f, onFocus: g} = JI((() => {
        p(false);
    }));
    const h = C_();
    const b = {
        ...iZ(h, {
            tokens: e.tokens,
            variant: e.variant
        }),
        ...e.theme?.(h)
    };
    const v = h.themeVariant === "light" && e.variant === "primary-light" ? oN.Primary : oN.Standard;
    const y = e.tokens?.();
    const x = l.length ? l[qI(d) ? 0 : d] : null;
    const S = x ? x.text : "";
    const w = e => {
        switch (e.key) {
          case "ArrowDown":
          case "ArrowUp":
          case " ":
            if (!e.ctrlKey && !e.shiftKey && !e.metaKey) {
                p(true);
                e.preventDefault();
                e.stopPropagation();
            }
            break;
        }
    };
    const C = () => {
        p(false);
        setTimeout((() => {
            s.current?.focus();
        }), 0);
        u(0);
    };
    const E = t => {
        const o = l[t];
        e.onPress?.(o.originalIndex);
    };
    return t("div", {
        onBlur: f,
        onFocus: g,
        style: {
            ...b,
            ...e.style
        }
    }, t("div", {
        ref: s,
        onKeyDown: w,
        className: nZ.vertical,
        role: "combobox",
        "aria-controls": a,
        "aria-expanded": m,
        "aria-readonly": true,
        "aria-label": e.ariaLabel ?? o("container.aria.label"),
        "aria-haspopup": true,
        tabIndex: 0,
        "data-testid": gb(e.testId, "container")
    }, t(QM, {
        onPress: () => p((e => !e)),
        className: nZ.verticalButton,
        icon: {
            icon: CT
        },
        variant: v,
        theme: () => {
            const t = y?.fg ? {
                "--button-fg": y?.fg,
                "--button-hover-fg": y?.fg,
                "--button-active-fg": y?.fg
            } : undefined;
            if (!h.enableNovaTokens) return t;
            if (h.themeVariant === "light" && e.variant === "primary-light") {
                return {
                    "--button-bg": Jv(h.tokensExperimental["color-text-primary-inverse"], .1),
                    "--button-hover-bg": Jv(h.tokensExperimental["color-text-primary-inverse"], .15),
                    "--button-active-bg": Jv(h.tokensExperimental["color-text-primary-inverse"], .25),
                    "--button-bd": h.tokensExperimental["color-container-border-4"],
                    "--button-hover-bd": h.tokensExperimental["color-container-border-4"],
                    "--button-active-bd": h.tokensExperimental["color-container-border-4"],
                    ...t
                };
            } else if (h.themeVariant === "high-contrast" && m) {
                return {
                    "--button-bg": h.tokensExperimental["color-action-background-standard-selected"],
                    "--button-fg": h.tokensExperimental["color-text-primary-inverse"],
                    "--button-hover-fg": h.tokensExperimental["color-text-primary-inverse"],
                    "--button-hover-bg": h.tokensExperimental["color-action-background-standard-selected"],
                    "--button-filter": "none",
                    ...t
                };
            }
            return t;
        },
        focusable: false,
        "aria-hidden": true,
        testId: gb(e.testId, "button")
    }), t("div", {
        "aria-live": m ? undefined : "polite",
        className: nZ.verticalField
    }, x?.icon && t(MM, {
        className: nZ.verticalFieldIcon,
        icon: x.icon,
        tooltip: x.iconTooltip,
        ariaLabel: x.iconAriaLabel
    }), S)), t(sV, {
        isOpen: m,
        displayListItemIcon: true,
        onClose: C,
        focusedIndex: d,
        setFocusedIndex: u,
        onSelectFocusedItem: () => {
            if (m) {
                !qI(d) && E(d);
                C();
            }
        },
        onSelected: ({index: e}) => {
            E(e);
            C();
        },
        items: l,
        referenceElementRef: s,
        ulRef: i,
        showSelectedPseudoFocus: true,
        listId: a,
        listTokens: {
            font: {
                fontFamily: y?.fontFamily
            },
            theme: () => ({
                fg: y?.fg
            })
        },
        testId: e.testId,
        ariaLabel: o("list.aria")
    }));
};

const iZ = (e, t) => {
    let o = {
        bg: e.tokensExperimental["color-action-background-control-non-editable"],
        fg: e.tokensExperimental["color-text-neutral"],
        bd: e.tokensExperimental["color-action-border-control-read-only"]
    };
    if (e.themeVariant === "light" && t?.variant === "primary-light") {
        o = {
            ...o,
            fg: e.tokensExperimental["color-text-primary-inverse"],
            bg: Jv(e.tokensExperimental["color-text-primary-inverse"], .15)
        };
    }
    const n = t?.tokens?.();
    if (n?.fg) {
        o = {
            ...o,
            fg: n.fg
        };
    }
    const a = "calc(-2px + calc(-1 * var(--focus-width)))";
    return {
        ...__({
            ...o,
            "squish-s": e.tokensExperimental["space-squish-s"],
            "mg-xs": e.tokensExperimental["space-base-xs"],
            "font-size-m": e.tokensExperimental["font-size-body-text-m"],
            "font-family": n?.fontFamily ?? "inherit"
        }, "breadcrumb"),
        ...__({
            outline: "var(--focus-light-bg)",
            "outline-offset": a
        }, "button-focus"),
        ...__(o, "vertical-field"),
        ...!e.enableNovaTokens && lZ(e, t)
    };
};

const lZ = (e, t) => {
    let o = {};
    switch (e.baseReportThemeName) {
      case "highcontrast2018":
      case "highcontrast2017":
        o = {
            ...e.stateStandard.normal,
            bg: e.stateSecondary.normal.bg
        };
        break;

      default:
        switch (e.themeVariant) {
          case "dark":
            o = {
                ...e.stateStandard.normal,
                bg: Jv(e.c.white, .1)
            };
            break;

          case "high-contrast":
            o = {
                ...e.stateStandard.normal,
                bg: e.c.white20
            };
            break;

          default:
            o = {
                ...e.stateStandard.normal,
                bg: Jv(e.c.n2, .4)
            };
            break;
        }
    }
    const n = t?.tokens?.();
    if (n?.fg) {
        o = {
            ...o,
            fg: n.fg
        };
    }
    return {
        ...__({
            "font-size-m": e.font.size.m
        }, "breadcrumb"),
        ...__(o, "vertical-field")
    };
};

var cZ = "sas_components-Breadcrumb-Breadcrumb_breadcrumb";

var dZ = {
    breadcrumb: cZ
};

const uZ = function(e) {
    const o = e.orientation || "AUTO";
    const r = e.ariaCurrent || "page";
    const [s, i] = n(o === "VERTICAL");
    const [l] = kN((({target: e, contentRect: t}) => {
        if (e) {
            const e = o === "VERTICAL" || o === "AUTO" && t.width <= 400;
            if (e !== s) {
                i(e);
            }
        }
    }));
    const c = s ? sZ : YX;
    a((() => {
        i(e.orientation === "VERTICAL");
    }), [ e.orientation ]);
    return t("div", {
        className: e.className,
        style: e.style,
        ref: l
    }, t("div", {
        "data-testid": e.testId,
        "data-landmark-label": e.landmarkLabel,
        className: dZ.breadcrumb,
        role: e.role,
        "aria-labelledby": e.ariaLabelledBy,
        "aria-describedby": e.ariaDescribedBy
    }, t(c, Ee({}, e, {
        onOpen: e.openCrumb,
        onPress: e.selectCrumb,
        onPressItem: e.selectCrumbValue,
        theme: e.theme,
        tokens: e.tokens,
        ariaCurrent: r
    }))));
};

var mZ = "sas_components-ComboBox-ComboBox_combo-input";

var pZ = "sas_components-ComboBox-ComboBox_disabled";

var fZ = "sas_components-ComboBox-ComboBox_active";

var gZ = "sas_components-ComboBox-ComboBox_input-box";

var hZ = "sas_components-ComboBox-ComboBox_error";

var bZ = "sas_components-ComboBox-ComboBox_warning";

var vZ = "sas_components-ComboBox-ComboBox_read-only";

var yZ = "sas_components-ComboBox-ComboBox_combobox-icon";

var xZ = "sas_components-ComboBox-ComboBox_focus-visible";

var SZ = "sas_components-ComboBox-ComboBox_drop-down";

var wZ = {
    comboInput: mZ,
    disabled: pZ,
    active: fZ,
    inputBox: gZ,
    error: hZ,
    warning: bZ,
    readOnly: vZ,
    comboboxIcon: yZ,
    focusVisible: xZ,
    dropDown: SZ
};

const CZ = 0;

const EZ = fb(Ct);

const IZ = MA("ComboBox");

const _Z = u((function e({label: o, value: i, className: l, theme: u, font: m, style: p, isOpen: f, items: h, dropdownItems: b, disabled: v, listId: y, ariaActiveDescendant: x, required: S, ariaDescribedBy: w, ariaLabel: C, ariaLabelledBy: E, editable: I, placeholder: _, message: D, testId: L, type: T = "text", filterType: R = "beginsWith", status: k, id: A, innerRef: M, renderIcon: N, inputRef: O, allowIntegersOnly: P = false, readOnly: B, enableAutoSelection: z = true, commitOnEnterInDialog: F = true, selectedIndex: j = -1, maxLength: V, enableVirtualScrolling: H, inputContainerWidth: U, setValue: G, setFocusedIndex: K, setSelectedIndex: W, onKeyDown: $, onPress: Y, ...q}, X) {
    const Z = EZ();
    const J = YI();
    const [Q, ee] = n(o ?? i);
    if (!qI(V) && Q.length > V) {
        ee(Q.substring(0, V));
    }
    const te = [];
    if (h) {
        for (const e of h) {
            if (pG(e)) {
                continue;
            } else {
                te.push(e);
            }
        }
    }
    const oe = [];
    if (b) {
        for (const e of b) {
            if (pG(e)) {
                continue;
            } else {
                oe.push(e);
            }
        }
    }
    const [ne, ae] = n(undefined);
    const re = c(null);
    const se = c(null);
    const ie = c(null);
    const [le, ce] = n(false);
    const [de, ue] = n(k);
    const [me, pe] = n(true);
    const [fe, ge] = n(false);
    const he = c(false);
    const be = !p?.width;
    const ve = ay();
    const ye = k === "warning" ? wZ.warning : wZ.error;
    const [xe, Se] = n(false);
    a((() => ue(k)), [ k ]);
    a((() => {
        if (!qI(j) && j >= 0) pe(true);
    }), [ j ]);
    a((() => {
        ee(i);
    }), [ i ]);
    d((() => {
        if (le) {
            let e = 0;
            if (re.current?.selectionStart !== re.current?.value.length) {
                e = re.current?.selectionStart ?? 0;
            }
            if (T !== "email" && xe) {
                re.current?.setSelectionRange(e, re.current?.value.length);
            }
            ce(false);
        }
    }), [ le, T, xe ]);
    a((() => {
        if (o) {
            ce(true);
            ee(o);
        }
    }), [ o ]);
    a((() => {
        ce(!!f);
        he.current = !!f;
    }), [ f ]);
    a((() => {
        const e = e => {
            if (!h || B) return;
            const t = e.key;
            switch (t) {
              case "Escape":
                break;

              case "Delete":
              case "Backspace":
              case "Process":
                Se(false);
                break;

              default:
                Se(true);
                break;
            }
        };
        if (de === "alert" || de === "warning") pe(false); else pe(true);
        const t = re.current;
        !B && t?.setAttribute("aria-haspopup", "listbox");
        !B && t?.setAttribute("aria-expanded", f ? "true" : "false");
        t?.setAttribute("aria-disabled", v ? "true" : "false");
        !B && y && t?.setAttribute("aria-controls", y);
        x && t?.setAttribute("aria-activedescendant", x);
        t?.addEventListener("keydown", e);
        return () => {
            t?.removeEventListener("keydown", e);
        };
    }), [ x, v, f, me, h, y, B, de ]);
    g(X, (() => ({
        setIsValid: e => {
            pe(e);
            ue(undefined);
        },
        onChange: (e, t, o) => setTimeout((() => {
            Re({
                value: e ?? "",
                focusedIndex: o
            }, t);
        }), 0),
        focus: () => re.current?.focus(),
        isSuggestionsOpen: () => ie.current?.isOpen() ?? false,
        closeSuggestions: () => ie.current?.closeSuggestions()
    })));
    const we = IZ();
    const Ce = S ? [ we ] : [];
    if (Array.isArray(w)) {
        Ce.push(...w);
    } else if (w !== undefined) {
        Ce.push(w);
    }
    const Ee = r((() => (e, t, o, n, a, r) => {
        if (T !== "number") {
            pe(true);
            ue(undefined);
            return {
                isError: false,
                message: "",
                status: undefined,
                values: {
                    rawValue: NaN,
                    formatValue: ""
                }
            };
        }
        const s = zH(e, t, o, n, a, r);
        if (s.isError) {
            pe(false);
            ue(s.status);
        } else {
            pe(true);
            ue(s.status);
        }
        return s;
    }), [ T ]);
    const Ie = RH({
        isRequired: S,
        initialValue: Q
    });
    const _e = kH({
        validateInputFunction: Ee,
        isRequired: S,
        allowIntegersOnly: P
    });
    const De = HH({
        isRequired: S,
        initialValue: Q
    });
    const Le = YH({
        isRequired: S,
        initialValue: Q
    });
    const Te = KH({
        isRequired: S,
        initialValue: Q
    });
    const Re = (e, t) => {
        if (!J.current) return;
        if (v) return;
        let o;
        let n = -1;
        if (te && xe && z && R !== "contains") {
            const a = e.focusedIndex ? e.focusedIndex : -1;
            const r = bH(e.value, "beginsWith");
            const s = te.find(((o, s) => {
                if (r?.test(o.text ?? "")) {
                    if (e.reason === "suggestion") {
                        const e = o.text;
                        const t = te.map((e => e.text)).indexOf(e);
                        const r = te.map((e => e.text)).lastIndexOf(e);
                        if (t !== r) {
                            if (s > a) {
                                n = s;
                                return o;
                            }
                        } else {
                            n = s;
                            return o;
                        }
                    } else {
                        const r = o.text;
                        const i = te.map((e => e.text));
                        const l = i.indexOf(r);
                        const c = i.lastIndexOf(r);
                        if (l !== c) {
                            if (a <= l || s >= a) {
                                n = s;
                                return o;
                            }
                        } else {
                            if (t) {
                                if (r?.length === e.value.length) {
                                    n = s;
                                    return o;
                                }
                            } else {
                                n = s;
                                return o;
                            }
                        }
                    }
                }
            }));
            if (n !== -1) {
                o = s.text;
                if (V && o && o.length > V) {
                    o = o.substring(0, V);
                }
                G(o ?? "");
                ee(o ?? "");
                setTimeout((() => {
                    if (T !== "email") {
                        re.current?.setSelectionRange(t ? 0 : e.value.length, re.current?.value.length, undefined);
                    }
                }), CZ);
            } else {
                o = e.value;
                if (V && o && o.length > V) {
                    o = o.substring(0, V);
                }
                G(o);
                ee(o);
            }
            K?.(n);
            if (n === -1) W(n);
        } else {
            o = e.value;
            const a = e.focusedIndex ? e.focusedIndex : -1;
            const r = oe.map((e => e.text));
            let s = false;
            if ((t || ie.current?.isOpen()) && te) {
                te.find(((t, o) => {
                    const i = t.text;
                    if (!s && i && e.value.indexOf(i) !== -1 && i.length === e.value.length) {
                        const t = r.indexOf(e.value);
                        const i = r.lastIndexOf(e.value);
                        if (t !== i) {
                            if (a <= t || o >= a) {
                                n = o;
                                s = true;
                                return;
                            }
                        } else {
                            n = o;
                            s = true;
                            return;
                        }
                    }
                }));
                if (te.length === 0) {
                    oe.find(((t, o) => {
                        const i = t.text;
                        if (!s && i && e.value.indexOf(i) !== -1 && i.length === e.value.length) {
                            const t = r.indexOf(e.value);
                            const i = r.lastIndexOf(e.value);
                            if (t !== i) {
                                if (a <= t || o >= a) {
                                    n = o;
                                    s = true;
                                    return;
                                }
                            } else {
                                n = o;
                                s = true;
                                return;
                            }
                        }
                    }));
                }
            } else if (!t) {
                let t = false;
                oe.find(((o, s) => {
                    const i = o.text;
                    if (!t && i && e.value.indexOf(i) !== -1 && i.length === e.value.length) {
                        const o = r.indexOf(e.value);
                        const i = r.lastIndexOf(e.value);
                        if (o !== i) {
                            if (a <= o || s >= a) {
                                n = s;
                                t = true;
                                return;
                            }
                        } else {
                            n = s;
                            t = true;
                            return;
                        }
                    }
                }));
            }
            ce(false);
            if (V && o && o.length > V) {
                o = o.substring(0, V);
            }
            G(o);
            ee(o);
            K?.(n);
            W(n);
            if (n !== -1) {
                setTimeout((() => {
                    if (T !== "email" && xe) {
                        re.current?.setSelectionRange(e.value.length, re.current?.value.length, undefined);
                    }
                }), CZ);
            }
        }
        if (S) Ie.handleChange(e);
        if (T === "url") De.handleChange(e); else if (T === "email") Te.handleChange(e); else if (T === "tel") Le.handleChange(e); else if (T === "number") _e.handleChange(e);
        q.onChange?.({
            ...e,
            suggestion: o,
            isDropdownChange: t
        });
    };
    const Ae = e => {
        if (!J.current) return;
        if (v) return;
        if (S && Q.trim() === "") {
            pe(false);
            ue("alert");
        } else {
            switch (de) {
              case "alert":
              case "warning":
                pe(false);
                break;

              default:
                pe(true);
                ue(undefined);
            }
        }
        ee(e.value);
        if (S) Ie.handleCommit();
        if (T === "url") De.handleCommit(); else if (T === "email") Te.handleCommit(); else if (T === "tel") Le.handleCommit(); else if (T === "number") _e.handleCommit();
        if (e.reason === "enter" || e.reason === "blur" && !he.current && !f) q.onCommit?.(e);
    };
    const Me = () => {
        if (!J.current) return;
        ge(false);
        if (j === -1) {
            if (S) Ie.handleBlur();
            if (T === "url") De.handleBlur(); else if (T === "email") Te.handleBlur(); else if (T === "tel") Le.handleBlur(); else if (T === "number") _e.handleBlur();
        }
        q.onBlur?.();
    };
    const Ne = () => {
        if (!J.current) return;
        if (j === -1) {
            if (S) Ie.handleCancel();
            if (T === "url") De.handleCancel(); else if (T === "email") Te.handleCancel(); else if (T === "tel") Le.handleCancel(); else if (T === "number") _e.handleCancel();
        }
    };
    const Oe = () => {
        if (de) return de;
        if (j === -1) {
            let e = undefined;
            if (S) e = Ie.errors?.status; else if (T === "url") e = De.errors?.status; else if (T === "email") e = Te.errors?.status; else if (T === "tel") e = Le.errors?.status; else if (T === "number") e = _e.errors?.status;
            if (e) ue(e);
            return e;
        } else {
            return undefined;
        }
    };
    const Pe = () => {
        if (D) return D; else if (S) return Ie.errors?.message; else if (T === "url") return De.errors?.message; else if (T === "email") return Te.errors?.message; else if (T === "tel") return Le.errors?.message; else if (T === "number") return _e.errors?.message; else return undefined;
    };
    const Be = s((() => {
        if (be && re.current?.parentElement && !qI(h)) {
            const e = document.createElement("canvas").getContext("2d");
            if (e) {
                let t = 0;
                const o = () => {
                    const e = window.getComputedStyle(se.current?.parentElement).maxWidth;
                    if (e.indexOf("%") > -1) {
                        const t = se.current?.parentElement?.parentElement?.clientWidth;
                        if (t) {
                            return t * (parseInt(e) * .01);
                        }
                    }
                    return parseInt(e);
                };
                const n = t => e.measureText(t).width;
                const a = 96;
                const r = !p?.minWidth ? Math.max(a, o()) : o();
                const s = window.getComputedStyle(re.current);
                const i = [ s.getPropertyValue("font-style"), s.getPropertyValue("font-variant"), s.getPropertyValue("font-weight"), s.getPropertyValue("font-size"), s.getPropertyValue("font-family") ];
                e.font = i.join(" ");
                for (const e of h) {
                    const o = e.text;
                    if (o) t = Math.max(t, n(o));
                    if (t >= r) {
                        t = r;
                        break;
                    }
                }
                if (t) {
                    let e = FA();
                    t = t + jA(s.textIndent);
                    const o = 17;
                    const n = cD();
                    if (bD() === fD.Win && n === sD.Firefox && e === 0) {
                        e = o;
                    }
                    t = t + e;
                    re.current.parentElement.style.width = `${Math.ceil(t)}px`;
                    if (!p?.minWidth) {
                        const e = se.current?.parentElement;
                        const o = e.getBoundingClientRect();
                        const n = re.current.getBoundingClientRect();
                        const r = !ve ? (n.left ?? 0) - (o.left ?? 0) : (o.right ?? 0) - (n.right ?? 0);
                        e.style.minWidth = t + r < a ? "initial" : "";
                    }
                }
            }
        }
    }), [ be, h, p?.minWidth, ve ]);
    const [ze] = kN(Be);
    a((() => {
        if (be) {
            const e = window.getComputedStyle(se.current).maxWidth;
            if (e.indexOf("%") > -1) {
                if (se.current?.parentElement) {
                    ze(se.current?.parentElement);
                }
            }
        }
        return () => {
            ze(null);
        };
    }), [ M, be, ze ]);
    a(Be, [ Be ]);
    a((() => {
        if (de) {
            ie.current?.closeSuggestions();
        }
    }), [ de ]);
    return B ? t("div", {
        ref: e => {
            se.current = e;
            D_(M, e);
        },
        className: ke(l, wZ.inputBox, ne && !f && wZ.focusVisible, wZ.readOnly, v && wZ.disabled, !me && ye || (T === "url" && De.errors?.status === "alert" || T === "tel" && Le.errors?.status === "alert" || T === "email" && Te.errors?.status === "alert" || T === "number" && _e.errors?.status === "alert") && wZ.error),
        style: p,
        tabIndex: -1,
        "data-testid": L,
        role: "group",
        "aria-disabled": v
    }, t(hH, {
        testId: gb(L, "input"),
        ref: e => {
            re.current = e;
            D_(O, e);
        },
        id: A,
        style: p,
        value: Q,
        required: S,
        editable: false,
        disabled: v,
        status: Oe(),
        message: Pe(),
        ariaLabel: C,
        ariaDescribedBy: Ce,
        ariaLabelledBy: E,
        onChange: () => {},
        hideBorder: true,
        maxLength: V,
        commitOnEnterInDialog: F
    })) : t("div", {
        ref: e => {
            se.current = e;
            D_(M, e);
        },
        role: "group",
        className: ke(l, wZ.inputBox, ne && !f && wZ.focusVisible, fe && wZ.active, v && wZ.disabled, !me && ye || j === -1 && (T === "url" && De.errors?.status === "alert" || T === "tel" && Le.errors?.status === "alert" || T === "email" && Te.errors?.status === "alert" || T === "number" && (_e.errors?.status === "alert" || de === "alert")) && wZ.error),
        "data-testid": L,
        style: p,
        onClick: e => {
            if (e.target !== re.current) {
                Y?.();
                re.current?.focus();
                ie.current?.closeSuggestions();
            }
        },
        onKeyDown: e => {
            if (e.key === "Home" || e.key === "End" || e.key === " ") {
                e.stopPropagation();
            }
            $?.(e);
            ae(true);
        },
        onMouseDown: e => {
            ae(false);
            if (e.target !== re.current) {
                he.current = true;
            } else {
                he.current = false;
            }
        },
        onBlur: e => {
            if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
                ae(undefined);
            }
        },
        onFocus: e => {
            if (e.currentTarget.contains(e.target)) {
                ae((e => e === undefined ? true : e));
            }
        }
    }, S ? t(bO, {
        id: we
    }, Z("required.aria")) : null, t(hH, {
        id: A,
        testId: gb(L, "input"),
        className: wZ.comboInput,
        role: "combobox",
        ref: e => {
            re.current = e;
            D_(O, e);
        },
        suggestionsRef: ie,
        value: Q,
        onChange: Re,
        onCommit: Ae,
        onBlur: Me,
        onCancel: Ne,
        onFocus: () => {
            ge(true);
            ie.current?.closeSuggestions();
            q.onFocus?.();
        },
        editable: I,
        placeholder: _,
        suggestionItems: h,
        enableAutoComplete: false,
        required: S,
        type: T,
        filterType: R,
        status: Oe(),
        message: Pe(),
        ariaLabel: C,
        ariaDescribedBy: Ce,
        ariaLabelledBy: E,
        ariaInvalid: de === "alert" || !me,
        hideBorder: true,
        maxLength: V,
        commitOnEnterInDialog: F,
        enableVirtualScrolling: H,
        inputContainerWidth: U,
        disabled: v
    }), pD(N, MM, {
        className: wZ.comboboxIcon,
        testId: gb(L, "icon"),
        icon: CT
    }));
}));

const DZ = fb(Ct);

const LZ = ({futureTheme: e, comboBoxTokens: o, ...r}) => {
    const s = DZ();
    const [i, l] = n(false);
    const [d, u] = n(r.selectedIndex);
    const [m, p] = n({
        value: r.value,
        selectedIndex: r.selectedIndex
    });
    const f = c(null);
    const g = r.showSuggestions ?? true;
    const h = c(null);
    const b = YI();
    const v = C_();
    const {density: y} = YA();
    const x = jD(L_.FOCUS_OVERRIDE) === "true";
    const S = {
        ...TZ(v, {
            isCustomFocusTurnedOn: x,
            disabled: r.disabled ?? false,
            density: y,
            overrides: o
        }),
        ...e?.(v)
    };
    const w = r.values;
    const C = [];
    if (w) {
        for (const e of w) {
            if (pG(e)) {
                continue;
            } else {
                C.push(e);
            }
        }
    }
    const E = e => {
        if (!b.current) return;
        if (r.readOnly) return;
        if (e.key === "Escape") {
            let t = false;
            if (m.selectedIndex !== r.selectedIndex || m.value !== r.value) {
                r.onSelected?.(m.selectedIndex);
                r.setValue(m.value ?? "");
                if (r.values && !qI(m.selectedIndex) && m.selectedIndex >= 0) {
                    const e = r.values.find(((e, t) => {
                        if (t === m.selectedIndex) return e;
                    }));
                    const t = e.text;
                    f.current?.onChange(t ?? "", true);
                } else {
                    f.current?.onChange(m.value ?? "", true);
                }
                t = true;
            } else {
                const e = r.onCancel?.();
                if (r.onCancel && e !== false) t = true;
            }
            if (t) {
                e.preventDefault();
                e.stopPropagation();
            }
            l(false);
        }
        if (e.key === "Tab") {
            l(false);
        }
    };
    const I = e => {
        if (!b.current) return;
        if (e === -1) {
            r.onSelected?.(e);
        }
    };
    const _ = () => {
        let e = -1;
        if (r.selectedIndex === -1) {
            e = C?.findIndex((e => e.text === h.current?.value)) ?? -1;
            if (e > -1) {
                u(e);
                r.onSelected?.(e);
            }
        }
        return Promise.resolve(false);
    };
    a((() => {
        !f.current?.isSuggestionsOpen() && u(r.selectedIndex);
    }), [ r.selectedIndex ]);
    a((() => {
        f.current?.isSuggestionsOpen() && l(false);
    }), [ f.current?.isSuggestionsOpen ]);
    a((() => {
        if (r.selectedIndex === -1 && i) {
            r.onSelected?.(d);
        }
    }), [ d, i, r ]);
    return t(IG, Ee({}, r, {
        style: {
            ...S,
            ...r.style
        },
        testId: gb(r.testId, "dropdown"),
        required: undefined,
        status: undefined,
        message: undefined,
        hasInput: true,
        isOpen: i,
        setIsOpen: l,
        focusedIndex: d,
        setFocusedIndex: u,
        value: r.value,
        readOnly: r.readOnly,
        onBeforeOpen: _,
        showSelectedPseudoFocus: true,
        onSelected: e => {
            p({
                value: r.value,
                selectedIndex: e
            });
            if (e !== -1) {
                f.current?.setIsValid(true);
                if (i) {
                    setTimeout((() => {
                        f.current?.focus();
                        f.current?.closeSuggestions();
                    }), 0);
                }
                if (i || !f.current?.isSuggestionsOpen()) {
                    setTimeout((() => {
                        if (C) {
                            const t = C.find(((t, o) => {
                                if (o === e) return t;
                            }));
                            const o = t.text;
                            f.current?.onChange(o ?? "", true, e);
                            setTimeout((() => {
                                if (r.type !== "email") {
                                    h.current?.setSelectionRange(0, h.current?.value.length, undefined);
                                }
                            }), 0);
                        }
                    }), 0);
                }
                !f.current?.isSuggestionsOpen() && u(e);
            }
            r.onSelected?.(e);
        },
        ariaLabel: s("options.aria")
    }, r.enableVirtualScrolling && w && {
        virtualItems: {
            count: w.length ?? 0,
            renderItem: ({index: e}) => ({
                text: w[e].text,
                secondaryText: w[e].secondaryText,
                concatSecondaryText: w[e].concatSecondaryText,
                icon: w[e].icon,
                iconAriaLabel: w[e].iconAriaLabel,
                iconTooltip: w[e].iconTooltip,
                id: w[e].id,
                indented: w[e].indented,
                tooltip: w[e].tooltip,
                showSeparator: w[e].showSeparator
            }),
            width: r.inputContainerWidth ?? h.current?.getBoundingClientRect().width
        }
    }, {
        renderSelectBox: e => t(_Z, Ee({}, e, {
            ref: f,
            inputRef: e => {
                h.current = e;
                D_(r.inputRef, e);
            },
            id: r.id,
            testId: gb(r.testId, "inputBox"),
            value: r.value,
            items: g ? r.values : undefined,
            dropdownItems: r.values,
            filterType: r.filterType,
            setValue: r.setValue,
            editable: r.editable,
            type: r.type,
            allowIntegersOnly: r.allowIntegersOnly,
            required: r.required,
            message: r.message,
            status: r.status,
            placeholder: r.placeholder,
            ariaActiveDescendant: r.ariaActiveDescendant,
            ariaDescribedBy: r.ariaDescribedBy,
            ariaLabel: r.ariaLabel,
            ariaLabelledBy: r.ariaLabelledBy,
            onKeyDown: E,
            readOnly: r.readOnly,
            enableAutoSelection: r.enableAutoSelection,
            onCommit: e => {
                const t = r.values?.findIndex((e => e.text === h.current?.value)) ?? -1;
                p({
                    value: e.value,
                    selectedIndex: t
                });
                r.onCommit?.(e);
            },
            onCancel: r.onCancel,
            onFocus: r.onFocus,
            onBlur: r.onBlur,
            onChange: r.onChange,
            setSelectedIndex: I,
            maxLength: r.maxLength,
            commitOnEnterInDialog: r.commitOnEnterInDialog
        }))
    }));
};

const TZ = (e, t) => {
    let o;
    let n;
    if (e.themeVariant !== "high-contrast" && !t.isCustomFocusTurnedOn && !t.disabled) {
        o = "none";
    } else {
        o = "var(--focus-light-bg)";
        n = "calc(-1 * var(--focus-width) - 2px)";
    }
    const a = t.overrides?.theme?.({
        state: "placeholder"
    });
    const r = {
        ...t.overrides?.font,
        ...t.overrides?.theme?.({
            state: "normal"
        }),
        ...(() => {
            const e = {};
            Object.entries(t.overrides?.theme?.({
                state: "hover"
            }) ?? {}).forEach((([t, o]) => {
                e[`hover-${t}`] = o;
            }));
            return e;
        })(),
        ...(() => {
            const e = {};
            Object.entries(t.overrides?.theme?.({
                state: "active"
            }) ?? {}).forEach((([t, o]) => {
                e[`active-${t}`] = o;
            }));
            return e;
        })(),
        ...a ? {
            "placeholder-fg": a.fg
        } : undefined
    };
    const s = t.density === "high" ? {
        "font-size": e.tokensExperimental["font-size-body-text-s"],
        "min-block-size": "1.5rem"
    } : {
        "font-size": e.tokensExperimental["font-size-body-text-m"],
        "min-block-size": "1.75rem"
    };
    return {
        ...__({
            bd: e.tokensExperimental["color-action-border-control-normal"],
            bg: e.tokensExperimental["color-action-background-control-normal"],
            fg: e.tokensExperimental["color-action-text-control-normal"],
            "hover-bd": e.tokensExperimental["color-action-border-control-hover"],
            "hover-bg": e.tokensExperimental["color-action-background-control-hover"],
            "hover-fg": e.tokensExperimental["color-action-text-control-hover"],
            "active-bd": e.tokensExperimental["color-action-border-control-selected"],
            "active-bg": e.tokensExperimental["color-action-background-control-selected"],
            "active-fg": e.tokensExperimental["color-action-text-control-selected"],
            "disabled-fg": e.tokensExperimental["color-action-text-control-disabled"],
            "disabled-bd": e.tokensExperimental["color-action-border-control-disabled"],
            "disabled-bg": e.tokensExperimental["color-action-background-control-disabled"],
            "readonly-bd": "transparent",
            "readonly-bg": e.tokensExperimental["color-action-background-control-normal"],
            "readonly-fg": e.tokensExperimental["color-action-text-control-normal"],
            "placeholder-fg": e.tokensExperimental["color-action-text-control-placeholder"],
            "spacing-xs": e.tokensExperimental["space-base-xs"],
            "spacing-s": e.tokensExperimental["space-base-s"],
            "focus-outline": o,
            "focus-outline-offset": n,
            "error-bd": e.tokensExperimental["color-action-border-control-alert"],
            "warning-bd": e.tokensExperimental["color-action-border-control-warning"],
            "bd-bottom": e.tokensExperimental["color-action-border-bottom-control-normal"],
            "bd-bottom-bw": e.tokensExperimental["size-border-width-s"],
            "active-bottom-bd": e.tokensExperimental["color-action-border-bottom-control-selected"],
            "warning-bottom-bd": e.tokensExperimental["color-action-border-bottom-control-warning"],
            "alert-bottom-bd": e.tokensExperimental["color-action-border-bottom-control-alert"],
            "hover-bottom-bd": e.tokensExperimental["color-action-border-bottom-control-hover"],
            ...s,
            ...r
        }, "combobox"),
        ...!e.enableNovaTokens && RZ(e, t)
    };
};

const RZ = (e, t) => {
    const o = e.stateFocus.onLightBg;
    const n = t.overrides?.theme?.({
        state: "placeholder"
    });
    const a = {
        ...t.overrides?.font,
        ...t.overrides?.theme?.({
            state: "normal"
        }),
        ...(() => {
            const e = {};
            Object.entries(t.overrides?.theme?.({
                state: "hover"
            }) ?? {}).forEach((([t, o]) => {
                e[`hover-${t}`] = o;
            }));
            return e;
        })(),
        ...(() => {
            const e = {};
            Object.entries(t.overrides?.theme?.({
                state: "active"
            }) ?? {}).forEach((([t, o]) => {
                e[`active-${t}`] = o;
            }));
            return e;
        })(),
        ...n ? {
            "placeholder-fg": n.fg
        } : undefined
    };
    return {
        ...__({
            bd: e.stateStandard.normal.bd,
            bg: e.stateStandard.normal.bg,
            fg: e.stateStandard.normal.fg,
            "hover-bd": e.stateStandard.hover.bd,
            "hover-bg": e.stateStandard.hover.bg,
            "hover-fg": e.stateStandard.hover.fg,
            "active-bd": e.stateStandard.active.bd,
            "active-bg": e.stateStandard.active.bg,
            "active-fg": e.stateStandard.active.fg,
            "disabled-bd": e.stateStandard.disabled.bd,
            "disabled-bg": e.stateStandard.disabled.bg,
            "disabled-fg": e.stateStandard.disabled.fg,
            "readonly-bd": "transparent",
            "readonly-bg": e.stateStandard.normal.bg,
            "readonly-fg": e.stateStandard.normal.fg,
            "placeholder-fg": e.themeVariant === "dark" ? Ve(.35, e.c.white) : e.c.n1,
            "focus-outline": `${o.bd} ${o.bdStyle} ${o.bdWidth}`,
            "focus-outline-offset": `calc(-2px + calc(-1 * ${o.bdWidth}))`,
            "error-bd": e.stateStatus.alert.bd,
            "warning-bd": e.stateStatus.warning.bd,
            "font-size": e.font.size.m,
            ...a
        }, "combobox")
    };
};

const kZ = fb(Et);

const AZ = ({value: e, inputProps: t, isSelectorOpen: o}) => {
    const r = kZ();
    const [s, i] = n(false);
    const l = s && t?.required && !o;
    const [c, d] = n(false);
    const u = l && c;
    const m = $B({
        source: OB.InputFull
    });
    a((() => {
        if (!l) {
            d(false);
            return;
        }
        const e = setTimeout((() => {
            d(true);
        }), 200);
        return () => clearTimeout(e);
    }), [ l ]);
    a((() => {
        i(false);
    }), [ e, o ]);
    const {onFocus: p, onBlur: f} = JI((() => {
        if (!e.trim()) i(true);
    }));
    const g = () => {
        t?.onFocus?.();
        p?.();
    };
    const h = () => {
        t?.onBlur?.();
        f?.();
    };
    const b = () => {
        t?.onCancel?.();
        i(false);
    };
    const v = o => {
        t?.onCommit?.(o);
        if (!e.trim()) i(true);
        if (t?.required === true && !e.trim() && o?.reason === "enter") m.play();
    };
    const y = u ? {
        status: "alert",
        message: t?.requiredErrorMessage ?? r("required.error.msg")
    } : {
        status: t?.status,
        message: t?.message
    };
    return {
        onFocus: g,
        onBlur: h,
        onCancel: b,
        onCommit: v,
        errorState: y
    };
};

var MZ = "sas_components-CompositeInput-CompositeInput_container";

var NZ = "sas_components-CompositeInput-CompositeInput_disabled";

var OZ = "sas_components-CompositeInput-CompositeInput_focus-visible";

var PZ = "sas_components-CompositeInput-CompositeInput_alert";

var BZ = "sas_components-CompositeInput-CompositeInput_warning";

var zZ = "sas_components-CompositeInput-CompositeInput_input";

var FZ = "sas_components-CompositeInput-CompositeInput_readonly-button";

var jZ = "sas_components-CompositeInput-CompositeInput_button";

var VZ = "sas_components-CompositeInput-CompositeInput_editable-button";

var HZ = {
    container: MZ,
    disabled: NZ,
    focusVisible: OZ,
    alert: PZ,
    warning: BZ,
    input: zZ,
    readonlyButton: FZ,
    button: jZ,
    editableButton: VZ
};

const UZ = fb(Et);

const GZ = () => {};

const KZ = {
    select: {
        editable: false,
        variant: "composite"
    },
    combo: {
        variant: "composite",
        editable: true
    },
    readonly: {
        editable: false
    }
};

const WZ = MA("CompositeInput-describedby");

const $Z = e => {
    const r = UZ();
    const s = WZ();
    const i = c(null);
    const {value: l, mode: d = "select", disabled: u, style: m, commitOnEnterInDialog: p, entryFieldProps: f, entryFieldRef: g, onOpen: h, buttonDisplay: b, buttonProps: v, buttonRef: y, testId: x, ariaLabel: S, ariaLabelledBy: w, ariaRoleDescription: C, ariaDescribedBy: E, className: I, isSelectorOpen: _, ...D} = e;
    const L = d === "readonly";
    const T = c(null);
    const R = d === "select" || d === "combo" ? r(`${d}.mode.description.aria`) : "";
    const {keyboardTooltip: k, getKeyboardTooltip: A, ...M} = f ?? {};
    const N = MA("CompositeInput-icon");
    const O = e.iconProps?.id ?? N();
    const P = e.iconProps?.ariaLabel ?? e.iconProps?.tooltip ?? r("icon.tooltip.label");
    const B = () => {
        const t = [];
        const o = [];
        if (e.iconProps?.icon && e.iconProps?.tooltip !== "" && e.value && d !== "combo") {
            o.push(e.iconProps?.tooltip ?? r("icon.tooltip.label"));
            o.push(`, ${e.value}`);
            if (e.entryFieldProps?.customTooltip) {
                o.push("\n");
                o.push(e.entryFieldProps?.customTooltip);
            }
            t.push(o.join(""));
            if (d === "select") t.push(r(`${d}.mode.keyboard.tooltip.label`));
            if (e.entryFieldProps?.customTooltip) {
                o.push(e.entryFieldProps.customTooltip);
            }
            return t.join("\n\n");
        }
        if (k) {
            return k;
        }
        if (A) {
            return A();
        }
        if (e.value === "" && i.current && e.entryFieldProps?.placeholder && UA(i.current, e.entryFieldProps.placeholder)) {
            o.push(e.entryFieldProps.placeholder);
        }
        if (i.current && e.value && UA(i.current)) {
            o.push(l);
        }
        if (e.entryFieldProps?.customTooltip) {
            o.push(e.entryFieldProps.customTooltip);
        }
        if (o.length > 0) {
            t.push(o.join("\n"));
        }
        if (d === "select" || d === "combo") {
            t.push(r(`${d}.mode.keyboard.tooltip.label`));
        }
        return t.join("\n\n");
    };
    const z = [];
    if (Array.isArray(E) && E.join("").length > 0) {
        z.push(...E);
    } else if (typeof E === "string" && E.length > 0) {
        z.push(E);
    }
    if (!L) {
        z.push(s);
    }
    const F = {
        onChange: GZ,
        ...M,
        enableAutoComplete: false,
        value: l,
        disabled: u,
        commitOnEnterInDialog: p || d === "select",
        className: ke(HZ.input, M?.className),
        ...KZ[d]
    };
    const j = {
        tooltip: typeof b !== "string" ? r("button.default.tooltip.label") : undefined,
        ...v,
        text: typeof b === "string" ? b : undefined,
        icon: typeof b !== "string" ? {
            icon: b
        } : undefined,
        disabled: u,
        className: ke(HZ.button, d !== "select" && d !== "readonly" && HZ.editableButton, L && HZ.readonlyButton),
        focusable: false,
        onPress: h
    };
    const V = c(false);
    const H = c(false);
    const U = L || u;
    const [G, K] = n(false);
    a((() => {
        if (U) return;
        const e = e => {
            const t = e.altKey && (e.key === "ArrowUp" || e.key === "ArrowDown");
            V.current = t;
            const o = d === "select" && (e.key === "Enter" || t);
            H.current = o;
            const n = d === "combo" && t;
            if (o || n) h?.();
        };
        i?.current?.addEventListener("keyup", e);
        return () => {
            i?.current?.removeEventListener("keyup", e);
        };
    }), [ d, U, h ]);
    const W = c(false);
    const $ = AZ({
        value: l,
        inputProps: e.entryFieldProps,
        isSelectorOpen: _
    });
    const {errorState: Y, ...q} = $;
    const X = C_();
    const {density: Z} = YA();
    const J = jD(L_.FOCUS_OVERRIDE) === "true";
    const Q = YZ(X, {
        isCustomFocusTurnedOn: J,
        disabled: e.disabled ?? false,
        readonly: L
    });
    const [ee, te] = n(false);
    const oe = c(null);
    return t("div", Ee({
        "data-testid": x,
        className: ke(HZ.container, ee && HZ.focusVisible, u && HZ.disabled, Y?.status === "alert" && HZ.alert, Y?.status === "warning" && HZ.warning, I),
        style: {
            "--input-focus-outline": "none",
            ...Q,
            ...e.style
        },
        role: "group",
        "aria-roledescription": C
    }, D, {
        onBlurCapture: e => {
            if (W.current && !e.currentTarget.contains(e.relatedTarget)) {
                e.stopPropagation();
                W.current = false;
            }
            if (e.target === i.current && e.relatedTarget === T.current || V.current || H.current) {
                K(false);
                V.current = false;
                H.current = false;
                e.stopPropagation();
            } else {
                K(true);
            }
            te(false);
        },
        onFocusCapture: e => {
            if (e.target === T.current && e.relatedTarget === null) {
                K(false);
            } else {
                K(true);
                if (e.target === T.current && e.relatedTarget !== i.current && G || V.current) {
                    V.current = false;
                    H.current = false;
                    i.current?.focus();
                }
            }
            if (document.activeElement === oe.current || document.activeElement !== i.current) {
                te(false);
            } else {
                te(true);
            }
        }
    }), t(hH, Ee({}, e.iconProps?.icon && d !== "combo" && {
        iconProps: {
            id: O,
            disabled: e.disabled,
            ariaLabel: P,
            ...e.iconProps
        }
    }, F, q, Y && {
        message: Y.message,
        status: Y.status
    }, {
        title: e.entryFieldProps?.customTooltip,
        customTooltip: e.entryFieldProps?.customTooltip,
        ariaLabel: S,
        ariaLabelledBy: w,
        ariaDescribedBy: z,
        testId: gb(x, "input"),
        getKeyboardTooltip: B,
        clearButtonRef: oe,
        ref: e => {
            i.current = e;
            D_(g, e);
        }
    }, Z === "high" && {
        style: {
            "--input-min-height": "calc(1.5rem - 2px)"
        }
    })), t(o, null, t(QM, Ee({
        variant: oN.Light
    }, j, {
        testId: gb(x, "button"),
        onPress: e => {
            W.current = true;
            i.current?.focus();
            j.onPress?.(e);
        },
        ref: e => {
            D_(y, e);
            T.current = e;
        }
    })), t(bO, {
        id: s
    }, R)));
};

const YZ = (e, t) => {
    let o;
    let n;
    if (e.themeVariant !== "high-contrast" && !t?.isCustomFocusTurnedOn && !t?.disabled && !t?.readonly) {
        o = "none";
    } else {
        o = "var(--focus-light-bg)";
        n = "calc(-1 * var(--focus-width))";
    }
    const a = t?.readonly ? {
        bd: "transparent",
        bg: e.tokensExperimental["color-action-background-control-normal"],
        fg: e.tokensExperimental["color-action-text-control-normal"],
        "hover-bd": "var(--composite-input-bd)",
        "hover-bg": "var(--composite-input-bg)",
        "hover-fg": "var(--composite-input-fg)",
        "active-bd": "var(--composite-input-bd)",
        "active-bg": "var(--composite-input-bg)",
        "active-fg": "var(--composite-input-fg)"
    } : {
        bd: e.tokensExperimental["color-action-border-control-normal"],
        bg: e.tokensExperimental["color-action-background-control-normal"],
        fg: e.tokensExperimental["color-action-text-control-normal"],
        "hover-bd": e.tokensExperimental["color-action-border-control-hover"],
        "hover-bg": e.tokensExperimental["color-action-background-control-hover"],
        "hover-fg": e.tokensExperimental["color-action-text-control-hover"],
        "active-bd": e.tokensExperimental["color-action-border-control-selected"],
        "active-bg": e.tokensExperimental["color-action-background-control-selected"],
        "active-fg": e.tokensExperimental["color-action-text-control-selected"]
    };
    return {
        ...__({
            ...a,
            "disabled-fg": e.tokensExperimental["color-action-text-control-disabled"],
            "disabled-bd": !t?.readonly ? e.tokensExperimental["color-action-border-control-disabled"] : "transparent",
            "disabled-bg": e.tokensExperimental["color-action-background-control-disabled"],
            "focus-outline": o,
            "focus-outline-offset": n,
            "error-bd": e.tokensExperimental["color-action-border-control-alert"],
            "warning-bd": e.tokensExperimental["color-action-border-control-warning"]
        }, "composite-input")
    };
};

var qZ = "sas_components-FileUploader-FileUploader_input-mask";

var XZ = "sas_components-FileUploader-FileUploader_input-info";

var ZZ = "sas_components-FileUploader-FileUploader_upload-button-only";

var JZ = "sas_components-FileUploader-FileUploader_composite-input";

var QZ = {
    inputMask: qZ,
    inputInfo: XZ,
    uploadButtonOnly: ZZ,
    compositeInput: JZ
};

const eJ = fb(It);

const tJ = MA("FileUploader");

const oJ = u(((e, o) => {
    const r = eJ();
    const i = c(null);
    const l = c(null);
    const d = c(null);
    const u = c(null);
    const m = c(null);
    const p = tJ();
    const f = e.buttonText ?? r("buttonText.label");
    const h = e.iconOnly ? e.buttonTooltip || f : undefined;
    const b = e.iconOnly ? e.buttonAriaLabel : undefined;
    const v = "fileUploader";
    const [y, x] = n(e.value ?? "");
    const S = e.iconOnly ? e.icon ?? MR : e.icon;
    const [w, C] = n([]);
    const E = e.required;
    const [I, _] = n(false);
    const D = () => {
        const t = e.restrictedFileType;
        const o = e.fileType;
        const n = [];
        if (t && t.length > 0 && o && o.length > 0) {
            for (const e of o) {
                if (t.indexOf(e) === -1) {
                    n.push(e);
                }
            }
            return n && ".".concat(n.join(",."));
        }
        return o && ".".concat(o.join(",."));
    };
    const L = s((() => {
        if (!I) {
            _(true);
            i?.current?.click();
        }
    }), [ I ]);
    const T = () => {
        u?.current?.reset();
    };
    const R = !e.buttonOnly && t($Z, {
        testId: gb(e.testId, "compinput"),
        isSelectorOpen: I,
        value: y,
        className: QZ.compositeInput,
        disabled: e.disabled,
        mode: "select",
        onOpen: () => {
            L();
        },
        buttonDisplay: S ? S : f,
        ariaRoleDescription: e.multiple ? r("fileUploaderMultipleRoleDescription.aria") : r("fileUploaderRoleDescription.aria"),
        ariaDescribedBy: e.ariaDescribedBy,
        entryFieldRef: l,
        buttonRef: d,
        ariaLabel: e.ariaLabel,
        ariaLabelledBy: e.ariaLabelledBy,
        buttonProps: {
            tooltip: h,
            ariaLabel: b
        },
        entryFieldProps: {
            id: e.id,
            required: E,
            showClearButton: !e.removeClearButton,
            type: "text",
            onChange: t => {
                if (t) {
                    x(t.value);
                    if (!t.value || t.value === "") {
                        C([]);
                        e.onChange?.({
                            newValue: "",
                            files: undefined,
                            fileName: ""
                        });
                    }
                }
            },
            onMouseDown: e => {
                if (e.target === l.current) {
                    L();
                }
            }
        }
    });
    const k = () => {
        A();
    };
    const A = t => {
        const o = i?.current?.files;
        if (o && o?.length > 0) {
            const {value: n, filesSelected: a} = xJ(e, o, t);
            if (n) {
                x(n);
                C(a);
            }
        } else if (t && w && w.length > 0) {
            yJ(e, w.map((e => e.value)));
        }
        T();
    };
    g(o, (() => ({
        uploadFiles: () => {
            A(true);
        },
        focus: () => {
            if (e.buttonOnly && m.current) {
                m.current.focus();
            } else if (l.current) {
                l.current.focus();
            }
        },
        clearInput: () => {
            x("");
            e.onChange?.({
                newValue: "",
                files: undefined,
                fileName: ""
            });
        }
    })));
    a((() => {
        function e(e) {
            const t = e.key;
            switch (t) {
              case " ":
                L();
                e.stopPropagation();
                e.preventDefault();
                break;

              case "Spacebar":
                L();
                e.stopPropagation();
                e.preventDefault();
                break;

              case "Tab":
                _(false);
                break;

              case "Enter":
                e.stopPropagation();
                e.preventDefault();
            }
        }
        const t = l.current;
        t?.addEventListener("keydown", e);
        return function() {
            t?.removeEventListener("keydown", e);
        };
    }), [ y, L ]);
    return t("div", {
        "data-testid": e.testId,
        tabIndex: -1,
        style: e.style
    }, t("form", {
        encType: "multipart/form-data",
        ref: u
    }, !e.disabled ? t(bO, {
        id: p
    }, r("fileloaderDescription.aria")) : null, t("div", {
        onMouseLeave: () => _(false)
    }, t("div", {
        className: QZ.inputInfo
    }, t("div", {
        className: QZ.inputMask
    }, t("input", {
        type: "file",
        "aria-hidden": "true",
        hidden: true,
        onChange: k,
        capture: false,
        tabIndex: -1,
        name: e.name ?? v,
        accept: D(),
        disabled: e.disabled,
        readOnly: true,
        ref: i,
        multiple: e.multiple
    })), R), e.buttonOnly ? t(QM, {
        testId: e.iconOnly ? gb(e.testId, "icon") : gb(e.testId, "button"),
        disabled: e.disabled,
        variant: S && e.buttonOnly ? oN.Light : oN.Standard,
        text: !e.iconOnly ? f : undefined,
        tooltip: h,
        ariaLabel: b,
        icon: S ? {
            icon: S
        } : undefined,
        focusable: e.focusable ?? true,
        ref: m,
        onPress: () => {
            _(false);
            L();
        }
    }) : null)));
}));

const nJ = Dh("FileUploader");

const aJ = e => e.size / 1024 / 1024;

const rJ = (e, t, o) => {
    const n = t;
    nJ.info(`File: ${e.name} is of size ${e.size} MB which exceeds the file size limit of ${n} MB.`);
    o?.({
        fileName: e.name,
        fileSize: e.size
    });
};

const sJ = (e, t, o) => {
    const n = e.lastIndexOf(".");
    const a = n === -1 ? "" : e.substring(n + 1);
    for (const n of t) {
        if (a.toLowerCase() === n.toLowerCase()) {
            nJ.info(`File: ${e} is of type ${a}.  The restricted file types are: ${t}.`);
            o?.({
                fileName: e,
                fileType: a
            });
            return true;
        }
    }
    return false;
};

const iJ = (e, t, o) => {
    const n = e.lastIndexOf(".");
    const a = n === -1 ? "" : e.substring(n + 1);
    let r = true;
    if (t && t.length > 0) {
        for (const e of t) {
            if (a.toLowerCase() === e.toLowerCase()) {
                r = false;
            }
        }
        if (r) {
            nJ.info(`File: ${e} is of type ${a}.  The allowed file types are: ${t}.`);
            o?.({
                fileName: e,
                fileType: a
            });
            return true;
        }
    }
    return false;
};

const lJ = (e, t, o) => {
    const n = t ?? 0;
    if (n !== 0 && e.length > n) {
        nJ.info(`The filename of ${e} (${e.length} characters) is longer than the maximum of ${n} characters.`);
        o?.({
            fileName: e
        });
        return true;
    }
    return false;
};

const cJ = (e, t, o, n, a, r) => {
    const s = t ?? [];
    const i = o ?? [];
    for (const t of e) {
        const e = t.name;
        if (sJ(e, i, r)) {
            return false;
        }
        if (lJ(e, n, a)) {
            return false;
        }
        if (iJ(e, s, r)) {
            return false;
        }
    }
    return true;
};

const dJ = function(e) {
    return [ ...e ].map((({name: e}) => `"${e}"`)).join(", ");
};

const uJ = (e, t) => {
    let o = "";
    const n = [];
    const a = e.maximumFileSize;
    let r = false;
    let s = null;
    if (t && t?.length > 0) {
        for (const e of t) {
            const t = aJ(e);
            if (a && t > a) {
                n.push({
                    value: e,
                    maxFileSizeExceeded: true
                });
                r = true;
                if (!s) {
                    s = e;
                }
            } else {
                n.push({
                    value: e,
                    maxFileSizeExceeded: false
                });
            }
        }
        e.onFileSelection?.({
            fileSelectedInfo: n
        });
        if (r && s) {
            rJ(s, e.maximumFileSize, e.onFileSizeExceeded);
        }
        if (!r && cJ(t, e.fileType, e.restrictedFileType, e.maximumFilenameLength, e.onFilenameLengthExceeded, e.onTypeMissmatch)) {
            e.onFileAllowed?.({});
            if (e.multiple && t.length > 1) {
                o = dJ(t);
            } else {
                o = t?.item(0)?.name ?? "";
            }
            e.onChange?.({
                newValue: o,
                files: t,
                fileName: t[0].name
            });
        }
    }
    return {
        value: o,
        filesSelected: n
    };
};

const mJ = (e, t, o) => {
    const n = new FormData;
    const a = t ?? "file";
    n.append("_charset_", "UTF-8");
    n.append(`${a}-data`, o ?? "");
    for (const t of e) {
        if (t instanceof window.Blob && t.name) {
            n.append(a, t, t.name);
        } else {
            n.append(a, t);
        }
    }
    return n;
};

const pJ = e => {
    const t = {};
    if (e) {
        for (const o of e) {
            t[o.name] = o.value;
            if (o.name.toLowerCase().indexOf("content-type") > -1 && o.value.toLowerCase().indexOf("charset") > -1) {
                return undefined;
            }
        }
    }
    return t;
};

const fJ = e => e.length > 0 ? e[0].name : "";

const gJ = (e, t) => {
    const o = t;
    if (o) {
        for (const t of o) {
            e.setRequestHeader(t.name, t.value);
        }
    }
};

const hJ = (e, t) => {
    if (t) {
        for (const o of t) {
            e.append(o.name, o.value);
        }
    }
    return null;
};

const bJ = (e, t, o, n, a) => {
    e.onreadystatechange = () => {
        if (e.readyState === e.DONE) {
            const r = e.status;
            const s = e.response;
            const i = e.responseText;
            const l = e.getAllResponseHeaders();
            const c = [];
            if (l) {
                const e = l.split("\r\n");
                for (const t of e) {
                    const e = t.indexOf(": ");
                    c[t.substring(0, e)] = t.substring(e + 2);
                }
            }
            if (r === 0 || r >= 200 && r < 400) {
                a?.({
                    data: e.response.data,
                    status: e.status,
                    statusText: e.statusText,
                    formData: t,
                    headerMap: c,
                    requestHeaders: o,
                    response: s,
                    responseContent: i
                });
            } else {
                n?.({
                    errorObject: i
                });
            }
        }
    };
};

const vJ = e => {
    const t = {};
    if (e) {
        for (const o of e) {
            t[o.name] = o.value;
        }
    }
    return t;
};

const yJ = async (e, t) => {
    const o = t || [];
    const n = mJ(o, e?.name, e?.additionalData);
    const a = pJ(e?.headerParameters);
    const r = fJ(o);
    const s = e.withCredentials ?? false;
    if (!a) {
        const t = new XMLHttpRequest;
        t.open("POST", e.uploadUrl, true);
        t.withCredentials = s;
        gJ(t, e.headerParameters);
        hJ(n, e.parameters);
        bJ(t, n, e.headerParameters, e.onUploadFailed);
        e.onUploadStart?.({
            formData: n,
            fileName: r
        });
        t.send(n);
    } else {
        const t = vJ(e.parameters);
        const o = {
            headers: a,
            params: t,
            responseEncoding: "utf8",
            withCredentials: s
        };
        e.onUploadStart?.({
            formData: n,
            fileName: r
        });
        await aS.post(e.uploadUrl, n, o).then((t => {
            nJ.info("The File was successfully uploaded.");
            e.onUploadCompleted?.({
                data: t.data,
                status: t.status,
                statusText: t.statusText,
                formData: n,
                headerMap: a,
                requestHeaders: e.headerParameters,
                response: t,
                responseContent: t.toString()
            });
        })).catch((t => {
            nJ.info(`The file could not be uploaded due to the following error: ${t}`);
            e.onUploadFailed?.({
                errorObject: t
            });
            if (t.response) {
                nJ.info(t.response.data);
                nJ.info(t.response.status);
                nJ.info(t.response.headers);
            } else if (t.request) {
                nJ.info(`No response was received.`);
                nJ.info(t.request);
            } else {
                nJ.info(`An error occurred while the request was being set up.`);
            }
        }));
    }
};

const xJ = (e, t, o) => {
    const n = t || undefined;
    const {value: a, filesSelected: r} = uJ(e, n);
    if (n && n.length > 0 && a && a.trim().length > 0 && (!e?.uploadOnRequest || o)) {
        yJ(e, t);
    }
    return {
        value: a,
        filesSelected: r
    };
};

const SJ = (e, t) => {
    const o = [];
    if (t && t.length > 0 && e && e.length > 0) {
        for (const n of e) {
            if (t.indexOf(n) === -1) {
                o.push(n);
            }
        }
        return o && ".".concat(o.join(",."));
    }
    return e && ".".concat(e.join(",."));
};

const wJ = (e, t) => {
    const o = "fileUploader";
    const n = document.createElement("input");
    n.type = "file";
    n.multiple = e.multiple || false;
    n.accept = SJ(e.fileType, e.restrictedFileType) || "";
    n.name = e.name || o;
    n.oninput = o => {
        const n = o.target;
        xJ(e, n.files || undefined, true);
        t?.();
    };
    n.click();
    return n;
};

const CJ = e => t(iP, e);

var EJ = "sas_components-Link-Link_link";

var IJ = "sas_components-Link-Link_small";

var _J = "sas_components-Link-Link_text";

var DJ = "sas_components-Link-Link_nowrap";

var LJ = "sas_components-Link-Link_has-max-lines";

var TJ = "sas_components-Link-Link_disabled";

var RJ = {
    hover: "sas_components-Link-Link_decoration_hover",
    none: "sas_components-Link-Link_decoration_none"
};

var kJ = {
    link: EJ,
    small: IJ,
    text: _J,
    nowrap: DJ,
    hasMaxLines: LJ,
    disabled: TJ,
    decoration: RJ
};

const AJ = u((function e(o, n) {
    const a = WA({
        tooltip: o.title
    });
    const {children: r, dir: s, small: i, disabled: l, wrapText: c, className: d, style: u, tabIndex: m, decoration: p, href: f, onPress: g, maxLines: h, preventTruncationTooltip: b, testId: v, ...y} = o;
    const x = C_();
    const S = I_({
        fg: l ? x.tokensExperimental["color-action-text-standard-disabled"] : x.tokensExperimental["color-action-link-normal"],
        "font-size-m": x.tokensExperimental["font-size-body-text-m"],
        "font-size-s": x.tokensExperimental["font-size-body-text-s"]
    }, "link");
    const w = s ?? WN(r);
    return t("a", Ee({}, y, {
        "aria-disabled": !!l,
        "data-testid": v,
        ref: e => {
            if ((c === false || h !== undefined) && !b) {
                a(e);
            }
            D_(n, e);
        },
        className: ke(kJ.link, d, c === false ? kJ.nowrap : h !== undefined && kJ.hasMaxLines, i && kJ.small, l && kJ.disabled, p === "hover-only" && kJ.decoration.hover),
        style: {
            ...S,
            ...u
        },
        href: f && !l ? f : undefined,
        tabIndex: m ?? 0,
        onClick: e => {
            if (g) e.preventDefault();
            if (l) return;
            g?.(e);
        },
        onKeyDown: e => {
            if (e.key === "Enter") {
                if (l) return;
                if (f) {
                    e.stopPropagation();
                    return;
                }
                e.preventDefault();
                g?.(e);
            }
            o.onKeyDown?.(e);
        }
    }), t("span", {
        className: kJ.text,
        dir: w,
        style: {
            WebkitLineClamp: c !== false ? o.maxLines : undefined
        }
    }, r));
}));

const MJ = u((function e(o, n) {
    return t(eP, Ee({}, o, {
        ref: n
    }));
}));

const NJ = [ "warning", "error", "success", "informational" ];

const OJ = [ "error", "flagged", "important", "incomplete", "invalid", "required", "stopped", "stopping" ];

const PJ = [ "warning", "accessibleWarning", "completeWithWarnings", "disconnected", "hidden", "incompleteWarning", "mediumPriority", "outOfSync", "reverted" ];

const BJ = [ "informational", "accessible", "clustered", "conditionalComplete", "conditional", "debug", "embedded", "historical", "incompleteInProgress", "information", "insightFound", "insight", "lowPriority", "new", "paused", "progress", "scheduled", "visible" ];

const zJ = [ "success", "complete", "merged", "onDemand", "review", "submitted" ];

var FJ = "sas_components-MessageStrip-MessageStrip_container";

var jJ = "sas_components-MessageStrip-MessageStrip_section-message";

var VJ = "sas_components-MessageStrip-MessageStrip_content-container";

var HJ = "sas_components-MessageStrip-MessageStrip_text";

var UJ = "sas_components-MessageStrip-MessageStrip_link";

var GJ = "sas_components-MessageStrip-MessageStrip_help-button";

var KJ = "sas_components-MessageStrip-MessageStrip_spacer";

var WJ = "sas_components-MessageStrip-MessageStrip_close";

var $J = "sas_components-MessageStrip-MessageStrip_close-button";

var YJ = "sas_components-MessageStrip-MessageStrip_icon";

var qJ = "sas_components-MessageStrip-MessageStrip_action";

var XJ = "sas_components-MessageStrip-MessageStrip_menu-button-container";

var ZJ = {
    container: FJ,
    sectionMessage: jJ,
    contentContainer: VJ,
    text: HJ,
    link: UJ,
    helpButton: GJ,
    spacer: KJ,
    close: WJ,
    closeButton: $J,
    icon: YJ,
    action: qJ,
    menuButtonContainer: XJ
};

const JJ = fb(_t);

const QJ = {
    accessible: Pk,
    accessibleWarning: Bk,
    clustered: jk,
    complete: Vk,
    completeWithWarnings: Hk,
    conditionalComplete: Uk,
    conditional: Gk,
    debug: Kk,
    disconnected: Wk,
    embedded: $k,
    error: Yk,
    flagged: qk,
    hidden: Xk,
    historical: Zk,
    important: Jk,
    incompleteInProgress: Qk,
    incomplete: eA,
    incompleteWarning: tA,
    information: oA,
    informational: oA,
    insightFound: _A,
    insight: DA,
    invalid: nA,
    lowPriority: rA,
    mediumPriority: sA,
    merged: iA,
    new: cA,
    onDemand: dA,
    outOfSync: uA,
    paused: mA,
    progress: pA,
    required: gA,
    reverted: hA,
    review: bA,
    scheduled: vA,
    stopped: yA,
    stopping: xA,
    submitted: SA,
    success: Vk,
    visible: wA,
    warning: CA
};

const eQ = e => {
    const o = C_();
    const n = parseFloat(o.enableNovaTokens ? o.tokensExperimental["font-size-body-text-m"] : o.font.size.m) * 16;
    const r = Math.round(n * Number(o.enableNovaTokens ? o.tokensExperimental["font-space-line-height"] : o.font.lineHeight));
    const s = e.type ?? (e.icon === undefined ? "informational" : OJ.includes(e.icon) ? "error" : PJ.includes(e.icon) ? "warning" : BJ.includes(e.icon) ? "informational" : zJ.includes(e.icon) ? "success" : "informational");
    const i = e.icon ?? s;
    const l = `${Math.round((r - 14) / 2)}px`;
    const c = {
        ...tQ(o, {
            type: s,
            tokens: e.tokens
        }),
        ...e.theme?.(o)
    };
    const d = JJ();
    const u = JA();
    const m = e.tooltip ?? (NJ.includes(i) ? d(`${i}.label`) : u({
        icon: QJ[i]
    }).tooltip);
    const p = d(`container.aria`, {
        messageType: m ?? "",
        messageText: e.children ?? ""
    });
    const f = XA();
    a((() => {
        if (!e.disableDirectSpeech) {
            f?.notify(p);
        }
    }), [ f, d, p, e.disableDirectSpeech ]);
    return t("div", {
        className: ke(ZJ.container, e.className),
        style: {
            ...c,
            ...e.style
        },
        role: "group"
    }, t("div", {
        className: ZJ.sectionMessage,
        "data-testid": e.testId,
        tabIndex: 0,
        "aria-label": p
    }, t(MM, {
        icon: QJ[i],
        tooltip: m,
        className: ZJ.icon,
        role: "img",
        ariaHidden: true,
        style: {
            marginTop: l
        }
    }), t("div", {
        className: ZJ.contentContainer
    }, t(jP, {
        className: ZJ.text,
        wrapText: !e.suppressWrapText,
        tokens: () => ({
            fg: "var(--message-toast-fg)"
        })
    }, e.children ?? ""), e.linkProps ? t(AJ, {
        children: e.linkProps.text,
        href: e.linkProps.href,
        className: ZJ.link,
        small: true,
        onPress: e.linkProps.onPress
    }) : null, e.helpPopupProps ? t(CJ, Ee({}, e.helpPopupProps, {
        className: ZJ.helpButton
    })) : null), t("div", {
        className: ZJ.spacer
    }), e.actionButtonProps ? e.actionButtonProps.type === "MenuButton" ? t("div", {
        className: ZJ.menuButtonContainer
    }, t(MJ, Ee({
        variant: oN.Small
    }, e.actionButtonProps, {
        testId: e.testId
    }))) : t(QM, Ee({
        variant: oN.Small,
        className: ZJ.action
    }, e.actionButtonProps, {
        type: undefined,
        onPress: e.actionButtonProps.onPress
    })) : null, e.onClose ? t("div", {
        className: ZJ.close
    }, t(QM, {
        className: ZJ.closeButton,
        variant: oN.SmallIcon,
        onPress: () => {
            const t = e.suppressRefocusOnClose ? null : kF();
            const o = document.activeElement !== t;
            e.onClose();
            if (o) t?.focus();
        },
        icon: {
            icon: lT,
            tooltip: e.closeAriaLabel ?? d("close.button.aria")
        }
    })) : null));
};

const tQ = (e, t) => {
    const o = t.type === "error" ? "alert" : t.type === "informational" ? "info" : t.type;
    return {
        ...__({
            bg: e.tokensExperimental[`color-status-background-${o}`],
            bd: e.tokensExperimental[`color-status-border-${o}`],
            fg: e.tokensExperimental[`color-status-text-${o}`],
            pd: e.tokensExperimental["space-squish-xs"],
            "pd-none": e.tokensExperimental["space-base-null"],
            "pd-xs": e.tokensExperimental["space-base-xs"],
            "pd-s": e.tokensExperimental["space-base-s"],
            "pd-m": e.tokensExperimental["space-base-m"],
            "font-size-m": e.tokensExperimental["font-size-body-text-m"],
            "icon-fg": e.tokensExperimental[`color-status-icon-${o}`],
            ...t.tokens?.()
        }, "message-strip"),
        ...!e.enableNovaTokens && oQ(e, t)
    };
};

const oQ = (e, t) => {
    const o = t.type === "error" ? "alert" : t.type;
    return __({
        ...e.stateStatus[o],
        "font-size-m": e.font.size.m,
        "icon-fg": e.stateStatus[o].fg,
        ...t.tokens?.()
    }, "message-strip");
};

var nQ = "sas_components-SearchField-SearchField_form";

var aQ = "sas_components-SearchField-SearchField_disabled";

var rQ = "sas_components-SearchField-SearchField_search-input";

var sQ = "sas_components-SearchField-SearchField_active";

var iQ = "sas_components-SearchField-SearchField_reset-button";

var lQ = "sas_components-SearchField-SearchField_reset-button-search";

var cQ = "sas_components-SearchField-SearchField_search-button";

var dQ = "sas_components-SearchField-SearchField_search-button-container";

var uQ = {
    form: nQ,
    disabled: aQ,
    searchInput: rQ,
    active: sQ,
    resetButton: iQ,
    resetButtonSearch: lQ,
    searchButton: cQ,
    searchButtonContainer: dQ
};

const mQ = fb(Dt);

const pQ = e => {
    const [o, r] = n(false);
    const [s, i] = n(false);
    const l = C_();
    const {density: d} = YA();
    const u = {
        bd: l.tokensExperimental["color-action-border-control-normal"],
        bg: l.tokensExperimental["color-action-background-control-normal"],
        fg: l.tokensExperimental["color-action-text-control-normal"],
        "hover-bd": l.tokensExperimental["color-action-border-control-hover"],
        "hover-bg": l.tokensExperimental["color-action-background-control-hover"],
        "hover-fg": l.tokensExperimental["color-action-text-control-placeholder"],
        "active-bd": l.tokensExperimental["color-action-border-control-selected"],
        "active-bg": l.tokensExperimental["color-action-background-control-selected"],
        "active-fg": l.tokensExperimental["color-action-text-control-active"],
        "disabled-fg": l.tokensExperimental["color-action-text-control-disabled"],
        "disabled-bd": l.tokensExperimental["color-action-border-control-disabled"],
        "disabled-bg": l.tokensExperimental["color-action-background-control-disabled"],
        "spacing-xs": l.tokensExperimental["space-base-xs"]
    };
    const m = e.disableEmptySearch ?? false;
    const p = e.disableRole ?? false;
    const f = jD(L_.FOCUS_OVERRIDE) === "true";
    let g;
    let h;
    if (l.themeVariant !== "high-contrast" && !f && !e.disabled) {
        g = "none";
    } else {
        g = "var(--focus-light-bg)";
        h = "calc(-1 * var(--focus-width) - 2px)";
    }
    const b = {
        ...I_(u, "searchfield"),
        ...I_({
            outline: g,
            "outline-offset": h
        }, "searchfield-focus")
    };
    const v = mQ();
    const y = c(null);
    const x = c(null);
    const S = c(false);
    let w = "";
    const C = e.numberOfResults;
    if (!qI(C)) {
        if (C === 0) {
            w = v("narrator.noresults.msg");
        } else if (C === 1) {
            w = v("narrator.result.msg");
        } else {
            w = v(e.numberOfResultsIndeterminant ? "narrator.results.indeterminant.msg" : "narrator.results.msg", {
                count: C.toString()
            });
        }
    }
    const E = XA();
    a((() => {
        const t = (e.filterMode || !m && e.value === "" || e.value !== "") && !qI(C);
        if (t) {
            if (e.filterMode && o) {
                E?.notify(w);
            } else if (S.current && (s || o)) {
                E?.notify(w);
                S.current = false;
            }
        }
    }), [ E, o, w, C, e.filterMode, e.value, S, m, s ]);
    a((() => {
        const t = () => {
            S.current = false;
            i(false);
        };
        const o = t => {
            if (t.key === "Escape") {
                if (a?.value && a.value.length > 0) {
                    e.onChange({
                        value: ""
                    });
                    t.stopPropagation();
                }
            }
        };
        const n = x.current;
        n?.addEventListener("blur", t);
        const a = y.current;
        a?.addEventListener("keydown", o);
        return () => {
            n?.removeEventListener("blur", t);
            a?.removeEventListener("keydown", o);
        };
    }));
    const I = () => {
        if (!e.filterMode) {
            return e.landmarkLabel ?? v("searchField.landmark.search.label");
        }
    };
    return t("div", {
        "data-testid": e.testId,
        className: ke(e.className, uQ.form, e.disabled && uQ.disabled, o && uQ.active),
        style: {
            ...b,
            ...e.style
        },
        role: p || e.filterMode ? undefined : "search",
        "data-landmark-label": !p ? I() : undefined
    }, e.filterMode ? t("div", {
        className: uQ.searchButtonContainer
    }, t(MM, {
        className: uQ.searchButton,
        icon: XR,
        tooltip: "",
        ariaLabel: "",
        ariaHidden: true,
        testId: gb(e.testId, "filterIcon")
    })) : null, t(hH, Ee({
        ref: t => {
            y.current = t;
            D_(e.inputRef, t);
        }
    }, d === "high" && {
        style: {
            "--input-min-height": "calc(1.5rem - 2px)"
        }
    }, {
        placeholder: e.placeholder ?? (e.filterMode ? v("searchField.placeholder.filter.label") : v("searchField.placeholder.search.label")),
        className: uQ.searchInput,
        onChange: t => {
            e.onChange({
                value: t.value
            });
            if (e.filterMode) {
                e.onCommit?.({
                    value: t.value
                });
                return;
            }
            if (!m) {
                if (!t.value || t.value === "") {
                    e.onCommit?.({
                        value: t.value
                    });
                    S.current = true;
                }
            }
            if (t.value === "") {
                setTimeout((() => y.current?.focus()), 0);
            }
            if (!e.filterMode && S.current) {
                S.current = false;
            }
        },
        onCommit: t => {
            if (e.disabled) return;
            if (t.reason === "enter") {
                e.onCommit?.({
                    value: t.value
                });
                S.current = true;
            }
        },
        value: e.value,
        disabled: e.disabled,
        onBlur: () => {
            r(false);
            if (S.current && e.filterMode) S.current = false;
            e.onBlur?.();
        },
        onFocus: () => {
            r(true);
            e.onFocus?.();
        },
        ariaLabel: e.ariaLabel ?? (e.filterMode ? v("searchField.input.filter.aria") : v("searchField.input.search.aria")),
        maxLength: e.maxLength,
        testId: gb(e.testId, "searchInput"),
        commitOnEnterInDialog: e.commitOnEnterInDialog ?? true,
        showClearButton: e.value !== "",
        clearButtonTooltip: e.clearButtonTooltip ?? (e.filterMode ? v("searchField.clearButton.filter.tooltip.label") : v("searchField.clearButton.search.tooltip.label")),
        clearButtonAriaLabel: e.clearButtonAriaLabel ?? (e.filterMode ? v("searchField.clearButton.filter.aria") : v("searchField.clearButton.search.aria")),
        clearButtonTokens: () => ({
            fg: e.disabled ? l.tokensExperimental["color-action-text-standard-disabled"] : l.tokensExperimental["color-action-text-control-normal"],
            filter: "none",
            bg: "transparent"
        })
    })), e.filterMode ? null : t(QM, {
        ref: x,
        variant: oN.Icon,
        className: uQ.searchButton,
        disabled: e.disabled,
        icon: {
            icon: XR
        },
        tooltip: e.searchButtonTooltip ?? v("searchField.searchButton.startSearch.tooltip.label"),
        ariaLabel: e.searchButtonAriaLabel ?? v("searchField.searchButton.startSearch.aria"),
        onPress: () => {
            e.onCommit?.({
                value: e.value
            });
            S.current = true;
            i(true);
        },
        testId: gb(e.testId, "searchButton"),
        theme: () => ({
            "--button-fg": e.disabled ? l.tokensExperimental["color-action-text-standard-disabled"] : l.tokensExperimental["color-action-text-standard-normal"],
            "--button-filter": "none",
            "--button-bg": "transparent",
            "--button-hover-fg": e.disabled ? l.tokensExperimental["color-action-text-standard-disabled"] : l.tokensExperimental["color-action-text-standard-normal"],
            "--button-hover-filter": "none",
            "--button-hover-bg": "transparent",
            "--button-active-fg": e.disabled ? l.tokensExperimental["color-action-text-standard-disabled"] : l.tokensExperimental["color-action-text-standard-normal"],
            "--button-active-filter": "none",
            "--button-active-bg": "transparent",
            "--button-active-bd": "transparent"
        })
    }));
};

var fQ = "sas_components-Switch-Switch_container";

var gQ = "sas_components-Switch-Switch_switch-button";

var hQ = "sas_components-Switch-Switch_readonly";

var bQ = "sas_components-Switch-Switch_disabled";

var vQ = "sas_components-Switch-Switch_switch-inner";

var yQ = "sas_components-Switch-Switch_handle";

var xQ = "sas_components-Switch-Switch_icon-off";

var SQ = "sas_components-Switch-Switch_icon-on";

var wQ = {
    container: fQ,
    switchButton: gQ,
    readonly: hQ,
    disabled: bQ,
    switchInner: vQ,
    handle: yQ,
    iconOff: xQ,
    iconOn: SQ
};

const CQ = fb(Lt);

const EQ = u((function e({style: o, className: r, isOn: s, defaultOn: i = false, disabled: l = false, readOnly: c = false, tooltip: d = {}, testId: u, onPress: m, ariaLabel: p, ariaDescribedBy: f = [], ariaLabelledBy: g}, h) {
    const [b, v] = n(i);
    const y = CQ();
    const x = ay();
    const S = s !== undefined;
    a((() => {
        if (S) {
            v(s ?? false);
        }
    }), [ S, s ]);
    const w = "0.5rem";
    const C = C_();
    const E = {
        ...I_({
            ...b ? {
                fg: C.tokensExperimental["color-action-icon-on-off-selected"],
                bg: C.tokensExperimental["color-action-background-on-off-selected"],
                bd: C.tokensExperimental["color-action-border-on-off-selected"],
                "anim-tf": C.tokensExperimental["ease-in"]
            } : {
                fg: C.tokensExperimental["color-action-icon-on-off-normal"],
                bg: C.tokensExperimental["color-action-background-on-off-normal"],
                bd: C.tokensExperimental["color-action-border-on-off-normal"],
                "anim-tf": C.tokensExperimental["ease-out"]
            },
            "anim-dur": C.tokensExperimental["duration-200"],
            "handle-size": w
        }, "switch"),
        ...I_(b ? {
            fg: C.tokensExperimental["color-action-icon-on-off-selected-disabled"],
            bg: C.tokensExperimental["color-action-background-on-off-selected-disabled"],
            bd: C.tokensExperimental["color-action-border-on-off-selected-disabled"]
        } : {
            fg: C.tokensExperimental["color-action-icon-on-off-disabled"],
            bg: C.tokensExperimental["color-action-background-on-off-disabled"],
            bd: C.tokensExperimental["color-action-border-on-off-disabled"]
        }, "switch-disabled")
    };
    const I = (e, t) => {
        if (!S) {
            v(e);
        }
        m?.(e, t);
    };
    return t("div", {
        "data-testid": u,
        style: {
            ...E,
            ...o
        },
        className: ke(wQ.container, r)
    }, t("button", {
        ref: h,
        type: "button",
        "data-testid": gb(u, "button"),
        className: ke(wQ.switchButton, l && wQ.disabled, c && wQ.readonly),
        role: "switch",
        "aria-checked": b,
        "aria-disabled": l ? true : undefined,
        "aria-readonly": c && !l ? true : undefined,
        "aria-label": g ? undefined : p,
        "aria-labelledby": g,
        "aria-describedby": f.length > 0 ? f.join(" ") : undefined,
        title: b ? d.on ?? y("on.tooltip.label") : d.off ?? y("off.tooltip.label"),
        tabIndex: 0,
        onMouseUp: e => {
            if (l || c) return;
            e.preventDefault();
            I(!b, e);
        },
        onKeyDown: e => {
            if (e.key === "Enter") {
                e.preventDefault();
                PA(e);
            }
        },
        onKeyUp: e => {
            if (l || c) return;
            switch (e.key) {
              case " ":
              case "Enter":
                e.preventDefault();
                I(!b, e);
                return;

              case "ArrowRight":
                I(x ? false : true, e);
                return;

              case "ArrowLeft":
                I(x ? true : false, e);
                return;
            }
        }
    }, t("div", {
        className: wQ.switchInner,
        style: {
            transform: `${b ? x ? "translate3d(calc(-100% - 1px + 1.5 * var(--switch-handle-size)), 0, 0)" : "translate3d(calc(100% + 1px - 1.5 * var(--switch-handle-size)), 0, 0)" : "translate3d(0, 0, 0)"}${x ? " rotateX(180deg)" : ""}`
        }
    }, t("div", {
        className: wQ.handle
    }, t(MM, {
        icon: ik,
        className: wQ.iconOn,
        theme: () => ({
            "--icon-default-override-fg": l ? "var(--switch-disabled-fg)" : "var(--switch-fg)"
        }),
        tooltip: "",
        ariaLabel: ""
    }), t(MM, {
        icon: sk,
        className: wQ.iconOff,
        theme: () => ({
            "--icon-default-override-fg": l ? "var(--switch-disabled-fg)" : "var(--switch-fg)"
        }),
        tooltip: "",
        ariaLabel: ""
    })))));
}));

const IQ = e => ({
    ...__({
        "item-medium-sh": e.backgroundsDepthNova.medium.sh,
        "drag-image-bg": e.backgroundsDepthNova.standard.bg,
        "copied-item": e.c.colorSecondary,
        "drop-line-bg": e.c.colorPrimary,
        "drop-line-loop": e.c.colorTextInverse,
        "drop-line-loop-shadow": Jv(e.c.colorPrimary, .8),
        "drop-zone-bd": e.c.colorPrimary,
        "drop-zone-bg": Jv(e.c.colorPrimary, .1),
        "item-trans-dur": e.animation.duration.exit.l,
        "item-anim-dur": e.animation.duration.enter.l,
        "moved-item-opacity": .3
    }, "dnd"),
    ...!e.enableNovaTokens && _Q(e)
});

const _Q = e => __({
    "item-medium-sh": e.backgroundsDepth.medium.sh,
    "drag-image-bg": e.backgroundsDepth.standard.bg,
    "copied-item": e.c.secondary,
    "drop-line-bg": e.c.primary,
    "drop-line-loop": e.c.white,
    "drop-line-loop-shadow": Jv(e.c.primary, .8),
    "drop-zone-bd": e.c.primary,
    "drop-zone-bg": Jv(e.c.primary, .1)
}, "dnd");

var DQ = "sas_dnd-view-DragPreview-DragPreview_drag-image-preview";

var LQ = {
    dragImagePreview: DQ
};

function TQ(e) {
    if (!e) {
        return {
            display: "none"
        };
    }
    const t = `translate(${e.x}px, ${e.y}px)`;
    return {
        transform: t
    };
}

const RQ = u(((e, o) => {
    const n = C_();
    const a = y_();
    const {useDragLayer: r} = nX();
    const {isDragging: s, currentOffset: i} = r((e => ({
        isDragging: e.isDragging(),
        currentOffset: e.getSourceClientOffset()
    })));
    const l = {
        ...IQ(n),
        ...e.theme?.(n)
    };
    if (!s) return null;
    return _e(t("div", {
        ref: o,
        "data-testid": e.testId,
        className: ke(LQ.dragImagePreview, e.className),
        style: {
            ...TQ(i),
            ...a,
            ...l,
            ...e.style
        }
    }, e.children), AQ());
}));

let kQ = null;

function AQ() {
    if (kQ === null) {
        const e = document.createElement("div");
        e.style.position = "fixed";
        e.style.pointerEvents = "none";
        e.style.top = "0";
        e.style.left = "0";
        e.style.width = "100%";
        e.style.height = "100%";
        e.style.zIndex = "100";
        document.body.appendChild(e);
        kQ = e;
    }
    return kQ;
}

fb(Tt);

const MQ = "NOVA_TOKEN";

fb(Tt);

Dh("TokenInput");

const NQ = u((function e({dndProps: o, ...n}, a) {
    return o ? t(OQ, Ee({}, n, {
        dndProps: o,
        ref: a
    })) : t(iN, Ee({}, n, {
        ref: a
    }));
}));

const OQ = u((function e({dndProps: o, ...n}, a) {
    const {ref: r, style: s, className: i} = FQ({
        ...o,
        allowDrag: true,
        type: MQ
    });
    return t(iN, Ee({}, n, {
        ref: e => {
            D_(a, e);
            D_(r, e);
        },
        style: {
            ...n.style,
            ...s
        },
        className: ke(n.className, i)
    }));
}));

var PQ = "sas_components-Token-__internal__-TokenDnd_draggable";

var BQ = "sas_components-Token-__internal__-TokenDnd_dragged-item";

var zQ = {
    draggable: PQ,
    draggedItem: BQ
};

const FQ = e => {
    const t = c(null);
    const {useDrag: o, getEmptyImage: n} = nX();
    const r = C_();
    const s = IQ(r);
    const [{isDragging: i}, l, d] = o({
        type: e.type,
        item: e,
        canDrag: e.allowDrag,
        collect: e => ({
            isDragging: e.isDragging()
        }),
        end(t, o) {
            if (o.didDrop()) {
                e.onDidDrop?.();
            }
        }
    });
    a((() => {
        d(n(), {
            captureDraggingState: true
        });
    }), [ d, n ]);
    l(t);
    return {
        ref: t,
        style: s,
        className: ke(e.allowDrag && zQ.draggable, i && zQ.draggedItem)
    };
};

const jQ = (e, t) => {
    if (document.activeElement === e) return;
    e?.focus(t);
};

const VQ = ({index: e = 0, tabIndex: t, isPopoverOpen: o, preventScrollOnFocus: r, textRef: i, closeRef: l}) => {
    const d = ay();
    const [u, m] = n(false);
    const [p, f] = n(0);
    const g = s(((t, o) => {
        if (t === e && o !== undefined) {
            f(o);
        }
        m(true);
    }), [ e ]);
    const h = f0();
    const {focusTokenIndex: b, focusColumnIndex: v, onUpdateFocus: y} = h ?? {
        focusTokenIndex: u ? e : undefined,
        focusColumnIndex: p,
        onUpdateFocus: g
    };
    const x = c(0);
    if (b !== undefined) {
        x.current = b;
    }
    const {onBlur: S, onFocus: w} = JI((() => {
        if (h) return;
        m(false);
    }));
    const C = t === 0 || x.current === e;
    const E = C ? v : -1;
    a((() => {
        if (o || b === undefined || b !== e) return;
        if (v === 1) {
            if (l.current) {
                jQ(l.current, {
                    preventScroll: r
                });
            } else {
                y(e, 0);
            }
        } else {
            jQ(i.current, {
                preventScroll: r
            });
        }
    }), [ l, v, b, e, o, y, r, i ]);
    const I = t => {
        switch (t.key) {
          case "ArrowUp":
            t.preventDefault();
            y(e - 1);
            break;

          case "ArrowDown":
            t.preventDefault();
            y(e + 1);
            break;

          case d ? "ArrowLeft" : "ArrowRight":
            t.preventDefault();
            if (v === 0 && l.current) {
                y(e, 1);
            } else {
                y(e + 1, 0);
            }
            break;

          case d ? "ArrowRight" : "ArrowLeft":
            t.preventDefault();
            if (v === 1) {
                y(e, 0);
            } else {
                y(e - 1, 1);
            }
            break;

          case "Home":
            t.preventDefault();
            if (t.ctrlKey) {
                y(0, 0);
            } else {
                y(e, 0);
            }
            break;

          case "End":
            t.preventDefault();
            if (t.ctrlKey) {
                y(Number.MAX_SAFE_INTEGER, 1);
            } else {
                y(e, 1);
            }
            break;

          default:
            return;
        }
    };
    const _ = t => {
        const o = t.target instanceof HTMLElement && l.current?.contains(t.target);
        y(e, o ? 1 : 0);
    };
    const D = t => {
        w();
        const o = t.target instanceof HTMLElement && l.current?.contains(t.target);
        y(e, o ? 1 : 0);
    };
    return {
        onKeyDown: I,
        onClick: _,
        onBlur: S,
        onFocus: D,
        focusableColumnIndex: E
    };
};

let HQ = function(e) {
    e["Default"] = "default";
    e["Primary"] = "primary";
    e["Secondary"] = "secondary";
    return e;
}({});

var UQ = "sas_components-Token-Token_token-button";

var GQ = "sas_components-Token-Token_dropdown-open";

var KQ = "sas_components-Token-Token_token";

var WQ = "sas_components-Token-Token_include-button";

var $Q = "sas_components-Token-Token_read-only";

var YQ = "sas_components-Token-Token_grid-based-token-main-button";

var qQ = "sas_components-Token-Token_text-wrapper";

var XQ = "sas_components-Token-Token_text";

var ZQ = "sas_components-Token-Token_icon";

var JQ = "sas_components-Token-Token_close-icon-container";

var QQ = "sas_components-Token-Token_grid-based-token-icon-button";

var e0 = "sas_components-Token-Token_grid-based-token-main-button-container";

var t0 = "sas_components-Token-Token_down-arrow-icon";

var o0 = {
    tokenButton: UQ,
    dropdownOpen: GQ,
    token: KQ,
    includeButton: WQ,
    readOnly: $Q,
    gridBasedTokenMainButton: YQ,
    textWrapper: qQ,
    text: XQ,
    icon: ZQ,
    closeIconContainer: JQ,
    gridBasedTokenIconButton: QQ,
    gridBasedTokenMainButtonContainer: e0,
    downArrowIcon: t0
};

const n0 = fb(Rt);

const a0 = MA("Token-dndPrefix");

const r0 = u((function e(o, a) {
    const {variant: r, testId: i, theme: l} = o;
    const d = XA();
    const u = n0();
    const m = a0();
    const p = o.dndPrefix ?? m;
    const [f, g] = n(false);
    const h = o.isPopoverOpen || f;
    const b = c(null);
    const v = c(null);
    const {onKeyDown: y, onClick: x, onBlur: S, onFocus: w, focusableColumnIndex: C} = VQ({
        index: o.index,
        tabIndex: o.tabIndex,
        isPopoverOpen: h,
        preventScrollOnFocus: o.preventScrollOnFocus,
        textRef: b,
        closeRef: v
    });
    const E = c();
    const I = o.value.trim() === "" ? u("token.missing.label") : o.value;
    let _ = [];
    if (o.includeDropdown) {
        if (o.menuSections && o.menuSections.length > 0) {
            _ = o.menuSections;
        } else if (o.menuItems && o.menuItems.length > 0) {
            _ = [ {
                items: o.menuItems
            } ];
        }
    }
    const D = s((e => {
        if (e) {
            E.current = e;
            D_(a, e);
        }
    }), [ a ]);
    const L = C_();
    const T = JA();
    const R = o.icon ? T(o.icon) : undefined;
    const k = {
        ...s0(L, {
            variant: r
        }),
        ...l?.(L)
    };
    const A = R?.ariaLabel ?? R?.tooltip;
    const M = o.tooltip ? [ I, o.tooltip ].join(", ") : A ? [ I, A ].join(", ") : undefined;
    const N = R?.tooltip;
    const O = o.buttonProps !== undefined || o.includeDropdown === true;
    const P = !O && (o.icon || o.tooltip);
    const B = o.includeDropdown ? u("groupToken.closeIcon.tooltip.label") : u("token.closeIcon.tooltip.label");
    const z = o.closeButtonProps?.tooltip ?? B;
    const F = [ z, I ].join(", ");
    if (o.asButton) {
        return t(ZM, Ee({}, o.buttonProps, {
            text: I,
            icon: o.icon,
            variant: oN.Small,
            className: ke(o.className, o0.tokenButton, h && o0.dropdownOpen),
            style: {
                ...k,
                ...o.style
            },
            onPress: o.onClick,
            tabIndex: o.tabIndex,
            testId: i,
            ref: D,
            tooltip: o.tooltip ?? N,
            ariaLabel: o.ariaLabel ?? M,
            ariaDescribedBy: o.ariaDescribedBy,
            onKeyDown: o.onKeyDown,
            onFocus: o.onFocus,
            theme: () => l0,
            "aria-haspopup": !!o.includeDropdown
        }));
    }
    const j = (() => {
        if (o.buttonProps) {
            return t(ZM, Ee({
                "aria-haspopup": !!o.includeDropdown,
                theme: () => c0,
                variant: oN.LightSmall,
                focusable: C === 0,
                text: I,
                children: o.includeDropdown ? t(MM, {
                    icon: kL,
                    className: ke($M.iconInner, o0.downArrowIcon),
                    tooltip: "",
                    ariaHidden: true
                }) : null,
                icon: o.icon,
                tooltip: o.tooltip
            }, o.buttonProps, {
                className: ke(o.buttonProps.className, o0.gridBasedTokenMainButton),
                ref: e => {
                    D_(o.buttonProps?.ref, e);
                    D_(b, e);
                }
            }));
        } else if (o.includeDropdown) {
            return t(eP, {
                testId: gb(o.testId, "menuButton"),
                ref: b,
                menuDockingElement: E.current,
                variant: oN.LightSmall,
                text: I,
                icon: o.icon,
                tooltip: o.tooltip,
                className: o0.gridBasedTokenMainButton,
                focusable: C === 0,
                buttonTheme: () => c0,
                sections: _,
                onItemSelected: o.onItemSelected ?? (() => {}),
                onItemClosed: ([e]) => {
                    const [, t] = e;
                    o.onCloseItem?.(t);
                },
                onOpen: () => g(true),
                onDismiss: () => g(false),
                onMouseDown: () => g(true),
                onKeyDown: e => {
                    if ([ "Enter", " " ].includes(e.key)) {
                        g(true);
                    }
                }
            });
        } else {
            return t(jP, {
                testId: gb(o.testId, "text"),
                className: o0.text,
                theme: () => ({
                    "--text-fg": "var(--token-fg)"
                }),
                wrapText: false,
                ref: P ? undefined : b,
                tabIndex: P ? undefined : C === 0 ? 0 : -1
            }, I);
        }
    })();
    return t(NQ, {
        role: "row",
        spacing: "xs",
        className: ke(o.className, o0.token, o.readOnly && o0.readOnly, (o.includeDropdown || o.buttonProps) && o0.includeButton, h && o0.dropdownOpen),
        style: {
            ...k,
            ...o.style
        },
        onClick: e => {
            o.onClick?.();
            x(e);
        },
        "data-testid": i,
        ref: D,
        tabIndex: -1,
        "aria-describedby": o.ariaDescribedBy,
        onKeyDown: e => {
            if (h) {
                return;
            }
            o.onKeyDown?.(e);
            y(e);
        },
        onBlur: S,
        onFocus: e => {
            o.onFocus?.(e);
            w(e);
        },
        dndProps: o.allowDrag ? {
            index: o.index ?? -1,
            id: o.id ?? o.value,
            dndPrefix: p,
            onDidDrop: o.onDidDrop
        } : undefined
    }, t(iN, {
        role: "gridcell",
        spacing: "xs",
        className: o0.textWrapper,
        "aria-label": o.ariaLabel ?? M,
        title: o.tooltip ?? N,
        tabIndex: P ? C === 0 ? 0 : -1 : undefined,
        ref: P ? b : undefined
    }, o.icon && !O ? t(MM, Ee({}, o.icon, {
        theme: () => ({
            "--icon-default-override-fg": "var(--token-fg)"
        }),
        tooltip: "",
        ariaHidden: true,
        className: ke(o0.icon, o.icon.className)
    })) : null, j), !o.readOnly ? t("div", {
        role: "gridcell",
        className: o0.closeIconContainer
    }, t(QM, {
        variant: oN.LightSmall,
        testId: gb(o.testId, "closeIconFocusContainer"),
        tooltip: z,
        ariaLabel: o.closeButtonProps?.ariaLabel ?? F,
        ariaLabelledBy: o.closeButtonProps?.ariaLabelledBy,
        ref: v,
        className: o0.gridBasedTokenIconButton,
        focusable: C === 1,
        onPress: () => {
            o.onClose?.();
            d?.notify(u("tokenRemoved.aria", {
                label: I
            }));
        },
        icon: {
            icon: cT,
            testId: gb(o.testId, "close")
        },
        theme: () => c0
    })) : null);
}));

const s0 = (e, t) => {
    let o;
    switch (t?.variant) {
      case "primary":
        o = e.tokensExperimental["color-primary"];
        break;

      case "secondary":
        o = e.tokensExperimental["color-secondary"];
        break;

      default:
        o = e.tokensExperimental["color-neutral"];
    }
    return {
        ...__({
            fg: e.tokensExperimental["color-text-neutral"],
            bg: Jv(o, .16),
            bd: e.themeVariant === "high-contrast" ? o : "transparent",
            "selected-bd": o,
            "selected-bd-width": e.themeVariant === "high-contrast" ? "2px" : "1px",
            "spacing-s": e.tokensExperimental["space-base-s"],
            "spacing-xs": e.tokensExperimental["space-base-xs"],
            "spacing-xxs": e.tokensExperimental["space-base-xxs"],
            "font-size-s": e.tokensExperimental["font-size-body-text-s"]
        }, "token"),
        ...!e.enableNovaTokens && i0(e, t)
    };
};

const i0 = (e, t) => {
    const o = .4;
    const n = .05;
    const a = .1;
    let r;
    switch (t?.variant) {
      case HQ.Primary:
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            r = e.statePrimary.normal;
        }
        switch (e.themeVariant) {
          case "dark":
            r = {
                fg: e.c.white,
                bg: Jv(e.c.p, o),
                bd: e.c.p
            };
            break;

          case "high-contrast":
            r = {
                fg: e.c.p3,
                bg: Jv(e.c.p3, n),
                bd: e.c.p3
            };
            break;

          default:
            r = {
                fg: e.c.p_1,
                bg: Jv(e.c.p, a),
                bd: e.c.p
            };
            break;
        }
        break;

      case HQ.Secondary:
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            r = e.stateSecondary.normal;
        }
        switch (e.themeVariant) {
          case "dark":
            r = {
                fg: e.c.white,
                bg: Jv(e.c.e1, o),
                bd: e.c.e1
            };
            break;

          case "high-contrast":
            r = {
                fg: e.c.e2,
                bg: Jv(e.c.e2, n),
                bd: e.c.e2
            };
            break;

          default:
            r = {
                fg: e.c.e,
                bg: Jv(e.c.e, a),
                bd: e.c.e
            };
            break;
        }
        break;

      default:
        switch (e.baseReportThemeName) {
          case "highcontrast2018":
          case "highcontrast2017":
            r = e.stateSecondary.normal;
        }
        switch (e.themeVariant) {
          case "dark":
            r = {
                fg: e.c.white,
                bg: Jv(e.c.n1, o),
                bd: e.c.n1
            };
            break;

          case "high-contrast":
            r = {
                fg: e.c.white,
                bg: Jv(e.c.white, n),
                bd: e.c.white
            };
            break;

          default:
            r = {
                fg: e.c.n_3,
                bg: Jv(e.c.n1, a),
                bd: e.c.n1
            };
            break;
        }
    }
    return __({
        ...r,
        "font-size-s": e.font.size.s
    }, "token");
};

const l0 = {
    "--button-fg": "var(--token-fg)",
    "--button-bg": "var(--token-bg)",
    "--button-bd": "var(--token-bd)",
    "--button-filter": "none",
    "--button-hover-fg": "var(--token-fg)",
    "--button-hover-bg": "var(--token-bg)",
    "--button-hover-bd": "var(--token-selected-bd)",
    "--button-hover-filter": "none",
    "--button-active-fg": "var(--token-fg)",
    "--button-active-bg": "var(--token-bg)",
    "--button-active-bd": "var(--token-selected-bd)",
    "--button-active-filter": "none"
};

const c0 = {
    "--button-fg": "var(--token-fg)",
    "--button-bg": "transparent",
    "--button-bd": "transparent",
    "--button-filter": "none",
    "--button-hover-fg": "var(--token-fg)",
    "--button-hover-bg": "transparent",
    "--button-hover-bd": "transparent",
    "--button-hover-filter": "none",
    "--button-active-fg": "var(--token-fg)",
    "--button-active-bg": "transparent",
    "--button-active-bd": "transparent",
    "--button-active-filter": "none"
};

const d0 = fb(Rt);

const u0 = e => e > 0 && e < 5 ? 5 : e > 100 || e <= 0 ? 100 : e;

const m0 = u(((e, o) => {
    const n = d0();
    const a = e.values;
    const s = a.length;
    const i = u0(e.showMoreThreshold ?? 100);
    const l = e.onMorePress && s > i;
    const c = r((() => a.slice(0, i).map((t => ({
        testId: gb(e.testId, t),
        text: t,
        closable: !e.readOnly,
        closeIconAriaLabel: n("menuButton.menuItem.closeIcon.default.aria"),
        closeIconTooltip: n("menuButton.menuItem.closeIcon.default.tooltip.label"),
        closableAriaText: n("menuButton.menuItem.delete.aria")
    })))), [ a, i, e.testId, e.readOnly, n ]);
    const d = e.customLabelCount ?? s;
    const u = CH();
    const m = u?.formatNumeric(d) ?? d;
    const p = `${e.label} (${m})`;
    return t(r0, {
        index: e.index,
        className: e.className,
        style: e.style,
        testId: e.testId,
        variant: e.variant,
        readOnly: e.readOnly,
        tabIndex: e.tabIndex,
        onClose: e.onClose,
        onFocus: e.onFocus,
        ref: o,
        value: p,
        ariaLabel: e.ariaLabel,
        ariaDescribedBy: e.ariaDescribedBy,
        onClick: e.onClick,
        includeDropdown: true,
        menuSections: l ? [ {
            items: [ {
                testId: gb(e.testId, "-moreMenuItem"),
                text: n("groupToken.menuItem.moreMenuItem.label"),
                closable: false
            } ]
        }, {
            items: c
        } ] : [ {
            title: s > i ? n("groupToken.menuItem.moreMenuHeading.label", {
                count: i.toString()
            }) : undefined,
            items: c
        } ],
        onItemSelected: ([t]) => {
            const [o, n] = t;
            if (l && o === 0 && n === 0) {
                e.onMorePress?.();
            }
        },
        onCloseItem: e.onCloseItem,
        closeButtonProps: e.closeButtonProps,
        preventScrollOnFocus: e.preventScrollOnFocus
    });
}));

const p0 = i(null);

const f0 = () => l(p0);

const g0 = e => t(p0.Provider, {
    value: e.value
}, e.children);

const h0 = ({maxIndex: e, focusedIndexState: t}) => {
    const o = n();
    const [i, l] = t ?? o;
    const {onBlur: c, onFocus: d} = JI((() => {
        l(undefined);
    }));
    const [u, m] = n(0);
    const p = s(((t, o) => {
        if (o !== undefined && (t >= 0 && t <= e || t === Number.MAX_SAFE_INTEGER)) {
            m(o);
        }
        l(Math.max(0, Math.min(e, t)));
    }), [ e, l ]);
    a((() => {
        if (e < 0) {
            l(undefined);
            m(0);
        } else if (i !== undefined) {
            l(Math.min(e, i));
        }
    }), [ e, i, l ]);
    const f = r((() => ({
        focusTokenIndex: i,
        focusColumnIndex: u,
        onUpdateFocus: p
    })), [ u, i, p ]);
    const g = () => {
        l(undefined);
    };
    return {
        focusedIndex: i,
        tokensContextValue: f,
        onContainerFocus: d,
        onContainerBlur: c,
        onInputFocus: g
    };
};

const b0 = ({focusedIndex: e, tokensLength: t, containerRef: o}) => {
    const [r, s] = n(0);
    const i = k_(t) ?? 0;
    a((() => {
        if (e !== undefined) {
            s(e);
        }
    }), [ e ]);
    a((() => {
        if (e === undefined && t > i) {
            s(t - 1);
        }
    }), [ e, i, t ]);
    a((() => {
        if (!o.current) return;
        if (t > i) {
            o.current.scrollTop = o.current.scrollHeight;
        }
    }), [ t, i, o ]);
    return {
        scrollIndex: r,
        setScrollIndex: s
    };
};

var v0 = "sas_components-Tokenizer-Tokenizer_container";

var y0 = "sas_components-Tokenizer-Tokenizer_wrap";

var x0 = "sas_components-Tokenizer-Tokenizer_children-container";

var S0 = "sas_components-Tokenizer-Tokenizer_separator";

var w0 = "sas_components-Tokenizer-Tokenizer_token";

var C0 = "sas_components-Tokenizer-Tokenizer_busy-state-container";

var E0 = {
    container: v0,
    wrap: y0,
    childrenContainer: x0,
    separator: S0,
    token: w0,
    busyStateContainer: C0
};

const I0 = fb(kt);

const _0 = e => {
    const o = I0();
    const r = CH();
    const {createSetRef: s} = uU();
    const i = c(null);
    const l = c(null);
    const [d, u] = n();
    const [m, p] = n("unfocused");
    const [f, g] = kN((() => {
        const e = g();
        if (!e) return;
        u(e.clientWidth);
    }));
    let h;
    if (e.groupEnabled) {
        const o = {};
        const n = e.groupingThreshold && e.groupingThreshold > 1 ? e.groupingThreshold : 20;
        const a = {};
        const i = [];
        for (const t of e.tokens) {
            const {groupId: e = ""} = t;
            if (!a[e]) {
                a[e] = {
                    groupTokenCount: 1
                };
            } else {
                a[e].groupTokenCount++;
            }
        }
        e.tokens.forEach(((e, t) => {
            const {groupId: r = ""} = e;
            const s = a[r].groupTokenCount;
            if (s >= n) {
                if (!o[r]) {
                    o[r] = [];
                }
                o[r].push({
                    token: e,
                    originalIndex: t
                });
                if (!i.includes(r)) {
                    i.push(r);
                }
            } else {
                i.push({
                    token: e,
                    originalIndex: t
                });
            }
        }));
        const l = (t, n) => {
            if (!e.onRemoveTokens) {
                return;
            }
            const a = [];
            let r = t;
            const s = e.hasBreadcrumbs ? i.length : t + 1;
            if (n !== undefined) {
                const e = i[t];
                if (typeof e === "string") {
                    const t = o[e];
                    a.push(t[n].originalIndex);
                } else {
                    a.push(e.originalIndex);
                }
                r = t + 1;
            }
            for (let e = r; e < s; e++) {
                const t = i[e];
                if (typeof t === "object") {
                    a.push(t.originalIndex);
                } else {
                    for (const {originalIndex: e} of o[t]) {
                        a.push(e);
                    }
                }
            }
            e.onRemoveTokens(a);
        };
        h = i.map(((i, c) => {
            let d;
            let u = [];
            if (typeof i === "object") {
                d = i.token.groupId;
                u.push(i);
            } else {
                d = i;
                u = o[d];
            }
            const p = E0.token;
            const f = m !== "focusedMoreThanOnce";
            const g = f && e.ariaLabel ? [ e.ariaLabel ] : [];
            const h = a[d].groupTokenCount;
            if (h < n) {
                const o = u[0].token;
                g.push(o.ariaLabel ?? o.value);
                const n = t(r0, {
                    key: d,
                    testId: gb(e.testId, "token" + `${c}`),
                    ref: s(c),
                    className: p,
                    onClose: () => {
                        e.onCloseToken?.(o);
                        l(c);
                    },
                    value: o.value,
                    icon: o.icon,
                    tooltip: o.tooltip,
                    menuSections: o.menuSections,
                    includeDropdown: !!o.menuSections || o.includeDropdown,
                    onItemSelected: o.onItemSelected,
                    ariaLabel: g.join(", "),
                    ariaDescribedBy: f ? e.ariaDescribedBy : undefined,
                    readOnly: o.readOnly,
                    variant: e.variant,
                    id: o.id,
                    dndPrefix: o.dndPrefix,
                    allowDrag: o.allowDrag,
                    onDidDrop: o.onDidDrop,
                    isPopoverOpen: o.isPopoverOpen,
                    buttonProps: o.buttonProps,
                    closeButtonProps: o.closeButtonProps,
                    index: c,
                    preventScrollOnFocus: !e.wrap
                });
                return o.busyStateIndicatorProps ? t(DN, Ee({
                    delay: 0
                }, o.busyStateIndicatorProps, {
                    key: d,
                    containerClassName: ke(E0.busyStateContainer, o.busyStateIndicatorProps.containerClassName)
                }), n) : n;
            } else {
                const o = e.groupLabelMap?.[d] ?? d;
                const n = e.groupLabelCustomCountMap?.[d] ?? u.length;
                const a = r?.formatNumeric(n) ?? n;
                g.push(`${o} (${a})`);
                return t(m0, {
                    key: d,
                    testId: gb(e.testId, o),
                    ref: s(c),
                    className: p,
                    index: c,
                    onClose: () => {
                        e.onCloseGroup?.(d);
                        l(c);
                    },
                    onCloseItem: t => {
                        e.onCloseToken?.(u[t].token);
                        l(c, t);
                    },
                    label: o,
                    ariaLabel: g.join(", "),
                    ariaDescribedBy: f ? e.ariaDescribedBy : undefined,
                    values: u.map((({token: {value: e}}) => e)),
                    readOnly: u.some((({token: {readOnly: e}}) => e)),
                    variant: e.variant,
                    showMoreThreshold: e.groupTokenShowMoreThreshold,
                    onMorePress: e.onMorePress ? () => {
                        e.onMorePress?.(d);
                    } : undefined,
                    preventScrollOnFocus: !e.wrap,
                    customLabelCount: e.groupLabelCustomCountMap?.[d]
                });
            }
        }));
    } else {
        h = e.tokens.map(((o, n) => {
            const a = m !== "focusedMoreThanOnce";
            const r = t(r0, {
                key: n,
                ref: s(n),
                testId: gb(e.testId, o.value),
                className: E0.token,
                value: o.value,
                icon: o.icon,
                tooltip: o.tooltip,
                menuSections: o.menuSections,
                includeDropdown: !!o.menuSections || o.includeDropdown,
                onItemSelected: o.onItemSelected,
                ariaLabel: a && e.ariaLabel ? [ o.ariaLabel ?? o.value, e.ariaLabel ].join(", ") : o.ariaLabel,
                ariaDescribedBy: a ? e.ariaDescribedBy : undefined,
                readOnly: o.readOnly,
                onClose: () => {
                    e.onCloseToken?.(o);
                    const t = [];
                    const a = e.hasBreadcrumbs ? e.tokens.length : n + 1;
                    for (let e = n; e < a; e++) {
                        t.push(e);
                    }
                    e.onRemoveTokens?.(t);
                },
                variant: e.variant,
                id: o.id,
                dndPrefix: o.dndPrefix,
                allowDrag: o.allowDrag,
                onDidDrop: o.onDidDrop,
                index: n,
                isPopoverOpen: o.isPopoverOpen,
                buttonProps: o.buttonProps,
                closeButtonProps: o.closeButtonProps,
                preventScrollOnFocus: !e.wrap
            });
            return o.busyStateIndicatorProps ? t(DN, Ee({
                delay: 0
            }, o.busyStateIndicatorProps, {
                key: n,
                containerClassName: ke(E0.busyStateContainer, o.busyStateIndicatorProps.containerClassName)
            }), r) : r;
        }));
    }
    const {focusedIndex: b, tokensContextValue: y, onContainerFocus: x, onContainerBlur: S, onInputFocus: w} = h0({
        maxIndex: h.length - 1,
        focusedIndexState: e.focusedIndexState
    });
    const {scrollIndex: C, setScrollIndex: E} = b0({
        focusedIndex: b,
        tokensLength: h.length,
        containerRef: i
    });
    a((() => {
        if (b === undefined) {
            p("unfocused");
        } else {
            p((e => e === "unfocused" ? "focusedOnce" : "focusedMoreThanOnce"));
        }
    }), [ b ]);
    const I = {
        role: e.role === "" ? undefined : e.role ?? "grid",
        "aria-label": e.role === "" ? undefined : e.ariaLabel ?? o("tokenizer.default.aria"),
        "aria-labelledby": e.ariaLabelledBy
    };
    return t("div", Ee({}, !!e.wrap && I, {
        ref: i,
        onBlur: S,
        onFocus: x,
        "data-testid": e.testId,
        className: ke(E0.container, e.wrap && E0.wrap, e.className),
        style: {
            "--token-max-width": d && `${Math.min(D0(25), d)}px`,
            "--tokenizer-max-lines": e.maxLines ?? 3.5,
            ...e.style
        }
    }), t(g0, {
        value: y
    }, e.wrap ? h : t(bX, {
        contentProps: I,
        currentIndex: C,
        setCurrentIndex: E,
        testId: gb(e.testId, "Scroll"),
        separator: e.hasBreadcrumbs ? t(MM, {
            icon: IT,
            className: E0.separator
        }) : null,
        contentRef: f
    }, h)), v.count(e.children) > 0 && t("div", {
        className: E0.childrenContainer,
        ref: l,
        onFocus: w,
        role: "row"
    }, e.children));
};

const D0 = e => e * parseFloat(getComputedStyle(document.documentElement).fontSize);

const L0 = [ "Button", "PredefinedButton", "Checkbox", "Heading", "BadgeButton", "MenuButton", "BaseMenuButton", "ToolbarSeparator", "Select", "SelectWithLabels", "Label", "SegmentedButton", "ToggleButton", "HelpPopup", "Image", "ObjectMarker", "SplitButton", "UndoRedo", "ObjectSwitcher" ];

const T0 = [ "Button", "PredefinedButton", "MenuButton", "BaseMenuButton", "SegmentedButton", "Select", "SelectWithLabels", "HelpPopup", "BadgeButton", "ToggleButton", "Checkbox", "ObjectMarker", "SplitButton", "UndoRedo", "ObjectSwitcher", "FileUploader" ];

var R0 = "sas_components-BadgeButton-BadgeButton_text";

var k0 = "sas_components-BadgeButton-BadgeButton_with-text-icon";

var A0 = "sas_components-BadgeButton-BadgeButton_base-button";

var M0 = "sas_components-BadgeButton-BadgeButton_basic";

var N0 = "sas_components-BadgeButton-BadgeButton_square";

var O0 = {
    text: R0,
    withTextIcon: k0,
    baseButton: A0,
    basic: M0,
    square: N0
};

const P0 = u((function e({badgeDesign: n = "basic", children: a, icon: r, value: s, showZeroValue: i, variant: l, tooltip: c, ariaLabel: d, ...u}, m) {
    const p = s > 999 ? "999+" : s;
    const f = s > 0 || s === 0 && !!i;
    const g = C_();
    let h;
    if (n === "square") {
        h = I_({
            bg: u.disabled ? Jv(g.tokensExperimental["color-secondary"], .32) : g.tokensExperimental["color-secondary"],
            fg: g.tokensExperimental["color-text-neutral-inverse"],
            "border-radius": g.tokensExperimental["size-border-radius-xxs"]
        }, "badge-button");
    }
    const b = {
        ...I_({
            padding: g.tokensExperimental["space-squish-s"]
        }, "badge-button"),
        ...I_({
            "spacing-xs": g.tokensExperimental["space-base-xs"],
            "font-size-m": g.tokensExperimental["font-size-body-text-m"],
            "font-weight-thick": g.tokensExperimental["font-style-weight-700"]
        }, "badge-button-text")
    };
    const v = t("span", {
        className: O0.text,
        dir: "ltr"
    }, p);
    const y = r ? t(MM, Ee({}, r, {
        className: ke($M.iconInner, r.className),
        tooltip: "",
        ariaLabel: ""
    })) : undefined;
    let x;
    if (n === "square") {
        if (f) {
            x = v;
        } else {
            x = y;
        }
    } else {
        x = t(o, null, y, v);
    }
    const S = JA();
    const {tooltip: w = undefined} = r ? S(r) : {};
    const C = c ?? (n === "basic" || !f ? w : undefined);
    const E = c === undefined && n === "basic" && f && r;
    const I = d ?? (C === undefined ? undefined : E ? `${C} (${p})` : C);
    return t(ZM, Ee({
        variant: l ? l : oN.Icon
    }, u, {
        className: ke(O0.baseButton, u.className),
        tooltip: C,
        ariaLabel: I,
        ref: m,
        style: {
            ...h,
            ...b
        }
    }), t("div", {
        className: ke(O0.basic, f && n === "square" && O0.square, v && r && n === "basic" && O0.withTextIcon)
    }, x));
}));

var B0 = "sas_components-Image-Image_scale";

var z0 = "sas_components-Image-Image_fit";

var F0 = "sas_components-Image-Image_fit-height";

var j0 = "sas_components-Image-Image_fit-width";

var V0 = "sas_components-Image-Image_tile";

var H0 = "sas_components-Image-Image_span";

var U0 = "sas_components-Image-Image_img";

var G0 = "sas_components-Image-Image_hidden-img";

var K0 = "sas_components-Image-Image_clickable";

var W0 = {
    scale: B0,
    fit: z0,
    fitHeight: F0,
    fitWidth: j0,
    tile: V0,
    span: H0,
    img: U0,
    hiddenImg: G0,
    clickable: K0
};

const $0 = e => {
    let o = true;
    const n = {};
    const a = [];
    if (e.onClick || e.onPress) {
        a.push(W0.clickable);
    }
    if (e.mode) {
        switch (e.mode) {
          case "fit-height":
            a.push(W0.fitHeight);
            break;

          case "fit-width":
            a.push(W0.fitWidth);
            break;

          case "scale":
          case "tile":
            o = false;
            n.backgroundImage = `url(${e.src})`;

          default:
            a.push(W0[e.mode]);
        }
    }
    const r = {
        src: e.src,
        onLoad: e.onLoad,
        onError: e.onError
    };
    const s = {
        onClick: t => {
            e.onClick?.(t);
            if (e.onPress) {
                t.preventDefault();
                e.onPress();
            }
        },
        style: {
            ...n,
            ...e.style
        },
        title: e.tooltip,
        ["data-testid"]: e.testId,
        tabIndex: e.onPress ? 0 : undefined,
        onKeyPress: t => {
            if (t.key === "Enter" || t.key === " ") {
                t.preventDefault();
                e.onPress?.();
            }
        }
    };
    if (o) {
        return t("img", Ee({}, r, s, {
            alt: e.alt || "",
            className: ke(e.className, a, W0.img)
        }));
    } else {
        return t("span", Ee({}, s, {
            className: ke(e.className, a, W0.span)
        }), t("img", Ee({}, r, {
            className: W0.hiddenImg,
            alt: e.alt || ""
        })));
    }
};

var Y0 = "sas_components-ObjectManager-FloatingPanel-FloatingPanel_container";

var q0 = "sas_components-ObjectManager-FloatingPanel-FloatingPanel_container-closing";

var X0 = {
    container: Y0,
    containerClosing: q0
};

const Z0 = e => {
    const {onOpenComplete: o, onCloseComplete: r} = e;
    const [i, l] = n(null);
    const [{elementAcceptsAnimation: d, closing: u}, m] = n({
        elementAcceptsAnimation: false,
        closing: false
    });
    const p = c(null);
    const f = C_();
    const g = I_({
        sh: f.tokensExperimental["shadow-depth-xl"],
        width: f.tokensExperimental["size-container-l"],
        bg: f.tokensExperimental["color-container-background-0"],
        bd: f.tokensExperimental["color-container-border-4"],
        "anim-dur-enter": f.tokensExperimental["duration-450"],
        "anim-tf-enter": f.tokensExperimental["ease-in"],
        "anim-dur-exit": f.tokensExperimental["duration-400"],
        "anim-tf-exit": f.tokensExperimental["ease-out"]
    }, "floating-panel");
    yO((() => {
        p.current = "blur";
        m((e => ({
            ...e,
            closing: true
        })));
    }), i);
    const h = s((() => {
        m((e => ({
            ...e,
            closing: false
        })));
        r?.({
            closingReason: p.current
        });
    }), [ r ]);
    a((() => {
        if (i) {
            o?.();
        }
    }), [ o, i ]);
    a((() => {
        if (!d && u) {
            h();
        }
    }), [ d, u, h ]);
    return t(gL, {
        isOpen: e.isOpen
    }, t("div", {
        ref: l,
        role: e.role,
        tabIndex: e.tabIndex ?? -1,
        "aria-labelledby": e.ariaLabelledBy ? e.ariaLabelledBy : undefined,
        className: ke(X0.container, u && X0.containerClosing),
        style: g,
        "data-testid": e.testId,
        onAnimationEnd: ({currentTarget: e, target: t}) => {
            if (e === t) {
                if (u) {
                    h();
                } else {
                    m((e => ({
                        ...e,
                        elementAcceptsAnimation: true
                    })));
                }
            }
        },
        onKeyDownCapture: ({key: e}) => {
            if (e === "Escape") {
                p.current = "escape";
                m((e => ({
                    ...e,
                    closing: true
                })));
            }
        }
    }, e.children));
};

const J0 = fb(At);

const Q0 = u((function e(o, n) {
    const a = J0();
    const r = CH();
    const s = r?.formatNumeric(o.numberOfObjects);
    let i = a("objectManager.objectSwitcher.openedItems.button.label");
    if (o.numberOfObjects > 0) i = `${i} (${s})`;
    return t(QM, {
        ref: n,
        text: i,
        testId: o.testId,
        variant: oN.Light,
        focusable: o.focusable,
        disabled: o.disabled ?? o.numberOfObjects === 0,
        onPress: o.onPress,
        theme: (e, {disabled: t}) => {
            if (t) {
                return {
                    "--button-fg": e.tokensExperimental["color-action-text-standard-disabled"],
                    "--button-hover-fg": e.tokensExperimental["color-action-text-standard-disabled"],
                    "--button-active-fg": e.tokensExperimental["color-action-text-standard-disabled"]
                };
            }
            return {
                "--button-fg": e.tokensExperimental["color-text-primary"],
                "--button-hover-fg": e.tokensExperimental["color-text-primary"],
                "--button-active-fg": e.tokensExperimental["color-text-primary"]
            };
        }
    });
}));

const e1 = "*";

var t1 = "sas_components-ObjectManager-ObjectSwitcherPanel-ObjectSwitcherPanel_container";

var o1 = "sas_components-ObjectManager-ObjectSwitcherPanel-ObjectSwitcherPanel_heading";

var n1 = "sas_components-ObjectManager-ObjectSwitcherPanel-ObjectSwitcherPanel_list";

var a1 = "sas_components-ObjectManager-ObjectSwitcherPanel-ObjectSwitcherPanel_divider";

var r1 = "sas_components-ObjectManager-ObjectSwitcherPanel-ObjectSwitcherPanel_button-container";

var s1 = {
    container: t1,
    heading: o1,
    list: n1,
    divider: a1,
    buttonContainer: r1
};

const i1 = fb(At);

const l1 = "object-switcher-panel-header";

const c1 = u((function e(o, n) {
    const a = i1();
    const r = d1(o.sections);
    const s = u1(r);
    const {focusLocation: i, onKeyDown: l} = Nz({
        sections: r,
        isOpen: true,
        defaultFocusLocation: r.length > 0 ? s[0] : undefined
    });
    const c = C_();
    const d = I_({
        "spacing-l": c.tokensExperimental["space-base-l"],
        "spacing-m": c.tokensExperimental["space-base-m"],
        "spacing-xl": c.tokensExperimental["space-base-xl"],
        "font-weight-thick": c.tokensExperimental["font-style-weight-700"]
    }, "object-switcher-panel");
    return t("div", {
        ref: n,
        className: s1.container,
        style: d
    }, t(oO, {
        id: l1,
        level: 3,
        className: s1.heading
    }, a("objectManager.objectSwitcher.panel.openedItems.title")), t(RB, {
        firstItemRef: o.firstItemRef,
        tabIndex: -1,
        className: s1.list,
        onKeyDown: l,
        sections: r,
        focusLocation: i,
        disabled: false,
        onItemSelected: e => {
            o.onObjectChange?.({
                item: m1(o.sections, e)
            });
        },
        onItemClosed: e => {
            o.onObjectClose?.({
                item: m1(o.sections, e)
            });
        },
        showFocus: o.showFocus ?? true
    }), t(Iz, {
        className: s1.divider
    }), t("div", {
        className: s1.buttonContainer
    }, t(QM, {
        text: a("objectManager.objectSwitcher.panel.closeAllItems.button.label"),
        variant: oN.Light,
        onPress: o.onObjectCloseAll
    })));
}));

const d1 = e => {
    const t = [];
    const o = (e, t) => t ? `${e1}${e}` : e;
    const n = e => {
        const t = (e, n) => {
            let a = [];
            for (const r of e) {
                a.push({
                    ...r,
                    text: o(r.text, r.isDirty),
                    indentation: n
                });
                if (Array.isArray(r.items)) {
                    a = a.concat(t(r.items, n + 1));
                }
            }
            return a;
        };
        return t(e, 1);
    };
    for (const {items: a, title: r} of e) {
        let e = [];
        for (const t of a) {
            e.push({
                ...t,
                text: o(t.text, t.isDirty)
            });
            if (a) {
                e = e.concat(n(t.items ?? []));
            }
        }
        t.push({
            title: r,
            items: e.map((e => ({
                closable: true,
                ...e
            })))
        });
    }
    return t;
};

const u1 = e => {
    for (let t = 0; t < e.length; t++) {
        const o = e[t].items;
        for (let e = 0; e < o.length; e++) {
            if (o[e].checked) {
                return [ [ t, e ] ];
            }
        }
    }
    return [ [ 0, 0 ] ];
};

const m1 = (e, t) => {
    const o = (e, t) => {
        const o = t => {
            for (const n of t) {
                if (n.key === e) return n;
                if (n.items) {
                    const e = o(n.items);
                    if (e) return e;
                }
            }
            return null;
        };
        for (const e of t) {
            const t = o(e.items);
            if (t) return t;
        }
    };
    const n = d1(e);
    const [a, r] = t[0];
    const s = n[a].items[r];
    return o(s.key, e);
};

const p1 = u((function e({testId: r, isOpen: i, disabled: l, onPress: d, onDismiss: u, sections: m, panelProps: p, focusable: f}, g) {
    const h = c(null);
    const b = c(null);
    const v = c(null);
    const [y, x] = n(false);
    const [S, w] = n(0);
    const C = YI();
    const E = s((() => {
        const e = h.current?.parentElement;
        e?.focus();
        setTimeout((() => {
            if (!C.current) return;
            w(-1);
            x(true);
            b.current?.focus();
        }), 500);
    }), [ C ]);
    const I = s((({closingReason: e}) => {
        u();
        if (e === "escape") {
            setTimeout((() => {
                if (!C.current) return;
                v.current?.focus();
            }), 0);
        }
    }), [ u, C ]);
    const _ = s((() => {
        p.onObjectCloseAll?.({
            isDirty: g1(m)
        });
    }), [ p, m ]);
    a((() => {
        if (i) {
            x(false);
            w(0);
        }
    }), [ i ]);
    return t(o, null, t(Q0, {
        testId: gb(r, "launchButton"),
        ref: e => {
            D_(g, e);
            D_(v, e);
        },
        focusable: f,
        disabled: l,
        numberOfObjects: f1(m),
        onPress: d
    }), i ? t(Z0, {
        isOpen: i,
        testId: gb(r, "floatingPanel"),
        role: "dialog",
        tabIndex: S,
        ariaLabelledBy: l1,
        onCloseComplete: I,
        onOpenComplete: E
    }, t(c1, {
        testId: gb(r, "objectSwitcherPanel"),
        ref: h,
        showFocus: y,
        firstItemRef: b,
        sections: m,
        onObjectChange: p.onObjectChange,
        onObjectClose: p.onObjectClose,
        onObjectCloseAll: _
    })) : null);
}));

const f1 = e => {
    const t = e => e.reduce(((e, {items: o}) => e + t(o || [])), e.length);
    return e.reduce(((e, {items: o}) => e + t(o)), 0);
};

const g1 = e => {
    const t = e => e.some((({isDirty: e, items: o}) => e ? true : o && t(o)));
    return e.some((({items: e}) => t(e)));
};

const h1 = (e, t) => {
    switch (e) {
      case "Higher":
        return {
            icon: wL,
            labelText: t("predefined.higher.label")
        };

      case "Lower":
        return {
            icon: IL,
            labelText: t("predefined.lower.label")
        };

      case "SignificantlyHigher":
        return {
            icon: LL,
            labelText: t("predefined.significantlyHigher.label")
        };

      case "SignificantlyLower":
        return {
            icon: TL,
            labelText: t("predefined.significantlyLower.label")
        };

      case "Canceled":
        return {
            icon: Fk,
            labelText: t("predefined.canceled.label")
        };

      case "Clustered":
        return {
            icon: jk,
            labelText: t("predefined.clustered.label")
        };

      case "Completed":
        return {
            icon: Vk,
            labelText: t("predefined.completed.label")
        };

      case "CompletedWithWarnings":
        return {
            icon: Hk,
            labelText: t("predefined.completedWithWarnings.label")
        };

      case "Debug":
        return {
            icon: Kk,
            labelText: t("predefined.debug.label")
        };

      case "Embedded":
        return {
            icon: $k,
            labelText: t("predefined.embedded.label")
        };

      case "Error":
        return {
            icon: Yk,
            labelText: t("predefined.error.label")
        };

      case "Flagged":
        return {
            icon: qk,
            labelText: t("predefined.flagged.label")
        };

      case "Important":
        return {
            icon: Jk,
            labelText: t("predefined.important.label")
        };

      case "IncompleteProgress":
        return {
            icon: Qk,
            labelText: t("predefined.incompleteProgress.label")
        };

      case "Incomplete":
        return {
            icon: eA,
            labelText: t("predefined.incomplete.label")
        };

      case "Information":
        return {
            icon: oA,
            labelText: t("predefined.information.label")
        };

      case "Invalid":
        return {
            icon: nA,
            labelText: t("predefined.invalid.label")
        };

      case "Locked":
        return {
            icon: aA,
            labelText: t("predefined.locked.label")
        };

      case "Low":
        return {
            icon: rA,
            labelText: t("predefined.low.label")
        };

      case "Medium":
        return {
            icon: sA,
            labelText: t("predefined.medium.label")
        };

      case "Neutral":
        return {
            icon: lA,
            labelText: t("predefined.neutral.label")
        };

      case "New":
        return {
            icon: cA,
            labelText: t("predefined.new.label")
        };

      case "OnDemand":
        return {
            icon: dA,
            labelText: t("predefined.onDemand.label")
        };

      case "Paused":
        return {
            icon: mA,
            labelText: t("predefined.paused.label")
        };

      case "InProgress":
        return {
            icon: pA,
            labelText: t("predefined.inProgress.label")
        };

      case "Reverted":
        return {
            icon: hA,
            labelText: t("predefined.reverted.label")
        };

      case "InReview":
        return {
            icon: bA,
            labelText: t("predefined.inReview.label")
        };

      case "Scheduled":
        return {
            icon: vA,
            labelText: t("predefined.scheduled.label")
        };

      case "NegativeSentimentalLevel":
        return {
            icon: ZR,
            labelText: t("predefined.negativeSentimentalLevel.label")
        };

      case "NeutralSentimentalLevel":
        return {
            icon: JR,
            labelText: t("predefined.neutralSentimentalLevel.label")
        };

      case "PositiveSentimentalLevel":
        return {
            icon: QR,
            labelText: t("predefined.positiveSentimentalLevel.label")
        };

      case "Stopped":
        return {
            icon: yA,
            labelText: t("predefined.stopped.label")
        };

      case "Stopping":
        return {
            icon: xA,
            labelText: t("predefined.stopping.label")
        };

      case "Submitted":
        return {
            icon: SA,
            labelText: t("predefined.submitted.label")
        };

      case "Warning":
        return {
            icon: CA,
            labelText: t("predefined.warning.label")
        };

      case "AnimatedInProgress":
        return {
            icon: zk,
            labelText: t("predefined.animatedInProgress.label")
        };

      case "OutOfSync":
        return {
            icon: uA,
            labelText: t("predefined.outOfSync.label")
        };

      case "ConditionalGrant":
        return {
            icon: Uk,
            labelText: t("predefined.conditionalGrant.label")
        };

      case "Visible":
        return {
            icon: wA,
            labelText: t("predefined.visible.label")
        };

      case "Hidden":
        return {
            icon: Xk,
            labelText: t("predefined.hidden.label")
        };

      case "Merged":
        return {
            icon: iA,
            labelText: t("predefined.merged.label")
        };

      case "Favorite":
        return {
            icon: MT,
            labelText: t("predefined.favorite.label")
        };

      case "Shortcut":
        return {
            icon: tk,
            labelText: t("predefined.shortcut.label")
        };

      case "TrendDownStatus":
        return {
            icon: TA,
            labelText: t("predefined.trendDown.label")
        };

      case "TrendNoChangeStatus":
        return {
            icon: RA,
            labelText: t("predefined.trendNoChange.label")
        };

      case "TrendUpStatus":
        return {
            icon: kA,
            labelText: t("predefined.trendUp.label")
        };

      case "Accessible":
        return {
            icon: Pk,
            labelText: t("predefined.accessible.label")
        };

      case "AccessibleWarning":
        return {
            icon: Bk,
            labelText: t("predefined.accessibleWarning.label")
        };

      case "Conditional":
        return {
            icon: Gk,
            labelText: t("predefined.conditional.label")
        };

      case "DebuggerChangeIndicator":
        return {
            icon: IA,
            labelText: t("predefined.debuggerChangeIndicator.label")
        };

      case "Disconnected":
        return {
            icon: Wk,
            labelText: t("predefined.disconnected.label")
        };

      case "IncompleteWarning":
        return {
            icon: tA,
            labelText: t("predefined.incompleteWarning.label")
        };

      case "InsightFound":
        return {
            icon: _A,
            labelText: t("predefined.insightFound.label")
        };

      case "Insight":
        return {
            icon: DA,
            labelText: t("predefined.insight.label")
        };

      case "ReadOnly":
        return {
            icon: fA,
            labelText: t("predefined.readOnly.label")
        };

      case "Required":
        return {
            icon: gA,
            labelText: t("predefined.required.label")
        };

      case "Historical":
        return {
            icon: Zk,
            labelText: t("predefined.historical.label")
        };
    }
};

var b1 = "sas_components-ObjectMarker-ObjectMarker_object-marker";

var v1 = "sas_components-ObjectMarker-ObjectMarker_object-marker-link";

var y1 = "sas_components-ObjectMarker-ObjectMarker_disabled";

var x1 = "sas_components-ObjectMarker-ObjectMarker_icon";

var S1 = "sas_components-ObjectMarker-ObjectMarker_animatedInProgress";

var w1 = {
    objectMarker: b1,
    objectMarkerLink: v1,
    disabled: y1,
    icon: x1,
    animatedInProgress: S1
};

const C1 = MA("ObjectMarker");

const E1 = fb(Mt);

const I1 = u((function e({variant: a = "", disabled: r = false, focusable: s = true, hideIcon: i = false, hideLabel: l = false, ...d}, u) {
    const m = c(null);
    const p = c(null);
    const [f, h] = n(false);
    const b = E1();
    const {labelText: v, icon: y} = h1(d.type, b);
    const x = !qI(d.text);
    const S = d.text ?? v;
    const w = !!(d.popperText || d.popoverProps) && !l;
    const C = C_();
    const E = {
        ...I_({
            xxs: C.tokensExperimental["space-base-xxs"],
            xs: C.tokensExperimental["space-base-xs"]
        }, "object-marker-spacing")
    };
    const [I, _] = C1(2);
    g(d.popperRef, (() => ({
        setPopperIsOpen: e => {
            h(e);
        }
    })));
    let D = null;
    if (!l) {
        D = w ? t(AJ, {
            id: _,
            tabIndex: -1,
            wrapText: false,
            disabled: r
        }, S) : t(jP, {
            id: _,
            disabled: r,
            wrapText: false
        }, S);
    }
    let L = "";
    {
        if (!qI(d.iconTooltip)) L = d.iconTooltip; else if (x || l) L = v;
    }
    let T;
    {
        if (!qI(d.iconAriaLabel)) T = d.iconAriaLabel; else if (L !== "") T = undefined; else T = v;
    }
    const R = [];
    if (!i && (L === "" && x || L !== "" || !qI(d.iconAriaLabel))) R.push(I);
    if (!l) R.push(_);
    if (d.ariaLabelledBy) R.push(d.ariaLabelledBy);
    const k = R.join(" ");
    let A = true;
    {
        if (d.iconAriaHidden === false) A = false; else if (d.iconTooltip === "" && T === "") A = true; else if (!qI(d.text) || !qI(d.iconAriaLabel) || !qI(d.iconTooltip)) A = false; else if (!w && l) A = false;
    }
    return t(o, null, w ? t(QM, {
        id: d.id,
        variant: oN.Light,
        tokens: () => ({
            bg: "transparent",
            filter: "none"
        }),
        style: {
            textDecoration: "underline",
            border: 0,
            padding: 0,
            ...E,
            ...d.style
        },
        theme: () => {
            if (C.themeVariant === "high-contrast" && !r) {
                return {
                    "--button-spacing-xs": "0",
                    "--button-active-fg": C.tokensExperimental["color-neutral"]
                };
            } else {
                return {
                    "--button-spacing-xs": "0"
                };
            }
        },
        ref: e => {
            p.current = e;
            D_(u, e);
        },
        ariaLabel: d.ariaLabel,
        ariaLabelledBy: d.ariaLabelledBy,
        ariaDescribedBy: d.ariaDescribedBy,
        "aria-disabled": r,
        className: ke(w1.objectMarker, w && w1.objectMarkerLink, r && w1.disabled, d.className),
        onPress: () => {
            h(true);
        },
        focusable: s,
        disabled: r,
        testId: d.testId,
        text: !l ? S : undefined,
        icon: !i && y ? {
            id: I,
            className: ke(d.type === "AnimatedInProgress" ? w1.animatedInProgress : null, w1.icon),
            style: {
                marginInlineEnd: 2,
                ["--icon-neutral-override-fg"]: C.themeVariant === "high-contrast" && !r ? C.tokensExperimental["color-status-icon-neutral"] : null,
                ["--icon-alert-override-fg"]: C.themeVariant === "high-contrast" && !r ? C.tokensExperimental["color-status-icon-alert"] : null,
                ["--icon-warning-override-fg"]: C.themeVariant === "high-contrast" && !r ? C.tokensExperimental["color-status-icon-warning"] : null,
                ["--icon-success-override-fg"]: C.themeVariant === "high-contrast" && !r ? C.tokensExperimental["color-status-icon-success"] : null,
                ["--icon-information-override-fg"]: C.themeVariant === "high-contrast" && !r ? C.tokensExperimental["color-status-icon-info"] : null
            },
            icon: y,
            tokens: () => {
                if (d.type === "Higher" || d.type === "Lower" || d.type === "SignificantlyHigher" || d.type === "SignificantlyLower" || d.type === "NegativeSentimentalLevel" || d.type === "NeutralSentimentalLevel" || d.type === "PositiveSentimentalLevel" || d.type === "TrendDownStatus" || d.type === "TrendNoChangeStatus" || d.type === "TrendUpStatus") {
                    if (a === "positive" && !r) {
                        return {
                            fg: C.tokensExperimental["color-status-icon-success"]
                        };
                    } else if (a === "negative" && !r) {
                        return {
                            fg: C.tokensExperimental["color-status-icon-alert"]
                        };
                    } else if (a === "flat" && !r) {
                        return {
                            fg: C.tokensExperimental["color-status-icon-warning"]
                        };
                    } else {
                        return {};
                    }
                } else {
                    return {};
                }
            }
        } : undefined
    }) : t(iN, {
        id: d.id,
        spacing: "xxs",
        style: {
            ...E,
            ...d.style
        },
        ref: e => {
            m.current = e;
            D_(u, e);
        },
        "aria-label": d.ariaLabel,
        "aria-labelledby": w ? k : d.ariaLabelledBy,
        "aria-describedby": d.ariaDescribedBy,
        "aria-disabled": r,
        className: ke(w1.objectMarker, w && w1.objectMarkerLink, r && w1.disabled, d.className),
        tabIndex: s ? 0 : -1,
        role: !l && d["data-with-labels"] ? "textbox" : undefined,
        "aria-readonly": !l && d["data-with-labels"] ? true : undefined,
        onClick: e => {
            if (!r && w) {
                e.preventDefault();
                h(true);
            }
        },
        onKeyDown: e => (e.key === "Enter" || e.key === " ") && r === false && w && h(true),
        "data-testid": d.testId
    }, !i && y ? t(MM, {
        id: I,
        className: ke(d.type === "AnimatedInProgress" ? w1.animatedInProgress : null, w1.icon),
        ariaHidden: A,
        ariaLabel: T,
        tooltip: L,
        icon: y,
        disabled: r,
        tokens: () => {
            if (d.type === "Higher" || d.type === "Lower" || d.type === "SignificantlyHigher" || d.type === "SignificantlyLower" || d.type === "NegativeSentimentalLevel" || d.type === "NeutralSentimentalLevel" || d.type === "PositiveSentimentalLevel" || d.type === "TrendDownStatus" || d.type === "TrendNoChangeStatus" || d.type === "TrendUpStatus") {
                if (a === "positive") {
                    return {
                        fg: C.tokensExperimental["color-status-icon-success"]
                    };
                } else if (a === "negative") {
                    return {
                        fg: C.tokensExperimental["color-status-icon-alert"]
                    };
                } else if (a === "flat") {
                    return {
                        fg: C.tokensExperimental["color-status-icon-warning"]
                    };
                } else {
                    return {};
                }
            } else {
                return {};
            }
        }
    }) : null, D), t(zO, Ee({
        isOpen: f,
        referenceElementRef: w ? p : m,
        onClose: () => h(false),
        ariaLabel: b("popover.information.label"),
        focusable: true,
        role: "dialog",
        style: {
            maxWidth: "24rem",
            maxHeight: "50vh"
        },
        children: d.popperText ?? ""
    }, d.popoverProps)));
}));

const _1 = e => typeof e === "string" || "icon" in e ? e : e.text;

const D1 = e => typeof e !== "string" && e.disabled;

var L1 = {
    horizontal: "sas_components-SegmentedButton-SegmentedButton_component-container_horizontal",
    vertical: "sas_components-SegmentedButton-SegmentedButton_component-container_vertical"
};

var T1 = "sas_components-SegmentedButton-SegmentedButton_scroll-container";

var R1 = "sas_components-SegmentedButton-SegmentedButton_content-container";

var k1 = "sas_components-SegmentedButton-SegmentedButton_no-scroll";

var A1 = "sas_components-SegmentedButton-SegmentedButton_button-container";

var M1 = "sas_components-SegmentedButton-SegmentedButton_button";

var N1 = "sas_components-SegmentedButton-SegmentedButton_shrinking-text";

var O1 = "sas_components-SegmentedButton-SegmentedButton_shrinking-icon";

var P1 = "sas_components-SegmentedButton-SegmentedButton_disabled";

var B1 = "sas_components-SegmentedButton-SegmentedButton_selected";

var z1 = "sas_components-SegmentedButton-SegmentedButton_equal-width";

var F1 = {
    componentContainer: L1,
    scrollContainer: T1,
    contentContainer: R1,
    noScroll: k1,
    buttonContainer: A1,
    button: M1,
    shrinkingText: N1,
    shrinkingIcon: O1,
    disabled: P1,
    selected: B1,
    equalWidth: z1
};

const j1 = fb(Nt);

const V1 = Dh("SegmentedButton");

const H1 = ({focusable: e = true, orientation: o = "horizontal", ...r}) => {
    const i = o === "vertical";
    const [l, d] = n(r.selectedIndex ?? 0);
    const [u, m] = n(r.selectedIndex ?? 0);
    const [p, f] = n();
    const [g, h] = n(false);
    const b = c([]);
    const v = C_();
    const y = j1();
    const x = ay();
    const S = JA();
    const w = k_(r.selectedIndex);
    const C = r.scrollable ?? (i ? true : false);
    {
        const e = r.selectedIndex !== w;
        const t = e && (C && u !== r.selectedIndex || l !== r.selectedIndex);
        if (!qI(r.selectedIndex) && t) {
            C && m(r.selectedIndex);
            d(r.selectedIndex);
        }
    }
    a((() => {
        if (!qI(l) && b.current?.includes(document.activeElement)) {
            b.current[l]?.focus();
        }
    }), [ l ]);
    const E = !r.variableWidth && !i;
    const I = c();
    const _ = s((e => {
        if (E && b.current.length > 0) {
            const t = !C && e.clientWidth + 1 < e.scrollWidth;
            h(t);
            if (t && I.current && e.clientWidth > I.current) {
                f(e.clientWidth / r.values.length);
                return;
            }
            if (!t) {
                const t = Math.max(...b.current.map((e => e ? parseInt(window.getComputedStyle(e).width) : 0)));
                I.current = e.clientWidth;
                if (t > 0) {
                    f(Math.min(I.current, t));
                    return;
                }
            }
        }
        f(undefined);
    }), [ E, r.values.length, C ]);
    const [D, L] = kN((({target: e}) => {
        _(e);
    }));
    a((() => {
        const e = L();
        if (!E) {
            f(undefined);
        } else if (!C && p && I.current && e && e.clientWidth < e.scrollWidth) {
            if (e.clientWidth === I.current) {
                f(undefined);
                h(true);
            }
        }
    }), [ L, E, C, p ]);
    a((() => {
        if (E && !g) {
            _(L());
        }
    }), [ E ]);
    function T(e) {
        if (r.deselectable && r.selectedIndex === e) {
            r.onSelectedIndex?.(undefined);
        } else {
            r.onSelectedIndex?.(e);
        }
        C && m(e);
        d(e);
    }
    const R = e => {
        switch (e.key) {
          case "ArrowDown":
            e.preventDefault();

          case x ? "ArrowLeft" : "ArrowRight":
            if (l < r.values.length - 1) e.preventDefault();
            d((e => Math.min(r.values.length - 1, e + 1)));
            break;

          case "ArrowUp":
            e.preventDefault();

          case x ? "ArrowRight" : "ArrowLeft":
            if (l > 0) e.preventDefault();
            d((e => Math.max(0, e - 1)));
            break;

          case "Home":
            if (r.values.length > 0) {
                e.preventDefault();
                d(0);
            }
            break;

          case "End":
            if (r.values.length > 0) {
                e.preventDefault();
                d(r.values.length - 1);
            }
            break;

          default:
            return;
        }
    };
    const k = r.values.map(((o, n) => {
        const a = n === r.selectedIndex;
        const s = _1(o);
        const i = typeof s === "string" ? s : S(s)?.ariaLabel;
        const c = r.disabled || D1(o);
        if (typeof s !== "string" && qI(s.icon) || typeof s === "string" && s.trim() === "") {
            V1.error("A text segment must have a nonempty value and An icon segment must have an icon");
        }
        return t(ZM, {
            key: n,
            testId: gb(r.testId, `button-${n}`),
            className: ke(F1.button, r.buttonClassName),
            style: {
                minWidth: p,
                ...r.buttonStyle?.({
                    index: n,
                    selected: a
                })
            },
            theme: (e, t) => {
                const o = {
                    ...t,
                    disabled: c,
                    selected: a,
                    index: n
                };
                const s = G1(e, o);
                const i = r.buttonTheme?.(e, o);
                return {
                    ...s,
                    ...i
                };
            },
            variant: oN.Standard,
            text: typeof s === "string" ? s : undefined,
            icon: typeof s === "string" ? undefined : s,
            disabled: c,
            focusable: e && n === l,
            onPress: () => T(n),
            onFocus: C ? () => {
                m(n);
            } : undefined,
            "aria-pressed": r.deselectable ? a : undefined,
            ariaLabel: !r.deselectable && a && i ? y("segmented.button.selected.aria", {
                label: i
            }) : undefined,
            ref: e => {
                b.current[n] = e;
                if (n === l) {
                    D_(r.focusedButtonRef, e);
                }
            }
        });
    }));
    const A = {
        role: "toolbar",
        onKeyDown: R,
        "aria-label": r.ariaLabel,
        "aria-labelledby": r.ariaLabelledBy
    };
    return t("div", {
        className: ke(F1.componentContainer[o], E && F1.equalWidth, !C && F1.noScroll),
        style: {
            ...r.style,
            ...U1(v, {
                length: r.values.length
            }),
            ...r.theme?.(v)
        },
        "data-testid": r.testId
    }, C ? t(bX, {
        testId: gb(r.testId, "scrollable"),
        orientation: o,
        className: F1.scrollContainer,
        contentClassName: F1.contentContainer,
        itemClassName: e => ke(F1.buttonContainer, e === r.selectedIndex && F1.selected, (r.disabled || D1(r.values[e])) && F1.disabled),
        contentProps: A,
        contentRef: D,
        suppressScrollOnBlur: true,
        currentIndex: !qI(r.selectedIndex) && w !== r.selectedIndex ? r.selectedIndex : u,
        setCurrentIndex: m
    }, k) : t("ul", Ee({
        className: ke(F1.contentContainer, (!E || g) && (typeof r.values[0] === "string" ? F1.shrinkingText : F1.shrinkingIcon)),
        ref: D
    }, A), k.map(((e, o) => {
        const n = o === r.selectedIndex;
        return t("li", {
            key: o,
            role: "presentation",
            className: ke(F1.buttonContainer, n && F1.selected, (r.disabled || D1(r.values[o])) && F1.disabled),
            style: {
                minWidth: r.buttonStyle?.({
                    index: o,
                    selected: n
                })?.minWidth
            }
        }, e);
    }))), r.enableOverflow ? t(MJ, {
        testId: gb(r.testId, "overflowButton"),
        icon: {
            icon: OR
        },
        tooltip: r.overflowButtonTooltip ?? y("overflow.button.tooltip.label"),
        ariaLabel: r.overflowButtonAriaLabel ?? y("overflow.button.tooltip.label"),
        disabled: r.disabled || r.values.every(D1),
        variant: oN.Icon,
        hideDownArrow: true,
        menuAlign: {
            horizontalAlign: i ? "start" : "end",
            verticalAlign: "end"
        },
        sections: [ {
            selectedIndex: r.selectedIndex ?? undefined,
            items: r.values.map(((e, t) => {
                const o = _1(e);
                return {
                    text: typeof o === "string" ? o : S(o).tooltip ?? "",
                    disabled: D1(e),
                    testId: gb(r.testId, `menuItem-${t}`)
                };
            }))
        } ],
        onItemSelected: e => {
            const t = e[0][1];
            T(t);
        }
    }) : null);
};

const U1 = (e, t) => __({
    "extreme-min-width": t.length === 2 ? "4rem" : "2rem",
    "border-radius": e.tokensExperimental["size-border-radius-xs"]
}, "segmentedbutton");

const G1 = (e, t) => {
    const {disabled: o, selected: n} = t;
    const a = n ? {
        bd: e.tokensExperimental[`color-action-border-secondary-selected${o ? "-disabled" : ""}`],
        bg: e.tokensExperimental[`color-action-background-secondary-selected${o ? "-disabled" : ""}`],
        fg: e.tokensExperimental[`color-action-text-secondary-selected${o ? "-disabled" : ""}`]
    } : !o ? {
        bd: e.tokensExperimental["color-action-border-secondary-normal"]
    } : undefined;
    let r = {};
    if (a) {
        r = {
            ...__(a, "button"),
            ...__(a, "button-hover"),
            ...__(a, "button-active")
        };
    }
    return {
        ...__({
            "focus-outline": n && e.themeVariant === "high-contrast" ? "var(--focus-dark-bg)" : "var(--focus-light-bg)",
            "normal-bd": e.tokensExperimental["color-action-border-secondary-normal"],
            "selected-bd": e.tokensExperimental["color-action-border-secondary-selected"]
        }, "button"),
        ...r,
        ...!e.enableNovaTokens && K1(e, t)
    };
};

const K1 = (e, t) => {
    const {disabled: o, selected: n} = t;
    const a = e.stateSecondary;
    const r = e.stateStandard;
    const s = !n ? undefined : o ? a.disabledSelected : a.selected;
    let i = {};
    let l = {
        bd: a.selected.bd,
        bg: s?.bg,
        fg: s?.fg
    };
    if (e.baseReportThemeName === "snow") {
        l = {
            bd: e.c.n0,
            bg: e.c.n2,
            fg: e.c.black
        };
    }
    if (s) {
        i = {
            ...__(l, "button"),
            ...__(l, "button-hover"),
            ...__(l, "button-active")
        };
    }
    return {
        ...__({
            "normal-bd": a.normal.bd,
            "selected-bd": o ? a.disabledSelected.bd : l.bd,
            "active-filter": o || n ? "none" : r.active.filter
        }, "button"),
        ...i
    };
};

const W1 = u((function e({icon: o, ...n}, a) {
    return t(J1, Ee({}, n, {
        ref: a,
        icon: n.text ? undefined : o
    }));
}));

const $1 = (e, t) => {
    const {disabled: o, pressed: n, isActive: a} = t;
    const r = {
        "--button-focus-outline": (n || a) && e.themeVariant === "high-contrast" ? "var(--focus-dark-bg)" : "var(--focus-light-bg)",
        "--button-active-filter": "none",
        "--button-active-fg": e.tokensExperimental["color-action-text-secondary-selected"],
        "--button-active-bg": e.tokensExperimental["color-action-background-secondary-selected"],
        "--button-active-bd": e.tokensExperimental["color-action-border-secondary-selected"]
    };
    if (n) {
        if (o) {
            return {
                ...r,
                "--button-fg": e.tokensExperimental["color-action-text-secondary-selected-disabled"],
                "--button-bg": e.tokensExperimental["color-action-background-secondary-selected-disabled"],
                "--button-bd": e.tokensExperimental["color-action-border-secondary-selected-disabled"],
                "--button-hover-fg": e.tokensExperimental["color-action-text-secondary-selected-disabled"],
                "--button-hover-bg": e.tokensExperimental["color-action-background-secondary-selected-disabled"],
                "--button-hover-bd": e.tokensExperimental["color-action-border-secondary-selected-disabled"],
                "--button-active-fg": e.tokensExperimental["color-action-text-secondary-selected-disabled"],
                "--button-active-bg": e.tokensExperimental["color-action-background-secondary-selected-disabled"],
                "--button-active-bd": e.tokensExperimental["color-action-border-secondary-selected-disabled"]
            };
        } else {
            return {
                ...r,
                "--button-fg": e.tokensExperimental["color-action-text-secondary-selected"],
                "--button-bg": e.tokensExperimental["color-action-background-secondary-selected"],
                "--button-bd": e.tokensExperimental["color-action-border-secondary-selected"],
                "--button-hover-fg": e.tokensExperimental["color-action-text-secondary-selected"],
                "--button-hover-bg": e.tokensExperimental["color-action-background-secondary-selected"],
                "--button-hover-bd": e.tokensExperimental["color-action-border-secondary-selected"]
            };
        }
    }
    return r;
};

var Y1 = "sas_components-ToggleButton-__internal__-BaseToggleButton_pressed";

var q1 = "sas_components-ToggleButton-__internal__-BaseToggleButton_toggle";

var X1 = "sas_components-ToggleButton-__internal__-BaseToggleButton_disabled";

var Z1 = {
    pressed: Y1,
    toggle: q1,
    disabled: X1
};

const J1 = u((function e({className: o, pressed: a = false, noAriaPressed: r = false, ...s}, i) {
    const [l, c] = n(false);
    const d = [ o, s.disabled && Z1.disabled, a && Z1.pressed, Z1.toggle ];
    return t(ZM, Ee({}, s, {
        "aria-pressed": r ? undefined : a,
        className: ke(d),
        ref: i,
        theme: (e, t) => {
            const o = {
                ...t,
                pressed: a,
                isActive: l
            };
            const n = $1(e, o);
            const r = s.theme?.(e, o);
            return {
                ...n,
                ...r
            };
        },
        variant: s.text === undefined ? oN.Icon : oN.Light,
        onKeyDown: e => {
            if (!s.disabled && (e.key === "Enter" || e.key === " ")) {
                e.preventDefault();
                c(true);
            }
        },
        onKeyUp: e => {
            if (!s.disabled && (e.key === "Enter" || e.key === " ") && l) {
                e.preventDefault();
                c(false);
            }
        }
    }));
}));

function Q1(e = {}) {
    const [t, o] = n(e.initialDimensions);
    const [a] = kN((n => {
        const {ignoreHeight: a, ignoreWidth: r} = e;
        const s = n.target;
        if (s) {
            const e = s.offsetHeight;
            const n = s.offsetWidth;
            const i = window.getComputedStyle(s) || {};
            const l = parseFloat(i.height);
            const c = parseFloat(i.width);
            const d = Math.abs(l - e);
            const u = Math.abs(c - n);
            let m = d > 1 || isNaN(d) ? e : l;
            let p = u > 1 || isNaN(u) ? n : c;
            p -= parseInt(i.paddingLeft, 10) || 0;
            p -= parseInt(i.paddingRight, 10) || 0;
            m -= parseInt(i.paddingTop, 10) || 0;
            m -= parseInt(i.paddingBottom, 10) || 0;
            if (!a && t?.height !== m || !r && t?.width !== p) {
                o({
                    height: m,
                    width: p
                });
            }
        }
    }));
    const r = s((e => {
        const t = e?.parentElement ?? null;
        a(t);
    }), [ a ]);
    return [ r, t ];
}

const e2 = i({});

const t2 = () => l(e2);

const o2 = e => {
    const [o, a] = n({
        tableHasVerticalScrollbar: false
    });
    const r = {
        setListContext: a,
        ...o
    };
    return t(e2.Provider, {
        value: r
    }, e.children);
};

let n2 = function(e) {
    e[e["Data"] = 0] = "Data";
    e[e["ColumnHeader"] = 1] = "ColumnHeader";
    e[e["RowHeader"] = 2] = "RowHeader";
    e[e["ColumnRowHeader"] = 3] = "ColumnRowHeader";
    e[e["ColumnHeaderButton"] = 4] = "ColumnHeaderButton";
    e[e["ZeroStateOverlay"] = 5] = "ZeroStateOverlay";
    return e;
}({});

const a2 = {
    SelectRow: "row/selectRow",
    SelectRows: "row/selectRows",
    PartiallySelectedRows: "row/partiallySelectedRows",
    SelectAll: "row/selectAll",
    FocusCell: "cell/focus",
    ActiveCell: "cell/active",
    PressedCell: "cell/pressed",
    ScrollPosition: "table/scrollPosition",
    ClearMeasurementCache: "table/clearMeasurementCache",
    FocusIndicator: "cell/focusIndicator",
    FrozenColumn: "table/frozenColumnCount",
    ResizeColumn: "column/resizeColumn",
    ClearResizedColumns: "column/clearResizedColumns",
    FreezeColumn: "table/freezeColumn",
    OrderedColumnKeys: "table/orderedColumnKeys"
};

const r2 = {
    TableActionType: a2,
    createSelectRow(e) {
        return rD(a2.SelectRow, e);
    },
    createSelectedRows(e) {
        return rD(a2.SelectRows, e);
    },
    createSelectAll(e) {
        return rD(a2.SelectAll, e);
    },
    createActiveCell(e) {
        return rD(a2.ActiveCell, e);
    },
    createPartiallySelectedRows(e) {
        return rD(a2.PartiallySelectedRows, e);
    },
    createPressedCell(e) {
        return rD(a2.PressedCell, e);
    },
    createFocus(e) {
        return rD(a2.FocusCell, e);
    },
    createScrollPosition(e) {
        return rD(a2.ScrollPosition, e);
    },
    createFocusIndicator(e) {
        return rD(a2.FocusIndicator, e);
    },
    createFrozenColumnCount(e) {
        return rD(a2.FrozenColumn, e);
    },
    createResizeColumn(e) {
        return rD(a2.ResizeColumn, e);
    },
    createClearResizedColumns() {
        return rD(a2.ClearResizedColumns);
    },
    createFreezeColumn(e) {
        return rD(a2.FreezeColumn, e);
    },
    createOrderedColumnKeys(e) {
        return rD(a2.OrderedColumnKeys, e);
    },
    createClearMeasurementCache(e) {
        return rD(a2.ClearMeasurementCache, e);
    }
};

const s2 = (e, t) => {
    switch (t.type) {
      case a2.SelectRow:
        {
            const {rowKey: o, getRowIndex: n, index: a, clearPrevious: r, rangeSelection: s, selectionType: i, selected: l, hideSelectAll: c, columnHeadersVisible: d, areRowsVisible: u, isRowDisabled: m, isRowReadOnly: p, selectionStart: f, interactive: g} = t.payload;
            const h = t.payload.rowCount ?? 0;
            const b = new Set(r === true ? null : e.selectedRows);
            const v = o(a);
            const y = e => typeof e === "string" ? e : o(e);
            const x = e => !!m?.(e) || !!p?.(e);
            const S = (t, o, n) => {
                const a = y(t);
                if (g && m?.(a)) {
                    return {
                        ...e
                    };
                }
                if (!m?.(a) && v !== a) {
                    b.add(a);
                } else {
                    const e = o?.has(a);
                    (e || n) && v !== a && b.add(a);
                }
            };
            const w = (t, o, n) => {
                const a = y(t);
                if (g && x(a)) {
                    return {
                        ...e
                    };
                }
                if (!x(a)) b.add(a); else {
                    const e = o?.has(a);
                    (e || n) && b.add(a);
                }
            };
            const C = e => {
                const t = y(e);
                if (!x(t)) b.delete(t);
            };
            let E;
            if (s) {
                let t = f ?? e.lastSelectedIndex;
                if (t === undefined && e.selectedRows && e.selectedRows.size > 0) {
                    const o = Array.from(e.selectedRows).pop();
                    if (n && o !== undefined) t = n(o);
                }
                const o = a;
                const s = e.rangeSelection;
                E = s && e.firstRangeSelection !== undefined ? e.firstRangeSelection : t;
                if (E !== undefined) {
                    if (r === "selectionRange" && e.lastSelectedIndex !== undefined) {
                        const t = Math.min(E, e.lastSelectedIndex);
                        const o = Math.max(E, e.lastSelectedIndex);
                        for (let e = t; e <= o; e++) {
                            C(e);
                        }
                    }
                    const t = Math.min(E, o);
                    const n = Math.max(E, o);
                    for (let o = t; o <= n; o++) {
                        w(o, e.selectedRows, e.selectAll);
                    }
                }
            } else {
                if (e.selectAll === true && r !== true && h) {
                    for (let t = 0; t < h; t++) {
                        S(t, e.selectedRows, e.selectAll);
                    }
                    C(v);
                } else {
                    !l ? C(v) : w(v, e.selectedRows, e.selectAll);
                    if (i === "cell" && r === true && e.selectedRows && e.selectedRows?.size > 1 || i === "cell" && r === true && e.selectAll === true && h > 1) {
                        w(v, e.selectedRows, e.selectAll);
                    }
                }
            }
            let I = f ?? e.lastSelectedIndex;
            if (I === undefined && e.selectedRows) {
                const t = Array.from(e.selectedRows).pop();
                if (n && t !== undefined) I = n(t);
            }
            const _ = !u ? true : u(b);
            let D;
            if (_ && c !== true && h !== 0 && d !== false && b.size >= h) {
                D = true;
            } else if (b.size > 0) {
                D = "mixed";
            } else {
                D = false;
            }
            return {
                ...e,
                selectedRows: b,
                selectAll: D,
                lastSelectedIndex: a,
                rangeSelection: s,
                selectionMetadata: {
                    key: v,
                    state: l
                },
                lastSelectedRowKey: v,
                lastSelectedRowState: l,
                firstRangeSelection: !e.rangeSelection ? I : e.firstRangeSelection,
                selectionAnchor: E
            };
        }

      case a2.SelectAll:
        const {isRowReadOnly: o, selectAll: n, initialSelectedRows: a} = t.payload;
        let r;
        if (o && n !== true) {
            const t = a ?? e.selectedRows;
            t?.forEach((e => {
                if (o(e)) {
                    if (!r) r = new Set;
                    r?.add(e);
                }
            }));
        }
        return {
            ...e,
            selectedRows: r,
            lastSelectedRowKey: undefined,
            lastSelectedRowState: undefined,
            lastSelectedIndex: undefined,
            selectAll: n,
            selectionMetadata: {}
        };

      case a2.SelectRows:
        {
            const {areRowsVisible: o, selectedRows: n, hideSelectAll: a, columnHeadersVisible: r, rowCount: s, isRowDisabled: i, isRowReadOnly: l, initialSelectedRows: c, interactive: d} = t.payload;
            const u = new Set;
            n?.forEach((t => {
                if ((i?.(t) || l?.(t)) && (e.selectedRows?.has(t) || e.selectAll === true || c?.has(t))) {
                    u.add(t);
                } else if (!i?.(t) || !d) u.add(t);
            }));
            const m = !o || !u ? true : o(u);
            const p = () => {
                if (m && u && a !== true && r !== false && u.size === s && u.size > 0) return true;
                return u && u.size > 0 ? "mixed" : false;
            };
            return {
                ...e,
                selectedRows: new Set(u),
                selectAll: p(),
                selectionMetadata: {}
            };
        }

      case a2.FocusCell:
        return {
            ...e,
            lastFocusedCell: e.initialFocus,
            lastFocusedDataCell: t.payload.focusedCell?.region === n2.Data || t.payload.focusedCell?.region === n2.RowHeader ? t.payload.focusedCell : e.lastFocusedDataCell,
            initialFocus: t.payload.focusedCell,
            activeCell: t.payload.focusedCell
        };

      case a2.ActiveCell:
        return {
            ...e,
            activeCell: t.payload.cell
        };

      case a2.PressedCell:
        return {
            ...e,
            pressedCell: t.payload.cell,
            pressEntireRow: t.payload.pressRow ?? true
        };

      case a2.FocusIndicator:
        {
            return {
                ...e,
                focusIndicator: t.payload.focusIndicator
            };
        }

      case a2.FrozenColumn:
        {
            const {count: o} = t.payload;
            return {
                ...e,
                frozenColumnCount: o
            };
        }

      case a2.ResizeColumn:
        {
            const o = e.resizedColumns ? new Map(e.resizedColumns) : new Map;
            if (t.payload.columnKey && (o.has(t.payload.columnKey) || t.payload.width === undefined)) {
                o.delete(t.payload.columnKey);
            }
            if (t.payload.width !== undefined && t.payload.columnKey) o.set(t.payload.columnKey, t.payload.width);
            return {
                ...e,
                resizedColumns: o
            };
        }

      case a2.ClearResizedColumns:
        {
            return {
                ...e,
                resizedColumns: undefined
            };
        }

      case a2.FreezeColumn:
        {
            const {unfreeze: o, columnKey: n} = t.payload;
            const a = [ ...t.payload.orderedColumnKeys || [] ];
            const r = e.frozenColumnCount || 0;
            const s = a.findIndex((e => e === n));
            if (s > -1) a.splice(s, 1);
            const i = o ? r - 1 : r;
            a.splice(i, 0, n);
            return {
                ...e,
                frozenColumnCount: o ? r - 1 : r + 1,
                orderedColumnKeys: a
            };
        }

      case a2.OrderedColumnKeys:
        {
            const o = e.orderedColumnKeys ?? [];
            const n = o.slice(0, e.frozenColumnCount);
            const a = t.payload.orderedKeys.slice(0, e.frozenColumnCount);
            const r = n.every((e => a.includes(e)));
            const s = r ? e.frozenColumnCount : o.findIndex(((e, t) => a[t] !== e)) || 0;
            const i = t.payload.orderedKeys;
            return {
                ...e,
                frozenColumnCount: s,
                orderedColumnKeys: [ ...i ]
            };
        }

      case a2.ScrollPosition:
        {
            return {
                ...e,
                scrollPosition: t.payload,
                focusIndicator: "visible",
                initialFocus: t.payload.cell
            };
        }

      case a2.ClearMeasurementCache:
        {
            return {
                ...e,
                clearMeasurementsStartingColumnIndex: t.payload.startColumnIndex,
                clearMeasurementsStartingRowIndex: t.payload.startRowIndex
            };
        }

      case a2.PartiallySelectedRows:
        {
            return {
                ...e,
                partiallySelectedRows: t.payload.partiallySelected
            };
        }

      default:
        return e;
    }
};

const i2 = (e, t, o, n, a, r, s, i) => ({
    selectedRows: e,
    selectAll: t || (e && e.size > 0 ? "mixed" : false),
    initialFocus: o,
    rangeSelection: false,
    frozenColumnCount: n,
    orderedColumnKeys: a,
    resizedColumns: r,
    partiallySelectedRows: s,
    scrollPosition: i
});

const l2 = {
    init: i2,
    reduce: s2,
    actions: r2
};

var c2 = "sas_components-ZeroState-ZeroState_zero-state";

var d2 = "sas_components-ZeroState-ZeroState_align-top";

var u2 = "sas_components-ZeroState-ZeroState_heading";

var m2 = "sas_components-ZeroState-ZeroState_text";

var p2 = "sas_components-ZeroState-ZeroState_button-group";

var f2 = {
    zeroState: c2,
    alignTop: d2,
    heading: u2,
    text: m2,
    buttonGroup: p2
};

const g2 = u((function(e, o) {
    const {text: n, heading: a, icon: r, disabled: s, tokens: i, busyStateIndicatorProps: l, theme: c, headingLevel: d, removeRole: u} = e;
    const m = C_();
    const p = {
        ...h2(m, {
            disabled: s,
            tokens: i,
            busyStateActive: l?.active ?? false
        }),
        ...c?.(m)
    };
    return t("div", {
        role: u ? undefined : "group",
        "aria-label": u ? undefined : e.ariaLabel,
        "aria-labelledby": u ? undefined : e.ariaLabelledBy,
        "data-testid": e.testId,
        className: ke(f2.zeroState, e.className, e.alignTop && f2.alignTop),
        style: {
            ...p,
            ...e.style
        }
    }, r ? t(hM, {
        style: {
            order: "1"
        },
        icon: r,
        type: "zerostate",
        testId: gb(e.testId, "icon"),
        disabled: s
    }) : null, a ? t(oO, {
        style: {
            order: "3"
        },
        wrapText: true,
        "aria-hidden": "true",
        level: d ?? 5,
        className: f2.heading,
        testId: gb(e.testId, "heading"),
        disabled: s
    }, a) : null, n ? t(jP, {
        style: {
            order: "4"
        },
        ref: o,
        className: f2.text,
        focusable: true,
        ariaLabel: a ? `${a} ${n}` : undefined,
        testId: gb(e.testId, "text"),
        disabled: s
    }, n) : null, e.actionButtonOneProps ? t(iN, {
        style: {
            order: "5"
        },
        wrap: true,
        spacing: "s",
        className: f2.buttonGroup,
        "data-testid": gb(e.testId, "flow")
    }, e.actionButtonOneProps ? t(QM, Ee({}, e.actionButtonOneProps, {
        disabled: s ?? e.actionButtonOneProps.disabled
    })) : null, e.actionButtonTwoProps ? t(QM, Ee({}, e.actionButtonTwoProps, {
        disabled: s ?? e.actionButtonTwoProps.disabled
    })) : null, e.actionButtonThreeProps ? t(QM, Ee({}, e.actionButtonThreeProps, {
        disabled: s ?? e.actionButtonThreeProps.disabled
    })) : null) : null, l ? t(DN, Ee({
        style: {
            order: "2"
        }
    }, l)) : null);
}));

const h2 = (e, t) => __({
    "mg-s": e.tokensExperimental["space-base-s"],
    "font-weight-thick": e.tokensExperimental["font-style-weight-700"],
    "heading-font-size": t?.tokens?.heading?.fontSize ?? e.tokensExperimental["font-size-heading-text-5"],
    "heading-fg": t?.disabled ? t?.tokens?.heading?.color ?? e.tokensExperimental["color-action-text-standard-disabled"] : t?.tokens?.heading?.color ?? e.tokensExperimental["color-heading-text"],
    "text-font-size": t?.tokens?.text?.fontSize ?? e.tokensExperimental["font-size-body-text-m"],
    "text-fg": t?.disabled ? t?.tokens?.text?.color ?? e.tokensExperimental["color-action-text-standard-disabled"] : t?.tokens?.text?.color ?? e.tokensExperimental["color-body-text"],
    "text-space": t?.busyStateActive ? e.tokensExperimental["space-base-s"] : e.tokensExperimental["space-base-null"]
}, "zero-state");

var b2 = "sas_components-Table-TableZeroState-TableZeroState_container";

var v2 = "sas_components-Table-TableZeroState-TableZeroState_show-header-divider";

var y2 = "sas_components-Table-TableZeroState-TableZeroState_content";

var x2 = "sas_components-Table-TableZeroState-TableZeroState_text-only";

var S2 = {
    container: b2,
    showHeaderDivider: v2,
    content: y2,
    textOnly: x2
};

const w2 = e => {
    const o = NA("Table");
    const n = e.headerHeight > 0;
    const a = n ? e.headerHeight - 1 : e.headerHeight;
    const r = n && e.columnHeadersVisible !== false ? 12 : 0;
    const s = e.testId ? gb(e.testId, "div") : undefined;
    const i = e.testId ? gb(e.testId, "button") : undefined;
    let l = t(g2, {
        text: o("noItems.msg"),
        testId: e.testId,
        disabled: e.disabled
    });
    if (e.customProps && e.variant === "noData") {
        l = t(g2, Ee({}, e.customProps, {
            testId: e.testId,
            disabled: e.disabled
        }));
    } else if (e.customNoColumnProps && e.variant !== "noData") {
        if (typeof e.customNoColumnProps === "string") {
            l = t(g2, {
                text: e.customNoColumnProps,
                testId: e.testId,
                disabled: e.disabled,
                actionButtonOneProps: {
                    testId: i,
                    text: o("manageColumns.button.label"),
                    onPress: e.onManageColumns
                }
            });
        } else l = t(g2, Ee({}, e.customNoColumnProps, {
            testId: e.testId,
            disabled: e.disabled
        }));
    } else if (e.variant !== "noData") {
        l = t(g2, {
            text: o("allColumnsHidden.msg"),
            testId: e.testId,
            disabled: e.disabled,
            actionButtonOneProps: {
                testId: i,
                text: o("manageColumns.button.label"),
                onPress: e.onManageColumns
            }
        });
    }
    return t("div", {
        "data-testid": s,
        className: ke(S2.container, e.className, n && e.columnHeadersVisible !== false && S2.showHeaderDivider),
        style: {
            width: e.width,
            height: `calc(100% - ${a}px - ${r}px)`,
            marginBlockStart: `${a}px`,
            marginBlockEnd: `${r}px`
        }
    }, t("div", {
        className: ke(S2.content, e.variant === "noData" && S2.textOnly)
    }, l));
};

var C2 = "sas_components-Table-Table_group-header";

var E2 = "sas_components-Table-Table_grid-cell";

var I2 = "sas_components-Table-Table_header-row";

var _2 = "sas_components-Table-Table_table";

var D2 = "sas_components-Table-Table_disabled";

var L2 = "sas_components-Table-Table_grid-cell-content";

var T2 = "sas_components-Table-Table_readOnly";

var R2 = "sas_components-Table-Table_outer-container";

var k2 = "sas_components-Table-Table_hbar";

var A2 = "sas_components-Table-Table_has-border";

var M2 = "sas_components-Table-Table_has-frozen-column";

var N2 = "sas_components-Table-Table_row-group";

var O2 = "sas_components-Table-Table_row";

var P2 = "sas_components-Table-Table_header-section";

var B2 = "sas_components-Table-Table_header-container";

var z2 = "sas_components-Table-Table_header-action-button";

var F2 = "sas_components-Table-Table_fauxcus";

var j2 = "sas_components-Table-Table_showFocus";

var V2 = "sas_components-Table-Table_selection-cell";

var H2 = "sas_components-Table-Table_grid-cell-content-container";

var U2 = "sas_components-Table-Table_last-frozen-column";

var G2 = "sas_components-Table-Table_heading";

var K2 = "sas_components-Table-Table_header-accessory-container";

var W2 = "sas_components-Table-Table_header-accessory";

var $2 = "sas_components-Table-Table_header-accessory-icon";

var Y2 = "sas_components-Table-Table_header-accessory-helpPopup";

var q2 = "sas_components-Table-Table_header-accessory-sort";

var X2 = "sas_components-Table-Table_body-container";

var Z2 = "sas_components-Table-Table_empty-row";

var J2 = "sas_components-Table-Table_ghost";

var Q2 = "sas_components-Table-Table_ghost-bottom";

var e4 = "sas_components-Table-Table_ghost-top";

var t4 = "sas_components-Table-Table_drop-indicator";

var o4 = "sas_components-Table-Table_row-count";

var n4 = "sas_components-Table-Table_grid-cell-no-selection";

var a4 = {
    ltr: "sas_components-Table-Table_direction_ltr",
    rtl: "sas_components-Table-Table_direction_rtl"
};

var r4 = "sas_components-Table-Table_drop-region";

var s4 = "sas_components-Table-Table_disabled-row";

var i4 = "sas_components-Table-Table_row-separator";

var l4 = "sas_components-Table-Table_alternate-row-shading";

var c4 = "sas_components-Table-Table_body-row";

var d4 = "sas_components-Table-Table_hide-state-styles";

var u4 = "sas_components-Table-Table_activate";

var m4 = "sas_components-Table-Table_read-only-row";

var p4 = "sas_components-Table-Table_selection-mode-none";

var f4 = "sas_components-Table-Table_hide-hover-state-styles";

var g4 = "sas_components-Table-Table_selectable-only-by-selection-control";

var h4 = "sas_components-Table-Table_pressed";

var b4 = "sas_components-Table-Table_double-click";

var v4 = "sas_components-Table-Table_hide-pressed-state-styles";

var y4 = "sas_components-Table-Table_hide-selected-state-styles";

var x4 = "sas_components-Table-Table_selection-border-solid-no-bg";

var S4 = "sas_components-Table-Table_selection-border-dashed";

var w4 = "sas_components-Table-Table_selected";

var C4 = "sas_components-Table-Table_cell-selection-border-above";

var E4 = "sas_components-Table-Table_cell-selection-border-below";

var I4 = "sas_components-Table-Table_selection-border-solid";

var _4 = "sas_components-Table-Table_cell-selection-border-prev";

var D4 = "sas_components-Table-Table_cell-selection-border-next";

var L4 = "sas_components-Table-Table_selection-accent";

var T4 = "sas_components-Table-Table_frozen";

var R4 = "sas_components-Table-Table_frozen-resizing";

var k4 = "sas_components-Table-Table_non-frozen-resizing";

var A4 = "sas_components-Table-Table_grid-wrapper";

var M4 = "sas_components-Table-Table_resizeIcon";

var N4 = "sas_components-Table-Table_context-area";

var O4 = "sas_components-Table-Table_resize-column-in-progress-icon";

var P4 = "sas_components-Table-Table_cell-selection-border";

var B4 = "sas_components-Table-Table_grid-cell-content-focuslock";

var z4 = {
    groupHeader: C2,
    gridCell: E2,
    headerRow: I2,
    table: _2,
    disabled: D2,
    gridCellContent: L2,
    readOnly: T2,
    outerContainer: R2,
    hbar: k2,
    hasBorder: A2,
    hasFrozenColumn: M2,
    rowGroup: N2,
    row: O2,
    headerSection: P2,
    headerContainer: B2,
    headerActionButton: z2,
    fauxcus: F2,
    showFocus: j2,
    selectionCell: V2,
    gridCellContentContainer: H2,
    lastFrozenColumn: U2,
    heading: G2,
    headerAccessoryContainer: K2,
    headerAccessory: W2,
    headerAccessoryIcon: $2,
    headerAccessoryHelpPopup: Y2,
    headerAccessorySort: q2,
    bodyContainer: X2,
    emptyRow: Z2,
    ghost: J2,
    ghostBottom: Q2,
    ghostTop: e4,
    dropIndicator: t4,
    rowCount: o4,
    gridCellNoSelection: n4,
    direction: a4,
    dropRegion: r4,
    disabledRow: s4,
    rowSeparator: i4,
    alternateRowShading: l4,
    bodyRow: c4,
    hideStateStyles: d4,
    activate: u4,
    readOnlyRow: m4,
    selectionModeNone: p4,
    hideHoverStateStyles: f4,
    selectableOnlyBySelectionControl: g4,
    pressed: h4,
    doubleClick: b4,
    hidePressedStateStyles: v4,
    hideSelectedStateStyles: y4,
    selectionBorderSolidNoBg: x4,
    selectionBorderDashed: S4,
    selected: w4,
    cellSelectionBorderAbove: C4,
    cellSelectionBorderBelow: E4,
    selectionBorderSolid: I4,
    cellSelectionBorderPrev: _4,
    cellSelectionBorderNext: D4,
    selectionAccent: L4,
    frozen: T4,
    frozenResizing: R4,
    nonFrozenResizing: k4,
    gridWrapper: A4,
    resizeIcon: M4,
    contextArea: N4,
    resizeColumnInProgressIcon: O4,
    cellSelectionBorder: P4,
    gridCellContentFocuslock: B4
};

const F4 = e => {
    const o = e.numberOfRows ?? -1;
    const [a, r] = n(e.children);
    g(e.dragRowRef, (() => ({
        updateContent: e => {
            r(e);
        }
    })), []);
    if (!a) return null;
    const s = o > 1;
    return t(RQ, {
        style: e.style,
        className: z4.ghost
    }, s ? t("div", {
        className: z4.ghostBottom
    }) : null, t("div", {
        className: z4.ghostTop
    }, a), s ? t(P0, {
        className: z4.rowCount,
        value: o,
        badgeDesign: "square"
    }) : null);
};

const j4 = e => {
    let t = {};
    if (e.overrides.table.borderColor) {
        t = {
            bd: e.overrides.table.borderColor,
            "header-bottom-bd": e.overrides.table.borderColor,
            "frozen-column-divider-color": SS(-.2, e.overrides.table.borderColor)
        };
    }
    let o = {};
    if (e.overrides.table.headerLabelColor) {
        o = {
            "header-fg": e.overrides.table.headerLabelColor
        };
    }
    if (e.overrides.table.headerBackground) {
        o = {
            ...o,
            "header-bg": e.overrides.table.headerBackground
        };
    }
    if (e.overrides.table.headerBorderRightColor) {
        o = {
            ...o,
            "header-right-bd": e.overrides.table.headerBorderRightColor
        };
    }
    let n = {};
    if (e.overrides.table.textColor) {
        n = {
            "cell-fg": e.overrides.table.textColor,
            "cell-hover-fg": e.overrides.table.textColor,
            "cell-pressed-fg": e.overrides.table.textColor,
            "cell-selected-fg": e.overrides.table.textColor,
            "cell-selected-inactive-fg": e.overrides.table.textColor
        };
    }
    if (e.overrides.table.rowBackgroundColorOdd) {
        n = {
            ...n,
            "row-bg": e.overrides.table.rowBackgroundColorOdd,
            "row-hover-bg": Jv(e.overrides.table.rowBackgroundColorOdd, .2),
            "row-pressed-bg": e.themeVariant === "high-contrast" ? e.overrides.table.rowBackgroundColorOdd : Jv(e.overrides.table.rowBackgroundColorOdd, .25),
            "row-selected-bg": e.themeVariant === "high-contrast" ? e.overrides.table.rowBackgroundColorOdd : Jv(e.overrides.table.rowBackgroundColorOdd, .25),
            "row-selected-inactive-bg": e.themeVariant === "high-contrast" ? e.overrides.table.rowBackgroundColorOdd : Jv(e.overrides.table.rowBackgroundColorOdd, .2)
        };
    }
    if (e.overrides.table.rowBackgroundColorEven) {
        n = {
            ...n,
            "alternate-row-bg": e.overrides.table.rowBackgroundColorEven
        };
    }
    if (e.overrides.table.cellBorderColor) {
        n = {
            ...n,
            "cell-bd": e.overrides.table.cellBorderColor
        };
    }
    return {
        ...t,
        ...o,
        ...n,
        ...V4(e.overrides.table.textColor, e.overrides.table.rowBackgroundColorOdd)
    };
};

const V4 = (e, t) => {
    if (!e || !t) return {};
    const o = 100;
    const n = 1.6949;
    const a = 2.5;
    let r = {};
    if (!!e) {
        const t = Fe(e).lightness * 100;
        r = {
            "cell-fg": e,
            "cell-hover-fg": Xe((o - t) / o * (10 * n) / 100, e),
            "cell-pressed-fg": Ze((o - t) / o * (4 * a) / 100, e),
            "cell-selected-fg": Ze((o - t) / o * (4 * a) / 100, e),
            "cell-selected-inactive-fg": Ze((o - t) / o * (10 * a) / 100, e)
        };
    }
    let s = {};
    if (!!t) {
        const n = Fe(e).lightness * 100;
        s = {
            "row-bg": t,
            "row-hover-bg": Ze(n / o * (2 * a) / 100, t),
            "row-pressed-bg": Ze(n / o * (4 * a) / 100, t),
            "row-selected-bg": Ze(n / o * (4 * a) / 100, t),
            "row-selected-inactive-bg": Ze(n / o * (2 * a) / 100, t)
        };
    }
    return {
        ...r,
        ...s
    };
};

const H4 = e => {
    const {columns: t, rowCount: o, selectionMode: n, initialFocus: a, onActivate: s} = e;
    const i = r((() => {
        const e = a?.rowIndex ?? 0;
        const r = a?.colIndex ?? 0;
        const s = t[r] && t[r].key;
        const i = q4(n, t.length, o) ? 1 : 0;
        const l = () => {
            if (e < 0 && r < 0) {
                return n2.ColumnHeaderButton;
            } else if (r < i) {
                return e < 0 ? n2.ColumnRowHeader : n2.RowHeader;
            } else if (e < 0) {
                return n2.ColumnHeader;
            }
            return n2.Data;
        };
        const c = l();
        return {
            rowIndex: e,
            colIndex: r,
            region: c,
            columnKey: s,
            column: t[r]
        };
    }), [ n, a, t, o ]);
    const l = r((() => {
        const {region: t, column: o} = i;
        const n = !!(o?.onPress || o?.containsInteractiveContent && !o?.onActivate);
        return e.onActivate && (t === n2.Data || t === n2.RowHeader) && !n;
    }), [ e.onActivate, i ]);
    const {rowIndex: c, colIndex: d, columnKey: u, column: m} = i;
    const p = e => {
        if (l && (!e || e.key === "Enter" && !e.ctrlKey && !e.metaKey)) {
            s?.(c, d, u);
        }
    };
    const f = e => {
        const t = e.target;
        const o = t.matches(`.${z4.gridCellContentContainer}, .${z4.gridCellContent}`);
        const n = !!t.closest(`.${z4.row}`);
        let a = n ? t : null;
        while (a?.hasChildNodes() && a.firstChild instanceof HTMLElement) {
            a = a.firstChild;
        }
        const r = !!a?.closest(`.${z4.gridCellContent}`) || !!a?.closest(`.${z4.selectionCell}`);
        if (m?.containsInteractiveContent || m?.onPress) {
            if (o) {
                s?.(c, d, u, true);
            }
        } else {
            if (n && r) {
                s?.(c, d, u, true);
            }
        }
    };
    return {
        onClick: f,
        onKeyUp: p
    };
};

function U4(e) {
    const t = e.rowIndex;
    const o = {
        item: () => {
            e.begin?.(e.prefix);
            return {
                type: "ROW",
                id: t,
                index: t,
                dndPrefix: e.prefix
            };
        },
        options: {
            dropEffect: "copy"
        },
        collect: e => ({
            isDragging: !!e.isDragging(),
            rowIndex: t
        }),
        end(t) {
            e.end?.();
        },
        canDrag(o) {
            return e.isDraggable ? e.isDraggable(t) : true;
        }
    };
    const n = {
        accept: e.dropTypes ?? "ROW",
        drop(t, o) {
            e.drop?.(t, o);
        },
        collect: e => ({
            isOver: e.isOver,
            isOverCurrent: e.isOver({
                shallow: true
            }),
            item: e.getItem()
        }),
        hover(t, o) {
            if (!u) {
                return;
            }
            e.hover?.(t, o);
        }
    };
    const {useDrag: a, useDrop: r} = nX();
    const [{isDragging: s, rowIndex: i}, l, c] = a({
        type: e.dragType ?? "ROW",
        ...o
    });
    const [{isOverCurrent: d}, u] = r(n);
    return {
        dragRef: l,
        dropRef: u,
        isDragging: s,
        rowIndex: i,
        preview: c,
        isOverCurrent: d
    };
}

const G4 = e => {
    const {selectionMode: t, selectedRows: o, selectAll: n, columnHeadersVisible: a, frozenColumnCount: r, rowCount: s, infoProvider: i, disabled: l, readOnly: c, columnSpan: d, isRowDisabled: u, isRowReadOnly: m, getSelectionCheckboxState: p, getSelectAllCheckboxState: f, getSelectionState: g, hideSelectionControlColumn: h, hideSelectionControl: b, onActivate: v, onDoubleClick: y, doubleClickOnEnter: x, disableOnDoubleClickKeyboardActivation: S, deleteRowAnnouncement: w, orderedColumnKeys: C, selectableOnlyBySelectionControl: E} = e;
    const I = e.columns ?? [];
    const _ = e.localizer ?? NA("Table");
    const D = NA("List");
    const L = q4(t, I.length, s, h);
    const T = L ? 1 : 0;
    const R = e.getRowKey ?? g5.getRowKey;
    const k = e.renderCell ?? g5.renderCell;
    const A = JA();
    const M = I.find((e => e.rowHeaderColumn));
    const N = M ? {
        key: M.key,
        colIndex: C?.length ? C.indexOf(M.key) + T : I.filter((({key: e}) => !!e)).findIndex((e => e.key === M.key)) + T
    } : null;
    const O = e => {
        const t = I[e.colIndex];
        if (t) {
            if (typeof i?.getColumnInfo === "function") {
                const o = i.getColumnInfo({
                    columnIndex: e.colIndex,
                    column: t
                });
                if (o !== null) {
                    return o;
                }
            }
            if (!t.label && t.icon) {
                return A({
                    icon: t.icon
                }).ariaLabel;
            }
            return t.label;
        }
        return null;
    };
    const P = e => {
        const t = I[e.colIndex];
        try {
            if (e.rowIndex > -1 && t) {
                if (typeof t.cellContent === "function") {
                    const o = t.cellContent(e.colIndex, e.rowIndex, t.key);
                    return o;
                }
                const o = k({
                    columnIndex: e.colIndex,
                    rowIndex: e.rowIndex,
                    columnKey: t.key
                });
                return o;
            }
        } catch (e) {
            return null;
        }
        return null;
    };
    const B = (e, t) => {
        const o = I[e.colIndex];
        if (o && typeof i?.getCellInfo === "function") {
            const n = i.getCellInfo({
                columnIndex: e.colIndex,
                rowIndex: e.rowIndex,
                column: o,
                isRowHeader: t
            });
            if (!qI(n)) {
                return n;
            }
        }
        const n = P(e);
        if (!n) return null;
        const a = n;
        let r = null;
        if (typeof n === "string") {
            r = n;
        } else if (a.props["aria-label"]) {
            r = a.props["aria-label"];
        } else if (a && typeof a.props.children === "string") {
            r = a.props.children;
        } else if (a && a.props.children instanceof Array) {
            const e = [];
            for (let t = 0; t < a.props.children.length; t++) {
                if (a.props.children[t] && typeof a.props.children[t] === "string" && a.props.children[t].trim()) {
                    e.push(a.props.children[t]);
                    continue;
                }
                if (a.props.children[t] && typeof a.props.children[t] === "number") {
                    e.push(a.props.children[t].toString());
                    continue;
                }
                if (a.props.children[t] && a.props.children[t].props && a.props.children[t].props.icon) {
                    e.push(A({
                        icon: a.props.children[t].props.icon
                    }).ariaLabel);
                    continue;
                }
                if (a.props.children[t] && a.props.children[t].props && a.props.children[t].props["aria-label"] && a.props.children[t].props["aria-label"].trim()) {
                    e.push(a.props.children[t].description);
                }
            }
            if (e.length > 0) {
                r = e.join(" ");
            }
        }
        return r;
    };
    const z = e => {
        const t = R(e);
        return p?.(t) ?? g?.(t) ?? (n === true || !!o?.has(t));
    };
    const F = e => !!l || !!(e > -1 && !!u?.(R(e)));
    const j = e => !!(e > -1 && !!m?.(R(e)));
    const V = e => t !== "none" && e.rowIndex > -1 && z(e.rowIndex) === true ? _("rowSelected.msg") : z(e.rowIndex) === "mixed" ? _("partiallySelected.msg") : null;
    const H = e => {
        if (a !== false && e.colIndex > (L ? 0 : -1)) {
            const t = O(e);
            if (typeof t === "string") {
                return `${t},`;
            }
        }
        return null;
    };
    const U = e => {
        if (N && N.colIndex !== e.colIndex) {
            const t = G({
                ...e,
                colIndex: N.colIndex
            }, true);
            if (t !== null) {
                return t;
            }
        }
        return null;
    };
    const G = (e, t) => {
        const o = B(e, t);
        return o ?? _("blankCell.msg");
    };
    const K = e => {
        const t = I[e.colIndex];
        const o = e.colIndex < (r ?? 0) + T;
        const n = [];
        const a = I.reduce(((e, t) => t.sortLevel && t.sortLevel > e ? t.sortLevel : e), 0);
        if (qI(t)) {
            return null;
        }
        if (o) {
            n.push(_("frozenColumn.msg"));
        }
        if (t.sortDirection === "ascending") {
            n.push(_("sortedColumnAsc.msg"));
        } else if (t.sortDirection === "descending") {
            n.push(_("sortedColumnDesc.msg"));
        }
        if (t.sortLevel && t.sortLevel > 0 && a > 1) {
            n.push(_("sortedColumnLevel.msg", {
                sortLevel: t.sortLevel.toString(),
                totalSortedColumns: a.toString()
            }));
        }
        if (n.length > 0) {
            return `${n.join(", ")},`;
        }
        return null;
    };
    const W = e => {
        if (e.rowIndex < 0) {
            return _("inHeaderRow.msg");
        }
        if (e.rowIndex >= s) {
            return _("inEmptyRow.msg");
        }
    };
    const $ = (t, o) => {
        if (t.rowIndex < 0 || t.rowIndex >= s) return null;
        const n = e.ariaRoleDescription?.toLowerCase() === "listbox" ? "listbox." : "";
        const a = o === true && !qI(s) ? `${n}rowPositionFull.msg` : "rowPosition.msg";
        return _(a, {
            current: (t.rowIndex + 1).toString(),
            total: s?.toString()
        });
    };
    const Y = (e, t) => {
        const o = t === true ? "columnPositionFull.msg" : "columnPosition.msg";
        const n = I.length;
        return _(o, {
            current: (e.colIndex + 1).toString(),
            total: n.toString()
        });
    };
    const q = (e, t) => {
        if (!t) return null;
        const o = t(e.rowIndex, e.colIndex);
        if (o <= 1) return null;
        return _("columnSpan.msg", {
            columnSpan: o.toString()
        });
    };
    const X = (t, o) => {
        const n = [];
        const a = t.colIndex !== o?.colIndex;
        const r = t.rowIndex !== o?.rowIndex;
        if (r && !e.disableRowChangeNarration) {
            const e = W(t);
            e && n.push(e);
        }
        if (a && e.ariaRoleDescription !== "listbox") {
            n.push(Y(t, qI(o)));
        }
        if (r && !e.disableRowChangeNarration) {
            const e = $(t, true);
            e && n.push(e);
        }
        return n.length > 0 ? `${n.join(", ")},` : null;
    };
    const Z = () => {
        if (I?.length > 0 && s > 0 && !l && !c && t !== "none") {
            if (t === "single" || t === "desktop" || !E) return _("spacebarToSelect.msg");
            if (t === "singleRadio") return _("spacebarOnRadioToSelect.msg");
            return _("spacebarOnCheckboxToSelect.msg");
        }
        return null;
    };
    const J = () => {
        if (w && I?.length > 0 && s > 0) {
            return w;
        }
        return null;
    };
    const Q = (e, t, o) => {
        const n = o ? _("disabled.msg") : "";
        const a = _("columnHeaderButtonPosition.msg");
        return o ? `${a}, ${n}.` : `${a}.`;
    };
    const ee = (o, a) => {
        const r = [];
        const s = F(o.rowIndex);
        const u = j(o.rowIndex);
        const m = o.colIndex !== a?.colIndex;
        const h = R(o.rowIndex);
        const v = p?.(h) ?? g?.(h);
        const y = f?.();
        if (o.rowIndex < 0) {
            r.push(_("inSelectAll.msg"));
        } else {
            if (m) {
                r.push(_("selectionColumn.msg"));
            }
        }
        const x = z(o.rowIndex);
        const S = oe(x, y);
        const w = te(x, v);
        if (l || b?.(h)) {
            if (o.rowIndex < 0) {
                if (S) r.push(S);
            } else {
                if (e.onSaySelectionCell) {
                    const t = o.rowIndex < 0 ? "" : G(o);
                    const n = e.onSaySelectionCell({
                        current: o,
                        previous: a,
                        default: t
                    });
                    if (n) {
                        r.push(`${n},`);
                    }
                }
                const t = q(o, d);
                if (t !== null) {
                    r.push(t);
                }
                if (w) r.push(w);
            }
            l && r.push(_("disabled.msg"));
            const t = ne(o, a);
            if (!qI(t)) r.push(t);
            return r.join(", ");
        }
        if (o.rowIndex < 0) {
            if (typeof i?.getSelectAllInfo === "function") {
                const e = i.getSelectAllInfo();
                if (!qI(e)) {
                    r.push(e);
                }
            }
            if (c && n) {
                if (!qI(S)) r.push(S);
            }
        } else {
            if (typeof i?.getRowSelectionHeaderInfo === "function") {
                const e = i.getRowSelectionHeaderInfo({
                    rowIndex: o.rowIndex,
                    rowKey: R(o.rowIndex)
                });
                if (!qI(e)) {
                    r.push(e);
                }
            }
            const n = R(o.rowIndex);
            const l = p?.(n) ?? g?.(n);
            let m = null;
            if (e.onSaySelectionCell) {
                const t = o.rowIndex < 0 ? "" : G(o);
                m = e.onSaySelectionCell({
                    current: o,
                    previous: a,
                    default: t
                });
            }
            const f = o.rowIndex !== a?.rowIndex || L && a?.colIndex === 0;
            if (f && N) {
                const e = U(o);
                if (e !== null) {
                    r.push(`${e}`);
                }
            }
            const h = m && m.includes(D("groupHeader.aria"));
            if (!h) {
                if (t === "singleRadio") r.push(_("radio.msg")); else r.push(_("checkbox.msg"));
            }
            if (s) {
                if (!qI(w)) r.push(w);
                r.push(_("disabled.msg"));
            } else {
                if (l === "mixed") r.push(_("partiallySelected.msg")); else if (x || l === true) r.push(_("rowSelected.msg"));
            }
            if (!c && u) r.push(_("readOnly.msg"));
            if (m) {
                r.push(m);
            }
            const b = q(o, d);
            if (b !== null) {
                r.push(b);
            }
        }
        const C = ne(o, a);
        if (!qI(C)) r.push(C);
        return r.join(", ");
    };
    const te = (e, t) => e ? t === "mixed" ? _("partiallySelected.msg") : _("rowSelected.msg") : null;
    const oe = (e, t) => e ? t === "mixed" || e === "mixed" ? _("partiallySelected.msg") : _("controlSelected.msg") : null;
    const ne = (t, o) => {
        const n = [];
        const a = t.rowIndex !== o?.rowIndex;
        const r = t.colIndex !== o?.colIndex;
        if (a && !e.disableRowChangeNarration) {
            const e = W(t);
            e && n.push(e);
        }
        if (r) {
            n.push(Y(t, qI(o)));
        }
        if (a && !e.disableRowChangeNarration) {
            const e = $(t, true);
            e && n.push(e);
        }
        return n.length > 0 ? n.join(", ") : null;
    };
    const ae = t => {
        const o = [];
        let n = null;
        if (e.role === "treegrid") {
            const e = _("treeTable.msg");
            if (l) return e; else o.push(e);
        }
        if (l) {
            return null;
        }
        if (c) {
            o.push(`${_("readOnly.msg")}`);
            n = o.join(" ");
            return n;
        }
        const a = e => e.onActivate === undefined;
        const r = I.filter((({containsInteractiveContent: e}) => e));
        if (r.length > 0 && r.some(a)) {
            o.push(_("interact.msg"));
        }
        let s = true;
        let i = true;
        if (y) {
            if (x === true) {
                o.push(_("activateRow.msg"));
                s = false;
                i = false;
            } else if (!S) {
                o.push(_("doubleClickActivate.msg"));
            }
        }
        const d = e => e.onActivate !== undefined;
        if (v && !I.some(d) && s) {
            o.push(_("activateRow.msg"));
        }
        if (I.some(d) && i) {
            o.push(_("defaultCellAction.msg"));
        }
        if (!t) {
            const e = Z();
            e && o.push(e);
        }
        const u = J();
        u && o.push(u);
        if (o.length > 0) {
            n = t ? o.join("\n") : o.join(" ");
        }
        return n;
    };
    const re = (o, n) => {
        if (o.region === n2.ZeroStateOverlay || !I || I.length === 0 || s === 0) {
            return null;
        }
        const a = [];
        let r = null, i;
        if (!n) {
            a.push(`${_("gridDimensions.msg", {
                rows: s.toString(),
                columns: I.length.toString()
            })},`);
        }
        if (o.region === n2.ColumnHeaderButton) {
            a.push(Q(o, n, e.disabled));
        } else {
            const r = d?.(o?.rowIndex, o?.colIndex) ?? 1;
            if (L && o?.colIndex === 0 && r < I.length) {
                a.push(ee(o, n));
            } else {
                const r = o.colIndex !== n?.colIndex;
                const c = o.rowIndex !== n?.rowIndex || L && n?.colIndex === 0;
                const p = o.region === n2.Data && o.rowIndex > -1 && o.rowIndex < s;
                const f = I[o.colIndex];
                const g = R(o.rowIndex);
                const h = l || o.rowIndex > -1 && !!u?.(g);
                const b = o.rowIndex > -1 && !!m?.(g);
                if (r || c && o.rowIndex < 0) {
                    i = H(o);
                    if (i !== null) {
                        a.push(i);
                        if (o.rowIndex < 0) {
                            a.push(`${_("roleHeader.msg")},`);
                        }
                    }
                }
                if (o.rowIndex !== n?.rowIndex && N && p) {
                    i = U(o);
                    if (i !== null) {
                        a.push(`${i},`);
                    }
                }
                if (p) {
                    const t = G(o);
                    if (e.onSayCell) {
                        i = e.onSayCell({
                            current: o,
                            previous: n,
                            default: t
                        });
                    } else {
                        i = t;
                    }
                    if (i !== "") {
                        a.push(`${i},`);
                    }
                }
                if (c && !e.disableRowSelectionNarration) {
                    i = V(o);
                    if (i !== null) {
                        a.push(`${i},`);
                    }
                }
                if (h) {
                    a.push(`${_("disabled.msg")},`);
                } else if (t !== "none" && b) {
                    a.push(`${_("readOnly.msg")},`);
                }
                if (r) {
                    i = K(o);
                    if (i !== null) {
                        a.push(i);
                    }
                }
                i = q(o, d);
                if (i !== null) {
                    a.push(i);
                }
                i = X(o, n);
                if (i !== null) {
                    a.push(i);
                }
                if (o.rowIndex < 0) {
                    if (f?.helpProps) {
                        a.push(_("help.msg"));
                    }
                }
                if (!l && o.region === n2.ColumnHeader && f?.sortable && f?.sortDirection !== "ascending" && f?.sortDirection !== "descending") {
                    a.push(`${_("spaceBarSort.msg")}`);
                }
            }
        }
        if (a.length > 0) {
            r = a.join(" ");
        }
        return r?.replace(/,$/g, ".") ?? null;
    };
    const se = (e, t) => {
        const o = Math.min(e, t);
        const n = Math.max(e, t);
        const a = n - o + 1;
        return _("totalRowsSelected.msg", {
            total: a.toString(),
            firstSelectedIndex: o.toString(),
            lastSelectedIndex: n.toString()
        });
    };
    const ie = (e, t) => {
        const o = Math.min(e, t);
        const n = Math.max(e, t);
        const a = n - o + 1;
        return _("totalRowsAddedToSelection.msg", {
            total: a.toString(),
            firstSelectedIndex: o.toString(),
            lastSelectedIndex: n.toString()
        });
    };
    return {
        createTableNarration: e => ae(e),
        createNarration: (e, t) => re(e, t),
        createTotalSelectionNarration: (e, t) => se(e, t),
        createRangeAddedSelectionNarration: (e, t) => ie(e, t),
        createRowAddedSelectionNarration: e => _("rowAddedToSelection.msg", {
            index: e.toString()
        }),
        createRowRemovedSelectionNarration: e => _("rowRemovedFromSelection.msg", {
            index: e.toString()
        }),
        createSelectedNarration: () => _("rowSelected.msg"),
        createDeselectedNarration: () => _("rowDeselected.msg"),
        getColumnWidthStartNarration: () => _("columnWidthResizeStart.msg"),
        getColumnWidthChangeNarration: e => _("columnWidthResizeChange.msg", {
            width: e
        })
    };
};

function K4(e = false, t = false) {
    const o = C_();
    const n = x_?.();
    const a = r((() => {
        if (!n) {
            return {
                currentTheme: Ib.light,
                inverseTheme: Ib.light
            };
        }
        if (t && !o.overrides.table.headerLabelColor || !t && !o.overrides.table.textColor) {
            return {
                currentTheme: n.currentTheme,
                inverseTheme: n.inverseTheme
            };
        }
        const e = Kv(W4(o, t ? o.overrides.table.headerLabelColor : o.overrides.table.textColor));
        const a = Nv(zv, {
            "color-neutral": (t ? o.overrides.table.headerLabelColor : o.overrides.table.textColor) ?? o.tokensExperimental["color-neutral"],
            "color-text-neutral": (t ? o.overrides.table.headerLabelColor : o.overrides.table.textColor) ?? o.tokensExperimental["color-text-neutral"],
            "color-body-text": (t ? o.overrides.table.headerLabelColor : o.overrides.table.textColor) ?? o.tokensExperimental["color-body-text"],
            "color-heading-text": t && o.overrides.table.headerLabelColor ? o.overrides.table.headerLabelColor : o.tokensExperimental["color-heading-text"]
        });
        const r = {};
        (a.find((e => e.name === n.currentTheme.baseThemeName))?.tokens ?? []).forEach((({name: e, value: t}) => {
            if (e === "font-family-primary" || e === "font-family-secondary") return;
            r[e] = t;
        }));
        return {
            currentTheme: {
                ...n.currentTheme,
                tokensExperimental: {
                    ...n.currentTheme.tokensExperimental,
                    ...r
                },
                colors: {
                    ...n.currentTheme.colors,
                    ...e,
                    colorTextDefault: (t ? o.overrides.table.headerLabelColor : o.overrides.table.textColor) ?? e.colorTextDefault
                }
            },
            inverseTheme: n.inverseTheme
        };
    }), [ n, t, o ]);
    return e ? n : a;
}

const W4 = (e, t) => ({
    baseThemeName: e.themeVariant,
    colors: {
        ...e.c,
        colorNeutral: !!t ? t : e.c.colorNeutral,
        colorStatusNeutral: !!t ? t : e.c.colorNeutral
    },
    tokensExperimental: e.tokensExperimental,
    overrides: {}
});

const $4 = fb(Ot);

const Y4 = (e, t) => {
    const {selectionMode: o, singleSelectionOverrides: n, getRowIdentifier: a} = e;
    if (e.preference?.selectAll === true) return false;
    const r = e.preference?.selectedRows;
    const s = o === "single" || o === "singleRadio";
    const i = n?.allowDeselection;
    return (!s || o === "single" && i !== false || o === "singleRadio" && i) && r?.has(a(t)) ? false : true;
};

const q4 = (e, t, o, n) => {
    if (n === true) return false;
    const a = t === 0 || o === 0;
    return !a && (X4(e) || e === "singleRadio");
};

const X4 = e => e === undefined || e === "multiple" || e === "toggle";

const Z4 = ({column: e, direction: t, ctrlKey: o, isPrimarySortAction: n}) => {
    const a = [ "ascending", "descending" ].includes(e.sortDirection || "");
    const r = e.sortLevel === 1;
    const s = e.sortLevel && e.sortLevel > 1;
    if (a && t === "data") return "remove";
    if (a && o || a && (n && r || !n && s)) return "reverse";
    return n ? "set" : "add";
};

function J4(e, t) {
    const [o, n, a] = e;
    if (t === "high") {
        return a;
    }
    if (t === "low") {
        return o;
    }
    return n;
}

const Q4 = ({readOnly: e, ...i}) => {
    const l = ay();
    const u = YI();
    const p = !i.columns || i.columns.length === 0;
    const f = c(false);
    const h = s((e => {
        f.current = typeof e === "function" ? e(f.current) : e;
    }), []);
    const b = c(true);
    const v = r((() => i.columns?.map((({key: e}) => e)) || []), [ i.columns ]);
    const [y, x] = n();
    const S = r((() => i.columns?.filter((e => !e.hidden && !i.initialHiddenColumns?.includes(e.key))).map((({key: e}) => e)) || []), [ i.columns, i.initialHiddenColumns ]);
    const w = s((() => {
        const e = i.preference?.orderedColumnKeys;
        if (e?.length || !b.current) return e || [];
        if (S?.length) return S;
        return [];
    }), [ S, i.preference?.orderedColumnKeys ]);
    const C = s((e => {
        const t = i.getRowKey;
        return t ? t(e) : g5.getRowKey(e);
    }), [ i.getRowKey ]);
    const E = e => {
        if (i.isRowDisabled) return i.isRowDisabled(e);
        return i.disabledRows?.has(e) || false;
    };
    const I = e => {
        if (i.isRowReadOnly) return i.isRowReadOnly(e);
        return i.readonlyRows?.has(e) || false;
    };
    const [_, D] = Q1();
    const [L, T] = n(false);
    const [R, k] = n(false);
    const [A, M] = n(false);
    const N = c();
    const [O, P] = m(l2.reduce, l2.init(i.preference?.selectedRows, i.preference?.selectAll, i.initialFocus, i.preference?.frozenColumnCount ?? 0, w()));
    const B = i.onFocusIndicator;
    a((() => {
        if (!u.current) return;
        B?.(O.focusIndicator);
    }), [ u, O.focusIndicator, B ]);
    const [z, F] = n(i.initialFocusVisible);
    const j = !i.disabled ? i.selectionMode : "none";
    const V = $4();
    const [H, U] = n();
    const [G, K] = n();
    const [W, $] = n(false);
    const [Y, q] = n(false);
    const X = e => {
        if (!i.disabled) {
            q(e);
        }
    };
    const [Z, J] = n();
    const [Q, ee] = n(0);
    const [te, oe] = n(0);
    const [ne, ae] = n(-1);
    const [re, se] = n({
        position: {
            x: 0,
            y: 0
        }
    });
    const [ie, le] = n();
    const [ce, de] = n({
        isEditing: false
    });
    const ue = c();
    const me = e => {
        ue.current = e;
    };
    const [pe, fe] = n(true);
    const ge = c(null);
    const he = i.tableRef ?? ge;
    const {refs: be, createSetRef: ve} = uU();
    const ye = c(null);
    const xe = i.headerRef ?? ye;
    const Se = i.internalRef ?? c(null);
    const we = c(null);
    const Ce = c(null);
    const Ie = jD(L_.FOCUS_THICKNESS);
    const {density: _e} = YA();
    const De = J4([ f5.lowDenistyRowHeight, f5.rowHeight, f5.highDensityRowHeight ], _e);
    const Le = i.rowHeight;
    const Te = s((e => Le ? Le(e) : De), [ Le, De ]);
    const Re = C_();
    const Ae = {
        ...t5(Re, {
            cellBordersVisible: i.cellBordersVisible,
            ignoreTableOverrideTheme: i.ignoreTableOverrideTheme,
            selectionBorderStyle: i.selectionBorderStyle,
            outerBorderVisible: i.outerBorderVisible,
            focusIndicatorWidth: Ie,
            emptyDropZone: A,
            readOnly: e,
            density: _e
        }),
        ...i.theme?.(Re)
    };
    const Me = i.dndPrefix ?? "table";
    const Ne = c(false);
    const [Oe, Pe] = r((() => {
        const e = i.columns;
        const t = i.preference?.orderedColumnKeys;
        const o = j ?? g5.selectionMode;
        const n = [];
        const a = t?.length || -1;
        if (!Ne.current || a === 0 && !L) T(false);
        const r = w();
        r?.forEach((t => {
            const o = e?.find((e => e.key === t));
            o !== undefined && n.push(o);
        }));
        Se.current?.resetAfterColumnIndex(0, false);
        const s = q4(o, n.length, i.rowCount, i.hideSelectionControlColumn);
        const l = n.map((e => e.key));
        if (!s || n.length === 0) return [ n, l ];
        return [ [ {
            label: "",
            key: "",
            width: f5.selectionControlColumnWidth,
            minimumWidth: f5.selectionControlColumnWidth
        }, ...n ], l ];
    }), [ i.columns, i.preference?.orderedColumnKeys, i.rowCount, i.hideSelectionControlColumn, j, L, Se, w ]);
    const Be = Oe?.find((e => e.onActivate !== undefined));
    const ze = Oe.length === 0 || i.rowCount === 0;
    const Fe = (i.onActivate || Be) && !ze && !i.doubleClickOnEnter ? (t, o, n, a) => {
        const r = C(t);
        const s = Oe[o];
        const l = s && s.containsInteractiveContent && s.onActivate;
        if (!i.disabled && !e && t > -1 && !E?.(r) && !I?.(r) && !ce.isEditing) {
            const e = n ? Mt.getActivateRef(n, r) : undefined;
            if (l && !a) {
                s?.onActivate?.(t, {
                    activateRef: e
                });
            } else {
                i.onActivate?.(t, o, n);
            }
        }
    } : undefined;
    const je = i.onDoubleClick ? t => {
        const o = C(t.rowIndex);
        if (!i.disabled && !e && t.rowIndex > -1 && !E?.(o) && !I?.(o)) {
            i.onDoubleClick?.(t);
            P(l2.actions.createPressedCell({
                cell: O.activeCell,
                pressRow: true
            }));
            setTimeout((() => {
                if (u.current) P(l2.actions.createPressedCell({
                    cell: undefined
                }));
            }), 100);
        }
    } : undefined;
    const Ve = c();
    const He = c();
    const Ue = c();
    const Ge = c();
    const Ke = c([]);
    a((() => {
        if (!u.current || !f.current) return;
        const e = i.preference?.selectAll;
        const t = i.preference?.selectedRows;
        const o = i.preference?.selectionMetadata;
        const n = i.onSelect;
        n?.(t, e, o?.key, o?.state);
        f.current = false;
    }), [ i.preference?.selectedRows, i.preference?.selectAll ]);
    a((() => {
        if (!u.current || !f.current) return;
        const e = i.preference?.frozenColumnCount;
        const t = i.onFrozenColumnCountChange;
        t?.(e || 0);
    }), [ i.preference?.frozenColumnCount ]);
    a((() => {
        if (!u.current || !f.current) return;
        const e = w();
        const t = i.onOrderedColumnsChange;
        t?.(e);
        f.current = false;
    }), [ i.preference?.orderedColumnKeys ]);
    a((() => {
        f.current = false;
    }), []);
    a((() => {
        if (!Ce.current) return;
        Ke.current = TF(Ce.current);
    }), [ ze, i.emptyDataProps, i.emptyColumnProps ]);
    const We = s((() => {
        if (u.current && Ke.current[0]) {
            Ve.current = true;
            P(l2.actions.createFocusIndicator({
                focusIndicator: "unfocused"
            }));
            P(l2.actions.createFocus({
                focusedCell: undefined
            }));
            Ke.current[0].focus();
            Ve.current = false;
        }
    }), [ Ke, u ]);
    const $e = s((() => {
        if (u.current && Ke.current[Ke.current.length - 1]) {
            Ve.current = true;
            P(l2.actions.createFocusIndicator({
                focusIndicator: "unfocused"
            }));
            P(l2.actions.createFocus({
                focusedCell: undefined
            }));
            Ke.current[Ke.current.length - 1].focus();
            Ve.current = false;
        }
    }), [ Ke, u ]);
    a((() => {
        if (u.current && !i.disableAutoFocus && z) {
            const e = document.activeElement && document.activeElement.closest(`.${z4.table}`) !== null;
            !e && he.current?.focus();
            P(l2.actions.createFocusIndicator({
                focusIndicator: "visible"
            }));
        }
    }), [ i.disableAutoFocus, z, u, he ]);
    a((() => {
        const e = i.preference?.selectedRows;
        const t = i.areRowsVisible;
        if (e) {
            const o = !t ? true : t(e);
            const n = i.setSelectAllRows;
            if (o && i.hideSelectAll !== true && i.hideSelectionControlColumn !== true && i.columnHeadersVisible !== false && i.rowCount > 0 && i.selectionMode === "multiple" && e.size >= i.rowCount) {
                n?.({
                    selectAll: true
                });
            }
        }
    }), [ i.preference?.selectedRows, i.areRowsVisible, i.setSelectAllRows, i.rowCount, i.hideSelectAll, i.columnHeadersVisible, i.hideSelectionControlColumn, i.selectionMode, i.disabledRows ]);
    a((() => {
        if (!u.current) return;
        if (i.initialFocus?.region === n2.ZeroStateOverlay && !i.disableAutoFocus) {
            We();
        } else {
            const e = i.initialFocus?.region === n2.Data ? Se.current?._getRowMetadata(i.initialFocus.rowIndex).getCell(i.initialFocus.colIndex)?.displayed : -1;
            const t = i.initialFocus && e > -1 ? {
                ...i.initialFocus,
                colIndex: e
            } : i.initialFocus;
            P(l2.actions.createFocus({
                focusedCell: t
            }));
        }
    }), [ i.initialFocus, We, i.disableAutoFocus, u, Se ]);
    a((() => {
        if (O.initialFocus?.rowIndex !== undefined && O.initialFocus?.rowIndex >= i.rowCount) {
            if (i.rowCount === 0 && O.focusIndicator === "visible") {
                We();
            } else {
                Ye({
                    region: O.initialFocus?.region,
                    colIndex: O.initialFocus?.colIndex,
                    rowIndex: i.rowCount - 1
                });
            }
        }
    }), [ i.rowCount ]);
    const Ye = s((e => {
        if (!u.current) return;
        if (e.region === n2.Data) {
            const t = q4(j, Oe.length, i.rowCount, i.hideSelectionControlColumn) ? 1 : 0;
            if (e.rowIndex >= i.rowCount) e.rowIndex = Math.max(i.rowCount - 1, 0);
            if (e.colIndex >= Oe.length) e.colIndex = Math.max(Oe.length - 1, t);
        }
        const t = i.onFocusChange;
        t?.(e);
        P(l2.actions.createFocus({
            focusedCell: e
        }));
        F(O.focusIndicator === "visible");
    }), [ u, i.onFocusChange, i.rowCount, i.hideSelectionControlColumn, O.focusIndicator, j, Oe.length ]);
    a((() => {
        if (!u.current) return;
        const e = i.preference?.scrollPosition;
        if (!e) return;
        const t = O.lastFocusedCell;
        const o = e?.cell.rowIndex !== t?.rowIndex || e?.cell.colIndex !== t?.colIndex;
        Se.current?.scrollToItem({
            align: e?.align ?? "start",
            rowIndex: e?.cell.rowIndex,
            columnIndex: e?.cell.colIndex
        });
        if (e?.focusToCell) {
            if (!e?.editOnFocus) {
                Ve.current = true;
                he.current?.focus();
                Ve.current = false;
            }
            P(l2.actions.createFocus({
                focusedCell: e?.cell
            }));
            if (o) i.onFocusChange?.(e?.cell);
        }
        if (e?.focusIndicator) {
            P(l2.actions.createFocusIndicator({
                focusIndicator: e?.focusIndicator
            }));
        }
    }), [ i.preference?.scrollPosition, he, u, Se ]);
    const [qe, Xe] = n();
    const [Ze, Je] = n();
    a((() => {
        Xe(i.preference?.clearMeasurementsStartingColumnIndex);
        Je(i.preference?.clearMeasurementsStartingRowIndex);
    }), [ i.clearMeasurementCache, i.preference?.clearMeasurementsStartingColumnIndex, i.preference?.clearMeasurementsStartingRowIndex ]);
    const Qe = s((() => i.expandToFillWidth && D ? D.width : i.width ?? f5.tableWidth), [ i.width, i.expandToFillWidth, D ]);
    const et = r((() => {
        let e = 0;
        let t = e;
        let o = 0;
        const n = Qe();
        const a = new Map;
        let r;
        const s = Se.current;
        const l = s?._getHorizontalRangeRendered();
        const c = l ? l[2] ?? 0 : 0;
        Oe?.slice(c).some((s => {
            let l = i.preference?.resizedColumns?.has(s.key) ? i.preference?.resizedColumns?.get(s.key) : s?.width;
            const c = s.minimumWidth ?? f5.minimumColumnWidth;
            if (l !== undefined) l = Math.max(l, c);
            const d = Oe?.findIndex((e => e.key === s.key));
            const u = i.columnWidth;
            if (l === undefined && u) {
                l = Math.max(u(d, s.key), f5.minimumColumnWidth);
            }
            if (l === undefined) o++; else t += l;
            e += l || f5.columnWidth;
            r = s.key;
            a.set(s.key, l);
            return e >= n;
        }));
        if (e > n) return a;
        const d = n - t;
        const u = o ? Math.max(d / o, f5.columnWidth) : d;
        let m = 0;
        a.forEach(((e, t) => {
            if (e === undefined) {
                a.set(t, u);
                m += u;
            } else {
                m += e;
            }
        }));
        if (i.autoFillLastColumn !== false && r && m < n) {
            const e = a.get(r) || f5.columnWidth;
            a.set(r, n - m + e);
        }
        return a;
    }), [ Oe, i.preference?.resizedColumns, i.columnWidth, i.autoFillLastColumn, Qe, Se ]);
    const tt = () => {
        let e = 0;
        if (!i.columns || i.columns.length === 0) return 0;
        et?.forEach((t => {
            e += t ? t : f5.columnWidth;
        }));
        const t = i.expandToFillWidth && D ? D.width : i.width ?? f5.tableWidth;
        if (e < t) return t - e;
        return 0;
    };
    const ot = H4({
        onActivate: Fe,
        columns: Oe,
        rowCount: i.rowCount,
        selectionMode: j,
        initialFocus: O.initialFocus,
        isList: i.hasOwnProperty("itemColumn") || i.hasOwnProperty("renderItem"),
        hideSelectionControlColumn: i.hideSelectionControlColumn
    });
    const nt = (e, t) => {
        const {colSpan: o, key: n} = Oe[t] ?? {};
        const a = Se.current;
        const r = a?._getRowMetadata(e).getCell(t);
        if (r && r.colSpan > 1) return r.colSpan;
        return typeof o === "function" ? o({
            columnIndex: t,
            rowIndex: e,
            columnKey: n
        }) : o ?? 1;
    };
    const at = i.columnHeadersVisible !== false && !p;
    const rt = G4({
        columns: Oe,
        columnHeadersVisible: at,
        frozenColumnCount: i.preference?.frozenColumnCount ?? 0,
        rowCount: i.rowCount,
        columnSpan: nt,
        selectAll: i.preference?.selectAll,
        selectionMode: j ?? g5.selectionMode,
        selectedRows: i.preference?.selectedRows,
        renderCell: i.renderCell ?? g5.renderCell,
        getRowKey: C,
        infoProvider: i.accessibilityInfo,
        disabled: i.disabled,
        isRowDisabled: E,
        isRowReadOnly: I,
        getSelectionCheckboxState: i.getSelectionCheckboxState,
        getSelectAllCheckboxState: i.getSelectAllCheckboxState,
        getSelectionState: i.getSelectionState,
        readOnly: e,
        role: i.role,
        ariaRoleDescription: i.ariaRoleDescription,
        singleSelectionOverrides: i.singleSelectionOverrides,
        hideSelectionControlColumn: i.hideSelectionControlColumn,
        onActivate: i.onActivate,
        onDoubleClick: i.onDoubleClick,
        doubleClickOnEnter: i.doubleClickOnEnter,
        disableOnDoubleClickKeyboardActivation: i.disableOnDoubleClickKeyboardActivation,
        hideSelectionControl: i.hideSelectionControl,
        deleteRowAnnouncement: i.deleteRowAnnouncement,
        orderedColumnKeys: w(),
        selectableOnlyBySelectionControl: i.selectableOnlyBySelectionControl,
        ...i.narration
    });
    const st = XA({
        mode: "assertive"
    });
    g(i.narratorRef, (() => ({
        announcePosition: () => {
            if (O.initialFocus !== undefined) {
                const e = rt.createNarration(O.initialFocus);
                if (!qI(e)) {
                    st?.notify(e);
                }
            }
        },
        getPositionAnnouncementMessage: () => {
            if (O.initialFocus === undefined) return null;
            return rt.createNarration(O.initialFocus);
        }
    })), [ rt, st, O.initialFocus ]);
    g(i.tableAPIRef, (() => ({
        getColumnIndexForOffset: e => {
            let t = 0;
            const o = i.preference?.frozenColumnCount ?? 0;
            for (let e = 0; e < o; ++e) {
                t = Se.current.getCurrentColumnWidth(e) + t;
            }
            return Se.current?.getColumnIndexForOffset(e + t);
        },
        getRowIndexForOffset(e) {
            return Se.current?.getRowIndexForOffset(e);
        },
        setSelectedRows: e => {
            const t = i.selectionMode === "single" ? new Set([ e?.length > 0 ? e[0] : "" ]) : new Set(e);
            i.setSelectRows?.({
                selectedRows: t,
                disabledRows: i.disabledRows
            });
        },
        setSelectAll: e => {
            i.setSelectAllRows?.({
                selectAll: e
            });
            if (i.preference?.selectedRows?.size ?? 0 > 0) i.setSelectRows?.({
                selectedRows: undefined
            });
        },
        setColumnsVisiblity: e => {
            const {preference: t, setOrderedColumnKeys: o} = i;
            const {orderedColumnKeys: n = []} = t || {};
            let a = [ ...n ];
            e.forEach((e => {
                const {key: t, visible: o, visibleAtIndex: n} = e;
                if (o && !a?.includes(t)) {
                    const e = (n !== undefined ? n : v.indexOf(t)) !== -1 ? n !== undefined ? n : v.indexOf(t) : -1;
                    if (e >= 0) {
                        a.splice(e, 0, t);
                    } else {
                        a.push(t);
                    }
                } else if (!o) {
                    a = a.filter((e => e !== t));
                }
            }));
            o?.({
                orderedKeys: a
            });
        }
    })));
    const it = s(((e, t) => {
        if (!Eo.current) return;
        Eo.current.style.top = `${e}px`;
        Eo.current.style.height = `${t ?? f5.dropIndicatorLineHeight}px`;
        Eo.current.style.display = e > -1 ? "block" : "none";
    }), []);
    g(i.dndRef, (() => ({
        displayDropIndicator: (e, t) => {
            if ((i.rowCount || 0) < 1 && e === -1) {
                k(false);
                M(t ? false : true);
                return;
            }
            if (e === -1) {
                k(false);
                M(false);
                return;
            }
            const o = Math.min((e ?? -1) + 1, i.rowCount + 1);
            const n = Se.current;
            k(true);
            const a = n?._getRowStyle(o - (i.columnHeadersVisible === false ? 1 : 0), 1);
            const r = y || i.dropZoneIndicator;
            const s = a?.top - n?.getScrollTop() - (r === "zone" ? 0 : 5);
            it(s, r === "zone" ? a?.height : f5.dropIndicatorLineHeight);
        },
        hideDropIndicator: () => {
            k(false);
            it(-1);
            M(false);
            N.current?.updateContent();
        }
    })), [ i.rowCount, i.columnHeadersVisible, i.dropZoneIndicator, Se, y, it ]);
    const lt = tt();
    const ct = s(((e, t) => {
        if (lt > 0 && et && t >= et?.size) {
            return lt;
        }
        let o = i.preference?.resizedColumns?.has(e) ? i.preference?.resizedColumns?.get(e) : et.get(e);
        const n = Oe[t]?.minimumWidth ?? f5.minimumColumnWidth;
        if (!qI(o)) {
            return Math.max(o, n);
        }
        o = Oe[t]?.width;
        if (!qI(o)) {
            return Math.max(o, n);
        }
        const a = i.columnWidth;
        if (a) {
            return Math.max(a(t, e), n);
        }
        return Math.max(f5.columnWidth, n);
    }), [ Oe, i.preference?.resizedColumns, i.columnWidth, et, lt ]);
    const dt = s((e => {
        const t = i.preference?.orderedColumnKeys;
        if (!e || !t) return false;
        let o = f5.minimumUnfrozenColumnWidth;
        let n = 0;
        const a = j || "multiple";
        const r = q4(a, Oe.length, i.rowCount, i.hideSelectionControlColumn);
        for (let a = r ? 1 : 0; a < (r ? e + 1 : e); ++a) {
            const e = Oe.find((e => e.key === t[a]));
            o += e ? ct(e?.key, a) || f5.columnWidth : 0;
            n += e?.freezeable === false ? 1 : 0;
        }
        if (r) o += f5.selectionControlColumnWidth;
        if (o >= (i.expandToFillWidth && D ? D.width : i.width ?? f5.tableWidth)) {
            f.current = true;
            const e = i.setFreezeColumnCount;
            e?.({
                count: n || 0
            });
            const t = Se.current;
            t.resetAfterColumnIndex(0);
            return true;
        }
        return false;
    }), [ i.preference?.orderedColumnKeys, i.rowCount, i.hideSelectionControlColumn, i.expandToFillWidth, i.width, i.setFreezeColumnCount, j, Oe, D, ct, Se ]);
    const ut = c(false);
    const mt = c();
    const pt = s((e => {
        if (!u.current) return;
        $(false);
        he.current?.focus({
            preventScroll: true
        });
        ut.current = true;
        P(l2.actions.createFocusIndicator({
            focusIndicator: e ?? H
        }));
        mt.current = undefined;
        K(undefined);
    }), [ H, he, u ]);
    const ft = s(((e, t, o) => {
        !o && e.stopPropagation();
        pt("visible");
        const n = Oe.find((({key: e}) => e === t));
        if (!n || e.isDefaultPrevented()) return;
        le(undefined);
        const a = i.onSort;
        const r = Oe.some((e => e.sortDirection && e.sortDirection !== "data"));
        const s = !n.sortDirection || n.sortDirection === "descending" ? "ascending" : "descending";
        const l = !(e.ctrlKey && n.sortLevel !== 1 && i.allowSecondarySort && r);
        a?.({
            columnKey: t,
            direction: s,
            action: Z4({
                column: n,
                direction: s,
                isPrimarySortAction: l,
                ctrlKey: e.ctrlKey
            })
        });
    }), [ pt, Oe, i.onSort, i.allowSecondarySort ]);
    const gt = s(((e, t) => W && (O.activeCell?.rowIndex === -1 || !i.showContextForRow) ? re.cell?.row === e && re.cell?.column === t : false), [ W, re.cell, i.showContextForRow, O.activeCell ]);
    const ht = s((e => {
        const t = [];
        if (W && i.showContextForRow === true && re.cell?.row === e) {
            t.push(z4.cellSelectionBorder);
        }
        return t;
    }), [ W, re.cell, i.showContextForRow ]);
    const bt = (e, t) => {
        mt.current = t;
        if (e?.updateContextMenuItems && t) {
            e?.updateContextMenuItems(t).then((e => {
                if (mt.current === t) K(e);
            }));
        }
        K(e);
    };
    const vt = s((e => {
        const t = e.columns.reduce(((e, t) => {
            if (t.sortDirection === "ascending" || t.sortDirection === "descending") {
                return e + 1;
            }
            return e;
        }), 0);
        const o = e.column.sortDirection === "ascending" || e.column.sortDirection === "descending";
        if (e.allowSecondarySort && t > 0 && !o) {
            return e.direction === "ascending" ? V("sort.addToSortingAscending.label") : V("sort.addToSortingDescending.label");
        }
        if (e.allowSecondarySort && t > 1 && o) {
            return e.direction === "ascending" ? V("sort.addToSortingAscendingSortOrder.label", {
                sortLevel: e.column.sortLevel?.toString(),
                totalSortedColumns: t.toString()
            }) : V("sort.addToSortingDescendingSortOrder.label", {
                sortLevel: e.column.sortLevel?.toString(),
                totalSortedColumns: t.toString()
            });
        }
        return e.direction === "ascending" ? V("sort.ascending.label") : V("sort.descending.label");
    }), [ V ]);
    const yt = s(((e, t, o) => {
        if (i.disabled || !e) return undefined;
        const n = [];
        const a = [];
        const r = o ? Oe.length - 1 : Oe.length;
        e.resizable !== false && r > 1 && !(t === r - 1) && n.push("RESIZE");
        if (r > 1 && e.freezeable !== false) {
            const e = i.preference?.frozenColumnCount ?? 0;
            e > t ? n.push("UNFREEZE") : n.push("FREEZE");
        }
        e.sortable && n.push("SORT");
        const s = Oe.some((e => e.sortDirection === "ascending" || e.sortDirection === "descending"));
        n.forEach((n => {
            switch (n) {
              case "RESIZE":
                const n = Se.current;
                J(n?.getCurrentColumnWidth(t + (o ? 1 : 0)));
                a.push({
                    text: V("resize.menuItem.label")
                });
                break;

              case "UNFREEZE":
                a.push({
                    text: V("unfreeze.menuItem.label")
                });
                break;

              case "FREEZE":
                a.push({
                    text: V("freeze.menuItem.label")
                });
                break;

              case "SORT":
                const r = e.sortDirection === "data" || !e.sortDirection;
                const l = e.sortDirection === "ascending" ? 0 : e.sortDirection === "descending" ? 1 : -1;
                const c = {
                    selectedIndex: l,
                    items: [ {
                        text: vt({
                            direction: "ascending",
                            allowSecondarySort: i.allowSecondarySort,
                            column: e,
                            columns: Oe
                        })
                    }, {
                        text: vt({
                            direction: "descending",
                            allowSecondarySort: i.allowSecondarySort,
                            column: e,
                            columns: Oe
                        })
                    } ]
                };
                a.push({
                    text: V("sort.menuItem.label"),
                    subSections: [ c, {
                        items: [ {
                            text: V("sort.removeSort.label"),
                            disabled: r
                        }, ...i.allowSecondarySort ? [ {
                            text: V("sort.removeAllSort.label"),
                            disabled: i.allowSecondarySort && !s
                        } ] : [] ]
                    } ]
                });
                break;
            }
        }));
        let l = e.additionalHeaderContextMenuProps?.sections ?? [];
        const c = e.additionalHeaderContextMenuProps?.items ?? [];
        if (c.length > 0) {
            l = [ {
                items: c
            }, ...l ];
        }
        const d = a.length > 0;
        const m = l.length > 0;
        const p = d ? [ {
            items: a
        }, ...l ] : l;
        if (p.length === 0) return undefined;
        return {
            onDismiss: () => {
                pt();
            },
            sections: p,
            onItemSelected: a => {
                const [r, l] = a[0];
                if (d && r === 0) {
                    const r = l;
                    const c = n[r];
                    const d = Se.current;
                    switch (c) {
                      case "SORT":
                        {
                            Ye({
                                region: n2.ColumnHeader,
                                colIndex: t + (o ? 1 : 0),
                                rowIndex: -1
                            });
                            const n = i.onSort;
                            const r = a[1][0];
                            const l = a[1][1];
                            const c = !s || e.sortLevel === 1 || !i.allowSecondarySort;
                            if (r === 0) {
                                const t = l === 0 ? "ascending" : l === 1 ? "descending" : "data";
                                n?.({
                                    columnKey: e.key,
                                    direction: t,
                                    action: Z4({
                                        column: e,
                                        direction: t,
                                        isPrimarySortAction: c
                                    })
                                });
                            }
                            if (r === 1) {
                                n?.({
                                    columnKey: e.key,
                                    direction: "data",
                                    action: l === 0 ? "remove" : "removeAll"
                                });
                            }
                            break;
                        }

                      case "FREEZE":
                        {
                            const t = i.preference?.frozenColumnCount ?? 0;
                            f.current = true;
                            const o = i.setFreezeColumn;
                            o?.({
                                columnKey: e.key,
                                unmanagedColumnKeys: i.unmanagedColumnKeys,
                                orderedColumnKeys: i.preference?.orderedColumnKeys
                            });
                            dt(t + 1);
                            d.resetAfterColumnIndex(0);
                            break;
                        }

                      case "UNFREEZE":
                        {
                            f.current = true;
                            const t = i.setFreezeColumn;
                            t?.({
                                columnKey: e.key,
                                unfreeze: true,
                                orderedColumnKeys: i.preference?.orderedColumnKeys
                            });
                            d.resetAfterColumnIndex(0);
                            break;
                        }

                      case "RESIZE":
                        Ye({
                            region: n2.ColumnHeader,
                            colIndex: t + (o && !i.hideSelectionControlColumn ? 1 : 0),
                            rowIndex: -1
                        });
                        u.current && P(l2.actions.createFocusIndicator({
                            focusIndicator: "visible"
                        }));
                        st?.notify(rt.getColumnWidthStartNarration());
                        le(e.key);
                        break;
                    }
                    return;
                }
                if (m) {
                    e.additionalHeaderContextMenuProps?.onItemSelected?.(a);
                }
            }
        };
    }), [ i.disabled, i.preference?.frozenColumnCount, i.preference?.orderedColumnKeys, i.allowSecondarySort, i.hideSelectionControlColumn, i.onSort, i.setFreezeColumn, i.unmanagedColumnKeys, Oe, Se, V, vt, pt, Ye, u, st, rt, dt ]);
    const xt = s((e => {
        if (e === ie) {
            return true;
        }
        return false;
    }), [ ie ]);
    const St = s(((e, t, o) => {
        const n = Oe[t];
        if (i.disabled || n.resizable === false) return;
        const a = Se.current;
        let r;
        if (o === true) r = Z; else {
            const o = n.minimumWidth || f5.minimumColumnWidth;
            const s = n.maximumWidth || f5.maximumColumnWidth;
            r = a?.getCurrentColumnWidth(t);
            if (r < o && e < 0) return;
            if (r > s && e > 0) return;
        }
        const s = i.preference?.frozenColumnCount ?? 0;
        const l = i.setResizedColumn;
        const c = Math.max(r + e, f5.minimumColumnWidth);
        l && l({
            columnKey: n.key,
            width: c
        });
        st?.notify(rt.getColumnWidthChangeNarration(c.toString()));
        dt(s);
        a?._setColumnWidth(t, c);
        if (i.fireResizeChangeWithDrag === true) {
            const e = i.onColumnResize;
            e?.(n.key, c);
        }
    }), [ Oe, i.disabled, i.preference?.frozenColumnCount, i.setResizedColumn, i.fireResizeChangeWithDrag, i.onColumnResize, Se, Z, st, rt, dt ]);
    const wt = () => {
        const e = i.unmanagedColumnKeys;
        if (!e) return Pe;
        const t = Pe;
        const o = t?.filter((t => !e.includes(t)));
        return o;
    };
    const Ct = () => {
        const e = i.unmanagedColumnKeys;
        if (!e) return i.columns || [];
        const t = i.columns;
        const o = t?.filter((t => !e.includes(t.key)));
        return o || [];
    };
    const Et = new Map;
    const It = (e, t, o) => {
        const n = Et.get(e);
        if (!n) {
            const n = new Map;
            n.set(t, o);
            Et.set(e, n);
        } else {
            if (n.has(t)) n.delete(t);
            n.set(t, o);
        }
    };
    const _t = new Map;
    const Dt = (e, t, o) => {
        const n = _t.get(e);
        if (!n) {
            const n = new Map;
            n.set(t, o);
            _t.set(e, n);
        } else {
            if (n.has(t)) n.delete(t);
            n.set(t, o);
        }
    };
    const Lt = new Map;
    const Tt = (e, t, o) => {
        const n = Lt.get(e);
        if (!n) {
            const n = new Map;
            n.set(t, o);
            Lt.set(e, n);
        } else {
            if (n.has(t)) n.delete(t);
            n.set(t, o);
        }
    };
    const Rt = (e, t) => {
        if (e === "" || !Et.has(e)) return undefined;
        const o = Et.get(e);
        if (o === undefined) return undefined;
        return o.get(t);
    };
    const kt = (e, t) => {
        if (e === "" || !_t.has(e)) return undefined;
        const o = _t.get(e);
        if (o === undefined) return undefined;
        return o.get(t);
    };
    const At = (e, t) => {
        if (e === "" || !Lt.has(e)) return undefined;
        const o = Lt.get(e);
        if (o === undefined) return undefined;
        return o.get(t);
    };
    const Mt = {
        ...O,
        renderCell: i.renderCell || g5.renderCell,
        columns: Oe,
        dispatch: P,
        onSort: ft,
        setInteractiveAction: h,
        selectionMode: j || "multiple",
        hideSelectAll: i.hideSelectAll,
        singleSelectionOverrides: i.singleSelectionOverrides,
        hideManageColumnsButton: i.hideManageColumnsButton,
        rowCount: i.rowCount,
        columnHeadersVisible: at,
        cellContextMenu: i.cellContextMenu,
        getRowIdentifier: C,
        getRowIndex: i.getRowIndex,
        storePreviousFocusIndicator: U,
        updateFocusedCell: Ye,
        updateContextInfo: se,
        updateContextMenuStatus: $,
        showContextArea: gt,
        showContextForRow: i.showContextForRow ?? false,
        buildCellBorderStyles: ht,
        refGrid: Se,
        refTop: he,
        onColumnResize: i.onColumnResize,
        setContextMenuOpen: $,
        updateContextMenuItems: bt,
        headerContextMenu: yt,
        isColumnResizing: xt,
        sortRef: ue,
        setSortColumn: me,
        resizeColumn: St,
        hasContextMenu: () => i.cellContextMenu !== undefined,
        onDoubleClick: je,
        disableClickDelay: i.disableClickDelay,
        localize: V,
        updateControlRefs: It,
        updateHelpRefs: Dt,
        updateActivateRefs: Tt,
        getControlRef: Rt,
        getHelpRef: kt,
        getActivateRef: At,
        getSelectionCheckboxState: i.getSelectionCheckboxState,
        getSelectAllCheckboxState: i.getSelectAllCheckboxState,
        getSelectionState: i.getSelectionState,
        areRowsVisible: i.areRowsVisible,
        visibleStartRowIndex: 0,
        visibleStopRowIndex: 10,
        preference: i.preference,
        onSelect: i.onSelect,
        onActivate: Fe,
        setSelectRow: i.setSelectRow,
        setSelectRows: i.setSelectRows,
        setSelectAllRows: i.setSelectAllRows,
        setFreezeColumn: i.setFreezeColumn,
        setFreezeColumnCount: i.setFreezeColumnCount,
        showSeparator: i.showSeparator,
        autoFillLastColumn: i.autoFillLastColumn,
        hideFillRows: i.hideFillRows,
        removeFillRows: i.removeFillRows,
        selectableOnlyBySelectionControl: q4(j, i.columns?.length ?? 0, i.rowCount, i.hideSelectionControlColumn) && i.selectableOnlyBySelectionControl,
        hideUnselectedSelectionControl: i.hideUnselectedSelectionControl,
        disabled: i.disabled,
        isRowDisabled: E,
        isRowReadOnly: I,
        hideSelectionControl: i.hideSelectionControl,
        readOnly: e,
        dragging: R,
        dragEnabled: i.dragEnabled,
        dropEnabled: i.dropEnabled,
        hideSelectionControlColumn: i.hideSelectionControlColumn,
        getViewPortWidth: Qe,
        draggingRow: ne,
        onCellMouseEnter: i.onCellMouseEnter,
        onCellFocus: i.onCellFocus,
        disabledRows: i.disabledRows,
        disabledAndSelectedRows: i.disabledAndSelectedRows,
        readOnlyAndSelectedRows: i.readOnlyAndSelectedRows
    };
    const Nt = Oe?.map((({sortDirection: e}) => e)).join(",") ?? "";
    a((() => {
        const e = Mt?.preference?.selectionAnchor;
        const t = Ge.current;
        if (Ue.current) {
            if (e !== undefined && t !== undefined) st?.notify(rt.createRangeAddedSelectionNarration(e + 1, t + 1));
        } else if (He.current) {
            if (e !== undefined && t !== undefined) st?.notify(rt.createTotalSelectionNarration(e + 1, t + 1));
        }
        He.current = false;
        Ue.current = false;
    }), [ Mt.preference?.selectionAnchor, He.current, Ue.current ]);
    a((() => {
        if (!O.initialFocus) {
            return;
        }
        const e = O.focusIndicator === undefined && z;
        const t = O.initialFocus;
        const o = O.lastFocusedCell;
        const n = t.rowIndex !== o?.rowIndex || t.colIndex !== o?.colIndex;
        if (t.region !== o?.region) {
            const e = document.activeElement && document.activeElement.closest(`.${f2.zeroState}`) !== null;
            if (O.initialFocus?.region === n2.ZeroStateOverlay && !e && !i.disableAutoFocus) {
                if (ze) {
                    We();
                } else {
                    he.current?.focus();
                }
            }
        }
        if ((O.focusIndicator === "visible" || e) && n) {
            if (O.initialFocus?.region === n2.Data) Se.current?.scrollToItem({
                align: "smart",
                rowIndex: O.initialFocus?.rowIndex,
                columnIndex: O.initialFocus?.colIndex
            }); else if (O.initialFocus?.region === n2.ColumnHeader) Se.current?.scrollToItem({
                align: "smart",
                columnIndex: O.initialFocus?.colIndex
            }); else if (O.initialFocus?.region === n2.RowHeader) Se.current?.scrollToItem({
                align: "smart",
                rowIndex: O.initialFocus?.rowIndex
            });
        }
        if (O.focusIndicator !== "unfocused" && O.focusIndicator !== undefined && (t.rowIndex !== o?.rowIndex || t.colIndex !== o?.colIndex || t.region !== o?.region)) {
            const e = rt.createNarration(t, o);
            if (e !== null) {
                st?.notify(e);
            }
            O.lastFocusedCell = t;
        }
    }), [ O.initialFocus, O.lastFocusedCell, O.focusIndicator, ie, rt, st ]);
    a((() => {
        const e = Mt.refGrid.current;
        const t = i.setResizedColumn;
        if (!e) return;
        for (let o = 0, n = Mt.columns.length; o < n; o++) {
            const n = Mt.columns[o];
            const a = e.getCurrentColumnWidth(o);
            const r = n.minimumWidth || f5.minimumColumnWidth;
            const s = n.maximumWidth || f5.maximumColumnWidth;
            const l = et.get(n.key) || n.width;
            const c = Math.max(r, Math.min(s, l ?? f5.columnWidth));
            if (n.width !== undefined && a !== c && i.preference?.resizedColumns?.get(n.key) !== l) {
                const a = n.minimumWidth ?? f5.minimumColumnWidth;
                t && t({
                    columnKey: n.key,
                    width: Math.max(c, a)
                });
                e && e.resetAfterColumnIndex(o);
            }
        }
    }), [ Mt.columns, Mt.refGrid, et, i.preference?.resizedColumns, i.setResizedColumn ]);
    a((() => {
        if (O.initialFocus && O.focusIndicator !== undefined && O.focusIndicator !== "unfocused") {
            const e = rt.createNarration(O.initialFocus);
            if (e !== null) {
                st?.notify(e);
            }
        }
    }), [ Nt, i.preference?.frozenColumnCount ]);
    a((() => {
        const e = Mt.refGrid.current;
        i.expandToFillWidth && e && e.resetAfterColumnIndex(0);
    }), [ D, i.expandToFillWidth, Mt.refGrid ]);
    a((() => {
        if (!Ne.current) {
            const e = i.setOrderedColumnKeys;
            e?.({
                orderedKeys: w()
            });
        }
    }), [ i.setOrderedColumnKeys, S, i.onFrozenColumnCountChange, i.onOrderedColumnsChange, w ]);
    a((() => {
        const e = ce.isEditing ? ce.column.editorNavKeySuppressionList : undefined;
        const t = typeof e === "string" ? [ e ] : e;
        const o = e => {
            if (!ce.isEditing || e.defaultPrevented) {
                return;
            }
            let o = [ "ArrowUp", "ArrowDown", "PageUp", "PageDown", "Home", "End" ];
            if (!!t) {
                o = t;
            } else if (e.target instanceof HTMLInputElement) {
                o = [ "PageUp", "PageDown" ];
            } else if (e.target instanceof HTMLAnchorElement) {
                o = [ "Space", "ArrowUp", "ArrowDown", "PageUp", "PageDown", "Home", "End" ];
            }
            if (o.includes(e.key)) {
                e.preventDefault();
                e.stopPropagation();
            }
        };
        document.addEventListener("keydown", o);
        return () => {
            document.removeEventListener("keydown", o);
        };
    }), [ ce ]);
    a((() => {
        if (ze && ce.isEditing) {
            de({
                isEditing: false
            });
        }
    }), [ ze, ce.isEditing ]);
    a((() => {
        Ne.current = true;
        return () => {
            Ne.current = false;
        };
    }), []);
    const [Ot, Pt] = n(D?.width);
    a((() => {
        let e;
        if (i.expandToFillWidth && he.current) {
            e = he.current.offsetWidth;
            const t = window.getComputedStyle(he.current) || {};
            e -= parseInt(t.paddingLeft, 10) || 0;
            e -= parseInt(t.paddingRight, 10) || 0;
        }
        if (!D || D?.width === Ot || e !== D?.width) {
            return;
        }
        Pt(D?.width);
        const t = i.preference?.frozenColumnCount ?? 0;
        if (t && t > 0) dt(t);
    }), [ D, Ot, i.expandToFillWidth, i.preference?.frozenColumnCount, dt, he ]);
    const Bt = (e, t) => {
        const o = t === -1 ? undefined : C(t);
        if (O.focusIndicator !== "visible" || Mt.disabled || o && !!E?.(o) || o && !!I?.(o)) return;
        const n = Se.current;
        const a = e - (q4(Mt.selectionMode, Oe.length, i.rowCount, i.hideSelectionControlColumn) ? 1 : 0);
        const r = Oe[e];
        const s = O.activeCell?.rowIndex;
        const c = O.activeCell?.colIndex;
        const d = s === -1;
        if (e === -1) return;
        if (d && Mt.selectionMode === "multiple" && a === -1) return;
        const u = d && Oe ? yt(Oe[e], a, Mt.selectionMode === "multiple") : undefined;
        if (d && u === undefined) return;
        if (d && Oe) {
            bt(u);
        } else {
            bt(i.cellContextMenu, {
                rowKey: o || "",
                columnKey: r.key
            });
        }
        const m = n?._getRowStyle(d ? 0 : s, c);
        if (!m || !d && !i.cellContextMenu) return;
        const p = () => {
            if (d) return Kt;
            return m.top + Te(t) + Kt;
        };
        U(O.focusIndicator);
        se({
            position: {
                x: l ? (he.current ? he.current?.getBoundingClientRect().left + he.current?.offsetWidth : 0) - m.left + n?.getScrollLeft() : m.left + (he.current ? he.current?.getBoundingClientRect().left : 0) - n?.getScrollLeft(),
                y: p() + (he.current ? he.current?.getBoundingClientRect().top : 0) - n?.getScrollTop()
            },
            cell: {
                row: o,
                column: r.key
            }
        });
        $(true);
    };
    const [zt, Ft] = n(null);
    const jt = s((() => {
        if (!u.current || zt === null || zt > -1 && !be[zt]) return;
        const e = e => e.scrollHeight > e.clientHeight && window.getComputedStyle(e).overflowY.indexOf("hidden") === -1;
        const t = o => !o || o === document.body ? document.body : e(o) ? o : t(o.parentNode);
        const o = e => {
            const o = e?.getBoundingClientRect();
            const n = t(he?.current)?.getBoundingClientRect();
            return !o || !n ? false : o.top >= n.top && o.bottom <= n.bottom;
        };
        const n = zt === -1 ? xe.current : be[zt];
        if (n && !o(n)) n?.scrollIntoView?.({
            block: "nearest"
        });
        Ft(null);
    }), [ be, xe, he, u, zt, Ft ]);
    a((() => {
        jt();
    }), [ jt ]);
    const Vt = c(null);
    const Ht = c(false);
    const Ut = t => {
        const o = t.target;
        const n = o.getAttribute("role");
        lo.current = null;
        const a = document.activeElement && document.activeElement.closest(`.${f2.zeroState}`) !== null;
        if (a) {
            if (t.key === "Escape") return; else if (t.key !== "Tab") {
                t.preventDefault();
                t.stopPropagation();
                return;
            }
        }
        const r = document.activeElement && document.activeElement.closest(`.${rP.container}`) !== null;
        if (he.current !== document.activeElement && r) return;
        O.activeCell = O.initialFocus;
        const {rowCount: s} = i;
        const c = Oe?.length ?? 0;
        let d = O.initialFocus?.region ?? n2.Data, m = O.initialFocus?.rowIndex ?? 0, p = O.initialFocus?.colIndex ?? 0;
        const g = [ "ArrowUp", "ArrowDown", "Home", "End", "PageDown", "PageUp", "ArrowLeft", "ArrowRight" ];
        if (O.focusIndicator !== "visible") Vt.current = null;
        if (g.includes(t.key)) {
            if (Vt.current) p = Vt.current;
            Vt.current = null;
        }
        const h = Oe[p]?.key || "";
        const b = ie !== undefined;
        const v = q4(Mt.selectionMode, c, s, i.hideSelectionControlColumn);
        const y = v ? 1 : 0;
        const x = Mt.selectionMode === "single" || Mt.selectionMode === "singleRadio";
        const S = [ "ArrowLeft", "ArrowRight", "Enter", "Escape" ];
        if (!S.includes(t.key)) {
            le(undefined);
        }
        const w = [ "Escape", "F2" ];
        if (ce.isEditing && !w.includes(t.key)) return;
        const _ = () => {
            if (m < 0 && p < 0) {
                return n2.ColumnHeaderButton;
            } else if (p < y) {
                return m < 0 ? n2.ColumnRowHeader : n2.RowHeader;
            } else if (m < 0) {
                return n2.ColumnHeader;
            }
            return n2.Data;
        };
        const D = (() => {
            if (_() === n2.RowHeader) {
                return X4(Mt.selectionMode) ? "checkbox" : "radioButton";
            }
            return "cell";
        })();
        const L = o => {
            if (e || m >= s || d !== n2.RowHeader && Mt.selectableOnlyBySelectionControl) {
                return;
            }
            const n = i.preference?.selectedRows;
            const a = d === n2.RowHeader;
            const r = (() => {
                if (Mt.selectionMode === "toggle") return "selectionRange";
                return t.metaKey || t.ctrlKey ? false : true;
            })();
            f.current = true;
            i.setSelectRow?.({
                index: m,
                selected: (j !== "single" || i.singleSelectionOverrides?.allowDeselection !== false) && n?.has(C(m)) ? false : true,
                selectionType: a ? "checkbox" : "cell",
                clearPrevious: r,
                rowCount: i.rowCount,
                rangeSelection: true,
                rowKey: C,
                getRowIndex: i.getRowIndex,
                hideSelectAll: i.hideSelectAll,
                columnHeadersVisible: i.columnHeadersVisible,
                areRowsVisible: i.areRowsVisible,
                isRowDisabled: E,
                isRowReadOnly: I,
                disabledRows: i.disabledRows,
                selectionStart: o
            });
        };
        const T = () => {
            const o = _();
            const n = m === -1 ? undefined : C(m);
            if (e || Mt.selectionMode === "none" || m >= s || o !== n2.RowHeader && o !== n2.ColumnRowHeader && Mt.selectableOnlyBySelectionControl || n && !!E?.(n) || n && !!I?.(n)) {
                return;
            }
            if (Mt.hideSelectAll && o === n2.ColumnRowHeader) {
                return;
            }
            const a = Mt.selectionMode === "single" || Mt.selectionMode === "singleRadio";
            if (!a && !Mt.hideSelectAll && o === n2.ColumnRowHeader) {
                const e = Mt.setSelectAllRows;
                e?.({
                    selectAll: !(Mt.preference?.selectAll === true),
                    interactive: true
                });
            } else if (o !== n2.ColumnHeader) {
                const {getRowIdentifier: e} = Mt;
                const n = o === n2.RowHeader && X4(Mt.selectionMode);
                const r = (() => {
                    if (Mt.selectionMode === "toggle") return false;
                    return !n && (!a && (t.metaKey || t.ctrlKey) ? false : true);
                })();
                const s = Y4(Mt, m);
                const l = a ? false : t.shiftKey;
                i.setSelectRow && i.setSelectRow({
                    index: m,
                    selected: s,
                    selectionType: D,
                    clearPrevious: r,
                    rowCount: i.rowCount,
                    rangeSelection: l,
                    rowKey: e,
                    getRowIndex: i.getRowIndex,
                    hideSelectAll: i.hideSelectAll,
                    columnHeadersVisible: i.columnHeadersVisible,
                    areRowsVisible: i.areRowsVisible,
                    isRowDisabled: E,
                    isRowReadOnly: I
                });
                if (!a && l) {
                    if (t.ctrlKey) Ue.current = true; else He.current = true;
                    Ge.current = m;
                } else {
                    let e = s;
                    if (D === "cell" && r === true && Mt.preference?.selectedRows && Mt.preference?.selectedRows?.size > 1) {
                        e = true;
                    }
                    let o;
                    if (!t.ctrlKey) {
                        o = e ? rt.createSelectedNarration() : rt.createDeselectedNarration();
                    } else {
                        o = e ? rt.createRowAddedSelectionNarration(m + 1) : rt.createRowRemovedSelectionNarration(m + 1);
                    }
                    st?.notify(o);
                }
            }
        };
        if (W) return;
        let R = false;
        const k = !at ? 0 : -1;
        let A = te - Q + 1;
        let M = te;
        const N = Mt.preference;
        const B = N?.frozenColumnCount || 0;
        const z = document.activeElement?.className;
        const F = C(m);
        const V = !Mt.disabled && !Mt.readOnly && !E?.(F) && !I?.(F);
        switch (t.key) {
          case "ArrowDown":
            if (d === n2.ColumnHeaderButton || z && z.indexOf(z4.table) === -1 || !b && m === s - 1) {
                t.preventDefault();
                return;
            }
            m = !b ? m = Math.min(m + 1, s - 1) : m;
            R = true;
            if (Mt.selectionMode !== "none" && !x && t.shiftKey && !t.altKey) {
                const e = i.preference?.selectedRows && i.preference?.selectedRows.size > 0 ? undefined : m - 1;
                L(e);
            } else if (t.ctrlKey && !t.altKey) {
                m = s - 1;
            }
            d = _();
            Ft(m);
            break;

          case l ? "ArrowRight" : "ArrowLeft":
            if (d === n2.ColumnHeaderButton || z && z.indexOf(z4.table) === -1 || !b && p === 0) {
                return;
            }
            if (b) {
                St(-5, p);
                t.preventDefault();
            } else {
                const e = Se.current.getDisplayedCell({
                    row: m,
                    column: p
                }).column;
                if (e > 0) {
                    p = Math.max(e - 1, 0);
                }
            }
            R = !b;
            d = _();
            break;

          case l ? "ArrowLeft" : "ArrowRight":
            if (d === n2.ColumnHeaderButton || z && z.indexOf(z4.table) === -1 || !b && p === c - 1) {
                return;
            }
            if (b) {
                St(5, p);
                t.preventDefault();
            } else {
                const e = Se.current.getDisplayedCell({
                    row: m,
                    column: p
                }).column;
                const t = nt(m, e);
                const o = e + t;
                if (o < c) {
                    p = Math.min(o, c - 1);
                }
            }
            R = !b;
            d = _();
            break;

          case "ArrowUp":
            if (z && z.indexOf(z4.table) === -1 || !b && m === k) {
                t.preventDefault();
                return;
            }
            if (!b && !t.ctrlKey) {
                m = Math.max(m - 1, k);
            }
            R = true;
            d = _();
            if (m > -1 && Mt.selectionMode !== "none" && !x && t.shiftKey && !t.altKey) {
                const e = i.preference?.selectedRows && i.preference?.selectedRows.size > 0 ? undefined : m + 1;
                L(e);
            } else if (t.ctrlKey && !t.altKey) {
                if (!at) {
                    m = k;
                } else if (m <= 0) {
                    m = -1;
                } else {
                    m = 0;
                }
            }
            Ft(m);
            break;

          case "F2":
            if (t.ctrlKey || t.shiftKey || t.altKey) break;
            t.preventDefault();
            const o = Oe?.find((e => e.key === h));
            const r = Mt.getControlRef(h, Mt.getRowIdentifier(m));
            if (V && he.current === document.activeElement && o?.containsInteractiveContent) {
                if (r?.current) {
                    de({
                        isEditing: true,
                        column: o,
                        colIndex: p,
                        rowIndex: m
                    });
                    Ve.current = true;
                    r.current.focus();
                }
            } else {
                if (ce.isEditing) {
                    P(l2.actions.createFocusIndicator({
                        focusIndicator: "visible"
                    }));
                }
                de({
                    isEditing: false
                });
            }
            break;

          case "Enter":
            {
                t.preventDefault();
                Ht.current = true;
                const e = Oe?.find((e => e.key === h));
                if (V && !ce.isEditing && (i.onActivate || e?.onActivate) && !t.ctrlKey && !t.metaKey && (!e?.containsInteractiveContent || e.onActivate) || !ce.isEditing && (t.ctrlKey && !i.doubleClickOnEnter && !i.disableOnDoubleClickKeyboardActivation || !t.ctrlKey && i.doubleClickOnEnter) && je) {
                    Fe?.(m, p, h, false);
                    P(l2.actions.createPressedCell({
                        cell: O.activeCell,
                        pressRow: !e?.onActivate
                    }));
                }
                if (b) {
                    const e = ie ?? "";
                    const t = O.activeCell?.colIndex ?? p;
                    const o = ct(e, t);
                    le(undefined);
                    Mt.onColumnResize && Mt.onColumnResize(e, o || f5.columnWidth);
                } else if (d === n2.ColumnHeaderButton && no) {
                    X(true);
                    mo(true);
                    break;
                }
                const o = Mt.getControlRef(h, Mt.getRowIdentifier(m));
                if (V && !e?.onActivate && !t.ctrlKey && !i.doubleClickOnEnter && e?.containsInteractiveContent) {
                    if (o?.current && z && z.indexOf(z4.table) > -1 && n === "grid") {
                        de({
                            isEditing: true,
                            column: e,
                            colIndex: p,
                            rowIndex: m
                        });
                        Ve.current = true;
                        o.current.focus();
                    }
                }
            }
            break;

          case "Escape":
            {
                b && St(0, p, true);
                le(undefined);
                if (ce.isEditing) {
                    t.preventDefault();
                    P(l2.actions.createFocusIndicator({
                        focusIndicator: "visible"
                    }));
                }
                de({
                    isEditing: false
                });
                break;
            }

          case " ":
            if (!Mt.selectableOnlyBySelectionControl && d === n2.Data && !i.hideSelectedStateStyles && j !== "none") {
                P(l2.actions.createPressedCell({
                    cell: O.activeCell
                }));
            }
            if (d === n2.ColumnHeaderButton && no) {
                t.preventDefault();
                X(true);
                mo(true);
                break;
            }
            const u = Oe?.find((e => e.key === h));
            if (d === n2.ColumnHeader && !i.disabled && u && u.sortable) {
                ft(t, u.key);
                t.preventDefault();
                break;
            }
            if (u) {
                if (z && z.indexOf(z4.table) > -1) {
                    t.preventDefault();
                    R = true;
                    if (!u.preventToggleSelection && pe) {
                        f.current = true;
                        T();
                        fe(false);
                    }
                }
            }
            break;

          case "a":
            if (!e && Mt.selectionMode !== "none" && Mt.selectionMode !== "toggle" && !x && t.ctrlKey) {
                t.preventDefault();
                const e = Mt.setSelectAllRows;
                e && e({
                    selectAll: true,
                    interactive: true
                });
            }
            break;

          case "h":
            if (!t.ctrlKey && !t.altKey && !t.metaKey) {
                const e = Oe?.find((e => e.key === h));
                if (d === n2.ColumnHeader && e?.helpProps) {
                    const e = Mt.getHelpRef(h, Mt.getRowIdentifier(m));
                    const t = e?.current;
                    t?.dispatchEvent(new MouseEvent("click", {
                        bubbles: true,
                        detail: 1
                    }));
                }
            }
            break;

          case "Home":
            if (!z || z.indexOf(z4.table) === -1) {
                break;
            }
            R = true;
            if (t.ctrlKey) {
                if (m === k && p === 0) {
                    t.preventDefault();
                    return;
                }
                if (m === 0 && p === y) {
                    m = k;
                    p = 0;
                } else if (m === k && k === -1) {
                    p = 0;
                } else if (p === 0 && y === 1) {
                    m = k;
                } else {
                    m = 0;
                    p = y;
                }
            } else {
                if (p === 0) {
                    t.preventDefault();
                    return;
                }
                if (v || j === undefined) {
                    if (p > B + 1) {
                        p = B + 1;
                    } else if (p <= 1) {
                        if (i.hideSelectAll && m === -1) {
                            p = 1;
                        } else {
                            p = 0;
                        }
                    } else {
                        p = 1;
                    }
                } else {
                    if (p > B) {
                        p = B;
                    } else {
                        p = 0;
                    }
                }
            }
            d = _();
            Ft(m);
            break;

          case "End":
            if (!z || z.indexOf(z4.table) === -1) {
                break;
            }
            R = true;
            if (t.ctrlKey) {
                if (m === s - 1 && p === c - 1) {
                    t.preventDefault();
                    return;
                }
                m = s - 1;
                p = c - 1;
            } else {
                if (p === c - 1) {
                    t.preventDefault();
                    return;
                }
                if (v || j === undefined) {
                    if (p < B) {
                        p = B;
                    } else {
                        p = c - 1;
                    }
                } else {
                    if (p < B - 1) {
                        p = B - 1;
                    } else {
                        p = c - 1;
                    }
                }
            }
            d = _();
            Ft(m);
            break;

          case "Tab":
            if (a) {
                if (!t.shiftKey) {
                    if (document.activeElement !== Ke.current[Ke.current.length - 1]) return;
                } else if (document.activeElement !== Ke.current[0]) {
                    return;
                }
                if (!at) {
                    if (t.shiftKey) {
                        Ve.current = true;
                        he.current?.focus();
                        Ve.current = false;
                        return;
                    } else {
                        Ve.current = true;
                        we.current?.focus();
                        Ve.current = false;
                        return;
                    }
                } else if (!no) {
                    if (!t.shiftKey) {
                        Ve.current = true;
                        we.current?.focus();
                        Ve.current = false;
                        return;
                    }
                }
                Ve.current = true;
                he.current?.focus();
                Ve.current = false;
                if (Oe.length === 0 && t.shiftKey) return;
            }
            const g = t.shiftKey !== true;
            if (g) {
                if (d === n2.ColumnHeader || d === n2.ColumnRowHeader) {
                    R = true;
                    if (ze) {
                        t.preventDefault();
                        t.stopPropagation();
                        We();
                        return;
                    } else {
                        const e = d === n2.ColumnRowHeader;
                        d = e ? n2.RowHeader : n2.Data;
                        m = Math.max(0, O.lastFocusedDataCell?.rowIndex ?? 0);
                    }
                } else if (d === n2.Data || d === n2.RowHeader || d === n2.ZeroStateOverlay) {
                    if (!no) {
                        if (ze) {
                            t.preventDefault();
                            t.stopPropagation();
                            We();
                            return;
                        } else {
                            Ve.current = true;
                            we.current?.focus();
                            Ve.current = false;
                            return;
                        }
                    }
                    R = true;
                    t.preventDefault();
                    d = n2.ColumnHeaderButton;
                    p = -1;
                    m = -1;
                } else if (d === n2.ColumnHeaderButton) {
                    Ve.current = true;
                    we.current?.focus();
                    Ve.current = false;
                    return;
                }
            } else {
                if (d === n2.ColumnHeaderButton) {
                    if (ze) {
                        t.preventDefault();
                        t.stopPropagation();
                        $e();
                        return;
                    } else {
                        const e = Math.max(0, O.lastFocusedDataCell?.colIndex ?? 0);
                        const t = q4(Mt.selectionMode, c, s, i.hideSelectionControlColumn) && e === 0;
                        d = t ? n2.RowHeader : n2.Data;
                        p = e;
                        m = Math.max(0, O.lastFocusedDataCell?.rowIndex ?? 0);
                    }
                    R = true;
                    t.preventDefault();
                    t.stopPropagation();
                } else if (d === n2.Data || d === n2.RowHeader) {
                    if (at) {
                        R = true;
                        d = n2.ColumnHeader;
                        m = -1;
                        t.preventDefault();
                        t.stopPropagation();
                    }
                } else {
                    return;
                }
            }
            break;

          case "PageUp":
            if (m === k) {
                t.preventDefault();
                return;
            }
            R = true;
            if (m > k) {
                if (m === 0) {
                    m = k;
                } else if (m > Q) {
                    m = Q;
                } else {
                    const [e, t, o] = $t(Math.max(Q - A, 0), Q - 1);
                    if (e > t) {
                        A = Q - o;
                        m = Math.max(o + 1, 0);
                    } else {
                        m = Math.max(o, 0);
                    }
                    Se.current?.scrollToItem({
                        align: "start",
                        rowIndex: m,
                        columnIndex: undefined
                    });
                }
            }
            Ft(m);
            break;

          case "PageDown":
            if (m === s - 1) {
                t.preventDefault();
                return;
            }
            R = true;
            const [S, w] = Wt(Q, te);
            const C = Se.current;
            if (S > w) {
                M--;
            }
            if (m < M) {
                m = Math.min(M, s - 1);
            } else if (C?._getEstimatedTotalHeight() > w) {
                if (s - 1 > M + 1) {
                    C?.scrollToItem({
                        align: "start",
                        rowIndex: M + 1,
                        columnIndex: undefined
                    });
                }
                m = Math.min(m + A - 1, s - 1);
            }
            Ft(m);
            break;
        }
        if (!R) return;
        const H = Se.current?._getRowMetadata(m).getCell(p)?.displayed;
        if (H > -1) {
            if (g.includes(t.key)) Vt.current = p;
            p = H;
        }
        t.preventDefault();
        Ye({
            region: d,
            colIndex: p,
            rowIndex: m
        });
        u.current && P(l2.actions.createFocusIndicator({
            focusIndicator: "visible"
        }));
    };
    const Gt = t => {
        if (e) return;
        const o = t.key === "Enter";
        fe(true);
        P(l2.actions.createPressedCell({
            cell: undefined
        }));
        if (Ht.current === false) {
            ot.onKeyUp(t);
        }
        const n = O.initialFocus?.rowIndex ?? 0, a = O.initialFocus?.colIndex ?? 0, r = Oe[a]?.key || Oe[0].key, s = C(n);
        if (E?.(s) || I?.(s)) return;
        if (o && (t.ctrlKey && !i.doubleClickOnEnter && !i.disableOnDoubleClickKeyboardActivation || !t.ctrlKey && i.doubleClickOnEnter) && je) {
            je({
                rowKey: C(n),
                rowIndex: n,
                columnKey: r
            });
        } else if (!i.disabled && !t.ctrlKey && !t.altKey) {
            if (o || t.key === " ") Oe[a]?.onPress?.(n, r);
        }
        Ht.current = false;
    };
    const Kt = at === false ? 0 : i.headerHeight ?? De;
    const Wt = (e, t) => {
        const o = Se.current;
        const n = o?.props.width;
        const a = o?.props.height;
        const r = o?._getEstimatedTotalWidth();
        const s = r > n ? FA() : 0;
        const i = a - Kt - (s + 1);
        let l = 0;
        let c = e;
        while (l <= i && c <= t) {
            l += o?._getRowStyle(c, 0).height ?? De;
            c++;
        }
        return [ l, i ];
    };
    const $t = (e, t) => {
        const o = Se.current;
        const n = o?.props.width;
        const a = o?.props.height;
        const r = o?._getEstimatedTotalWidth();
        const s = r > n ? FA() : 0;
        const i = a - Kt - (s + 1);
        let l = 0;
        let c = t;
        while (l <= i && c >= e) {
            l += o?._getRowStyle(c, 0).height ?? De;
            c--;
        }
        return [ l, i, c + 1 ];
    };
    const Yt = jD(L_.FOCUS_OVERRIDE);
    const qt = e => {
        lo.current = null;
        const {target: t, relatedTarget: o} = e;
        const n = O.focusIndicator === "unfocused" || O.focusIndicator === undefined;
        const a = O.initialFocus?.colIndex ?? 0;
        if (Ve.current === true || W === true) {
            return;
        }
        if (e.target === we.current && n === false) {
            return;
        }
        if (t.closest(`.${f2.zeroState}`) !== null) {
            return;
        }
        const r = n && t === we.current && o !== we.current;
        if (t !== we.current) {
            const e = rt.createTableNarration();
            if (e !== null) {
                setTimeout((() => he.current?.contains(document.activeElement) ? st?.notify(e) : undefined), 400);
            }
            const t = rt.createTableNarration(true);
            lo.current = t || "";
        }
        if (n && O.initialFocus === undefined && t !== we.current) {
            if (o === we.current) {
                if (no) {
                    Ye({
                        region: n2.ColumnHeaderButton,
                        rowIndex: -1,
                        colIndex: -1
                    });
                } else if (ze) {
                    $e();
                    return;
                } else {
                    Ye({
                        region: n2.Data,
                        rowIndex: Math.max(0, O.lastFocusedDataCell?.rowIndex ?? 0),
                        colIndex: O.lastFocusedDataCell?.colIndex ?? a
                    });
                }
            } else {
                if (at && w().length > 0) {
                    const e = q4(Mt.selectionMode, Oe.length, i.rowCount, i.hideSelectionControlColumn);
                    if (e) {
                        if (i.hideSelectAll || Mt.columns.length === 0) {
                            Ye({
                                region: n2.ColumnHeader,
                                rowIndex: -1,
                                colIndex: Math.max(1, O.lastFocusedDataCell?.colIndex ?? a)
                            });
                        } else {
                            const e = O.lastFocusedDataCell?.colIndex ?? a;
                            const t = e === 0;
                            const o = t ? n2.ColumnRowHeader : n2.ColumnHeader;
                            Ye({
                                region: o,
                                rowIndex: -1,
                                colIndex: e
                            });
                        }
                    } else {
                        Ye({
                            region: n2.ColumnHeader,
                            rowIndex: -1,
                            colIndex: O.lastFocusedDataCell?.colIndex ?? a
                        });
                    }
                } else {
                    if (ze) {
                        We();
                    } else {
                        Ye({
                            region: n2.Data,
                            rowIndex: Math.max(0, O.lastFocusedDataCell?.rowIndex ?? 0),
                            colIndex: O.lastFocusedDataCell?.colIndex ?? a
                        });
                    }
                }
            }
        }
        if (e.currentTarget.contains(t)) {
            const o = O.initialFocus?.colIndex ?? 0;
            const a = Oe?.[o];
            const s = O.initialFocus?.rowIndex === -1;
            const l = a?.headerContainsInteractiveContent;
            const c = O.focusIndicator === "hidden";
            if (u.current && (n || Yt === "true")) {
                P(l2.actions.createFocusIndicator({
                    focusIndicator: "visible"
                }));
            }
            if (O.initialFocus?.region === n2.ZeroStateOverlay && ze) {
                We();
                return;
            }
            if (!s && t !== he.current && !(a && u5(e, a)) || s && !l || r) {
                if (!c) {
                    he.current?.focus();
                }
            }
            if (n && O.initialFocus) {
                i.onFocusChange?.(O.initialFocus);
                const e = rt.createNarration(O.initialFocus, undefined);
                if (e !== null) {
                    st?.notify(e);
                }
            }
        }
    };
    const Xt = (e, o, n) => {
        const a = t("div", n, o);
        return i.rowContainer ? i.rowContainer(e, a, z4.gridCell) : a;
    };
    const Zt = (e, o, r) => {
        const [s, l] = n();
        const u = U4({
            rowIndex: e,
            rowKey: C(e),
            prefix: Me,
            dragType: i.dragType,
            dropTypes: i.dropTypes,
            begin: () => {
                if (i.isDraggable && !i.isDraggable(e)) return;
                if (!i.dragEnabled) return;
                const t = C(e);
                const o = i.preference?.selectedRows;
                const n = i.preference?.selectAll;
                if (n !== true && i.selectionMode !== "none" && !o?.has(t)) {
                    i.setSelectAllRows?.({
                        selectAll: false
                    });
                    i.setSelectRows?.({
                        selectedRows: new Set([ t ])
                    });
                }
                k(true);
            },
            end: () => {
                k(false);
                l(undefined);
                it(-1);
                N.current?.updateContent();
                i.onDrop?.(undefined, -1);
                ae(-1);
            },
            drop: t => {
                if (i.isDroppable && !i.isDroppable(t, e, i.getDropLevel?.())) return;
                k(false);
                l(undefined);
                it(-1);
                const o = i.selectionMode === "none" ? new Set([ C(t?.index) ]) : i.preference?.selectedRows;
                e > -1 && i.onDrop?.(t, e, i.getDropLevel?.());
                i.reorderRow?.(t.index, e, o, i.getDropLevel?.());
                N.current?.updateContent();
                ae(-1);
            },
            hover: (t, o) => {
                const n = he.current?.getBoundingClientRect();
                l(t.dndPrefix);
                if (i.isDroppable && !i.isDroppable(t, e, i.getDropLevel?.())) return;
                const a = o.getDifferenceFromInitialOffset()?.x || 0;
                const r = Se.current;
                const s = r?._isScrolling();
                const c = i.getDropIndicatorForRow?.(e) || i.dropZoneIndicator;
                if (y !== c) x(c);
                if (s) return;
                if (i.dndRef) {
                    i.dndRef?.current?.displayDropIndicator(e);
                } else {
                    const t = o.getClientOffset();
                    const s = r?._getRowStyle(e, 0);
                    const l = (t?.y ?? 0) - (n?.top ?? 0);
                    const d = Te(0) / 2;
                    let u = 0;
                    if (l < d) {
                        u = 0;
                    } else {
                        const e = r?.getScrollTop() || 0;
                        const t = c === "zone" ? 0 : 5;
                        u = s?.top - e - t;
                        if (i.columnHeadersVisible !== false) {
                            const e = i.headerHeight ?? De;
                            u += e;
                        }
                    }
                    const m = i.dropZoneIndicator === "zone" ? s?.height : f5.dropIndicatorLineHeight;
                    if (i.moveDropIndicator) {
                        const t = i.expandToFillWidth && D ? D.width : i.width ?? f5.tableWidth;
                        i.moveDropIndicator({
                            rowIndex: e,
                            dropIndicatorRef: Eo,
                            position: u || -1,
                            height: m,
                            width: t,
                            offsetX: a
                        });
                    } else it(u, m);
                }
            },
            isDraggable: i.isDraggable
        });
        const m = i.dragEnabled;
        const p = i.dropEnabled;
        const f = c(null);
        if (m && p) u.dragRef(u.dropRef(f)); else if (m) u.dragRef(f); else if (p) u.dropRef(f);
        const {getEmptyImage: g} = nX();
        d((() => {
            const e = u.preview;
            e(g(), {
                captureDraggingState: true
            });
        }));
        a((() => {
            if (u.rowIndex === e && u.isDragging && R) {
                ae(e);
                N.current?.updateContent(o);
            }
        }), [ o, e, u.isDragging, u.isOverCurrent, u.rowIndex ]);
        const h = i.getDropIndicatorForRow?.(e) || i.dropZoneIndicator;
        let b = false;
        if (u?.isOverCurrent === true) {
            const t = {
                index: e,
                id: e,
                dndPrefix: s
            };
            if (i.isDroppable && !i.isDroppable(t, e, i.getDropLevel?.())) b = true;
        }
        const v = {
            ...r,
            className: ke(r.className, h === "zone" && !b ? u.isOverCurrent && z4.dropRegion : undefined),
            style: {
                ...r.style
            }
        };
        const S = v.style.width ?? f5.tableWidth;
        const w = t("div", Ee({}, v, {
            ref: f,
            style: {
                ...v.style,
                width: {
                    width: S
                }
            }
        }), o);
        return i.rowContainer ? i.rowContainer(e, w, z4.gridCell) : w;
    };
    const Jt = e => {
        P(l2.actions.createFocusIndicator({
            focusIndicator: "hidden"
        }));
        le(undefined);
    };
    const Qt = e => {
        P(l2.actions.createPressedCell({
            cell: undefined
        }));
        if (Yt === "true" && O.focusIndicator !== "visible") {
            P(l2.actions.createFocusIndicator({
                focusIndicator: "visible"
            }));
        }
        const t = O.initialFocus?.colIndex ?? 0;
        const o = Oe?.[t];
        const n = document.activeElement && document.activeElement.closest(`.${rP.container}`) !== null;
        const a = document.activeElement && document.activeElement?.closest(`.${z4.headerActionButton}`);
        const r = O.initialFocus?.rowIndex === -1;
        const s = !r && e.target !== he.current && he.current?.contains(e.target);
        if (s && o && u5(e, o)) de({
            isEditing: true,
            column: o,
            colIndex: t,
            rowIndex: O.initialFocus?.rowIndex ?? 0
        });
        const i = s && !(o && u5(e, o));
        const l = r && !o?.headerContainsInteractiveContent;
        if (i || l || n || a) {
            he.current?.focus({
                preventScroll: true
            });
        }
    };
    const eo = t => {
        if (e) return;
        ot.onClick(t);
    };
    const {onFocus: to, onBlur: oo} = JI((() => {
        if (!u.current) return;
        P(l2.actions.createFocusIndicator({
            focusIndicator: "unfocused"
        }));
        if (!Y && !W) P(l2.actions.createFocus({
            focusedCell: undefined
        }));
        le(undefined);
        i.onFocusOut?.();
    }));
    const no = at === true && i.hideManageColumnsButton !== true;
    const ao = O.initialFocus?.region === n2.ColumnHeaderButton;
    const ro = (e, t, o) => {
        le(undefined);
        const n = {
            region: e === -1 ? n2.ColumnHeader : n2.Data,
            rowIndex: e,
            colIndex: t
        };
        if (o.button === 0) {
            const e = q4(j, Oe.length, i.rowCount, i.hideSelectionControlColumn);
            const a = e && t === 0;
            const r = o.target;
            const s = r.matches(`.${z4.gridCellContentContainer}`);
            const l = Oe[t]?.key || "";
            const c = Oe?.find((e => e.key === l));
            if ((!c?.containsInteractiveContent && !a || s) && i.onActivate && (!i.doubleClickOnEnter || i.selectionMode !== "none")) {
                P(l2.actions.createPressedCell({
                    cell: n,
                    pressRow: true
                }));
            }
        }
        if (o.button === 2) {
            u.current && P(l2.actions.createActiveCell({
                cell: n
            }));
        } else if (i.rowCount > e) {
            Ye(n);
        }
    };
    const so = i.expandToFillWidth && D ? undefined : i.width ?? f5.tableWidth;
    if (Ze !== undefined && Ze > -1) Se.current?.resetAfterRowIndex(0, false);
    if (qe !== undefined && qe > -1) Se.current?.resetAfterColumnIndex(0, false);
    const io = c(null);
    const lo = c(null);
    const co = fO({
        tooltip: lo.current ?? undefined,
        startElementRef: io,
        traverseChildren: true
    });
    const [uo, mo] = n(false);
    const po = i.showSeparator;
    const fo = K4(i.ignoreTableOverrideTheme, true);
    const go = K4(i.ignoreTableOverrideTheme);
    const ho = i.dropEnabled && i.rowCount > 0 ? 1 : 0;
    const bo = !no ? undefined : {
        testId: gb(i.testId, "manage-columns-button"),
        icon: dk,
        onPress: () => {
            X(true);
            mo(true);
        },
        disabled: i.disabled,
        role: "img",
        tabIndex: -1,
        ariaHidden: true,
        tooltip: V("manageColumns.button.tooltip.label"),
        ariaLabel: V("manageColumns.button.aria")
    };
    const vo = Kt - 1;
    const yo = i.outerBorderVisible ? "1px" : "0px";
    const xo = i.outerBorderVisible ? "1px" : "0px";
    const So = O.initialFocus?.region === n2.ColumnHeaderButton && O.focusIndicator === "visible";
    const wo = he?.current?.getBoundingClientRect();
    const Co = () => t("div", {
        ref: _,
        onDrag: e => {
            const t = (wo?.top ?? 0) + Kt;
            if (e.clientY < t) {
                i.moveDropIndicator?.({
                    rowIndex: -1,
                    dropIndicatorRef: Eo
                });
                it(-1);
            }
        }
    }, t(Q6, {
        testId: i.testId,
        tableHeaderOverrideTheme: fo,
        tableBodyOverrideTheme: go,
        columnSpan: nt,
        renderRow: i.renderRow,
        addRowAttributes: i.addRowAttributes,
        addCellAttributes: i.addCellAttributes,
        onScroll: e => {
            if (Eo.current) Eo.current.style.display = "none";
            Et.clear();
            i.onScroll && i.onScroll({
                scrollLeft: e.scrollLeft,
                scrollTop: e.scrollTop,
                verticalScrollDirection: e.verticalScrollDirection,
                horizontalScrollDirection: e.horizontalScrollDirection
            });
            $(false);
            jt();
        },
        getRowContainer: i.dragEnabled || i.dropEnabled ? Zt : Xt,
        itemData: Mt,
        cellBackground: e => {
            const t = Oe[e.columnIndex] && Oe[e.columnIndex].key;
            return i.cellBackground ? i.cellBackground({
                ...e,
                columnKey: t
            }) : undefined;
        },
        showSeparator: typeof po === "function" ? e => po?.(e) : po,
        isRowDisabled: i.isRowDisabled || i.disabledRows ? e => {
            const t = typeof e === "number" ? C(e) : e;
            return !!E?.(t);
        } : undefined,
        isRowReadOnly: i.isRowReadOnly || i.readonlyRows ? e => {
            const t = typeof e === "number" ? C(e) : e;
            return !!I?.(t);
        } : undefined,
        rowRef: e => t => {
            const o = i.rowRef?.(e);
            D_(o, t);
            const n = ve(e);
            D_(n, t);
        },
        headerRef: xe,
        autoFillLastColumn: i.autoFillLastColumn,
        focusCellRef: O.focusIndicator === "visible" ? io : null,
        hideFillRows: i.hideFillRows,
        removeFillRows: i.removeFillRows,
        headerVisible: at,
        outerBorderVisible: i.outerBorderVisible || A,
        headerButtonVisible: !!bo,
        ref: Se,
        focusInfo: O.initialFocus,
        onCellClick: ro,
        frozenColumnCount: (i.preference?.frozenColumnCount ?? 0) + (q4(Mt.selectionMode, Oe.length, i.rowCount, i.hideSelectionControlColumn) ? 1 : 0),
        height: i.height ?? f5.tableHeight,
        rowCount: i.columns?.length === 0 ? 0 : i.rowCount + ho,
        density: _e,
        rowHeight: Te,
        headerHeight: i.headerHeight ?? De,
        width: i.expandToFillWidth && D ? D.width : i.width ?? f5.tableWidth,
        direction: l ? "rtl" : "ltr",
        columnCount: Oe.length + (lt > 0 ? 1 : 0),
        isLastColumnEmpty: lt > 0 ? true : false,
        columnWidth: e => {
            const t = Oe[e] && Oe[e].key;
            return ct(t, e) || f5.columnWidth;
        },
        dataKey: i.dataKey,
        onItemsRendered: !i.loadData ? e => {
            ee(Math.max(e.visibleRowStartIndex, 0));
            oe(Math.min(e.visibleRowStopIndex, i.rowCount));
        } : e => {
            const t = i.loadData;
            const o = t({
                columnStartIndex: Math.max(e.visibleColumnStartIndex - (i.threshold ?? 0), 0),
                columnEndIndex: Math.min(e.visibleColumnStopIndex + (i.threshold ?? 0), Oe.length - 1),
                rowStartIndex: Math.max(e.visibleRowStartIndex - (i.threshold ?? 0), 0),
                rowEndIndex: Math.min(e.visibleRowStopIndex + (i.threshold ?? 0), i.rowCount - 1)
            });
            ee(Math.max(e.visibleRowStartIndex, 0));
            oe(Math.min(e.visibleRowStopIndex, i.rowCount));
            const n = Se.current;
            const a = n?._isScrolling();
            if (XI(o)) {
                Promise.resolve(o).then((() => {
                    const t = Se.current;
                    t && t.resetAfterIndices({
                        columnIndex: e.visibleColumnStartIndex,
                        rowIndex: e.visibleRowStartIndex,
                        shouldForceUpdate: a ? false : true
                    });
                }));
            }
        }
    }, f6));
    const Eo = c(null);
    const Io = () => {
        const e = y || i.dropZoneIndicator;
        if (e === "zone") return t(o, null);
        const n = i.expandToFillWidth && D ? D.width : i.width ?? f5.tableWidth;
        return t("div", {
            ref: Eo,
            className: z4.dropIndicator,
            style: {
                width: n,
                display: "none"
            }
        });
    };
    const _o = i.removeFillRows ? i.height ?? f5.tableHeight : undefined;
    return t(bee, Ee({}, G, {
        position: re.position,
        onItemSelected: e => {
            G?.onItemSelected && G?.onItemSelected(e, {
                rowKey: re.cell?.row || "",
                columnKey: re.cell?.column || ""
            }, {
                x: re.position?.x || 0,
                y: re.position?.y || 0
            });
            pt();
        },
        onDismiss: () => {
            i.cellContextMenu?.onDismiss && i.cellContextMenu?.onDismiss();
            pt();
        },
        onContextMenu: () => {
            if (!qI(O.activeCell)) {
                const {colIndex: e, rowIndex: t} = O.activeCell;
                Bt(e, t);
            }
        },
        suppressIndicator: true,
        disabled: i.disabled || O.activeCell?.rowIndex !== undefined && O.activeCell.rowIndex > -1 && !!E?.(C(O.activeCell.rowIndex)) && !!I?.(C(O.activeCell.rowIndex))
    }), t("div", {
        onFocus: e => {
            to();
            qt(e);
        },
        onBlur: e => {
            if (!ut.current || e.relatedTarget) oo();
            ut.current = false;
        },
        style: {
            ...Ae,
            width: so,
            height: _o,
            position: "relative"
        },
        className: z4.gridWrapper,
        "data-testid": gb(i.testId, "gridWrapper")
    }, t("div", {
        "data-testid": i.testId,
        id: i.id,
        role: i.role ?? "grid",
        "aria-label": i.ariaLabel,
        "aria-roledescription": i.ariaRoleDescription,
        "aria-labelledby": i.ariaLabelledBy,
        "aria-describedby": i.ariaDescribedBy,
        "aria-disabled": i.disabled,
        "aria-readonly": e,
        "aria-colcount": Oe.length,
        "aria-rowcount": Mt.rowCount,
        "aria-multiselectable": Mt.selectionMode === "multiple" || Mt.selectionMode === "desktop" || Mt.selectionMode === "toggle" ? true : Mt.selectionMode === "none" ? undefined : false,
        ref: e => {
            D_(he, e);
            co(e);
        },
        className: ke(z4.table, i.disabled && z4.disabled, e && z4.readOnly, O.focusIndicator === "visible" && z4.showFocus, (j === "desktop" || j === "single") && !i.singleSelectionOverrides?.hideStyles && z4.selectionAccent, j === "none" && z4.selectionModeNone, i.alternateRowShading && z4.alternateRowShading, i.selectionBorderStyle === "dashed" && z4.selectionBorderDashed, (i.selectionBorderStyle === "solid" || i.selectionBorderStyle === "solid-no-bg") && z4.selectionBorderSolid, i.selectionBorderStyle === "solid-no-bg" && z4.selectionBorderSolidNoBg, i.onActivate && !i.doubleClickOnEnter && z4.activate, i.onDoubleClick && z4.doubleClick, i.hideStateStyles && z4.hideStateStyles, i.hideSelectedStateStyles && z4.hideSelectedStateStyles, (i.hideHoverStateStyles || i.selectableOnlyBySelectionControl) && z4.hideHoverStateStyles, i.selectableOnlyBySelectionControl && z4.selectableOnlyBySelectionControl, i.hidePressedStateStyles && z4.hidePressedStateStyles, i.className),
        tabIndex: 0,
        onKeyDown: Ut,
        onKeyUp: Gt,
        onContextMenu: () => {
            le(undefined);
        },
        onMouseDown: Jt,
        onMouseUp: Qt,
        onClick: eo,
        style: {
            width: so,
            height: _o,
            ...i.style
        }
    }, i.dropEnabled && Io(), i.dragEnabled && t(F4, {
        numberOfRows: i.preference?.selectAll === true ? i.rowCount : i.preference?.selectedRows?.size,
        dragRowRef: N,
        style: Ae
    }), Co(), ze ? t("div", {
        role: "row"
    }, t("div", {
        ref: Ce,
        role: "gridcell"
    }, t(bee, {
        onContextMenu: e => {
            if (!e || Mt.hasContextMenu() !== true) return;
            const t = "";
            const o = "";
            Mt.updateContextInfo({
                position: {
                    x: e.pageX,
                    y: e.pageY
                },
                cell: {
                    row: t,
                    column: o
                }
            });
            Mt.updateContextMenuItems(Mt.cellContextMenu, {
                rowKey: t,
                columnKey: o
            });
            Mt.setContextMenuOpen(true);
            Mt.storePreviousFocusIndicator(Mt.focusIndicator);
        }
    }, t(w2, {
        testId: gb(i.testId, "zero-state"),
        height: i.height ?? f5.tableHeight,
        columnHeadersVisible: at,
        width: i.expandToFillWidth && D ? D.width : i.width ?? f5.tableWidth,
        headerHeight: Kt,
        customProps: i.emptyDataProps,
        customNoColumnProps: i.emptyColumnProps,
        variant: i.rowCount === 0 || p ? "noData" : "hiddenColumns",
        onManageColumns: () => {
            mo(false);
            X(true);
        },
        disabled: i.disabled
    })))) : null), bo && t("div", {
        ref: So && io ? io : undefined,
        "data-testid": gb(i.testId, "manage-columns-button-wrapper"),
        className: ke(z4.headerActionButton, ao ? z4.fauxcus : null, O.focusIndicator === "visible" && z4.showFocus),
        style: {
            height: vo,
            insetBlockStart: yo,
            insetInlineEnd: xo
        }
    }, t(MM, Ee({}, bo, {
        style: {
            height: "auto"
        }
    }))), t("div", {
        ref: we,
        tabIndex: 0
    })), t(p6, {
        testId: gb(i.testId, "manage-columns"),
        isOpen: Y,
        columns: Ct(),
        orderedColumnKeys: wt(),
        onConfirm: e => {
            const t = i.unmanagedColumnKeys;
            let o = e;
            if (t) {
                o = t.reduce(((e, t) => {
                    const o = Pe?.findIndex((e => e === t));
                    if (o !== -1) {
                        return [ ...e.slice(0, o), t, ...e.slice(o) ];
                    }
                    return [ ...e, t ];
                }), o);
            }
            const n = i.preference?.orderedColumnKeys ?? [];
            for (const [e, t] of n.entries()) {
                if (e < (i.preference?.frozenColumnCount ?? 0) && !o.includes(t)) {
                    i.setFreezeColumn?.({
                        columnKey: t,
                        unfreeze: true
                    });
                }
            }
            if (o.length === 0) T(true);
            f.current = true;
            i.setOrderedColumnKeys?.({
                orderedKeys: o
            });
            const a = t ? t.length : 0;
            b.current = e.length > 0 || a > 0;
            X(false);
        },
        onClose: () => {
            setTimeout((function() {
                let e = false;
                if (uo) {
                    Ye({
                        region: n2.ColumnHeaderButton,
                        rowIndex: -1,
                        colIndex: -1
                    });
                    e = true;
                } else {
                    const t = b.current && i.rowCount > 0;
                    if (t) {
                        Ye({
                            region: n2.Data,
                            rowIndex: 0,
                            colIndex: q4(j || "multiple", b.current ? 1 : 0, i.rowCount, i.hideSelectionControlColumn) ? 1 : 0
                        });
                        e = true;
                    }
                }
                u.current && P(l2.actions.createFocusIndicator({
                    focusIndicator: "visible"
                }));
                if (!i.disableAutoFocus && e) {
                    he.current?.focus();
                }
                u.current && mo(false);
            }), 0);
        },
        onDismiss: () => {
            X(false);
        },
        hideManageColumnsSearch: i.hideManageColumnsSearch,
        hideManageColumnsSelectedSearch: i.hideManageColumnsSelectedSearch
    }));
};

const e5 = f(Q4);

const t5 = (e, t) => {
    const o = t?.focusIndicatorWidth || e.tokensExperimental["size-action-border-width-focus"];
    const n = parseInt(o.replace("px", ""), 10);
    const {emptyDropZone: a, cellBordersVisible: r, selectionBorderStyle: s, outerBorderVisible: i, ignoreTableOverrideTheme: l} = t ?? {};
    const c = t?.readOnly ? e.tokensExperimental["size-border-width-m"] : e.tokensExperimental["size-border-width-s"];
    const d = t?.readOnly ? e.tokensExperimental["color-neutral"] : e.tokensExperimental["color-secondary"];
    const u = !l && Object.entries(e.overrides.table).map((([e, t]) => t !== undefined)).reduce(((e, t) => e ? e : e && t), true) ? j4(e) : {};
    let m = Ze(.05, e.tokensExperimental["color-container-border-4"]);
    switch (e.themeVariant) {
      case "high-contrast":
        m = Ze(.2, e.tokensExperimental["color-container-border-4"]);
        break;

      case "dark":
        m = Xe(.02, e.tokensExperimental["color-container-border-4"]);
        break;
    }
    const p = {
        fg: e.tokensExperimental["color-action-text-subtle-normal"],
        bg: a ? Jv(e.tokensExperimental["color-primary"], .1) : e.tokensExperimental["color-action-background-control-normal"],
        bd: a ? e.tokensExperimental["color-primary"] : e.tokensExperimental["color-container-border-4"],
        "header-right-bd": m,
        "header-bottom-bd": a ? e.tokensExperimental["color-primary"] : m,
        "hover-bg": e.tokensExperimental["color-action-background-standard-hover"],
        "pressed-bg": e.themeVariant === "high-contrast" ? e.tokensExperimental["color-container-background-0"] : e.tokensExperimental["color-action-background-subtle-selected"],
        "pressed-filter": e.themeVariant === "high-contrast" ? "invert(1) grayscale(1)" : "none",
        "selected-filter": e.themeVariant === "high-contrast" ? "invert(1) grayscale(1)" : "none",
        "selected-inactive-bg": e.themeVariant === "high-contrast" ? e.tokensExperimental["color-action-background-control-normal"] : e.tokensExperimental["color-action-background-subtle-selected-inactive"],
        "selected-inactive-filter": e.themeVariant === "high-contrast" ? "invert(0.85) grayscale(1)" : "none",
        "focus-selected-bg-color": e.themeVariant === "high-contrast" ? "var(--focus-dark-bg-color)" : "var(--focus-light-bg-color)",
        "alternate-row-bg": e.themeVariant === "high-contrast" ? Jv(e.tokensExperimental["color-neutral"], .2) : Jv(e.tokensExperimental["color-container-background-1"], .75),
        "context-area-outline-color": e.tokensExperimental["color-action-border-focus"],
        "context-area-outline": `var(--table-context-area-outline-color) solid ${e.tokensExperimental["size-action-border-width-focus"]}`,
        "context-area-outline-offset": `-${e.tokensExperimental["size-action-border-width-focus"]}`,
        "cell-bd": a ? e.tokensExperimental["color-primary"] : m,
        "cell-border": r !== false ? "1px solid var(--table-cell-bd)" : "none",
        "frozen-column-divider-color": e.tokensExperimental["color-neutral"],
        "row-bd": m,
        "disabled-bg": e.tokensExperimental["color-action-background-control-disabled"],
        "font-size-m": e.tokensExperimental["font-size-body-text-m"],
        "font-weight-thick": e.tokensExperimental["font-style-weight-700"],
        "row-height": "40px",
        "header-height": "40px",
        "font-family": e.tokensExperimental["font-family-primary"],
        "sort-icon-margin": e.tokensExperimental["space-inline-s"],
        "selected-row-hover-override": e.themeVariant !== "high-contrast" && "none",
        "selected-row-bg": e.themeVariant === "high-contrast" ? "var(--table-fg)" : "var(--table-selected-inactive-bg)",
        "selected-row-fg": e.themeVariant === "high-contrast" ? "var(--table-selected-inactive-bg)" : "var(--table-fg)",
        "selected-focus-bg-color": e.themeVariant === "high-contrast" ? e.tokensExperimental["color-action-focus"] : "var(--focus-light-bg-color)",
        "header-column-separator-display": t?.hideColumnBorders ? "none" : "block",
        "cell-horizontal-border": t?.hideColumnBorders ? "solid transparent" : "solid var(--table-cell-bd)",
        "drop-zone-bd": e.tokensExperimental["color-primary"],
        "drop-zone-bg": Jv(e.tokensExperimental["color-primary"], .1),
        "frozen-column-divider-width": e.themeVariant === "high-contrast" ? "2px" : "1px",
        "selection-border-style": s === "dashed" ? "dashed" : "solid",
        "selection-border-width": "2px",
        "spacing-xs": e.tokensExperimental["space-base-xs"],
        "spacing-xxs": e.tokensExperimental["space-base-xxs"],
        "scroll-bar-space": r !== false || i !== false ? `${FA() + 2}px` : `${FA() + 1}px`,
        "selection-border-color": e.themeVariant === "high-contrast" ? e.tokensExperimental["color-action-border-subtle-normal"] : e.tokensExperimental["color-action-border-control-selected"],
        "selection-border-focus": e.themeVariant === "high-contrast" || n >= 3 ? "var(--focus-width)" : "3px",
        "anim-dur": e.tokensExperimental["duration-200"],
        "anim-tm-enter": e.tokensExperimental["ease-in"],
        "anim-tm-exit": e.tokensExperimental["ease-out"]
    };
    const f = {
        "cell-horiz-padding": J4([ e.spacing.inline.l, e.spacing.inline.m, e.spacing.inline.s ], t?.density),
        "font-size": J4([ e.tokensExperimental["font-size-body-text-l"], e.tokensExperimental["font-size-body-text-m"], e.tokensExperimental["font-size-body-text-s"] ], t?.density),
        "icon-size": J4([ e.tokensExperimental["size-icon-l"], e.tokensExperimental["size-icon-m"], e.tokensExperimental["size-icon-s"] ], t?.density)
    };
    const g = {
        fg: e.themeVariant === "high-contrast" ? e.tokensExperimental["color-text-neutral"] : e.tokensExperimental["color-action-text-subtle-selected"],
        bg: e.themeVariant === "high-contrast" ? e.tokensExperimental["color-action-background-control-normal"] : e.tokensExperimental["color-action-background-subtle-selected"],
        bd: e.themeVariant === "high-contrast" ? e.tokensExperimental["color-action-focus"] : e.tokensExperimental["color-action-border-standard-selected"],
        filter: e.themeVariant === "high-contrast" ? "invert(1) grayscale(1)" : "none",
        "accent-bg": d,
        "border-highlight-bd": e.themeVariant === "high-contrast" ? e.tokensExperimental["color-neutral"] : e.tokensExperimental["color-action-border-standard-selected"],
        "internal-filter": "none",
        "inline-start-bw": c
    };
    const h = {
        "spacing-xxs": e.tokensExperimental["space-base-xxs"],
        bd: e.tokensExperimental["color-container-border-4"],
        "dragged-bg": e.tokensExperimental["color-action-background-control-normal"],
        "indicator-line-bg": e.tokensExperimental["color-primary"],
        "indicator-loop": e.tokensExperimental["color-text-neutral-inverse"],
        "dragged-sh": e.tokensExperimental["shadow-depth-xl"]
    };
    return {
        ...__({
            ...p,
            ...f,
            ...u
        }, "table"),
        ...__(g, "table-selected"),
        ...__(h, "table-dnd"),
        "--scrollbar-hover-track-bg": e.c.colorUiDark,
        ...!e.enableNovaTokens && o5(e, t)
    };
};

const o5 = (e, t) => {
    const o = t?.focusIndicatorWidth || e.stateFocus.onLightBg.bdWidth;
    const n = parseInt(o.replace("px", ""), 10);
    const a = !t?.ignoreTableOverrideTheme && Object.entries(e.overrides.table).map((([e, t]) => t !== undefined)).reduce(((e, t) => e ? e : e && t), true) ? j4(e) : {};
    const r = {
        "pressed-bg": e.stateStandard.active.bg,
        "pressed-filter": e.stateStandard.active.filter,
        "disabled-bg": e.stateStandard.disabled.bg,
        "font-size-m": e.font.size.m,
        "font-weight-thick": e.font.weight.thick,
        "context-area-outline-color": e.stateFocus.onRightClick.bd,
        "context-area-outline": `var(--table-context-area-outline-color) ${e.stateFocus.onRightClick.bdStyle} ${e.stateFocus.onRightClick.bdWidth}`,
        "context-area-outline-offset": `-${e.stateFocus.onRightClick.bdWidth}`,
        "cell-border": t?.cellBordersVisible !== false ? "1px solid var(--table-cell-bd)" : "none",
        "hover-bg": e.stateStandard.hover.bg,
        "selected-filter": e.stateStandard.selected.filter,
        "selected-inactive-bg": e.stateStandard.selectedInactive.bg,
        "selected-inactive-filter": e.stateStandard.selectedInactive.filter,
        "selection-border-color": e.themeVariant === "high-contrast" ? e.stateFocus.onDarkBg.bd : e.stateFocus.onLightBg.bd,
        "selection-border-focus": e.themeVariant === "high-contrast" || n >= 3 ? "var(--focus-width)" : "3px"
    };
    let s = {};
    switch (e.themeVariant) {
      case "dark":
        s = {
            fg: e.c.white,
            bg: e.c.p_3,
            bd: e.c.white15,
            "alternate-row-bg": Jv(e.c.white, .05),
            "frozen-column-divider-color": e.c.n,
            "row-bd": e.c.white15,
            "cell-bd": e.c.white15,
            "header-right-bd": e.c.white15,
            "header-bottom-bd": e.c.white15
        };
        break;

      case "high-contrast":
        s = {
            fg: e.c.white,
            bg: e.c.black,
            bd: e.c.n2,
            "alternate-row-bg": Jv(e.c.white, .05),
            "frozen-column-divider-color": e.c.n,
            "row-bd": e.c.n2,
            "cell-bd": e.c.n2,
            "header-right-bd": e.c.n2,
            "header-bottom-bd": e.c.n2
        };
        break;

      default:
        s = {
            fg: e.c.n_3,
            bg: e.c.white,
            bd: e.c.n3,
            "alternate-row-bg": Jv(e.c.n5, .5),
            "frozen-column-divider-color": e.c.n,
            "row-bd": e.c.n3,
            "cell-bd": e.c.n3,
            "header-right-bd": e.c.n3,
            "header-bottom-bd": e.c.n3
        };
    }
    let i = {};
    switch (e.baseReportThemeName) {
      case "highcontrast2017":
      case "highcontrast2020":
        i = {
            ...e.stateStandard.selected,
            "accent-bg": e.c.secondary,
            "border-highlight-bd": e.stateStandard.selected.bd,
            "internal-filter": "invert(1)"
        };
    }
    const l = {
        "dragged-bg": e.backgroundsDepth.standard.bg
    };
    let c = {};
    switch (e.themeVariant) {
      case "high-contrast":
        c = {
            ...l,
            bd: e.backgroundsDepth.standard.bd,
            "indicator-line-bg": e.c.n_3,
            "indicator-loop": e.c.white,
            "dragged-sh": e.backgroundsDepth.standard.sh
        };

      case "dark":
        c = {
            ...l,
            bd: e.backgroundsDepth.standard.bd,
            "indicator-line-bg": e.c.white15,
            "indicator-loop": e.c.white,
            "dragged-sh": e.backgroundsDepth.standard.sh
        };

      default:
        c = {
            ...l,
            bd: "transparent",
            "indicator-line-bg": Jv(e.c.n1, .2),
            "indicator-loop": e.c.n_3,
            "dragged-sh": e.backgroundsDepth.medium.sh
        };
    }
    return {
        ...__({
            ...r,
            ...s,
            ...a
        }, "table"),
        ...__(i, "table-selected"),
        ...__(c, "table-dnd")
    };
};

function n5(e) {
    const t = c(e.onSingleClick);
    a((() => {
        t.current = e.onSingleClick;
        return () => t.current = undefined;
    }), [ e.onSingleClick ]);
    const o = c(0);
    const n = c(undefined);
    const r = s(((a, r) => {
        o.current += 1;
        if (n.current !== undefined) {
            clearTimeout(n.current);
            n.current = undefined;
        }
        if (e.persist) {
            a.persist();
            r = a;
        }
        n.current = setTimeout((() => {
            n.current = undefined;
            o.current = 0;
            const e = t.current;
            if (e) e(r);
        }), 250);
    }), [ e.persist ]);
    const i = s((t => {
        if (o.current < 2) return;
        o.current = 0;
        if (n.current === undefined) return;
        clearTimeout(n.current);
        n.current = undefined;
        const a = e.onDoubleClick;
        a(t);
    }), [ e.onDoubleClick ]);
    return {
        onClick: r,
        onDoubleClick: i
    };
}

var a5 = "sas_components-TreeTable-TreeTableNode_item";

var r5 = "sas_components-TreeTable-TreeTableNode_expand-icon";

var s5 = "sas_components-TreeTable-TreeTableNode_node-icon";

var i5 = "sas_components-TreeTable-TreeTableNode_node-label";

var l5 = "sas_components-TreeTable-TreeTableNode_expand-icon-cursor-pointer";

var c5 = "sas_components-TreeTable-TreeTableNode_selected";

var d5 = {
    item: a5,
    expandIcon: r5,
    nodeIcon: s5,
    nodeLabel: i5,
    expandIconCursorPointer: l5,
    selected: c5
};

const u5 = (e, t) => {
    const o = e.target;
    let n = o;
    let a = false;
    if (t.containsInteractiveContent) {
        while (n?.parentElement) {
            n = n.parentElement;
            if (n?.classList.contains(d5.item)) {
                a = true;
                break;
            } else if (o.classList.contains(z4.gridCellContentContainer)) break;
        }
    }
    if (!t.containsInteractiveContent || o.classList.contains(z4.gridCellContent) || o.classList.contains(z4.gridCellContentContainer) || a) return false;
    return true;
};

const m5 = e => {
    const {getRowIdentifier: o, getRowIndex: r, showContextArea: i, buildCellBorderStyles: l, selectionMode: d, rowCount: u, setSelectRow: m, selectableOnlyBySelectionControl: p, readOnly: f} = e.itemData;
    const [g, h] = n(false);
    const b = s((t => {
        if (f) return;
        const n = e.itemData.columns;
        const a = n?.find((t => t.key === e.columnKey));
        const s = o(e.rowIndex);
        const i = e.itemData.disabled || !!e.itemData.isRowDisabled?.(s);
        const l = e.itemData.readOnly || !!e.itemData.isRowReadOnly?.(s);
        if (!i && !l) a?.onPress?.(e.rowIndex, e.columnKey);
        if (a && (u5(t, a) || a?.preventToggleSelection)) return;
        const c = d === "single" || d === "singleRadio";
        const g = (() => {
            if (d === "toggle") return "selectionRange";
            return !c && (t.metaKey || t.ctrlKey) ? false : true;
        })();
        if (!p && d !== "none" && !i && !l) {
            e.itemData?.setInteractiveAction?.(true);
            m?.({
                index: e.rowIndex,
                selected: Y4(e.itemData, e.rowIndex),
                selectionType: "cell",
                clearPrevious: g,
                rowCount: u,
                rangeSelection: c ? false : t.shiftKey,
                rowKey: o,
                getRowIndex: r,
                hideSelectAll: e.itemData.hideSelectAll || e.itemData.selectionMode !== "multiple" && e.itemData.selectionMode !== "toggle",
                columnHeadersVisible: e.itemData.columnHeadersVisible,
                areRowsVisible: e.itemData.areRowsVisible,
                isRowDisabled: e.itemData.isRowDisabled,
                isRowReadOnly: e.itemData.isRowReadOnly,
                interactive: true
            });
        }
    }), [ f, u, d, p, o, r, e.rowIndex, e.columnKey, e.itemData, m ]);
    const v = s((() => {
        const {onDoubleClick: t} = e.itemData;
        t?.({
            rowKey: o(e.rowIndex),
            rowIndex: e.rowIndex,
            columnKey: e.columnKey
        });
    }), [ e.columnKey, e.itemData, e.rowIndex, o ]);
    const y = e.itemData.disabled || e.rowIndex > -1 && !!e.itemData.isRowDisabled?.(o(e.rowIndex));
    const x = n5({
        persist: true,
        onSingleClick(e) {
            b(e);
        },
        onDoubleClick() {
            v();
        }
    });
    const S = {
        onClick: b
    };
    if (e.itemData.onDoubleClick) {
        if (e.itemData.disableClickDelay) {
            S.onDoubleClick = v;
        } else {
            S.onClick = x.onClick;
            S.onDoubleClick = x.onDoubleClick;
        }
    }
    const w = e.itemData.columns;
    const C = w.find((({key: t}) => t === e.columnKey));
    const [E, I] = n(true);
    const [_, D] = n(false);
    const L = () => I(true);
    const T = c(null);
    const R = c(false);
    const k = c(false);
    Qv(T, L, true);
    a((() => {
        _ && I(true);
    }), [ _ ]);
    const [A, M] = n(false);
    const N = YI();
    a((() => {
        e.focus && !A && e.contentRef?.current?.focus();
    }), [ N, e.focus, e.contentRef, A ]);
    const O = e.itemData.pressedCell?.colIndex;
    const P = w && O !== undefined && w[O]?.key;
    const B = e.itemData.pressedCell?.region === n2.Data || e.itemData.pressedCell?.region === n2.RowHeader;
    const z = e.rowIndex === e.itemData.pressedCell?.rowIndex;
    const F = P === e.columnKey;
    const j = B && z && (e.itemData.pressEntireRow || F);
    const V = e.itemData.getSelectionState?.(o(e.rowIndex));
    const H = V !== undefined ? !!V : e.itemData.preference?.selectAll === true || e.itemData.preference?.selectedRows?.has(o(e.rowIndex));
    const U = e => {
        if (e.key === "Enter") G(e);
    };
    const G = t => {
        if (!N.current) return;
        const o = e.itemData.columns;
        const n = o?.find((t => t.key === e.columnKey));
        if (t.target !== t.currentTarget && n && u5(t, n)) {
            t.stopPropagation();
        }
    };
    const K = t("div", Ee({}, S, {
        ref: T,
        style: {
            ...C?.style,
            textAlign: C?.alignment ?? "start",
            ...e.style
        },
        onMouseEnter: t => {
            e.itemData.onCellMouseEnter?.(t, e.rowIndex, e.columnKey);
        },
        onMouseDown: e => {
            if (e.shiftKey) e.preventDefault();
            if (e.button === 2) h(true);
        },
        onMouseUp: e => {
            if (e.button === 2) h(false);
        },
        onKeyDown: e => {
            k.current = true;
            if (!N.current) return;
            if (e.key === "F2" && !e.shiftKey && !e.ctrlKey && !e.altKey) {
                R.current = false;
                if (E) I(false); else D(true);
            } else if (e.key === "Escape" && !E) {
                R.current = false;
                D(true);
            } else if (e.key === "Enter" && E) {
                R.current = true;
                I(false);
            } else R.current = true;
        },
        onFocus: t => {
            const o = t.target.closest(`.${z4.gridCellContentContainer}`) !== null;
            const n = t.relatedTarget?.closest(`.${z4.gridCellContentContainer}`) !== null;
            const a = k.current ? false : !o;
            if (E && (o || n) && !a) {
                I(false);
            }
            k.current = false;
            e.itemData.onCellFocus?.(t, e.rowIndex, e.columnKey);
        },
        onBlur: () => {
            if (!R.current && !E) {
                I(true);
            }
            R.current = false;
            k.current = false;
        },
        className: ke(e.className, z4.gridCellContentContainer, H && (!e.itemData.singleSelectionOverrides?.hideStyles || e.itemData.selectionMode !== "single" && e.itemData.selectionMode !== "singleRadio") ? e.itemData.dragging === true ? undefined : z4.selected : undefined, g && z4.gridCellNoSelection, i(o(e.rowIndex), e.columnKey) ? z4.contextArea : undefined, l(e.itemData.getRowIdentifier(e.rowIndex)), C?.className, j && z4.pressed),
        "data-context-menu-visible": i(o(e.rowIndex), e.columnKey)
    }), t("span", {
        className: z4.gridCellContent,
        onBlur: () => M(true),
        onClick: e => G(e),
        onKeyDown: e => U(e),
        onKeyUp: e => U(e)
    }, e.children));
    const W = s((() => {
        setTimeout((() => {
            if (_) e.itemData.refTop.current?.focus();
            if (N.current) D(false);
        }), 0);
    }), [ _, N, e.itemData.refTop ]);
    return t(bee, {
        onContextMenu: t => {
            if (!t || y || e.itemData.hasContextMenu() !== true) return;
            const n = e.rowIndex === -1 ? undefined : o(e.rowIndex);
            e.itemData.updateContextInfo({
                position: {
                    x: t.pageX,
                    y: t.pageY
                },
                cell: {
                    row: n,
                    column: e.columnKey
                }
            });
            e.itemData.updateContextMenuItems(e.itemData.cellContextMenu, {
                rowKey: n || "",
                columnKey: e.columnKey
            });
            e.itemData.setContextMenuOpen(true);
            e.itemData.storePreviousFocusIndicator(e.itemData.focusIndicator);
        },
        disabled: y
    }, !C?.containsInteractiveContent ? K : t(De, {
        disabled: E,
        onDeactivation: W,
        className: z4.gridCellContentFocuslock
    }, K));
};

const p5 = () => null;

const f5 = {
    tableWidth: 600,
    tableHeight: 400,
    rowHeight: 40,
    lowDenistyRowHeight: 52,
    highDensityRowHeight: 28,
    columnWidth: 150,
    selectionControlColumnWidth: 40,
    minimumUnfrozenColumnWidth: 100,
    minimumColumnWidth: 64,
    maximumColumnWidth: 1e3,
    dropIndicatorLineHeight: 2
};

const g5 = {
    sizes: f5,
    selectionMode: "multiple",
    getRowKey: e => e.toString(),
    renderCell: p5
};

const h5 = e => {
    const t = {
        ascending: {
            primary: VL,
            secondary: ak
        },
        descending: {
            primary: jL,
            secondary: nk
        }
    };
    const {sortLevel: o, sortDirection: n} = e;
    const a = o && o > 1 ? "secondary" : "primary";
    if (n && n !== "data" && Object.keys(t).includes(n)) {
        return t[n][a];
    }
    return t.ascending.primary;
};

const b5 = (e, t, o) => {
    const n = [];
    if (e.sortDirection === "ascending") {
        n.push(o("sortedColumnAsc.msg"));
    } else if (e.sortDirection === "descending") {
        n.push(o("sortedColumnDesc.msg"));
    }
    if (e.sortLevel && e.sortLevel > 0 && t > 1) {
        n.push(o("sortedColumnLevel.msg", {
            sortLevel: e.sortLevel.toString(),
            totalSortedColumns: t.toString()
        }));
    }
    return n.join(", ");
};

const v5 = e => {
    const {startDrag: r} = b6({
        onChange({deltaX: t}) {
            e.onDrag(t);
        },
        onCommit: e.onDragEnd
    });
    const s = ay();
    const {column: i, columnIndex: l, itemData: d} = e;
    const u = c();
    const m = c(null);
    const [p, f] = n();
    const g = e => {
        u.current = e;
        d.updateHelpRefs(i.key, d.getRowIdentifier(-1), u);
        return u;
    };
    const {sortDirection: h} = i;
    const b = h && h !== "data";
    const v = d.columns.reduce(((e, t) => t.sortLevel && t.sortLevel > e ? t.sortLevel : e), 0);
    a((() => {
        if (!m.current || i.alignment !== "center" || !b && !i.helpProps) {
            f(undefined);
            return;
        }
        const e = m.current.offsetWidth;
        f(e);
    }), [ i.alignment, i.helpProps, b, f ]);
    if (!i) {
        return t(o, null);
    }
    let y = "flex-start";
    switch (i.alignment) {
      case "center":
        y = "center";
        break;

      case "end":
        y = "flex-end";
        break;

      case "right":
        y = s ? "flex-start" : "flex-end";
        break;

      case "left":
        y = s ? "flex-end" : "flex-start";
        break;
    }
    const x = typeof i.headerCellContent === "function" ? i.headerCellContent(e.columnIndex, d.disabled, d.readOnly) : t(oO, {
        className: z4.heading,
        wrapText: false,
        level: 5,
        icon: i.icon ? {
            icon: i.icon
        } : undefined,
        style: {
            justifyContent: y
        },
        disabled: d.disabled
    }, i.label) || "";
    let S = "";
    if (i.resizable !== false) {
        S = t("div", {
            className: !d.disabled ? z4.resizeIcon : undefined,
            role: "separator",
            "data-testid": `separator-${e.columnIndex}`,
            onClick: e => {
                e.stopPropagation();
            },
            onMouseDown: t => {
                if (t.button !== 0) return;
                r([ t.clientX, t.clientY ]);
                e.onDragStart();
                t.preventDefault();
            },
            onMouseUp: e => {
                if (e.button !== 0) return;
                e.preventDefault();
            }
        });
    }
    const w = __({
        "pd-inline-start-adjustment": p ? `${p}px` : undefined
    }, "table-cell");
    return t(bee, {
        onContextMenu: e => {
            if (!e) return;
            d.updateContextInfo({
                position: {
                    x: e.pageX,
                    y: e.pageY
                },
                cell: {
                    column: i.key
                }
            });
            const t = d.headerContextMenu(i, l, q4(d.selectionMode, d.columns.length, d.rowCount, d.hideSelectionControlColumn));
            d.updateContextMenuItems(t);
            t?.sections && t.sections.length > 0 && d.setContextMenuOpen(true);
            d.storePreviousFocusIndicator(d.focusIndicator);
        },
        disabled: d.disabled
    }, t("div", {
        className: ke(z4.gridCellContentContainer, d.showContextArea(undefined, i.key) ? z4.contextArea : undefined),
        "data-context-menu-visible": d.showContextArea(undefined, i.key),
        style: {
            position: "relative",
            textAlign: i.alignment ?? "start",
            ...w,
            ...e.style
        },
        onMouseEnter: t => {
            e.itemData.onCellMouseEnter?.(t, -1, i.key);
        },
        onMouseDown: e => {
            d.setSortColumn(i.key);
            if (e.shiftKey) e.preventDefault();
        },
        onMouseUp: t => {
            if (!d.disabled && t.button === 0 && i.sortable && d.sortRef.current === i.key) e.sort(t);
            d.setSortColumn("");
        },
        onFocus: t => {
            e.itemData.onCellFocus?.(t, -1, i.key);
        }
    }, t("span", {
        className: z4.gridCellContent
    }, x, i.helpProps || b ? t("div", {
        className: z4.headerAccessoryContainer,
        ref: m
    }, i.helpProps ? t(o, null, t(iP, Ee({}, i.helpProps, {
        className: ke(z4.headerAccessory, z4.headerAccessoryHelpPopup),
        buttonRef: g,
        disabled: d.disabled
    })), t("span", {
        title: d.localize("help.msg")
    })) : null, b ? t(MM, {
        className: ke(z4.headerAccessory, z4.headerAccessorySort),
        icon: h5(i),
        tooltip: b5(i, v, d.localize),
        disabled: d.disabled,
        testId: `sortIcon-${h}${e.column.sortLevel && e.column.sortLevel > 1 ? "-secondary" : "-primary"}-${e.columnIndex}`
    }) : null) : null), S, d.isColumnResizing(i.key) ? t("div", {
        className: z4.resizeColumnInProgressIcon
    }) : null));
};

var y5 = {
    horizontal: "sas_components-Splitter-Splitter_container_horizontal",
    vertical: "sas_components-Splitter-Splitter_container_vertical"
};

var x5 = "sas_components-Splitter-Splitter_section";

var S5 = "sas_components-Splitter-Splitter_collapsed";

var w5 = "sas_components-Splitter-Splitter_hasPadding";

var C5 = {
    vertical: "sas_components-Splitter-Splitter_bar_vertical",
    horizontal: "sas_components-Splitter-Splitter_bar_horizontal"
};

var E5 = "sas_components-Splitter-Splitter_hide-splitter-bar";

var I5 = "sas_components-Splitter-Splitter_resize-icon";

var _5 = {
    horizontal: "sas_components-Splitter-Splitter_collapse-icon_horizontal",
    vertical: "sas_components-Splitter-Splitter_collapse-icon_vertical"
};

var D5 = "sas_components-Splitter-Splitter_resizable";

var L5 = {
    container: y5,
    section: x5,
    collapsed: S5,
    hasPadding: w5,
    bar: C5,
    hideSplitterBar: E5,
    resizeIcon: I5,
    collapseIcon: _5,
    resizable: D5
};

const T5 = fb(Pt);

const R5 = MA("splitter");

const k5 = MA("splitter-section");

const A5 = u((function e({resizable: n = true, ...a}, r) {
    const {startDrag: s, isDragging: i} = M5({
        onChange({deltaX: e, deltaY: t}) {
            let o = a.orientation === "vertical" ? t : e;
            if (a.barPos === "left") {
                o *= -1;
            }
            return a.onDrag(o);
        },
        onCommit: a.onDragEnd
    });
    const l = ay();
    const d = {
        horizontal: {
            left: {
                icon: PL,
                offset: l ? {
                    right: "-0.2rem"
                } : {
                    left: "-0.2rem"
                },
                closeIcon: NL,
                closeOffset: l ? {
                    left: "-0.2rem"
                } : {
                    right: "-0.2rem"
                }
            },
            right: {
                icon: NL,
                offset: l ? {
                    left: "-0.2rem"
                } : {
                    right: "-0.2rem"
                },
                closeIcon: PL,
                closeOffset: l ? {
                    right: "-0.2rem"
                } : {
                    left: "-0.2rem"
                }
            }
        },
        vertical: {
            left: {
                icon: kL,
                offset: {
                    top: "-0.3rem"
                },
                closeIcon: zL,
                closeOffset: {
                    bottom: "-0.5rem"
                }
            },
            right: {
                icon: zL,
                offset: {
                    bottom: "-0.5rem"
                },
                closeIcon: kL,
                closeOffset: {
                    top: "-0.3rem"
                }
            }
        }
    };
    const u = C_();
    const m = T5();
    let p = a.orientation === "horizontal" ? m("splitterBar.verticalResize.aria") : m("splitterBar.horizontalResize.aria");
    p += a.collapsible ? ` ${m("splitterBar.collapsible.aria")}` : "";
    const f = a.isCollapsed ?? false;
    const g = R5();
    const h = k5();
    const b = c(null);
    const v = (a.barPos === "left" || a.barPos === "right") && t("div", {
        "data-testid": gb(a.testId, "splitterBar"),
        className: ke(L5.bar[a.orientation], a.hideSplitterBar && L5.hideSplitterBar, !n && L5.resizable),
        role: "separator",
        tabIndex: n || a.collapsible || a.fullyCollapsible ? 0 : -1,
        onMouseDown: e => {
            if (!n) return;
            if (e.button !== 0) return;
            if (e.target === e.currentTarget) {
                (e?.currentTarget).focus();
            }
            s([ e.clientX, e.clientY ]);
            const t = e?.target?.tagName;
            if (e?.target === b.current || t === "path" || t === "svg" || t === "use") return;
            a.onDragStart();
            e.preventDefault();
        },
        onKeyDown: e => a.onKeyDown(e),
        "aria-label": a.barAriaLabel,
        "aria-labelledby": a.barAriaLabelledBy,
        "aria-describedby": g,
        "aria-orientation": a.orientation === "horizontal" ? "vertical" : "horizontal",
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        "aria-valuenow": a.barAriaValueNow ?? 0,
        "aria-controls": h
    }, t(bO, {
        id: g
    }, p), !a.hideGripIcon && n && t(MM, {
        className: L5.resizeIcon,
        tokens: () => ({
            fg: u.themeVariant === "high-contrast" && !a.hideSplitterBar ? u.tokensExperimental["color-text-neutral-inverse"] : u.tokensExperimental["color-text-neutral"]
        }),
        icon: a.orientation === "horizontal" ? XT : WT
    }), (a.collapsible || a.fullyCollapsible) && !a.hideCollapseIcon && (a.paneIndex === 0 || a.isLastSection) && t("div", {
        className: L5.collapseIcon[a.orientation],
        style: !!f ? d[a.orientation][a.barPos].closeOffset : d[a.orientation][a.barPos].offset,
        ref: b
    }, t(MM, {
        icon: !!f ? d[a.orientation][a.barPos].closeIcon : d[a.orientation][a.barPos].icon,
        tokens: () => ({
            fg: u.tokensExperimental["color-text-neutral"]
        }),
        onClick: e => {
            a.onToggleCollapsed();
            e.stopPropagation();
        }
    })));
    return t(o, null, a.barPos === "left" && v, t("section", {
        id: h,
        role: a.sectionLandmarkLabel ? "region" : undefined,
        ref: r,
        className: ke(L5.section, a.className),
        style: {
            flexBasis: a.size === undefined ? "auto" : a.size,
            flexGrow: a.size === undefined ? 1 : 0,
            flexShrink: a.size === undefined ? 1 : 0,
            pointerEvents: i ? "none" : "auto"
        },
        "aria-label": !a.sectionAriaLabelledBy ? a.sectionAriaLabel : undefined,
        "aria-labelledby": a.sectionAriaLabelledBy,
        "aria-describedby": a.sectionAriaDescribedBy,
        "data-landmark-label": a.sectionLandmarkLabel
    }, a.children), a.barPos === "right" && v);
}));

function M5(e) {
    const [t, o] = n(false);
    const r = c([ NaN, NaN ]);
    a((() => {
        if (!t) return;
        function n(e, t) {
            const o = {
                deltaX: e - r.current[0],
                deltaY: t - r.current[1]
            };
            return o;
        }
        function a(t) {
            if (!e.onChange) return;
            const o = e.onChange;
            const a = o(n(t.clientX, t.clientY));
            if (a) r.current = [ t.clientX, t.clientY ];
        }
        function s(t) {
            if (t.button !== 0) return;
            const a = t?.target?.tagName;
            const r = n(t.clientX, t.clientY);
            e.onChange({
                ...r
            });
            e.onCommit(a === "path" || a === "svg" ? "toggle" : "resize");
            o(false);
        }
        function i(e) {
            o(false);
            document.removeEventListener("mousemove", a);
            document.removeEventListener("mouseup", s);
        }
        document.addEventListener("mousemove", a);
        document.addEventListener("mouseup", s);
        if (_D()) {
            top.addEventListener("mouseup", i);
        }
        return () => {
            document.removeEventListener("mousemove", a);
            document.removeEventListener("mouseup", s);
            if (_D()) {
                top.removeEventListener("mouseup", i);
            }
        };
    }), [ e, t ]);
    return {
        startDrag(e) {
            r.current = e;
            o(true);
        },
        abortDrag() {
            o(false);
        },
        isDragging: t
    };
}

const N5 = i(undefined);

N5.displayName = "PersistedSplitter";

const O5 = () => l(N5);

mD("Splitter");

const P5 = fb(Pt);

const B5 = Dh("Splitter");

const z5 = u((({persistPaneSizes: e = true, ...o}, i) => {
    const l = ay();
    const u = o.dataProvider ?? O5();
    const m = o.orientation || "horizontal";
    const p = c(false);
    const f = c(false);
    let h = 0;
    const b = P5();
    const [y, x] = kN((() => {
        const e = x();
        if (e) I(e.getBoundingClientRect()[m === "horizontal" ? "width" : "height"]);
    }));
    const S = r((() => {
        if (!o.sections) return [];
        let e = 0;
        return o.sections.map(((t, n) => {
            const a = o.sections ? o.sections[n + 1] : undefined;
            if (o.sections && o.sections.length >= 2 && (t.collapsible || t.fullyCollapsible) && n === 0) {
                e += 1;
                return "right";
            } else if (o.sections?.length === 2 && (t.collapsible || t.fullyCollapsible) && n === 1 && e === 0) {
                return "left";
            } else if (o.sections?.length === 2 && !(t.collapsible || t.fullyCollapsible) && n === 0 && a && !(a.collapsible || a.fullyCollapsible)) {
                return "right";
            } else if (o.sections?.length === 3 && n === 2) {
                return "left";
            } else if (o.sections?.length === 3 && n === 0 && !!!t.collapsible && !!!t.fullyCollapsible) {
                if (!!!a?.collapsible && !!!a?.fullyCollapsible) {
                    return "right";
                } else {
                    return undefined;
                }
            } else if (o.sections && o.sections.length > 3) {
                if (n === 0) return "right";
                if (o.sections.length - 1 === n) {
                    return "left";
                } else if (o.sections.length - 2 === n) {
                    return undefined;
                } else {
                    return "right";
                }
            } else {
                return undefined;
            }
        }));
    }), [ o.sections ]);
    const [w, C] = n(false);
    const [E, I] = n(undefined);
    const {refs: _, createSetRef: D} = uU();
    const L = s((() => _.map((e => {
        if (!e) return NaN;
        const t = e.getBoundingClientRect();
        return t[m === "horizontal" ? "width" : "height"];
    }))), [ _, m ]);
    const T = c({
        paneSizes: [],
        previousBarPositions: []
    });
    const R = q_();
    const [{sizes: k, previousSizes: A}, M] = n((() => {
        if (!o.sections) {
            return {
                sizes: [],
                previousSizes: []
            };
        } else {
            return {
                sizes: o.sections.map((e => {
                    if (e.defaultSize) {
                        const t = jA(e.minSize);
                        if (e.defaultSize.indexOf("%") > -1) {
                            return t;
                        } else {
                            return Math.max(jA(e.defaultSize), t);
                        }
                    }
                    return -1;
                })),
                previousSizes: []
            };
        }
    }));
    a((() => {
        async function t(e) {
            try {
                const t = await (u?.getSize(e));
                if (t) {
                    if (T.current.paneSizes.length === 0) {
                        T.current = t;
                        R();
                    }
                }
            } catch (t) {
                B5.error(`fetch persisted pane sizes for splitter with id ${e} failed`);
            }
        }
        if (e && u && o.id) {
            t(o.id);
        }
    }), [ e, u, o.id, o.sections, R ]);
    const N = (e, t) => {
        T.current = t;
        u?.setSize(e, t).catch((() => B5.error(`Save pane sizes for splitter with id ${e} failed`)));
    };
    const O = (e, t, o) => {
        const n = B(e.map((e => e && e.indexOf("%") > -1 && e.lastIndexOf("%") === e.length - 1 ? parseFloat(e) / 100 : 0)), t ? t : 1, o);
        return n;
    };
    const P = (e, t) => {
        const o = e.map((e => {
            const o = jA(e.minSize);
            if (!!e.initialSplitterBarCollapsed && !X.current) {
                if (e.fullyCollapsible) return 0;
                return o;
            }
            let n = -1;
            if (e.defaultSize && e.defaultSize.indexOf("%") > -1 && e.defaultSize.lastIndexOf("%") === e.defaultSize.length - 1) {
                n = parseInt(e.defaultSize) / 100 * (t ? t : 1);
            } else if (e.defaultSize && e.defaultSize.indexOf("px") > -1 && e.defaultSize.lastIndexOf("px") === e.defaultSize.length - 2) {
                n = parseInt(e.defaultSize);
            } else if (e.defaultSize && e.defaultSize.indexOf("rem") > -1 && e.defaultSize.lastIndexOf("rem") === e.defaultSize.length - 3) {
                n = jA(e.defaultSize);
            }
            return n === -1 ? -1 : Math.max(n, o);
        }));
        return o;
    };
    const B = (e, t, o) => {
        const n = e.map(((e, n) => {
            const a = jA(o?.[n]?.minSize);
            if (e === undefined) {
                return 0;
            } else if (e === 0) {
                return null;
            } else if (e < 0) {
                return undefined;
            } else {
                return e * t - a;
            }
        }));
        let a = n.reduce(((e, t) => {
            if (t === undefined || t === null) {
                return e;
            } else if (t < 0) {
                return e + t;
            } else {
                return e;
            }
        }), 0);
        const r = n.map(((e, t) => {
            const n = jA(o?.[t]?.minSize);
            if (e === undefined) {
                return -1;
            } else if (e === null) {
                return 0;
            } else if (e <= 0) {
                return n;
            } else {
                if (e >= -a) {
                    const t = n + e + a;
                    a = 0;
                    return t;
                } else {
                    a += e;
                    return n;
                }
            }
        }));
        return r;
    };
    d((() => {
        if (E && o.id && o.sections && T.current.paneSizes.length > 0) {
            const e = T.current.paneSizes;
            const t = T.current.previousBarPositions;
            const n = O(e, E, o.sections);
            const a = O(t, E, o.sections);
            M((() => ({
                sizes: n,
                previousSizes: a
            })));
        } else if (E && o.sections) {
            if (Y) {
                let e = B(k.map((e => e < 0 ? e : (e === Y ? e - V : e) / Y * 100 / 100)), E, o.sections);
                const t = e.reduce(((e, t) => e + t), 0);
                const n = t + V * (o.sections.length - 1);
                const a = n - E;
                const r = e.every(((e, t) => o.sections && e === o.sections[t].minSize));
                if (n > E && a >= .5 && !r) {
                    const t = a / o.sections.length;
                    e = e.map((e => e - t));
                }
                M((({previousSizes: t}) => ({
                    sizes: e,
                    previousSizes: t
                })));
            } else {
                const e = P(o.sections, E);
                X.current = true;
                M((({previousSizes: t}) => ({
                    sizes: e,
                    previousSizes: t
                })));
            }
        }
    }), [ E, o.id ]);
    const z = e && u && o.id;
    a((() => {
        if (!w && o.id) {
            if (p.current && JSON.stringify($) !== JSON.stringify(k)) {
                p.current = false;
                const e = {
                    paneSizes: k.map((e => e && E ? `${e / E * 100}%` : `${e}px`)),
                    previousBarPositions: A.map((e => e && E ? `${e / E * 100}%` : `${e}px`))
                };
                N(o.id, e);
            } else if (f.current) {
                f.current = false;
                const e = {
                    paneSizes: k.map((e => e && E ? `${e / E * 100}%` : `${e}px`)),
                    previousBarPositions: A.map((e => e && E ? `${e / E * 100}%` : `${e}px`))
                };
                N(o.id, e);
            }
        }
    }), [ w, k ]);
    const F = e => {
        const t = o.sections?.[e];
        const n = jA(t?.minSize);
        const a = k[e];
        return a - n < 1e-4;
    };
    function j(e) {
        let t = e.deltaPX;
        if (t) {
            const n = L();
            const a = e.index + (e.direction === "left" ? -1 : 1);
            if (o.sections) {
                {
                    const e = o.sections[a];
                    const r = n[a] - t;
                    const s = e.fullyCollapsible && !e.disableAutoClose ? 0 : a === 0 || a === v.count(o.children) - 1 ? jA(e.minSize) : Math.max(0, W, jA(e.minSize));
                    if (s > r) {
                        t -= s - r;
                    }
                }
                {
                    const a = o.sections[e.index];
                    const r = n[e.index] + t;
                    const s = a.fullyCollapsible && !a.disableAutoClose ? 0 : e.index === 0 || e.index === v.count(o.children) - 1 ? jA(a.minSize) : Math.max(0, W, jA(a.minSize));
                    if (s > r) {
                        t += s - r;
                    }
                }
            }
            if (n[e.index] === 0 && e.deltaPX < 0) t = 0;
            n[e.index] += t;
            n[a] -= t;
            if (o.sections) {
                const r = o.sections[e.index];
                const s = jA(r.minSize);
                const i = Math.round(k[e.index]);
                const l = i + t;
                if (n[e.index] - s < 1e-4) {
                    if (r.fullyCollapsible) {
                        if (!r.disableAutoClose && !F(e.index) && t < 0) {
                            n[e.index] = 0;
                            if (l === s) {
                                n[a] += s;
                            } else {
                                n[a] += l;
                            }
                        } else if (F(e.index) && t > 0) {
                            n[e.index] = s;
                            n[a] -= E ?? 0;
                        } else if (!r.disableAutoClose && i === s && t < 0) {
                            n[e.index] = 0;
                            n[a] += l;
                        }
                    }
                    o.onExpandCollapse?.(true, e.index);
                } else if (r.collapsible && n[e.index] < 10) {
                    if (t < 0) {
                        n[a] += n[e.index];
                        n[e.index] = 0;
                    } else if (t > 0) {
                        n[e.index] = 10;
                        n[a] -= n[e.index];
                    }
                } else {
                    o.onExpandCollapse?.(false, e.index);
                }
            }
            o.onBarMove?.(n);
            M((({previousSizes: e}) => ({
                sizes: n,
                previousSizes: e
            })));
        }
        return t !== 0;
    }
    const V = 2;
    const H = () => {
        let e = 0;
        o.sections && o.sections.forEach((t => {
            if (t.minSize) {
                e += jA(t.minSize);
            }
        }));
        return e + h * V;
    };
    const U = C_();
    const G = U.tokensExperimental["space-base-s"];
    const K = I_({
        bg: U.tokensExperimental["color-container-border-4"],
        "bar-size": `${V}px`,
        "min-size": `${H()}px`,
        "icon-size": U.tokensExperimental["size-icon-xxxl"],
        "section-padding": G
    }, "splitter");
    const W = 2 * jA(G);
    const $ = k_(k);
    const Y = k_(E);
    const q = k_(o.sections);
    const X = c(false);
    const Z = c(false);
    d((() => {
        if (E && e && o.id && o.sections && !Z.current && T.current.paneSizes.length > 0) {
            const e = T.current.paneSizes;
            const t = T.current.previousBarPositions;
            const n = O(e, E, o.sections);
            const a = O(t, E, o.sections);
            if (JSON.stringify($) !== JSON.stringify(n)) {
                Z.current = true;
                M((() => ({
                    sizes: n,
                    previousSizes: a
                })));
            }
        } else if (E && o.sections && !X.current && !Z.current) {
            const e = P(o.sections, E);
            if (JSON.stringify($) !== JSON.stringify(e)) {
                X.current = true;
                M((({previousSizes: t}) => ({
                    sizes: e,
                    previousSizes: t
                })));
            }
        } else if (JSON.stringify(q) !== JSON.stringify(o.sections) && o.sections && E) {
            const e = P(o.sections, E);
            if (JSON.stringify($) !== JSON.stringify(e)) {
                M((({previousSizes: t}) => ({
                    sizes: e,
                    previousSizes: t
                })));
            }
        }
    }));
    g(i, (() => ({
        togglePane: Q,
        isPaneCollapsed: F
    })));
    const J = ({defaultSize: e}) => {
        if (!e) return -1;
        const t = e.indexOf("%") > -1 && e.lastIndexOf("%") === e.length - 1;
        const o = e.indexOf("px") > -1 && e.lastIndexOf("px") === e.length - 2;
        const n = e.indexOf("rem") > -1 && e.lastIndexOf("rem") === e.length - 3;
        if (t) {
            return parseInt(e) / 100 * (E ? E : 1);
        } else if (o) {
            return parseInt(e);
        } else if (n) {
            return jA(e);
        }
        return -1;
    };
    const Q = e => {
        const t = L();
        M((({sizes: n, previousSizes: a}) => {
            const r = o.sections?.[e];
            const s = [ ...n ], i = [ ...a ];
            if (!a[e] && !!r?.initialSplitterBarCollapsed) {
                a[e] = J(r);
            }
            const l = jA(r?.minSize);
            const c = r?.fullyCollapsible ? 0 : l, d = n[e] === -1 ? t[e] : n[e];
            const u = e === 0 ? 1 : e - 1;
            const m = n[u] === -1 ? t[u] : n[u];
            const f = jA(o.sections?.[u]?.minSize);
            let g, h = c, b = d;
            if (r?.fullyCollapsible) {
                if (d - c < 1e-4) {
                    g = Math.min(a[e] ?? 0 - d, m - f);
                    h = g + d;
                } else {
                    g = d;
                    h = 0;
                }
            } else {
                g = d > c ? d - c : !isNaN(a[e]) ? Math.min(a[e] - c, m - f) : 0;
            }
            if (g === 0) {
                g = r?.fullyCollapsible && l > 0 ? l : 20;
            }
            let v = false;
            if (d - c < 1e-4) {
                b = c;
                h = g + d;
                s[u] = m - g;
            } else {
                s[u] = m + g;
                v = true;
            }
            i[e] = b;
            s[e] = h;
            p.current = true;
            o.onExpandCollapse?.(v, e);
            o.onBarMove?.(s);
            return Object.create({
                sizes: [ ...s ],
                previousSizes: [ ...i ]
            });
        }));
    };
    const ee = s((e => {
        if (o.sections) {
            const t = L();
            let n, a;
            const r = o.sections[e];
            n = e === 0 || e === o.sections.length - 1;
            a = !r.minSize || r.minSize === 0;
            const s = r?.fullyCollapsible || n && a ? 0 : Math.max(0, W, jA(r?.minSize));
            const i = S[e] === "right" ? e + 1 : e - 1;
            const l = o.sections[i];
            n = i === 0 || i === o.sections.length - 1;
            a = !l.minSize || l.minSize === 0;
            const c = l?.fullyCollapsible || n && a ? 0 : Math.max(0, W, jA(l?.minSize));
            const d = t[e] + t[i] - s - c;
            return Math.round(d > 0 ? 100 * (t[e] - s) / d : 0);
        }
    }), [ L, W, o.sections, S ]);
    const [te, oe] = n([]);
    a((() => {
        const e = o.sections ? o.sections.map(((e, t) => {
            const o = S[t] === "right" || S[t] === "left";
            if (o) {
                return ee(t) ?? 0;
            }
        })) : [];
        oe(e);
    }), [ o.sections, k, S, ee ]);
    return t("div", {
        ref: e => {
            y(e);
        },
        className: ke(L5.container[o.orientation || "horizontal"], o.className),
        style: {
            ...K,
            ...o.style
        }
    }, v.map(o.children, ((e, n) => {
        const a = o.sections?.[n];
        const r = k[n] < 0 ? undefined : w || E === undefined ? `${k[n]}px` : `${k[n] / E * 100}%`;
        const s = a?.fullyCollapsible ? 0 : jA(a?.minSize);
        const i = k[n] === -1 ? false : k[n] - s < 1e-4;
        const c = !!r && parseInt(r) === 0;
        const d = n === (o.sections ? o.sections.length - 1 : 0);
        const u = S[n] === "right" || S[n] === "left";
        let g, y;
        if (u) {
            if (o.splitterBarAriaLabelledBy && o.splitterBarAriaLabelledBy.length > 0) {
                y = o.splitterBarAriaLabelledBy[h];
            }
            if (o.splitterBarAriaLabels && o.splitterBarAriaLabels.length > 0 && !y) {
                g = o.splitterBarAriaLabels[h] ?? b("splitterBar.default.aria", {
                    count: `${h + 1}`
                });
            } else if (!y) {
                g = b("splitterBar.default.aria", {
                    count: `${h + 1}`
                });
            }
            h++;
        }
        return t(A5, {
            barAriaLabel: g,
            barAriaLabelledBy: y,
            barAriaValueNow: te[n],
            sectionAriaLabel: a?.ariaLabel,
            sectionAriaLabelledBy: a?.ariaLabelledBy,
            sectionAriaDescribedBy: a?.ariaDescribedBy,
            sectionLandmarkLabel: a?.landmarkLabel,
            testId: o.testId,
            paneIndex: n,
            isLastSection: d,
            minSize: jA(a?.minSize),
            key: n,
            ref: D(n),
            className: ke(a?.className, n !== 0 && n !== v.count(o.children) - 1 && L5.hasPadding, c && L5.collapsed),
            orientation: m,
            size: r,
            barPos: S[n],
            resizable: a?.resizable,
            hideGripIcon: (a?.hideGripIcon || o.hideGripIcon) ?? false,
            hideCollapseIcon: (a?.hideCollapseIcon || o.hideCollapseIcon) ?? false,
            hideSplitterBar: (a?.hideSplitterBar || o.hideSplitterBar) ?? false,
            collapsible: !!a?.collapsible,
            fullyCollapsible: !!a?.fullyCollapsible,
            isCollapsed: i,
            onDragStart: () => {
                const e = L();
                if (e[n] !== 0 && e[n] !== jA(a?.minSize)) {
                    A[n] = e[n];
                }
                M((({previousSizes: t}) => ({
                    sizes: e,
                    previousSizes: t
                })));
                C(true);
            },
            onDragEnd: e => {
                if (z) {
                    if (e === "toggle") {
                        p.current = true;
                    } else {
                        f.current = true;
                    }
                }
                C(false);
            },
            onDrag: e => {
                const t = S[n];
                if (t) {
                    if (m === "horizontal") {
                        e = l ? -e : e;
                    }
                    return j({
                        index: n,
                        direction: t,
                        deltaPX: e
                    });
                }
                return false;
            },
            onToggleCollapsed: () => {
                Q(n);
            },
            onKeyDown: e => {
                if (a && a.resizable === false && e.key !== " " && e.key !== "Enter") return;
                const t = S[n];
                switch (e.key) {
                  case "ArrowLeft":
                    {
                        if (m === "horizontal" && t) {
                            if (t === "right") j({
                                index: n,
                                direction: t,
                                deltaPX: l ? 20 : -20
                            }); else j({
                                index: n,
                                direction: t,
                                deltaPX: l ? -20 : 20
                            });
                            f.current = true;
                        }
                        break;
                    }

                  case "ArrowRight":
                    {
                        if (m === "horizontal" && t) {
                            if (t === "right") j({
                                index: n,
                                direction: t,
                                deltaPX: l ? -20 : 20
                            }); else j({
                                index: n,
                                direction: t,
                                deltaPX: l ? 20 : -20
                            });
                            f.current = true;
                        }
                        break;
                    }

                  case "ArrowUp":
                    {
                        if (m === "vertical" && t) {
                            if (t === "right") j({
                                index: n,
                                direction: t,
                                deltaPX: -20
                            }); else j({
                                index: n,
                                direction: t,
                                deltaPX: 20
                            });
                            f.current = true;
                        }
                        break;
                    }

                  case "ArrowDown":
                    {
                        if (m === "vertical" && t) {
                            if (t === "right") j({
                                index: n,
                                direction: t,
                                deltaPX: 20
                            }); else j({
                                index: n,
                                direction: t,
                                deltaPX: -20
                            });
                            f.current = true;
                        }
                        break;
                    }

                  case " ":
                  case "Enter":
                    {
                        if (a && (a.collapsible || a.fullyCollapsible) && (n === 0 || d)) Q(n);
                        break;
                    }

                  case "Home":
                    {
                        if (t) j({
                            index: n,
                            direction: t,
                            deltaPX: -9999
                        });
                        p.current = true;
                        o.onExpandCollapse?.(!i, n);
                        break;
                    }

                  case "End":
                    {
                        if (t) j({
                            index: n,
                            direction: t,
                            deltaPX: 9999
                        });
                        p.current = true;
                        o.onExpandCollapse?.(!i, n);
                        break;
                    }

                  default:
                    return;
                }
                e.preventDefault();
            }
        }, e);
    })));
}));

const F5 = (e, t) => {
    const {preference: o, getRowIdentifier: n, getSelectionState: a} = t;
    if (t.dragging === true) return false;
    const r = t.getSelectionCheckboxState;
    const s = r ? r(n(e)) : a?.(n(e));
    return s !== undefined ? s : o?.selectAll === true || !!o?.selectedRows?.has(n(e));
};

const j5 = e => {
    const o = ay();
    const {rowIndex: r, itemData: s} = e;
    const i = s.preference?.selectAll;
    const l = s.hideUnselectedSelectionControl;
    const [c, d] = n(l ? "none" : "block");
    const u = s.lastFocusedCell?.rowIndex === r && s.lastFocusedCell?.colIndex === 0 && s.focusIndicator === "visible";
    a((() => {
        l && d(i || u ? "block" : "none");
    }), [ i, u, l ]);
    a((() => {
        if (s.hideUnselectedSelectionControl === false) d("block");
    }), [ s.hideUnselectedSelectionControl ]);
    const {getRowIdentifier: m, hideSelectionControl: p} = s;
    const f = m(r);
    const g = s.preference?.selectedRows?.size || 0;
    const {selectedCell: h} = e;
    const b = () => {
        const t = s.hideSelectionControlColumn;
        if (t === true) return {
            ...e.style,
            paddingRight: o ? "0px" : "5px",
            paddingLeft: o ? "5px" : "0px"
        };
        return {
            ...e.style,
            ...{
                display: h || g > 0 ? "block" : c
            }
        };
    };
    return t("div", {
        className: e.className,
        onContextMenu: e => {
            e.preventDefault();
        },
        onMouseDown: e => {
            if (e.shiftKey) e.preventDefault();
            s.refTop.current?.focus({
                preventScroll: true
            });
        },
        onMouseOver: () => {
            l && d("block");
        },
        onMouseLeave: () => {
            l && d(h || u ? "block" : "none");
        }
    }, p?.(f) === true ? null : X4(s.selectionMode) ? t(g6, {
        itemData: s,
        rowIndex: r,
        style: b(),
        selected: h,
        selectAll: e.selectAll,
        ariaLabel: e.ariaLabel,
        ariaLabelledBy: e.ariaLabelledBy
    }) : t(h6, {
        itemData: s,
        rowIndex: r,
        style: {
            ...e.style
        },
        selected: !!h,
        ariaLabel: e.ariaLabel,
        ariaLabelledBy: e.ariaLabelledBy
    }));
};

const V5 = e => {
    const {style: o, itemData: n} = e;
    return t(j5, {
        itemData: e.itemData,
        rowIndex: -1,
        style: o,
        selectedCell: n.preference?.selectAll,
        className: z4.selectionCell,
        selectAll: true
    });
};

const H5 = e => {
    const {rowIndex: o, itemData: n} = e;
    const a = F5(o, n);
    const r = n.hideSelectionControlColumn;
    return t(j5, {
        itemData: e.itemData,
        style: e.style,
        rowIndex: e.rowIndex,
        selectedCell: a,
        ariaLabel: e.ariaLabel,
        ariaLabelledBy: e.ariaLabelledBy,
        className: ke(n.buildCellBorderStyles(n.getRowIdentifier(e.rowIndex)), r !== true && z4.selectionCell, a === true && z4.selected, (n.pressedCell?.region === n2.Data || n.pressedCell?.region === n2.RowHeader) && o === n.pressedCell.rowIndex && n.pressEntireRow && z4.pressed)
    });
};

fb(Bt);

fb(Bt);

const U5 = e => ({
    fg: e.tokensExperimental["color-action-text-subtle-normal"],
    "selected-bg": e.themeVariant === "high-contrast" ? e.tokensExperimental["color-action-background-control-normal"] : e.tokensExperimental["color-action-background-subtle-selected"],
    "selected-inactive-bg": e.themeVariant === "high-contrast" ? e.tokensExperimental["color-action-background-control-normal"] : e.tokensExperimental["color-action-background-subtle-selected-inactive"],
    "selected-fg": e.themeVariant === "high-contrast" ? e.tokensExperimental["color-action-text-control-normal"] : e.tokensExperimental["color-action-text-subtle-selected"],
    "selected-filter": e.themeVariant === "high-contrast" ? "invert(1) grayscale(1)" : "none",
    "selected-inactive-filter": e.themeVariant === "high-contrast" ? "invert(0.85) grayscale(1)" : "none",
    "disabled-fg": e.tokensExperimental["color-action-text-standard-disabled"],
    "spacing-xxs": e.tokensExperimental["space-base-xxs"],
    "spacing-xs": e.tokensExperimental["space-base-xs"],
    "spacing-s": e.tokensExperimental["space-base-s"],
    "font-size-m": e.tokensExperimental["font-size-body-text-m"],
    "font-weight-thick": e.tokensExperimental["font-style-weight-700"]
});

const G5 = (e, t, o, n, a, r, s, i, l, c) => d => {
    const {current: u, previous: m} = d;
    const p = s !== true && (t === "parentChild" || t === "multiple");
    const f = u.colIndex === (p ? 1 : 0);
    const g = u.rowIndex !== m?.rowIndex;
    let h;
    let b;
    let v = false;
    if (o) {
        b = o(u.rowIndex);
        h = b?.level !== undefined ? b.level + 1 : undefined;
        const e = m ? o(m.rowIndex) : undefined;
        v = e?.level !== b?.level;
    }
    const y = g && v;
    const x = [];
    if (y && !qI(h)) {
        x.push(e("level.msg", {
            level: String(h)
        }));
    }
    x.push(d.default);
    if (f) {
        if (b) {
            const t = b?.hasChildren;
            const o = n.has(b.id);
            if (t) {
                if (o) {
                    x.push(e("expanded.msg"));
                } else {
                    x.push(e("collapsed.msg"));
                }
            }
        }
    }
    if (s && r && g) {
        const o = e => {
            const t = r(e);
            return i?.includes(t) ? "mixed" : l === true || !!c?.has(t);
        };
        if (t !== "none" && u.rowIndex > -1) {
            const t = o(u.rowIndex);
            if (t === true) {
                x.push(e("rowSelected.msg"));
            } else if (t === "mixed") {
                x.push(e("partiallySelected.msg"));
            }
        }
    }
    if (a && r && g) {
        const t = r(u.rowIndex);
        const o = a(t);
        x.push(e("position.setSize.msg", {
            position: o.positionInSet,
            setSize: o.setSize
        }));
    }
    return x.join(", ");
};

const K5 = (e, t, o, n) => a => {
    const {current: r, previous: s} = a;
    if (r.rowIndex < 0) return null;
    const i = r.rowIndex !== s?.rowIndex;
    let l;
    let c;
    let d = false;
    if (t) {
        c = t(r.rowIndex);
        l = c?.level !== undefined ? c.level + 1 : undefined;
        const e = s ? t(s.rowIndex) : undefined;
        d = e?.level !== c?.level;
    }
    const u = i && d;
    const m = [];
    if (u && !qI(l)) {
        m.push(e("level.msg", {
            level: String(l)
        }));
    }
    if (o && n && i) {
        const t = n(r.rowIndex);
        const a = o(t);
        if (a.positionInSet && a.setSize) {
            m.push(e("position.setSize.msg", {
                position: a.positionInSet,
                setSize: a.setSize
            }));
        }
    }
    return m.join(", ");
};

const W5 = u(((e, o) => {
    function n(t) {
        t.stopPropagation();
        if (e.onArrowClick) e.onArrowClick(e.node.id);
    }
    const a = C_();
    const r = I_({
        "label-fg": e.disabled ? "var(--tree-disabled-fg)" : "var(--tree-fg)",
        "label-text-cursor": "default"
    });
    const s = e.hasChildren || Array.isArray(e.node.children) && e.node.children.length > 0;
    return t("div", {
        className: d5.item,
        "data-testid": e.testId
    }, s ? t(MM, {
        tabIndex: -1,
        role: "img",
        disabled: e.expandCollapseDisabled || e.disabled,
        ariaHidden: true,
        onClick: n,
        className: ke(d5.expandIcon, e.expandCollapseDisabled === false && e.disabled === false ? d5.expandIconCursorPointer : undefined),
        icon: e.expanded ? fk : pk,
        testId: "expandIcon",
        theme: () => ({
            "--icon-default-override-fg": e.expandCollapseDisabled || e.disabled ? a.tokensExperimental["color-action-icon-subtle-disabled"] : "var(--tree-fg)"
        })
    }) : null, e.selectionControl, e.node.icon ? t(MM, Ee({
        className: d5.nodeIcon,
        disabled: e.disabled
    }, "icon" in e.node.icon ? {
        ...e.node.icon
    } : {
        icon: e.node.icon
    })) : null, e.nodeElement ? b(e.nodeElement, {
        ref: o,
        id: e.labelId
    }) : t(LP, {
        required: !!e.node.required,
        wrapText: false,
        className: d5.nodeLabel,
        style: {
            ...r,
            width: "100%"
        },
        disabled: e.disabled,
        suppressTooltip: e.suppressTooltip,
        id: e.labelId
    }, e.node.text));
}));

const $5 = (e, t, o, n, a) => {
    if (!a || a.length === 0) return false;
    if (e === a.length) return true;
    if (o && n) return true;
    if (t === a.length) return true;
    return false;
};

const Y5 = (e, t, o) => {
    if (e.size === 0) return true;
    if (t === true && !o) return true;
    if (t === true && e.size > 0) return false;
    if (t === true) return true;
    return false;
};

const q5 = (e, t) => {
    switch (t.type) {
      case "selectRow":
        {
            const o = new Set(t.selectedRows);
            return {
                ...e,
                selectedRows: o,
                selectAll: t.selectAll
            };
        }

      case "clearPartiallySelectedRows":
        {
            return {
                ...e,
                partiallySelectedRows: []
            };
        }

      case "parentChildSelection":
        {
            const {rowKey: o, selected: n, selectedRows: a, selectAll: r} = t;
            const {getDataNode: s, getParentsRowKey: i, getRowIndex: l, getChildNodesRowKey: c, readonlyRows: d, disabledRows: u, readOnlyAndSelectedRows: m} = t.props;
            const p = new Set([ ...a ?? [], ...m ?? [] ]);
            const f = Y5(p, r, t.interactive);
            if (f) {
                let t = false;
                if ((d?.size ?? 0) > 0 && (m?.size ?? 0) > 0 && (d?.size ?? 0) > (m?.size ?? 0)) {
                    t = true;
                }
                return {
                    ...e,
                    partiallySelectedRows: [],
                    selectedRows: new Set([]),
                    selectAll: t ? "mixed" : r ?? false
                };
            }
            let g = [];
            const h = l && o ? l(o) : -1;
            const b = h !== -1 && s(h);
            if (b && n || p?.size === 0 && m && m?.size > 0) {
                p?.forEach((e => {
                    const t = l && o ? l(e) : -1;
                    const n = h !== -1 && s(t);
                    if (n && n.hasChildren) {
                        const t = c && e ? c(e) : undefined;
                        t?.forEach((e => {
                            if (!d?.has(e) && !u?.has(e)) p.add(e);
                        }));
                    }
                    if (n && n.hasChildren) {
                        p.add(e);
                    } else if (n && n.hasChildren) {
                        p.delete(e);
                    } else p.add(e);
                    if (o && o === e && g?.includes(o)) {
                        p.delete(o);
                    }
                }));
            } else {
                if (b && b.hasChildren && !n) {
                    const e = c && c(o);
                    e?.forEach((e => {
                        if (p.has(e)) {
                            if (!((d?.has(e) || u?.has(e)) && (a?.has(e) || r === true))) !d?.has(e) && p.delete(e);
                        }
                    }));
                }
            }
            if (!n && o && p) {
                const e = i?.(o);
                e?.forEach((e => {
                    const t = c?.(e);
                    t?.forEach((t => {
                        if (!p?.has(t) && !d?.has(e)) {
                            p.delete(e);
                            return;
                        }
                    }));
                }));
                if (p.size === 0) {
                    g = [];
                }
                for (let e = 0; e < g.length; e++) {
                    const t = g[e];
                    const o = c?.(t);
                    let n = false;
                    o?.forEach((e => {
                        const t = p.has(e) || m?.has(e);
                        if (t && !u?.has(e)) {
                            n = true;
                            return;
                        }
                    }));
                    if (!n) {
                        const e = g.indexOf(t);
                        if (e > -1) {
                            g.splice(e, 1);
                        }
                    }
                }
            }
            const v = p?.size > 0 ? p : new Set([ o ]);
            v.forEach((e => {
                const t = i && i(e);
                t?.forEach((e => {
                    const t = e === o && g?.includes(o);
                    let n = false;
                    let a = 0;
                    let s = 0;
                    let i = false;
                    let l = 0;
                    let d = false;
                    const f = c && c(e);
                    f?.forEach((t => {
                        if (u?.has(t)) i = true;
                        if (p?.has(t) || m?.has(t)) {
                            ++a;
                            if (e !== t) {
                                if (!u?.has(t)) ++s;
                            }
                        }
                        if (e !== t && p?.has(t) && !u?.has(t)) d = true;
                        if ((p?.has(t) || u?.has(t)) && e !== t) ++l;
                        if (!u?.has(t) && e !== t) {
                            ++s;
                        }
                        if (!p?.has(t) && e !== t && u?.has(t)) if (m?.has(t)) {
                            if (!u?.has(t)) ++s;
                        }
                        if (u?.has(t)) n = true;
                    }));
                    if (t && n) {
                        p?.forEach((e => {
                            if (f?.includes(e)) p.delete(e);
                        }));
                    }
                    if (s === 0 && g?.includes(e) && (u?.size ?? 0) > 0) {
                        g.splice(g.indexOf(e), 1);
                    }
                    if (o === e && i && g?.includes(e)) {
                        g.splice(g.indexOf(e), 1);
                    }
                    if (a === 0 || t && n) {
                        if (p.has(e)) p.delete(e);
                        g.splice(g.indexOf(e), 1);
                    } else if (f && f?.length > l) {
                        if (!g.includes(e) && d) {
                            const t = g.length;
                            g[t] = e;
                        }
                        if (p.has(e) && r === "mixed") p.delete(e);
                    } else {
                        const r = $5(a, l, t, n, f);
                        if (r && e !== o && !u?.has(e)) p.add(e);
                    }
                }));
                g = g.filter((e => !p.has(e)));
            }));
            const {areRowsVisible: y, rowCount: x, hideSelectAll: S, columnHeadersVisible: w} = t.props;
            const C = !y ? true : y(p);
            const E = u?.size || 0;
            let I;
            if (C && S !== true && x !== 0 && w !== false && p.size >= x - E) {
                I = E > 0 && r !== true ? false : p?.size === x ? true : "mixed";
            } else if (p.size > 0 && r !== true) {
                I = "mixed";
            } else {
                I = false;
            }
            return {
                ...e,
                selectedRows: r === true ? undefined : p,
                selectAll: r === false ? false : I,
                partiallySelectedRows: g
            };
        }

      default:
        return e;
    }
};

const X5 = (e, t) => ({
    selectedRows: e,
    partiallySelectedRows: t
});

const Z5 = {
    init: X5,
    reducer: q5
};

const J5 = 20;

const Q5 = 8;

const e3 = 14;

const t3 = 4;

const o3 = fb(zt);

const n3 = (e, t) => {
    const o = "tree-node";
    if (t) {
        return `${o}-${t}-${e}`;
    } else {
        return `${o}-${e}`;
    }
};

const a3 = u(((e, o) => {
    const {hasChildren: r, id: s, level: i} = e.node;
    const l = e.expandedNodes?.has(s);
    const c = i * J5 - (r ? i === 0 ? Q5 : e3 + t3 : i === 0 ? -(e3 - t3) : 0);
    const d = e.itemData;
    const u = e.rowIndex;
    const m = d?.preference?.selectAll;
    const p = d?.hideUnselectedSelectionControl;
    const [f, g] = n(p ? "hidden" : "visible");
    const h = d?.lastFocusedCell?.rowIndex === u && d?.lastFocusedCell?.colIndex === 0 && d?.focusIndicator === "visible";
    a((() => {
        if (p) {
            let e;
            if (d.draggingRow > -1 && d.dragging && u === d.draggingRow) e = "hidden"; else if (m || h) e = "visible"; else e = "hidden";
            g(e);
        }
    }), [ m, h, p, u, d.draggingRow, d.dragging ]);
    a((() => {
        if (d.hideUnselectedSelectionControl === false) g("visible");
    }), [ d.hideUnselectedSelectionControl ]);
    const b = o => {
        if (d && d?.hideSelectionControlColumn === true && (d.selectionMode === "parentChild" || d.selectionMode === "multiple")) return t(H5, {
            rowIndex: e.rowIndex,
            itemData: d,
            style: {
                visibility: f
            },
            ariaLabelledBy: o
        });
        return undefined;
    };
    const v = t("div", {
        style: {
            marginInlineStart: `${c}px`
        },
        onMouseOver: () => {
            p && g("visible");
        },
        onMouseLeave: () => {
            p && g(m || h ? "visible" : "hidden");
        }
    }, t(W5, {
        testId: e.testId,
        ref: o,
        expanded: l,
        node: e.node,
        hasChildren: r,
        onArrowClick: () => {
            e.onExpand?.(e.node, !l);
        },
        suppressTooltip: e.suppressTooltip,
        disabled: e.disabled,
        expandCollapseDisabled: e.isExpandCollapseDisabled?.(e.node, e.rowKey),
        nodeElement: e.nodeElement,
        selectionControl: b(n3(e.node.id, e.treeTableId)),
        labelId: n3(e.node.id, e.treeTableId)
    }));
    return e.getNodeContent?.(e.rowIndex, v) ?? v;
}));

const r3 = e => {
    const o = c();
    const r = c();
    const i = c();
    const l = o3();
    const d = C_();
    const u = I_(U5(d), "tree");
    const p = c(null);
    const [f, h] = n(-1);
    const [b, v] = m(Z5.reducer, Z5.init(e.preference?.selectedRows, e.preference?.partiallySelectedRows));
    const [y, x] = n(false);
    const [S, w] = n(false);
    const [C, E] = n(false);
    const I = s(((t, o, n, a, r) => {
        if (e.readOnly && r) return;
        if ((!t || t.size === 0) && o !== undefined && o !== "mixed" && !e.hideSelectionControlColumn) {
            e.setSelectAllRows?.({
                selectAll: o,
                isRowReadOnly: k
            });
        } else if (e.selectionMode === "parentChild") {
            e.setSelectRows?.({
                selectedRows: t,
                rowCount: e.rowCount,
                interactive: r,
                isRowDisabled: R,
                isRowReadOnly: k,
                areRowsVisible: e.areRowsVisible
            });
        }
        r && e.onSelect?.(t, o, n, a);
        x(false);
    }), [ b.selectedRows ]);
    a((() => {
        const t = e.setPartiallySelectedRows;
        t?.(b.partiallySelectedRows);
    }), [ e.setPartiallySelectedRows, b.partiallySelectedRows ]);
    a((() => {
        I(b.selectedRows, e.preference?.selectAll, e.preference?.selectionMetadata?.key, e.preference?.selectionMetadata?.state, y);
    }), [ b.selectedRows, b.selectAll ]);
    a((() => {
        if (!S && b.selectedRows?.size === 0 && (b.selectAll === false || b.selectAll === true)) {
            e.setSelectAllRows?.({
                selectAll: b.selectAll,
                isRowReadOnly: k
            });
        }
        w(false);
    }), [ b.selectAll ]);
    g(e.treeTableAPIRef, (() => ({
        setSelectedRows: t => {
            if (e.selectionMode === "parentChild") {
                v({
                    type: "parentChildSelection",
                    rowKey: t?.length > 0 ? t[0] : "",
                    selectedRows: new Set(t),
                    selected: true,
                    props: e,
                    interactive: false,
                    selectAll: b.selectAll
                });
            } else if (e.selectionMode !== "none") {
                const o = e.selectionMode === "single" ? new Set([ t?.length > 0 ? t[0] : "" ]) : new Set(t);
                e.setSelectRows?.({
                    selectedRows: o,
                    isRowReadOnly: k
                });
            }
        },
        setSelectAll: t => {
            E(t);
            if (e.selectionMode === "parentChild") {
                v({
                    type: "parentChildSelection",
                    rowKey: "",
                    selectedRows: new Set([]),
                    selectAll: t,
                    props: e,
                    interactive: false
                });
            } else {
                v({
                    type: "selectRow",
                    selectAll: t
                });
            }
        },
        getColumnIndexForOffset: e => p.current?.getColumnIndexForOffset(e),
        getRowIndexForOffset(e) {
            return p.current?.getRowIndexForOffset(e);
        }
    })));
    const _ = G5(l, e.selectionMode, e.getDataNode, e.expandedNodes, e.getRowAttributes, e.getRowKey, e.hideSelectionControlColumn, e.preference?.partiallySelectedRows, e.preference?.selectAll, e.preference?.selectedRows);
    const D = K5(l, e.getDataNode, e.getRowAttributes, e.getRowKey);
    a((() => {
        const t = e.setFreezeColumnCount;
        t?.({
            count: e.frozenColumnCount ?? 0
        });
    }), [ e.frozenColumnCount, e.setFreezeColumnCount ]);
    a((() => {
        r.current?.announcePosition();
    }), [ e.expandedNodes ]);
    const L = e.disabled || e.hideSelectionControlColumn || e.selectionMode !== "multiple" && e.selectionMode !== "parentChild" ? 0 : 1;
    const T = t => {
        const {rowIndex: o, dropIndicatorRef: n, offsetX: a, height: r, width: s, position: l} = t;
        if (!n?.current || !s || !a) return;
        const c = e?.getDataNode?.(o);
        const d = e?.getDataNode?.(o - 1);
        const u = c?.level ?? 0;
        let m = a <= 0 ? 0 : a;
        if (i.current !== o) {
            m = (u + 1) * J5;
        }
        i.current = o;
        const p = Math.max(0, Math.floor(m / J5 * (u + 1)));
        const f = e.isValidDropLevel ? e.isValidDropLevel(d, p) : true;
        if (!f) return;
        const g = q4(e.selectionMode === "parentChild" ? "multiple" : e.selectionMode, e.columns?.length || 0, e.rowCount, e.hideSelectionControlColumn);
        const b = p * J5 + (g ? f5.selectionControlColumnWidth : 0);
        h(a < 0 ? 0 : p);
        n.current.style.top = `${l}px`;
        n.current.style.left = `${b}px`;
        n.current.style.width = `${s - b}px`;
        n.current.style.height = `${r ?? f5.dropIndicatorLineHeight}px`;
        n.current.style.display = l ?? -1 > -1 ? "block" : "none";
    };
    const R = t => {
        if (e.isRowDisabled) return e.isRowDisabled(t);
        return e.disabledRows?.has(t) || false;
    };
    const k = t => {
        if (e.isRowReadOnly) return e.isRowReadOnly(t);
        return e.readonlyRows?.has(t) || false;
    };
    const A = (e, t) => {
        if (e.size !== t.size) return false;
        for (const o of e) {
            if (!t.has(o)) return false;
        }
        return true;
    };
    return t("div", {
        style: u,
        onKeyDown: t => {
            if (t.key === "Enter" && t.ctrlKey) {
                if (o.current) {
                    const t = e.getDataNode ? e.getDataNode(o.current.rowIndex) : undefined;
                    if (t && (e.isExpandCollapseDisabled?.(t, e.getRowKey?.(o.current.rowIndex)) || e.disabledRows?.has(e.getRowKey?.(o.current.rowIndex) || "") || e.disabled)) return;
                    const n = L;
                    if (t && o.current.colIndex === n) {
                        const o = e.expandedNodes.has(t.id);
                        e.onExpand?.(t, !o);
                    }
                }
            }
        }
    }, t(e5, Ee({}, e, {
        columns: e.columns ? e.columns.length > 1 ? [ {
            ...e.columns[0],
            rowHeaderColumn: true
        }, ...e.columns.slice(1) ] : e.columns : undefined,
        internalRef: p,
        disableOnDoubleClickKeyboardActivation: true,
        ariaDescribedBy: e.ariaDescribedBy,
        addRowAttributes: t => {
            const o = e.getDataNode?.(t);
            const n = e.getRowKey?.(t);
            if (!o || !n) return {};
            const a = e.getRowAttributes?.(n);
            return {
                ...a?.level && {
                    "aria-level": a.level
                },
                "aria-rowindex": t + 1
            };
        },
        moveDropIndicator: e.allowLevelDrop ? e => {
            T(e);
        } : undefined,
        getDropLevel: () => e.allowLevelDrop ? f : -1,
        addCellAttributes: (t, o) => {
            if (t > -1) {
                const n = e.selectionMode === "parentChild" || e.selectionMode === "multiple" || e.selectionMode === undefined;
                const a = e.getDataNode?.(t);
                const r = n ? 1 : 0;
                if (o === r && a) {
                    const t = a.hasChildren ? e.expandedNodes?.has(a.id) : undefined;
                    return {
                        "aria-expanded": t
                    };
                }
            }
            return {};
        },
        role: e.role ?? "treegrid",
        narratorRef: r,
        setSelectRow: t => {
            if (e.readOnly) return;
            const {setSelectRow: o, rowCount: n, hideSelectAll: a, hideSelectionControlColumn: r, selectionMode: s, columnHeadersVisible: i, areRowsVisible: l} = e;
            const c = s ? [ "single", "none", "desktop" ].includes(s) : false;
            const d = e.selectionMode === "parentChild";
            const u = {
                ...t,
                clearPrevious: d ? false : t.clearPrevious,
                rowCount: n,
                isRowDisabled: R,
                isRowReadOnly: k,
                hideSelectAll: a || r || c && !i,
                columnHeadersVisible: i,
                areRowsVisible: l,
                interactive: true
            };
            o?.(u);
        },
        setSelectAllRows: t => {
            if (e.readOnly) return;
            e.setSelectAllRows?.(t);
        },
        selectionMode: e.selectionMode === "parentChild" ? "multiple" : e.selectionMode,
        selectAll: e.selectAll,
        getSelectAllCheckboxState: () => {
            const {getSelectAllCheckboxState: t, disabledRows: o, readonlyRows: n, selectionMode: a, disabledAndSelectedRows: r, readOnlyAndSelectedRows: s, preference: i} = e;
            const l = t?.();
            const c = o?.size ?? 0;
            const d = n?.size ?? 0;
            const u = b.selectedRows;
            const m = u?.size ?? 0;
            const p = r?.size ?? 0;
            const f = s?.size ?? 0;
            if (c === 0 && d === 0) {
                if (l !== undefined || a !== "parentChild" || !y) return l;
            }
            if (u && c > 0) {
                const t = new Set([ ...u, ...s || [], ...o || [] ]);
                const n = e.areRowsVisible ? e.areRowsVisible(t) : true;
                if (n && t.size >= e.rowCount || b.selectAll === true) return true;
                if (f > 0) return "mixed";
                if (!u || m === 0 || r && A(u, r) || p > m) {
                    return false;
                }
                if (m > 0) return "mixed";
            }
            if (b.selectAll !== true && u && (u?.size ?? 0) > 0) {
                const t = new Set([ ...u, ...o || [] ]);
                if (t.size >= e.rowCount) return true;
                return "mixed";
            }
            if (b.selectAll === true && d > (e.readOnlyAndSelectedRows?.size ?? 0)) return "mixed";
            return b.selectAll || i?.selectAll;
        },
        getSelectionCheckboxState: t => {
            const o = e.getSelectionCheckboxState?.(t);
            if (o !== undefined) return o;
            if (e.disabledRows?.size ?? 0 > 0) {
                if (e.disabledAndSelectedRows?.has(t)) return true;
                if (e.disabledRows?.has(t)) return false;
            }
            if (k?.(t)) {
                if (e.readOnlyAndSelectedRows?.has(t) || C === true) return true; else if (b.partiallySelectedRows?.includes(t)) return "mixed"; else return false;
            }
            const n = b.partiallySelectedRows?.includes(t);
            return n === true ? "mixed" : undefined;
        },
        getSelectionState: t => {
            const o = e.getSelectionCheckboxState?.(t);
            if (o !== undefined) return o;
            if (e.disabledRows?.size ?? 0 > 0) {
                if (e.disabledAndSelectedRows?.has(t)) return true;
                if (e.disabledRows?.has(t)) return false;
            }
            if (k?.(t) && e.readOnlyAndSelectedRows?.has(t)) return true; else if (k?.(t)) return false;
            return undefined;
        },
        unmanagedColumnKeys: e.columns && e.columns[0] ? [ e.columns[0].key ] : undefined,
        renderCell: ({rowIndex: o, columnKey: n, columnIndex: a, disabled: r, ref: s, itemData: i}) => {
            const l = e.getDataNode?.(o);
            if (a === 0 && l) {
                const n = e.getRowKey?.(o);
                return t(a3, {
                    testId: gb(e.testId, "cellContent"),
                    treeTableId: e.id,
                    ref: s,
                    rowIndex: o,
                    rowKey: n,
                    node: l,
                    isExpandCollapseDisabled: e.isExpandCollapseDisabled,
                    expandedNodes: e.expandedNodes,
                    onExpand: e.onExpand,
                    disabled: r,
                    getNodeContent: e.getDataNodeContainer,
                    nodeElement: e.getNodeElement?.(n),
                    itemData: i,
                    suppressTooltip: e.suppressNodeTooltip
                });
            }
            return e.renderCellData({
                columnIndex: a,
                rowIndex: o,
                columnKey: n,
                disabled: r
            });
        },
        onSelect: (t, o, n, a) => {
            x(true);
            if (e.selectionMode !== "parentChild") {
                v({
                    type: "selectRow",
                    selectedRows: t,
                    selectAll: o,
                    interactive: true
                });
            } else {
                if (o === true || o === false) w(true);
                v({
                    type: "parentChildSelection",
                    rowKey: n || "",
                    selectedRows: t,
                    selectAll: o,
                    selected: a,
                    props: e,
                    interactive: true
                });
            }
        },
        onFocusChange: t => {
            o.current = t;
            e.onFocusChange?.(t);
        },
        narration: {
            onSayCell: _,
            onSaySelectionCell: D,
            disableRowChangeNarration: true,
            disableRowSelectionNarration: true
        }
    })));
};

const s3 = e => {
    const [t, o] = m(l2.reduce, l2.init(e?.selectedRows, e?.selectAll, undefined, e?.frozenColumnCount ?? 0, e?.orderedColumnKeys, e?.resizedColumns, undefined, e?.scrollPosition));
    const n = YI();
    const a = s((e => {
        n.current && o(l2.actions.createSelectRow({
            ...e,
            interactive: e.interactive ?? false,
            rowCount: e.rowCount ?? -1,
            hideSelectAll: e.hideSelectAll
        }));
    }), [ n ]);
    const r = s((e => {
        n.current && o(l2.actions.createSelectedRows({
            ...e,
            interactive: e.interactive ?? false,
            rowCount: e.rowCount ?? -1
        }));
    }), [ n ]);
    const i = s((e => {
        n.current && o(l2.actions.createSelectAll({
            ...e
        }));
    }), [ n ]);
    const l = s((e => {
        n.current && o(l2.actions.createFreezeColumn({
            ...e
        }));
    }), [ n ]);
    const c = s((e => {
        n.current && o(l2.actions.createFrozenColumnCount({
            ...e
        }));
    }), [ n ]);
    const d = s((e => {
        n.current && o(l2.actions.createResizeColumn({
            ...e
        }));
    }), [ n ]);
    const u = s((e => {
        n.current && o(l2.actions.createOrderedColumnKeys({
            ...e
        }));
    }), [ n ]);
    const p = s((e => {
        n.current && o(l2.actions.createPartiallySelectedRows({
            partiallySelected: e
        }));
    }), [ n ]);
    const f = s((e => {
        n.current && o(l2.actions.createScrollPosition({
            ...e
        }));
    }), [ n ]);
    const g = s((e => {
        n.current && o(l2.actions.createClearMeasurementCache({
            ...e
        }));
    }), [ n ]);
    const h = {
        ...e,
        selectedRows: t.selectedRows,
        partiallySelectedRows: t.partiallySelectedRows,
        selectAll: t.selectAll,
        frozenColumnCount: t.frozenColumnCount,
        resizedColumns: t.resizedColumns,
        orderedColumnKeys: t.orderedColumnKeys,
        scrollPosition: t.scrollPosition,
        clearMeasurementsStartingColumnIndex: t.clearMeasurementsStartingColumnIndex,
        clearMeasurementsStartingRowIndex: t.clearMeasurementsStartingRowIndex,
        selectionMetadata: t.selectionMetadata,
        selectionAnchor: t.selectionAnchor
    };
    return {
        preference: h,
        dispatch: o,
        setSelectRow: a,
        setSelectRows: r,
        setSelectAllRows: i,
        setFreezeColumn: l,
        setOrderedColumnKeys: u,
        setResizedColumn: d,
        setFreezeColumnCount: c,
        setPartiallySelectedRows: p,
        scrollTo: f,
        clearMeasurementCache: g
    };
};

const i3 = (e, t) => {
    const [o, a] = n(e);
    const [r, i] = m(Z5.reducer, Z5.init(t?.selectedRows, t?.partiallySelectedRows));
    const l = r.partiallySelectedRows;
    const {dispatch: c, ...d} = s3(t);
    const u = (e, t) => {
        const n = new Set(o);
        if (n.has(e.id) && !t) n.delete(e.id); else if (!n.has(e.id) && t) n.add(e.id);
        a(n);
    };
    const p = s((e => {
        i({
            type: "clearPartiallySelectedRows"
        });
        const t = d.setSelectAllRows;
        t(e);
    }), [ d.setSelectAllRows ]);
    const f = s((e => {
        i({
            type: "selectRow",
            ...e
        });
    }), []);
    const g = s((e => {
        i({
            type: "parentChildSelection",
            ...e
        });
    }), []);
    return {
        expandedNodes: o,
        setExpandedNodes: a,
        onExpand: u,
        ...d,
        treeDispatch: i,
        setSelectAllRows: p,
        setTreeSelection: f,
        setParentChildSelection: g,
        partiallySelectedRows: l
    };
};

var l3 = "sas_components-DualSelector-DualSelectorLayout-DualSelectorLayout_table-content";

var c3 = "sas_components-DualSelector-DualSelectorLayout-DualSelectorLayout_table-list";

var d3 = "sas_components-DualSelector-DualSelectorLayout-DualSelectorLayout_table-list-inner";

var u3 = "sas_components-DualSelector-DualSelectorLayout-DualSelectorLayout_label";

var m3 = "sas_components-DualSelector-DualSelectorLayout-DualSelectorLayout_text";

var p3 = "sas_components-DualSelector-DualSelectorLayout-DualSelectorLayout_listIcon";

var f3 = "sas_components-DualSelector-DualSelectorLayout-DualSelectorLayout_icon";

var g3 = "sas_components-DualSelector-DualSelectorLayout-DualSelectorLayout_list-search-field";

var h3 = "sas_components-DualSelector-DualSelectorLayout-DualSelectorLayout_search-field";

var b3 = "sas_components-DualSelector-DualSelectorLayout-DualSelectorLayout_description-text";

var v3 = "sas_components-DualSelector-DualSelectorLayout-DualSelectorLayout_flow-container";

var y3 = {
    tableContent: l3,
    tableList: c3,
    tableListInner: d3,
    label: u3,
    text: m3,
    listIcon: p3,
    icon: f3,
    listSearchField: g3,
    searchField: h3,
    descriptionText: b3,
    flowContainer: v3
};

const x3 = e => (e._alwaysSelected || e.alwaysSelected) ?? false;

const S3 = (e, t) => {
    const o = parseInt(e);
    const n = t[o];
    if (!n || !n.data.hasChildren) return [];
    const a = [];
    let r = (n.data.level || 0) + 1;
    for (let e = o + 1; e < t.length; e++) {
        const {level: o, hasChildren: n} = t[e].data;
        if (o === r) a.push(t[e]);
        if (n) r++;
    }
    return a;
};

const w3 = (e, t) => S3(e, t).map((e => e.key));

const C3 = (e, t) => {
    const o = [];
    const n = parseInt(e);
    if (n !== -1) {
        const e = t[n];
        let a = e.data.level - 1;
        for (let e = n; e >= 0; e--) {
            const {level: n} = t[e].data;
            if (n === a) {
                o.push(t[e].key);
                --a;
            }
        }
    }
    return o;
};

const E3 = (e, t) => {
    const o = [];
    const n = parseInt(e);
    const a = t[n];
    if (!a || !a.data.hasChildren) return [];
    const r = a.data.level + 1;
    for (let e = n + 1; e < t.length; e++) {
        const {level: n} = t[e].data;
        if (n === r) o.push(t[e].key);
        if (n > r) continue;
        if (n === a.data.level) break;
    }
    return o;
};

const I3 = (e, t) => {
    let o = E3(e, t);
    o.forEach((e => {
        o = [ ...o, ...I3(e, t) ];
    }));
    return o;
};

const _3 = (e, t) => {
    const o = [];
    let n = 0;
    for (let a = 0; a < t.length; a++) {
        const r = t[a];
        const {id: s, hasChildren: i} = r.data;
        const l = e.has(s);
        o[n] = {
            ...r
        };
        n++;
        if (!l && i) {
            const e = I3(r.key, t);
            a += e.length;
        }
    }
    return o;
};

const D3 = u(((e, o) => {
    let s = [];
    const i = e.data;
    const l = {
        initialDimensions: {
            height: 200,
            width: 200
        }
    };
    const [d, u] = Q1(l);
    const [m, p] = n("");
    const [f, h] = n({
        selectAll: false,
        selectedRows: undefined
    });
    const b = c(null);
    const v = NA("DualSelector");
    const y = C_();
    const x = e.descriptionField;
    const S = JA();
    const w = e.numberOfResults;
    g(o, (() => ({
        reset: () => {
            p("");
        }
    })));
    const C = sq({
        toSortKey: t => t[e.dataFieldKeys[0]],
        direction: "ascending"
    });
    const E = {
        visible: {
            opacity: 1
        },
        hidden: {
            opacity: 0
        }
    };
    const I = (o, n, a, r, s) => {
        const i = M[n].data;
        const l = `listWithIcon${n}`;
        const c = (e.tableName === "target" && (i._alwaysSelected || i.alwaysSelected)) ?? false;
        const d = e.tableName === "target" && i._custom;
        const u = i[e.dataFieldKeys[o]];
        const m = M[n].count;
        const p = u.toString() + (m > 1 ? ` (${m})` : "");
        const f = u.toString();
        return t(Ne.div, {
            variants: E,
            initial: "hidden",
            animate: "visible",
            exit: "hidden",
            className: y3.label
        }, i?.icon ? t(MM, Ee({
            className: y3.listIcon
        }, "icon" in i.icon ? {
            ...i.icon
        } : {
            icon: i.icon
        }, {
            testId: gb(e.testId, l),
            disabled: s
        })) : null, t(iN, {
            orientation: "vertical",
            spacing: "none",
            className: y3.text
        }, t(jP, {
            wrapText: false,
            disabled: s
        }, e.tableName === "target" ? p : f), x && i[x] ? t(LP, {
            wrapText: false,
            className: y3.descriptionText,
            testId: gb(e.testId, "descriptionLabel"),
            disabled: s
        }, i[x]) : null), c ? t(MM, {
            className: y3.icon,
            icon: xR,
            tooltip: v("lockClosed.tooltip.label")
        }) : null, d ? t(MM, {
            className: y3.icon,
            icon: rT,
            tooltip: v("customItem.choiceIcon.tooltip.label"),
            testId: gb(e.testId, "choiceIcon")
        }) : null);
    };
    const _ = (o, n) => {
        const a = M[o].data;
        const r = (e.tableName === "target" && (M[o].data._alwaysSelected || M[o].data.alwaysSelected)) ?? false;
        const s = e.tableName === "target" && M[o].data._custom;
        return t(Ne.div, {
            variants: E,
            initial: "hidden",
            animate: "visible",
            exit: "hidden",
            className: y3.label
        }, t(iN, {
            orientation: "vertical",
            spacing: "none",
            className: y3.text
        }, n, x && a[x] ? t(LP, {
            wrapText: false,
            style: {
                marginInlineStart: `${J5 * (a.level || 0)}px`
            },
            className: y3.descriptionText,
            testId: gb(e.testId, "descriptionLabel")
        }, a[x]) : null), r ? t(MM, {
            className: y3.icon,
            icon: xR,
            tooltip: v("lockClosed.tooltip.label")
        }) : null, s ? t(MM, {
            className: y3.icon,
            icon: rT,
            tooltip: v("customItem.choiceIcon.tooltip.txt"),
            testId: gb(e.testId, "choiceIcon")
        }) : null);
    };
    const D = (t, o, n) => {
        const a = [];
        for (const [r, s] of t.entries()) {
            a.push({
                key: `_${r}`,
                label: s,
                cellContent: e.type !== "tree" && (o || n) ? I : undefined,
                maximumWidth: 2e3
            });
        }
        return a;
    };
    if (e.tableName === "source" && e.type !== "tree" && !e.disableSort) {
        i.sort(e.sortFunction ?? C);
    }
    if (e.tableName === "target" && e.type !== "tree") {
        e.sortFunction && i.sort(e.sortFunction);
    }
    const L = r((() => {
        const t = i.length;
        if (t > 0) {
            const t = Object.keys(i).map((e => i[e]));
            if (e.tableName === "source" && e.type === "tree") {
                t.sort(((e, t) => {
                    const o = "index";
                    let n = 0;
                    if (e[o] > t[o]) {
                        n = 1;
                    } else if (e[o] < t[o]) {
                        n = -1;
                    }
                    return n;
                }));
            }
            return t;
        } else {
            return [];
        }
    }), [ i.length, i ]);
    const T = r((() => {
        if (e.tableName === "target" && e.displayStyle === "single") {
            return L3(L);
        } else {
            return T3(L, e.type);
        }
    }), [ L, e.type, e.displayStyle, e.tableName ]);
    if (!(i === null || i === undefined && !e.alwaysSelected)) {
        if (L.length > 0) {
            const t = [];
            if (e.dataFieldKeys !== null && e.dataFieldKeys !== undefined) {
                t.push(e.dataFieldKeys[0]);
                const o = L.some((e => e.icon && e.icon.toString().length > 0));
                s = D(t, o, x);
                const n = L.some((e => e.infoText));
                n && s.push({
                    key: "info",
                    label: "",
                    width: 32
                });
            }
        }
    }
    const R = r((() => e.selections ? R3(e.selections, L, T) : undefined), [ L, T, e.selections ]);
    a((() => {
        if (e.disableFilter) {
            p("");
        }
    }), [ e.disableFilter ]);
    const {onExpand: k, ...A} = i3(new Set(T.filter((e => e.data.expanded)).map((e => e.data.id))), {
        selectedRows: new Set(R),
        selectAll: f.selectAll
    });
    const [M, N] = n(_3(A.expandedNodes, T));
    const [O, P] = n(M.length);
    const B = k_(M);
    a((() => {
        const e = _3(A.expandedNodes, T);
        N(e);
        P(e.length);
    }), [ A.expandedNodes, T, m ]);
    a((() => {
        const t = A.setSelectRows;
        const o = A.scrollTo;
        const n = A.setExpandedNodes;
        const a = A.clearMeasurementCache;
        a({
            startColumnIndex: 0,
            startRowIndex: 0
        });
        const r = new Set(A.expandedNodes);
        R?.forEach((e => {
            const t = C3(e, T);
            t.forEach((e => {
                const t = T.find((t => t.key === e));
                const o = t?.data.id;
                if (!r.has(o)) {
                    r.add(o);
                }
            }));
        }));
        if (r.size !== A.expandedNodes.size) {
            n(r);
        }
        t({
            selectedRows: new Set(R),
            rowCount: L.length
        });
        let s = -1;
        if (e.focusAfterAction) {
            if (Array.isArray(R) && R.length > 0) {
                s = parseInt(R[0]);
            } else if (e.isDataReset) {
                s = 0;
            } else {
                if (Array.isArray(B) && M.length > B.length) {
                    s = B.findIndex(((t, o) => t.data[e.dataFieldKeys[0]] !== M[o].data[e.dataFieldKeys[0]]));
                    if (s === -1) {
                        s = B.length + 1;
                    }
                }
            }
            if (s !== -1 && s !== A.preference.scrollPosition?.cell.rowIndex) {
                o({
                    cell: {
                        rowIndex: s,
                        colIndex: 1,
                        region: n2.Data
                    },
                    align: "smart"
                });
            }
        }
    }), [ B, e.isDataReset, T, M, e.dataFieldKeys, e.tableName, R, e.focusAfterAction, L.length, A.expandedNodes, A.setSelectRows, A.scrollTo, A.setSelectRow, A.setExpandedNodes, A.preference.scrollPosition, A.clearMeasurementCache ]);
    const z = e.customItems;
    a((() => {
        if (e.tableName === "source" && b.current && !e.preventInitialAutoFocus) {
            b.current.focus();
        }
    }), [ e.tableName, e.preventInitialAutoFocus ]);
    a((() => {
        const t = (t, o) => {
            const n = Math.max(-1, ...(t ?? []).map((e => parseInt(e))));
            const a = n < T.length ? t : R;
            const r = (a ?? []).map((e => T[parseInt(e)].originRowIndex.toString()));
            const s = e.selectionCallback;
            const i = e.tableName;
            s((!t && o && o !== "mixed" ? [ ...L.keys() ].map(String) : r).filter((e => !L[parseInt(e)]?.hasChildren)), i);
        };
        if (f.selectedRows || f.selectAll) {
            t(f.selectedRows, f.selectAll);
        }
    }), [ f ]);
    const F = c({
        rowIndex: 0,
        region: e.data.length === 0 && e.hideSearch ? n2.ZeroStateOverlay : n2.Data,
        colIndex: 0
    });
    const j = I_({
        "table-scroll-bar-space": "1rem",
        "tree-hover-bg": "transparent"
    });
    function V(e) {
        return e.name !== undefined;
    }
    const H = e.tableName === "target" ? v("emptySelectedMessage.msg") : v("emptyAvailableMessage.msg");
    const U = e.zeroStateText ?? H;
    const G = e.dataFieldKeys[0];
    const K = e => {
        const t = [];
        const o = M.findIndex((t => t.key === e));
        if (o === -1) return t;
        const n = M[o];
        let a = n.data.level - 1;
        for (let e = o; e >= 0; e--) {
            const {level: o} = M[e].data;
            if (o === a) {
                t.push(M[e].key);
                --a;
            }
        }
        return t;
    };
    const W = e => {
        const t = [];
        const o = M.findIndex((t => t.key === e));
        const n = M[o];
        if (!n || !n.data.hasChildren) return [];
        const a = n.data.level + 1;
        for (let e = o + 1; e < M.length; e++) {
            const {level: o} = M[e].data;
            if (o === a) t.push(M[e].key);
            if (o > a) continue;
            if (o === n.data.level) break;
        }
        return t;
    };
    const $ = e => {
        const t = M.find((t => t.key === e));
        if (!t) return {};
        const o = typeof t.data.level === "number" && !isNaN(t.data.level) ? t.data.level + 1 : null;
        const n = K(t.key);
        let a, r;
        if (n.length === 0) {
            const t = M.filter((e => {
                const t = K(e.key);
                return t.length === 0;
            }));
            a = t.length;
            r = t.findIndex((t => t.key === e)) + 1;
        } else {
            const t = W(n[0]);
            a = t.length;
            r = t.indexOf(e) + 1;
        }
        return {
            level: o,
            setSize: a,
            positionInSet: r
        };
    };
    return t("div", {
        className: y3.tableContent,
        "data-testid": e.testId,
        style: {
            ...I_({
                "searchfield-spacing": y.tokensExperimental["space-base-xs"],
                "icon-mg-inline": y.tokensExperimental["space-inline-xs"]
            }, "dualselector-list"),
            ...I_({
                "font-size-s": y.tokensExperimental["font-size-body-text-s"]
            }, "description")
        }
    }, !e.hideSearch ? t("div", {
        className: y3.listSearchField
    }, t(pQ, {
        testId: gb(e.testId, "search"),
        className: y3.searchField,
        inputRef: e.tableName === "source" ? b : undefined,
        value: m,
        placeholder: v("filter.placeholder.label"),
        onChange: t => {
            p(t.value);
            e.filterValue(t.value, e.tableName);
        },
        disabled: e.disableFilter,
        ariaLabel: e.searchAriaLabel,
        filterMode: true,
        numberOfResults: w
    })) : null, t("div", {
        className: y3.tableList,
        onKeyUpCapture: t => {
            if (e.data.length === 0) t.stopPropagation();
        }
    }, t("div", {
        className: y3.tableListInner,
        ref: d
    }, t(Me, {
        mode: "wait"
    }, u ? t(r3, Ee({
        readOnly: !!e.readOnly,
        disabled: e.tableName === "source" && !!e.disableList,
        role: e.type === "tree" ? "treegrid" : "grid"
    }, A, {
        style: j,
        testId: gb(e.testId, `${e.tableName}Table`),
        ariaLabel: e.tableAriaLabel,
        key: e.tableName,
        rowCount: O,
        height: u?.height,
        width: u?.width,
        columns: s,
        getRowAttributes: $,
        getRowKey: t => {
            if (t >= M.length || t < 0) return "";
            if (e.type === "tree") return M[t].key;
            return t.toString();
        },
        getRowIndex: e => parseInt(e),
        getDataNode: t => e.type === "tree" && M[t] ? M[t].data : undefined,
        getDataNodeContainer: _,
        getChildNodesRowKey: e => w3(e, T),
        getParentsRowKey: e => {
            const t = parseInt(e);
            const o = [];
            const n = M[t];
            let a = (n.data.level || 1) - 1;
            for (let e = t; e >= 0; e--) {
                const {level: t} = M[e].data;
                if (t === a) {
                    o.push(M[e].key);
                    --a;
                }
            }
            return o;
        },
        onExpand: (e, t) => {
            const o = new Set(A.expandedNodes);
            if (o.has(e.id) && !t) o.delete(e.id); else if (!o.has(e.id) && t) o.add(e.id);
            const n = _3(o, T);
            N(n);
            k(e, t);
            P(n.length);
        },
        renderCellData: ({rowIndex: o, columnKey: n, columnIndex: a, disabled: r}) => {
            const s = M[o];
            if (n === "info") {
                return s.data.infoText ? t(MM, {
                    icon: sR,
                    tooltip: s.data.infoText,
                    onClick: e => {
                        e.preventDefault();
                        e.stopPropagation();
                    },
                    disabled: r
                }) : null;
            }
            const i = s.data[e.dataFieldKeys[a]];
            const l = s.count;
            const c = i.toString() + (l > 1 ? ` (${l})` : "");
            const d = i.toString();
            const u = e.tableName === "target" && x3(s.data);
            const m = e.tableName === "target" && s.data._custom;
            return t(Ne.div, {
                variants: E,
                initial: "hidden",
                animate: "visible",
                exit: "hidden"
            }, t(iN, {
                spacing: "xs",
                className: y3.flowContainer
            }, t(jP, {
                className: y3.text,
                wrapText: false,
                disabled: r
            }, e.tableName === "target" ? c : d), u ? t(MM, {
                className: y3.icon,
                icon: xR,
                testId: gb(e.testId, "icon"),
                tooltip: v("lockClosed.tooltip.label")
            }) : null, m ? t(MM, {
                className: y3.icon,
                icon: rT,
                tooltip: v("customItem.choiceIcon.tooltip.label"),
                testId: gb(e.testId, "choiceIcon")
            }) : null));
        },
        selectionMode: "desktop",
        onSelect: (t, o) => {
            const n = o === true ? A3(e.displayStyle, T) ? true : "mixed" : o;
            const a = o === true && (!t || t.size === 0) ? T.map(((e, t) => t.toString())) : Array.from(t ?? []);
            a.filter((e => T[parseInt(e)]?.data.hasChildren === true));
            h({
                selectAll: n,
                selectedRows: a ? [ ...a ] : undefined
            });
        },
        isRowDisabled: t => e.tableName !== "target" && (e.data[parseInt(t)]?._disabled ?? false),
        initialFocusVisible: !e.preventInitialAutoFocus && e.hideSearch && e.tableName === "source" || false,
        initialFocus: !e.preventInitialAutoFocus && e.tableName === "source" ? R && R.length > 0 && e.focusAfterAction ? {
            rowIndex: parseInt(R[0]),
            region: n2.Data,
            colIndex: 0
        } : F.current : undefined,
        onFocusChange: e => {
            F.current = e;
        },
        cellBordersVisible: false,
        columnHeadersVisible: false,
        onDoubleClick: ({rowIndex: t, rowKey: o}) => {
            const n = e.displayStyle === "single" ? t : parseInt(o);
            e.onDoubleClick(T[n].originRowIndex, e.tableName);
        },
        emptyDataProps: {
            text: U
        },
        hideManageColumnsButton: true,
        rowHeight: e => {
            if (x && M[e]?.data[x]) {
                return 40;
            } else {
                return 28;
            }
        },
        removeFillRows: true,
        accessibilityInfo: {
            getCellInfo: e => {
                let t = null;
                let o = "";
                const n = [];
                const a = M[e.rowIndex]?.data;
                if (e.columnIndex === 0) {
                    let e;
                    if (a) {
                        if (a.icon) {
                            e = a.icon;
                            const t = V(e);
                            const {...o} = t ? S({
                                icon: a.icon
                            }) : S(e);
                            if (o?.ariaLabel && o?.ariaLabel !== a[G].toString()) {
                                o?.ariaLabel && n.push(o.ariaLabel);
                            }
                        }
                        if (z?.includes(a)) {
                            t = v("customItemSelection.aria", {
                                customItemSelected: a[G].toString()
                            });
                        } else if (x && a[x]) {
                            t = `${a[G].toString()} ${a[x].toString()}`;
                        } else {
                            t = a[G].toString();
                        }
                        if (a._alwaysSelected || a.alwaysSelected) {
                            o = v("lockClosed.aria");
                            n.push(o);
                        }
                    }
                    return n.length > 0 ? `${n.join(", ")} ${t}` : t;
                } else {
                    if (a.infoText) {
                        return `${a.infoText}, ${a[G].toString()}`;
                    }
                    return null;
                }
            }
        },
        setSelectAllRows: O === 0 ? undefined : A.setSelectAllRows
    })) : null))));
}));

function L3(e) {
    const t = [];
    e.forEach(((e, o) => {
        const n = t.findIndex((t => JSON.stringify(e) === JSON.stringify(t.data)));
        if (n <= -1) {
            t.push({
                data: e,
                count: 1,
                originRowIndex: o,
                key: `${o}`
            });
        } else {
            t[n].count++;
            t[n].originRowIndex = o;
        }
    }));
    return t;
}

function T3(e, t) {
    const o = e.map(((e, o) => {
        if (t === "tree" && e.index === undefined) {
            e.index = o;
        }
        return {
            data: e,
            count: 1,
            originRowIndex: o,
            key: `${o}`
        };
    }));
    return o.filter((e => {
        const t = I3(e.key, o).filter((e => {
            const t = o.find((t => t.key === e));
            return t && !t.data.hasChildren;
        }));
        return !e.data.hasChildren || t.length > 0;
    })).map(((e, t) => ({
        ...e,
        key: `${t}`
    })));
}

function R3(e, t, o) {
    const n = e.map((e => {
        const n = parseInt(e);
        let a = o.findIndex((e => e.originRowIndex === n));
        if (a === -1) {
            const e = t[n];
            a = o.findIndex((t => t.data === e));
        }
        return a.toString();
    }));
    return n;
}

function k3(e) {
    return e.findIndex((e => e.count > 1)) > -1;
}

function A3(e = "multiple", t) {
    return e === "multiple" || !k3(t);
}

function M3(e) {
    return !(e._disabled ?? false) && !e.hasChildren;
}

const N3 = (e, t, o) => (n, a) => O3(n, a, e, t, o);

function O3(e, t, o, n, a) {
    let r;
    let s = [];
    let i = [];
    let l = [];
    let c = [];
    const d = e.customItems ? [ ...e.customItems ] : [];
    let u = [];
    let m = 0;
    let p = [];
    const f = (e, t, o) => {
        const a = R7(e);
        n(a, t, o);
    };
    if (t.type !== "filter" && t.type !== "custom_add" && t.type !== "reset") {
        p = t.payload.selectedRows.map((e => parseInt(e)));
    }
    e.focusAfterAction = t.type === "selection" ? false : true;
    e.isDataReset = t.type === "reset" ? true : false;
    e.sourceData.sort(((e, t) => {
        const o = "index";
        let n = 0;
        if (e[o] > t[o]) {
            n = 1;
        } else if (e[o] < t[o]) {
            n = -1;
        }
        return n;
    }));
    const g = !qI(a) && a > 0;
    switch (t.type) {
      case "custom_add":
        s = [ ...e.sourceData ];
        c = [ ...e.targetData ];
        const n = [ ...c[t.payload.layoutIndex ?? 0] ];
        if (g) {
            if ((t.payload.selectedRows?.length ?? 0) + n.length > a) {
                return e;
            }
        }
        r = [ {
            from: "customField",
            button: "customField",
            currentSourceData: [ ...e.sourceData ],
            currentTargetData: [ ...e.targetData[0] ],
            lastItemSelection: []
        } ];
        n.push(t.payload.selectedRows);
        d.push(t.payload.selectedRows);
        e.narrator = {
            selectedRows: 1,
            direction: t.type,
            action: "customAdd"
        };
        const h = n7(n, e.targetSearchValue?.[0], e.key);
        f(n, "customControlAdd", e.selectedTableIndex);
        c[0] = n;
        const b = h && [ h ];
        return {
            ...e,
            ...T7(e.sourceData, n, o, a, e.sourceSearchValue, e.key),
            targetData: c,
            targetFilteredData: b,
            currentActionQueue: r,
            customItems: d,
            itemSelections: u
        };

      case "add":
        return W3(e, t.payload, f, a);

      case "remove":
        return $3(e, t.payload, f, a);

      case "undo":
        const v = e.currentActionQueue;
        let y = "add";
        let x;
        let S = [];
        const w = v[0].selectedTableIndex ?? 0;
        if (v && v.length > 0) {
            y = v[0].from === "source" ? "add" : "remove";
            if (v[0].from === "source" || v[0].from === "target") {
                x = v[0].from;
            }
            s = [ ...v[0].currentSourceData ];
            i = [ ...v[0].currentTargetData ];
            if (v[0].button === "customField") {
                e.customItems?.splice(e.customItems.length - 1, 1);
            }
            if (v[0].button === "remove") {
                u = v[0].lastItemSelection ? v[0].lastItemSelection : [];
                const t = u.map((e => parseInt(e))).sort(G3);
                c = [ ...e.targetData ];
                i = [ ...c[v[0].selectedTableIndex ?? 0] ];
                const o = v[0].currentTargetData;
                const n = v[0].lastTargetFilteredData;
                const a = Y3(n, o);
                if (v[0].lastItemSelection) {
                    for (const e of t) {
                        const t = a[e];
                        i.splice(t, 0, o[t]);
                    }
                }
            }
            s = L7(s, i, o, a);
            S = n7(i, e.targetSearchValue?.[0], e.key);
            e.sourceFilteredData = n7(s, e.sourceSearchValue, e.key);
        }
        let C;
        if (s.length === 0 && i.length > 0) {
            e.sourceSearchValue = "";
            e.sourceFilteredData = undefined;
        } else if (s.length > 0 && i.length === 0) {
            C = "";
            S = undefined;
        }
        e.narrator = {
            direction: t.type,
            action: "undo",
            undoTo: y
        };
        f(i, undefined, e.selectedTableIndex);
        const E = [ ...e.targetData ];
        E[v[0].selectedTableIndex ?? 0] = i;
        const I = e.targetFilteredData && [ ...e.targetFilteredData ];
        if (I) I[w] = S;
        const _ = e.targetSearchValue && [ ...e.targetSearchValue ];
        if (_ && (C || C === "")) {
            _[w] = C;
        }
        return {
            ...e,
            sourceData: s,
            targetData: E,
            currentActionQueue: [],
            selectionTable: x,
            itemSelections: x ? v[0].lastItemSelection : undefined,
            targetFilteredData: I,
            targetSearchValue: _
        };

      case "up":
        c = [ ...e.targetData ];
        l = [ ...c[e.selectedTableIndex ?? 0] ];
        m = 0;
        p.sort(G3);
        for (let e = 0; e < p.length; e++) {
            m = p[e];
            l = B3(l, m, m - 1);
            u.push((m - 1).toString());
        }
        e.narrator = {
            direction: t.type,
            action: "reorder"
        };
        f(l, "reorder", e.selectedTableIndex);
        c[e.selectedTableIndex ?? 0] = l;
        return {
            ...e,
            sourceData: e.sourceData,
            targetData: c,
            itemSelections: u
        };

      case "down":
        m = 0;
        c = [ ...e.targetData ];
        l = [ ...c[e.selectedTableIndex ?? 0] ];
        p.sort(K3);
        for (let e = 0; e < p.length; e++) {
            m = p[e];
            l = B3(l, m, m + 1);
            u.push((m + 1).toString());
        }
        e.narrator = {
            direction: t.type,
            action: "reorder"
        };
        f(l, "reorder", e.selectedTableIndex);
        c[e.selectedTableIndex ?? 0] = l;
        return {
            ...e,
            sourceData: e.sourceData,
            targetData: c,
            itemSelections: u
        };

      case "top":
        m = 0;
        let D = 0;
        c = [ ...e.targetData ];
        l = [ ...c[e.selectedTableIndex ?? 0] ];
        p.sort(G3);
        for (let e = 0; e < p.length; e++) {
            if (l[t.payload.selectedRows[e]]) {
                m = p[e];
                l = B3(l, m, D);
                u.push(D.toString());
            }
            D++;
        }
        e.narrator = {
            direction: t.type,
            action: "reorder"
        };
        f(l, "reorder", e.selectedTableIndex);
        c[e.selectedTableIndex ?? 0] = l;
        return {
            ...e,
            sourceData: e.sourceData,
            targetData: c,
            itemSelections: u
        };

      case "bottom":
        m = 0;
        c = [ ...e.targetData ];
        l = [ ...c[e.selectedTableIndex ?? 0] ];
        let L = l.length;
        p.sort(K3);
        for (let e = 0; e < p.length; e++) {
            L--;
            if (l[t.payload.selectedRows[e]]) {
                m = p[e];
                l = B3(l, m, L);
                u.push(L.toString());
            }
        }
        e.narrator = {
            direction: t.type,
            action: "reorder"
        };
        f(l, "reorder", e.selectedTableIndex);
        c[e.selectedTableIndex ?? 0] = l;
        return {
            ...e,
            sourceData: e.sourceData,
            targetData: c,
            itemSelections: u
        };

      case "filter":
        const T = P3(t.payload.searchValue);
        const R = new RegExp(T, "gi");
        let k;
        let A;
        let M = e.targetSearchValue;
        let N = e.targetFilteredData;
        e.key = t.payload.key;
        if (t.payload.table === "source") {
            if (!t.payload.searchValue) {
                e.sourceFilteredData = undefined;
                e.sourceSearchValue = t.payload.searchValue;
            } else {
                e.sourceSearchValue = t.payload.searchValue;
                e.sourceFilteredData = e.sourceData.filter((e => e[t.payload.key].match(R)));
            }
        } else {
            k = t.payload.searchValue;
            if (!k) {
                A = undefined;
            } else {
                A = e.targetData[t.payload.layoutIndex ?? 0].filter((e => e[t.payload.key].match(R)));
            }
            if (M === undefined) M = [];
            if (N === undefined) N = [];
            N[t.payload.layoutIndex ?? 0] = A;
            M[t.payload.layoutIndex ?? 0] = k;
        }
        e.itemSelections = [];
        if (t.payload.table === "target") f(A ?? [], "filter", t.payload.layoutIndex);
        return {
            ...e,
            targetSearchValue: M,
            targetFilteredData: N
        };

      case "selection":
        return {
            ...e,
            itemSelections: t.payload.selectedRows,
            selectionTable: t.payload.tableName,
            selectedTableIndex: t.payload.selectedTableIndex
        };

      case "delete":
        const O = J3(e.targetData);
        const P = J3(e.targetFilteredData?.[e.selectedTableIndex ?? 0] ?? []);
        s = [ ...e.sourceData ];
        c = [ ...e.targetData ];
        l = [ ...c[t.payload.layoutIndex ?? 0] ];
        const B = e.targetFilteredData?.[0];
        const z = B && [ ...B ];
        if (z?.length && e.itemSelections?.length) {
            const o = [];
            for (const t of e.itemSelections) {
                o.push(z[Number(t)]);
            }
            for (const e of o) {
                l.splice(l.indexOf(e), 1);
                B?.splice(B.indexOf(e), 1);
            }
            const n = I7(p, P ?? O[t.payload.layoutIndex ?? 0], t.payload.targetDisplayStyle ?? "multiple");
            u = n !== undefined ? [ n.toString() ] : [];
        } else {
            const o = U3(l, [], p, t.payload.targetDisplayStyle);
            l = o?.newSourceData;
            u = o?.newSelectedRowsArray;
            f(l, undefined, e.selectedTableIndex);
        }
        c[t.payload.layoutIndex ?? 0] = l;
        return {
            ...e,
            ...T7(s, l, o, a, e.sourceSearchValue, e.key),
            targetData: c,
            currentActionQueue: [],
            itemSelections: u,
            targetFilteredData: [ B ]
        };

      case "reset":
        return {
            ...e,
            ...t.payload,
            ...T7(t.payload.sourceData, t.payload.targetData[0], o, a, t.payload.sourceSearchValue, t.payload.key)
        };

      default:
        f(i, undefined, e.selectedTableIndex);
        return {
            ...e,
            ...T7(e.sourceData, e.targetData[0], o, a, e.sourceSearchValue, e.key),
            targetData: e.targetData,
            currentActionQueue: []
        };
    }
}

const P3 = e => e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");

function B3(e, t, o) {
    let n = 1;
    const a = e.splice(t, n)[0];
    n = 0;
    e.splice(o, n, a);
    return e;
}

function z3(e, t, o) {
    const n = [];
    if (e.length === 1) {
        if (o === "single") {
            const o = F3(e, t);
            n.push(o);
        } else {
            if (e[0] === t.length - 1) {
                n.push(e[0] - 1);
            } else {
                n.push(e[0]);
            }
        }
    } else if (e.length > 1) {
        if (j3(e, t)) {
            if (V3(e)) {
                e.sort(G3);
                n.push(e[0] - 1);
            } else {
                let o = 0;
                const a = e[e.length - 1];
                const r = e.filter((e => e <= a));
                if (a === t.length - 1) {
                    o = a - 1 - (e.length - 1);
                } else {
                    o = a + 1 - r.length;
                }
                n.push(o);
            }
        } else {
            if (V3(e)) {
                e.sort(G3);
                n.push(e[0]);
            } else {
                let t = 0;
                const o = e[e.length - 1];
                const a = e.filter((e => e <= o));
                t = o + 1 - a.length;
                n.push(t);
            }
        }
    }
    return n.map(String);
}

function F3(e, t) {
    const o = t[e[0]];
    const n = t.findIndex((e => JSON.stringify(e) === JSON.stringify(o)));
    return n === t.length - 1 ? n - 1 : n;
}

const j3 = (e, t) => {
    if (e && e.some((e => e === t.length - 1))) {
        return true;
    } else {
        return false;
    }
};

const V3 = e => {
    const t = [ ...e ];
    t.sort(G3);
    for (let e = 0; e < t.length - 1; e++) {
        if (Math.abs(t[e] - t[e + 1]) !== 1) {
            return false;
        }
    }
    return true;
};

function H3(e, t) {
    return t.filter((t => !e.includes(t)));
}

function U3(e, t, o, n) {
    const a = z3(o, e, n);
    for (const n of o) {
        if (e[n]) {
            t.push(e[n]);
        }
    }
    const r = H3(t, e);
    return {
        newSourceData: r,
        newTargetData: t,
        newSelectedRowsArray: a
    };
}

function G3(e, t) {
    return e - t;
}

function K3(e, t) {
    return t - e;
}

function W3(e, t, o, n) {
    const {selectedRows: a, isMoveAll: r, mode: s} = t;
    const {sourceData: i, sourceFilteredData: l, sourceSearchValue: c, targetData: d, targetSearchValue: u, key: m} = e;
    const p = d[t.layoutIndex ?? 0];
    const f = !qI(n) && n > 0;
    if (f) {
        if (r && (l ?? i).filter((e => !e._disabled)).length + p.length > n || (a?.length ?? 0) + p.length > n) {
            return e;
        }
    }
    const g = Q3(e, a, r, t.layoutIndex ?? 0);
    const h = l ?? i;
    const b = Z3(a, h, r);
    const v = e7(l ?? i, b, r);
    const y = o7(v, p);
    const x = L7(s === "move" ? t7(v, i) : i, y, s, n);
    const S = x.length > 0 ? c : "";
    const w = n7(x, S, m);
    const C = n7(y, u?.[t.layoutIndex ?? 0], m);
    const E = f && y.length === n ? undefined : p7(a, h, s, r);
    const I = {
        selectedRows: a.length,
        direction: "add",
        action: r ? "moveall" : "move"
    };
    o(y, undefined, t.layoutIndex);
    const _ = [ ...d ];
    _[t.layoutIndex ?? 0] = y;
    const D = e.targetFilteredData && [ ...e.targetFilteredData ];
    if (C && D) D[t.layoutIndex ?? 0] = C;
    return {
        ...e,
        sourceData: x,
        targetData: _,
        sourceFilteredData: w,
        targetFilteredData: D,
        sourceSearchValue: S,
        currentActionQueue: [ g ],
        itemSelections: E,
        narrator: I,
        selectionTable: "source",
        selectedTableIndex: t.layoutIndex
    };
}

function $3(e, t, o, n) {
    const {selectedRows: a, isMoveAll: r, mode: s, targetDisplayStyle: i = "multiple", layoutIndex: l = 0} = t;
    const {sourceData: c, sourceSearchValue: d, targetData: u, targetFilteredData: m, targetSearchValue: p, key: f, customItems: g} = e;
    const h = m?.[l] ?? u[l];
    const b = Y3(m?.[l], u[l]);
    const v = Y3(g, u[l]);
    const y = Z3(a, h, r);
    const x = a7(y, h);
    const S = s7(y, h);
    const w = c7(q3(S, b), u[l]);
    const C = w.length > 0 && m?.[l] ? c7(S, m[l]) : undefined;
    const E = i7(y, h);
    const I = X3(q3(E, b), v);
    const _ = E.length > 0 && w.length > 0 && g ? c7(I, g) : g;
    const D = r7(x);
    const L = L7(s === "move" ? d7(D, c) : c, w, s, n);
    const T = u7(e, a.map((e => parseInt(e))), r, E, t.layoutIndex ?? 0);
    const R = l7(y, h);
    const k = n7(L, d, f);
    const A = I7(y, h, i);
    const M = w.length > 0 ? p?.[l] : "";
    const N = {
        selectedRows: a.length,
        direction: "remove",
        action: r ? "moveall" : "move"
    };
    o(w, undefined, l);
    const O = [ ...u ];
    O[l] = w;
    const P = e.targetFilteredData && [ ...e.targetFilteredData ];
    if (P) P[t.layoutIndex ?? 0] = C;
    const B = e.targetSearchValue && [ ...e.targetSearchValue ];
    if (B) {
        B[l] = M;
    }
    return {
        ...e,
        sourceData: L,
        sourceFilteredData: k,
        targetData: O,
        targetSearchValue: B,
        targetFilteredData: P,
        customItems: _,
        currentActionQueue: R.length > 0 ? [ T ] : [],
        narrator: N,
        itemSelections: A !== undefined ? [ A.toString() ] : undefined,
        selectionTable: "target",
        selectedTableIndex: l
    };
}

function Y3(e, t = []) {
    if (!e || e.length === 0) {
        return t.map(((e, t) => t));
    } else {
        const o = [];
        let n = 0;
        for (let a = 0; a < e.length; a++) {
            for (;n < t.length; n++) {
                if (JSON.stringify(e[a]) === JSON.stringify(t[n])) {
                    o[a] = n++;
                    break;
                }
            }
        }
        return o;
    }
}

function q3(e, t) {
    return e.map((e => t[e]));
}

function X3(e, t) {
    return e.map((e => t.findIndex((t => t === e))));
}

function Z3(e, t, o) {
    return o ? t.map(((e, t) => t)) : e.map((e => parseInt(e)));
}

function J3(e) {
    return e.map((e => ({
        ...e
    })));
}

function Q3(e, t, o, n) {
    const {sourceData: a, targetData: r, sourceFilteredData: s, targetFilteredData: i} = e;
    const l = r[n ?? 0];
    const c = i?.[n ?? 0];
    return {
        from: "source",
        button: o ? "addAll" : "add",
        currentSourceData: J3(a),
        currentTargetData: J3(l),
        lastItemSelection: [ ...t ],
        lastSourceFilteredData: s ? J3(s) : undefined,
        lastTargetFilteredData: c ? J3(c) : undefined,
        selectedTableIndex: n
    };
}

function e7(e, t, o = false) {
    return (o ? e.filter((e => !(e._disabled ?? false))) : t.map((t => e[t]))).filter((e => M3(e)));
}

function t7(e, t) {
    return t.filter((t => !e.includes(t)));
}

function o7(e, t) {
    return [ ...t, ...e ];
}

function n7(e, t, o) {
    if (t && o) {
        t = P3(t);
        const n = new RegExp(t, "gi");
        return e.filter((e => e[o].match(n)));
    } else {
        return undefined;
    }
}

function a7(e, t) {
    return e.map((e => t[e]));
}

function r7(e) {
    return e.filter((e => !(e._alwaysSelected || e._custom)));
}

function s7(e, t) {
    return e.filter((e => !t[e]._alwaysSelected));
}

function i7(e, t) {
    return e.filter((e => t[e]._custom));
}

function l7(e, t) {
    return e.filter((e => !t[e]._custom));
}

function c7(e, t) {
    const o = t.filter(((t, o) => !e.includes(o)));
    return o;
}

function d7(e, t) {
    return [ ...t, ...e ];
}

function u7(e, t, o, n, a) {
    const {sourceData: r, targetData: s, sourceFilteredData: i, targetFilteredData: l} = e;
    const c = m7(n, t);
    const d = l?.[a ?? 0];
    let u = s[a ?? 0];
    if (!!d && d.length > 0) {
        u = u.filter((e => !(e._custom && d.some((t => JSON.stringify(t) === JSON.stringify(e))))));
    } else {
        u = u.filter((e => !e._custom));
    }
    return {
        from: "target",
        button: o ? "removeAll" : "remove",
        currentSourceData: J3(r),
        currentTargetData: u,
        lastItemSelection: c,
        lastSourceFilteredData: i ? J3(i) : undefined,
        lastTargetFilteredData: d ? c7(n, J3(d)) : undefined,
        selectedTableIndex: a
    };
}

function m7(e, t) {
    const o = t.filter((t => !e.includes(t)));
    let n = o;
    const a = [ ...e ].sort(K3);
    a.forEach((e => {
        n = n.map((t => t > e ? t - 1 : t));
    }));
    return n.map((e => e.toString()));
}

function p7(e, t, o, n) {
    let a, r, s, i;
    switch (o) {
      case "move":
        a = Z3(e, t, n);
        r = a[a.length - 1];
        const o = x7(t);
        s = h7(r, a, t.length, true, o);
        return s === undefined ? undefined : [ s.toString() ];

      case "disable":
        a = Z3(e, t, n);
        r = a[a.length - 1];
        i = S7(t);
        s = h7(r, [ ...a, ...i ], t.length, false);
        return s === undefined ? undefined : [ s.toString() ];

      case "keep":
        a = Z3(e, t, false);
        r = a[a.length - 1];
        const l = f7(a, t);
        if (l.length > 0) {
            return l.map((e => e.toString()));
        } else {
            a = Z3(e, t, n);
            const o = g7(a, t);
            i = S7(t);
            s = h7(r, [ ...o, ...i ], t.length, false);
            return s === undefined ? undefined : [ s.toString() ];
        }
    }
}

function f7(e, t) {
    const o = [];
    e.forEach((e => {
        if (!t[e].disallowDuplication) {
            o.push(e);
        }
    }));
    return o;
}

function g7(e, t) {
    const o = [];
    e.forEach((e => {
        if (t[e].disallowDuplication) {
            o.push(e);
        }
    }));
    return o;
}

function h7(e, t, o, n, a) {
    const r = b7(t, a || [], o);
    let s = w7(e, r);
    if (n && s !== undefined) {
        const e = r.filter((e => e !== -1));
        s = e.findIndex((e => e === s));
    }
    return s;
}

function b7(e, t, o) {
    const n = v7(o);
    return y7(e, t, n);
}

function v7(e) {
    const t = new Array(e);
    for (let o = 0; o < e; o++) {
        t[o] = o;
    }
    return t;
}

function y7(e, t, o) {
    const n = [ ...o ];
    e.forEach((e => {
        n[e] = -1;
    }));
    t.forEach((e => {
        n[e] = -2;
    }));
    return n;
}

function x7(e) {
    const t = [];
    e.forEach(((e, o) => {
        if (!M3(e)) {
            t.push(o);
        }
    }));
    return t;
}

function S7(e) {
    const t = [];
    e.forEach(((e, o) => {
        if (e._disabled) {
            t.push(o);
        }
    }));
    return t;
}

function w7(e, t) {
    let o = C7(e, t);
    if (o === undefined) {
        o = E7(e, t);
    }
    return o;
}

function C7(e, t) {
    for (let o = e + 1; o < t.length; o++) {
        if (t[o] > -1) {
            return o;
        }
    }
    return undefined;
}

function E7(e, t) {
    for (let o = e - 1; o >= 0; o--) {
        if (t[o] > -1) {
            return o;
        }
    }
    return undefined;
}

function I7(e, t, o) {
    const n = e[e.length - 1];
    switch (o) {
      case "multiple":
        return h7(n, e, t.length, true);

      case "single":
        return _7(n, e, t);
    }
}

function _7(e, t, o) {
    const n = D7(e, t, o);
    const a = o.filter(((e, o) => !t.includes(o)));
    if (n !== undefined) {
        const e = JSON.stringify(n);
        for (let t = a.length - 1; t > -1; t--) {
            if (JSON.stringify(a[t]) === e) {
                return t;
            }
        }
    }
    return undefined;
}

function D7(e, t, o) {
    const n = o.filter(((o, n) => !t.includes(n) || n === e));
    const a = L3(n);
    const r = o[e];
    const s = a.findIndex((e => JSON.stringify(e.data) === JSON.stringify(r)));
    if (a[s].count > 1) {
        return r;
    }
    const i = h7(s, [ s ], a.length, false);
    return i !== undefined ? a[i].data : undefined;
}

function L7(e, t, o, n) {
    e = J3(e);
    const a = !qI(n) && n > 0 && t.length >= n;
    if (a) {
        e.forEach((e => e._disabled = true));
    } else {
        switch (o) {
          case "move":
            e.forEach((e => delete e._disabled));
            break;

          case "disable":
          case "keep":
            for (const n of e) {
                const e = t.findIndex((e => {
                    const {_disabled: t, disallowDuplication: o, _alwaysSelected: a, ...r} = n;
                    const {_disabled: s, disallowDuplication: i, _alwaysSelected: l, ...c} = e;
                    return JSON.stringify(r) === JSON.stringify(c);
                }));
                if (e > -1) {
                    if (o === "disable" || n.disallowDuplication) {
                        n._disabled = true;
                    } else {
                        delete n._disabled;
                    }
                } else {
                    delete n._disabled;
                }
            }
            break;
        }
    }
    return e;
}

function T7(e, t, o, n, a, r) {
    e = L7(e, t, o, n);
    const s = n7(e, a, r);
    return {
        sourceData: e,
        sourceFilteredData: s
    };
}

function R7(e) {
    return e.map((e => {
        const {_custom: t, _disabled: o, _alwaysSelected: n, ...a} = e;
        return a;
    }));
}

const k7 = e => {
    const o = {
        initialDimensions: {
            height: 500,
            width: 500
        }
    };
    const [n, s] = Q1(o);
    const i = NA("DualSelector");
    const l = C_();
    const d = e.numberOfResults;
    const u = c(null);
    const m = JSON.stringify([ ...e.selections ?? [] ].sort());
    const p = (e, t) => {
        const o = [];
        const n = parseInt(e);
        if (n !== -1 && t[n] !== undefined) {
            const e = t[n];
            let a = e.data.level - 1;
            for (let e = n; e >= 0; e--) {
                const {level: n} = t[e].data;
                if (n === a) {
                    o.push(t[e].key);
                    --a;
                }
            }
        }
        return o;
    };
    const f = r((() => {
        if (e.selections && e.type === "tree") {
            return e.selections ? A7(e.selections, e.data) : undefined;
        }
        return e.selections ? e.selections : undefined;
    }), [ e.selections, e.data, e.type ]);
    const g = e.tableState;
    const h = k_(e.data);
    a((() => {
        const t = g.setSelectRows;
        const o = g.scrollTo;
        const n = g.setExpandedNodes;
        const a = f?.filter((t => e.data[parseInt(t)]?.data?.hasChildren !== true));
        if (e.type === "tree" && (e.tableName === "source" || e.parentNodeSelectable)) {
            const t = new Set(g.expandedNodes);
            a?.forEach((o => {
                const n = p(o, e.data);
                n.forEach((o => {
                    const n = e.data.find((e => e.key === o));
                    const a = n?.data.id;
                    if (!t.has(a)) {
                        t.add(a);
                    }
                }));
            }));
            if (t.size !== g.expandedNodes.size) {
                n(t);
            }
        }
        t({
            selectedRows: new Set(f)
        });
        let r = -1;
        if (e.focusAfterAction) {
            if (Array.isArray(f) && f.length > 0) {
                r = parseInt(f[0]);
            } else {
                if (Array.isArray(h) && e.data.length > h.length) {
                    r = h.findIndex(((t, o) => t[e.dataFieldKeys[0]] !== e.data[o][e.dataFieldKeys[0]]));
                    if (r === -1) {
                        r = h.length + 1;
                    }
                }
            }
            if (r !== -1 && r !== g.preference.scrollPosition?.cell.rowIndex) {
                o({
                    cell: {
                        rowIndex: r,
                        colIndex: 1,
                        region: n2.Data
                    },
                    align: "smart"
                });
            }
        }
    }), [ m, g.setSelectRows, e.dataFieldKeys, e.focusAfterAction, h, g.scrollTo, e.data, g.preference.scrollPosition, f ]);
    const b = c({
        rowIndex: 0,
        region: e.data.length === 0 && e.hideSearch ? n2.ZeroStateOverlay : n2.Data,
        colIndex: 0
    });
    a((() => {
        if (e.tableName === "source" && u.current && !e.preventInitialAutoFocus) {
            u.current.focus();
        }
    }), [ e.tableName, e.preventInitialAutoFocus ]);
    let v = e.tableName === "target" ? i("emptySelectedMessage.msg") : i("emptyAvailableMessage.msg");
    v = e.searchValue !== "" && e.numberOfResults === 0 ? i("noMatchesFound.msg") : v;
    const y = e.zeroStateText ?? v;
    const x = ({columnIndex: t, rowIndex: o, columnKey: n, disabled: a}) => e.renderCell ? e.renderCell({
        columnIndex: t,
        rowIndex: o,
        columnKey: n,
        disabled: a
    }) : null;
    return t("div", {
        className: y3.tableContent,
        "data-testid": e.testId,
        style: I_({
            "searchfield-spacing": l.tokensExperimental["space-base-xs"]
        }, "dualselector-list")
    }, !e.hideSearch ? t("div", {
        className: y3.listSearchField
    }, t(pQ, {
        testId: gb(e.testId, "search"),
        className: y3.searchField,
        inputRef: e.tableName === "source" ? u : undefined,
        value: e.searchValue ?? "",
        onChange: t => {
            e.filterValue(t.value, e.tableName);
        },
        disabled: e.disableFilter,
        ariaLabel: e.searchAriaLabel,
        numberOfResults: d,
        filterMode: true
    })) : null, s ? t("div", {
        className: y3.tableList,
        onKeyUpCapture: t => {
            if (e.data.length === 0) t.stopPropagation();
        }
    }, t("div", {
        className: y3.tableListInner,
        ref: n
    }, t(r3, Ee({}, e.tableState, {
        testId: gb(e.testId, `${e.tableName}Table`),
        role: e.type === "tree" ? "treegrid" : "grid",
        key: e.tableName,
        ariaLabel: e.tableAriaLabel,
        rowCount: e.rowCount,
        height: s.height,
        width: s.width,
        columns: e.columns,
        getRowKey: e.getRowKey,
        getRowIndex: e => parseInt(e),
        getDataNode: e.getDataNode ?? (() => undefined),
        getDataNodeContainer: e.getDataNodeContainer,
        onExpand: e.onExpand,
        renderCellData: e.renderCellData ?? x,
        loadData: e.loadData,
        selectionMode: "desktop",
        onSelect: t => {
            let o = t ? [ ...t ] : [];
            if (e.tableName === "source" && e.type === "tree") {
                o = (o ?? []).map((t => e.data[parseInt(t)]?.originRowIndex.toString()));
            }
            e.selectionCallback(o, e.tableName);
        },
        initialFocusVisible: !e.preventInitialAutoFocus && e.hideSearch && e.tableName === "source" || false,
        initialFocus: !e.preventInitialAutoFocus && e.tableName === "source" ? f && f.length > 0 && e.focusAfterAction ? {
            rowIndex: f.length === 1 ? parseInt(f[0]) : parseInt(b.current.rowIndex.toString()),
            region: n2.Data,
            colIndex: 0
        } : b.current : undefined,
        onFocusChange: e => {
            b.current = e;
        },
        cellBordersVisible: false,
        columnHeadersVisible: false,
        onDoubleClick: ({rowKey: t}) => {
            let o = parseInt(t);
            if (e.tableName === "source" && e.type === "tree") {
                o = e.data[o].originRowIndex;
            }
            e.onDoubleClick(o, e.tableName);
        },
        hideManageColumnsButton: true,
        rowHeight: t => {
            if (e.rowHeight) {
                return e.rowHeight(t);
            }
            return 28;
        },
        threshold: e.threshold,
        emptyDataProps: {
            text: y
        },
        accessibilityInfo: e.accessibilityInfo,
        expandToFillWidth: true,
        removeFillRows: true
    })))) : null);
};

function A7(e, t) {
    const o = e.map((e => {
        const o = parseInt(e);
        let n = t.findIndex((e => e.originRowIndex === o));
        if (n === -1 && t.length > 0) {
            n = t[t.length - 1].originRowIndex;
        }
        return n.toString();
    }));
    return o;
}

var M7 = "sas_components-DualSelector-MoveButton-MoveButton_move-buttons";

var N7 = "sas_components-DualSelector-MoveButton-MoveButton_custom-button";

var O7 = {
    moveButtons: M7,
    customButton: N7
};

const P7 = fb(Ft);

const B7 = e => {
    const o = C_();
    const n = I_({
        spacing: o.tokensExperimental["space-base-null"]
    }, "move-button");
    const a = P7();
    let r, s;
    const i = {
        add: DL,
        addAll: _L,
        undo: xk,
        remove: EL,
        removeAll: CL,
        custom_add: DL
    };
    const {direction: l, isMoveAll: c} = e;
    let d;
    if (e.isMoveAll) {
        const t = `${e.direction}All`;
        s = i[t];
        r = a(`moveButton.${t.toLocaleLowerCase()}.button.tooltip.label`);
        d = `${e.direction}All`;
    } else {
        s = i[e.direction];
        r = a(`moveButton.${e.direction}.button.tooltip.label`);
        if (e.direction === "custom_add" && e.customAddButtonTooltip) {
            r = e.customAddButtonTooltip;
        }
        d = e.direction;
    }
    const u = e.direction === "custom_add" ? ke(O7.moveButtons, O7.customButton) : O7.moveButtons;
    return t("div", {
        className: u,
        style: n
    }, t(QM, {
        testId: gb(e.testId, d),
        variant: oN.Icon,
        icon: {
            icon: s,
            tooltip: r
        },
        onPress: () => e.onPress(l, c, e.layoutIndex),
        disabled: e.disabled,
        ariaLabel: e.ariaLabel
    }));
};

var z7 = "sas_components-DualSelector-ReorderLayout-ReorderLayout_reorder-buttons";

var F7 = {
    reorderButtons: z7
};

const j7 = fb(Ft);

const V7 = e => {
    const n = C_();
    const a = I_({
        spacing: n.tokensExperimental["space-base-null"]
    }, "reorder-button");
    const r = j7();
    const s = [ {
        direction: "top",
        icon: FL,
        isDisabled: e.reorderButtonState.disableUp,
        hide: e.hideReorder
    }, {
        direction: "up",
        icon: BL,
        isDisabled: e.reorderButtonState.disableUp,
        hide: e.hideReorder
    }, {
        direction: "down",
        icon: RL,
        isDisabled: e.reorderButtonState.disableDown,
        hide: e.hideReorder
    }, {
        direction: "bottom",
        icon: AL,
        isDisabled: e.reorderButtonState.disableDown,
        hide: e.hideReorder
    }, {
        direction: "delete",
        icon: ST,
        isDisabled: e.reorderButtonState.disableDelete,
        hide: e.hideDelete
    } ];
    return t(o, null, s.map(((o, n) => {
        if (o.hide) {
            return null;
        } else {
            return t("div", {
                className: F7.reorderButtons,
                style: a,
                key: n
            }, t(QM, {
                testId: gb(e.testId, o.direction),
                variant: oN.Icon,
                icon: {
                    icon: o.icon,
                    tooltip: r(`reorderButton.${o.direction}.button.tooltip.label`)
                },
                onPress: () => e.onPress(o.direction),
                disabled: o.isDisabled,
                ariaLabel: r(`reorderButtons.${o.direction}.button.aria`, {
                    targetListLabel: e.targetLabel
                })
            }));
        }
    })));
};

var H7 = "sas_components-DualSelector-DualSelector_target-panel";

var U7 = "sas_components-DualSelector-DualSelector_contents";

var G7 = "sas_components-DualSelector-DualSelector_source-panel";

var K7 = "sas_components-DualSelector-DualSelector_container";

var W7 = "sas_components-DualSelector-DualSelector_content-title";

var $7 = "sas_components-DualSelector-DualSelector_content-title-text";

var Y7 = "sas_components-DualSelector-DualSelector_content-list";

var q7 = "sas_components-DualSelector-DualSelector_target-panel-multiple";

var X7 = "sas_components-DualSelector-DualSelector_action-button-panel";

var Z7 = "sas_components-DualSelector-DualSelector_custom-field";

var J7 = "sas_components-DualSelector-DualSelector_target-list-container";

var Q7 = "sas_components-DualSelector-DualSelector_add-buttons-container";

var e6 = "sas_components-DualSelector-DualSelector_target-list-top-spacing";

var t6 = {
    targetPanel: H7,
    contents: U7,
    sourcePanel: G7,
    container: K7,
    contentTitle: W7,
    contentTitleText: $7,
    contentList: Y7,
    targetPanelMultiple: q7,
    actionButtonPanel: X7,
    customField: Z7,
    targetListContainer: J7,
    addButtonsContainer: Q7,
    targetListTopSpacing: e6
};

const o6 = fb(Ft);

const n6 = MA("dual-selector");

const a6 = [ {
    disableUp: false,
    disableDown: false,
    disableDelete: false
}, {
    disableUp: false,
    disableDown: false,
    disableDelete: false
} ];

const r6 = {
    clicked: false,
    selectedRow: -1
};

const s6 = {
    value: "",
    errorStatus: "none"
};

const i6 = Dh("DualSelector");

const l6 = [];

const c6 = e => {
    const o = o6();
    let i, l;
    const d = [];
    const u = [];
    let p = true;
    const f = CH();
    const g = n6(4);
    const h = XA();
    const b = C_();
    const v = ay();
    const {getActionsByKeyEvent: y} = MD();
    const {CONTINUE: x, CANCEL: S} = eW();
    const w = e.paginationProps;
    const C = (e.hideAddButton || e.readOnly) ?? false;
    const E = e.readOnly ? true : !!e.hideAddAllButton;
    const I = !!e.readOnly;
    const _ = !!e.hideAddAllButton;
    const D = !!e.disableAddAllButton || !!e.disableAvailableList;
    const L = I_({
        fg: b.tokensExperimental["color-body-text"],
        bd: b.tokensExperimental["color-container-border-4"],
        bg: b.tokensExperimental["color-container-background-0"],
        "spacing-s": b.tokensExperimental["space-block-s"],
        "spacing-m": b.tokensExperimental["space-block-m"],
        "spacing-xs": b.tokensExperimental["space-block-xs"]
    }, "dualselector");
    const T = I_({
        spacing: b.tokensExperimental["space-base-null"]
    }, "dualselector-action-button");
    const R = r((() => [ {
        direction: "add",
        disableOne: true,
        disableAll: D ?? false,
        disableUndo: true
    }, {
        direction: "add",
        disableOne: true,
        disableAll: D ?? false,
        disableUndo: true
    } ]), [ D ]);
    const k = {
        ...e.sourceAttribute
    };
    const A = {
        ...e.targetAttribute
    };
    const M = {
        ...A
    };
    const N = k[0]?.label ?? o("source.default.label");
    const O = A[0].label ?? o("target.default.label");
    const P = A[1]?.label ?? o("target.default.label");
    const B = e.dataFieldKeys[0];
    const z = e.paginationProps ? true : M[0].sortFunction || !!e.readOnly ? true : !!e.hideReorder;
    const F = !e.renderCustomControl || !!e.hideDeleteButton;
    if (M[0].alwaysSelected) {
        M[0].alwaysSelected.forEach((e => {
            e._alwaysSelected = true;
        }));
    }
    if (M[0].data === undefined && M[0].alwaysSelected !== undefined) {
        M[0].data = M[0].alwaysSelected;
    } else if (M[0].data !== undefined && M[0].alwaysSelected !== undefined) {
        M[0].data = [ ...new Set(M[0].data.concat(M[0].alwaysSelected)) ];
    }
    let j = [];
    j.push(M[0].data ? M[0].data.map((e => ({
        ...e
    }))) : []);
    if (e.targetAttribute.length > 1) {
        j.push(M[1].data ? M[1].data.map((e => ({
            ...e
        }))) : []);
    }
    let V = k[0].data ? k[0].data.map((e => ({
        ...e
    }))) : [];
    const [H, U] = n("source");
    const [G, K] = n(0);
    const [W, $] = n(R);
    const [Y, q] = n(a6);
    const [X, Z] = n(false);
    const J = c(false);
    const Q = c(r6);
    const [ee, te] = n(s6);
    const oe = c(false);
    const ne = c();
    const ae = c();
    const re = s((() => {
        U("source");
        $(R);
        q(a6);
        Z(false);
        J.current = false;
        Q.current = r6;
    }), [ R ]);
    const se = e => {
        if (e) {
            te(e);
            const t = /^\s+$/;
            if (e.value !== "" && !t.test(e.value.toString()) && e.errorStatus === "none") {
                oe.current = true;
            } else {
                oe.current = false;
            }
        }
    };
    const ie = (e, t, o) => {
        if (e) {
            pe({
                type: "selection",
                payload: {
                    selectedRows: e,
                    tableName: t,
                    selectedTableIndex: o ?? 0
                }
            });
            U(t);
            K(o ?? 0);
        }
    };
    const le = e.mode === "keep" && e.targetAttribute[0].displayStyle === "single" ? "single" : "multiple";
    const ce = (t, o, n) => {
        if (o === "source" && e.disableAddButton) {
            return;
        }
        if (!!e.hideAvailableList) return;
        if (e.targetAttribute.length > 1 && o === "source") return;
        const a = n ?? 0;
        const r = o === "source" ? "add" : "remove";
        if (w) {
            w.moveActionCallback(r, t);
            return;
        }
        const s = me.targetFilteredData?.[a];
        if (!(o === "target" && me.alwaysSelected && x3(s ? s[t] : j[a][t]))) {
            if (r === "remove" && o === "target") {
                const e = j[a]?.[t];
                if (!!e?._custom) {
                    Q.current = {
                        clicked: true,
                        selectedRow: t
                    };
                    Z(true);
                    U(o);
                    return;
                }
            }
            pe({
                type: r,
                payload: {
                    selectedRows: [ t ],
                    isMoveAll: false,
                    mode: e.mode,
                    targetDisplayStyle: le,
                    layoutIndex: a
                }
            });
            U(o);
            K(a);
        }
    };
    const de = r((() => {
        const t = [];
        const o = [ ...e.targetAttribute[0].data ?? [] ];
        const n = e.targetAttribute[0].alwaysSelected ?? [];
        o.forEach((e => {
            if (e.alwaysSelected) {
                t.push(e);
            }
        }));
        return [ ...new Set(t.concat(n)) ];
    }), [ e.targetAttribute ]);
    const ue = N3(e.mode, e.onTargetChange, e.selectedItemsThreshold);
    const [me, pe] = m(ue, {
        sourceData: V ?? [],
        targetData: j ?? [],
        currentActionQueue: [],
        alwaysSelected: de,
        focusAfterAction: true,
        customItems: []
    });
    const fe = !qI(e.selectedItemsThreshold) && e.selectedItemsThreshold > 0;
    const ge = e.selectedItemsThreshold - me.targetData[0].length;
    const he = s(((t, o) => {
        const n = t[e.dataFieldKeys[0]];
        const a = o[e.dataFieldKeys[0]];
        if (n > a) {
            return 1;
        } else if (n < a) {
            return -1;
        } else {
            return 0;
        }
    }), [ e.dataFieldKeys ]);
    const be = JSON.stringify([ ...k[0].data ?? [] ].sort(he));
    const ve = JSON.stringify([ ...A[0].data ?? [] ].sort(he));
    const ye = JSON.stringify([ ...A[1]?.data ?? [] ].sort(he));
    a((() => {
        re();
        ne.current?.reset();
        ae.current?.reset();
        const t = [];
        t.push(A[0].data ?? []);
        e.targetAttribute.length > 1 && t.push(A[1].data ?? []);
        pe({
            type: "reset",
            payload: {
                sourceData: k[0].data ?? [],
                targetData: [ A[0].data ?? [], A[1]?.data ?? [] ],
                alwaysSelected: de,
                currentActionQueue: [],
                itemSelections: undefined,
                sourceFilteredData: undefined,
                targetFilteredData: undefined,
                selectionTable: undefined,
                sourceSearchValue: undefined,
                targetSearchValue: undefined,
                key: undefined,
                narrator: undefined,
                focusAfterAction: true,
                customItems: [],
                isDataReset: true
            }
        });
    }), [ be, ve, ye, e.selectedItemsThreshold ]);
    if (me.sourceData && me.sourceData.length === 0) {
        l = true;
    }
    if (me.targetData) {
        if (me.targetData[0].length === 0) d[0] = true;
        if (e.targetAttribute.length > 1 && me.targetData[1].length === 0) d[1] = true;
    }
    const xe = (t, n, a, r = false) => {
        let s;
        const i = (e.mode === "disable" || e.mode === "keep") && r ? n.filter((e => M3(e))).length : n.filter((e => !e.hasChildren)).length;
        if (t && t.length < n.length) {
            const n = (e.mode === "disable" || e.mode === "keep") && r ? t.filter((e => M3(e))).length : t.filter((e => !e.hasChildren)).length;
            s = o("filtered.length.label", {
                label: a,
                filteredLength: f?.formatNumeric(n) ?? `${n}`,
                totalLength: f?.formatNumeric(i) ?? `${i}`
            });
        } else if (e.mode === "disable" && r) {
            s = o("availableItems.length.label", {
                label: a,
                availableItemsLength: f?.formatNumeric(i) ?? `${i}`,
                totalLength: f?.formatNumeric(n.length) ?? `${n.length}`
            });
        } else {
            s = o("item.length.label", {
                label: a,
                length: f?.formatNumeric(i) ?? `${i}`
            });
        }
        return s;
    };
    if (w) {
        const e = w.sourceTableProps[0].rowCount;
        const t = w.targetTableProps?.[0]?.rowCount ?? j.length;
        i = o("item.length.label", {
            label: N,
            length: f?.formatNumeric(e) ?? `${e}`
        });
        u[0] = o("item.length.label", {
            label: O,
            length: f?.formatNumeric(t) ?? `${t}`
        });
    } else {
        if (me.sourceFilteredData || me.targetFilteredData) {
            if (me.sourceFilteredData) {
                V = me.sourceFilteredData;
                i = xe(me.sourceFilteredData, me.sourceData, N, true);
                const t = [];
                t[0] = me.targetFilteredData?.[0] ?? me.targetData[0];
                t[1] = me.targetFilteredData?.[1] ?? me.targetData[1];
                j = t;
                for (let t = 0; t < e.targetAttribute.length; t++) {
                    u[t] = xe(me.targetFilteredData?.[t], me.targetData[t], t === 0 ? O : P);
                }
            }
            if (me.targetFilteredData) {
                V = me.sourceFilteredData ?? me.sourceData;
                i = xe(me.sourceFilteredData, me.sourceData, N, true);
                for (let t = 0; t < e.targetAttribute.length; t++) {
                    u[t] = xe(me.targetFilteredData?.[t], me.targetData[t], t === 0 ? O : P);
                }
                const t = [];
                t[0] = me.targetFilteredData[0] ?? me.targetData[0];
                t[1] = me.targetFilteredData?.[1] ?? me.targetData[1];
                j = t;
            }
        } else {
            V = me.sourceData;
            j = me.targetData;
            i = xe(undefined, me.sourceData, N, true);
            for (let t = 0; t < e.targetAttribute.length; t++) {
                u[t] = xe(undefined, me.targetData[t], t === 0 ? O : P);
            }
        }
    }
    a((() => {
        if (w) return;
        const e = [ {
            disableUp: true,
            disableDown: true,
            disableDelete: true
        }, {
            disableUp: true,
            disableDown: true,
            disableDelete: true
        } ];
        const t = (e, t, o) => {
            if (t.length === 0 || e.length === 0 || t[0] === "-1") {
                return false;
            }
            const n = t.map((e => parseInt(e)));
            if (o && o.length > 0 && n?.length > 0) {
                for (const t of n) {
                    if (!o.includes(e[t]) && !e[t]._custom) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        };
        const o = me.itemSelections;
        if (H === "target" && !p) {
            const n = me.selectedTableIndex ?? 0;
            const a = me.targetData[n];
            const r = me.targetFilteredData?.[n];
            if (le === "multiple" || !d6(a)) {
                if (a.length > 0 && o && o.length > 0) {
                    if (o && o.length > 0) {
                        if (t(r ?? a, o, me.customItems)) {
                            e[n].disableDelete = false;
                        }
                        e[n].disableUp = false;
                        e[n].disableDown = false;
                        if (r) {
                            e[n].disableUp = true;
                            e[n].disableDown = true;
                        } else {
                            for (let t = 0; t < o.length; t++) {
                                if (o[t] === "0") {
                                    e[n].disableUp = true;
                                }
                                if (o[t] === (me.targetData[me.selectedTableIndex ?? 0].length - 1).toString()) {
                                    e[n].disableDown = true;
                                }
                            }
                        }
                    }
                } else if (a.length === 0 || a.length > 0 && r && r.length > 0) {
                    e[n].disableUp = true;
                    e[n].disableDown = true;
                }
            } else {
                if (t(r ?? a, o ?? [], me.customItems)) {
                    e[n].disableDelete = false;
                }
                e[n].disableUp = true;
                e[n].disableDown = true;
            }
        }
        q(e);
    }), [ H, me.targetData, me.itemSelections, p, me.targetFilteredData, me.customItems, e.dataFieldKeys, e.targetAttribute, le, w, me.selectedTableIndex ]);
    a((() => {
        if (!w) return;
        if (w.narrator) {
            const e = w.narrator;
            let t = "";
            if (w.narrator.action === "undo") {
                t = o(`afterAction.undo.${e.undoTo}.aria`);
            } else if (e.action === "move") {
                t = o(`afterAction.${e.direction}.aria`, {
                    noOfSelectedRows: e.selectedRows ? e.selectedRows.toString() : "0"
                });
            }
            h?.notify(t);
        }
        const t = [ {
            direction: "add",
            disableOne: true,
            disableAll: false,
            disableUndo: true
        }, {
            direction: "add",
            disableOne: true,
            disableAll: false,
            disableUndo: true
        } ];
        const n = e.sourceAttribute[0]?.data?.length ?? 0;
        const a = e.targetAttribute[0]?.data?.length ?? 0;
        const r = w.selectedIndices?.length ?? 0;
        if (w.selectedTable === "source") {
            if (n > 0 && r > 0) {
                t[0].disableOne = false;
            }
        } else {
            if (a > 0 && r > 0) {
                t[0].disableOne = false;
                t[0].direction = "remove";
            }
        }
        t[0].disableUndo = w.undoAction[0] ? false : true;
        $(t);
    }), [ e.sourceAttribute, e.targetAttribute, w, h, o ]);
    if (me.itemSelections && me.itemSelections.length > 0) {
        if (me.currentActionQueue && me.currentActionQueue.length > 0 && !me.selectionTable) {
            if (me.currentActionQueue[0].from === "source") {
                p = true;
            } else if (me.currentActionQueue[0].from === "target") {
                p = false;
            }
        } else {
            if (me.selectionTable === "source") {
                p = true;
            } else {
                p = false;
            }
        }
    }
    a((() => {
        if (e.paginationProps) {
            return;
        }
        if (me.narrator) {
            let e = "";
            if (me.narrator.action === "moveall") {
                e = o(`directSpeech.afterAction.${me.narrator.direction}All.aria`, {
                    targetListLabel: me.selectedTableIndex === 0 ? O : P
                });
            } else if (me.narrator.action === "undo") {
                e = o(`afterAction.undo.${me.narrator.undoTo}.aria`);
            } else if (me.narrator.action === "move") {
                e = o(`directSpeech.afterAction.${me.narrator.direction}.aria`, {
                    noOfSelectedRows: me.narrator.selectedRows ? me.narrator.selectedRows.toString() : "0",
                    targetListLabel: me.selectedTableIndex === 0 ? O : P
                });
            } else if (me.narrator.action === "reorder") {
                e = o(`afterAction.${me.narrator.direction}.aria`);
            } else if (me.narrator.action === "customAdd") {
                e = o("afterAction.customAdd.aria");
            }
            h?.notify(e);
        }
        const t = [ {
            direction: "add",
            disableOne: true,
            disableAll: false,
            disableUndo: true
        }, {
            direction: "add",
            disableOne: true,
            disableAll: false,
            disableUndo: true
        } ];
        const n = (me.sourceFilteredData ?? me.sourceData).filter((e => M3(e))).length;
        const a = me.selectedTableIndex ?? 0;
        const r = (me.targetFilteredData?.[a] ?? me.targetData?.[a]).length;
        const s = me.itemSelections ?? [];
        const i = a === 0 ? 1 : 0;
        const l = (me.targetFilteredData?.[i] ?? me.targetData?.[i])?.length;
        if (H === "source") {
            if (n > 0) {
                if (s.length > 0) {
                    t[0].disableOne = t[1].disableOne = false;
                    if (fe) {
                        if (n > ge) {
                            t[0].disableAll = true;
                            if (s.length > ge) {
                                t[0].disableOne = true;
                            }
                        }
                    }
                } else {
                    if (fe) {
                        if (n > ge) {
                            t[0].disableAll = true;
                        }
                    }
                    t[0].disableOne = true;
                    t[1].disableOne = true;
                }
            } else {
                if (!Array.isArray(me.sourceFilteredData) && r > 0) {
                    t[0].direction = t[1].direction = "remove";
                    t[0].disableAll = t[1].disableAll = Array.isArray(me.alwaysSelected) && me.alwaysSelected.length > 0;
                } else {
                    t[0].disableAll = t[0].disableAll = true;
                }
            }
        } else if (H === "target") {
            const e = me.targetData[me.selectedTableIndex ?? 0];
            const o = me.targetFilteredData?.[me.selectedTableIndex ?? 0];
            t[a].direction = "remove";
            if (r > 0) {
                if (s.length > 0) {
                    t[a].disableOne = false;
                    if (Array.isArray(me.alwaysSelected) && me.alwaysSelected.length > 0) {
                        const n = o ?? e;
                        const r = n.filter((e => x3(e)));
                        t[a].disableAll = r.length > 0 ? true : false;
                        for (const e of s.values()) {
                            const o = n[Number(e)];
                            if (o && x3(o)) {
                                t[a].disableOne = true;
                                break;
                            }
                        }
                    }
                } else {
                    if (Array.isArray(me.alwaysSelected) && me.alwaysSelected.length > 0) {
                        const n = o ?? e;
                        const r = n.filter((e => x3(e)));
                        t[a].disableAll = r.length > 0 ? true : false;
                    }
                }
            } else {
                if (!Array.isArray(me.targetFilteredData?.[a]) && n > 0) {
                    t[a].direction = "add";
                    if (fe) t[a].disableAll = n > ge;
                } else {
                    t[a].disableAll = true;
                }
            }
        }
        const c = me.currentActionQueue;
        if (c && c.length > 0) {
            const o = c[0].selectedTableIndex ?? 0;
            t[o].disableUndo = false;
            if (c[0].from === "source" && !Array.isArray(me.sourceFilteredData) && n === 0) {
                t[0].direction = "remove";
                t[1].direction = "remove";
                if (e.targetAttribute.length > 1 && l === 0) {
                    t[i].disableAll = true;
                }
            } else if (c[0].from === "target" && !Array.isArray(me.targetFilteredData) && r === 0) {
                t[o].direction = "add";
            }
        } else {
            if (n > 0 && H === "source") {
                t[0].direction = t[1].direction = "add";
                if (e.targetAttribute.length > 1) {
                    t[1].direction = t[1].direction = "add";
                }
            } else if (r > 0 && H === "target") {
                t[0].direction = t[0].direction = "remove";
                if (e.targetAttribute.length > 1) {
                    t[1].direction = t[1].direction = "remove";
                }
            }
        }
        if (t[0].direction === "add") {
            if (e.disableAddButton) {
                t[0].disableOne = t[1].disableOne = true;
            }
            if (D) {
                t[0].disableAll = t[1].disableAll = true;
            }
        }
        $(t);
    }), [ B, me, H, p, h, o, e.mode, fe, ge, e.disableAddButton, D ]);
    const Se = (n, a = false, r = false, s) => {
        let i = n;
        if (a) {
            i = `${n}all`;
        } else if (n === "undo") {
            if (me.currentActionQueue[0] && me.currentActionQueue[0].from === "source") {
                i = `undoaddaction`;
            } else if (me.currentActionQueue[0] && me.currentActionQueue[0].from === "target") {
                i = "undoremoveaction";
            }
        }
        let l = "";
        if (i !== "undo") {
            l = o(`moveButtons.${i}.button.aria`, {
                targetListLabel: s === 0 ? O : P
            });
        } else {
            if (e.targetAttribute.length === 1) {
                i = "undoOneToOne";
                l = o(`moveButtons.${i}.button.aria`);
            } else if (e.targetAttribute.length === 2) {
                i = "undoOneToTwo";
                l = o(`moveButtons.${i}.button.aria`, {
                    sourceListLabel: N,
                    targetListLabel: s === 0 ? O : P
                });
            }
        }
        if (i === "custom_add" && e.customAddButtonAriaLabel) {
            l = e.customAddButtonAriaLabel;
        }
        return t(B7, {
            direction: n,
            isMoveAll: a,
            onPress: (e, t, o) => Ce(e, t, o),
            disabled: r,
            ariaLabel: l,
            customAddButtonTooltip: e.customAddButtonTooltip,
            testId: gb(e.testId, `moveButton${s ?? 0 > 0 ? s : ""}`),
            layoutIndex: s ?? 0
        });
    };
    const we = (t, o = false, n) => {
        let a;
        if (t === "custom_add") {
            const t = e.dataFieldKeys[0];
            const n = {
                [t]: ee.value,
                _custom: true
            };
            a = {
                selectedRows: n,
                isMoveAll: o,
                mode: e.mode,
                targetDisplayStyle: "multiple"
            };
            oe.current = false;
        } else {
            a = {
                selectedRows: me.itemSelections ?? [],
                isMoveAll: o,
                mode: e.mode,
                targetDisplayStyle: le,
                layoutIndex: n ?? 0
            };
        }
        if (t === "undo") {
            if (Array.isArray(me.currentActionQueue) && me.currentActionQueue.length > 0) {
                if (me.currentActionQueue[0].from === "source" || me.currentActionQueue[0].from === "target") {
                    U(me.currentActionQueue[0].from);
                }
            }
        }
        pe({
            type: t,
            payload: a
        });
    };
    const Ce = (t, o = false, n) => {
        if (e.paginationProps) {
            w && w.moveActionCallback(t);
            return;
        }
        if (t === "remove") {
            let e = [];
            let t;
            let a = [];
            let r = [];
            const s = me.targetFilteredData?.[n ?? 0];
            if (s) {
                r = s;
            } else {
                r = me.targetData[n ?? 0];
            }
            if (me.itemSelections && me.itemSelections.length > 0) {
                if (!o) {
                    t = me.itemSelections;
                    e = t.map((e => parseInt(e)));
                    for (const t of e) {
                        a.push(r[t]);
                    }
                } else {
                    a = r;
                    if (u6(me.itemSelections, a, o)) {
                        J.current = true;
                    }
                }
            } else if (o === true) {
                a = r;
                J.current = true;
            }
            if (!!a.find((e => e._custom))) {
                Z(true);
                return;
            }
        }
        we(t, o, n);
    };
    const Ie = () => {
        const o = [];
        for (let n = 0; n < e.targetAttribute.length && n < 2; n++) {
            o.push(t("div", {
                className: t6.actionButtonPanel,
                style: T,
                key: n
            }, e.renderCustomControl && Se("custom_add", false, fe && ge <= 0 || !oe.current), !I && Se("undo", false, W[n].disableUndo, n), (!C || W[n].direction === "remove") && Se(W[n].direction, false, W[n].disableOne, n), (!E || !_ && W[n].direction === "remove") && Se(W[n].direction, true, W[n].disableAll, n)));
        }
        return o;
    };
    const _e = (n, a) => {
        const r = [];
        for (let s = 0; s < e.targetAttribute.length && s < 2; s++) {
            r.push(t(iN, {
                spacing: "xs",
                className: t6.targetListContainer,
                key: s
            }, t("div", {
                className: ke(t6.contents, s === 1 && t6.targetListTopSpacing)
            }, t(LP, {
                className: t6.contentTitle,
                wrapText: false,
                id: g[3],
                testId: gb(e.testId, `targetLengthLabel${s > 0 ? s : ""}`)
            }, n[s]), t("div", {
                className: ke(t6.contentList),
                onKeyDown: e => Le(e, "target", s),
                "aria-labelledby": `${g[2]} ${g[3]}`,
                role: "group"
            }, !!w ? Ae("target", w.targetTableProps?.[0]) : t(D3, {
                testId: gb(e.testId, `targetLayout${s > 0 ? s : ""}`),
                ref: ae,
                readOnly: !!e.readOnly,
                tableName: "target",
                type: "list",
                mode: e.mode,
                dataFieldKeys: e.dataFieldKeys,
                data: j[s] ?? [],
                displayStyle: e.targetAttribute[s].displayStyle,
                hideSearch: e.targetAttribute[s].hideSearch ?? true,
                alwaysSelected: me.alwaysSelected,
                selectionCallback: (e, t) => ie(e, t, s),
                selections: !p ? G === s ? me.itemSelections : [] : [],
                disableFilter: a[s] ?? false,
                filterValue: (e, t) => De(e, t, s),
                onDoubleClick: (e, t) => ce(e, t, s),
                focusAfterAction: me.focusAfterAction,
                tableAriaLabel: O,
                searchAriaLabel: o("filterField.aria", {
                    listLabel: s === 0 ? O : P
                }),
                descriptionField: e.descriptionField,
                customItems: me.customItems,
                zeroStateText: e.targetAttribute[s].zeroStateText,
                isDataReset: me.isDataReset,
                sortFunction: A[0].sortFunction,
                numberOfResults: me.targetFilteredData && me.targetFilteredData?.length >= 0 ? me.targetFilteredData?.length : null
            }))), !z || !F ? t("div", {
                className: t6.actionButtonPanel,
                style: T
            }, t(V7, {
                onPress: we,
                reorderButtonState: Y[s],
                targetLabel: s === 0 ? O : P,
                testId: gb(e.testId, `reorderButton${s > 0 ? s : ""}`),
                hideReorder: z,
                hideDelete: F
            })) : null));
        }
        return r;
    };
    const De = (e, t, o) => {
        U(t);
        pe({
            type: "filter",
            payload: {
                table: t,
                searchValue: e,
                key: B,
                layoutIndex: o ?? 0
            }
        });
    };
    const Le = (t, o, n) => {
        let a = t.shiftKey && t.ctrlKey;
        const r = o === "source" ? 0 : n ?? 0;
        if (!!e.readOnly) {
            return;
        }
        if (a && W[r].disableAll) {
            return;
        }
        if (!!e.hideAvailableList) {
            if (t.key === "ArrowLeft" || t.key === "ArrowRight") return;
        }
        const {actions: s} = y(t.nativeEvent);
        if (s.includes("undo") && !W[r].disableUndo) {
            pe({
                type: "undo",
                payload: {
                    selectedRows: me.itemSelections ?? [],
                    isMoveAll: false,
                    mode: e.mode,
                    layoutIndex: r
                }
            });
            return;
        }
        const i = (me.sourceFilteredData ?? me.sourceData).filter((e => M3(e))).length;
        const l = (me.targetFilteredData?.[r] ?? me.targetData[r]).length;
        const c = me.targetFilteredData?.[r];
        const d = me.targetData[r];
        const u = u6(me.itemSelections, c ?? d, a);
        const m = m6(me.itemSelections, c ?? d, a);
        let f;
        switch (t.key) {
          case "ArrowRight":
            if (o === "source" && !v && i !== 0 || o === "target" && v && l !== 0 && !m) {
                if (e.targetAttribute.length > 1 && o === "source" && !v) return;
                if (w) {
                    w.moveActionCallback(v ? "remove" : "add", undefined, o);
                    return;
                } else {
                    if (!a && (me.itemSelections && me.selectionTable !== o || W[r].disableOne)) {
                        return;
                    } else if (a) {
                        J.current = true;
                    }
                    if (u && v) {
                        Z(true);
                        return;
                    }
                    f = v ? "remove" : "add";
                }
            }
            break;

          case "ArrowLeft":
            if (o === "target" && !v && l !== 0 && !m || o === "source" && v && i !== 0) {
                if (e.targetAttribute.length > 1 && o === "source" && v) return;
                if (w) {
                    w.moveActionCallback(v ? "add" : "remove", undefined, o);
                    return;
                } else {
                    if (!a && (me.itemSelections && me.selectionTable !== o || W[r].disableOne)) {
                        return;
                    } else if (a) {
                        J.current = true;
                    }
                    if (u && !v) {
                        Z(true);
                        return;
                    }
                    f = v ? "add" : "remove";
                }
            }
            break;

          case "ArrowUp":
            if (o === "target" && !p && t.altKey && t.shiftKey && !Y[r].disableUp) {
                f = "up";
                a = false;
            }
            break;

          case "ArrowDown":
            if (o === "target" && !p && t.altKey && t.shiftKey && !Y[r].disableDown) {
                f = "down";
                a = false;
            }
            break;

          default:
            return;
        }
        f && pe({
            type: f,
            payload: {
                selectedRows: me.itemSelections ?? [],
                isMoveAll: a,
                mode: e.mode,
                targetDisplayStyle: le,
                layoutIndex: r
            }
        });
    };
    const Te = () => {
        if (J.current) {
            return o("moveButton.removeAllButton.warningDialog.title");
        } else {
            return o("moveButton.removeButton.warningDialog.title");
        }
    };
    const Re = () => {
        if (J.current) {
            return o("moveButton.removeAllButton.warningDialog.msg");
        } else {
            return o("moveButton.removeButton.warningDialog.msg");
        }
    };
    a((() => {
        if (fe && me.targetData[0].length > e.selectedItemsThreshold) i6.error(`There are ${me.targetData[0].length} items selected by default which exceeds the set threshold limit of ${e.selectedItemsThreshold}.`);
    }), [ fe, e.selectedItemsThreshold, me.targetData ]);
    const Ae = (n, a) => t(k7, Ee({
        testId: gb(e.testId, `${n}Pageablelayout`),
        tableName: n,
        type: n === "source" ? e.type : e.targetType ?? "list",
        mode: "move",
        data: n === "source" ? e.sourceAttribute[0].data ?? [] : e.targetAttribute[0].data ?? [],
        parentNodeSelectable: w?.parentNodeSelectable,
        tableState: a.tableState,
        dataFieldKeys: e.dataFieldKeys,
        zeroStateText: a.zeroStateText,
        renderCell: a.renderCell,
        rowCount: a.rowCount ?? 0,
        loadData: a.loadData,
        threshold: a.threshold,
        hideSearch: a.hideSearch ?? true,
        searchValue: a.searchValue,
        columns: a.columns,
        selectionCallback: w.selectionCallback,
        selections: Me(n),
        disableFilter: a.disableFilter ?? false,
        filterValue: w?.onFilterValue ?? (() => {}),
        onDoubleClick: ce,
        focusAfterAction: a.focusAfterAction ?? true,
        tableAriaLabel: n === "source" ? N : O,
        searchAriaLabel: o("searchField.aria", {
            listLabel: N
        }),
        accessibilityInfo: a.accessibilityInfo,
        numberOfResults: a.numberOfResults ?? null
    }, n === "source" && {
        preventInitialAutoFocus: e.preventInitialAutoFocus
    }, e.type === "tree" && "renderCellData" in a ? {
        renderCellData: a.renderCellData,
        onExpand: a.onExpand,
        getRowKey: a.getRowKey,
        getRowIndex: a.getRowIndex,
        getChildNodesRowKey: a.getChildNodesRowKey,
        getParentsRowKey: a.getParentsRowKey,
        getDataNode: a.getDataNode,
        getDataNodeContainer: a.getDataNodeContainer
    } : {}));
    const Me = e => {
        if (w) {
            if (w.selectedTable === e) {
                return w.selectedIndices;
            }
            return l6;
        }
    };
    const Ne = () => {
        if (e.hideAvailableList) return [ {
            minSize: 0,
            defaultSize: "0%",
            resizable: false
        }, {
            minSize: 200
        } ];
        return [ {
            minSize: 200,
            defaultSize: "50%"
        }, {
            minSize: 200
        } ];
    };
    return t("div", {
        className: t6.container,
        style: {
            ...L,
            ...e.style
        },
        role: "region",
        "data-testid": e.testId,
        "aria-label": e.ariaLabel,
        "aria-labelledby": e.ariaLabelledBy,
        "aria-describedby": e.ariaDescribedBy
    }, t(z5, {
        style: {
            height: "100%",
            width: "100%"
        },
        sections: Ne(),
        hideSplitterBar: true,
        testId: gb(e.testId, "Splitter")
    }, !e.hideAvailableList && t("div", {
        className: t6.sourcePanel
    }, t("div", {
        className: t6.contents
    }, t(LP, {
        className: t6.contentTitle,
        wrapText: false,
        id: g[1],
        testId: gb(e.testId, "sourceLengthLabel")
    }, i), t("div", {
        className: t6.contentList,
        onKeyDown: e => Le(e, "source"),
        "aria-labelledby": `${g[0]} ${g[1]}`,
        role: "group"
    }, !!w ? Ae("source", w.sourceTableProps[0]) : t(D3, {
        testId: gb(e.testId, "sourceLayout"),
        ref: ne,
        readOnly: !!e.readOnly,
        tableName: "source",
        disableList: e.disableAvailableList,
        type: e.type,
        mode: e.mode,
        dataFieldKeys: e.dataFieldKeys,
        data: V ?? [],
        hideSearch: e.sourceAttribute[0].hideSearch ?? true,
        selectionCallback: ie,
        selections: p ? me.itemSelections : [],
        disableFilter: (l || e.disableAvailableList) ?? false,
        filterValue: De,
        onDoubleClick: ce,
        focusAfterAction: me.focusAfterAction,
        tableAriaLabel: N,
        searchAriaLabel: o("filterField.aria", {
            listLabel: N
        }),
        descriptionField: e.descriptionField,
        zeroStateText: e.sourceAttribute[0].zeroStateText,
        isDataReset: me.isDataReset,
        sortFunction: k[0].sortFunction,
        disableSort: k[0].disableSort,
        preventInitialAutoFocus: e.preventInitialAutoFocus,
        numberOfResults: me.sourceFilteredData && me.sourceFilteredData?.length >= 0 ? me.sourceFilteredData?.length : null
    })), e.renderCustomControl && t("div", {
        className: t6.customField
    }, e.renderCustomControl(se, fe ? ge > 0 : !e.readOnly))), t(iN, {
        orientation: "vertical",
        className: t6.addButtonsContainer
    }, Ie())), t("div", {
        className: ke(t6.targetPanel, t6.targetPanelMultiple)
    }, _e(u, d))), t(oW, {
        type: "warning",
        isOpen: X,
        title: Te(),
        text: Re(),
        firstAction: {
            text: x,
            onPress: () => {
                if (Q.current.clicked) {
                    pe({
                        type: "remove",
                        payload: {
                            selectedRows: [ Q.current.selectedRow ],
                            isMoveAll: false,
                            mode: e.mode,
                            targetDisplayStyle: le
                        }
                    });
                    Q.current = {
                        clicked: false,
                        selectedRow: -1
                    };
                } else if (J.current) {
                    we("remove", true);
                    J.current = false;
                } else {
                    we("remove");
                }
                Z(false);
            }
        },
        dismissAction: {
            text: S,
            onPress: () => {
                if (Q.current.selectedRow !== -1) {
                    ie([ Q.current.selectedRow.toString() ], "target");
                }
                Q.current = {
                    clicked: false,
                    selectedRow: -1
                };
                J.current = false;
                Z(false);
            },
            isDefault: true
        }
    }));
};

function d6(e) {
    const t = [ ...e ];
    const o = t.findIndex((t => {
        const o = e.indexOf(t);
        const n = e.lastIndexOf(t);
        return o !== e.length - n - 1;
    }));
    return o > -1;
}

function u6(e, t, o) {
    if (!!o) {
        return !!t.find((e => e._custom));
    }
    return !!e?.find((e => t?.[parseInt(e)]?._custom));
}

function m6(e, t, o) {
    if (!!o) {
        return !!t.find((e => e._alwaysSelected));
    }
    return !!e?.find((e => t?.[parseInt(e)]?._alwaysSelected));
}

const p6 = e => {
    const o = NA("Table");
    const n = c([]);
    const r = e.orderedColumnKeys ?? [];
    const s = e.hideManageColumnsSearch !== undefined ? e.hideManageColumnsSearch : false;
    const i = e.hideManageColumnsSelectedSearch !== undefined ? e.hideManageColumnsSelectedSearch : true;
    a((() => {
        if (!e.isOpen) {
            n.current = e.orderedColumnKeys ?? [];
        }
    }), [ e.orderedColumnKeys, e.isOpen ]);
    const l = JA();
    const d = t => {
        const o = e.columns.find((({key: e}) => e === t));
        let n = o?.label;
        if (o && !n && o.icon) {
            n = l({
                icon: o.icon
            }).ariaLabel;
        }
        return {
            icon: o?.icon,
            columnLabel: n,
            columnKey: t
        };
    };
    const u = r.map(d);
    const m = e.columns.filter((({key: e}) => !r.includes(e))).map((({key: e}) => d(e)));
    return t(zF, {
        isOpen: e.isOpen,
        title: o("manageColumnsDialog.title"),
        firstAction: {
            text: o("manageColumnsDialog.confirmButton.label"),
            onPress: () => e.onConfirm?.(n.current)
        },
        dismissAction: {
            text: o("manageColumnsDialog.dismissButton.label"),
            onPress: () => {
                n.current = e.orderedColumnKeys ?? [];
                e.onDismiss?.();
            }
        },
        onClose: e.onClose,
        focusLockProps: {
            onDeactivation: e.onFocusDeactivation
        },
        size: {
            width: "48rem",
            height: "40rem",
            maxWidth: "calc(100% - 4rem)",
            maxHeight: "calc(100% - 4rem)"
        },
        testId: e.testId
    }, t(c6, {
        style: {
            height: "100%"
        },
        type: "list",
        mode: "move",
        dataFieldKeys: [ "columnLabel" ],
        sourceAttribute: [ {
            label: o("manageColumnsDialog.hiddenColumns.label"),
            data: m,
            hideSearch: s
        } ],
        targetAttribute: [ {
            label: o("manageColumnsDialog.displayedColumns.label"),
            data: u,
            hideSearch: i
        } ],
        onTargetChange: e => {
            n.current = e.map((({columnKey: e}) => e));
        },
        testId: e.testId
    }));
};

const f6 = e => {
    const a = ay();
    const r = e.data;
    const [s, i] = n(false);
    const l = q4(r.selectionMode, r.columns.length, r.rowCount, r.hideSelectionControlColumn);
    const c = l ? e.columnIndex - 1 : e.columnIndex;
    const {onSort: d, renderCell: u, selectionMode: m, hideSelectAll: p, isRowDisabled: f, isRowReadOnly: g, getRowIdentifier: h} = r;
    const b = r.columns[e.columnIndex];
    if (!b) {
        return t(o, null);
    }
    const v = e.rowIndex !== -1 ? h(e.rowIndex) : undefined;
    const y = r.readOnly || (v ? !!g?.(v) : false);
    const x = r.disabled || e.rowIndex > -1 && !!f?.(h(e.rowIndex));
    if (e.columnIndex === 0 && e.isHeader && (m === "multiple" || m === "toggle") && p !== true && r.rowCount > 0 && r.hideSelectionControlColumn !== true) {
        return t(V5, {
            rowIndex: e.rowIndex,
            itemData: r
        });
    } else if (e.isHeader) {
        return t(v5, {
            itemData: r,
            style: e.style,
            columnIndex: c,
            column: b,
            sort: e => {
                if (!s) d(e, b.key, true);
            },
            onDragStart: () => {
                i(true);
            },
            onDragEnd: () => {
                i(false);
                r.onColumnResize?.(b.key, r.preference?.resizedColumns?.has(b.key) ? r.preference?.resizedColumns?.get(b.key) || 0 : b.width || 0);
            },
            onDrag: e => {
                const t = q4(r.selectionMode, r.columns.length, r.rowCount, r.hideSelectionControlColumn) ? c + 1 : c;
                s && r.resizeColumn((a ? -1 : 1) * e, t);
            }
        });
    } else if (b && b.cellContent) {
        const o = b.cellContent;
        const n = S();
        r.updateControlRefs(b.key, h(e.rowIndex), n);
        const a = S();
        r.updateActivateRefs(b.key, h(e.rowIndex), a);
        let s = r.preference?.scrollPosition?.editOnFocus;
        if (s) {
            const t = r.preference?.scrollPosition?.cell;
            const o = t?.rowIndex;
            const n = t?.colIndex;
            const a = n !== undefined ? r.columns[n].key : "";
            s = o === e.rowIndex && a === b.key;
        }
        return t(m5, {
            rowIndex: e.rowIndex,
            columnKey: b.key,
            itemData: r,
            className: b.cellContainerClassName,
            style: b.cellContainerStyle,
            focus: s,
            contentRef: n
        }, o(c, e.rowIndex, b.key, n, x, y, a));
    } else {
        if (l && e.columnIndex === 0) {
            return t(H5, {
                rowIndex: e.rowIndex,
                itemData: r
            });
        } else {
            const o = S();
            r.updateControlRefs(b.key, h(e.rowIndex), o);
            return t(m5, {
                rowIndex: e.rowIndex,
                columnKey: b.key,
                itemData: r,
                className: b.cellContainerClassName,
                style: b.cellContainerStyle,
                contentRef: o
            }, u({
                rowIndex: e.rowIndex,
                columnIndex: c,
                isScrolling: e.isScrolling,
                columnKey: b.key,
                disabled: x,
                readOnly: y,
                ref: o,
                itemData: r
            }));
        }
    }
};

const g6 = e => {
    const {getRowIdentifier: o, getRowIndex: n, rowCount: a, localize: r, getSelectionCheckboxState: s, getSelectAllCheckboxState: i, getSelectionState: l, selectionMode: c, singleSelectionOverrides: d, hideSelectAll: u, columnHeadersVisible: m, areRowsVisible: p, setSelectAllRows: f, setSelectRow: g, dragging: h, isRowDisabled: b, isRowReadOnly: v, readOnly: y} = e.itemData;
    const x = e.rowIndex;
    const S = () => {
        if (e.ariaLabel) {
            return e.ariaLabel;
        } else if (e.ariaLabelledBy) {
            return undefined;
        } else {
            return r("rowSelectionCheckboxAriaLabel.msg", {
                rowIndex: `${e.rowIndex + 1}`
            });
        }
    };
    const w = e.itemData.preference?.selectedRows;
    const C = () => {
        if (!w) return e.itemData.preference?.selectAll;
        const t = !p ? true : p(w);
        if (!t) return false;
        return e.itemData.preference?.selectAll;
    };
    const E = x !== -1 ? o(x) : undefined;
    const I = E ? !!b?.(E) : false;
    const _ = y || (E ? !!v?.(E) : false);
    const D = e.selectAll ? i?.() : s?.(o(x)) ?? l?.(o(x));
    const L = e.selectAll ? t(tB, {
        checked: D ?? (e.selected || false),
        testId: "select-all",
        tooltip: D ?? C() === true ? r("deselectAll.tooltip.label") : r("selectAll.tooltip.label"),
        focusable: false,
        readOnly: y
    }) : t(tB, {
        checked: h === true ? false : D !== undefined ? D : e.selected || false,
        testId: `row-${e.rowIndex}`,
        focusable: false,
        ariaLabelledBy: e.ariaLabelledBy,
        ariaLabel: S(),
        disabled: I,
        readOnly: _
    });
    return t("div", {
        style: e.style,
        onMouseDown: e => {
            e.preventDefault();
        },
        onClick: t => {
            if (I || _) return;
            e.itemData?.setInteractiveAction?.(true);
            if (e.selectAll === true) {
                let t = D ?? C() === true;
                if (e.itemData.readOnlyAndSelectedRows?.size || 0 > 0) {
                    if (e.itemData?.preference?.selectAll === true) t = true; else if (t === "mixed") t = false;
                }
                f?.({
                    selectAll: !t,
                    interactive: true,
                    isRowReadOnly: e.itemData.isRowReadOnly
                });
            } else g?.({
                index: x,
                selected: (c !== "single" && c !== "singleRadio" || d?.allowDeselection !== false) && (w?.has(o(e.rowIndex)) || C() === true) ? false : true,
                selectionType: "checkbox",
                clearPrevious: false,
                rowCount: a,
                rangeSelection: t.shiftKey,
                rowKey: o,
                getRowIndex: n,
                hideSelectAll: u,
                columnHeadersVisible: m,
                areRowsVisible: p,
                isRowDisabled: b,
                isRowReadOnly: v
            });
            t.stopPropagation();
        }
    }, L);
};

const h6 = e => {
    const {getRowIdentifier: o, getRowIndex: n, rowCount: a, localize: r, singleSelectionOverrides: s, hideSelectAll: i, areRowsVisible: l, setSelectRow: c, isRowDisabled: d, isRowReadOnly: u, readOnly: m} = e.itemData;
    const p = e.rowIndex !== -1 ? o(e.rowIndex) : undefined;
    const f = p ? !!d?.(p) : false;
    const g = m || p && !!u?.(p);
    const h = e.itemData.preference?.selectedRows;
    const b = () => {
        if (e.ariaLabel) {
            return e.ariaLabel;
        } else if (e.ariaLabelledBy) {
            return undefined;
        } else {
            return r("rowSelectionRadioButtonAriaLabel.msg", {
                rowIndex: `${e.rowIndex + 1}`
            });
        }
    };
    return t("div", {
        style: e.style,
        onMouseDown: e => {
            e.preventDefault();
        },
        onClick: () => {
            if (f || g) return;
            e.itemData?.setInteractiveAction?.(true);
            c?.({
                index: e.rowIndex,
                selected: s?.allowDeselection && h?.has(o(e.rowIndex)) ? false : true,
                selectionType: "radioButton",
                clearPrevious: true,
                rowCount: a,
                rangeSelection: false,
                rowKey: o,
                getRowIndex: n,
                hideSelectAll: i,
                areRowsVisible: l,
                isRowDisabled: d,
                isRowReadOnly: u
            });
        }
    }, t(yB, {
        selected: e.selected,
        testId: `row-${e.rowIndex}`,
        focusable: false,
        ariaLabelledBy: e.ariaLabelledBy,
        ariaLabel: b(),
        disabled: f,
        readOnly: !!g
    }));
};

function b6(e) {
    const [t, o] = n(false);
    const r = c([ NaN, NaN ]);
    a((() => {
        if (!t) return;
        function n(e, t) {
            const o = {
                deltaX: e - r.current[0],
                deltaY: t - r.current[1]
            };
            r.current = [ e, t ];
            return o;
        }
        function a(t) {
            if (!e.onChange) return;
            const o = e.onChange;
            o(n(t.clientX, t.clientY));
        }
        function s(t) {
            if (t.button !== 0) return;
            o(false);
            const a = n(t.clientX, t.clientY);
            if (e.onChange) {
                const t = e.onChange;
                t({
                    ...a
                });
            }
            if (e.onCommit) {
                const t = e.onCommit;
                t(a);
            }
        }
        window.addEventListener("mousemove", a);
        window.addEventListener("mouseup", s);
        document.addEventListener("mouseleave", s);
        return () => {
            window.removeEventListener("mousemove", a);
            window.removeEventListener("mouseup", s);
            document.removeEventListener("mouseleave", s);
        };
    }), [ e.onChange, e.onCommit, t ]);
    return {
        startDrag(e) {
            r.current = e;
            o(true);
        },
        abortDrag() {
            o(false);
        },
        isDragging: t
    };
}

let v6 = null;

function y6(e = false) {
    if (v6 === null || e) {
        const e = document.createElement("div");
        const t = e.style;
        t.width = "50px";
        t.height = "50px";
        t.overflow = "scroll";
        t.direction = "rtl";
        const o = document.createElement("div");
        const n = o.style;
        n.width = "100px";
        n.height = "100px";
        e.appendChild(o);
        document.body.appendChild(e);
        if (e.scrollLeft > 0) {
            v6 = "positive-descending";
        } else {
            e.scrollLeft = 1;
            if (e.scrollLeft === 0) {
                v6 = "negative";
            } else {
                v6 = "positive-ascending";
            }
        }
        document.body.removeChild(e);
        return v6;
    }
    return v6;
}

var x6 = "sas_components-Table-VirtualScrollbar-VirtualScrollbar_container";

var S6 = "sas_components-Table-VirtualScrollbar-VirtualScrollbar_hbar";

var w6 = "sas_components-Table-VirtualScrollbar-VirtualScrollbar_body";

var C6 = "sas_components-Table-VirtualScrollbar-VirtualScrollbar_vbar";

var E6 = {
    container: x6,
    hbar: S6,
    body: w6,
    vbar: C6
};

const I6 = e => {
    const {dir: o, onScroll: n, size: r, className: s, ...i} = e;
    const l = ay();
    const d = o === "horizontal";
    const u = d ? "width" : "height";
    const m = d ? "scrollLeft" : "scrollTop";
    const p = c(null);
    const f = e.value ?? 0;
    a((() => {
        if (!p.current) return;
        const e = d ? _6({
            normalizedScrollLeft: f,
            direction: l ? "rtl" : "ltr",
            scrollWidth: p.current.scrollWidth,
            clientWidth: p.current.clientWidth
        }) : f;
        if (p.current[m] !== e) {
            p.current[m] = e;
        }
    }), [ f, m, d, l ]);
    return t("div", Ee({
        ref: p,
        className: ke(E6.container, {
            [E6.hbar]: d,
            [E6.vbar]: !d
        }, s),
        onScroll: e.onScroll
    }, i), t("div", {
        className: E6.body,
        style: {
            [u]: r
        }
    }));
};

const _6 = e => {
    const {normalizedScrollLeft: t, direction: o, scrollWidth: n, clientWidth: a} = e;
    if (o === "ltr") return Math.max(0, t);
    switch (y6()) {
      case "negative":
        return -t;

      case "positive-descending":
        return n - a - t;
    }
    return t;
};

const D6 = ({content: e, rowIndex: o, columnIndex: n, disabled: a, readOnly: r, ...s}) => {
    const i = s.itemData;
    const {updateControlRefs: l, getRowIdentifier: c, columns: d} = i;
    const u = d[n];
    const m = c(o);
    const p = u?.key;
    if (typeof e === "function") {
        const s = S();
        l(p, m, s);
        let c = i.preference?.scrollPosition?.editOnFocus;
        if (c) {
            const e = i.preference?.scrollPosition?.cell;
            const t = e?.rowIndex;
            const o = e?.colIndex;
            const n = o !== undefined ? i.columns[o].key : "";
            c = t === t && n === p;
        }
        return t(m5, {
            itemData: i,
            rowIndex: o,
            columnKey: p,
            className: u.cellContainerClassName,
            style: u.cellContainerStyle,
            focus: c,
            contentRef: s
        }, e(n, o, p, s, a, r));
    }
    return t(m5, {
        itemData: i,
        rowIndex: o,
        columnKey: p,
        className: u.cellContainerClassName,
        style: u.cellContainerStyle
    }, e);
};

const L6 = typeof performance === "object" && typeof performance.now === "function";

const T6 = L6 ? () => performance.now() : () => Date.now();

function R6(e) {
    cancelAnimationFrame(e.id);
}

function k6(e, t) {
    const o = T6();
    function n() {
        if (T6() - o >= t) {
            e.call(null);
        } else {
            a.id = requestAnimationFrame(n);
        }
    }
    const a = {
        id: requestAnimationFrame(n)
    };
    return a;
}

const A6 = 150;

const M6 = ({columnId: e, rowIndex: t}) => `${t}:${e}`;

const N6 = (e, t) => {
    const {preference: o, getRowIdentifier: n, getSelectionState: a} = t;
    if (t.dragging === true) return false;
    const r = a?.(n(e));
    return r !== undefined ? !!r : o?.selectAll === true || !!o?.selectedRows?.has(n(e));
};

const O6 = (e, t, o) => {
    const n = {
        prev: t === 0 ? false : N6(t - 1, e),
        curr: N6(t, e),
        next: t + 1 === e.rowCount ? false : N6(t + 1, e)
    };
    const a = e.orderedColumnKeys?.size ?? e.columns.length;
    return {
        prev: n.curr && o === 0,
        next: n.curr && o === a - 1,
        above: n.curr === true && n.prev !== true,
        below: n.curr === true && n.next !== true
    };
};

const P6 = e => {
    const {testId: n, rowIndex: a, isHeader: r, isEmpty: s, className: i, style: l, children: c, getRowContainer: d, ariaSelected: u, ariaDisabled: m, disabledRow: p, readOnlyRow: f, rowRef: g, headerRef: h, addRowAttributes: b} = e;
    const v = ke(z4.row, i, {
        [z4.bodyRow]: !r,
        [z4.emptyRow]: s === true,
        [z4.disabledRow]: p,
        [z4.readOnlyRow]: f
    });
    let y = {
        className: v,
        role: "row",
        "aria-disabled": m,
        style: l
    };
    if (b) {
        y = {
            ...y,
            ...b(a)
        };
    }
    if (d) {
        y = {
            "aria-rowindex": e.rowIndex + 1,
            "data-testid": gb(n, `row${a + 1}`),
            "aria-selected": u,
            ref: e => r ? D_(h, e) : D_(g?.(a), e),
            ...y
        };
        return t(o, null, d(a, c, y));
    }
    return t("div", Ee({}, y, {
        "aria-rowindex": !r && a > 0 ? a : undefined,
        "data-testid": gb(n, `row${a + 1}`),
        ref: e => r ? D_(h, e) : D_(g?.(a), e)
    }), c);
};

function B6(e) {
    const {rowIndex: t, isHeader: o, isEmpty: n, rowMetadata: a, frozenColumnCount: r} = e;
    const s = [];
    let i = 0;
    for (;i < r; i++) {
        s.push(e.createTableCell(i, t, o, 1, n));
    }
    const l = e.getColumnOffset(i);
    i = Math.max(r, e.columnStartIndex);
    const c = e.getColumnOffset(i) - l;
    let d = c;
    const u = e.getColumnSpan ?? 1;
    while (i <= e.columnStopIndex) {
        const r = a.getCell(i, u);
        const m = r?.displayed ?? i;
        if (m === i) {
            const l = o ? 1 : typeof u === "function" ? u(t, i) : u;
            if (l > 1) {
                a.setCell(i, {
                    ...r,
                    displayed: i,
                    colSpan: l
                });
            }
            const c = e.createTableCell(i, t, o, l, n, d);
            s.push(c);
            i += l;
        } else {
            const a = r?.colSpan ?? 1;
            const u = m;
            if (u < e.columnStartIndex) {
                d = e.getColumnOffset(u) - l;
            } else {
                d = c;
            }
            const p = e.createTableCell(u, t, o, a, n, d);
            s.push(p);
            i = u + a;
        }
    }
    return s;
}

const z6 = e => {
    const {rowIndex: o, isHeader: n, ariaDisabled: a, isEmpty: r, isRowDisabled: s, isRowReadOnly: i, rowRef: l, headerRef: c, testId: d} = e;
    const u = B6(e);
    const m = e.getRowStyle(o, e.columnStartIndex);
    const p = !!s?.(o);
    const f = !!i?.(o);
    return t(P6, {
        testId: d,
        rowIndex: o,
        isHeader: n,
        isEmpty: r,
        style: m,
        ariaDisabled: a,
        disabledRow: n ? false : p,
        readOnlyRow: n ? false : f,
        rowRef: l,
        headerRef: c
    }, u);
};

function F6(e) {
    return class o extends w {
        _instanceProps=e.initInstanceProps(this.props, this);
        _resetIsScrollingTimeoutId=null;
        static defaultProps={
            direction: "ltr",
            itemData: undefined,
            useIsScrolling: false
        };
        state={
            instance: this,
            isScrolling: false,
            horizontalScrollDirection: "forward",
            scrollLeft: typeof this.props.initialScrollLeft === "number" ? this.props.initialScrollLeft : 0,
            scrollTop: typeof this.props.initialScrollTop === "number" ? this.props.initialScrollTop : 0,
            scrollUpdateWasRequested: false,
            verticalScrollDirection: "forward",
            bodyClientHeight: null
        };
        constructor(e) {
            super(e);
            this._headerRef = S();
            this._bodyRef = S();
            this._bodyGroupRef = S();
        }
        static getDerivedStateFromProps(t, o) {
            e.validateProps(t);
            return null;
        }
        getDisplayedCell({row: t, column: o, getColumnSpan: n}) {
            const a = e.getRowMetadata(this._instanceProps, t);
            const r = a.getCell(o, n ?? 1);
            const s = r?.displayed ?? o;
            return {
                row: t,
                column: s
            };
        }
        scrollTo({scrollLeft: e, scrollTop: t}) {
            if (e !== undefined) {
                e = Math.max(0, e);
            }
            if (t !== undefined) {
                t = Math.max(0, t);
            }
            this.setState((o => {
                if (e === undefined) {
                    e = o.scrollLeft;
                }
                if (t === undefined) {
                    t = o.scrollTop;
                }
                if (o.scrollLeft === e && o.scrollTop === t) {
                    return null;
                }
                return {
                    horizontalScrollDirection: o.scrollLeft < e ? "forward" : "backward",
                    scrollLeft: e,
                    scrollTop: t,
                    scrollUpdateWasRequested: true,
                    verticalScrollDirection: o.scrollTop < t ? "forward" : "backward"
                };
            }), this._resetIsScrollingDebounced);
        }
        getScrollLeft() {
            return this.state.scrollLeft;
        }
        getActualScrollLeft() {
            const e = this._bodyGroupRef.current;
            if (!e) return this.state.scrollLeft;
            return _6({
                direction: this.props.direction,
                clientWidth: e.clientWidth,
                scrollWidth: e.scrollWidth,
                normalizedScrollLeft: this.state.scrollLeft
            });
        }
        getScrollTop() {
            return this.state.scrollTop;
        }
        getCurrentColumnWidth(t) {
            return e.getColumnWidth(this.props, t, this._instanceProps);
        }
        getColumnIndexForOffset(t) {
            const o = e.getColumnStartIndexForOffset(this.props, t, this._instanceProps);
            return o;
        }
        getRowIndexForOffset(t) {
            const o = e.getRowStartIndexForOffset(this.props, t, this._instanceProps);
            return o;
        }
        scrollToItem({align: t = "auto", columnIndex: o, rowIndex: n}) {
            const {columnCount: a, rowCount: r, width: s} = this.props;
            const {scrollLeft: i, scrollTop: l} = this.state;
            const c = FA();
            if (o !== undefined) {
                o = Math.max(0, Math.min(o, a - 1));
            }
            if (n !== undefined) {
                n = Math.max(0, Math.min(n, r - 1));
            }
            const d = e.getEstimatedTotalWidth(this.props, this._instanceProps);
            const u = d > s ? c + 2 : 0;
            const m = o !== undefined ? e.getOffsetForColumnAndAlignment(this.props, o, t, i, this._instanceProps, 0) : i;
            const p = !!this._bodyGroupRef.current ? this._bodyGroupRef.current.clientWidth : s;
            const f = Math.min(m, d - p);
            this.scrollTo({
                scrollLeft: f,
                scrollTop: n !== undefined ? e.getOffsetForRowAndAlignment(this.props, n, t, l, this._instanceProps, u) : l
            });
        }
        componentDidMount() {
            const {initialScrollLeft: e, initialScrollTop: t} = this.props;
            if (this._bodyRef.current !== null && typeof t === "number") {
                const e = this._bodyRef.current;
                e.scrollTop = t;
            }
            if (this._bodyGroupRef.current !== null && typeof e === "number") {
                const t = this._bodyGroupRef.current;
                t.scrollLeft = e;
            }
            this._callPropsCallbacks();
        }
        componentDidUpdate(e) {
            const {direction: t, rowCount: o} = this.props;
            const {scrollTop: n, scrollUpdateWasRequested: a} = this.state;
            const r = t !== e.direction;
            const s = o > 0 && e.rowCount === 0;
            if (a || r || s) {
                if (this._bodyGroupRef.current !== null) {
                    const e = this._bodyGroupRef.current;
                    const t = this._headerRef.current;
                    const o = this.getActualScrollLeft();
                    e.scrollLeft = o;
                    if (t) t.scrollLeft = o;
                }
            }
            if (this._bodyRef.current !== null) {
                const e = this._bodyRef.current;
                e.scrollTop = Math.max(0, n);
            }
            this._callPropsCallbacks();
            const i = this._bodyRef.current?.clientHeight || null;
            if (this.state.bodyClientHeight !== i || this.state.isScrolling) {
                this.setState((e => ({
                    ...e,
                    bodyClientHeight: i
                })));
            }
            if (e.density !== this.props.density) {
                const e = this.resetAfterRowIndex;
                if (typeof e === "function") {
                    e(0);
                }
            }
        }
        componentWillUnmount() {
            if (this._resetIsScrollingTimeoutId !== null) {
                R6(this._resetIsScrollingTimeoutId);
            }
        }
        createTableCellContent=(e, o, n) => {
            const {children: a, itemData: r, itemKey: s = M6, useIsScrolling: i} = this.props;
            const {isScrolling: l} = this.state;
            return t(a, {
                columnIndex: e,
                data: r,
                key: s({
                    columnId: e,
                    data: r,
                    rowIndex: o
                }),
                isScrolling: i ? l : undefined,
                rowIndex: o,
                isHeader: n
            });
        };
        createTableCell=(o, n, a, r, s, i) => {
            const {direction: l, itemData: c, onCellClick: d, testId: u, addCellAttributes: m} = this.props;
            const p = l === "rtl";
            let f = this.props.frozenColumnCount ?? 0;
            let g = 0;
            for (let t = 0; t < f; t++) {
                const o = e.getColumnWidth(this.props, t, this._instanceProps);
                g += o;
            }
            if (g >= this.props.width) {
                f = 0;
            }
            const h = s === true ? undefined : this.createTableCellContent(o, n, a);
            const b = this._getItemStyle(n, o);
            if (r > 1 && !qI(b.width)) {
                for (let e = 1; e < r; e++) {
                    const e = this._getItemStyle(n, o + 1);
                    if (!qI(e.width) && !isNaN(e.width)) {
                        b.width += e.width;
                    }
                }
            }
            const v = e.getColumnOffset(this.props, o, this._instanceProps);
            b.width = e.getAdjustedColumnWidth(b.width ?? 0, o, v ?? i ?? 0, this.props);
            if (i !== undefined) {
                b.left = p ? undefined : i;
                b.right = p ? i : undefined;
            }
            const y = q4(c.selectionMode, c.columns.length, c.rowCount, c.hideSelectionControlColumn);
            if (a) {
                delete b.height;
            }
            const {focusInfo: x, itemKey: S = M6} = this.props;
            const w = !qI(x) && x.rowIndex === n && (x.colIndex === o || x.colIndex > o && x.colIndex < o + r);
            const C = d ? e => d(n, o, e) : undefined;
            const E = this.props.isLastColumnEmpty && o === this.props.columnCount - 1;
            let I = false;
            if (!y) {
                I = o === f - 1;
            } else {
                I = o > 0 && o === f - 1;
            }
            let _ = false;
            if (c.columns && c.isColumnResizing) {
                const e = c.columns[o];
                _ = e && c.isColumnResizing(e.key);
            }
            const D = c.columns[o]?.rowHeaderColumn;
            const L = a ? "columnheader" : D ? "rowheader" : "gridcell";
            const T = a ? `${L}-col${o}` : `${L}-row${n}-col${o}`;
            const R = N6(n, c);
            const k = O6(c, n, o);
            const A = n !== -1 ? c.getRowIdentifier(n) : undefined;
            const M = A ? !!c.isRowReadOnly?.(A) : false;
            const N = a !== true;
            const O = c.readOnly !== true;
            const P = N && O && M ? {
                "aria-readonly": true
            } : {};
            const B = m?.(n, o) ?? {};
            return t("div", {
                className: ke(E ? "" : z4.gridCell, z4.direction[l], {
                    [z4.headerRow]: a,
                    [z4.frozen]: o < f,
                    [z4.lastFrozenColumn]: I,
                    [z4.fauxcus]: w,
                    [z4.frozenResizing]: _ && o < f,
                    [z4.nonFrozenResizing]: _ && o >= f,
                    [z4.rowSeparator]: typeof this.props.showSeparator === "function" ? this.props.showSeparator?.(n) : this.props.showSeparator,
                    [z4.selected]: R,
                    [z4.cellSelectionBorderPrev]: k.prev,
                    [z4.cellSelectionBorderNext]: k.next,
                    [z4.cellSelectionBorderAbove]: k.above,
                    [z4.cellSelectionBorderBelow]: k.below,
                    [z4.activate]: c.columns[o]?.onActivate && !a
                }),
                children: h,
                role: L,
                "aria-colindex": o + 1,
                ...P,
                "data-testid": gb(u, T),
                key: S({
                    columnId: o,
                    data: c,
                    rowIndex: n
                }),
                ref: w ? this.props.focusCellRef : null,
                style: b,
                onMouseDown: C,
                "aria-label": y && a && o === 0 ? "Selection" : "",
                ...B
            });
        };
        getRowCells(o) {
            const {itemData: n, itemKey: a = M6, testId: r} = this.props;
            const s = this.props.headerRowCount ?? 1;
            const i = this.props.frozenColumnCount ?? 0;
            const [l, c] = this._getHorizontalRangeToRender();
            const d = e.getEstimatedTotalWidth(this.props, this._instanceProps);
            const u = (e, t) => {
                const o = this._getRowStyle(e, t);
                return {
                    ...o,
                    width: d
                };
            };
            const m = q4(n.selectionMode, n.columns.length, n.rowCount, n.hideSelectionControlColumn);
            const p = t(z6, {
                testId: r,
                rowIndex: o,
                isHeader: false,
                headerRowCount: s,
                frozenColumnCount: i,
                columnStartIndex: l,
                columnStopIndex: c,
                createTableCell: this.createTableCell,
                getRowStyle: u,
                getRowContainer: this.props.getRowContainer,
                dropDestinationIndex: this.props.dropDestinationIndex ?? -1,
                hasSelectionControl: m,
                getColumnSpan: this.props.columnSpan ?? 1,
                itemData: e,
                key: a({
                    columnId: "H",
                    data: n,
                    rowIndex: o
                }),
                getColumnOffset: t => e.getColumnOffset(this.props, t, this._instanceProps),
                rowMetadata: e.getRowMetadata(this._instanceProps, o),
                rowRef: this.props.rowRef
            });
            return p;
        }
        render() {
            const {columnCount: o, direction: n, height: a, itemData: r, itemKey: s = M6, outerElementType: i, rowCount: l, style: c, width: d, onCellClick: u, outerBorderVisible: m, testId: p, hideFillRows: f, removeFillRows: g} = this.props;
            const h = n === "rtl";
            const [b, v] = this._getHorizontalRangeToRender();
            const [y, x] = this._getVerticalRangeToRender(this.state.bodyClientHeight ? Math.max(this.state.bodyClientHeight, a) : a);
            const S = [];
            let w = this.props.frozenColumnCount ?? 0;
            const C = this.props.headerRowCount ?? 1;
            const E = [];
            let I = 0;
            for (let t = 0; t < w; t++) {
                const o = e.getColumnWidth(this.props, t, this._instanceProps);
                I += o;
            }
            if (I >= this.props.width) {
                w = 0;
            }
            if (o > 0) {
                const o = this.props.headerVisible ?? true;
                const n = o ? this.props.headerHeight ?? 40 : 0;
                const a = (e, t) => ({
                    height: n,
                    width: L
                });
                const i = q4(r.selectionMode, r.rowCount.length, r.rowCount, r.hideSelectionControlColumn);
                for (let o = -1, n = 0; n < C; o--, n++) {
                    const n = t(z6, {
                        testId: p,
                        rowIndex: o,
                        isHeader: true,
                        ariaDisabled: r.disabled ? undefined : false,
                        headerRowCount: C,
                        frozenColumnCount: w,
                        columnStartIndex: b,
                        columnStopIndex: v,
                        createTableCell: this.createTableCell,
                        getRowStyle: a,
                        dropDestinationIndex: this.props.dropDestinationIndex ?? -1,
                        hasSelectionControl: i,
                        getColumnSpan: this.props.columnSpan ?? 1,
                        itemData: e,
                        key: s({
                            columnId: "H",
                            data: r,
                            rowIndex: o
                        }),
                        getColumnOffset: t => e.getColumnOffset(this.props, t, this._instanceProps),
                        rowMetadata: e.getRowMetadata(this._instanceProps, o),
                        headerRef: this.props.headerRef
                    });
                    E.push(n);
                }
            }
            const _ = (this.props.headerVisible !== false ? this.props.headerHeight ?? E.map(((e, t) => this._getRowStyle(t, 0).height)).reduce(((e, t) => (e || 0) + (t || 0)), 0) : 0) ?? 0;
            this._instanceProps.headerHeight = _;
            const D = e.getEstimatedTotalHeight(this.props, this._instanceProps);
            const L = e.getEstimatedTotalWidth(this.props, this._instanceProps);
            const T = this.state.bodyClientHeight ?? a - _;
            const R = l === 0 || D < T;
            const k = q4(r.selectionMode, r.columns.length, r.rowCount, r.hideSelectionControlColumn);
            const A = o > (k ? 1 : 0) + (this.props.isLastColumnEmpty ? 1 : 0);
            if (A && l > 0) {
                const o = (e, t) => {
                    const o = this._getRowStyle(e, t);
                    return {
                        ...o,
                        width: L
                    };
                };
                let i = 0;
                let c = y;
                const d = this.createTableCell;
                const m = this.props.columnSpan ?? 1;
                const g = t => {
                    const o = B6({
                        ...t,
                        createTableCell: d,
                        getColumnOffset: t => e.getColumnOffset(this.props, t, this._instanceProps),
                        getColumnSpan: this.props.columnSpan,
                        rowMetadata: e.getRowMetadata(this._instanceProps, t.rowIndex)
                    });
                    const n = t.createRow({
                        children: o
                    });
                    return n;
                };
                const C = e => {
                    const {rowIndex: o, rowOffset: a, rowMetadata: i, focusInfo: l, index: c, colSpan: d, content: f, className: g, style: b} = e;
                    const v = this.props.addCellAttributes?.(o, c) ?? {};
                    const y = N6(o, r);
                    const x = this.props.isLastColumnEmpty && c === this.props.columnCount - 1;
                    const S = c < w;
                    const C = k ? c > 0 && c === w - 1 : c === w - 1;
                    let E = false;
                    if (r.columns && r.isColumnResizing) {
                        const e = r.columns[c];
                        E = e && r.isColumnResizing(e.key);
                    }
                    const I = this._getItemStyle(o, c);
                    if (d > 1 && !qI(I.width)) {
                        for (let e = 1; e < d; e++) {
                            const t = this._getItemStyle(o, c + e);
                            if (!qI(t.width) && !isNaN(t.width)) {
                                I.width += t.width;
                            }
                        }
                    }
                    const _ = S ? 0 : a;
                    if (_ !== undefined) {
                        I.left = h ? undefined : _;
                        I.right = h ? _ : undefined;
                    }
                    if (d > 1) {
                        const e = i.getCell(c, m);
                        i.setCell(c, {
                            ...e,
                            displayed: c,
                            colSpan: d
                        });
                    }
                    const D = !qI(l) && l.rowIndex === o && (l.colIndex === c || l.colIndex > c && l.colIndex < c + d);
                    const L = u ? t => u(o, e.index, t) : undefined;
                    const T = O6(r, o, c);
                    const R = o !== -1 ? r.getRowIdentifier(o) : undefined;
                    const A = R ? !!r.isRowReadOnly?.(R) : false;
                    const M = r.readOnly !== true;
                    const N = M && A ? {
                        "aria-readonly": true
                    } : {};
                    return t("div", Ee({
                        role: "gridcell",
                        "aria-colindex": c + 1
                    }, N, {
                        "data-testid": gb(p, `gridcell-row${o}-col${c}`),
                        className: ke(x ? "" : z4.gridCell, z4.direction[n], g, {
                            [z4.frozen]: S,
                            [z4.lastFrozenColumn]: C,
                            [z4.fauxcus]: D,
                            [z4.selected]: y,
                            [z4.frozenResizing]: E && c < w,
                            [z4.nonFrozenResizing]: E && c >= w,
                            [z4.rowSeparator]: typeof this.props.showSeparator === "function" ? this.props.showSeparator?.(o) : this.props.showSeparator,
                            [z4.cellSelectionBorderPrev]: T.prev,
                            [z4.cellSelectionBorderNext]: T.next,
                            [z4.cellSelectionBorderAbove]: T.above,
                            [z4.cellSelectionBorderBelow]: T.below
                        }),
                        style: {
                            ...I,
                            ...b
                        },
                        key: s({
                            columnId: c,
                            data: r,
                            rowIndex: o
                        }),
                        ref: D ? this.props.focusCellRef : null,
                        onMouseDown: L
                    }, v), f);
                };
                const E = (this.state.bodyClientHeight || 0) > (a ?? g5.sizes.tableHeight) ? x + 1 : x;
                const I = this.props?.renderRow ?? g;
                const {disabled: _, readOnly: D} = r;
                while (!f && i < T || c < E) {
                    let n = c >= l;
                    const a = t => e.getColumnOffset(this.props, t, this._instanceProps);
                    const d = e.getRowMetadata(this._instanceProps, c);
                    const u = o(c, b);
                    const m = a(w);
                    const f = a(Math.max(w, b)) - m;
                    const {focusInfo: g, isRowDisabled: h, isRowReadOnly: y} = this.props;
                    const x = _ || c > -1 && !!h?.(c);
                    const E = D || c > -1 && !!y?.(c);
                    const L = e => C({
                        ...e,
                        rowIndex: c,
                        rowOffset: f,
                        rowMetadata: d,
                        focusInfo: g
                    });
                    const T = r.dropEnabled && r.rowCount > 0 ? true : false;
                    if (T && c === r.rowCount) n = true;
                    const R = I({
                        rowIndex: c,
                        isEmpty: n,
                        disabled: x,
                        readOnly: E,
                        frozenColumnCount: w,
                        hasSelectionControl: k,
                        columnStartIndex: b,
                        columnStopIndex: v,
                        getRowStyle: e => o(c, e),
                        createRow: e => {
                            const {children: o, className: a, style: i, isHeader: l} = e;
                            let d;
                            const m = (e, t) => {
                                const {getSelectionCheckboxState: o, getSelectionState: n, preference: a, getRowIdentifier: r} = t;
                                return o?.(r(e)) ?? n?.(r(e)) ?? (a?.selectAll === true || !!a?.selectedRows?.has(r(e)));
                            };
                            const f = m(c, r);
                            if (r.selectionMode === "multiple" || r.selectionMode === "desktop" || r.selectionMode === "toggle") {
                                d = f;
                            }
                            if (r.selectionMode === "single" || r.selectionMode === "singleRadio") {
                                d = f ? true : undefined;
                            }
                            if (r.selectionMode === "none") {
                                d = undefined;
                            }
                            if (r.removeFillRows && n) {
                                return null;
                            }
                            const g = n ? t(bee, {
                                onContextMenu: e => {
                                    if (!e || x || r.hasContextMenu() !== true) return;
                                    const t = "";
                                    const o = "";
                                    r.updateContextInfo({
                                        position: {
                                            x: e.pageX,
                                            y: e.pageY
                                        },
                                        cell: {
                                            row: t,
                                            column: o
                                        }
                                    });
                                    r.updateContextMenuItems(r.cellContextMenu, {
                                        rowKey: "",
                                        columnKey: o
                                    });
                                    r.setContextMenuOpen(true);
                                    r.storePreviousFocusIndicator(r.focusIndicator);
                                },
                                disabled: x,
                                key: s({
                                    columnId: "R",
                                    data: r,
                                    rowIndex: c
                                })
                            }, o) : o;
                            return t(P6, {
                                testId: p,
                                rowIndex: c,
                                isHeader: l,
                                isEmpty: n,
                                className: a,
                                style: {
                                    ...u,
                                    ...i
                                },
                                getRowContainer: this.props.getRowContainer,
                                addRowAttributes: this.props.addRowAttributes,
                                key: s({
                                    columnId: "R",
                                    data: r,
                                    rowIndex: c
                                }),
                                ariaSelected: d,
                                ariaDisabled: _ ? undefined : x,
                                disabledRow: x,
                                readOnlyRow: E,
                                rowRef: this.props.rowRef,
                                headerRef: this.props.headerRef
                            }, g);
                        },
                        createCell: e => C({
                            ...e,
                            content: e.content ? t(D6, {
                                content: e.content,
                                itemData: r,
                                rowIndex: c,
                                columnIndex: e.index,
                                disabled: x,
                                readOnly: E
                            }) : undefined,
                            rowIndex: c,
                            rowOffset: f,
                            rowMetadata: d,
                            focusInfo: g
                        }),
                        createSelectionCell: e => L({
                            index: e,
                            colSpan: 1,
                            content: t(H5, {
                                rowIndex: c,
                                itemData: r
                            })
                        })
                    });
                    S.push(R);
                    i += u.height ?? g5.sizes.DEFAULT_ROW_HEIGHT;
                    c++;
                }
            }
            const M = this.props.headerVisible !== false ? t(d_, {
                ...this.props.tableHeaderOverrideTheme,
                className: z4.headerSection
            }, t("div", {
                className: z4.headerContainer,
                role: "rowgroup"
            }, t("div", {
                ref: this._headerRef,
                className: z4.rowGroup,
                style: {
                    height: _,
                    width: d
                }
            }, E))) : null;
            const N = this._getRowStyle(y, b).top ?? 0;
            const O = t(d_, {
                ...this.props.tableBodyOverrideTheme,
                ref: this._bodyGroupRef,
                className: z4.rowGroup,
                style: {
                    top: N,
                    height: l > 0 ? Math.max(Math.max(0, D - N), T) : Math.max(0, D - N),
                    width: d,
                    overflowY: R ? "hidden" : undefined
                }
            }, S);
            const P = {
                ref: this._bodyRef,
                onScroll: this._onVScroll,
                className: z4.bodyContainer,
                role: "rowgroup",
                tabIndex: 0,
                style: {}
            };
            const B = this.props.getTableContainer ? this.props.getTableContainer(P, O) : t("div", P, O);
            const z = !k ? w > 0 : w > 1;
            const F = Math.max(0, (this._bodyRef.current?.offsetWidth ?? 0) - I);
            const j = Math.max(0, L - I) - (m === true ? 2 : 0);
            const V = o > 0 && F < j ? t(I6, {
                className: ke(z4.hbar, k && z4.hasBorder, z && z4.hasFrozenColumn),
                dir: "horizontal",
                size: j,
                value: this.state.scrollLeft,
                onScroll: this._onHScroll,
                style: o > 0 ? {
                    marginInlineStart: `max(0px, calc(${I}px - ${z ? "var(--table-frozen-column-divider-width)" : "1px"}))`
                } : undefined
            }) : undefined;
            const H = Math.max(0, this._bodyRef.current?.offsetHeight ?? 0);
            const U = this.props.headerButtonVisible || l > 0 && H < D;
            const G = V ? FA() + 1 : 0;
            const K = Math.min(a, D + _ + (G + 3));
            return t(V6 || i, {
                ref: this._outerRefSetter,
                className: m === true ? z4.outerContainer : undefined,
                role: "presentation",
                lastColumnWidthAdjustment: U,
                style: {
                    position: "relative",
                    height: g ? K : a,
                    width: d,
                    overflow: "hidden",
                    display: "flex",
                    flexDirection: "column",
                    WebkitOverflowScrolling: "touch",
                    willChange: h ? "auto" : "transform",
                    flexBasis: "100%",
                    direction: n,
                    ["--table-last-column-pd-adjustment"]: U ? "var(--table-scroll-bar-space)" : "0px",
                    ...c
                }
            }, M, B, V);
        }
        _callOnItemsRendered=ao(((e, t, o, n, a, r, s, i, l) => this.props.onItemsRendered({
            overscanColumnStartIndex: e,
            overscanColumnStopIndex: t,
            overscanRowStartIndex: o,
            overscanRowStopIndex: n,
            visibleColumnStartIndex: a,
            visibleColumnStopIndex: r,
            visibleRowStartIndex: s,
            visibleRowStopIndex: i
        })));
        _callOnScroll=ao(((e, t, o, n, a) => this.props.onScroll({
            horizontalScrollDirection: o,
            scrollLeft: e,
            scrollTop: t,
            verticalScrollDirection: n,
            scrollUpdateWasRequested: a
        })));
        _callPropsCallbacks() {
            const {columnCount: e, onItemsRendered: t, onScroll: o, rowCount: n} = this.props;
            if (typeof t === "function") {
                if (e > 0 && n > 0) {
                    const [e, t, o, n] = this._getHorizontalRangeToRender();
                    const [a, r, s, i] = this._getVerticalRangeToRender();
                    this._callOnItemsRendered(e, t, a, r, o, n, s, i, this.props.dataKey);
                }
            }
            if (typeof o === "function") {
                const {horizontalScrollDirection: e, scrollLeft: t, scrollTop: o, scrollUpdateWasRequested: n, verticalScrollDirection: a} = this.state;
                this._callOnScroll(t, o, e, a, n);
            }
        }
        _getEstimatedTotalWidth=() => e.getEstimatedTotalWidth(this.props, this._instanceProps);
        _getEstimatedTotalHeight=() => e.getEstimatedTotalHeight(this.props, this._instanceProps);
        _getRowMetadata(t) {
            return e.getRowMetadata(this._instanceProps, t);
        }
        _isScrolling() {
            return this.state.isScrolling;
        }
        _getRowStyle=(t, o) => {
            const {rowHeight: n} = this.props;
            const a = this._getItemStyleCache(e.shouldResetStyleCacheOnItemSizeChange && n);
            const r = `body:${t}`;
            let s;
            if (a.hasOwnProperty(r)) {
                s = a[r];
            } else {
                const n = e.getRowHeight(this.props, t, this._instanceProps);
                a[r] = s = {
                    top: e.getRowOffset(this.props, t, this._instanceProps),
                    left: e.getColumnOffset(this.props, o, this._instanceProps),
                    height: n,
                    minHeight: n ? n : 40
                };
            }
            return s;
        };
        _getItemStyle=(t, o) => {
            const {columnWidth: n, direction: a, rowHeight: r} = this.props;
            const s = this._getItemStyleCache(e.shouldResetStyleCacheOnItemSizeChange && n, e.shouldResetStyleCacheOnItemSizeChange && a, e.shouldResetStyleCacheOnItemSizeChange && r);
            const i = `${t}:${o}`;
            let l;
            if (s.hasOwnProperty(i)) {
                l = s[i];
            } else {
                const n = e.getColumnOffset(this.props, o, this._instanceProps);
                const r = a === "rtl";
                const c = this.props.cellBackground ? this.props.cellBackground({
                    rowIndex: t,
                    columnIndex: o
                }) : "inherit";
                s[i] = l = {
                    left: r ? undefined : n,
                    right: r ? n : undefined,
                    height: e.getRowHeight(this.props, t, this._instanceProps),
                    width: e.getColumnWidth(this.props, o, this._instanceProps),
                    background: c
                };
            }
            return l;
        };
        _getItemStyleCache=ao((function(e, t, o) {
            return {};
        }));
        _setColumnWidth(t, o) {
            e.setColumnWidth(t, this.props, this._instanceProps, o);
        }
        _getHorizontalRangeRendered() {
            const {columnCount: t, overscanColumnCount: o} = this.props;
            const {horizontalScrollDirection: n, isScrolling: a, scrollLeft: r} = this.state;
            const s = o || 1;
            if (t === 0) {
                return [ 0, 0, 0, 0 ];
            }
            const i = e.getColumnStartIndexForOffset(this.props, r, this._instanceProps, false);
            const l = e.getColumnStopIndexForStartIndex(this.props, i, r, this._instanceProps, false);
            const c = !a || n === "backward" ? Math.max(1, s) : 1;
            const d = !a || n === "forward" ? Math.max(1, s) : 1;
            return [ Math.max(0, i - c), Math.max(0, Math.min(t - 1, l + d)), i, l ];
        }
        _getHorizontalRangeToRender() {
            const {columnCount: t, overscanColumnCount: o} = this.props;
            const {horizontalScrollDirection: n, isScrolling: a, scrollLeft: r} = this.state;
            const s = o || 1;
            if (t === 0) {
                return [ 0, 0, 0, 0 ];
            }
            const i = e.getColumnStartIndexForOffset(this.props, r, this._instanceProps);
            const l = e.getColumnStopIndexForStartIndex(this.props, i, r, this._instanceProps);
            const c = !a || n === "backward" ? Math.max(1, s) : 1;
            const d = !a || n === "forward" ? Math.max(1, s) : 1;
            return [ Math.max(0, i - c), Math.max(0, Math.min(t - 1, l + d)), i, l ];
        }
        _getVerticalRangeToRender(t) {
            const {columnCount: o, overscanRowCount: n, rowCount: a} = this.props;
            const {isScrolling: r, verticalScrollDirection: s, scrollTop: i} = this.state;
            const l = n || 1;
            if (o === 0 || a === 0) {
                return [ 0, 0, 0, 0 ];
            }
            let c = e.getRowStartIndexForOffset(this.props, i, this._instanceProps);
            if (c >= a) {
                c = a - 1;
            }
            const d = !t ? this.props : {
                ...this.props,
                height: t
            };
            const u = e.getRowStopIndexForStartIndex(d, c, i, this._instanceProps);
            const m = !r || s === "backward" ? Math.max(1, l) : 1;
            const p = !r || s === "forward" ? Math.max(1, l) : 1;
            return [ Math.max(0, c - m), Math.max(0, u + p), c, u ];
        }
        _onHScroll=e => {
            const {clientWidth: t, scrollLeft: o, scrollTop: n, scrollWidth: a} = e.currentTarget;
            this.setState((e => {
                if (e.scrollLeft === o && e.scrollTop === n) {
                    return null;
                }
                const {direction: r} = this.props;
                if (this._bodyGroupRef.current) {
                    this._bodyGroupRef.current.scrollLeft = o;
                }
                if (this._headerRef.current) {
                    this._headerRef.current.scrollLeft = o;
                }
                const s = j6({
                    scrollLeft: o,
                    direction: r,
                    scrollWidth: a,
                    clientWidth: t
                });
                return {
                    isScrolling: true,
                    horizontalScrollDirection: e.scrollLeft < o ? "forward" : "backward",
                    scrollLeft: s,
                    scrollTop: e.scrollTop,
                    verticalScrollDirection: e.scrollTop < n ? "forward" : "backward",
                    scrollUpdateWasRequested: false
                };
            }), this._resetIsScrollingDebounced);
        };
        _onVScroll=e => {
            const {clientHeight: t, scrollLeft: o, scrollTop: n, scrollHeight: a} = e.currentTarget;
            this.setState((e => {
                if (e.scrollLeft === o && e.scrollTop === n) {
                    return null;
                }
                const r = e.scrollLeft;
                const s = Math.max(0, Math.min(n, a - t));
                return {
                    isScrolling: true,
                    horizontalScrollDirection: e.scrollLeft < o ? "forward" : "backward",
                    scrollLeft: r,
                    scrollTop: s,
                    verticalScrollDirection: e.scrollTop < n ? "forward" : "backward",
                    scrollUpdateWasRequested: false
                };
            }), this._resetIsScrollingDebounced);
        };
        _outerRefSetter=e => {
            const {outerRef: t} = this.props;
            this._outerRef = e;
            if (typeof t === "function") {
                t(e);
            } else if (t !== null && typeof t === "object" && t.hasOwnProperty("current")) {
                t.current = e;
            }
        };
        _resetIsScrollingDebounced=() => {
            if (this._resetIsScrollingTimeoutId !== null) {
                R6(this._resetIsScrollingTimeoutId);
            }
            this._resetIsScrollingTimeoutId = k6(this._resetIsScrolling, A6);
        };
        _resetIsScrolling=() => {
            this._resetIsScrollingTimeoutId = null;
            this.setState({
                isScrolling: false
            }, (() => {
                this._getItemStyleCache(-1);
            }));
        };
    };
}

const j6 = e => {
    const {scrollLeft: t, direction: o, scrollWidth: n, clientWidth: a} = e;
    if (o === "ltr") return Math.max(0, t);
    let r = t;
    switch (y6()) {
      case "negative":
        r = -t;
        break;

      case "positive-descending":
        r = n - a - t;
        break;
    }
    r = Math.max(0, Math.min(r, n - a));
    return r;
};

const V6 = u((function e(o, n) {
    const {children: r, lastColumnWidthAdjustment: s, ...i} = o;
    const l = t2().setListContext;
    a((() => {
        if (!l) return;
        l({
            tableHasVerticalScrollbar: s
        });
    }), [ l, s ]);
    return t("div", Ee({
        ref: n
    }, i), r);
}));

const H6 = ({rowCount: e, itemData: t}, {rowMetadataMap: o, estimatedRowHeight: n, lastMeasuredRowIndex: a}) => {
    if (t.columns.length === 0) return 0;
    let r = 0;
    if (a >= e) {
        a = e - 1;
    }
    if (a >= 0) {
        const e = o[a];
        r = e.offset + e.size;
    }
    const s = e - a - 1;
    const i = s * n;
    return r + i;
};

const U6 = (e, t, o) => o.columnMetadataMap[t]?.size;

const G6 = (e, t, o, n) => {
    if (!o.columnMetadataMap[e + t.columnCount - 1]) {
        $6("column", t, e + t.columnCount - 1, o);
    }
    o.columnMetadataMap[e].size = n;
    let a = o.columnMetadataMap[e].offset;
    for (let n = e; n <= t.columnCount - 1; n++) {
        const e = o.columnMetadataMap[n].size;
        o.columnMetadataMap[n].offset = a;
        a += e;
    }
};

const K6 = ({columnCount: e}, {columnMetadataMap: t, estimatedColumnWidth: o, lastMeasuredColumnIndex: n}) => {
    if (e === 0) return 0;
    let a = 0;
    if (n >= e) {
        n = e - 1;
    }
    if (n >= 0) {
        const e = t[n];
        a = e.offset + e.size;
    }
    const r = e - n - 1;
    const s = r * o;
    return a + s;
};

const W6 = (e, t) => {
    if (!e.frozenColumnCount || e.frozenColumnCount === 0) return 0;
    return $6("column", e, e.frozenColumnCount, t).offset;
};

const $6 = (e, t, o, n, a) => {
    let r, s, i;
    if (e === "column") {
        r = n.columnMetadataMap;
        s = t.columnWidth;
        i = n.lastMeasuredColumnIndex;
    } else if (e === "row") {
        r = n.rowMetadataMap;
        s = t.rowHeight;
        i = n.lastMeasuredRowIndex;
    } else {
        r = n.headerRowMetadataMap;
        i = n.lastMeasuredHeaderRowIndex;
        o = 0 - o;
        if (typeof t.headerRowHeight === "function") {
            s = t.headerRowHeight;
        } else if (t.headerHeight) {
            s = e => t.headerHeight ?? n.headerHeight;
        } else {
            s = e => n.estimatedRowHeight;
        }
    }
    if (o > i && a !== false) {
        let a = 0;
        if (i >= 0) {
            const e = r[i];
            a = e.offset + e.size;
        }
        for (let e = i + 1; e <= o; e++) {
            const t = s(e);
            r[e] = {
                offset: a,
                size: t
            };
            a += t;
        }
        if (e === "column") {
            n.lastMeasuredColumnIndex = o;
        } else if (e === "row" && o < t.rowCount) {
            n.lastMeasuredRowIndex = o;
        } else if (e === "columnHeaderRow") {
            n.lastMeasuredHeaderRowIndex = o;
        }
    }
    return r[o];
};

const Y6 = (e, t, o, n) => {
    if (t === n.columnCount - 1 && n.autoFillLastColumn !== false) {
        return Math.max(n.itemData.getViewPortWidth() - o, e);
    }
    return e;
};

const q6 = (e, t, o, n) => {
    let a, r;
    if (e === "column") {
        a = o.columnMetadataMap;
        r = o.lastMeasuredColumnIndex;
    } else if (e === "row") {
        a = o.rowMetadataMap;
        r = o.lastMeasuredRowIndex;
    } else {
        a = o.headerRowMetadataMap;
        r = o.lastMeasuredHeaderRowIndex;
    }
    const s = r > 0 ? a[r].offset : 0;
    if (s >= n) {
        return X6(e, t, o, r, 0, n);
    } else {
        return Z6(e, t, o, Math.max(0, r), n);
    }
};

const X6 = (e, t, o, n, a, r) => {
    while (a <= n) {
        const s = a + Math.floor((n - a) / 2);
        const i = $6(e, t, s, o).offset;
        if (i === r) {
            return s;
        } else if (i < r) {
            a = s + 1;
        } else if (i > r) {
            n = s - 1;
        }
    }
    if (a > 0) {
        return a - 1;
    } else {
        return 0;
    }
};

const Z6 = (e, t, o, n, a) => {
    const r = e === "column" ? t.columnCount : t.rowCount;
    let s = 1;
    while (n < r && $6(e, t, n, o).offset < a) {
        n += s;
        s *= 2;
    }
    return X6(e, t, o, Math.min(n, r - 1), Math.floor(n / 2), a);
};

const J6 = (e, t, o, n, a, r, s) => {
    const i = e === "column" ? t.width : t.height - (r.headerHeight ?? 0);
    const l = $6(e, t, o, r);
    const c = e === "column" ? W6(t, r) : 0;
    const d = Math.max(0, l.offset - c);
    const u = Math.max(0, l.offset - i + s + l.size);
    if (n === "smart") {
        if (a >= u - i && a <= d + i) {
            n = "auto";
        } else {
            n = "center";
        }
    }
    switch (n) {
      case "start":
        return d;

      case "end":
        return u;

      case "center":
        return Math.round(u + (d - u) / 2);

      case "auto":
      default:
        if (a >= u && a <= d) {
            return a;
        } else if (u > d) {
            return d;
        } else if (a < u) {
            return u;
        } else {
            return d;
        }
    }
};

const Q6 = F6({
    getColumnOffset: (e, t, o) => $6("column", e, t, o).offset,
    getColumnStartIndexForOffset: (e, t, o) => q6("column", e, o, t),
    getColumnStopIndexForStartIndex: (e, t, o, n, a) => {
        const {columnCount: r, width: s} = e;
        const i = $6("column", e, t, n, a);
        const l = o + s;
        let c = i.offset + i.size;
        let d = t;
        while (d < r - 1 && c < l) {
            d++;
            c += $6("column", e, d, n, a).size;
        }
        return d;
    },
    getColumnWidth: U6,
    setColumnWidth: G6,
    getAdjustedColumnWidth: Y6,
    getEstimatedTotalHeight: H6,
    getEstimatedTotalWidth: K6,
    getOffsetForColumnAndAlignment: (e, t, o, n, a, r) => J6("column", e, t, o, n, a, r),
    getOffsetForRowAndAlignment: (e, t, o, n, a, r) => J6("row", e, t, o, n, a, r),
    getRowOffset: (e, t, o) => $6("row", e, t, o).offset,
    getRowHeight: (e, t, o) => {
        if (t < 0) {
            return $6("columnHeaderRow", e, 0 - t - 1, o).size;
        }
        return $6("row", e, t, o).size;
    },
    getRowStartIndexForOffset: (e, t, o) => q6("row", e, o, t),
    getRowStopIndexForStartIndex: (e, t, o, n) => {
        const {rowCount: a, height: r} = e;
        const s = e.headerVisible ?? true;
        const i = s ? a : a - 1;
        const l = $6("row", e, t, n);
        const c = o + r;
        let d = l.offset + l.size;
        let u = t;
        while (u < i && d < c) {
            u++;
            d += $6("row", e, u, n).size;
        }
        return s ? u - 1 : u;
    },
    getRowMetadata: (e, t, o) => {
        const n = t;
        const a = o === true ? e.spanHeaderRowMetadataMap : e.spanRowMetadataMap;
        if (a[t] === undefined) {
            a[t] = {
                lastIndex: -1,
                lastReset: -1
            };
        }
        const r = a[t];
        if (r.lastReset !== a.lastColReset) {
            r.lastIndex = Math.min(r.lastIndex, a.lastColIndex);
            const e = r[r.lastIndex];
            if (e !== undefined && e.displayed < r.lastIndex) {
                r.lastIndex = e.displayed;
            }
            r.lastReset = a.lastColReset;
        }
        const s = (e, t) => {
            r[e] = t;
            r.lastIndex = Math.max(e + (t?.colSpan ?? 1), r.lastIndex);
            for (let o = e + 1, n = e + t.colSpan; o < n; o++) {
                r[o] = t;
            }
        };
        return {
            getCell: (e, t) => {
                if (e >= r.lastIndex) {
                    let o = Math.max(r.lastIndex, 0);
                    while (o <= e) {
                        const e = typeof t === "function" ? t(n, o) : t;
                        s(o, {
                            displayed: o,
                            colSpan: e
                        });
                        o += e;
                    }
                }
                return r[e];
            },
            setCell: s
        };
    },
    initInstanceProps(e, t) {
        const {estimatedColumnWidth: o, estimatedRowHeight: n} = e;
        const a = {
            columnMetadataMap: {},
            estimatedColumnWidth: o || g5.sizes.columnWidth,
            estimatedRowHeight: n || g5.sizes.rowHeight,
            lastMeasuredColumnIndex: -1,
            lastMeasuredRowIndex: -1,
            lastMeasuredHeaderRowIndex: -1,
            rowMetadataMap: {},
            headerRowMetadataMap: {},
            headerHeight: n || g5.sizes.rowHeight,
            spanRowMetadataMap: {
                lastRowIndex: -1,
                lastColIndex: -1,
                lastColReset: -1
            },
            spanHeaderRowMetadataMap: {
                lastRowIndex: -1,
                lastColIndex: -1,
                lastColReset: -1
            }
        };
        t.resetAfterColumnIndex = (e, o = true) => {
            t.resetAfterIndices({
                columnIndex: e,
                shouldForceUpdate: o
            });
        };
        t.resetAfterRowIndex = (e, o = true) => {
            t.resetAfterIndices({
                rowIndex: e,
                shouldForceUpdate: o
            });
        };
        t.resetAfterIndices = ({columnIndex: e, rowIndex: o, shouldForceUpdate: n = true}) => {
            if (typeof e === "number") {
                a.lastMeasuredColumnIndex = Math.min(a.lastMeasuredColumnIndex, e - 1);
                a.spanRowMetadataMap.lastColIndex = a.spanHeaderRowMetadataMap.lastColIndex = Math.min(e - 1, a.spanRowMetadataMap.lastColIndex);
                a.spanRowMetadataMap.lastColReset = a.spanHeaderRowMetadataMap.lastColReset = Date.now();
            }
            if (typeof o === "number") {
                a.lastMeasuredRowIndex = Math.min(a.lastMeasuredRowIndex, o - 1);
                a.spanRowMetadataMap.lastRowIndex = Math.min(o - 1, a.spanRowMetadataMap.lastRowIndex);
            }
            t._getItemStyleCache(-1);
            if (n) {
                t.forceUpdate();
            }
        };
        return a;
    },
    shouldResetStyleCacheOnItemSizeChange: false,
    validateProps: ({columnWidth: e, rowHeight: t}) => {}
});

var e8 = "sas_components-List-GroupHeaderItem-GroupHeaderItem_group-item";

var t8 = "sas_components-List-GroupHeaderItem-GroupHeaderItem_group-item-text";

var o8 = "sas_components-List-GroupHeaderItem-GroupHeaderItem_disabled";

var n8 = {
    groupItem: e8,
    groupItemText: t8,
    disabled: o8
};

const a8 = e => {
    const o = C_();
    const n = {
        ...r8(o, {
            tokens: e.tokens
        }),
        ...e.theme?.(o)
    };
    const a = t(oO, {
        disabled: e.disabled,
        level: 6,
        title: e.tooltip,
        style: {
            ...n,
            ...e.style
        },
        className: ke(n8.groupItemText, e.className),
        "data-testid": e.testId
    }, e.title);
    return a;
};

const r8 = (e, t) => ({
    ...__({
        fg: t?.tokens?.fg ?? e.tokensExperimental["color-action-text-subtle-normal"]
    }, "list-group-header"),
    ...!e.enableNovaTokens && s8(e, t)
});

const s8 = (e, t) => ({
    ...__({
        fg: t?.tokens?.fg ?? (e.themeVariant === "light" ? e.c.n_3 : e.c.white)
    }, "list-group-header")
});

const i8 = () => {
    console.error("Incorrect Avatar data provider.");
    return Promise.reject();
};

const l8 = {
    getAvatar: i8,
    getName: i8,
    resolveId: i8
};

const c8 = () => l8;

const d8 = Dh("Avatar");

const u8 = (e, t = "user") => `${e}|${t}`;

const m8 = new Map;

const p8 = (e, t = "user") => {
    const o = u8(e, t);
    const n = m8.get(o);
    if (!n) return;
    const a = Date.now();
    n.lastModifiedTime = a;
    if (!n.listeners) return;
    for (const e of n.listeners) {
        e(a);
    }
};

const f8 = (e, t, o) => {
    const n = h8(e, t, o);
    return () => {
        if (!n) return;
        p8(n, o);
    };
};

const g8 = (e, t, o, n, r) => {
    const i = h8(e, o, n);
    const l = s((e => {
        if (!r || e > r) {
            t();
        }
    }), [ r, t ]);
    const c = u8(i, n);
    a((() => {
        if (!r) {
            return;
        }
        const e = m8.get(c);
        const o = e?.lastModifiedTime;
        if (o && o > r) {
            t();
        }
    }), [ r, c, t ]);
    a((() => {
        if (!m8.has(c)) {
            m8.set(c, {
                listeners: []
            });
        }
        const {listeners: e} = m8.get(c);
        e.push(l);
        return () => {
            const e = m8.get(c);
            e.listeners = e.listeners.filter((e => e !== l));
        };
    }), [ c, l ]);
    a((() => {}), [ t ]);
};

const h8 = (e, t, o) => {
    const [r, s] = n(t);
    a((() => {
        let n = false;
        (async () => {
            if (!e.resolveId) {
                s(t);
                return;
            }
            try {
                const a = await e.resolveId(t, o);
                if (n) return;
                s(a);
            } catch (e) {
                if (n) return;
                s(t);
                d8.error(`Failed to get the actual id for id:${t} and type: ${o}`);
            }
        })();
        return () => {
            n = true;
        };
    }), [ e, t, o ]);
    return r ?? "";
};

const b8 = fb(jt);

const v8 = Dh("Avatar");

const y8 = e => {
    const t = b8();
    const [o, r] = n(undefined);
    const i = h8(e.dataProvider, e.userId, e.type);
    const [l, d] = n();
    const u = c(0);
    const m = i === e.userId ? e.userId : null;
    a((() => () => {
        u.current += 1;
    }), []);
    const p = s((async () => {
        const t = ++u.current;
        try {
            const o = await e.dataProvider.getName(e.userId, e.type);
            if (u.current > t) return;
            r(o.length > 0 ? o : m);
        } catch (o) {
            if (u.current > t) return;
            r(null);
            v8.warn(`Failed to fetch the user info for id:${e.userId} and type: ${e.type}. User name not available.`);
        } finally {
            if (u.current > t) return;
            d(Date.now());
        }
    }), [ e.dataProvider, m, e.userId, e.type ]);
    g8(e.dataProvider, p, e.userId, e.type, l);
    a((() => {
        p();
    }), [ p ]);
    let f = "";
    if (o === undefined) {
        f = t("loading.avatar.tooltip.label");
    } else if (o === null) {
        f = t(`unknown.${e.type ?? "user"}.tooltip.label`);
    } else {
        f = t(`avatar.${e.type ?? "user"}.tooltip.label`, {
            name: o
        });
    }
    const g = e.tooltip === "" ? e.useAsButton ? f : undefined : e.tooltip ?? f;
    const h = e.ariaLabel === "" ? g : e.ariaLabel ?? g ?? f;
    return {
        ariaLabel: h,
        tooltip: g,
        name: o
    };
};

var x8 = "sas_components-Avatar-Avatar_noselect";

var S8 = "sas_components-Avatar-Avatar_inner-container";

var w8 = "sas_components-Avatar-Avatar_avatar";

var C8 = "sas_components-Avatar-Avatar_has-image";

var E8 = "sas_components-Avatar-Avatar_avatar-image";

var I8 = "sas_components-Avatar-Avatar_image-invisible";

var _8 = "sas_components-Avatar-Avatar_avatar-button";

var D8 = "sas_components-Avatar-Avatar_active";

var L8 = "sas_components-Avatar-Avatar_small";

var T8 = "sas_components-Avatar-Avatar_medium";

var R8 = "sas_components-Avatar-Avatar_extra-large";

var k8 = "sas_components-Avatar-Avatar_avatar-icon";

var A8 = {
    noselect: x8,
    innerContainer: S8,
    avatar: w8,
    hasImage: C8,
    avatarImage: E8,
    imageInvisible: I8,
    avatarButton: _8,
    active: D8,
    small: L8,
    medium: T8,
    extraLarge: R8,
    avatarIcon: k8
};

const M8 = {
    user: GL,
    group: UL
};

const N8 = Dh("Avatar");

const O8 = u((function e({dataProvider: o = c8(), ...r}, i) {
    const [l, d] = n(false);
    const [u, m] = n(false);
    const {ariaLabel: p, tooltip: f, name: g} = y8({
        ...r,
        dataProvider: o
    });
    const [h, b] = n();
    const [v, y] = n();
    const x = c(0);
    const S = r.size ?? "medium";
    const w = r.variant || "primary";
    const C = t(MM, {
        className: A8.avatarIcon,
        icon: M8[r.type ?? "user"],
        tooltip: "",
        testId: gb(r.testId, "icon")
    });
    const E = v ? t("img", {
        className: ke(A8.avatarImage, !l && A8.imageInvisible),
        "data-testid": gb(r.testId, "image"),
        src: v,
        alt: "",
        onError: () => d(false),
        onLoad: () => d(true)
    }) : null;
    let I;
    if (r.type === "group") {
        I = E ?? C;
    } else {
        if (g === undefined || v === undefined) {
            I = null;
        } else if (E) {
            I = E;
        } else if (g && g.length > 0) {
            I = t("div", null, String.fromCodePoint(g.codePointAt(0)));
        } else {
            I = C;
        }
    }
    a((() => () => {
        x.current += 1;
    }), []);
    const _ = s((() => {
        const e = ++x.current;
        o.getAvatar?.(r.userId, r.type).then((t => {
            if (x.current > e) return;
            y(t);
        })).catch((() => {
            if (x.current > e) return;
            y("");
            N8.warn(`Failed to fetch the avatar details info for id:${r.userId} and type: ${r.type}. Using default avatar.`);
        })).finally((() => {
            if (x.current > e) return;
            b(Date.now());
        }));
    }), [ o, r.userId, r.type ]);
    g8(o, _, r.userId, r.type, h);
    a(_, [ _ ]);
    const D = C_();
    const L = {
        ...I_(P8(D), "avatar"),
        ...I_(B8(D, w))
    };
    const T = r.focusable ?? (r.useAsButton ? true : undefined);
    return t("div", {
        id: r.id,
        ref: i,
        "data-testid": r.testId,
        className: ke(A8[S], A8.avatar, r.className),
        style: {
            ...L,
            ...r.style
        },
        "aria-label": p,
        "aria-haspopup": r.ariaHasPopup,
        "aria-hidden": r.ariaLabel === "" ? true : undefined,
        title: f,
        role: r.useAsButton ? "button" : "img",
        tabIndex: T === undefined ? undefined : T ? 0 : -1,
        onClick: () => {
            r.useAsButton && r.onPress?.();
        },
        onKeyDown: e => {
            if (r.useAsButton && (e.key === "Enter" || e.key === " ")) {
                PA(e);
                m(true);
            }
        },
        onKeyUp: e => {
            if (r.useAsButton && (e.key === "Enter" || e.key === " ")) {
                m(false);
            }
        },
        onKeyPress: e => {
            if (r.useAsButton && (e.key === "Enter" || e.key === " ")) {
                e.preventDefault();
                r.onPress?.();
            }
        },
        onBlur: () => m(false)
    }, t("div", {
        className: ke(A8.innerContainer, I?.type === "img" && A8.hasImage, u && A8.active),
        "aria-hidden": "true"
    }, I));
}));

const P8 = e => ({
    "font-size-s": e.tokensExperimental["size-icon-m"],
    "font-size-m": e.tokensExperimental["size-icon-l"],
    "font-weight": e.tokensExperimental["font-style-weight-700"],
    "text-transform-uppercase": e.tokensExperimental["font-style-text-transform-uppercase"],
    "border-radius": e.tokensExperimental["size-border-radius-full"],
    "active-bg": e.tokensExperimental["color-action-background-emphasis-selected"],
    "active-fg": e.tokensExperimental["color-action-text-emphasis-selected"],
    bw: e.tokensExperimental["size-border-width-s"],
    bg: e.tokensExperimental["color-action-background-emphasis-normal"],
    "hover-bg": e.tokensExperimental["color-action-background-emphasis-hover"],
    "hover-fg": e.tokensExperimental["color-action-text-emphasis-hover"],
    bd: e.tokensExperimental["color-action-border-emphasis-normal"],
    fg: e.tokensExperimental["color-action-text-emphasis-normal"]
});

const B8 = (e, t) => {
    switch (e.themeVariant) {
      case "high-contrast":
      case "dark":
        return {
            "avatar-focus": "var(--focus-light-bg)"
        };

      default:
        return {
            "avatar-focus": t === "primary" ? "var(--focus-light-bg)" : "var(--focus-dark-bg)"
        };
    }
};

var z8 = "sas_components-List-Item-Item_item";

var F8 = "sas_components-List-Item-Item_disabled";

var j8 = "sas_components-List-Item-Item_unread";

var V8 = "sas_components-List-Item-Item_double-lines";

var H8 = "sas_components-List-Item-Item_single-line";

var U8 = "sas_components-List-Item-Item_sub-section";

var G8 = "sas_components-List-Item-Item_base-text";

var K8 = "sas_components-List-Item-Item_item-description-text";

var W8 = "sas_components-List-Item-Item_item-info-text";

var $8 = "sas_components-List-Item-Item_item-text";

var Y8 = "sas_components-List-Item-Item_bold";

var q8 = "sas_components-List-Item-Item_read";

var X8 = "sas_components-List-Item-Item_description";

var Z8 = "sas_components-List-Item-Item_wrap";

var J8 = "sas_components-List-Item-Item_infoHasPriority";

var Q8 = "sas_components-List-Item-Item_concat";

var e9 = "sas_components-List-Item-Item_item-text-separator";

var t9 = "sas_components-List-Item-Item_item-icon";

var o9 = "sas_components-List-Item-Item_item-avatar";

var n9 = "sas_components-List-Item-Item_counter";

var a9 = "sas_components-List-Item-Item_content-container";

var r9 = "sas_components-List-Item-Item_hasItemIcon";

var s9 = "sas_components-List-Item-Item_hasItemAvatar";

var i9 = "sas_components-List-Item-Item_dot";

var l9 = {
    item: z8,
    disabled: F8,
    unread: j8,
    doubleLines: V8,
    singleLine: H8,
    subSection: U8,
    baseText: G8,
    itemDescriptionText: K8,
    itemInfoText: W8,
    itemText: $8,
    bold: Y8,
    read: q8,
    description: X8,
    wrap: Z8,
    infoHasPriority: J8,
    concat: Q8,
    itemTextSeparator: e9,
    itemIcon: t9,
    itemAvatar: o9,
    counter: n9,
    contentContainer: a9,
    hasItemIcon: r9,
    hasItemAvatar: s9,
    dot: i9
};

const c9 = f((e => {
    const o = c(null);
    const n = C_();
    const a = {
        ...d9(n, {
            tokens: e.tokens,
            concatInfo: e?.info?.concatInfo
        }),
        ...e.theme?.(n)
    };
    const r = JA();
    const s = t("div", {
        style: {
            ...a,
            ...e.style
        },
        className: ke(l9.item, e.className, e.disabled && l9.disabled, e.unread === false && l9.read, e.unread === true && l9.unread, e.info?.hasPriority && l9.infoHasPriority),
        ref: o,
        "data-testid": e.testId,
        dir: e.dir
    }, e.unread === true ? t(MM, {
        icon: BR,
        theme: () => ({
            "--icon-default-override-fg": "var(--list-item-unread-bg)"
        }),
        className: l9.dot
    }) : null, t(iN, {
        spacing: "s",
        className: ke(l9.contentContainer, e.icon && l9.hasItemIcon, e.avatar && l9.hasItemAvatar)
    }, e.icon ? b9(e) : v9(e, r), e.description ? m9(e) : u9(e)), e.description && e.info && !e.info.concatInfo ? g9(e) : undefined, qI(e.counter) ? null : t(h9, e));
    return s;
}));

const d9 = (e, t) => ({
    ...__({
        fg: t?.tokens?.fg,
        "font-family": t?.tokens?.fontFamily,
        "font-size": t?.tokens?.fontSize,
        "font-weight": t?.tokens?.fontWeight,
        "font-style": t?.tokens?.fontStyle,
        "text-decoration": t?.tokens?.textDecoration,
        gap: t?.concatInfo ? "" : e.tokensExperimental["space-inline-s"]
    }, "list-item")
});

const u9 = e => t("div", {
    className: l9.singleLine
}, f9(e), g9(e));

const m9 = e => t("div", {
    className: l9.doubleLines
}, f9(e), p9(e));

const p9 = e => t("span", {
    className: l9.subSection
}, t(jP, {
    testId: gb(e.testId, "description"),
    className: l9.itemDescriptionText,
    disabled: e.disabled,
    highlightableConfig: {
        highlight: !e.highlight?.excludeDescription ? e.highlight?.text : undefined
    },
    wrapText: false
}, e.description ?? ""), e.info?.concatInfo ? g9(e) : undefined);

const f9 = e => {
    const o = WA({
        tooltip: e.tooltip
    });
    const n = !qI(e.titleMaxLines);
    return t(jP, {
        id: e.id,
        className: ke(l9.itemText, n && l9.wrap, e.description && [ l9.bold, l9.description ], e.mixedLines && [ l9.bold ]),
        testId: gb(e.testId, "title"),
        disabled: e.disabled,
        highlightableConfig: {
            highlight: !e.highlight?.excludeTitle ? e.highlight?.text : undefined
        },
        ref: o,
        wrapText: n,
        maxLines: e.titleMaxLines,
        dir: e.dir
    }, e.title ?? "");
};

const g9 = e => {
    if (!e.info) {
        return null;
    }
    const n = e.info.concatInfo ? t(jP, {
        className: l9.itemTextSeparator,
        disabled: e.disabled,
        dir: e.dir
    }, "-") : null;
    const a = t(jP, {
        className: ke(l9.itemInfoText, e.info.concatInfo && l9.concat),
        testId: gb(e.testId, "info"),
        disabled: e.disabled,
        highlightableConfig: {
            highlight: !e.highlight?.excludeInfo ? e.highlight?.text : undefined
        },
        wrapText: false,
        dir: e.dir
    }, e.info.infoText ?? "");
    return e.info.concatInfo ? t(o, null, n, a) : t(o, null, a);
};

const h9 = e => {
    const o = jV();
    if (qI(e.counter)) {
        return null;
    }
    const n = new Intl.NumberFormat(o);
    return t(jP, {
        "data-testid": gb(e.testId, "counter"),
        className: l9.counter,
        disabled: e.disabled,
        highlightableConfig: {
            highlight: !e.highlight?.excludeCounter ? e.highlight?.text : undefined
        },
        wrapText: false
    }, `(${n.format(e.counter)})`);
};

const b9 = e => {
    if (qI(e.icon)) {
        return null;
    }
    return t(MM, Ee({}, e.icon, {
        className: ke(l9.itemIcon, e.icon.className),
        theme: () => {
            e.icon?.theme ? e.icon.theme : () => ({
                "--icon-default-override-fg": "var(--list-item-fg)"
            });
        },
        disabled: e.disabled
    }));
};

const v9 = (e, o) => {
    const {avatar: n} = e;
    if (qI(n)) {
        return null;
    }
    return t(O8, Ee({}, n, {
        size: "small",
        ariaLabel: n.ariaLabel ?? "",
        tooltip: n.tooltip ?? o({
            icon: n.type === "user" ? Ck : Ek,
            testId: gb(e.testId, "icon")
        }).tooltip,
        className: ke(l9.itemAvatar, n.className)
    }));
};

const y9 = e => t(c9, e);

var x9 = "sas_components-List-LinkItem-LinkItem_content-container";

var S9 = "sas_components-List-LinkItem-LinkItem_item-icon";

var w9 = "sas_components-List-LinkItem-LinkItem_link-wrapper";

var C9 = {
    contentContainer: x9,
    itemIcon: S9,
    linkWrapper: w9
};

const E9 = e => e.icon ? t(iN, {
    spacing: "s",
    className: C9.contentContainer
}, _9(e), I9(e)) : I9(e);

const I9 = e => {
    const {readOnly: o, onPress: n, testId: a, children: r} = e;
    const s = !qI(e.maxLines);
    const i = GN();
    return o ? t(jP, {
        className: e.className,
        style: e.style,
        wrapText: s,
        maxLines: e.maxLines
    }, typeof r === "string" ? i(r) : "") : t("div", {
        className: C9.linkWrapper,
        onClick: e => {
            if (n) e.stopPropagation();
        }
    }, t(AJ, Ee({}, e, {
        wrapText: s,
        maxLines: e.maxLines,
        testId: gb(a, "link")
    })));
};

const _9 = e => qI(e.icon) ? null : t(MM, Ee({}, e.icon, {
    className: ke(C9.itemIcon, e.icon.className),
    disabled: e.disabled
}));

const D9 = e => {
    const {preference: t, dispatch: o, setFreezeColumn: n, setOrderedColumnKeys: a, setResizedColumn: r, setFreezeColumnCount: s, ...i} = s3(e);
    const {frozenColumnCount: l, resizedColumns: c, orderedColumnKeys: d, ...u} = t;
    return {
        preference: u,
        ...i
    };
};

const L9 = e => "cellIcon" in e || "cellHelpPopup" in e;

const T9 = (e, t) => typeof e.cellIcon === "function" ? e.cellIcon(t) : e.cellIcon;

const R9 = (e, t) => typeof e.cellHelpPopup === "function" ? e.cellHelpPopup(t) : e.cellHelpPopup;

const k9 = fb(jt);

const A9 = e => {
    const {getItemType: t, getItemProps: o, getRowKey: n, helpPopupButtonRefs: a, accessibilityInfo: r, readOnly: s, isItemReadOnly: i} = e;
    const l = JA();
    const c = k9();
    return e => {
        const {rowIndex: d, column: u} = e;
        const m = n?.(d);
        const p = !!s || !!(m && i?.(m));
        const f = u && L9(u) ? u : undefined;
        if (typeof r?.getCellInfo === "function") {
            const t = r.getCellInfo(e);
            if (t) return t;
        }
        const g = t(d);
        const h = o(d);
        if (g === "groupItem") {
            return B9(h);
        } else if (!f) {
            if (h) {
                if (g === "item") return M9(h, l, c); else if (g === "linkItem") return P9(h, l);
            }
        } else if (f) {
            const e = R9(f, d);
            const t = f.itemDescription?.(d);
            const o = t ? `, ${t}` : g === "item" ? `, ${h?.title}` : g === "linkItem" && typeof h.children === "string" ? `, ${h.children}` : "";
            if (e) {
                if (a && (p && f?.displayHelpPopupReadOnly?.(d) || !p)) {
                    const e = N9(a[d]);
                    if (e) return `${e}${o}`;
                }
            } else if (!f?.onPress || !p) {
                const e = O9(f, l, d);
                if (e) return `${e}${o}`;
            }
        }
        return null;
    };
};

const M9 = (e, t, o) => {
    const n = e => {
        const {ariaLabel: o, tooltip: n} = t(e);
        return o ?? n;
    };
    const a = [];
    if (e.icon && !e.announceIconLast) {
        a.push(n(e.icon));
    }
    if (e.title) {
        a.push(e.title);
    }
    if (e.description) {
        a.push(e.description);
    }
    if (e.info) {
        if (e.info.concatInfo) a.push("-");
        a.push(e.info.infoText);
    }
    if (!qI(e.counter)) {
        a.push(`(${e.counter})`);
    }
    if (e.icon && e.announceIconLast) {
        a.push(n(e.icon));
    }
    if (e.tooltip) {
        a.push(`, ${e.tooltip}`);
    }
    const r = a.length > 0 ? a.join(", ").replace(/, -,/g, " -") : null;
    if (r && !e.icon && e.avatar) {
        return e.avatar.ariaLabel ? [ r, e.avatar.ariaLabel ].join(", ") : o(`avatar.${e.avatar.type ?? "user"}.tooltip.label`, {
            name: r
        });
    }
    return r;
};

const N9 = e => e?.ariaLabel ?? e?.title;

const O9 = (e, t, o) => {
    const n = T9(e, o);
    const a = n ? t(n).ariaLabel : null;
    return a;
};

const P9 = (e, t) => {
    const o = [];
    const n = e => {
        const {ariaLabel: o, tooltip: n} = t(e);
        return o ?? n;
    };
    if (e.icon && !e.announceIconLast) {
        o.push(n(e.icon));
    }
    o.push(e.children);
    if (e.icon && e.announceIconLast) {
        o.push(n(e.icon));
    }
    if (e.title) {
        o.push(`, ${e.title}`);
    }
    return o.length > 0 ? o.join(", ") : null;
};

const B9 = e => e.title;

const z9 = fb(Vt);

const F9 = e => {
    const {columns: t, startColIndex: o, getItemType: n, getRowKey: a, getItemGroup: r, disabled: s, isItemDisabled: i, narration: l, readOnly: c, isItemReadOnly: d} = e;
    const u = z9();
    return e => {
        const m = e.current.colIndex - o;
        const p = e.current.rowIndex ?? -1;
        const f = e.previous?.rowIndex ?? -1;
        const g = t[m];
        const h = e.previous ? n(f) : "";
        const b = n(p);
        const v = m < 0;
        const y = a?.(p);
        const x = !!c || !!(y && d?.(y));
        const S = !!s || !!(y && i?.(y));
        const w = (b === "groupItem" || b !== "invalid" && !v) && e.default ? [ e.default ] : [];
        if (f === -1) {
            const e = r?.(p);
            if (e) {
                w.unshift(U9(u));
                w.unshift(e);
            }
        } else if (f > p && h === "groupItem" && b !== "groupItem") {
            w.unshift(K9(u));
            w.unshift(r?.(p) ?? "");
        }
        if (b === "groupItem") {
            w.push(G9(u));
            if (f !== -1 && f < p) w.push(K9(u));
        } else if (g && L9(g)) {
            const e = R9(g, p);
            const t = T9(g, p);
            if (e) {
                if (!x || x && g.displayHelpPopupReadOnly?.(p)) {
                    w.push(j9(u, !!S || !!g.disabled?.(p)));
                }
            } else if (t) {
                if (!!g.onPress) {
                    if (!x) {
                        w.push(j9(u, !!S || !!g.disabled?.(p)));
                    }
                } else {
                    w.push(V9(u));
                }
            }
        } else if (b === "linkItem" && !c) {
            w.push(H9(u));
        }
        const C = w.join(", ");
        if (typeof l?.onSayCell === "function") {
            return l.onSayCell({
                current: e.current,
                previous: e.previous,
                default: C
            });
        }
        return C;
    };
};

const j9 = (e, t) => {
    const o = [ e("icon.button.aria") ];
    if (!t) {
        o.push(e("icon.buttonToActivate.aria"));
    }
    return o.join(", ");
};

const V9 = e => e("icon.graphic.aria");

const H9 = e => e("linkItem.aria");

const U9 = e => e("group.aria");

const G9 = e => e("groupHeader.aria");

const K9 = e => e("groupStart.aria");

const W9 = u((function e(o, a) {
    const [r, s] = n(false);
    g(a, (() => ({
        toggle: () => {
            const e = !r;
            s(e);
            return e;
        },
        open: () => s(true),
        close: () => s(false),
        isOpen: r
    })));
    return t(iP, Ee({}, o, {
        isOpen: r,
        setIsOpen: s,
        focusable: false
    }));
}));

var $9 = "sas_components-List-List_list";

var Y9 = "sas_components-List-List_list-inner";

var q9 = "sas_components-List-List_icon-column-static-icon";

var X9 = "sas_components-List-List_row-selection-border";

var Z9 = "sas_components-List-List_cell";

var J9 = {
    ltr: "sas_components-List-List_direction_ltr",
    rtl: "sas_components-List-List_direction_rtl"
};

var Q9 = "sas_components-List-List_row-selection-border-selected";

var eee = "sas_components-List-List_display-icons-on-demand";

var tee = "sas_components-List-List_icon-content";

var oee = "sas_components-List-List_item-row";

var nee = "sas_components-List-List_ignore-hover";

var aee = "sas_components-List-List_focused-show-icons";

var ree = "sas_components-List-List_help-popup-expanded-by-row";

var see = {
    list: $9,
    listInner: Y9,
    iconColumnStaticIcon: q9,
    rowSelectionBorder: X9,
    cell: Z9,
    direction: J9,
    rowSelectionBorderSelected: Q9,
    displayIconsOnDemand: eee,
    iconContent: tee,
    itemRow: oee,
    ignoreHover: nee,
    focusedShowIcons: aee,
    helpPopupExpandedByRow: ree
};

const iee = fb(Vt);

const lee = 33;

const cee = FA() + 1;

const dee = e => {
    const i = iee();
    const l = $B({
        source: OB.Error
    });
    const d = !e.disabled ? e.selectionMode ?? "none" : "none";
    const u = q4(d, 1, e.rowCount);
    const m = u ? 1 : 0;
    const p = c(e.initialFocus ?? {
        rowIndex: 0,
        colIndex: m,
        region: n2.Data
    });
    a((() => {
        p.current = e.initialFocus;
    }), [ e.initialFocus ]);
    const [f, g] = n(false);
    const [h, b] = n(null);
    const [v, y] = n(-1);
    const [x, S] = n();
    const w = C_();
    const C = ay() ? "rtl" : "ltr";
    const E = t => {
        if (e.rowCount === 0 || t === -1 || t >= e.rowCount) return null;
        return e.getItemInfo?.(t)?.props ?? e.renderItem?.({
            index: t
        })?.props ?? N?.item?.(t)?.props;
    };
    const I = t => {
        if (e.rowCount === 0 || t === -1 || t >= e.rowCount) return "";
        return E(t)?.group ?? "";
    };
    const _ = t2();
    const D = c(null);
    const L = e => {
        const t = D.current;
        const o = u ? 1 : 0;
        const n = t?._getRowMetadata(e).getCell(o);
        if (n && n.colSpan > 1) return n.colSpan;
        const {colSpan: a, key: r} = N ?? {};
        return typeof a === "function" ? a({
            columnIndex: o,
            rowIndex: e,
            columnKey: r
        }) : a ?? 1;
    };
    const T = e.iconColumns ? e.iconColumns.reduce(((e, t) => e + (t.width ?? lee)), 0) + (_.tableHasVerticalScrollbar ? cee : 0) : 0;
    const R = e.width ?? f5.tableWidth;
    const k = m ? f5.selectionControlColumnWidth : 0;
    const A = R - k - T;
    const M = s((t => {
        const o = e.getRowKey;
        return o ? o(t) : g5.getRowKey(t);
    }), [ e.getRowKey ]);
    const N = r((() => {
        const t = e.itemColumn ? {
            ...e.itemColumn,
            width: A,
            maximumWidth: 99999
        } : {
            key: "itemColumn",
            width: e.width ? A : undefined,
            maximumWidth: e.width ? 99999 : undefined
        };
        if (!e.renderItem) {
            t.cellContent = (e, o, n, a, r, s) => t.item?.(o, a, r, s) ?? null;
        }
        const o = !e.iconColumns || e.iconColumns?.length === 0;
        if (q4(d, 1, e.rowCount) && !e.disabled) {
            t.style = {
                paddingInlineStart: "var(--list-spacing-s)",
                paddingInlineEnd: o ? "calc(var(--table-last-column-pd-adjustment) + var(--list-spacing-s))" : "var(--list-spacing-s)",
                ...t.style
            };
        }
        return t;
    }), [ e.itemColumn, e.width, e.renderItem, e.iconColumns, e.rowCount, e.disabled, A, d ]);
    const O = t => {
        if (e.rowCount === 0 || t === -1 || t >= e.rowCount) return "invalid";
        const o = e.getItemInfo?.(t)?.type ?? e.renderItem?.({
            index: t
        })?.type ?? N?.item?.(t)?.type;
        if (o === y9 || o === c9) {
            return "item";
        } else if (o === E9) {
            return "linkItem";
        } else if (o === a8) {
            return "groupItem";
        }
        return "custom";
    };
    const P = e.getRowIndex ?? (e => {
        const t = parseInt(e);
        return isNaN(t) ? -1 : t;
    });
    const B = t => O(P(t)) === "groupItem" ? true : e.isItemReadOnly?.(t) ?? false;
    if (p?.current) {
        p.current.rowIndex = Math.max(0, Math.min(p.current.rowIndex, e.rowCount - 1));
    }
    const z = c(null);
    const F = e.tableRef ?? z;
    const {refs: j, createSetRef: V} = uU();
    const {refs: H, createSetRef: U} = uU();
    const G = D9({
        selectedRows: e.selectedRows,
        selectAll: e.selectAll
    });
    const K = e.scrollTo ?? G.scrollTo;
    const W = s((e => {
        if (e !== -1) {
            const t = {
                rowIndex: e,
                colIndex: p.current?.colIndex ?? 0,
                region: n2.Data
            };
            K({
                cell: t,
                align: "smart",
                focusToCell: true,
                focusIndicator: "visible"
            });
        } else l.play();
    }), [ l, K ]);
    const $ = r((() => {
        const n = e => e.cellHelpPopup ? 2 : e.onPress ? 1 : 0;
        const a = (e.iconColumns ? [ ...e.iconColumns ] : []).sort(((e, t) => n(e) - n(t))).map(((n, a) => {
            const r = a === (e.iconColumns?.length ?? 0) - 1;
            const s = n.onPress;
            const i = {
                ...n,
                width: (n.width ?? lee) + (r && _.tableHasVerticalScrollbar ? cee : 0),
                minimumWidth: (n.width ?? lee) + (r && _.tableHasVerticalScrollbar ? cee : 0),
                alignment: "center",
                preventToggleSelection: true,
                style: {
                    paddingInlineStart: "0",
                    paddingInlineEnd: r ? "var(--table-last-column-pd-adjustment)" : "0"
                },
                onPress: s ? (e, t) => {
                    if (!i.disabled?.(e) && !j[e]?.isOpen) s?.(e, t);
                } : undefined,
                cellContent: (n, a, r, l, c, d) => {
                    const u = R9(i, a);
                    if (d && (!u && s || u && !i?.displayHelpPopupReadOnly?.(a))) return null;
                    if (u) return t("div", {
                        className: see.iconContent
                    }, t(W9, Ee({
                        buttonRef: e => {
                            D_(i.helpPopupButtonRef?.(a), e);
                            D_(U?.(a), e);
                        },
                        ref: V(a),
                        testId: gb(i.testId, `row${a}-helpPopup`),
                        disabled: c || i.disabled?.(a)
                    }, u, {
                        className: ke(f && p.current?.rowIndex === a && p.current?.colIndex === n + m ? $M.active : undefined, u.className),
                        onClose: () => y(-1),
                        onEscape: () => {
                            if (p.current) {
                                K({
                                    cell: p.current,
                                    align: "smart",
                                    focusToCell: true,
                                    focusIndicator: "visible"
                                });
                            }
                        }
                    })));
                    const g = T9(i, a);
                    if (!g) {
                        return t(o, null);
                    }
                    return s ? t("div", {
                        className: see.iconContent
                    }, t(QM, {
                        ref: e => D_(i.iconButtonRef?.(a), e),
                        testId: gb(i.testId, `row${a}-cellIcon`),
                        icon: g,
                        tooltip: g.tooltip,
                        ariaLabel: g.ariaLabel,
                        style: {
                            margin: "0 auto",
                            ...g.style
                        },
                        variant: g.variant ?? oN.Icon,
                        className: ke(f && p.current?.rowIndex === a && p.current?.colIndex === n + m ? $M.active : undefined, g.className),
                        disabled: c || i.disabled?.(a),
                        theme: () => e.tokens?.theme ? {
                            "--button-fg": "var(--list-item-fg)"
                        } : undefined
                    })) : t("div", {
                        className: see.iconContent
                    }, t(MM, Ee({}, g, {
                        className: ke(see.iconColumnStaticIcon, g.className),
                        disabled: c || i.disabled?.(a),
                        theme: () => {
                            e.tokens?.theme ? {
                                "--icon-default-override-fg": "var(--list-item-fg)"
                            } : undefined;
                        }
                    })));
                }
            };
            return i;
        }));
        return a;
    }), [ e.iconColumns, e.tokens?.theme, _.tableHasVerticalScrollbar, j, V, f, m, U, K ]);
    const Y = [ N, ...$ ];
    const q = A9({
        getItemType: O,
        getItemProps: E,
        accessibilityInfo: e.accessibilityInfo,
        helpPopupButtonRefs: H,
        readOnly: e.readOnly,
        isItemReadOnly: B,
        getRowKey: M
    });
    const X = F9({
        columns: Y,
        startColIndex: m,
        getItemType: O,
        getItemGroup: I,
        disabled: e.disabled,
        isItemDisabled: e.isItemDisabled,
        narration: e.narration,
        readOnly: e.readOnly,
        isItemReadOnly: B,
        getRowKey: M
    });
    const Z = O(p.current?.rowIndex ?? 0) === "linkItem" ? undefined : e.onActivate;
    const J = {
        ...uee(w, {
            tokens: e.tokens
        }),
        ...e.theme?.(w)
    };
    const Q = r((() => {
        const t = e.tokens?.theme?.({
            state: "selected"
        });
        const {fg: o, bg: n} = t || {};
        return __({
            fg: o && "var(--list-item-selected-fg)",
            "description-fg": w.themeVariant === "high-contrast" ? w.tokensExperimental["color-text-neutral"] : w.tokensExperimental["color-action-text-standard-selected"],
            bg: n && "var(--list-item-selected-bg)",
            "hover-bg": n && "var(--list-item-selected-bg)"
        }, "list-item");
    }), [ w.tokensExperimental, e.tokens, w.themeVariant ]);
    const ee = t => {
        const {rowIndex: o, createRow: n, createCell: a, hasSelectionControl: r, isEmpty: s, disabled: i, readOnly: l, dragging: c} = t;
        const d = O(o) === "groupItem";
        const u = e.preference ?? G.preference;
        const m = c !== true && (!i && u?.selectAll === true || !!u?.selectedRows?.has(M(o)));
        if (s) return n({
            children: undefined
        });
        const f = [];
        let g = 0;
        if (r) {
            !d && f.push(t.createSelectionCell(g));
            g++;
        }
        const b = e.renderItem?.({
            index: o,
            disabled: i,
            readOnly: l
        }) ?? N.cellContent;
        if (d) {
            const e = a({
                index: 0,
                content: b,
                colSpan: (r ? 1 : 0) + Y.length,
                className: n8.groupItem
            });
            return n({
                children: e
            });
        }
        let y = e.renderItem ? 1 : L(o);
        f.push(t.createCell({
            index: g++,
            content: b,
            className: ke(see.cell, see.direction[C]),
            colSpan: y,
            style: {
                paddingInlineEnd: y > 1 && y === $.length + 1 ? "var(--table-last-column-pd-adjustment)" : "0"
            }
        }));
        const S = g;
        for (g = Math.max(g, t.columnStartIndex); g <= t.columnStopIndex; g++) {
            y--;
            if (y > 0) continue;
            const e = $?.[g - S];
            const n = r ? g - 1 : g;
            if (e) {
                f.push(t.createCell({
                    index: g,
                    content: e.cellContent?.(n, o, e.key, undefined, i, l),
                    className: ke(see.cell, see.direction[C], e.displayOnDemand && see.displayIconsOnDemand)
                }));
            }
        }
        const E = x === "visible" && p.current?.rowIndex === o ? see.focusedShowIcons : undefined;
        const I = v === -1 ? undefined : v === o ? see.helpPopupExpandedByRow : see.ignoreHover;
        const _ = n({
            children: f,
            className: ke(e.borderHighlighting && see.rowSelectionBorder, (m || h === o) && e.borderHighlighting && see.rowSelectionBorderSelected, see.itemRow, E, I),
            style: {
                ...m && !r && !e.borderHighlighting && __({
                    "description-fg": w.tokensExperimental["color-text-neutral"]
                }, "list-item"),
                ...m && Q,
                ...i && __({
                    fg: "var(--list-item-disabled-fg)"
                }, "list-item"),
                ...(m || h === o) && e.borderHighlighting && __({
                    "pressed-bg": "transparent",
                    "pressed-filter": "none",
                    "selected-bg": "transparent",
                    "selected-filter": "none",
                    "selected-inactive-bg": "transparent",
                    "selected-inactive-filter": "none"
                }, "table")
            }
        });
        return _;
    };
    if (p?.current) {
        p.current.colIndex = Math.max(0, Math.min(p.current.colIndex, Y.length - 1 + (u ? 1 : 0)));
    }
    let te;
    if (!e.disabled && !e.readOnly && e.onDeletePress) {
        te = e.deleteRowAnnouncement ?? i("deleteToDelete.msg");
    }
    return t("div", {
        className: ke(see.list, e.disabled && l9.disabled, e.className),
        style: J
    }, t("div", {
        className: ke(see.listInner, e.className ? `${e.className}-inner` : undefined),
        onMouseDown: e => {
            const t = e.target;
            const o = t.closest('[role="row"]');
            if (o) {
                const e = p.current?.rowIndex ?? 0;
                b(e);
            }
        },
        onMouseUp: () => {
            b(null);
        },
        onClick: t => {
            const o = p.current?.rowIndex ?? 0;
            const n = p.current?.colIndex ?? 0;
            const a = M(o);
            const r = e.disabled || e.isItemDisabled?.(a);
            const s = e.readOnly || B?.(a);
            const i = $.length > 0 && $[n - 1 - m];
            if (r) return;
            if (H[o]?.contains(t.target)) {
                if (i && i.cellHelpPopup) {
                    const e = s && i?.displayHelpPopupReadOnly?.(o);
                    if (!s || e) {
                        const t = i?.key || "";
                        const n = j[o]?.toggle?.();
                        if (e) i.onPress?.(o, t);
                        y(n ? o : -1);
                    }
                }
            } else {
                j[o]?.close?.();
                y(-1);
            }
        },
        onKeyDown: t => {
            const o = t.altKey || t.ctrlKey || t.shiftKey || t.metaKey;
            if (o) return;
            const n = p.current?.rowIndex ?? 0;
            const a = M(n);
            const r = e.disabled || e.isItemDisabled?.(a);
            const s = e.readOnly || B?.(a);
            if (!e.disabled && e.rowCount && t.key.trim().length === 1 && N?.containsInteractiveContent !== true) {
                const o = Math.min(n + 1, e.rowCount - 1);
                if (!e.loadData) {
                    if (e.getNextMatchedItem !== undefined) {
                        const n = e.getNextMatchedItem(t.key, o);
                        if (n !== undefined) {
                            W(n);
                            t.stopPropagation();
                            t.preventDefault();
                        }
                    } else {
                        const n = t.key.toLowerCase();
                        W(xj({
                            length: e.rowCount,
                            start: o,
                            isValidIndex: t => {
                                if (e.disabled || e.isItemDisabled?.(M(t))) return false;
                                const o = O(t);
                                if (o === "item") return !!E(t).title.toLowerCase().startsWith(n);
                                if (o === "linkItem") {
                                    const e = E(t);
                                    if (typeof e.children === "string") return e.children.toLowerCase().startsWith(n);
                                }
                                return false;
                            },
                            wrap: false
                        }) ?? -1);
                        t.stopPropagation();
                        t.preventDefault();
                    }
                }
            }
            if (r || s) return;
            g(((t.key === "Enter" || t.key === " ") && e.iconColumns?.some((e => (!!e.onPress || !!e.cellHelpPopup) && !e.disabled?.(n)))) ?? false);
            if (t.key === "Enter" || t.key === " ") {
                b(n);
            }
            if (t.key === "Enter" && (p.current?.colIndex ?? m) === m) {
                const e = E(n);
                if (e && O(n) === "linkItem" && e.onPress) {
                    t.stopPropagation();
                    t.preventDefault();
                    e.onPress(t);
                }
            }
        },
        onKeyUp: t => {
            const o = t.altKey || t.ctrlKey || t.shiftKey || t.metaKey;
            if (o) return;
            const n = p.current?.rowIndex ?? 0;
            const a = p.current?.colIndex ?? 0;
            const r = M(n);
            const s = e.disabled || e.isItemDisabled?.(r);
            const i = e.readOnly || B?.(r);
            const l = $.length > 0 && $[a - 1 - m];
            if (l && l.cellHelpPopup) {
                const e = i && l?.displayHelpPopupReadOnly?.(n);
                if (!s && (!i || e) && (t.key === "Enter" || t.key === " ")) {
                    const t = l?.key || "";
                    j[n]?.open?.();
                    if (e) l.onPress?.(n, t);
                }
            }
            if (s || i) return;
            if (t.key === "Enter" || t.key === " ") {
                b(null);
            }
            if ((t.key === "Enter" || t.key === " ") && f) {
                g(false);
            }
            if (t.key === "Delete") {
                e.onDeletePress?.(G.preference.selectedRows, p.current?.rowIndex ?? 0);
            }
        }
    }, t(e5, Ee({}, G, e, {
        tableRef: F,
        internalRef: D,
        theme: () => ({
            "--scrollbar-hover-track-bg": "transparent",
            ...e.tableTheme?.(w)
        }),
        columns: Y,
        hideSelectedStateStyles: u,
        hideHoverStateStyles: u && !Z,
        hidePressedStateStyles: u && !Z,
        renderRow: ee,
        isRowDisabled: e.isItemDisabled,
        isRowReadOnly: B,
        reorderRow: (t, o, n) => e.reorderItem?.(t, o, n),
        initialFocus: e.initialFocus ?? {
            rowIndex: p.current?.rowIndex ?? 0,
            colIndex: p.current?.colIndex ?? m,
            region: n2.Data
        },
        initialFocusVisible: e.initialFocusVisible ?? true,
        selectionMode: d,
        disableAutoFocus: e.disableAutoFocus ?? true,
        hideManageColumnsButton: true,
        cellBordersVisible: false,
        columnHeadersVisible: false,
        frozenColumnCount: 0,
        rowHeight: t => {
            if (O(t) === "groupItem") return 33;
            const o = e.itemHeight?.(t);
            if (typeof o === "number") return o;
            return o === "double" || o === "mixed" ? 56 : 30;
        },
        showSeparator: t => {
            if (e.showSeparator !== undefined) return typeof e.showSeparator === "function" ? e.showSeparator(t) : e.showSeparator;
            const o = O(0) === "item" ? E(0).titleMaxLines : undefined;
            const n = O(0) === "linkItem" ? E(0).maxLines : undefined;
            return e.rowCount > 0 && (e.itemHeight?.(0) === "double" || e.itemHeight?.(0) === "mixed" || o > 1 || n > 1);
        },
        hideFillRows: true,
        deleteRowAnnouncement: te,
        onFocusChange: t => {
            p.current = t;
            e.onFocusChange?.(t);
        },
        onFocusIndicator: S,
        onSelect: (t, o, n, a) => {
            e.onSelect?.(t, o !== "mixed" ? o : false, n, a !== "mixed" ? a : undefined);
        },
        onActivate: Z,
        accessibilityInfo: {
            getCellInfo: q
        },
        narration: {
            onSayCell: X,
            onSaySelectionCell: X
        },
        ariaRoleDescription: e.ariaRoleDescription ? e.ariaRoleDescription : Y.length === 1 && !u && (O(0) === "item" || O(0) === "groupItem" && O(1) === "item") ? "listbox" : undefined,
        ariaDescribedBy: e.ariaDescribedBy,
        cellBackground: t => e.cellBackground?.(t) ?? (G.preference.selectedRows?.has(`${t.rowIndex}`) ? "var(--list-item-selected-bg)" : "var(--list-item-bg)"),
        ignoreTableOverrideTheme: true
    }))));
};

const uee = (e, t) => {
    const o = t?.tokens?.theme;
    const n = o?.({
        state: "normal"
    });
    return {
        ...__({
            m: e.tokensExperimental["space-base-m"],
            s: e.tokensExperimental["space-base-s"],
            xs: e.tokensExperimental["space-base-xs"],
            xxs: e.tokensExperimental["space-base-xxs"],
            l: e.tokensExperimental["space-base-l"],
            "squish-s": e.tokensExperimental["space-squish-s"]
        }, "list-spacing"),
        ...__({
            fg: e.tokensExperimental["color-action-text-subtle-normal"]
        }, "list-item-default"),
        ...__({
            fg: e.tokensExperimental["color-action-text-subtle-normal"],
            bg: e.tokensExperimental["color-action-background-control-normal"],
            "description-fg": e.tokensExperimental["color-label-text"],
            "disabled-fg": e.tokensExperimental["color-action-text-subtle-disabled"],
            "font-size-m": t?.tokens?.font?.fontSize ?? e.tokensExperimental["font-size-body-text-m"],
            "font-size-s": t?.tokens?.font?.fontSize ?? e.tokensExperimental["font-size-body-text-s"],
            "font-size-xs": t?.tokens?.font?.fontSize ?? e.tokensExperimental["font-size-body-text-xs"],
            "text-decoration": t?.tokens?.font?.textDecoration ?? "inherit",
            "font-weight-default": t?.tokens?.font?.fontWeight ?? e.tokensExperimental["font-style-weight-400"],
            "font-weight-thick": t?.tokens?.font?.fontWeight ?? e.tokensExperimental["font-style-weight-700"],
            "font-style": t?.tokens?.font?.fontStyle ?? "inherit",
            "font-family": t?.tokens?.font?.fontFamily ?? "inherit",
            "unread-bg": e.tokensExperimental["color-status-icon-info"]
        }, "list-item"),
        ...__({
            bd: e.tokensExperimental["color-container-border-4"],
            fg: t?.tokens?.theme?.({
                state: "normal"
            })?.fg ?? e.tokensExperimental["color-action-text-subtle-normal"]
        }, "list-group-header"),
        ...__({
            "border-highlighting-color": e.tokensExperimental["color-action-border-standard-selected"]
        }, "list-row"),
        ...t?.tokens?.whiteSpace ? __({
            "white-space": t?.tokens?.whiteSpace
        }, "list-item") : {},
        ...o ? {
            ...__(o({
                state: "normal"
            }) ?? {}, "list-item"),
            ...__({
                fg: o({
                    state: "normal"
                })?.fg
            }, "list-item-default"),
            ...__(o({
                state: "selected"
            }) ?? {}, "list-item-selected"),
            ...__(o({
                state: "hover"
            }) ?? {}, "list-item-hover")
        } : {},
        ...n?.fg ? {
            ...__({
                fg: "var(--list-item-default-fg)"
            }, "list-item-default-description"),
            ...__({
                fg: "var(--list-item-default-fg)"
            }, "list-item-description")
        } : {},
        ...!e.enableNovaTokens && mee(e, t)
    };
};

const mee = (e, t) => {
    let o = {};
    switch (e.themeVariant) {
      case "high-contrast":
        o = {
            fg: e.c.white,
            "description-fg": e.c.white
        };
        break;

      case "dark":
        o = {
            fg: e.c.white,
            "description-fg": e.c.white80
        };
        break;

      default:
        o = {
            fg: e.c.n_3,
            "description-fg": e.c.n_1
        };
    }
    const n = t?.tokens?.theme;
    const a = n?.({
        state: "normal"
    });
    return {
        ...__({
            ...o
        }, "list-item-default"),
        ...__({
            "disabled-fg": e.stateStandard.disabled.fg,
            "font-size-m": t?.tokens?.font?.fontSize ?? e.font.size.m,
            "font-size-s": t?.tokens?.font?.fontSize ?? e.font.size.s,
            "font-size-xs": t?.tokens?.font?.fontSize ?? e.font.size.xs,
            "text-decoration": t?.tokens?.font?.textDecoration ?? "inherit",
            "font-weight-default": t?.tokens?.font?.fontWeight ?? e.font.weight.default,
            "font-weight-thick": t?.tokens?.font?.fontWeight ?? e.font.weight.thick,
            "font-style": t?.tokens?.font?.fontStyle ?? "inherit",
            "font-family": t?.tokens?.font?.fontFamily ?? "inherit",
            "unread-bg": e.c.primary,
            ...o
        }, "list-item"),
        ...__({
            bd: e.c.colorUiBorder,
            fg: t?.tokens?.theme?.({
                state: "normal"
            })?.fg ?? e.c.colorTextDefault
        }, "list-group-header"),
        ...__({
            "border-highlighting-color": e.themeVariant === "dark" ? e.stateStandard.selected.bd : e.c.colorNeutral
        }, "list-row"),
        ...t?.tokens?.whiteSpace ? __({
            "white-space": t?.tokens?.whiteSpace
        }, "list-item") : {},
        ...n ? {
            ...__(n({
                state: "normal"
            }) ?? {}, "list-item"),
            ...__({
                fg: n({
                    state: "normal"
                })?.fg
            }, "list-item-default"),
            ...__(n({
                state: "selected"
            }) ?? {}, "list-item-selected"),
            ...__(n({
                state: "hover"
            }) ?? {}, "list-item-hover")
        } : {},
        ...a?.fg ? {
            ...__({
                fg: "var(--list-item-default-fg)"
            }, "list-item-default-description"),
            ...__({
                fg: "var(--list-item-default-fg)"
            }, "list-item-description")
        } : {}
    };
};

const pee = e => t(o2, null, t(dee, e));

fb(Ht);

fb(Ht);

fb(Ht);

fb(Ht);

var fee = "sas_components-ContextMenu-ContextMenu_context-area";

var gee = "sas_components-ContextMenu-ContextMenu_context-container";

var hee = {
    contextArea: fee,
    contextContainer: gee
};

const bee = e => {
    const {style: r, className: i, suppressIndicator: l, async: d, onContextMenu: u, onItemSelect: m, children: p, ...f} = e;
    const [g, h] = n(false);
    const [b, v] = n({
        x: 0,
        y: 0
    });
    const y = c(null);
    const x = C_();
    const S = cy();
    const w = YI();
    const {getActionsByKeyEvent: C} = MD();
    const E = ay();
    const I = t => {
        if (t?.ctrlKey && t.button === 2) return;
        u?.(t);
        t?.preventDefault();
        if (e.sections || d) {
            t?.stopPropagation();
        }
        y.current = document.activeElement;
        const o = t ? {
            x: t.nativeEvent.clientX,
            y: t.nativeEvent.clientY
        } : {
            dockingElement: y.current
        };
        if (t?.button !== 2 && o.x !== undefined && cD() === sD.Firefox) {
            const e = y.current.closest("[role=dialog]");
            if (e) {
                const t = getComputedStyle(e).transform.match(/matrix\((.+)\)/);
                if (t) {
                    const [, , , , e, n] = t[1].split(", ");
                    o.x += parseFloat(e);
                    o.y += parseFloat(n);
                }
            }
        }
        v(o);
        if (g) {
            h(false);
            setTimeout((() => w.current && h(true)), 0);
        } else {
            h(true);
        }
    };
    const _ = s((e => {
        h(false);
        e && y.current?.focus?.({
            preventScroll: true
        });
    }), []);
    const D = s((t => {
        if (g && (e.sections || d)) {
            t.preventDefault();
            t.stopPropagation();
        }
    }), [ g, e.sections, d ]);
    a((() => {
        document.addEventListener("contextmenu", D);
        return () => {
            document.removeEventListener("contextmenu", D);
        };
    }), [ D ]);
    a((() => {
        if (g && !l && (e.sections || d)) {
            y.current?.classList.add(hee.contextArea);
        }
        if (!g) {
            y.current?.classList.remove(hee.contextArea);
        }
    }), [ g, l, e.sections, d ]);
    return t(o, null, t("div", {
        className: ke(hee.contextContainer, i),
        style: {
            ...I_({
                "context-area-outline": `${x.stateFocusNova.onRightClick.bd} ${x.stateFocusNova.onRightClick.bdStyle} ${x.stateFocusNova.onRightClick.bdWidth}`,
                "context-area-outline-offset": `-${x.stateFocusNova.onRightClick.bdWidth}`
            }),
            ...r
        },
        onContextMenu: I,
        onKeyDown: t => {
            const {actions: o} = C(t.nativeEvent);
            if (o.includes("openContextMenu") && (bD() === fD.Mac || !(t.shiftKey && t.key === "F10"))) {
                t.preventDefault();
                if (e.sections || d) {
                    t.stopPropagation();
                }
                const o = t?.target;
                const n = S?.querySelectorAll('[role="menu"]');
                if (n && n.length > 0) {
                    for (const e of n) {
                        if (e && e.contains(o)) return;
                    }
                }
                I();
            }
        }
    }, p, e.sections || d ? t(Hz, Ee({
        isOpen: g,
        isBusy: d && !e.sections
    }, f, {
        sections: e.sections ?? [],
        position: e.position ?? b,
        placement: e.placement ?? `${E ? "left" : "right"}-start`,
        onItemSelected: (t, o) => {
            if (!e.sections) return;
            m?.(t, o);
            _(true);
            e.onItemSelected?.(t, o);
        },
        onDismiss: t => {
            _(t);
            e.onDismiss?.();
        }
    })) : null));
};

const vee = 750;

const yee = u(((e, o) => {
    const [a, r] = n(false);
    const s = c(null);
    const i = c(-1);
    const l = () => {
        if (!e.disabled) r(true);
    };
    return t("div", null, t(bee, {
        onContextMenu: l
    }, t(ZM, {
        ref: e => {
            D_(s, e);
            D_(o, e);
        },
        disabled: e.disabled,
        testId: e.testId,
        variant: oN.Icon,
        className: a ? $M.active : undefined,
        onPress: () => {
            clearTimeout(i.current);
            if (!a) e.onPress?.();
        },
        onMouseDown: e => {
            if (e.button === 0) {
                i.current = window.setTimeout(l, vee);
            }
        },
        onMouseLeave: () => {
            clearTimeout(i.current);
        },
        tooltip: e.tooltip,
        ariaLabel: e.tooltip,
        focusable: e.focusable ?? true,
        icon: e.icon
    })), t(Hz, {
        testId: gb(e.testId, "menu"),
        position: {
            dockingElement: s.current,
            verticalAlign: "end",
            horizontalAlign: "end"
        },
        isOpen: a,
        sections: e.sections,
        onItemSelected: t => {
            r(false);
            s.current?.focus();
            e.onItemSelected(t);
        },
        onDismiss: e => {
            r(false);
            if (e) s.current?.focus();
        }
    }));
}));

const xee = (e, t) => {
    a((() => {
        e.addEventListener("actionHistoryChanged", t);
        return () => {
            e.removeEventListener("actionHistoryChanged", t);
        };
    }), [ t, e ]);
};

const See = (e, t) => {
    a((() => {
        for (const o of e) {
            o.addEventListener("actionHistoryChanged", t);
        }
        return () => {
            for (const o of e) {
                o.removeEventListener("actionHistoryChanged", t);
            }
        };
    }), [ t, e ]);
};

const wee = e => ({
    undoProps: Cee(e, "undo"),
    redoProps: Cee(e, "redo")
});

const Cee = (e, t) => {
    const o = [ ...t === "undo" ? e.getUndoActions() : e.getRedoActions() ].reverse();
    return {
        sections: [ {
            items: o.map((e => ({
                text: e.getDisplayString()
            })))
        } ],
        disabled: o.length === 0,
        onPress: t === "undo" ? () => e.undoAction() : () => e.redoAction(),
        onItemSelected: t === "undo" ? ([[t, n]]) => e.undoActionHistoryTo(o[n]) : ([[t, n]]) => e.redoActionHistoryTo(o[n])
    };
};

const Eee = fb(Ut);

const Iee = e => {
    const [{undoProps: o, redoProps: a}, r] = n((() => wee(e.actionManager)));
    const i = s((() => {
        r(wee(e.actionManager));
    }), [ e.actionManager ]);
    xee(e.actionManager, i);
    const l = Eee();
    const c = o.sections[0].items;
    const d = a.sections[0].items;
    const u = c.length > 0 ? l("undoRecent.tooltip.label", {
        item: c[0].text
    }) : undefined;
    const m = d.length > 0 ? l("redoRecent.tooltip.label", {
        item: d[0].text
    }) : undefined;
    return t(iN, {
        spacing: "s"
    }, t(yee, Ee({
        testId: gb(e.testId, "undoButton"),
        ref: e.undoBtnRef,
        icon: {
            icon: xk
        },
        tooltip: u,
        focusable: e.undoFocusable
    }, o)), t(yee, Ee({
        testId: gb(e.testId, "redoButton"),
        ref: e.redoBtnRef,
        icon: {
            icon: GR
        },
        tooltip: m,
        focusable: e.redoFocusable
    }, a)));
};

const _ee = fb(Gt);

const Dee = u((function e({type: o, iconOnly: n, behaviorType: a, ...r}, s) {
    const i = _ee();
    const {icon: l, text: c} = Lee(o, n, i);
    const d = n ? oN.Icon : undefined;
    return t(QM, Ee({}, r, {
        ref: s,
        icon: l,
        text: c,
        variant: r.variant ?? d,
        type: a
    }));
}));

const Lee = (e, t = false, o) => {
    let n;
    let a;
    switch (e) {
      case "open":
        n = MR;
        a = o("predefinedButton.open.button.label");
        break;

      case "new":
        n = TR;
        a = o("predefinedButton.new.button.label");
        break;

      case "edit":
        n = TT;
        a = o("predefinedButton.edit.button.label");
        break;

      case "delete":
        n = ST;
        a = o("predefinedButton.delete.button.label");
        break;

      case "save":
        n = YR;
        a = o("predefinedButton.save.button.label");
        break;

      case "saveAs":
        n = qR;
        a = o("predefinedButton.saveAs.button.label");
        break;

      case "upload":
        n = wk;
        a = o("predefinedButton.upload.button.label");
        break;

      case "download":
        n = DT;
        a = o("predefinedButton.download.button.label");
        break;

      case "refresh":
        n = KR;
        a = o("predefinedButton.refresh.button.label");
        break;

      case "reset":
        n = WR;
        a = o("predefinedButton.reset.button.label");
        break;

      case "undo":
        n = xk;
        a = o("predefinedButton.undo.button.label");
        break;

      case "redo":
        n = GR;
        a = o("predefinedButton.redo.button.label");
        break;

      case "filter":
        n = NT;
        a = o("predefinedButton.filter.button.label");
        break;

      case "attach":
        n = HL;
        a = o("predefinedButton.attach.button.label");
        break;

      case "add":
        n = hL;
        a = o("predefinedButton.add.button.label");
        break;

      case "import":
        n = aR;
        a = o("predefinedButton.import.button.label");
        break;

      case "export":
        n = AT;
        a = o("predefinedButton.export.button.label");
        break;
    }
    return {
        icon: t ? {
            icon: n
        } : undefined,
        text: t ? undefined : a
    };
};

var Tee = "sas_components-Toolbar-__internal__-InnerToolbar-InnerToolbar_inner-toolbar";

var Ree = "sas_components-Toolbar-__internal__-InnerToolbar-InnerToolbar_separator-container";

var kee = {
    innerToolbar: Tee,
    separatorContainer: Ree
};

const Aee = dU(DG);

const Mee = {
    labelPosition: "left",
    wrapLabel: false
};

const Nee = (e, o, n, a) => {
    const r = o === undefined;
    const s = r ? true : o?.some((e => e === n));
    const i = o?.length === 1 ? a?.(o[0]) : undefined;
    switch (e.type) {
      case "Button":
        {
            const {type: o, containerStyle: n, containerKey: a, behaviorType: r, ...l} = e;
            return t(QM, Ee({}, l, {
                ref: e => {
                    i?.(e);
                    if (l.ref) {
                        D_(l.ref, e);
                    }
                },
                focusable: l.focusable === undefined ? s : l.focusable && s,
                type: r
            }));
        }

      case "PredefinedButton":
        {
            const {type: o, buttonType: n, containerStyle: a, containerKey: r, ...l} = e;
            return t(Dee, Ee({}, l, {
                type: n,
                ref: e => {
                    i?.(e);
                    if (l.ref) {
                        D_(l.ref, e);
                    }
                },
                focusable: s
            }));
        }

      case "Checkbox":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(tB, Ee({}, r, {
                ref: e => {
                    i?.(e);
                    if (r.ref) {
                        D_(r.ref, e);
                    }
                },
                wrapText: false,
                focusable: s
            }));
        }

      case "Heading":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(oO, Ee({}, r, {
                wrapText: false
            }));
        }

      case "BadgeButton":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(P0, Ee({}, r, {
                ref: e => {
                    i?.(e);
                    if (r.ref) {
                        D_(r.ref, e);
                    }
                },
                focusable: s
            }), e.icon ? t(MM, e.icon) : undefined);
        }

      case "MenuButton":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(MJ, Ee({}, r, {
                ref: e => {
                    i?.(e);
                    if (r.ref) {
                        D_(r.ref, e);
                    }
                },
                focusable: s
            }));
        }

      case "BaseMenuButton":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(eP, Ee({}, r, {
                ref: e => {
                    i?.(e);
                    if (r.ref) {
                        D_(r.ref, e);
                    }
                },
                focusable: s
            }));
        }

      case "ToolbarSeparator":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(Ite, r);
        }

      case "Select":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(DG, Ee({}, r, {
                selectBoxRef: e => {
                    i?.(e);
                    if (r.selectBoxRef) {
                        D_(r.selectBoxRef, e);
                    }
                },
                focusable: s
            }));
        }

      case "SelectWithLabels":
        {
            const {type: o, ...n} = e;
            return t(Aee, Ee({}, n, Mee, {
                selectBoxRef: e => {
                    i?.(e);
                    if (n.selectBoxRef) {
                        D_(n.selectBoxRef, e);
                    }
                },
                focusable: s
            }));
        }

      case "Label":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(LP, Ee({}, r, {
                wrapText: false
            }));
        }

      case "Image":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t($0, r);
        }

      case "SegmentedButton":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(H1, Ee({}, r, {
                focusedButtonRef: e => {
                    i?.(e);
                    if (r.focusedButtonRef) {
                        D_(r.focusedButtonRef, e);
                    }
                },
                focusable: s,
                enableOverflow: false
            }));
        }

      case "ToggleButton":
        {
            const {type: o, containerStyle: n, containerKey: a, textToDrop: r, ...l} = e;
            return t(J1, Ee({}, l, {
                ref: e => {
                    i?.(e);
                    if (l.ref) {
                        D_(l.ref, e);
                    }
                },
                focusable: s
            }));
        }

      case "FileUploader":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(oJ, Ee({}, r, {
                ref: e => {
                    i?.(e);
                    if (r.ref) {
                        D_(r.ref, e);
                    }
                },
                focusable: s
            }));
        }

      case "HelpPopup":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(iP, Ee({}, r, {
                buttonRef: e => {
                    i?.(e);
                    if (r.buttonRef) {
                        D_(r.buttonRef, e);
                    }
                },
                variant: "toolbar",
                focusable: s
            }));
        }

      case "ObjectMarker":
        {
            const {type: o, objectMarkerType: n, containerStyle: a, containerKey: r, ...l} = e;
            return t(I1, Ee({}, l, {
                type: n,
                ref: e => {
                    i?.(e);
                    if (l.ref) {
                        D_(l.ref, e);
                    }
                },
                focusable: s
            }));
        }

      case "SplitButton":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(Jz, Ee({}, r, {
                ref: e => {
                    i?.(e);
                    if (r.ref) {
                        D_(r.ref, e);
                    }
                },
                focusable: s
            }));
        }

      case "UndoRedo":
        {
            const {type: s, containerStyle: i, containerKey: l, ...c} = e;
            const d = o?.[0];
            const u = o?.[1];
            return t(Iee, Ee({}, c, {
                undoFocusable: r ? true : d === n,
                redoFocusable: r ? true : u === n,
                undoBtnRef: e => {
                    if (d !== undefined) {
                        a?.(d)?.(e);
                    }
                    if (c.undoBtnRef) {
                        D_(c.undoBtnRef, e);
                    }
                },
                redoBtnRef: e => {
                    if (u !== undefined) {
                        a?.(u)?.(e);
                    }
                    if (c.redoBtnRef) {
                        D_(c.redoBtnRef, e);
                    }
                }
            }));
        }

      case "ObjectSwitcher":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(p1, Ee({}, r, {
                ref: e => {
                    i?.(e);
                    if (r.ref) {
                        D_(r.ref, e);
                    }
                },
                focusable: s
            }));
        }
    }
};

const Oee = e => {
    const o = ay();
    const r = C_();
    const {density: s} = YA();
    const i = c(null);
    const [l, d] = n(0);
    const {focusableIndicesMap: u, focusableItemsCount: m} = Pee(e.items);
    const {refs: p, createSetRef: f} = uU();
    const {refs: g, createSetRef: h} = uU();
    a((() => {
        if (i.current?.contains(document.activeElement) && p[l] !== document.activeElement) {
            p[l]?.focus();
        }
    }), [ l, p, g ]);
    return t("div", {
        ref: i,
        style: I_({
            xs: s === "high" ? r.tokensExperimental["space-base-xs"] : r.tokensExperimental["space-base-s"]
        }, "inner-toolbar-spacing"),
        className: kee.innerToolbar,
        "data-testid": e.testId,
        role: "toolbar",
        onKeyDown: e => {
            if (e.isDefaultPrevented()) return;
            switch (e.key) {
              case o ? "ArrowLeft" : "ArrowRight":
                e.preventDefault();
                d((e => Math.min(e + 1, m - 1)));
                break;

              case o ? "ArrowRight" : "ArrowLeft":
                e.preventDefault();
                d((e => Math.max(e - 1, 0)));
                break;

              case "Home":
                d(0);
                e.preventDefault();
                break;

              case "End":
                d(m - 1);
                e.preventDefault();
                break;
            }
        },
        onFocus: e => {
            if (g[l]?.contains(document.activeElement)) return;
            for (const [t, o] of p.entries()) {
                if (o?.contains(e.target)) {
                    d(t);
                    return;
                }
            }
            for (const [t, o] of g.entries()) {
                if (o?.contains(e.target)) {
                    d(t);
                    break;
                }
            }
        }
    }, e.items.map(((o, n) => {
        const a = u.get(n) ?? [];
        return t("div", {
            key: o.containerKey ?? n,
            ref: t => {
                e.createSetRef?.(n)(t);
                for (const e of a) {
                    h(e)(t);
                }
            },
            style: o.containerStyle,
            className: ke(o.type === "ToolbarSeparator" && kee.separatorContainer)
        }, Nee(o, a, l, f));
    })));
};

const Pee = e => {
    const t = new Map;
    let o = 0;
    for (const [n, a] of e.entries()) {
        if (!T0.includes(a.type) || a.type === "ObjectMarker" && !a.popperText) {
            continue;
        }
        if (a.type === "UndoRedo") {
            t.set(n, [ o, o + 1 ]);
            o += 2;
        } else {
            t.set(n, [ o ]);
            o++;
        }
    }
    return {
        focusableIndicesMap: t,
        focusableItemsCount: o
    };
};

var Bee = "sas_components-Toolbar-__internal__-BaseToolbar_toolbar";

var zee = "sas_components-Toolbar-__internal__-BaseToolbar_separator-container";

var Fee = "sas_components-Toolbar-__internal__-BaseToolbar_spacer-container";

var jee = {
    toolbar: Bee,
    separatorContainer: zee,
    spacerContainer: Fee
};

const Vee = fb(Gt);

const Hee = u((function e(i, l) {
    const d = C_();
    const u = c(null);
    const {refs: m, createSetRef: p} = uU();
    const [f, h] = n();
    const [b, v] = n([]);
    const {density: y} = YA();
    const x = Vee();
    const S = r((() => i.items.reduce(((e, t) => t.type === "Tokenizer" && !t.hideSeparators ? [ ...e, {
        type: "ToolbarSeparator",
        testId: gb(t.testId, "separator-before")
    }, t, {
        type: "ToolbarSeparator",
        testId: gb(t.testId, "separator-after")
    } ] : [ ...e, t ]), [])), [ i.items ]);
    const w = ite(S, i.responsiveSetsConfig);
    const C = r((() => yte(w)), [ w ]);
    const E = r((() => w.map((({overflowPriority: e}) => e))), [ w ]);
    const [{overflowedItems: I, minimalStateItems: _}, D] = n({
        overflowedItems: [],
        minimalStateItems: []
    });
    const L = r((() => [ ...I, ...gte(E) ]), [ E, I ]);
    const T = L.map((({index: e}) => e));
    T.sort(((e, t) => e - t));
    const R = pte(E, T) >= 0;
    const k = s((e => {
        D((t => {
            const {overflowedItems: o, minimalStateItems: n} = t;
            let a = o;
            let r = n;
            const s = lte(S, u.current, m, e);
            const i = bte(S, L, n).length > 0;
            if (s < 0 && i || s > 0 && !R) {
                r = hte({
                    items: S,
                    overflowed: L,
                    prevMinimalStateItems: n,
                    availableWidth: s,
                    itemContainers: m,
                    responsiveSets: C
                });
            } else {
                a = rte(E, o, s, m, C);
            }
            return r === n && a === o ? t : {
                minimalStateItems: r,
                overflowedItems: a
            };
        }));
    }), [ S, m, L, R, C, E ]);
    const A = c();
    const [M] = kN((() => {
        if (A.current === u.current?.clientWidth) return;
        A.current = u.current?.clientWidth;
        k();
    }));
    g(i.toolbarRef, (() => ({
        responsivenessHandler: k
    })));
    a((() => {
        if (b.length > 0 || m.length === 0) return;
        v(m.map((e => {
            if (!e?.children?.[0]) return "none";
            return getComputedStyle(e.children[0]).maxWidth;
        })));
    }), [ m, b ]);
    {
        const e = S.map((({type: e}) => e));
        const [t, o] = n("");
        const [a, r] = n("");
        if (t && t !== E.toString()) {
            o(E.toString());
            D({
                overflowedItems: [],
                minimalStateItems: []
            });
        }
        if (a && a !== e.toString()) {
            r(e.toString());
            D({
                overflowedItems: [],
                minimalStateItems: []
            });
            v([]);
        }
    }
    const N = T.filter((e => w[e]?.overflowPriority !== "disappear"));
    const O = Zee(N, w, S);
    const P = N.length === 0 ? undefined : {
        type: "BaseMenuButton",
        icon: {
            icon: NR
        },
        variant: oN.Icon,
        hideDownArrow: true,
        testId: gb(i.testId, "overflowMenuButton"),
        tooltip: i.overflowMenuButtonTooltip ?? x("overflow.menubutton.tooltip.label"),
        ariaLabel: i.overflowMenuButtonAriaLabel ?? x("overflow.menubutton.aria"),
        ...i.overflowMenuButtonProps,
        sections: O.map((({items: e}) => ({
            items: e
        }))),
        onItemSelected: (...e) => {
            const [t] = e;
            if (t.length < 1) return;
            const [o, n] = t[0];
            const a = O[o].onSelectedHandlers;
            const r = a[Math.min(n, a.length - 1)]?.(...e);
            if (r) {
                h(r.index);
            }
        },
        onItemClosed: e => {
            const [t, o] = e[0];
            const n = O[t].onItemClosedHandlers[o];
            n?.(e);
        },
        menuAlign: {
            horizontalAlign: "end"
        },
        containerStyle: i.overflowMenuButtonProps?.containerStyle
    };
    a((() => {
        k();
    }), [ k, _ ]);
    const B = Uee(S, T, i.disableAutoGrouping, P !== undefined, i.groupThreshold, i.disableDropLeadingSeparator);
    const z = S.map((({...e}, t) => {
        if (e.type !== "ToolbarSpacer") {
            e.containerStyle = {
                display: "flex",
                ...e.containerStyle
            };
        }
        if (e.type === "Select" || e.type === "SearchField" || e.type === "ContentSearchField" || e.type === "Input" || e.type === "ComboBox" || e.type === "CompositeInput" || e.type === "FileUploader" || e.type === "Label" || e.type === "Checkbox" || e.type === "Heading" || e.type === "Breadcrumb" || e.type === "Tokenizer") {
            e.containerStyle = {
                minWidth: e.style?.minWidth,
                ...e.containerStyle
            };
            if (!e.containerStyle.minWidth) {
                if (e.type === "Label" || e.type === "Heading") {
                    e.containerStyle.minWidth = "2rem";
                } else if (e.type === "Checkbox") {
                    e.containerStyle.minWidth = e.label ? "3rem" : undefined;
                } else if (e.type === "CompositeInput") {
                    e.containerStyle.minWidth = "12rem";
                } else if (e.type === "FileUploader") {
                    e.containerStyle.minWidth = e.buttonOnly ? undefined : "12rem";
                } else if (e.type === "Tokenizer") {
                    if (e.tokens.length > 1) {
                        e.containerStyle.minWidth = "8rem";
                    } else if (e.tokens.length === 1) {
                        e.containerStyle.minWidth = "4rem";
                    }
                } else if (e.type === "Breadcrumb") {
                    const t = e.values?.length ?? 0;
                    if (t > 1) {
                        e.containerStyle.minWidth = "12rem";
                    } else if (t === 1) {
                        e.containerStyle.minWidth = "3rem";
                    }
                } else {
                    e.containerStyle.minWidth = "6rem";
                }
            }
            const o = cD() === sD.Safari;
            const n = o ? "100% + 1px" : "100%";
            if (b[t]) {
                e.style = {
                    boxSizing: "border-box",
                    ...e.style,
                    maxWidth: b[t] === "none" || b[t] === "100%" ? "100%" : `min(${n}, ${b[t]})`
                };
                if (e.containerStyle.maxWidth === undefined) {
                    e.containerStyle.maxWidth = b[t];
                }
            }
        } else if (e.type === "SelectWithLabels" || e.type === "SearchFieldWithLabels" || e.type === "DatePickerWithLabels" || e.type === "InputWithLabels" || e.type === "ComboBoxWithLabels" || e.type === "CompositeInputWithLabels" || e.type === "FileUploaderWithLabels") {
            e.fieldLabelMinWidth = e.fieldLabelMinWidth ?? "2rem";
            e.fieldSuffixMinWidth = e.fieldSuffixMinWidth ?? "2rem";
            if (e.type === "CompositeInputWithLabels") {
                e.fieldMinWidth = e.fieldMinWidth ?? "12rem";
            } else if (e.type === "FileUploaderWithLabels") {
                e.fieldMinWidth = e.fieldMinWidth ?? "12rem";
            } else {
                e.fieldMinWidth = e.fieldMinWidth ?? "6rem";
            }
            e.containerStyle = {
                minWidth: "suffix" in e && e.suffix ? `calc(${e.fieldLabelMinWidth} + ${e.fieldMinWidth} + ${e.fieldSuffixMinWidth})` : `calc(${e.fieldLabelMinWidth} + ${e.fieldMinWidth})`
            };
        }
        if (_.some((({index: e}) => e === t))) {
            if (e.type === "PredefinedButton") {
                e.iconOnly = true;
            } else if (e.type === "Button") {
                e.tooltip = e.tooltip ?? e.text;
                e.text = "";
            } else if (e.type === "ToggleButton") {
                e.tooltip = e.tooltip ?? (e.textToDrop ? e.textToDrop.trim() : e.text);
                e.ariaLabel = e.ariaLabel ?? e.text;
                e.text = e.textToDrop ? e.text?.replace(e.textToDrop, "") : "";
            } else if (e.type === "FileUploader") {
                e.menuItemText = e.menuItemText ?? e.buttonText;
                e.buttonText = "";
            }
        }
        return e;
    }));
    const F = f === undefined ? undefined : w[f]?.onSelected?.([]);
    return t(o, null, t("div", {
        ref: e => {
            M(e);
            u.current = e;
            D_(l, e);
        },
        role: i.role ? i.role : "group",
        "aria-labelledby": i.ariaLabelledby,
        className: ke(jee.toolbar, i.className),
        style: {
            ...I_({
                xs: y === "high" ? d.tokensExperimental["space-base-xs"] : d.tokensExperimental["space-base-s"]
            }, "toolbar-spacing"),
            ...i.style
        },
        "data-testid": i.testId
    }, B.map(((e, o) => {
        const n = o === 1 && typeof B[0] === "number" && z[B[0]].type === "ToolbarSpacer";
        if (typeof e === "object") {
            const a = e.map((e => {
                const {overflowPriority: t, menuItemText: o, responsiveSetId: n, ...a} = z[e];
                return a;
            }));
            if (o === B.length - 1 && P) {
                a.push(P);
            }
            a[0].containerStyle = {
                marginInlineStart: o > 0 && !n ? d.tokensExperimental["space-inline-xs"] : undefined,
                ...a[0].containerStyle
            };
            return t(Oee, {
                key: e[0],
                items: a,
                createSetRef: t => t < e.length ? p(e[t]) : p(z.length)
            });
        } else {
            const o = z[e];
            const a = o.type === "ToolbarSpacer" ? undefined : o.containerStyle;
            const r = o.type === "ToolbarSpacer" ? undefined : o.containerKey;
            return t("div", {
                key: r ?? e,
                className: ke(o.type === "ToolbarSpacer" && jee.spacerContainer, o.type === "ToolbarSeparator" && jee.separatorContainer),
                style: {
                    marginInlineStart: n ? 0 : undefined,
                    ...a
                },
                ref: p(e)
            }, Xee(o));
        }
    })), (B.length === 0 || typeof B[B.length - 1] === "number") && P ? t("div", {
        key: "overflowMenuButton",
        ref: p(z.length),
        style: P.containerStyle
    }, Xee(P)) : null), t(zF, {
        title: F ? F.title : "",
        isOpen: f !== undefined,
        dismissAction: {
            text: F && F.dismissText ? F.dismissText : x("dialog.dismissButton.default.title"),
            onPress: () => {
                h(undefined);
            }
        }
    }, f !== undefined && F && S[f] ? F.renderContent(S[f]) : null));
}));

const Uee = (e, t, o = false, n, a = 3, r) => {
    const s = [];
    let i = [];
    const l = t => {
        const r = i.reduce(((t, o) => {
            const n = e[o].type;
            if (n === "UndoRedo") {
                return t + 2;
            }
            return T0.includes(n) ? t + 1 : t;
        }), 0);
        if (t && n) {
            a -= 1;
        }
        if (r >= a && !o) {
            s.push(i);
        } else {
            s.push(...i);
        }
        i = [];
    };
    const c = e.reduce(((o, n, a) => {
        const s = [ ...o ];
        const i = s.length > 0 ? e[s[s.length - 1]].type : null;
        if (!t.includes(a)) {
            const t = e[a].type;
            if (t === "ToolbarSeparator") {
                if (i !== null || r) {
                    if (i !== "ToolbarSeparator" && i !== "ToolbarSpacer") {
                        s.push(a);
                    }
                }
            } else {
                if (t === "ToolbarSpacer" && i === "ToolbarSeparator") {
                    s.splice(s.length - 1);
                }
                s.push(a);
            }
        }
        if (a === e.length - 1) {
            const t = s.length > 0 ? e[s[s.length - 1]].type : null;
            if (t === "ToolbarSeparator") {
                s.splice(s.length - 1);
            }
        }
        return s;
    }), []);
    for (const t of c) {
        const o = e[t];
        const n = o.type;
        if (L0.includes(n) || n === "FileUploader" && o.buttonOnly) {
            if (n === "ToolbarSeparator" && i.length === 0) {
                s.push(t);
            } else {
                i.push(t);
            }
        } else {
            l(false);
            s.push(t);
        }
    }
    l(true);
    return s;
};

const Gee = dU(SH);

const Kee = dU(LZ);

const Wee = dU(pQ);

const $ee = dU(EQ);

const Yee = dU($Z);

const qee = dU(oJ);

const Xee = e => {
    switch (e.type) {
      case "DatePicker":
        {
            const {datePickerProps: o} = e;
            return t(D$, o);
        }

      case "DatePickerWithLabels":
        {
            const {type: o, containerStyle: n, containerKey: a, datePickerProps: r, ...s} = e;
            const {className: i, style: l, ...c} = r;
            return t(L$, Ee({}, s, c, Mee, {
                inputClassName: i,
                inputStyle: l
            }));
        }

      case "CompositeInput":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t($Z, r);
        }

      case "CompositeInputWithLabels":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(Yee, Ee({}, r, Mee));
        }

      case "FileUploader":
        {
            const {type: o, overflowPriority: n, menuItemText: a, containerStyle: r, containerKey: s, ...i} = e;
            return t(oJ, i);
        }

      case "FileUploaderWithLabels":
        {
            const {type: o, overflowPriority: n, menuItemText: a, containerStyle: r, containerKey: s, ...i} = e;
            return t(qee, Ee({}, i, Mee));
        }

      case "Breadcrumb":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(uZ, Ee({}, r, {
                orientation: e.orientation ?? "HORIZONTAL"
            }));
        }

      case "SearchField":
        {
            const {type: o, overflowPriority: n, menuItemText: a, containerStyle: r, containerKey: s, ...i} = e;
            return t(pQ, i);
        }

      case "SearchFieldWithLabels":
        {
            const {type: o, overflowPriority: n, menuItemText: a, containerStyle: r, containerKey: s, ...i} = e;
            return t(Wee, Ee({}, i, Mee, {
                labelingAttr: "aria-label"
            }));
        }

      case "ContentSearchField":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(jq, r);
        }

      case "SwitchWithLabels":
        {
            const {type: o, overflowPriority: n, menuItemText: a, containerStyle: r, containerKey: s, ...i} = e;
            return t($ee, Ee({}, i, Mee));
        }

      case "Input":
        {
            const {type: o, overflowPriority: n, menuItemText: a, containerStyle: r, containerKey: s, inputType: i, ...l} = e;
            return t(SH, Ee({}, l, {
                type: i
            }));
        }

      case "InputWithLabels":
        {
            const {type: o, overflowPriority: n, menuItemText: a, containerStyle: r, containerKey: s, inputType: i, ...l} = e;
            return t(Gee, Ee({}, l, Mee, {
                type: i
            }));
        }

      case "ComboBox":
        {
            const {type: o, overflowPriority: n, menuItemText: a, containerStyle: r, containerKey: s, comboBoxType: i, ...l} = e;
            return t(LZ, Ee({}, l, {
                type: i
            }));
        }

      case "ComboBoxWithLabels":
        {
            const {type: o, overflowPriority: n, menuItemText: a, containerStyle: r, containerKey: s, comboBoxType: i, ...l} = e;
            return t(Kee, Ee({}, l, Mee, {
                type: i
            }));
        }

      case "Tokenizer":
        {
            const {type: o, containerStyle: n, containerKey: a, ...r} = e;
            return t(_0, Ee({}, r, {
                wrap: false
            }));
        }

      case "ToolbarSpacer":
        {
            const {type: o, style: n, ...a} = e;
            return t(wte, Ee({}, a, {
                style: {
                    margin: "0",
                    ...n
                }
            }));
        }

      case "MessageStrip":
        {
            const {messageStripProps: o} = e;
            return t(eQ, o);
        }

      default:
        {
            const {overflowPriority: t, menuItemText: o, responsiveSetId: n, ...a} = e;
            return Nee(a);
        }
    }
};

const Zee = (e, t, o) => {
    const n = [];
    let a = true;
    const r = (e, t, o, r) => {
        if (e.length === 0) return;
        const s = e.length > 1 || r || a;
        if (s) {
            n.push({
                items: [ ...e ],
                onSelectedHandlers: [ ...t ],
                onItemClosedHandlers: [ ...o ]
            });
        } else {
            if (n.length === 0) {
                n.push({
                    items: [],
                    onSelectedHandlers: [],
                    onItemClosedHandlers: []
                });
            }
            const a = n[n.length - 1];
            a.items.push(...e);
            a.onSelectedHandlers.push(...t);
            a.onItemClosedHandlers.push(...o);
        }
        a = e.length > 1;
    };
    for (const [n, a] of e.entries()) {
        const {menuItems: s, onSelected: i, onItemClosed: l} = t[a] ?? {};
        if (!s || s.length === 0) continue;
        const c = n > 0 && Jee(o, e[n - 1], a);
        r(s, [ i ], [ l ], c);
    }
    return n;
};

const Jee = (e, t, o) => {
    if (o > e.length) {
        return false;
    }
    for (let n = t + 1; n < o; n++) {
        const t = e[n].type;
        if (t === "ToolbarSeparator" || t === "ToolbarSpacer") return true;
    }
    return false;
};

var Qee = "sas_components-ObjectMarker-__internal__-PopperContent_container";

var ete = "sas_components-ObjectMarker-__internal__-PopperContent_popper-content";

var tte = {
    container: Qee,
    popperContent: ete
};

const ote = fb(Mt);

const nte = e => {
    const o = C_();
    const n = I_({
        pd: o.tokensExperimental["space-base-m"],
        "font-size-m": o.tokensExperimental["font-size-body-text-m"]
    }, "object-marker");
    const a = ote();
    const r = a("information.label");
    return t("div", {
        className: tte.container,
        role: "dialog",
        "aria-label": r
    }, t("div", {
        className: tte.popperContent,
        style: n,
        tabIndex: 0,
        onKeyDown: t => t.key === "Escape" && e.onEscape?.()
    }, e.content));
};

const ate = fb(Gt);

const rte = (e, t, o, n, a) => {
    if (o === 0) return t;
    const r = t.map((({index: e}) => e));
    if (o < 0) {
        let s = -o;
        const i = [];
        do {
            const t = mte(e, [ ...r, ...i.map((({index: e}) => e)) ]);
            if (t < 0) break;
            const o = a.find((e => e.includes(t))) ?? [ t ];
            const l = i.length;
            for (const t of o) {
                if (e[t] === "never") continue;
                const o = n[t];
                if (!o) continue;
                const a = dte(o);
                i.push({
                    index: t,
                    width: a
                });
                s -= a;
            }
            if (i.length === l) break;
        } while (s > 0);
        if (i.length > 0) {
            return [ ...t, ...i ];
        }
    } else {
        o -= 20;
        const n = [];
        do {
            const s = pte(e, [ ...r.filter((e => !n.includes(e))) ]);
            if (s < 0) break;
            const i = a.find((e => e.includes(s))) ?? [ s ];
            const l = t.filter((({index: e}) => i.includes(e)));
            const c = l.reduce(((e, {width: t}) => e + t), 0);
            if (l.length === 0 || o <= c) {
                break;
            }
            n.push(...i);
            o -= c;
        } while (o > 0);
        if (n.length > 0) {
            return t.filter((({index: e}) => !n.includes(e)));
        }
    }
    return t;
};

const ste = ({item: e, index: o, localize: n, objectMarkerLocalize: a, getIconA11yInfo: r, responsiveSetsConfig: s}) => {
    const {responsiveSetId: i} = e;
    const l = i && s ? s[i].overflowPriority : fte(e);
    switch (e.type) {
      case "Button":
      case "PredefinedButton":
        {
            const {icon: t, text: o} = e.type === "Button" ? {
                icon: e.icon,
                text: e.text
            } : Lee(e.buttonType, false, n);
            const a = t ? r(t) : {};
            return {
                overflowPriority: l,
                responsiveSetId: i,
                menuItems: [ {
                    text: e.menuItemText ?? o ?? e.tooltip ?? a.tooltip ?? n("Button.asMenuItem.label"),
                    disabled: e.disabled,
                    testId: e.testId
                } ],
                onSelected: () => e.onPress?.()
            };
        }

      case "BadgeButton":
        {
            return {
                overflowPriority: l,
                responsiveSetId: i,
                menuItems: [ {
                    text: e.menuItemText ?? e.tooltip ?? e.value.toString(),
                    disabled: e.disabled,
                    testId: e.testId
                } ],
                onSelected: () => e.onPress?.()
            };
        }

      case "BaseMenuButton":
        if (e.sections.some(qO)) {
            return {
                overflowPriority: l,
                responsiveSetId: i
            };
        }

      case "MenuButton":
        const s = e.icon ? r(e.icon) : {};
        return {
            overflowPriority: l,
            responsiveSetId: i,
            menuItems: [ {
                text: e.menuItemText ?? e.text ?? e.tooltip ?? s.tooltip ?? n("MenuButton.asMenuItem.label"),
                subSections: e.sections,
                disabled: e.disabled,
                testId: e.testId
            } ],
            onSelected: (t, ...o) => e.onItemSelected?.(t.slice(1), ...o),
            onItemClosed: t => e.onItemClosed?.(t.slice(1))
        };

      case "Select":
      case "SelectWithLabels":
        {
            const t = (e.type === "SelectWithLabels" ? e.label : undefined) ?? n("Dropdown.asMenuItem.label");
            return {
                overflowPriority: l,
                responsiveSetId: i,
                menuItems: [ {
                    text: e.menuItemText ?? t,
                    subSections: e.values ? [ {
                        items: e.values.reduce(((t, {text: o}, n) => o ? [ ...t, {
                            text: o,
                            checked: e.selectedIndex === n
                        } ] : t), [])
                    } ] : [],
                    disabled: e.disabled,
                    testId: e.testId
                } ],
                onSelected: t => {
                    if (t.length < 2) return;
                    const o = t[1][1];
                    if (e.selectedIndex === o) {
                        if (e.unselectedValue) {
                            e.onSelected?.(undefined);
                        }
                    } else {
                        e.onSelected?.(o);
                    }
                }
            };
        }

      case "SegmentedButton":
        return {
            overflowPriority: l,
            responsiveSetId: i,
            menuItems: e.values.map(((t, o) => {
                const n = _1(t);
                const a = typeof n === "string" ? n : r(n).tooltip ?? "";
                return {
                    text: e.menuItemText?.[o] ?? a,
                    icon: typeof n === "string" ? undefined : n.icon,
                    checked: e.selectedIndex === o,
                    disabled: D1(t) || e.disabled,
                    testId: gb(e.testId, `button-${o}`)
                };
            })),
            onSelected: t => {
                e.onSelectedIndex(t[0][1]);
            }
        };

      case "SplitButton":
        return {
            overflowPriority: l,
            responsiveSetId: i,
            menuItems: e.items.map(((t, o) => {
                const n = typeof t === "string" ? t : t.text;
                return {
                    text: e.menuItemText?.[o] ?? n,
                    disabled: e.disabled,
                    testId: gb(e.testId, `item-${o}`)
                };
            })),
            onSelected: t => {
                e.onItemSelected(t[0][1]);
            }
        };

      case "SearchField":
      case "SearchFieldWithLabels":
        {
            const t = (e.type === "SearchFieldWithLabels" ? e.label : undefined) ?? (e.filterMode ? n("SearchField.filterMode.asMenuItem.label") : n("SearchField.asMenuItem.label"));
            return {
                overflowPriority: l,
                responsiveSetId: i,
                menuItems: [ {
                    text: e.menuItemText ?? t,
                    disabled: e.disabled,
                    testId: e.testId
                } ],
                onSelected: () => ({
                    index: o,
                    title: e.filterMode ? n("SearchField.filterMode.asDialog.title") : n("SearchField.asDialog.title"),
                    renderContent: e => {
                        if (e.type !== "SearchField" && e.type !== "SearchFieldWithLabels") return;
                        return Xee(e);
                    }
                })
            };
        }

      case "HelpPopup":
        return {
            overflowPriority: l,
            responsiveSetId: i,
            menuItems: [ {
                text: e.menuItemText ?? n("HelpPopup.asMenuItem.label"),
                disabled: e.disabled,
                testId: e.testId
            } ],
            onSelected: () => ({
                index: o,
                title: n("HelpPopup.asDialog.title"),
                renderContent: e => {
                    if (e.type !== "HelpPopup") return;
                    const {overflowPriority: o, menuItemText: n, ...a} = e;
                    return t(dP, a);
                }
            })
        };

      case "Input":
      case "InputWithLabels":
        {
            const t = (e.type === "InputWithLabels" ? e.label : undefined) ?? n("Input.asMenuItem.label");
            return {
                overflowPriority: l,
                responsiveSetId: i,
                menuItems: [ {
                    text: e.menuItemText ?? t,
                    disabled: e.disabled,
                    testId: e.testId
                } ],
                onSelected: () => ({
                    index: o,
                    title: n("Input.asDialog.title"),
                    renderContent: e => {
                        if (e.type !== "Input" && e.type !== "InputWithLabels") return;
                        return Xee(e);
                    }
                })
            };
        }

      case "ComboBox":
      case "ComboBoxWithLabels":
        {
            const t = (e.type === "ComboBoxWithLabels" ? e.label : undefined) ?? n("ComboBox.asMenuItem.label");
            return {
                overflowPriority: l,
                responsiveSetId: i,
                menuItems: [ {
                    text: e.menuItemText ?? t,
                    disabled: e.disabled,
                    testId: e.testId
                } ],
                onSelected: () => ({
                    index: o,
                    title: n("ComboBox.asDialog.title"),
                    renderContent: e => {
                        if (e.type !== "ComboBox" && e.type !== "ComboBoxWithLabels") return;
                        return Xee(e);
                    }
                })
            };
        }

      case "SwitchWithLabels":
        {
            return {
                overflowPriority: l,
                responsiveSetId: i,
                menuItems: [ {
                    text: e.menuItemText ?? e.label,
                    checked: e.isOn,
                    disabled: e.disabled,
                    testId: e.testId
                } ],
                onSelected: () => {
                    e.onPress?.(!e.isOn);
                }
            };
        }

      case "Checkbox":
        return {
            overflowPriority: l,
            responsiveSetId: i,
            menuItems: [ {
                text: e.menuItemText ?? e.label ?? n("Checkbox.asMenuItem.label"),
                checked: e.checked,
                disabled: e.disabled,
                testId: e.testId
            } ],
            onSelected: e.onPress
        };

      case "ToggleButton":
        {
            const t = e.icon ? r(e.icon) : {};
            return {
                overflowPriority: l,
                responsiveSetId: i,
                menuItems: [ {
                    text: e.menuItemText ?? e.text ?? t.tooltip ?? n("ToggleButton.asMenuItem.label"),
                    checked: e.pressed ?? false,
                    disabled: e.disabled,
                    testId: e.testId
                } ],
                onSelected: e.onPress ? () => {
                    e.onPress?.();
                } : undefined
            };
        }

      case "ObjectMarker":
        const c = e.text ?? h1(e.objectMarkerType, a).labelText;
        return {
            overflowPriority: l,
            responsiveSetId: i,
            menuItems: [ {
                text: e.menuItemText ?? c,
                disabled: e.disabled,
                testId: e.testId
            } ],
            onSelected: () => ({
                index: o,
                title: c,
                renderContent: e => {
                    if (e.type !== "ObjectMarker") return;
                    return t(nte, {
                        content: e.popperText ?? ""
                    });
                }
            })
        };

      case "UndoRedo":
        {
            const {undoProps: t, redoProps: o} = wee(e.actionManager);
            return {
                overflowPriority: l,
                responsiveSetId: i,
                menuItems: [ {
                    text: e.menuItemText?.[0] ?? n("UndoRedo.undo.asMenuItem.label"),
                    disabled: t.disabled,
                    subSections: t.disabled ? undefined : t.sections,
                    testId: gb(e.testId, "undoButton")
                }, {
                    text: e.menuItemText?.[1] ?? n("UndoRedo.redo.asMenuItem.label"),
                    disabled: o.disabled,
                    subSections: o.disabled ? undefined : o.sections,
                    testId: gb(e.testId, "redoButton")
                } ],
                onSelected: (e, ...n) => {
                    const a = e[0][1] === 0;
                    if (a) {
                        t.onItemSelected(e.slice(1), ...n);
                    } else {
                        o.onItemSelected(e.slice(1), ...n);
                    }
                }
            };
        }

      case "FileUploader":
        {
            if (!e.buttonOnly) {
                return {
                    overflowPriority: l,
                    responsiveSetId: i
                };
            }
            const t = r({
                icon: e.icon ?? MR
            });
            return {
                overflowPriority: l,
                responsiveSetId: i,
                menuItems: [ {
                    text: e.menuItemText ?? e.buttonText ?? t.tooltip ?? "",
                    disabled: e.disabled,
                    testId: e.testId
                } ],
                onSelected: () => {
                    wJ(e);
                }
            };
        }

      case "ToolbarSeparator":
      case "ToolbarSpacer":
        return {
            overflowPriority: l,
            responsiveSetId: i
        };

      default:
        return {
            overflowPriority: l,
            responsiveSetId: i
        };
    }
};

const ite = (e, t) => {
    const o = ate();
    const a = E1();
    const s = JA();
    const [i, l] = n(0);
    const c = r((() => e.map(((e, n) => ste({
        item: e,
        index: n,
        localize: o,
        objectMarkerLocalize: a,
        getIconA11yInfo: s,
        responsiveSetsConfig: t
    })))), [ s, e, o, a, t, i ]);
    const d = r((() => {
        const t = [];
        for (const o of e) {
            if (o.type !== "UndoRedo") {
                continue;
            }
            t.push(o.actionManager);
        }
        return t;
    }), [ e ]);
    See(d, (() => {
        l((e => e + 1));
    }));
    return c;
};

const lte = (e, t, o, n) => {
    const a = t?.clientWidth ?? 0;
    if (a === 0) return 0;
    const r = cte(e, o);
    let s = 0;
    for (const e of n ?? []) {
        if (!e.current) continue;
        const t = e.current?.clientWidth ?? 0;
        s += t;
        const o = parseInt(getComputedStyle(e.current).minWidth);
        if (o > 0) {
            s -= o;
        }
    }
    return a - r + s;
};

const cte = (e, t) => {
    let o = 0;
    for (const [n, a] of t.entries()) {
        if (e[n]?.type === "ToolbarSpacer") continue;
        o += a ? ute(a) : 0;
    }
    return Math.ceil(o);
};

const dte = e => {
    const {marginLeft: t, marginRight: o} = getComputedStyle(e);
    return e.offsetWidth + parseFloat(t) + parseFloat(o);
};

const ute = e => {
    const t = getComputedStyle(e);
    const o = parseInt(t.minWidth);
    if (!o) return dte(e);
    const n = e.style.width;
    const a = e.style.flexBasis;
    e.style.width = "0px";
    e.style.flexBasis = "";
    let r = 0;
    for (const t of e.children) {
        r += dte(t);
    }
    e.style.width = n;
    e.style.flexBasis = a;
    return Math.max(o, r) + parseFloat(t.marginLeft) + parseFloat(t.marginRight);
};

const mte = (e, t) => {
    let o = -1;
    let n = -1;
    let a = -1;
    for (const [r, s] of e.entries()) {
        if (t.includes(r)) continue;
        switch (s) {
          case "low":
            n = n < 0 ? r : Math.max(n, r);
            break;

          case "high":
            o = o < 0 ? r : Math.max(o, r);
            break;

          case "disappear":
            a = a < 0 ? r : Math.max(a, r);
            break;
        }
    }
    return a >= 0 ? a : n >= 0 ? n : o;
};

const pte = (e, t) => {
    let o = -1;
    let n = -1;
    let a = -1;
    for (const r of t) {
        switch (e[r]) {
          case "low":
            o = o < 0 ? r : Math.min(o, r);
            break;

          case "high":
            n = n < 0 ? r : Math.min(n, r);
            break;

          case "disappear":
            a = a < 0 ? r : Math.min(a, r);
            break;
        }
    }
    return n >= 0 ? n : o >= 0 ? o : a;
};

const fte = e => {
    switch (e.type) {
      case "BadgeButton":
      case "Button":
      case "PredefinedButton":
      case "MenuButton":
      case "Select":
      case "SelectWithLabels":
      case "SwitchWithLabels":
      case "SegmentedButton":
      case "Checkbox":
      case "UndoRedo":
      case "ToggleButton":
        return e.overflowPriority ?? "low";

      case "BaseMenuButton":
        if (e.sections.some(qO)) {
            return "never";
        } else {
            return e.overflowPriority ?? "low";
        }

      case "FileUploader":
        if (e.buttonOnly) return e.overflowPriority ?? "low";
        return "never";

      case "ObjectMarker":
        return e.popperText ? e.overflowPriority ?? "never" : "never";

      case "SearchField":
      case "SearchFieldWithLabels":
      case "HelpPopup":
      case "SplitButton":
      case "Input":
      case "InputWithLabels":
      case "ComboBox":
      case "ComboBoxWithLabels":
        return e.overflowPriority ?? "never";

      case "DatePicker":
      case "DatePickerWithLabels":
      case "ToolbarSeparator":
      case "ToolbarSpacer":
      case "Heading":
      case "FileUploaderWithLabels":
      case "Breadcrumb":
        return "never";

      default:
        return "never";
    }
};

const gte = e => e.reduce(((e, t, o) => t === "always" ? [ ...e, o ] : e), []).map((e => ({
    index: e,
    width: 0
})));

const hte = ({items: e, overflowed: t, prevMinimalStateItems: o, availableWidth: n, itemContainers: a, responsiveSets: r}) => {
    if (n <= 0) {
        const n = bte(e, t, o);
        if (n.length === 0) return o;
        const s = n[n.length - 1];
        const i = r.find((e => e.includes(s))) ?? [ s ];
        const l = i.filter((e => n.includes(e) && !o.find((({index: t}) => t === e))));
        return [ ...o, ...l.map((e => ({
            index: e,
            originalWidth: a[e]?.clientWidth ?? 0
        }))) ];
    } else {
        o.sort((({index: e}, {index: t}) => e - t));
        const e = [];
        for (const t of o) {
            if (e.includes(t.index)) continue;
            const s = r.find((e => e.includes(t.index))) ?? [ t.index ];
            const i = o.filter((e => s.includes(e.index)));
            const l = i.reduce(((e, t) => {
                const o = a[t.index]?.clientWidth ?? 0;
                const n = t.originalWidth - o;
                return e + n;
            }), 0);
            if (n <= l) break;
            n -= l;
            e.push(...s);
        }
        return e.length === 0 ? o : o.filter((({index: t}) => !e.includes(t)));
    }
};

const bte = (e, t, o) => {
    const n = t.map((({index: e}) => e));
    const a = o.map((({index: e}) => e));
    return e.reduce(((e, t, o) => !n.includes(o) && !a.includes(o) && vte(t) ? [ ...e, o ] : e), []);
};

const vte = e => {
    switch (e.type) {
      case "PredefinedButton":
        return e.type === "PredefinedButton" && e.iconOnly === undefined;

      case "Button":
      case "ToggleButton":
        return e.text !== undefined && e.text.length > 0 && e.icon !== undefined;

      case "FileUploader":
        return !!e.buttonOnly && !e.iconOnly && !!e.icon && (e.buttonText ?? "").length > 0;

      default:
        return false;
    }
};

const yte = e => {
    const t = new Map;
    for (const [o, {responsiveSetId: n}] of e.entries()) {
        if (!n) continue;
        if (!t.get(n)) {
            t.set(n, []);
        }
        t.get(n)?.push(o);
    }
    return Array.from(t.values());
};

var xte = "sas_components-Toolbar-__internal__-ToolbarSpacer_toolbar-spacer";

var Ste = {
    toolbarSpacer: xte
};

const wte = e => t("div", {
    "data-testid": e.testId,
    className: ke(Ste.toolbarSpacer, e.className),
    style: e.style
});

var Cte = "sas_components-Toolbar-__internal__-ToolbarSeparator_toolbar-separator";

var Ete = {
    toolbarSeparator: Cte
};

const Ite = e => {
    const o = C_();
    const n = {
        bg: o.tokensExperimental["color-container-border-4"]
    };
    const a = I_(n, "toolbar-separator");
    return t("div", {
        "data-testid": e.testId,
        style: {
            ...a,
            ...e.style
        },
        className: ke(Ete.toolbarSeparator, e.className)
    });
};

const _te = e => {
    const o = r((() => {
        const t = e.helpPopup ? [ ...e.items, {
            type: "HelpPopup",
            ...e.helpPopup
        } ] : e.items;
        return t.map((e => {
            if (e.type === "ToggleButton") {
                return {
                    ...e,
                    icon: e.text ? undefined : e.icon,
                    textToDrop: undefined
                };
            }
            return e;
        }));
    }), [ e.helpPopup, e.items ]);
    return t(Hee, Ee({}, e, {
        items: o
    }));
};

fb(Kt);

var Dte = {
    name: "novacmneua-gui-eua",
    comments: [ "#" ],
    messages: {
        "novacmneua-gui-eua.settings.regionalFormatLocale.help.tip.txt": "Help",
        "novacmneua-gui-eua.settings.offlineLocale.help.content.txt": '<section class\\="xis-topicContent"><p class\\="xis-paragraph">This setting provides the locale that is used for offline jobs or background processes such as report distributions or notifications. The default setting is the locale of the Java Runtime Environment.</p></section>',
        "novacmneua-gui-eua.settings.offlineLocale.help.tip.txt": "Help",
        "novacmneua-gui-eua.settings.a11yEnableVisualEffects.help.content.txt": '<section class\\="xis-topicContent"><p class\\="xis-paragraph">Enable this setting to show visual effects that indicate state changes. For example, when this setting is enabled, you will see a subtle movement in the user interface if you delete an item.</p></section>',
        "novacmneua-gui-eua.settings.a11yEnableVisualEffects.help.tip.txt": "Help",
        "novacmneua-gui-eua.whatsnew.usage.help.content.txt": '<section class\\="xis-topicContent"><p class\\="xis-paragraph">The What\'s New window lists critical changes and spotlight features for the current product by release. </p><p class\\="xis-paragraph">To reopen this window, click the user button in the application bar. </p></section>',
        "novacmneua-gui-eua.whatsnew.usage.help.tip.txt": "Help",
        "novacmneua-gui-eua.settings.theme.help.tip.txt": "Help",
        "novacmneua-gui-eua.settings.a11yEnableSounds.help.tip.txt": "Help",
        "novacmneua-gui-eua.settings.theme.help.content.txt": '<section class\\="xis-topicContent"><p class\\="xis-paragraph">This setting enables you to change the appearance of the web applications. The theme specifies the collection of colors, graphics, and fonts that appear in the application. </p><p class\\="xis-paragraph">The default theme is set by an administrator. You can choose from other themes, including both SAS themes and custom themes, if they are supported. The theme change takes effect immediately.</p><div class\\="xis-note"><span class\\="xis-noteGenText">Note\\:</span>SAS themes and custom themes are separated by a horizontal separator line. SAS themes appear at the top.</div><div class\\="xis-paragraph">SAS themes\\: <div class\\="xis-listTermDef"><dl class\\="xis-termDefPair"><dt class\\="xis-term"><span class\\="xis-windowItem">High Contrast</span></dt><dd class\\="xis-definition"><p class\\="xis-paraSimple">Presents a dark background with high-contrast foreground elements to meet the needs of some users with low vision.</p></dd></dl><dl class\\="xis-termDefPair"><dt class\\="xis-term"><span class\\="xis-windowItem">Ignite</span></dt><dd class\\="xis-definition"><p class\\="xis-paraSimple">Presents an all-dark color palette with a dark-blue background and white text.</p></dd></dl><dl class\\="xis-termDefPair"><dt class\\="xis-term"><span class\\="xis-windowItem">Illuminate</span></dt><dd class\\="xis-definition"><p class\\="xis-paraSimple">Presents a clean and uncomplicated color palette that is easy to use.</p></dd></dl><dl class\\="xis-termDefPair"><dt class\\="xis-term"><span class\\="xis-windowItem">Inspire</span></dt><dd class\\="xis-definition"><p class\\="xis-paraSimple">Presents vibrant and cohesive colors that shift the emphasis from the application to the content.</p></dd></dl></div></div><p class\\="xis-paragraph">For information about creating and working with SAS themes, see <span class\\="xis-xrefBookTitle"><a data-help-docset\\="themedesignug" data-help-topic\\="titlepage" data-help-pubcode\\="77876" target\\="_blank" rel\\="noopener noreferrer"><i>SAS Theme Designer\\: User’s Guide</i></a></span>.</p></section>',
        "novacmneua-gui-eua.settings.regionalFormatLocale.help.content.txt": '<section class\\="xis-topicContent"><p class\\="xis-paragraph">This setting provides the locale that is used for sorting data and formatting values such as dates, times, numbers, and currency. The default setting is the browser locale.</p></section>',
        "novacmneua-gui-eua.settings.a11yEnableSounds.help.content.txt": '<section class\\="xis-topicContent"><p class\\="xis-paragraph">Enable this setting to hear audio indicators for events that occur within the user interface.</p></section>'
    }
};

const Lte = "NOVA_TAB";

let Tte = function(e) {
    e["Standard"] = "standard";
    e["PrimaryLight"] = "primary-light";
    return e;
}({});

var Rte = "sas_components-TabBar-__internal__-dnd-Dnd_draggable";

var kte = "sas_components-TabBar-__internal__-dnd-Dnd_dragged-item";

var Ate = "sas_components-TabBar-__internal__-dnd-Dnd_drag-over";

var Mte = "sas_components-TabBar-__internal__-dnd-Dnd_drop-line";

var Nte = "sas_components-TabBar-__internal__-dnd-Dnd_place-at-end";

var Ote = "sas_components-TabBar-__internal__-dnd-Dnd_v-drop-line";

var Pte = {
    draggable: Rte,
    draggedItem: kte,
    dragOver: Ate,
    dropLine: Mte,
    placeAtEnd: Nte,
    vDropLine: Ote
};

const Bte = e => {
    const o = c(null);
    const {useDrag: n, useDrop: r, getEmptyImage: s} = nX();
    const i = $B({
        source: OB.InputFull
    });
    const l = e.index;
    const [{isDragging: d}, u, m] = n({
        type: e.type,
        item: {
            id: e.id,
            type: e.type,
            index: e.index,
            dndPrefix: e.dndPrefix
        },
        canDrag: e.allowDrag,
        collect: e => ({
            isDragging: e.isDragging()
        }),
        end: (t, o) => {
            const n = o.getDropResult();
            if (!n) {
                i.play();
                e.onFocus?.();
            } else if (n && t && n.type !== t.type) {
                e.onDragEnd?.({
                    draggdItem: t,
                    dragIndex: t.index,
                    monitor: o
                });
            }
        }
    });
    const [{styleClassName: p, collectMonitor: f}, g] = r({
        accept: e.acceptDropTypes,
        canDrop: () => e.allowDrop,
        drop: (t, o) => {
            if (!o.didDrop()) {
                if (e.dndPrefix === t.dndPrefix) {
                    if (t.index !== e.index) e.reorderTabs?.(t.index, e.index);
                } else {
                    e.onDrop?.({
                        droppedItem: t,
                        dropIndex: e.index,
                        monitor: o
                    });
                }
                return {
                    type: e.type
                };
            }
        },
        collect(t) {
            const o = t.getItem()?.index;
            const n = t.getItem()?.dndPrefix;
            let a = "";
            if (t.isOver() && t.canDrop()) {
                if (e.droppableContent.length && e.droppableContent.includes(t.getItem()?.type)) {
                    a = Pte.dragOver;
                } else if (!d && (o > e.index || n !== e.dndPrefix)) {
                    a = ke(e.orientation === "vertical" ? Pte.vDropLine : Pte.dropLine);
                } else if (o < e.index && !d) {
                    a = ke(e.orientation === "vertical" ? Pte.vDropLine : Pte.dropLine, Pte.placeAtEnd);
                }
            }
            return {
                styleClassName: a,
                collectMonitor: t
            };
        }
    });
    a((() => {
        let t;
        const o = {
            overIndex: l,
            monitor: f,
            droppedItem: f.getItem(),
            droppableType: "TAB"
        };
        if (f.isOver()) {
            t = setTimeout((() => {
                e.onDragOver?.(o);
            }), 0);
        } else {
            e.onDragLeave?.(o);
        }
        return () => {
            if (t) clearTimeout(t);
        };
    }), [ p ]);
    a((() => {
        m(s(), {
            captureDraggingState: true
        });
    }), [ m, s ]);
    const h = C_();
    const b = IQ(h);
    u(g(o));
    return t("div", {
        ref: o,
        style: b,
        className: ke(e.allowDrag && Pte.draggable, d && Pte.draggedItem, p)
    }, e.children);
};

const zte = e => {
    const {useDragLayer: o} = nX();
    const {itemType: n, item: a} = o((e => ({
        item: e.getItem(),
        itemType: e.getItemType()
    })));
    const r = C_();
    const s = koe(r, {
        alternate: false,
        variant: Tte.Standard
    });
    const i = () => {
        if (!a || a.dndPrefix !== e.dndPrefix) return null;
        switch (n) {
          case e.dragType:
            return e.children(a.index);

          default:
            return null;
        }
    };
    return t(RQ, {
        style: s
    }, i());
};

var Fte = "sas_components-TabBar-__internal__-Tab_drop-zone";

var jte = "sas_components-TabBar-__internal__-Tab_droppable";

var Vte = "sas_components-TabBar-__internal__-Tab_horizontal";

var Hte = "sas_components-TabBar-__internal__-Tab_bar";

var Ute = "sas_components-TabBar-__internal__-Tab_tab";

var Gte = "sas_components-TabBar-__internal__-Tab_icon";

var Kte = "sas_components-TabBar-__internal__-Tab_selected";

var Wte = "sas_components-TabBar-__internal__-Tab_tab-inner";

var $te = "sas_components-TabBar-__internal__-Tab_alternate";

var Yte = "sas_components-TabBar-__internal__-Tab_content-list";

var qte = "sas_components-TabBar-__internal__-Tab_standard-small";

var Xte = "sas_components-TabBar-__internal__-Tab_tab-icon";

var Zte = "sas_components-TabBar-__internal__-Tab_text";

var Jte = "sas_components-TabBar-__internal__-Tab_disabled";

var Qte = "sas_components-TabBar-__internal__-Tab_read-only";

var eoe = "sas_components-TabBar-__internal__-Tab_collapsed";

var toe = "sas_components-TabBar-__internal__-Tab_icon-button";

var ooe = "sas_components-TabBar-__internal__-Tab_with-menu";

var noe = "sas_components-TabBar-__internal__-Tab_with-closable";

var aoe = "sas_components-TabBar-__internal__-Tab_open";

var roe = "sas_components-TabBar-__internal__-Tab_add-button-container";

var soe = "sas_components-TabBar-__internal__-Tab_tab-over-flow";

var ioe = "sas_components-TabBar-__internal__-Tab_end-of-tabBar";

var loe = "sas_components-TabBar-__internal__-Tab_vertical";

var coe = "sas_components-TabBar-__internal__-Tab_toolbar";

var doe = "sas_components-TabBar-__internal__-Tab_toolbarInlineSpacing";

var uoe = "sas_components-TabBar-__internal__-Tab_stretch-to-fit";

var moe = "sas_components-TabBar-__internal__-Tab_indicator";

var poe = "sas_components-TabBar-__internal__-Tab_tab-list-height-auto";

var foe = "sas_components-TabBar-__internal__-Tab_place-end";

var goe = "sas_components-TabBar-__internal__-Tab_tab-icon-only";

var hoe = "sas_components-TabBar-__internal__-Tab_icon-only";

var boe = "sas_components-TabBar-__internal__-Tab_icon-button-container";

var voe = "sas_components-TabBar-__internal__-Tab_add-button";

var yoe = "sas_components-TabBar-__internal__-Tab_tab-overflow-button";

var xoe = "sas_components-TabBar-__internal__-Tab_expand-collapse-button";

var Soe = "sas_components-TabBar-__internal__-Tab_align-start";

var woe = "sas_components-TabBar-__internal__-Tab_expanded";

var Coe = "sas_components-TabBar-__internal__-Tab_align-end";

var Eoe = "sas_components-TabBar-__internal__-Tab_dragableTab";

var Ioe = {
    dropZone: Fte,
    droppable: jte,
    horizontal: Vte,
    bar: Hte,
    tab: Ute,
    icon: Gte,
    selected: Kte,
    tabInner: Wte,
    alternate: $te,
    contentList: Yte,
    standardSmall: qte,
    tabIcon: Xte,
    text: Zte,
    disabled: Jte,
    readOnly: Qte,
    collapsed: eoe,
    iconButton: toe,
    withMenu: ooe,
    withClosable: noe,
    open: aoe,
    addButtonContainer: roe,
    tabOverFlow: soe,
    endOfTabBar: ioe,
    vertical: loe,
    toolbar: coe,
    toolbarInlineSpacing: doe,
    stretchToFit: uoe,
    indicator: moe,
    tabListHeightAuto: poe,
    placeEnd: foe,
    tabIconOnly: goe,
    iconOnly: hoe,
    iconButtonContainer: boe,
    addButton: voe,
    tabOverflowButton: yoe,
    expandCollapseButton: xoe,
    alignStart: Soe,
    expanded: woe,
    alignEnd: Coe,
    dragableTab: Eoe
};

const _oe = fb(Wt);

const Doe = MA("TabBar-tab");

const Loe = MA("TabBar-dndPrefix");

const Toe = MA("Tab-aria-description");

const Roe = u((function e(i, l) {
    const {useDrop: d} = nX();
    const u = _oe();
    const m = i.visualStyle === "alternative";
    const p = i.variant ?? Tte.Standard;
    const f = i.themeTransition === true;
    const h = w_();
    const {tokenOverrides: b, onItemSelected: v, focusedIndex: y = 0, setFocusedIndex: x} = i;
    const S = i.orientation ?? "horizontal";
    const w = i.placement ?? "start";
    const C = i.stretchToFit ?? false;
    const E = S === "vertical";
    const I = i.renderTabToolbar;
    const _ = i.role ? i.role : !i.addNewTabButtonProps && !i.expandCollapseProps && !i.onTabMenuItemSelect ? undefined : "group";
    const D = ay();
    const L = Toe();
    const [T, R] = n(false);
    const [k, A] = n(false);
    const [M, N] = n(0);
    const [O, P] = n(0);
    const [B, z] = n(0);
    const [F, j] = n(0);
    const {refs: V, createSetRef: H} = uU();
    g(l, (() => ({
        ...ee.current,
        focus: () => {
            if (V && V[i.selectedIndex]) {
                setTimeout((() => {
                    V[i.selectedIndex]?.focus();
                }), 0);
            }
        }
    })));
    const U = i.expandCollapseProps?.expandTooltip ?? u("tabBar.default.expanded.label");
    const G = i.expandCollapseProps?.collapseTooltip ?? u("tabBar.default.collapsed.label");
    const K = i.expandCollapseProps?.expandAriaLabel ?? U;
    const W = i.expandCollapseProps?.collapseAriaLabel ?? G;
    const $ = i.overflowMenuButtonPosition ?? "endOfTabList";
    const Y = Loe();
    const q = i.dndPrefix ?? Y;
    const X = i.dragType ?? Lte;
    const Z = i.dropTypes?.tabs ?? [ Lte ];
    const J = i.dropTypes?.content ?? [];
    const Q = Array.from(new Set([ X, ...Z, ...J ]));
    const ee = c(null);
    const te = c(null);
    const oe = c(null);
    const ne = c(null);
    const ae = C_();
    const {density: re} = YA();
    const se = {
        ...koe(ae, {
            alternate: m,
            variant: p,
            tokenOverrides: b,
            density: re
        }),
        ...i.theme?.(ae, {
            alternate: m,
            variant: p
        })
    };
    const ie = IQ(ae);
    const le = s(((e, t) => {
        de(true);
        v({
            index: e,
            item: t
        });
        x(e);
    }), [ v, x ]);
    const [ce, de] = n(false);
    const [ue, me] = n(i.selectedIndex < 0 ? y : i.selectedIndex);
    const pe = r((() => i.items.some((e => e.allowDrag))), [ i.items ]);
    const fe = i.editable || i.items.some((e => e.closable || e.menuSections && e.menuSections.length > 0));
    const ge = i.items.every((e => e.closable));
    const he = k_(i.items);
    const be = I_({
        "stretched-width": !T && te.current && i.stretchToFit ? `${Math.floor(te.current.clientWidth / i.items.length)}px` : undefined
    }, "tab-item");
    const ve = $B({
        source: OB.InputFull
    });
    a((() => {
        if (i.selectedIndex > -1) {
            x(i.selectedIndex);
        }
    }), [ i.selectedIndex, x ]);
    a((() => {
        if (!qI(he) && he.length !== i.items.length) {
            me(i.selectedIndex);
            const e = setTimeout((() => {
                if (i.selectedIndex > -1) x(i.selectedIndex);
            }), 0);
            de(true);
            return () => {
                clearTimeout(e);
            };
        }
    }), [ he, i.items, i.selectedIndex, x ]);
    const ye = e => {
        const t = i.items.length;
        if (t <= 0) {
            return;
        }
        let o = true;
        const n = e.ctrlKey;
        const a = e.shiftKey;
        const r = i.items[ue].allowDrag;
        const s = i.items[ue].disabled;
        switch (e.key) {
          case "ArrowDown":
          case D ? "ArrowLeft" : "ArrowRight":
            if (qI(y) || n && a && !r) {
                x(y);
            } else {
                if (y < t - 1) {
                    if (n && a && r && !s) {
                        i.reorderTabs?.(ue, y + 1);
                    }
                    x(y + 1);
                } else {
                    if (n && a && r && !s) {
                        i.reorderTabs?.(ue, y);
                    }
                    x(y);
                    if (y + 1 === t) ve.play();
                }
            }
            break;

          case "ArrowUp":
          case D ? "ArrowRight" : "ArrowLeft":
            if (qI(y) || n && a && !r) {
                x(y);
            } else {
                if (y > 0) {
                    if (n && a && r && !s) {
                        i.reorderTabs?.(ue, y - 1);
                    }
                    x(y - 1);
                } else {
                    if (n && a && r && !s) {
                        i.reorderTabs?.(ue, y);
                    }
                    x(y);
                    if (y === 0) ve.play();
                }
            }
            break;

          case "Home":
            if (n && a && r && !s) {
                i.reorderTabs?.(ue, 0);
            }
            x(0);
            if (y === 0) ve.play();
            break;

          case "End":
            if (n && a && r && !s) {
                i.reorderTabs?.(ue, t - 1);
            }
            x(t - 1);
            if (y + 1 === t) ve.play();
            break;

          case " ":
          case "Enter":
            if (!i.items[y].disabled) v?.({
                index: y,
                item: i.items[y]
            });
            break;

          case "PageUp":
            x(0);
            if (y === 0) ve.play();
            break;

          case "PageDown":
            x(t - 1);
            if (y + 1 === t) ve.play();
            break;

          default:
            o = false;
            break;
        }
        if (o) {
            e.preventDefault();
        }
    };
    const {onBlur: xe, onFocus: Se} = JI((() => {
        de(false);
        i.selectedIndex > -1 && x(i.selectedIndex);
    }));
    const we = e => e === y;
    const Ce = Doe(i.items.length);
    const Ie = i.items.map((({id: e}, t) => e ?? Ce[t]));
    const _e = e => {
        me(e);
        i.onItemSelected({
            index: e,
            item: i.items[e]
        });
    };
    const De = e => {
        i.onTabClose?.(e);
    };
    const [{isOverFlowMenu: Le}, Te] = d({
        accept: Q,
        canDrop: () => false,
        collect(e) {
            let t = false;
            if (e.isOver() && e.getItem().dndPrefix !== q && !J.includes(e.getItem()?.type)) {
                t = true;
            }
            return {
                isOverFlowMenu: t
            };
        }
    });
    const Re = e => {
        if (i.allowDrop) {
            let t = false;
            if (e.canDrop() && e.isOver() && !T && !J.includes(e.getItem()?.type)) {
                const o = B + O;
                if (!E && e.getItem().dndPrefix !== q) {
                    if (D && e.getClientOffset().x < o) {
                        t = true;
                    } else if (!D && e.getClientOffset().x > o) {
                        t = true;
                    }
                } else if (E && e.getItem().dndPrefix !== q && e.getClientOffset().y > o) {
                    t = true;
                }
            }
            A(t);
        }
    };
    const [{}, Ae] = d({
        accept: Q,
        canDrop: e => e.dndPrefix !== q ? i.allowDrop ?? true : false,
        drop: (e, t) => {
            if (!Le && !T && !t.didDrop() && q !== e.dndPrefix && !J.includes(t.getItem()?.type) && !t.getDropResult()?.isBaseScrollableButtons) {
                i.onDrop?.({
                    droppedItem: e,
                    dropIndex: i.items.length,
                    monitor: t
                });
            }
        },
        collect(e) {
            Re(e);
            return {};
        },
        hover: (e, t) => {
            Re(t);
        }
    });
    Ae(ee);
    const [{isOverTabBarScrollable: Me}, Ne] = d({
        accept: Q,
        canDrop: e => e.dndPrefix !== q ? i.allowDrop ?? true : false,
        collect(e) {
            let t = false;
            if (i.allowDrop && e.isOver() && !T && !J.includes(e.getItem()?.type)) {
                t = true;
            }
            return {
                isOverTabBarScrollable: t
            };
        }
    });
    Ne(te);
    const [{isOverAddTabBtn: Oe, newTabDropMonitor: Pe}, Be] = d({
        accept: Q,
        canDrop: e => e.dndPrefix !== q ? i.allowDrop ?? true : false,
        drop: (e, t) => {
            if (!t.didDrop() && q !== e.dndPrefix) {
                i.onDrop?.({
                    droppedItem: e,
                    dropIndex: i.items.length,
                    monitor: t
                });
            }
        },
        collect(e) {
            let t = false;
            if (e.isOver() && e.getItem().dndPrefix !== q) {
                t = true;
            }
            return {
                isOverAddTabBtn: t,
                newTabDropMonitor: e
            };
        }
    });
    const ze = r((() => i.items.some((e => !e.label))), [ i.items ]);
    const Fe = r((() => {
        let e = false;
        if (E) {
            e = true;
            if (i.expandCollapseProps && i.expandCollapseProps?.isExpanded === false) {
                e = false;
            }
        }
        return e;
    }), [ E, i.expandCollapseProps ]);
    a((() => {
        const e = {
            droppedItem: Pe.getItem(),
            monitor: Pe,
            droppableType: "ADD_BUTTON"
        };
        if (Oe) {
            i.onDragOver?.(e);
        } else {
            i.onDragLeave?.(e);
        }
    }), [ Oe ]);
    Be(oe);
    const je = e => {
        const t = Ge(i.overflowMenuButtonDisplay ?? "never", T);
        return t && e === $ ? M : 0;
    };
    const Ve = I_({
        "start-position": D ? `${je("endOfTabBar")}px` : `calc(${B}px + ${O}px + ${je("endOfTabList")}px - ${F}px)`,
        "end-position": D ? `calc(${F}px - ${B}px + ${O}px + ${je("endOfTabList")}px)` : `${je("endOfTabBar")}px`
    }, "drop-zone");
    const He = I_({
        "start-position": `calc(${B}px + ${O}px + ${je("endOfTabList")}px )`,
        "end-position": `${je("endOfTabBar")}px`
    }, "drop-zone");
    function Ue() {
        const e = i.overflowMenuButtonTooltip ?? u("tabBar.overflowMenuButton.label");
        const o = i.overflowMenuButtonAriaLabel ?? e;
        let n = false;
        const a = {
            items: i.items.map(((e, t) => {
                if (e.label) {
                    n = true;
                }
                return {
                    text: e.label ?? e.icon?.tooltip ?? "",
                    checked: t === i.selectedIndex,
                    closable: !!e.closable,
                    closeIconTooltip: i.closeTabButtonTooltip,
                    icon: e.icon
                };
            }))
        };
        const r = n && Fe;
        const s = {
            testId: gb(i.testId, "overflowMenu"),
            icon: {
                icon: ck
            },
            text: r ? u("tabBar.overflowMenuButton.label") : undefined,
            tooltip: !r ? e : undefined,
            ariaLabel: !r ? o : undefined
        };
        const l = {
            ...s,
            variant: oN.Icon,
            hideDownArrow: true,
            sections: [ a ],
            onItemSelected: e => {
                _e(e[0][1]);
            },
            onItemClosed: e => De(e[0][1])
        };
        Te(ne);
        return t("div", {
            ref: e => {
                if (e) {
                    ne.current = e;
                    const t = E ? e.getBoundingClientRect().height : e.getBoundingClientRect().width;
                    N(t);
                }
            },
            className: ke(Ioe.tabOverFlow, i.overflowMenuButtonDisplay && $ === "endOfTabBar" && Ioe.endOfTabBar)
        }, i.renderOverflowMenuButton ? i.renderOverflowMenuButton(s, {
            onItemSelected: _e,
            onItemClosed: De,
            items: i.items,
            selectedIndex: i.selectedIndex
        }) : t(MJ, Ee({
            menuAlign: {
                horizontalAlign: "end"
            },
            className: Ioe.tabOverflowButton
        }, l)));
    }
    function Ge(e, t) {
        switch (e) {
          case "always":
            return true;

          case "onVisibleScrollbar":
            return t;

          default:
            return false;
        }
    }
    function Ke() {
        const e = Ge(i.overflowMenuButtonDisplay ?? "never", T);
        return t(o, null, !qI(i.renderAddNewTabButton) && t("div", {
            className: Ioe.addButtonContainer
        }, i.renderAddNewTabButton({
            icon: {
                icon: vL
            }
        })), qI(i.renderAddNewTabButton) && !qI(i.addNewTabButtonProps) && t("div", {
            ref: e => {
                if (e) {
                    oe.current = e;
                    const t = E ? e.getBoundingClientRect().height : e.getBoundingClientRect().width;
                    P(t);
                }
            },
            className: Ioe.addButtonContainer
        }, t(QM, Ee({
            testId: gb(i.testId, "addNewTabBtn"),
            icon: {
                icon: vL
            },
            variant: oN.Light,
            className: ke(Ioe.addButton, Oe && Ioe.dropZone),
            onPress: () => {
                i.addNewTabButtonProps?.onPress();
            }
        }, i.addNewTabButtonProps.ariaLabel && S !== "vertical" && !ze && !Fe && {
            ariaLabel: i.addNewTabButtonProps.ariaLabel
        }, i.addNewTabButtonProps.title && S !== "vertical" && !ze && !Fe && {
            tooltip: i.addNewTabButtonProps.title
        }, S === "vertical" && !ze && Fe && {
            text: u("tabBar.newTabButton.label")
        }))), e && Ue(), E && !qI(i.expandCollapseProps) && t(QM, {
            testId: gb(i.testId, "expandCollapseBtn"),
            className: ke(Ioe.expandCollapseButton, w === "end" ? Ioe.alignStart : Ioe.alignEnd, i.expandCollapseProps.isExpanded && Ioe.expanded),
            tooltip: i.expandCollapseProps.isExpanded ? U : G,
            ariaLabel: i.expandCollapseProps.isExpanded ? K : W,
            icon: {
                icon: w === "start" && !i.expandCollapseProps.isExpanded || w === "end" && i.expandCollapseProps.isExpanded ? DR : _R
            },
            onPress: i.expandCollapseProps.onExpand,
            variant: oN.Light
        }));
    }
    function We() {
        const e = i.items.every((e => e.allowDrag));
        const o = fe;
        let n = "";
        if (o && e) {
            n = `${u("tab.editLabelMessage.aria")} ${u("tabs.rearranged.message.aria")}`;
        } else if (o) {
            n = u("tab.editLabelMessage.aria");
        } else if (e) {
            n = u("tabs.rearranged.message.aria");
        }
        const a = i.items.map(((e, o) => t(m_, {
            key: o,
            inverseTheme: o === i.selectedIndex && f && m || h
        }, e.allowDrag || i.allowDrop ? Ye(o, e) : $e(o, e))));
        const r = t("div", {
            ref: e => {
                if (e) {
                    ee.current = e;
                    const t = E ? e.querySelector("ul")?.getBoundingClientRect().height ?? 0 : D ? e.querySelector("ul")?.getBoundingClientRect().left ?? 0 : e.querySelector("ul")?.getBoundingClientRect().right ?? 0;
                    z(t);
                    j(D ? ee?.current?.getBoundingClientRect().right ?? 0 : ee?.current?.getBoundingClientRect().left ?? 0);
                }
            },
            style: {
                ...se,
                ...i.allowDrop && ie,
                ...!E && Ve,
                ...E && He,
                ...be,
                ...i.style
            },
            className: ke(E ? Ioe.vertical : Ioe.horizontal, E && !qI(i.expandCollapseProps) && !i.expandCollapseProps.isExpanded && Ioe.collapsed, E && w === "end" && Ioe.placeEnd, C && !T && Ioe.stretchToFit, k && !Oe && !Le && !Me && Ioe.droppable, (i.addNewTabButtonProps || i.overflowMenuButtonDisplay && $ === "endOfTabList") && Ioe.tabListHeightAuto, i.className),
            role: _,
            "aria-label": i.ariaLabel,
            "data-landmark-label": i.landmarkLabel
        }, E && i.headerElement?.(), !E && I && t("div", {
            style: {
                width: i.toolbarWidth
            },
            className: ke(!(i.overflowMenuButtonDisplay && $ === "endOfTabBar") && Ioe.toolbarInlineSpacing, Ioe.toolbar)
        }, I()), t(hX, {
            itemRefs: V,
            ref: e => {
                D_(l, e);
                te.current = e;
            },
            acceptDropTypes: Q,
            orientation: S,
            currentIndex: ue,
            setCurrentIndex: me,
            className: ke(Ioe.bar, i.className),
            contentClassName: Ioe.contentList,
            testId: i.testId,
            selectedIndex: i.selectedIndex,
            hideScrollButtons: E,
            contentProps: {
                onKeyDown: ye,
                onBlur: xe,
                onFocus: () => {
                    if (!ce) {
                        de(true);
                    }
                    Se();
                },
                role: "tablist",
                "aria-owns": Ie.join(" "),
                "aria-orientation": S
            },
            contentAriaDescribedBy: n !== "" ? L : undefined,
            onOverflowChange: R
        }, a), t(bO, {
            id: L
        }, n), Ke(), t(zte, {
            dragType: X,
            dndPrefix: q
        }, (e => $e(e, i.items[e]))));
        return r;
    }
    function $e(e, n) {
        if (n === undefined) {
            return t(o, null);
        }
        return t(Zoe, Ee({
            ref: H(e),
            altId: i.altId,
            key: e
        }, n, {
            id: Ie[e],
            selected: e === i.selectedIndex,
            visualStyle: i.visualStyle,
            variant: i.variant,
            onPress: () => le(e, n),
            onClose: () => {
                i.onTabClose?.(e);
            },
            isExpanded: i.expandCollapseProps?.isExpanded,
            onCloseAll: i.onTabCloseAll,
            testId: n.testId ?? gb(i.testId, `tab${e}`),
            stretchToFitTab: C && !T,
            maxTabWidth: !E ? i.maxTabWidth : undefined,
            closeTabButtonTooltip: i.closeTabButtonTooltip,
            closeTabButtonkeyboardTooltip: i.closeTabButtonkeyboardTooltip,
            hideCloseAllTabOption: !i.hideCloseAllTabOption && ge,
            showContextMenu: fe,
            menuButtonTooltip: i.menuButtonTooltip,
            location: m && !E ? "top" : E ? w === "end" ? "left" : "right" : "bottom",
            orientation: i.orientation,
            tokenOverrides: i.tabOverrides
        }, !qI(n.menuSections) && {
            menuProps: {
                menuSections: n.menuSections,
                onMenuItemSelect: (t, o) => i.onTabMenuItemSelect?.(e, {
                    ...n,
                    menuSections: o
                }, t),
                onOpen: () => {
                    i.onTabMenuOpen?.(e, n);
                }
            }
        }, {
            closeTabMenuItemText: i.closeTabMenuItemText,
            closeAllTabMenuItemText: i.closeAllTabMenuItemText,
            renameMenuItemPosition: i.renameMenuItemPosition,
            showRenameMenuOption: i.showRenameMenuOption,
            showCloseMenuOption: i.showCloseMenuOption,
            focused: ce && e === y,
            tabIndex: we(e) ? 0 : -1,
            editable: i.editable,
            onLabelChange: (t, o) => i.onTabLabelChange?.(e, n, t, o),
            onFocus: () => {
                me(e);
                if (e !== y) {
                    x(e);
                }
            },
            allowDrag: n.allowDrag,
            movableTab: pe
        }));
    }
    function Ye(e, o) {
        return t(Bte, {
            id: Ie[e],
            type: X,
            index: e,
            dndPrefix: q,
            reorderTabs: i.reorderTabs,
            allowDrop: !!i.allowDrop,
            allowDrag: o.disabled === true ? false : !!o.allowDrag,
            acceptDropTypes: Q,
            droppableContent: J,
            onDragEnd: i.onDragEnd,
            onDrop: i.onDrop,
            onFocus: () => {
                me(y);
                if (e !== y) {
                    x(y);
                }
            },
            orientation: i.orientation,
            onDragOver: e => i.onDragOver?.(e),
            onDragLeave: e => i.onDragLeave?.(e)
        }, o && $e(e, o));
    }
    return We();
}));

const koe = (e, t) => {
    const o = t?.variant === Tte.PrimaryLight;
    let n;
    switch (e.themeVariant) {
      case "dark":
        n = {
            bd: !t?.alternate ? e.tokensExperimental["color-container-border-4"] : undefined
        };
        break;

      case "high-contrast":
        n = {
            bd: e.tokensExperimental["color-container-border-4"]
        };
        break;

      default:
        if (o) {
            n = {
                bd: !t?.alternate ? Jv(e.tokensExperimental["color-action-icon-emphasis-normal"], .25) : undefined
            };
        } else {
            n = {
                bd: !t?.alternate ? e.tokensExperimental["color-container-border-4"] : undefined
            };
        }
    }
    const a = t?.density === "high" ? {
        "item-spacing": e.tokensExperimental["space-squish-s"],
        "item-inline-start": e.tokensExperimental["space-base-null"]
    } : {
        "item-spacing": e.tokensExperimental["space-squish-m"],
        "item-inline-start": e.tokensExperimental["space-base-xs"]
    };
    return {
        ...__({
            ...n,
            ...a,
            "bd-bottom-width": e.tokensExperimental["size-border-width-s"],
            "spacing-squish-s": e.tokensExperimental["space-squish-s"],
            "spacing-squish-m": e.tokensExperimental["space-squish-m"],
            "spacing-xs": e.tokensExperimental["space-inline-xs"],
            "spacing-s": e.tokensExperimental["space-inline-s"],
            "spacing-m": e.tokensExperimental["space-base-m"]
        }, "tab-bar"),
        ...t?.tokenOverrides?.(e, {
            alternate: t?.alternate,
            variant: t?.variant
        }),
        ...!e.enableNovaTokens && Aoe(e, t)
    };
};

const Aoe = (e, t) => {
    let o;
    switch (e.themeVariant) {
      case "dark":
        o = {
            bd: !t?.alternate ? e.c.white15 : undefined,
            "bd-bottom-width": !t?.alternate ? "1px" : 0
        };
        break;

      case "high-contrast":
        o = {
            bd: e.c.white,
            "bd-bottom-width": "1px"
        };
        break;

      default:
        o = {
            bd: !t?.alternate ? e.c.n2 : undefined,
            "bd-bottom-width": !t?.alternate ? "1px" : 0
        };
    }
    return {
        ...__(o, "tab-bar"),
        ...t?.tokenOverrides?.(e, {
            alternate: t?.alternate,
            variant: t?.variant
        })
    };
};

var Moe = "sas_components-Indicator-Indicator_container";

var Noe = "sas_components-Indicator-Indicator_processing";

var Ooe = "sas_components-Indicator-Indicator_alert";

var Poe = "sas_components-Indicator-Indicator_hidden";

var Boe = "sas_components-Indicator-Indicator_ready";

var zoe = "sas_components-Indicator-Indicator_count";

var Foe = {
    container: Moe,
    processing: Noe,
    alert: Ooe,
    hidden: Poe,
    ready: Boe,
    count: zoe
};

const joe = fb($t);

const Voe = e => t("span", {
    "aria-hidden": "true",
    className: ke(Foe.container, e.className),
    "data-testid": e.testId,
    style: e.style
}, e.content);

const Hoe = ({className: e, count: o, testId: n, type: a, ...r}) => {
    const s = jD(L_.PLAY_VISUAL_EFFECTS) === "true";
    const i = C_();
    const l = {
        ...I_(Uoe(i, s), "indicator")
    };
    const c = {
        ...l,
        ...r.style
    };
    const d = joe();
    const u = 3;
    const m = !!r.maxDigits && r.maxDigits > 0 && r.maxDigits <= 3 ? r.maxDigits : u;
    const p = Math.pow(10, m);
    const f = o !== undefined && o < p ? o : `${p - 1}+`;
    switch (a) {
      case "processing":
        return t(Voe, {
            className: e,
            content: t(MM, {
                className: Foe.processing,
                icon: zk,
                tooltip: d("processing.label"),
                color: "informational"
            }),
            style: c,
            testId: n
        });

      case "alert":
        return t(Voe, {
            className: ke(Foe.alert, e),
            content: "!",
            style: c,
            testId: n
        });

      case "unsaved":
        return t(Voe, {
            className: e,
            content: "*",
            style: c,
            testId: n
        });

      case "readOnly":
        return t(Voe, {
            className: e,
            content: d("readOnly.label"),
            style: c,
            testId: n
        });

      case "hidden":
        return t(Voe, {
            className: ke(Foe.hidden, e),
            content: t(MM, {
                icon: QT,
                tooltip: r.tooltip ?? d("hidden.label")
            }),
            style: c,
            testId: n
        });

      case "ready":
        return t(Voe, {
            className: ke(Foe.ready, e),
            content: "•",
            style: c,
            testId: n
        });

      case "count":
        return o !== undefined ? t(Voe, {
            className: ke(Foe.count, e),
            content: `${f}`,
            style: c,
            testId: n
        }) : null;

      case "error":
        return t(Voe, {
            className: e,
            content: t(MM, {
                icon: Yk,
                tooltip: r.tooltip
            }),
            style: c,
            testId: n
        });
    }
};

const Uoe = (e, t) => ({
    "processing-anim-duration": e.tokensExperimental["duration-700"],
    "processing-anim-iteration-count": t ? "infinite" : 0,
    "alert-fg": e.tokensExperimental["color-status-text-alert"],
    "hidden-fg": e.tokensExperimental["color-body-icon"],
    "ready-fg": e.tokensExperimental["color-status-text-info"],
    fg: e.tokensExperimental["color-body-text"],
    "font-size-m": e.tokensExperimental["font-size-body-text-m"],
    "count-fg": e.tokensExperimental["color-text-neutral-inverse"],
    "count-bg": e.tokensExperimental["color-status-icon-neutral"],
    "count-font-size": e.tokensExperimental["font-size-body-text-xxxs"],
    "count-bd-radius": e.tokensExperimental["size-border-radius-s"],
    "count-padding": e.tokensExperimental["space-base-xs"]
});

const Goe = fb(Wt);

const Koe = MA("TabBar-label");

const Woe = MA("TabBar-icon");

const $oe = MA("Tab-state");

const Yoe = MA("Tab-close");

const qoe = MA("Tab-non-movable");

const Xoe = dU(SH);

const Zoe = u((function e(r, s) {
    const i = Goe();
    const l = c(null);
    const d = c(null);
    const u = c(null);
    const m = c(null);
    const p = r.selected;
    const f = r.tokenOverrides;
    const g = r.visualStyle === "alternative";
    const h = r.visualStyle === "standard-small";
    const b = r.variant ?? Tte.Standard;
    const v = r.orientation ?? "horizontal";
    const y = r.hidden;
    const x = r.state ? r.state : y ? "hidden" : undefined;
    const S = r.count ?? undefined;
    const w = r.count?.toString();
    const C = r.hideTabMenuButton;
    const E = 25;
    const I = r.maxTabWidth ?? E;
    const _ = C_();
    const {getActionsByKeyEvent: D} = MD();
    const L = !qI(x) && !Array.isArray(x) ? [ x ] : x ?? [];
    const [T, R] = n(false);
    const [k, A] = n(r.label);
    const [M, N] = n(false);
    const [O, P] = n();
    const B = r.label ?? "";
    const z = Number(i("tabBar.minimumCharactersTab.lcl"));
    const F = i("tab.contextMenu.Rename.label");
    const j = r.closeTabMenuItemText ?? i("tab.closeTabMenuItem.label");
    const V = r.closeAllTabMenuItemText ?? i("tab.closeAllTabMenuItem.label");
    const H = r.renameMenuItemPosition ?? 0;
    const U = r.showRenameMenuOption ?? true;
    const G = r.showCloseMenuOption ?? true;
    const K = r.hideCloseAllTabOption;
    const W = r.showContextMenu;
    const $ = WA({
        tooltip: r.labelTooltip,
        truncateRef: m
    });
    const {density: Y} = YA();
    const q = {
        ...Joe(_, {
            alternate: g,
            variant: b,
            tokenOverrides: f,
            orientation: v,
            standardSmall: h,
            selected: p,
            minTabWidth: z,
            density: Y
        }),
        ...r.theme?.(_)
    };
    const X = Koe();
    const Z = Woe();
    const J = $oe(L.length);
    const Q = Yoe();
    const ee = qoe();
    const te = [];
    const oe = r.icon?.ariaLabel ?? r.icon?.tooltip;
    const ne = r.ariaLabel ?? r.label;
    const ae = r.isExpanded ?? true;
    if (r.icon && oe && (oe !== r.label || !ae)) {
        te.push(oe);
    }
    if (r.label && ne && ae) {
        te.push(ne);
    }
    const re = [];
    if (L.length > 0) {
        re.splice(0, 0, ...J);
    }
    if (r.closable) {
        re.push(Q);
    }
    if (!r.allowDrag && r.movableTab) {
        re.push(ee);
    }
    if (r.ariaDescribedBy) {
        re.push(r.ariaDescribedBy);
    }
    const se = JA();
    const ie = r.icon ? se(r.icon).tooltip : undefined;
    const le = r.closeTabButtonkeyboardTooltip ?? i("tab.closeButtonMessage.aria");
    const ce = () => {
        let e = "";
        const t = m.current && UA(m.current);
        let o = "";
        if (t) {
            if (r.labelTooltip && r.label !== r.labelTooltip) {
                o = `${r.label}, ${r.labelTooltip}`;
            } else if (r.label) {
                o = r.label;
            }
        } else if (r.labelTooltip) {
            o = r.labelTooltip;
        }
        if (ie) {
            e = ie;
        }
        if (ie && r.label) {
            if (r.labelTooltip && r.labelTooltip !== "" && r.labelTooltip !== r.label) {
                e += `, ${r.label}, ${r.labelTooltip}`;
            } else if (e !== r.label) {
                e += `, ${r.label}`;
            }
        } else {
            e += o;
        }
        if (r.editable || r.closable || r.menuProps) {
            if (e.length > 0) {
                e += `\n\n${i("tab.contextMenuMessage.tooltip.label")}`;
            } else {
                e = i("tab.contextMenuMessage.tooltip.label");
            }
        }
        if (r.closable) {
            e += `\n${le}`;
        }
        if (r.allowDrag && !r.disabled) {
            if (e.length > 0) {
                e += `\n${i("tab.movable.shortcutKey.tooltip.label")}`;
            } else {
                e = i("tab.movable.shortcutKey.tooltip.label");
            }
        }
        return e;
    };
    const de = fO({
        getTooltip: ce
    });
    const ue = () => {
        const e = [ ...r.menuProps?.menuSections ?? [] ];
        if (r.editable && U && r.label && r.label.length > 0) {
            const t = H < 0 || e.length <= H ? 0 : H;
            e.splice(t, 0, {
                items: [ {
                    text: F
                } ]
            });
        }
        if (r.closable && G) {
            e.push({
                items: [ {
                    text: j
                } ]
            });
        }
        if (r.closable && K) {
            e.push({
                items: [ {
                    text: V
                } ]
            });
        }
        return e;
    };
    const me = e => {
        const t = ve?.[e[0][0]].items[e[0][1]].text;
        if (r.editable && e[0][0] === H) {
            N(!M);
            R(!!r.editable);
        } else if (t === V) {
            r.onCloseAll?.();
        } else if (r.closable && t === j) {
            r.onClose?.();
        } else if (r.menuProps) {
            r.menuProps?.onMenuItemSelect(e, ve);
        }
    };
    const {handleDismiss: pe, handlePress: fe, setMenuIsOpen: ge, menuIsOpen: he} = ZO({
        disabled: false,
        onDismiss: () => {
            l.current?.focus();
            ge(false);
        },
        onOpen: () => {
            if (r.menuProps && r.menuProps.onOpen) {
                r.menuProps.onOpen();
            }
            P(undefined);
        }
    });
    a((() => {
        const e = document.querySelector("[data-testid^='tab-contextMenu']");
        if (r.focused) {
            if (T) {
                d.current?.focus();
            } else if (e === null) {
                l.current?.focus();
            }
        }
    }), [ r.focused, T ]);
    a((() => {
        A(undefined);
    }), [ T ]);
    function be(e) {
        return e.target === u.current || u.current?.contains(e.target);
    }
    const ve = ue();
    const ye = Array.isArray(x) ? x?.includes("hidden") || x?.includes("processing") : x === "processing" || x === "hidden";
    const xe = !r.label && v === "vertical" ? false : Array.isArray(x) ? x?.includes("readOnly") : x === "readOnly";
    const Se = I_({
        "max-width": `${Math.min(I, E)}rem`
    }, "tab");
    const we = () => t(o, null, t("div", Ee({
        id: r.id,
        "data-altid": r.altId,
        className: ke(Ioe.tab, r.menuProps && !C && Ioe.withMenu, !r.label && Ioe.iconOnly, r.selected && !r.disabled && Ioe.selected, g && Ioe.alternate, h && Ioe.standardSmall, r.closable && Ioe.withClosable, r.disabled && Ioe.disabled, r.allowDrag && Ioe.dragableTab, r.className),
        style: {
            ...q,
            ...Se,
            ...r.style
        },
        onClick: e => {
            if (!e.isDefaultPrevented() && !be(e) && !r.disabled) {
                r.onPress?.();
                if (M) {
                    A(undefined);
                    N(false);
                }
            }
        },
        onDoubleClick: () => {
            if (r.editable && !r.disabled && !M && r.label?.length) {
                N(true);
                R(true);
            }
        },
        onKeyDown: e => {
            const {actions: t} = D(e.nativeEvent);
            if (e.target !== e.currentTarget && !t.includes("openLandmarks")) {
                e.stopPropagation();
            }
            if (e.key === "Delete" && r.closable && !r.disabled && !M) {
                r.onClose?.();
            }
        },
        "data-testid": r.testId,
        "data-sasrc-tablocation": r.location || "top",
        tabIndex: r.tabIndex,
        ref: e => {
            D_(s, e);
            l.current = e;
            de(e);
            if (r.allowDrag && !r.labelTooltip) {
                $(e);
            }
        }
    }, r.allowDrag && r.labelTooltip && {
        title: r.labelTooltip
    }, {
        onFocus: r.onFocus,
        onBlur: e => {
            if (he) {
                e.stopPropagation();
            }
        },
        role: "tab",
        "aria-selected": r.selected,
        "aria-label": te.join(", "),
        "aria-disabled": !!r.disabled,
        "aria-controls": r.ariaControls,
        "aria-describedby": re.join(" ")
    }), t("div", {
        className: Ioe.tabInner
    }, r.icon && !ye && t("span", {
        className: ke(Ioe.tabIcon, !r.label && Ioe.tabIconOnly)
    }, t(MM, Ee({}, r.icon, {
        className: ke(Ioe.icon, r.icon.className),
        tokens: () => ({
            "default-fg": r.disabled ? undefined : "var(--tab-fg)",
            fg: r.disabled ? "var(--tab-disabled-fg)" : undefined
        }),
        style: {
            "--icon-height": Y === "high" ? _.tokensExperimental["font-size-body-text-s"] : _.tokensExperimental["font-size-body-text-m"],
            "--icon-width": Y === "high" ? _.tokensExperimental["font-size-body-text-s"] : _.tokensExperimental["font-size-body-text-m"]
        },
        id: Z,
        ariaLabel: oe
    }))), L.map(((e, n) => t(o, {
        key: e
    }, e !== "readOnly" && t(o, null, t(Hoe, {
        key: e,
        type: e,
        count: e === "count" ? S : undefined,
        maxDigits: v === "vertical" ? 1 : r.maxDigits ?? 3,
        className: Ioe.indicator,
        testId: gb(r.testId, `state-${e}`),
        tooltip: e === "hidden" ? i("tab.hidden.ariaLabel.aria") : undefined
    }), t(bO, {
        id: J[n]
    }, e === "count" && w ? w : i(`tab.${e}.ariaLabel.aria`)))))), r.label && r.label.length > 0 && t(o, null, t(BP, {
        testId: gb(r.testId, "text"),
        id: X,
        wrapText: false,
        className: Ioe.text,
        ref: e => {
            $(e);
            D_(m, e);
        }
    }, r.label), t(zO, {
        referenceElementRef: l,
        isOpen: M,
        onClose: () => N(false),
        onEscape: () => R(false),
        role: "dialog",
        ariaLabel: i("tab.popover.ariaLabel.aria"),
        onOutsideClick: () => {
            A(undefined);
            R(false);
        }
    }, t(Xoe, {
        testId: gb(r.testId, "input"),
        label: i("tab.popover.inputLabelName.label"),
        labelPosition: "left",
        fieldSuffixMinWidth: 0,
        inputStyle: {
            maxWidth: "25rem"
        },
        fieldWidth: "16rem",
        fieldMinWidth: "3rem",
        ref: d,
        value: T ? k ?? B : B,
        onChange: e => {
            A(e.value);
            r.onLabelChange?.(e.value, "Change");
        },
        onCommit: e => {
            if (e?.reason !== "blur") {
                A(e.value === "" ? B : e.value);
                r.onLabelChange?.(e.value, "Commit");
                R(false);
                N(false);
            }
        },
        onCancel: () => {
            A(undefined);
            r.onLabelChange?.(B ?? "", "Cancel");
            R(false);
            N(false);
        },
        message: r.message,
        status: r.status
    }))), xe && t(o, {
        key: "readOnly"
    }, t(Hoe, {
        key: "readOnly",
        type: "readOnly",
        className: ke(Ioe.indicator, Ioe.readOnly),
        testId: gb(r.testId, `state-${"readOnly"}`)
    }), t(bO, {
        id: `${J}`
    }, i(`tab.${"readOnly"}.ariaLabel.aria`))), !qI(r.menuProps) && !C && t(o, null, t("span", {
        className: Ioe.iconButtonContainer
    }, t(MM, {
        icon: OR,
        ref: u,
        testId: gb(r.testId, "menuBtn"),
        tooltip: r.menuButtonTooltip ?? i("tab.menuButton.tooltip.label"),
        ariaHidden: true,
        ariaLabel: "",
        tabIndex: -1,
        onDoubleClick: e => {
            e.preventDefault();
            e.stopPropagation();
        },
        onClick: fe,
        disabled: r.disabled,
        className: ke(Ioe.iconButton, he && Ioe.open),
        tokens: () => ({
            fg: r.disabled ? "var(--tab-disabled-fg)" : "var(--tab-fg)"
        })
    })), t(Hz, {
        isOpen: he,
        sections: ve,
        onItemSelected: e => {
            me(e);
            ge(false);
        },
        position: {
            dockingElement: u.current
        },
        onDismiss: pe,
        defaultFocusLocation: O
    })), r.closable && (!r.menuProps || C) && t(o, null, t(bO, {
        id: Q
    }, i("tab.closeButtonMessage.aria")), t("span", {
        className: Ioe.iconButtonContainer
    }, t(MM, {
        testId: gb(r.testId, "closebutton"),
        icon: cT,
        tooltip: r.closeTabButtonTooltip ?? i("tab.closeButton.tooltip.label"),
        disabled: r.disabled,
        tabIndex: -1,
        ariaHidden: true,
        onPress: () => {
            r.onClose?.();
        },
        onClick: e => e.stopPropagation(),
        className: Ioe.iconButton,
        tokens: () => ({
            fg: r.disabled ? "var(--tab-disabled-fg)" : "var(--tab-fg)"
        })
    }))))), !r.allowDrag && r.movableTab && t(bO, {
        id: ee
    }, i("tab.not.movable.message.aria")));
    return W && !r.disabled && ve.length > 0 ? t(bee, {
        testId: "tab-contextMenu",
        sections: ve,
        onItemSelected: e => me(e),
        onContextMenu: r.menuProps?.onOpen
    }, we()) : we();
}));

const Joe = (e, t) => {
    const o = {
        selected: t?.selected ?? false,
        alternate: t?.alternate ?? false,
        standardSmall: t?.standardSmall ?? false,
        variant: t?.variant ?? Tte.Standard,
        orientation: t?.orientation ?? "horizontal",
        density: t?.density
    };
    const n = o.variant === Tte.PrimaryLight;
    let a = "var(--focus-light-bg)";
    let r;
    if (e.enableNovaTokens && n && e.themeVariant === "light" && !(o.alternate && o.selected)) {
        a = "var(--focus-dark-bg)";
    }
    const s = {
        bg: o.alternate && o.selected ? e.tokensExperimental["color-container-background-0"] : e.tokensExperimental["color-action-background-subtle-normal"],
        fg: o.selected ? e.tokensExperimental["color-text-primary"] : e.tokensExperimental["color-text-neutral"],
        "count-indicator-fg": e.tokensExperimental["color-text-neutral-inverse"],
        "icon-indicator-fg": e.tokensExperimental["color-action-icon-subtle-selected"],
        bd: e.tokensExperimental["color-container-border-4"],
        "hover-bg": o.selected || o.orientation === "vertical" ? undefined : e.tokensExperimental["color-action-background-subtle-hover"],
        "selected-indicator": e.tokensExperimental["color-primary"],
        "disabled-bg": "var(--tab-bg)",
        "disabled-fg": e.tokensExperimental["color-action-text-subtle-disabled"],
        "indicator-content": '""',
        "indicator-width": e.tokensExperimental["size-border-width-s"],
        "editable-hover-bd": "var(--tab-fg)",
        focus: a,
        "selected-focus": e.themeVariant === "high-contrast" ? "var(--focus-dark-bg)" : a,
        "trans-duration": e.tokensExperimental["duration-400"],
        "trans-tf-ease-in-out": e.tokensExperimental["ease-in-out"]
    };
    const i = t?.density === "high" ? {
        "spacing-tab-items": e.tokensExperimental["space-squish-s"],
        "spacing-items-start": e.tokensExperimental["space-base-null"],
        "item-font-size": e.tokensExperimental["font-size-body-text-s"],
        "item-min-height": "1.92rem"
    } : {
        "spacing-tab-items": e.tokensExperimental["space-squish-m"],
        "spacing-items-start": e.tokensExperimental["space-base-s"],
        "item-font-size": e.tokensExperimental["font-size-body-text-m"],
        "item-min-height": "2.52rem"
    };
    switch (e.themeVariant) {
      case "dark":
        r = {
            ...s,
            "hover-bg": o.selected || o.orientation === "vertical" ? undefined : Jv(e.tokensExperimental["color-action-background-subtle-hover"], .25)
        };
        break;

      case "high-contrast":
        r = {
            ...s,
            bd: o.alternate ? e.tokensExperimental["color-container-border-4"] : "transparent",
            "hover-bg": o.selected || o.orientation === "vertical" ? undefined : Jv(e.tokensExperimental["color-action-background-subtle-hover"], .15),
            "indicator-width": e.tokensExperimental["size-border-width-l"]
        };
        break;

      default:
        if (n) {
            r = {
                ...s,
                fg: o.alternate && o.selected ? e.tokensExperimental["color-action-text-subtle-normal"] : e.tokensExperimental["color-action-text-emphasis-normal"],
                "hover-bg": o.selected || o.orientation === "vertical" ? undefined : Jv(e.tokensExperimental["color-action-icon-emphasis-normal"], .15),
                "selected-indicator": o.alternate ? e.tokensExperimental["color-action-icon-subtle-selected"] : e.tokensExperimental["color-action-icon-emphasis-normal"],
                "disabled-bg": e.tokensExperimental["color-container-background-0"],
                "disabled-fg": e.tokensExperimental["color-action-text-emphasis-disabled"]
            };
        }
    }
    const l = {
        ...s,
        ...r,
        ...i,
        "animation-duration": e.tokensExperimental["duration-100"],
        "animation-timing-function": e.tokensExperimental["ease-in-out"],
        "item-font-weight": e.tokensExperimental["font-style-weight-400"],
        "font-size-s": e.tokensExperimental["font-size-body-text-s"],
        "icon-hover-fg": e.tokensExperimental["color-action-icon-subtle-hover"],
        "icon-hover-bg": e.tokensExperimental["color-action-background-subtle-hover"],
        "icon-active-fg": e.tokensExperimental["color-action-icon-subtle-selected"],
        "icon-active-bg": e.tokensExperimental["color-action-background-subtle-selected"],
        "space-inline-s": e.tokensExperimental["space-inline-s"],
        "icon-squish-s": e.tokensExperimental["space-squish-s"],
        "min-width": `${t?.minTabWidth}ch`,
        "icon-active-filter": o.orientation === "vertical" && o.selected && e.themeVariant === "high-contrast" ? "invert(1) grayscale(1)" : "none",
        ...t?.tokenOverrides ? {
            "hover-bg": undefined
        } : undefined,
        ...t?.tokenOverrides?.(e, o)
    };
    return {
        ...__(l, "tab"),
        ...!e.enableNovaTokens && Qoe(e, t)
    };
};

const Qoe = (e, t) => {
    const o = "var(--focus-light-bg)";
    let n;
    let a;
    const r = {
        selected: t?.selected ?? false,
        alternate: t?.alternate ?? false,
        standardSmall: t?.standardSmall ?? false,
        variant: t?.variant ?? Tte.Standard,
        orientation: t?.orientation ?? "horizontal"
    };
    switch (e.baseReportThemeName) {
      case "highcontrast2018":
      case "highcontrast2017":
        a = {
            bg: t?.alternate && t?.selected ? e.c.black : t?.orientation === "vertical" && t?.selected ? e.stateStandard.selected.bg : "transparent",
            fg: t?.orientation === "vertical" && t?.selected ? e.c.black : e.c.white,
            bd: t?.alternate ? e.c.white : "transparent",
            "selected-indicator": t?.alternate ? e.c.white : e.c.hcStandardSelected,
            "disabled-bg": "var(--tab-bg)",
            "disabled-fg": e.stateStandard.disabled.fg,
            "indicator-content": t?.alternate ? "none" : '""',
            "indicator-width": "3px",
            focus: o,
            "editable-hover-bd": "var(--tab-fg)"
        };
        break;
    }
    switch (e.themeVariant) {
      case "dark":
        n = {
            bg: t?.alternate && t?.selected ? e.c.p_3 : t?.orientation === "vertical" && t.selected ? e.stateStandard.selected.bg : "transparent",
            fg: t?.orientation === "vertical" && t?.selected ? e.stateStandard.selected.fg : e.c.white,
            bd: "transparent",
            "selected-indicator": e.c.white,
            "disabled-bg": "var(--tab-bg)",
            "disabled-fg": e.stateStandard.disabled.fg,
            "indicator-content": '""',
            "indicator-width": "1px",
            focus: o,
            "hover-bg": e.c.white20,
            "editable-hover-bd": "var(--tab-fg)"
        };
        break;

      case "high-contrast":
        n = {
            bg: t?.alternate && t?.selected ? e.stateStandard.normal.bg : t?.orientation === "vertical" && t?.selected ? e.stateStandard.selected.bg : "transparent",
            fg: t?.orientation === "vertical" && t?.selected ? e.stateStandard.selected.fg : e.stateStandard.normal.fg,
            bd: e.stateStandard.normal.bd,
            "selected-indicator": e.stateStandard.normal.fg,
            "disabled-bg": "var(--tab-bg)",
            "disabled-fg": e.stateStandard.disabled.fg,
            "indicator-content": t?.alternate ? "none" : '""',
            "indicator-width": "3px",
            focus: o,
            "hover-bg": e.c.n_4,
            "editable-hover-bd": "var(--tab-fg)"
        };
        break;

      default:
        n = {
            bg: t?.alternate && t?.selected ? e.c.white : t?.orientation === "vertical" && t?.selected ? e.stateStandard.selected.bg : "transparent",
            fg: t?.orientation === "vertical" && t?.selected ? e.stateStandard.selected.fg : e.c.n_3,
            "count-indicator-fg": e.c.colorTextInverse,
            "icon-indicator-fg": e.c.black,
            "disabled-bg": e.stateStandard.disabled.bg,
            "disabled-fg": e.stateStandard.disabled.fg,
            bd: "transparent",
            "selected-indicator": e.c.n_3,
            "indicator-content": '""',
            "indicator-width": "1px",
            focus: o,
            "hover-bg": Jv(e.c.n1, .2),
            "editable-hover-bd": "var(--tab-fg)"
        };
    }
    return {
        ...__({
            ...n,
            ...a,
            "item-font-size": e.font.size.m,
            "item-font-weight": e.font.weight.default,
            "font-size-s": e.font.size.s,
            "icon-hover-fg": e.stateStandard.hover.fg,
            "icon-hover-bg": e.stateStandard.hover.bg,
            "icon-active-fg": e.stateStandard.active.fg,
            "icon-active-bg": e.stateStandard.active.bg,
            "icon-active-filter": r.orientation === "vertical" && r.selected && e.themeVariant === "high-contrast" ? "invert(1) grayscale(1)" : e.stateStandard.normal.filter,
            ...t?.tokenOverrides ? {
                "hover-bg": undefined
            } : undefined,
            ...t?.tokenOverrides?.(e, r)
        }, "tab")
    };
};

const ene = u((function e(o, a) {
    const [r, s] = n(o.selectedIndex < 0 ? 0 : o.selectedIndex);
    return t(Roe, Ee({
        ref: a,
        focusedIndex: r,
        setFocusedIndex: s
    }, o));
}));

Gh("NovaComponents-Tab-gui-icu").then((e => {}));

const tne = [ "#000000", "#545B66", "#B0B7C2", "#E9ECEF", "#FFFFFF", "#2470AD", "#2C8AD6", "#33A3FF", "#7DC3FC", "#C7E3F9", "#434FAC", "#585CD6", "#6D69FF", "#ACB0FF", "#D2D4FF", "#17785F", "#16976D", "#15B57B", "#43D09D", "#71EBBF", "#84414B", "#B14C51", "#DD5757", "#E99596", "#F4D3D4", "#985B30", "#CC6F2A", "#FF8224", "#FFAE70", "#FFD9BC", "#98863C", "#CCA937", "#FFCC32", "#FCDD7C", "#F9EDC6" ];

const one = () => {
    const e = ay();
    const t = db();
    return s(((o, n) => e && ([ "ar", "ar-xx", "he", "iw" ].includes(t.toLowerCase()) || n?.forceLtrDir) ? VN(o) : o), [ e, t ]);
};

const nne = fb(Yt);

const ane = e => {
    const t = one();
    const o = nne();
    const n = tne.includes(e.color);
    const a = !n ? t(e.color, {
        forceLtrDir: e.type === "custom"
    }) : `${o(`color.${e.color.slice(1)}.title`)} (${t(e.color)})`;
    const r = e.color !== zre ? e.type === "nocolor" ? undefined : e.type === "automatic" ? o(`automatic.title`, {
        color: a
    }) : a : undefined;
    const s = !n ? e.color.split("").join(" ") : `${o(`color.${e.color.slice(1)}.aria`)} (${e.color.split("").join(" ")})`;
    const i = e.color !== zre ? e.type === "nocolor" ? o(`color.noColor.aria`) : e.type === "automatic" ? o(`automatic.aria`, {
        color: s
    }) : s : undefined;
    const l = e.color === zre ? true : undefined;
    return {
        title: r,
        ariaLabel: i,
        ariaHidden: l
    };
};

var rne = "sas_components-ColorPicker-__internal__-ColorChips_empty-chip";

var sne = "sas_components-ColorPicker-__internal__-ColorChips_automatic";

var ine = "sas_components-ColorPicker-__internal__-ColorChips_custom-colorchip";

var lne = "sas_components-ColorPicker-__internal__-ColorChips_no-color";

var cne = "sas_components-ColorPicker-__internal__-ColorChips_colorchip";

var dne = "sas_components-ColorPicker-__internal__-ColorChips_automatic-inner";

var une = "sas_components-ColorPicker-__internal__-ColorChips_custom-colorchip-inner";

var mne = "sas_components-ColorPicker-__internal__-ColorChips_empty-chip-inner";

var pne = "sas_components-ColorPicker-__internal__-ColorChips_no-color-inner";

var fne = "sas_components-ColorPicker-__internal__-ColorChips_colorchip-inner";

var gne = "sas_components-ColorPicker-__internal__-ColorChips_selected";

var hne = "sas_components-ColorPicker-__internal__-ColorChips_visible-inner-border";

var bne = {
    emptyChip: rne,
    automatic: sne,
    customColorchip: ine,
    noColor: lne,
    colorchip: cne,
    automaticInner: dne,
    customColorchipInner: une,
    emptyChipInner: mne,
    noColorInner: pne,
    colorchipInner: fne,
    selected: gne,
    visibleInnerBorder: hne
};

const vne = e => {
    const o = NA("ColorPicker");
    let n;
    if (e.type === "nocolor") {
        n = bne.noColor;
    } else if (e.type === "automatic") {
        n = bne.automatic;
    } else if (e.color === zre) {
        n = bne.emptyChip;
    } else if (e.type === "custom") {
        n = bne.customColorchip;
    } else {
        n = bne.colorchip;
    }
    const a = C_();
    const r = {
        bd: "transparent",
        "hover-bd": Jv(a.tokensExperimental["color-container-border-4"], .5),
        "swatch-bd": a.tokensExperimental["color-neutral"],
        "swatch-bd-width": a.tokensExperimental["size-border-width-s"],
        "empty-bg": "transparent",
        "inner-bd": a.tokensExperimental["color-container-border-4"],
        "no-color-mark": a.tokensExperimental["color-status-border-alert"],
        padding: a.tokensExperimental["space-base-xxs"]
    };
    const s = I_(r, "colorchip");
    const i = e.type === "automatic" && !!e.renderAutomaticSwatch;
    const l = [ "automatic", "nocolor" ].includes(e.type) || e.selected || e.focusable ? 0 : -1;
    const {ariaLabel: c, title: d, ariaHidden: u} = ane({
        color: e.color,
        type: e.type
    });
    const m = t => {
        if ([ "Enter", " " ].includes(t.key)) {
            t.preventDefault();
            t.stopPropagation();
            e.onPress?.(e.color, e.type);
        }
    };
    const p = t => {
        t.stopPropagation();
        if (e.color !== zre && e.onPress) {
            i ? e.onPress("#000000", "automatic") : e.onPress(e.color, e.type);
        }
    };
    const f = e.renderAutomaticSwatch ? e.renderAutomaticSwatch({
        getAttributes() {
            let t = `${o("automatic.label")}, ${o("multipleSmallCaseColors.label")}`;
            if (e.selected) {
                t = o("basicTab.selected.aria", {
                    ariaLabel: t
                });
            }
            const n = o("multipleColors.label");
            return {
                ariaLabel: t,
                title: n
            };
        }
    }) : null;
    return t("div", Ee({
        role: "button",
        tabIndex: l,
        style: s,
        onClick: p,
        onKeyDown: m,
        "aria-hidden": u,
        "data-testid": gb(e.testId, `${e.type}-${e.color}`),
        className: ke(n, e.selected && !e.tabToStandardBlock && bne.selected)
    }, !i && {
        title: d,
        "aria-label": c ? e.selected ? o("basicTab.selected.aria", {
            ariaLabel: c
        }) : c : undefined
    }), i ? f : t("span", {
        className: ke(`${n}-inner`, (e.color === "#FFFFFF" && a.themeVariant !== "high-contrast" || e.color === "#000000" && a.themeVariant !== "light") && bne.visibleInnerBorder),
        style: {
            backgroundColor: e.color,
            ...e.style
        }
    }));
};

const yne = () => {
    const e = NA("ColorPicker");
    const t = one();
    return s(((o, n, a, r) => {
        const s = !tne.includes(o) ? t(o) : `${e(`color.${o?.slice(1)}.title`)} (${t(o)})`;
        const i = o === "" && n === "nocolor" ? e("color.noColor.title") : n === "automatic" ? e("automatic.title", {
            color: s
        }) : s;
        const l = !tne.includes(o) ? `${o?.split("").join(" ")}` : `${e(`color.${o?.slice(1)}.aria`)} (${o?.split("").join(" ")})`;
        const c = o === "" && n === "nocolor" ? e("color.noColor.aria") : n === "automatic" ? e("automatic.aria", {
            color: l
        }) : l;
        const d = !tne.includes(a) ? t(a) : `${e(`color.${a?.slice(1)}.title`)} (${t(a)})`;
        const u = a === "" && r === "nocolor" ? e("color.noColor.title") : r === "automatic" ? e("automatic.title", {
            color: d
        }) : d;
        const m = !tne.includes(a) ? `${a?.split("").join(" ")}` : `${e(`color.${a?.slice(1)}.aria`)} (${a?.split("").join(" ")})`;
        const p = a === "" && r === "nocolor" ? e("color.noColor.aria") : r === "automatic" ? e("automatic.aria", {
            color: m
        }) : m;
        return {
            currentAriaLabel: e("customTab.currentColorSwatch.aria", {
                color: c
            }),
            currentToolTip: e("customTab.currentColorSwatch.title", {
                color: i
            }),
            newAriaLabel: e("customTab.newColorSwatch.aria", {
                color: p
            }),
            newToolTip: e("customTab.newColorSwatch.title", {
                color: u
            }),
            canvasThumbAriaLabel: e("customTab.canvasThumb.aria", {
                selectedColor: p
            }),
            hueSliderThumbAriaLabel: e("customTab.hueSliderThumb.aria", {
                color: p
            })
        };
    }), [ t, e ]);
};

var xne = "sas_components-ColorPicker-__internal__-ColorIndicator_current-new-swatch-container";

var Sne = "sas_components-ColorPicker-__internal__-ColorIndicator_current-multi-color";

var wne = "sas_components-ColorPicker-__internal__-ColorIndicator_swatch";

var Cne = "sas_components-ColorPicker-__internal__-ColorIndicator_swatch-spacing";

var Ene = "sas_components-ColorPicker-__internal__-ColorIndicator_no-color";

var Ine = "sas_components-ColorPicker-__internal__-ColorIndicator_swatch-border";

var _ne = "sas_components-ColorPicker-__internal__-ColorIndicator_current-color-swatch-border";

var Dne = "sas_components-ColorPicker-__internal__-ColorIndicator_new-color-swatch-border";

var Lne = {
    currentNewSwatchContainer: xne,
    currentMultiColor: Sne,
    swatch: wne,
    swatchSpacing: Cne,
    noColor: Ene,
    swatchBorder: Ine,
    currentColorSwatchBorder: _ne,
    newColorSwatchBorder: Dne
};

const Tne = e => {
    const o = NA("ColorPicker");
    const {currentColor: n, newColor: a} = e;
    const r = yne();
    const {currentAriaLabel: s, currentToolTip: i, newAriaLabel: l, newToolTip: c} = r(n.color, n.type, a.color, a.type);
    const d = C_();
    const u = I_({
        "spacing-xs": d.tokensExperimental["space-base-xs"],
        "no-color-mark": d.tokensExperimental["color-status-alert"],
        "swatch-bd": d.tokensExperimental["color-container-border-4"],
        "automatic-swatch-width": "1.5rem"
    }, "color-indicator");
    const m = n.color === "#FFFFFF" && d.themeVariant === "light" || n.color === "#000000" && d.themeVariant === "high-contrast" ? Lne.swatchBorder : undefined;
    const p = a.color === "#FFFFFF" && d.themeVariant === "light" || a.color === "#000000" && d.themeVariant === "high-contrast" ? Lne.swatchBorder : undefined;
    const f = e.renderAutomaticSwatch ? e.renderAutomaticSwatch({
        getAttributes() {
            return {
                ariaLabel: `${o("currentColorAutomatic.label")} ${o("automatic.label")} (${o("multipleSmallCaseColors.label")})`,
                title: `${o("currentColorAutomatic.label")} ${o("automatic.label")} (${o("multipleSmallCaseColors.label")})`,
                className: Lne.currentMultiColor,
                tabIndex: 0,
                role: "img"
            };
        }
    }) : null;
    return t(iN, {
        "data-testid": gb(e.testId, "currentNewSwatchContainer"),
        className: Lne.currentNewSwatchContainer,
        spacing: "none",
        style: u
    }, t(LP, {
        testId: gb(e.testId, "currentLabel")
    }, o("customTab.currentColorSwatch.label")), n.type === "automatic" && e.renderAutomaticSwatch ? f : t(iN, {
        role: "img",
        spacing: "none",
        tabIndex: 0,
        className: ke(Lne.swatch, Lne.swatchSpacing, Lne.currentColorSwatchBorder, n.color === "" && Lne.noColor, m),
        "data-testid": gb(e.testId, "currentColorSwatch"),
        title: i,
        "aria-label": s,
        style: {
            backgroundColor: n.color
        }
    }), t(iN, {
        role: "img",
        spacing: "none",
        tabIndex: 0,
        className: ke(Lne.swatch, Lne.newColorSwatchBorder, a.color === "" && Lne.noColor, p),
        "data-testid": gb(e.testId, "newColorSwatch"),
        title: c,
        "aria-label": l,
        style: {
            backgroundColor: a.color
        }
    }), t(LP, {
        testId: gb(e.testId, "newLabel")
    }, o("customTab.newColorSwatch.label")));
};

var Rne = "sas_components-ColorPicker-__internal__-BasicColorPicker_container";

var kne = "sas_components-ColorPicker-__internal__-BasicColorPicker_label";

var Ane = "sas_components-ColorPicker-__internal__-BasicColorPicker_standard-color-chips";

var Mne = "sas_components-ColorPicker-__internal__-BasicColorPicker_recent-custom-chips";

var Nne = "sas_components-ColorPicker-__internal__-BasicColorPicker_recent-standard-chips";

var One = "sas_components-ColorPicker-__internal__-BasicColorPicker_basic-color-container";

var Pne = "sas_components-ColorPicker-__internal__-BasicColorPicker_defult-color-selection";

var Bne = {
    container: Rne,
    label: kne,
    standardColorChips: Ane,
    recentCustomChips: Mne,
    recentStandardChips: Nne,
    basicColorContainer: One,
    defultColorSelection: Pne
};

const zne = MA("BasicColorPicker");

const Fne = e => {
    const o = NA("ColorPicker");
    const n = o("standard.label");
    const a = o("automatic.label");
    const r = o("noColor.label");
    const s = o("recentCustom.label");
    const i = o("recentStandard.label");
    const l = ay();
    const d = Math.max(0, Math.min(e.numberOfRecentCustomRows ?? 1, 3));
    const u = [ ...e.recentCustomColors, ...Array(d * 7).fill(zre) ].slice(0, d * 7);
    const m = e.newColor;
    const p = Lre(e.automaticColor ?? "#000000");
    const f = e => e.firstElementChild.style.backgroundColor === zre;
    const g = (e, t) => {
        e.tabIndex = -1;
        t.tabIndex = 0;
        t.focus();
    };
    const h = e => {
        const t = e.target;
        let o = true;
        switch (e.key) {
          case "ArrowUp":
          case l ? "ArrowRight" : "ArrowLeft":
            if (t.previousElementSibling) {
                const e = t.previousElementSibling;
                if (f(e)) break;
                g(t, e);
            }
            break;

          case "ArrowDown":
          case l ? "ArrowLeft" : "ArrowRight":
            if (t.nextElementSibling) {
                const e = t.nextElementSibling;
                if (f(e)) break;
                g(t, e);
            }
            break;

          case "Home":
            if (t.parentElement) {
                const e = [ ...t.parentElement.childNodes ];
                g(t, e[0]);
            }
            break;

          case "End":
            if (t.parentElement) {
                const e = Fre.filter((e => e !== zre)).length - 1;
                const o = [ ...t.parentElement.childNodes ];
                g(t, o[e]);
            }
            break;

          default:
            o = false;
            break;
        }
        if (o) {
            e.preventDefault();
            e.stopPropagation();
        }
    };
    const b = t => {
        if (d === 1 && t.key !== "End" && t.key !== "Home") {
            h(t);
        } else {
            let o = true;
            const n = t.target;
            const a = e.recentCustomColors.length;
            const r = 7;
            switch (t.key) {
              case l ? "ArrowRight" : "ArrowLeft":
                if (n.previousElementSibling) {
                    const e = n.previousElementSibling;
                    if (f(e)) break;
                    g(n, e);
                }
                break;

              case l ? "ArrowLeft" : "ArrowRight":
                if (n.nextElementSibling) {
                    const e = n.nextElementSibling;
                    if (f(e)) break;
                    g(n, e);
                }
                break;

              case "ArrowUp":
                if (n.parentElement) {
                    const e = [ ...n.parentElement.childNodes ];
                    const t = e.indexOf(n);
                    if (t === 0) break;
                    const o = Math.floor(t / r);
                    const s = t % r;
                    const i = Math.floor((a - 1) / r);
                    const l = (a - 1) % r;
                    const c = o === 0 ? s > l + 1 ? t + (i - 1) * r - 1 : t + i * r - 1 : t - r;
                    const d = e[c];
                    if (f(d)) break;
                    g(n, d);
                }
                break;

              case "ArrowDown":
                if (n.parentElement) {
                    const e = [ ...n.parentElement.childNodes ];
                    const t = e.indexOf(n);
                    if (t === a - a % r - 1) break;
                    const o = t % r;
                    const s = t < a - r ? t + r : o + 1;
                    const i = e[s];
                    if (f(i)) break;
                    g(n, i);
                }
                break;

              case "Home":
                if (n.parentElement) {
                    const e = [ ...n.parentElement.childNodes ];
                    g(n, e[0]);
                }
                break;

              case "End":
                if (n.parentElement) {
                    const e = d * r >= a ? a - 1 : d * r - 1;
                    const t = [ ...n.parentElement.childNodes ];
                    g(n, t[e]);
                }
                break;

              default:
                o = false;
                break;
            }
            if (o) {
                t.preventDefault();
                t.stopPropagation();
            }
        }
    };
    const v = (t, o) => {
        e.onColorSelect?.({
            color: t,
            type: o
        });
    };
    const y = e => {
        let t = true;
        const o = e.target;
        const n = 5;
        switch (e.key) {
          case l ? "ArrowRight" : "ArrowLeft":
            {
                if (o.parentNode) {
                    const e = o.parentNode.childNodes;
                    const t = [ ...e ].indexOf(o);
                    if (t > 0) {
                        const a = t >= n ? t - n : e.length - 1 - n + t;
                        const r = e[a];
                        g(o, r);
                    }
                }
            }
            break;

          case l ? "ArrowLeft" : "ArrowRight":
            {
                if (o.parentNode) {
                    const e = o.parentNode.childNodes;
                    const t = [ ...e ].indexOf(o);
                    if (t < e.length - 1) {
                        const a = t < e.length - n ? t + n : n - (e.length - 1 - t);
                        const r = e[a];
                        g(o, r);
                    }
                }
            }
            break;

          case "ArrowUp":
            {
                if (o.previousElementSibling) {
                    const e = o.previousElementSibling;
                    g(o, e);
                }
            }
            break;

          case "ArrowDown":
            {
                if (o.nextElementSibling) {
                    const e = o.nextElementSibling;
                    g(o, e);
                }
            }
            break;

          case "Home":
            if (o.parentNode?.firstElementChild) {
                const e = o.parentNode.firstElementChild;
                g(o, e);
            }
            break;

          case "End":
            if (o.parentNode?.lastElementChild) {
                const e = o.parentNode.lastElementChild;
                g(o, e);
            }
            break;

          default:
            t = false;
            break;
        }
        if (t) {
            e.stopPropagation();
            e.preventDefault();
        }
    };
    const [x, S, w] = zne(3);
    const C = XA();
    const E = c(false);
    const I = c(false);
    const _ = c(false);
    const D = (e, t) => {
        if (!t.current) {
            C?.notify(e);
            t.current = true;
        }
    };
    const L = (e, t) => {
        if (t.current && !e.currentTarget.contains(e.relatedTarget)) {
            t.current = false;
        }
    };
    return t(iN, {
        id: e.id,
        role: "tabpanel",
        orientation: "vertical",
        className: Bne.container,
        "data-testid": gb(e.testId, "container")
    }, e.showColorIndicator && t(Tne, {
        currentColor: e.selectedColor,
        newColor: e.newColor
    }), t(iN, {
        orientation: "vertical",
        spacing: "s",
        className: Bne.basicColorContainer
    }, t(iN, {
        orientation: "vertical",
        spacing: "xs"
    }, t(LP, {
        id: x,
        className: Bne.label
    }, n), t(iN, {
        role: "toolbar",
        "aria-labelledby": x,
        className: Bne.standardColorChips,
        onKeyDown: y,
        spacing: "none",
        onFocus: () => {
            D(o("basicTab.standardColors.msg"), E);
        },
        onBlur: e => {
            L(e, E);
        }
    }, tne.map((o => t(vne, Ee({
        key: o
    }, e, {
        color: o,
        type: "standard",
        selected: o === m?.color && m?.type === "standard" || o === "#000000" && m?.type !== "standard",
        tabToStandardBlock: o === "#000000" && m?.type !== "standard",
        onPress: v,
        testId: gb(e.testId, "standardColorChip")
    })))))), d !== 0 && t(iN, {
        orientation: "vertical",
        spacing: "xs"
    }, t(LP, {
        id: S,
        className: Bne.label
    }, s), t(iN, {
        role: "toolbar",
        "aria-labelledby": S,
        className: Bne.recentCustomChips,
        onKeyDown: b,
        onFocus: () => {
            D(o("basicTab.recentCustomColors.msg"), I);
        },
        onBlur: e => {
            L(e, I);
        }
    }, u.map(((o, n) => t(vne, {
        key: `recent-custom-${n}`,
        testId: gb(e.testId, `recentCustomColorChip-${n}`),
        color: o,
        type: "custom",
        onPress: v,
        focusable: n === 0 && o !== zre
    }))))), t(iN, {
        orientation: "vertical",
        spacing: "xs"
    }, t(LP, {
        id: w,
        className: Bne.label
    }, i), t(iN, {
        role: "toolbar",
        "aria-labelledby": w,
        className: Bne.recentStandardChips,
        onKeyDown: h,
        onFocus: () => {
            D(o("basicTab.recentStandardColors.msg"), _);
        },
        onBlur: e => {
            L(e, _);
        }
    }, Fre.map(((o, n) => t(vne, {
        key: `recent-standard-${n}`,
        testId: gb(e.testId, `recentStandardColorChip-${n}`),
        color: o,
        type: "standard",
        onPress: v,
        focusable: n === 0 && o !== zre
    }))))), t(iN, {
        spacing: "s",
        orientation: "vertical",
        className: Bne.defultColorSelection,
        onKeyDown: e => {
            if ([ "ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight" ].includes(e.key)) {
                e.stopPropagation();
                e.preventDefault();
            }
        }
    }, !e.hideAutomaticColor && t(iN, {
        spacing: "xs"
    }, t(vne, Ee({
        type: "automatic"
    }, e, {
        color: p,
        selected: p.toUpperCase() === m?.color.toUpperCase() && m?.type === "automatic",
        onPress: v,
        testId: gb(e.testId, "automaticColorChip")
    })), t(LP, null, a)), !e.hideNoColor ? t(iN, {
        spacing: "xs"
    }, t(vne, Ee({
        type: "nocolor"
    }, e, {
        color: "",
        selected: m?.color === "" && m?.type === "nocolor",
        onPress: v,
        testId: gb(e.testId, "nocolorColorChip")
    })), t(LP, null, r)) : null)));
};

class jne {
    constructor(e, t, o) {
        this._numberFormat = new Intl.NumberFormat(e, t);
        this._disableRoundToStep = o;
        const n = this._numberFormat.formatToParts(11000.5);
        let a = "", r = "", s = "";
        n.forEach((e => {
            switch (e.type) {
              case "currency":
                a = e.value;
                break;

              case "group":
                r = e.value;
                break;

              case "decimal":
                s = e.value;
                break;
            }
        }));
        const i = r.charCodeAt(0) === 8239 || r.charCodeAt(0) === 160 ? ` |${r}` : r;
        this._patternDecimal = new RegExp(`[${s}]`, "gu");
        this._patternThousands = new RegExp(`[${i}]`, "gu");
        this._patternCurrency = new RegExp(`[${a}]`, "gu");
        this.validRegEx = new RegExp(`^\\s*-?(\\d{1,3}([${i}](\\d{3})){0,}|\\d{0,})([${s}](\\d){0,})?\\s*$`, "gu");
    }
    format(e) {
        return this ? this._numberFormat.format(e) : "";
    }
    parse(e, t, o) {
        const n = [ /۰/g, /۱/g, /۲/g, /۳/g, /۴/g, /۵/g, /۶/g, /۷/g, /۸/g, /۹/g ], a = [ /٠/g, /١/g, /٢/g, /٣/g, /٤/g, /٥/g, /٦/g, /٧/g, /٨/g, /٩/g ];
        for (let t = 0; t < 10; t++) {
            e = e.replace(n[t], t.toString()).replace(a[t], t.toString());
        }
        if (e.charCodeAt(0) === 8206 || e.charCodeAt(0) === 1564) e = e.substring(1);
        e = e.replace(this._patternCurrency, "");
        this.validRegEx.lastIndex = 0;
        if (this.validRegEx.test(e) === false) {
            return {
                type: "error",
                result: t("input.invalid.error.msg")
            };
        }
        e = e.trim().replace(this._patternThousands, "").replace(this._patternDecimal, ".");
        if (e === "") {
            return {
                type: "error",
                result: t("input.invalid.error.msg")
            };
        }
        let r = Number(e);
        if (isNaN(r)) {
            return {
                type: "error",
                result: t("input.invalid.error.msg")
            };
        } else {
            r = Vne(r, o, this._numberFormat, this._disableRoundToStep);
            return {
                type: "success",
                result: r
            };
        }
    }
}

const Vne = (e, t, o, n) => {
    let a;
    if (n) return e;
    if (typeof t === "number") {
        a = t;
    } else if (typeof t === "function") {
        const o = t(e, {
            type: "forward"
        });
        a = o - e;
    } else {
        return e;
    }
    if (a === undefined || a === 0) return e;
    let r = 0;
    if (t === 1) {
        return Math.round(e);
    } else {
        const t = o ?? new Intl.NumberFormat;
        const n = t.resolvedOptions().locale;
        const s = 1.1.toLocaleString(n).replace(/1/gu, "");
        const i = a.toLocaleString(n, {
            maximumFractionDigits: 20
        });
        r = i.split(s)[1]?.length ?? 0;
        const l = e / a;
        const c = Math.floor(l);
        const d = (l - c) * a;
        const u = a / 2;
        let m = c * a;
        if (d >= u) {
            m = m + a;
        }
        return parseFloat(m.toFixed(r));
    }
};

const Hne = (e, t, o, n) => {
    const a = [];
    if (o < 1) return a;
    const r = (t - e) / (o - 1);
    while (e < t) {
        a.push(Vne(e, n));
        e += r;
    }
    if (a[a.length - 1] !== t) {
        a.push(t);
    }
    return a;
};

const Une = (e, t, o, n) => {
    if (Array.isArray(t) && t.length) return t;
    const a = typeof t === "number" && !isNaN(t) ? t : o ?? 0;
    return Hne(e.minValue, e.maxValue, a, n);
};

const Gne = (e, t, o) => {
    const n = typeof t === "number" ? t : 1;
    const a = o.maxValue - o.minValue;
    const r = e === "medium" ? Math.max(n, a / 50) : Math.max(n, a / 10);
    return r;
};

var Kne = {
    horizontal: "sas_components-Slider-RangeGrip-SliderRange_container_horizontal",
    vertical: "sas_components-Slider-RangeGrip-SliderRange_container_vertical"
};

var Wne = "sas_components-Slider-RangeGrip-SliderRange_horizontal";

var $ne = "sas_components-Slider-RangeGrip-SliderRange_vertical";

var Yne = "sas_components-Slider-RangeGrip-SliderRange_range-enable-focus-outline";

var qne = "sas_components-Slider-RangeGrip-SliderRange_show-exclusive";

var Xne = "sas_components-Slider-RangeGrip-SliderRange_disabled";

var Zne = {
    container: Kne,
    horizontal: Wne,
    vertical: $ne,
    rangeEnableFocusOutline: Yne,
    showExclusive: qne,
    disabled: Xne
};

const Jne = u((function e({xStyle: o, className: n, style: a, ...r}, s) {
    const i = {};
    const l = ay();
    const c = `${(o.maxPos - o.minPos) * 100}%`;
    if (o.orientation === "vertical") {
        i.top = `${(1 - o.maxPos) * 100}%`;
        i.height = c;
    } else {
        i.left = `${(l ? 1 - o.maxPos : o.minPos) * 100}%`;
        i.width = c;
    }
    const {testId: d, ariaLabel: u, showExclusive: m, ...p} = r;
    const f = r["aria-labelledby"];
    const g = C_();
    const h = I_(Qne(g, m || false), "slider-range");
    return t("div", {
        "data-testid": gb(r.testId, "container"),
        className: Zne.container[o.orientation]
    }, u ? t(bO, {
        id: f,
        testId: gb(r.testId, "invisibleText")
    }, u) : undefined, t("div", Ee({}, p, {
        "data-testid": r.testId,
        ref: s,
        className: ke(n, r.disabled && Zne.disabled, Zne[o.orientation], o.enableFocusOutline && Zne.rangeEnableFocusOutline, m && Zne.showExclusive),
        style: {
            ...h,
            ...i,
            ...a
        }
    }), r.children));
}));

const Qne = (e, t) => {
    if (e.enableNovaTokens) {
        return {
            bg: t ? e.tokensExperimental["color-container-background-0"] : e.tokensExperimental["color-action-background-on-off-selected"],
            "disabled-bg": t ? e.tokensExperimental["color-action-background-on-off-read-only"] : e.tokensExperimental["color-action-background-on-off-selected-disabled"]
        };
    } else {
        return {
            bg: t ? e.backgrounds.page.bg : e.stateSecondaryToggle.selected.bg,
            "disabled-bg": t ? e.stateSecondaryToggle.selected.bg : e.stateSecondaryToggle.disabledSelected.bg
        };
    }
};

var eae = {
    vertical: "sas_components-Slider-GripLabel-SliderGripLabel_container_vertical",
    horizontal: "sas_components-Slider-GripLabel-SliderGripLabel_container_horizontal"
};

var tae = "sas_components-Slider-GripLabel-SliderGripLabel_spacer-end";

var oae = "sas_components-Slider-GripLabel-SliderGripLabel_spacer-start";

var nae = "sas_components-Slider-GripLabel-SliderGripLabel_spacer-center";

var aae = "sas_components-Slider-GripLabel-SliderGripLabel_label";

var rae = {
    horizontal: "sas_components-Slider-GripLabel-SliderGripLabel_input-padding_horizontal",
    vertical: "sas_components-Slider-GripLabel-SliderGripLabel_input-padding_vertical"
};

var sae = "sas_components-Slider-GripLabel-SliderGripLabel_label-hide";

var iae = "sas_components-Slider-GripLabel-SliderGripLabel_disabled";

var lae = {
    container: eae,
    spacerEnd: tae,
    spacerStart: oae,
    spacerCenter: nae,
    label: aae,
    inputPadding: rae,
    labelHide: sae,
    disabled: iae
};

const cae = u(((e, o) => {
    const {[e.orientation === "vertical" ? "end" : "start"]: n, [e.orientation === "vertical" ? "start" : "end"]: a} = dae(e.position);
    const r = ke(lae.label, lae.inputPadding[e.orientation], e.className, e.disabled && lae.disabled, (e.hideLabel || e.isRange) && lae.labelHide);
    return e.hideLabel ? null : t("div", {
        "data-testid": gb(e.testId, "container"),
        className: ke(lae.container[e.orientation], e.containerClassName),
        style: e.containerStyle,
        ref: o
    }, t("div", {
        className: lae.spacerStart,
        style: n
    }), Array.isArray(e.label) ? e.label.map(((o, n) => t("div", {
        "data-testid": gb(e.testId, n === 0 ? "max" : "min"),
        className: lae.spacerCenter,
        key: n
    }, t(jP, {
        className: r,
        style: e.style,
        onClick: () => e.onPress?.(),
        wrapText: false
    }, o)))) : t("div", {
        "data-testid": e.testId,
        className: lae.spacerCenter
    }, t(jP, {
        className: r,
        style: e.style,
        onClick: t => {
            if (t.currentTarget === t.target) {
                e.onPress?.();
            }
        },
        wrapText: false
    }, e.label), e.children), t("div", {
        className: lae.spacerEnd,
        style: a
    }));
}));

function dae(e) {
    const t = 1 - e;
    return {
        start: {
            flexBasis: `${e * 100}%`,
            flexShrink: Math.max(t * 1e3, 1)
        },
        end: {
            flexBasis: `${t * 100}%`,
            flexShrink: Math.max(e * 1e3, 1)
        }
    };
}

function uae(e) {
    const [t, o] = n(false);
    const [r, s] = n(false);
    const [[i, l], c] = n([ NaN, NaN ]);
    const [d, u] = n(NaN);
    const m = ay();
    a((() => {
        if (!t) return;
        function n(t, o) {
            const n = e.clientBounds.getSize();
            if (!n) return undefined;
            let a = 0;
            if (e.orientation === "vertical") {
                a = (o - l) / n.height;
                a *= -1;
            } else {
                a = (t - i) / n.width;
                if (m) {
                    a *= -1;
                }
            }
            a += d;
            if (a < e.minPosition) {
                a = e.minPosition;
            } else if (a > e.maxPosition) {
                a = e.maxPosition;
            }
            return a;
        }
        function a(t) {
            if (!e.onChange) return;
            const o = n(t.clientX, t.clientY);
            let a = false;
            if (o !== d) {
                a = true;
                s(true);
            }
            if (o !== undefined) {
                e.onChange.call(undefined, {
                    position: o,
                    didDrag: a
                });
            }
        }
        function r(t) {
            if (t.button !== 0) return;
            o(false);
            const a = n(t.clientX, t.clientY);
            let r = false;
            if (a !== d) {
                r = true;
                s(true);
            }
            if (a !== undefined) {
                if (e.onChange) e.onChange.call(undefined, {
                    position: a,
                    didDrag: r
                });
                if (e.onCommit) e.onCommit.call(undefined, {
                    position: a,
                    didDrag: r
                });
            }
        }
        window.addEventListener("mousemove", a);
        window.addEventListener("mouseup", r);
        return () => {
            window.removeEventListener("mousemove", a);
            window.removeEventListener("mouseup", r);
        };
    }));
    return {
        startDrag(e, t) {
            c(e);
            u(t);
            s(false);
            o(true);
        },
        abortDrag() {
            o(false);
        },
        lastDragStartPos: d,
        didDrag: r
    };
}

const mae = MA("sliderRange");

const pae = e => {
    const a = NA("Slider");
    const r = Intl.NumberFormat(jV(), {
        maximumFractionDigits: 20
    });
    const s = c({
        startPos: NaN,
        endPos: NaN
    });
    const i = .5 * (e.scale.position(e.endValue) - e.scale.position(e.startValue));
    const {startDrag: l, lastDragStartPos: d, didDrag: u} = uae({
        clientBounds: e.clientBounds,
        orientation: e.orientation,
        minPosition: e.scale.position(e.minValue) + i,
        maxPosition: e.scale.position(e.maxValue) - i,
        onChange(t) {
            const o = t.position - d;
            e.onChange && e.onChange({
                startValue: e.scale.value(s.current.startPos + o, u),
                endValue: e.scale.value(s.current.endPos + o, u)
            });
        },
        onCommit(t) {
            const o = t.position - d;
            e.onCommit && e.onCommit({
                startValue: e.scale.value(s.current.startPos + o, u),
                endValue: e.scale.value(s.current.endPos + o, u)
            });
        }
    });
    const m = e.scale.position(e.startValue);
    const p = e.scale.position(e.endValue);
    const f = .5 * (m + p);
    const g = e.format.format(e.startValue);
    const h = e.format.format(e.endValue);
    const b = e.orientation === "vertical" ? [ h, g ] : a("sliderRangeGrip.gripLabel.label", {
        startLabel: g,
        endLabel: h
    });
    const v = c(null);
    const [y, x] = n(true);
    const S = ay();
    const w = ({type: t, dir: o}) => {
        let n;
        let a;
        const s = e.endValue - e.startValue;
        const i = e.minValue + s;
        const l = e.maxValue - s;
        if (t === "stepMax") {
            n = o === "forward" ? l : e.minValue;
            a = o === "forward" ? e.maxValue : i;
        } else {
            let s = 0;
            if (t === "step") {
                s = e.stepValue;
            } else if (t === "stepTwo") {
                s = e.stepMediumValue;
            } else if (t === "stepLarge") {
                s = e.stepLargeValue;
            }
            n = e.startValue;
            a = e.endValue;
            if (typeof s === "number") {
                n += (o === "forward" ? 1 : -1) * s;
                n = Vne(n, e.stepValue, r, e.disableRoundToStep);
                a += (o === "forward" ? 1 : -1) * s;
                a = Vne(a, e.stepValue, r, e.disableRoundToStep);
            } else {
                n = s(n, {
                    type: o
                });
                a = s(a, {
                    type: o
                });
            }
            if (n > l) {
                n = l;
            } else if (n < e.minValue) {
                n = e.minValue;
            }
            if (a > e.maxValue) {
                a = e.maxValue;
            } else if (a < i) {
                a = i;
            }
        }
        e.onChange && e.onChange({
            startValue: n,
            endValue: a
        });
        if (e.onCommit) e.onCommit({
            startValue: n,
            endValue: a
        });
    };
    const C = mae();
    return t(o, null, t(cae, {
        testId: gb(e.testId, "label"),
        disabled: e.disabled,
        className: e.gripLabelClassName,
        orientation: e.orientation,
        position: f,
        label: b,
        hideLabel: e.hideLabel,
        handleLabelTokens: e.handleLabelTokens,
        containerStyle: {
            zIndex: !e.sliderGripControlIsVisible ? 1 : undefined
        }
    }), t(Jne, {
        testId: e.testId,
        disabled: e.disabled,
        ref: v,
        tabIndex: 0,
        showExclusive: e.showExclusive,
        xStyle: {
            orientation: e.orientation,
            minPos: m,
            maxPos: p,
            enableFocusOutline: y
        },
        onMouseDown: e.disabled || e.readOnly ? undefined : e => {
            if (e.button !== 0) return;
            e.preventDefault();
            s.current.startPos = m;
            s.current.endPos = p;
            l([ e.clientX, e.clientY ], f);
            if (v.current) {
                v.current.focus();
            }
            x(false);
        },
        onClick: e.disabled || e.readOnly ? undefined : t => {
            if (!u && e.onPress) {
                e.onPress(t);
            }
        },
        onKeyDown: e.disabled || e.readOnly ? undefined : e => {
            const t = t => {
                e.preventDefault();
                x(true);
                w(t);
            };
            switch (e.key) {
              case "ArrowRight":
                t({
                    type: e.shiftKey ? "stepTwo" : "step",
                    dir: S ? "backward" : "forward"
                });
                break;

              case "ArrowUp":
                t({
                    type: e.shiftKey ? "stepTwo" : "step",
                    dir: "forward"
                });
                break;

              case "ArrowLeft":
                t({
                    type: e.shiftKey ? "stepTwo" : "step",
                    dir: S ? "forward" : "backward"
                });
                break;

              case "ArrowDown":
                t({
                    type: e.shiftKey ? "stepTwo" : "step",
                    dir: "backward"
                });
                break;

              case "Home":
                t({
                    type: "stepMax",
                    dir: "backward"
                });
                break;

              case "End":
                t({
                    type: "stepMax",
                    dir: "forward"
                });
                break;

              case "PageUp":
                t({
                    type: "stepLarge",
                    dir: "forward"
                });
                break;

              case "PageDown":
                t({
                    type: "stepLarge",
                    dir: "backward"
                });
                break;
            }
        },
        onBlur: e.disabled || e.readOnly ? undefined : () => {
            x(true);
        },
        role: "slider",
        ariaLabel: e.ariaLabel ?? a("sliderRangeGrip.sliderRange.aria"),
        "aria-labelledby": C,
        "aria-disabled": e.disabled,
        "aria-readonly": e.readOnly,
        "aria-orientation": e.orientation,
        "aria-valuenow": (e.startValue + e.endValue) * .5,
        "aria-valuemin": e.startValue,
        "aria-valuemax": e.endValue,
        "aria-valuetext": a("sliderRangeGrip.sliderRange.valueText.aria", {
            startLabel: g,
            endLabel: h
        })
    }));
};

class fae {
    constructor(e, t) {
        this._start = e;
        this._end = t;
        this._length = t - e;
    }
    position(e) {
        if (this._start === this._end) {
            return 0;
        }
        return (e - this._start) / this._length;
    }
    value(e) {
        return e * this._length + this._start;
    }
    get minValue() {
        return this._start;
    }
    get maxValue() {
        return this._end;
    }
    static createFromLength(e, t) {
        return new fae(e, e + t);
    }
    static createFromMinMax(e, t) {
        return new fae(e, t);
    }
}

let gae = function(e) {
    e["LessThan"] = "LessThan";
    e["GreaterThan"] = "GreaterThan";
    e["Equal"] = "Equal";
    return e;
}({});

let hae = function(e) {
    e["Inclusive"] = "Inclusive";
    e["Exclusive"] = "Exclusive";
    return e;
}({});

let bae = function(e) {
    e["Minimum"] = "min";
    e["Maximum"] = "max";
    e["Single"] = "single";
    return e;
}({});

var vae = {
    horizontal: "sas_components-Slider-Ticks-SliderTickLabels_label-container_horizontal",
    vertical: "sas_components-Slider-Ticks-SliderTickLabels_label-container_vertical"
};

var yae = "sas_components-Slider-Ticks-SliderTickLabels_slider-tick-label";

var xae = "sas_components-Slider-Ticks-SliderTickLabels_disabled";

var Sae = {
    horizontal: "sas_components-Slider-Ticks-SliderTickLabels_label_horizontal",
    vertical: "sas_components-Slider-Ticks-SliderTickLabels_label_vertical"
};

var wae = "sas_components-Slider-Ticks-SliderTickLabels_label-horizontal-first";

var Cae = "sas_components-Slider-Ticks-SliderTickLabels_label-horizontal-last";

var Eae = {
    labelContainer: vae,
    sliderTickLabel: yae,
    disabled: xae,
    label: Sae,
    labelHorizontalFirst: wae,
    labelHorizontalLast: Cae
};

const Iae = f(u(((e, a) => {
    const [r, s] = n(0);
    const {refs: i, createSetRef: l} = uU();
    const [c, d] = kN((() => {
        const e = i[1];
        const t = d();
        if (i.length === 1 && t) {
            s(t.getBoundingClientRect().width / 2);
        }
        if (e) {
            s(e.getBoundingClientRect().width / 2);
        }
    }));
    const u = e.orientation === "horizontal";
    const m = [];
    if (e.ticks) {
        let o = 0;
        for (let n = 0, a = e.ticks.length; n < a; ++n) {
            const s = e.ticks[n];
            const i = e.ticks[n - 1];
            let c;
            if (e.tickLabels?.length) {
                c = e.tickLabels[n];
            } else {
                c = e.format.format(s);
            }
            const d = e.scale.position(s);
            let p = d;
            if (i !== undefined) {
                p = d - e.scale.position(i);
            }
            if (n === a - 1 && s === e.scale.maxValue) {
                p = 1 - o;
            }
            o += p;
            m.push(t("div", {
                "data-testid": gb(e.testId, `label${n}`),
                id: e.tickIds[n],
                key: n,
                ref: e => l(n)(e),
                style: {
                    [e.orientation === "vertical" ? "height" : "width"]: `${p * 100}%`
                }
            }, t("span", {
                style: n === 0 && u ? {
                    width: `${r}px`
                } : {},
                className: ke(Eae.label[e.orientation], e.disabled && Eae.disabled, {
                    [Eae.labelHorizontalFirst]: s === e.scale.minValue && n === 0 && u
                }, {
                    [Eae.labelHorizontalLast]: s === e.scale.maxValue && n === a - 1 && u
                })
            }, t(LP, {
                className: Eae.sliderTickLabel,
                wrapText: false,
                disabled: e.disabled
            }, c))));
        }
    }
    return t(o, null, t("div", {
        "data-testid": e.testId,
        className: Eae.labelContainer[e.orientation],
        ref: e => {
            D_(a, e);
            D_(c, e);
        }
    }, e.orientation === "vertical" ? m.reverse() : m));
})));

var _ae = {
    horizontal: "sas_components-Slider-Ticks-SliderTrackTicks_tick-container_horizontal",
    vertical: "sas_components-Slider-Ticks-SliderTrackTicks_tick-container_vertical"
};

var Dae = {
    horizontal: "sas_components-Slider-Ticks-SliderTrackTicks_tick_horizontal",
    vertical: "sas_components-Slider-Ticks-SliderTrackTicks_tick_vertical"
};

var Lae = {
    tickContainer: _ae,
    tick: Dae
};

const Tae = f((function e(o) {
    const n = ay();
    return t("div", {
        "data-testid": o.testId,
        className: Lae.tickContainer[o.orientation]
    }, o.orientation === "vertical" ? o.tickPositions.map(((e, n) => t("div", {
        "data-testid": gb(o.testId, `tick${n}`),
        key: n,
        className: Lae.tick[o.orientation],
        style: {
            top: `${(1 - e) * 100}%`
        }
    }))) : o.tickPositions.map(((e, a) => t("div", {
        "data-testid": gb(o.testId, `tick${a}`),
        key: a,
        className: Lae.tick[o.orientation],
        style: {
            right: n ? `${e * 100}%` : undefined,
            left: !n ? `${e * 100}%` : undefined
        }
    }))));
}));

var Rae = "sas_components-Slider-ValueGrip-SliderValueGrip_offscreen";

var kae = {
    horizontal: "sas_components-Slider-ValueGrip-SliderValueGrip_container_horizontal",
    vertical: "sas_components-Slider-ValueGrip-SliderValueGrip_container_vertical"
};

var Aae = "sas_components-Slider-ValueGrip-SliderValueGrip_containerGrip";

var Mae = "sas_components-Slider-ValueGrip-SliderValueGrip_arrowgrip";

var Nae = "sas_components-Slider-ValueGrip-SliderValueGrip_horizontal";

var Oae = "sas_components-Slider-ValueGrip-SliderValueGrip_vertical";

var Pae = "sas_components-Slider-ValueGrip-SliderValueGrip_grip-enable-focus-outline";

var Bae = "sas_components-Slider-ValueGrip-SliderValueGrip_indicator";

var zae = "sas_components-Slider-ValueGrip-SliderValueGrip_disabled";

var Fae = "sas_components-Slider-ValueGrip-SliderValueGrip_datepicker";

var jae = "sas_components-Slider-ValueGrip-SliderValueGrip_input";

var Vae = "sas_components-Slider-ValueGrip-SliderValueGrip_input-overflow-right";

var Hae = "sas_components-Slider-ValueGrip-SliderValueGrip_input-overflow-left";

var Uae = "sas_components-Slider-ValueGrip-SliderValueGrip_arrow-indicator";

var Gae = {
    offscreen: Rae,
    container: kae,
    containerGrip: Aae,
    arrowgrip: Mae,
    horizontal: Nae,
    vertical: Oae,
    gripEnableFocusOutline: Pae,
    indicator: Bae,
    disabled: zae,
    datepicker: Fae,
    input: jae,
    inputOverflowRight: Vae,
    inputOverflowLeft: Hae,
    arrowIndicator: Uae
};

const Kae = u((function e(o, a) {
    const {startDrag: r, didDrag: s} = uae({
        clientBounds: o.clientBounds,
        orientation: o.orientation,
        minPosition: o.scale.position(o.minValue),
        maxPosition: o.scale.position(o.maxValue),
        onChange: o.onChange,
        onCommit: o.onCommit
    });
    const i = jD(L_.FOCUS_OVERRIDE) === "true";
    const [l, d] = n(true);
    const u = ke(o.disabled && Gae.disabled, o.orientation === "vertical" ? Gae.vertical : Gae.horizontal, o.arrowGrips ? Gae.arrowgrip : "");
    const m = ay();
    const p = o.scale.position(o.value);
    const f = {
        zIndex: o.zIndex,
        ...o.orientation === "vertical" ? {
            top: `${(1 - p) * 100}%`
        } : {
            [m ? "right" : "left"]: `${p * 100}%`
        }
    };
    const h = c(null);
    const b = c(null);
    g(a, (() => ({
        focusGrip() {
            if (h.current) h.current.focus();
        },
        getGripElement() {
            return h.current;
        },
        getGripContainerElement() {
            return b.current;
        }
    })), [ h ]);
    return t("div", {
        "data-testid": gb(o.testId, "container"),
        className: Gae.container[o.orientation],
        ref: b
    }, t(bO, {
        id: o.ariaLabelledBy,
        testId: gb(o.testId, "invisibleText")
    }, o.ariaLabel), t("div", {
        "data-testid": o.testId,
        className: ke(l && Gae.gripEnableFocusOutline, Gae.container[o.orientation], Gae.containerGrip),
        style: f,
        ref: h,
        role: "slider",
        tabIndex: 0,
        "aria-labelledby": o.ariaLabelledBy,
        "aria-orientation": o.orientation,
        "aria-valuetext": o.formattedValue,
        "aria-valuenow": o.value,
        "aria-valuemin": o.minValue,
        "aria-valuemax": o.maxValue,
        "aria-disabled": o.disabled,
        "aria-describedby": o.ariaDescribedBy,
        "aria-readonly": o.disabled ? undefined : o.readOnly,
        onMouseDown: o.disabled || o.readOnly ? undefined : e => {
            if (e.button !== 0) return;
            e.preventDefault();
            r([ e.clientX, e.clientY ], p);
            if (h.current) {
                h.current.focus();
            }
            if (!i) {
                d(false);
            }
            o.onDragStart && o.onDragStart();
        },
        onClick: o.disabled || o.readOnly ? undefined : () => {
            if (!s && o.onClick) {
                o.onClick();
            }
        },
        onKeyDown: o.disabled || o.readOnly ? undefined : e => {
            const t = t => {
                e.preventDefault();
                d(true);
                o.onKeyAction && o.onKeyAction(t);
            };
            switch (e.key) {
              case "ArrowRight":
                t({
                    type: e.shiftKey ? "stepTwo" : "step",
                    dir: m ? "backward" : "forward"
                });
                break;

              case "ArrowUp":
                t({
                    type: e.shiftKey ? "stepTwo" : "step",
                    dir: "forward"
                });
                break;

              case "ArrowLeft":
                t({
                    type: e.shiftKey ? "stepTwo" : "step",
                    dir: m ? "forward" : "backward"
                });
                break;

              case "ArrowDown":
                t({
                    type: e.shiftKey ? "stepTwo" : "step",
                    dir: "backward"
                });
                break;

              case "Home":
                t({
                    type: "stepMax",
                    dir: "backward"
                });
                break;

              case "End":
                t({
                    type: "stepMax",
                    dir: "forward"
                });
                break;

              case "PageUp":
                t({
                    type: "stepLarge",
                    dir: "forward"
                });
                break;

              case "PageDown":
                t({
                    type: "stepLarge",
                    dir: "backward"
                });
                break;
            }
        },
        onBlur: o.disabled || o.readOnly ? undefined : () => {
            d(true);
        }
    }, t("div", {
        "data-testid": gb(o.testId, "inner"),
        className: u
    }, o.inclusive ? t("div", {
        className: ke(o.arrowGrips ? Gae.arrowIndicator : Gae.indicator, o.disabled && Gae.disabled)
    }) : null, o.children)));
}));

const Wae = u((function e(o, r) {
    const {getSliderClientRect: s, setSliderGripControlIsVisible: i} = o;
    const l = YI();
    const d = NA("Slider");
    const u = c(null);
    g(r, (() => ({
        focusInput() {
            if (u.current) u.current.focus();
        },
        getInputWidth() {
            return u.current?.getBoundingClientRect().width;
        }
    })), [ u ]);
    const m = c(undefined);
    if (m.current === undefined) {
        m.current = {
            inputValue: o.format.formatEditText ? o.format.formatEditText(o.value) : o.defaultFormat.format(o.value),
            statusMsg: null
        };
    }
    const [p, f] = n(false);
    const [{inputValue: h, statusMsg: b}, v] = n(m.current);
    {
        const [e, t] = n(o.value);
        if (e !== o.value) {
            t(o.value);
            const e = o.format.formatEditText ? o.format.formatEditText(o.value) : o.defaultFormat.format(o.value);
            v({
                inputValue: e,
                statusMsg: null
            });
        }
    }
    function y(e) {
        const t = o.format.parse(e, d, o.step);
        if (t.type !== "error") {
            if (t.result < o.minValue) {
                return {
                    type: "error",
                    result: d("input.invalid.lessThanMinimum.msg", {
                        minVal: o.format.format(o.minValue)
                    })
                };
            } else if (t.result > o.maxValue) {
                return {
                    type: "error",
                    result: d("input.invalid.greaterThanMaximum.msg", {
                        maxVal: o.format.format(o.maxValue)
                    })
                };
            }
        }
        return t;
    }
    function x() {
        if (!l.current) return;
        f(true);
        const e = o.format.formatEditText ? o.format.formatEditText(o.value) : o.defaultFormat.format(o.value);
        v({
            inputValue: e,
            statusMsg: null
        });
        o.onCancel();
    }
    function S(e) {
        if (!l.current) return;
        if (p) {
            f(false);
            return;
        }
        const t = y(e);
        let n;
        if (t.result === o.value) return;
        if (t.type === "error") {
            n = e;
        } else if (o.format.formatEditText) {
            n = o.format.formatEditText(o.value);
        } else {
            n = o.defaultFormat.format(o.value);
        }
        v({
            inputValue: n,
            statusMsg: t.type === "error" ? t.result : null
        });
        if (t.type === "success") {
            o.onCommit({
                value: t.result
            });
        }
    }
    const {isFocused: w, onFocus: C, onBlur: E} = $ae();
    const [I, _] = n("");
    a((() => {
        if (w) {
            const e = u.current?.getBoundingClientRect();
            const t = s();
            if (e && t) {
                const o = e.x + e.width > t.x + t.width;
                const n = e.x < t.x;
                if (n) {
                    _("inputOverflowLeft");
                } else if (o) {
                    _("inputOverflowRight");
                } else {
                    _("");
                }
            }
        } else {
            _("");
        }
    }), [ w, s ]);
    a((() => {
        if (w || b) {
            i?.(true);
        } else {
            i?.(false);
        }
    }), [ w, i, b ]);
    return t(SH, {
        testId: gb(o.testId, "input"),
        className: ke(Gae.input, !w && b === null && Gae.offscreen, I && o.orientation === "horizontal" && Gae[I]),
        value: h,
        ref: u,
        commitOnEnterInDialog: true,
        onChange: e => {
            v({
                inputValue: e.value,
                statusMsg: null
            });
        },
        onCommit: e => S(e.value),
        onFocus: C,
        onBlur: E,
        onCancel: x,
        status: b !== null ? "alert" : null,
        message: b,
        style: o.style,
        ariaLabel: o.ariaLabel,
        type: "number"
    });
}));

function $ae() {
    const e = c(null);
    const [t, o] = n(false);
    return {
        isFocused: t,
        onFocus: () => {
            e.current = document.activeElement;
            o(true);
        },
        onBlur: () => {
            if (e.current !== document.activeElement) {
                e.current = null;
                o(false);
            }
        }
    };
}

const Yae = MA("sliderGrip");

const qae = u(((e, r) => {
    const {orientation: s} = e;
    const i = c(null);
    const l = c(null);
    const d = c(null);
    a((() => {
        if (s === "vertical" && d.current) {
            const e = parseInt(window.getComputedStyle(d.current).paddingInlineStart) ?? 0;
            const t = i.current?.getInputWidth?.() ?? 0;
            d.current.style.minWidth = `${t + e}px`;
        }
    }), [ s ]);
    g(r, (() => ({
        getGripContainerWidth() {
            return l.current?.getGripContainerElement()?.getBoundingClientRect().width;
        },
        getGripLabelElementWidth() {
            return d.current?.getBoundingClientRect().width;
        }
    })));
    const u = e.scale.position(e.value);
    const m = e.renderGripInput ?? (e => t(Wae, Ee({}, e, {
        ref: e.ref
    })));
    const p = e.disabled || e.readOnly || e.hideInput;
    const f = Yae();
    const h = e.ariaLabelledBy ? e.ariaLabelledBy.concat(" ", f) : f;
    const b = Intl.NumberFormat(jV(), {
        maximumFractionDigits: 20
    });
    const [v, y] = n("");
    const x = fO({
        tooltip: v
    });
    a((() => {
        const t = document.getElementById(e.ariaDescribedBy ?? "");
        const o = t ? t.getElementsByTagName("label")[0] : null;
        const n = o ? UA(o) : false;
        if (o && n) {
            const e = o.innerText;
            y(e);
        } else {
            y("");
        }
    }), [ e.ariaDescribedBy ]);
    D_(x, l.current?.getGripElement());
    return t(o, null, t(Kae, {
        testId: e.testId,
        ariaLabel: e.ariaLabel,
        ariaLabelledBy: h,
        ariaDescribedBy: e.ariaDescribedBy,
        disabled: e.disabled,
        readOnly: e.readOnly,
        ref: l,
        value: e.value,
        formattedValue: e.format.format(e.value),
        minValue: e.minValue,
        maxValue: e.maxValue,
        type: e.type,
        scale: e.scale,
        clientBounds: e.clientBounds,
        orientation: e.orientation,
        arrowGrips: e.arrowGrips,
        inclusive: e.inclusive,
        zIndex: e.zIndex,
        sliderHasTicks: e.sliderHasTicks,
        onDragStart: e.onDragStart,
        onChange: e.disabled || e.readOnly ? undefined : ({position: t, didDrag: o}) => {
            e.onChange && e.onChange({
                value: e.scale.value(t, o)
            });
        },
        onCommit: e.disabled || e.readOnly ? undefined : ({position: t, didDrag: o}) => {
            e.onCommit && e.onCommit({
                value: e.scale.value(t, o)
            });
        },
        onClick: p ? undefined : () => {
            i.current && i.current.focusInput();
        },
        onKeyAction: e.disabled || e.readOnly ? undefined : ({type: t, dir: o}) => {
            let n;
            if (t === "stepMax") {
                n = o === "forward" ? e.maxValue : e.minValue;
            } else {
                let a = 0;
                if (t === "step") {
                    a = e.stepValue;
                } else if (t === "stepTwo") {
                    a = e.stepMediumValue;
                } else if (t === "stepLarge") {
                    a = e.stepLargeValue;
                }
                n = e.value;
                if (typeof a === "number") {
                    n += (o === "forward" ? 1 : -1) * a;
                    n = Vne(n, e.stepValue, b, e.disableRoundToStep);
                } else {
                    n = a(n, {
                        type: o
                    });
                }
                if (n > e.maxValue) {
                    n = e.maxValue;
                } else if (n < e.minValue) {
                    n = e.minValue;
                }
            }
            e.onChange && e.onChange({
                value: n
            });
            e.onCommit && e.onCommit({
                value: n
            });
        }
    }), t(cae, {
        ref: d,
        testId: gb(e.testId, "label"),
        disabled: e.disabled,
        className: e.gripLabelClassName,
        position: u,
        orientation: e.orientation,
        label: e.format.format(e.value),
        handleLabelTokens: e.handleLabelTokens,
        hideLabel: e.hideLabel,
        isRange: e.isRange,
        onPress: p ? undefined : () => {
            i.current && i.current.focusInput();
        }
    }, e.scale.minValue === e.scale.maxValue || p ? null : m({
        testId: e.testId,
        ref: i,
        orientation: e.orientation,
        position: u,
        value: e.value,
        format: e.format,
        defaultFormat: e.defaultFormat,
        step: e.stepValue,
        minValue: e.minValue,
        maxValue: e.maxValue,
        onCommit: ({value: t}) => {
            if (t < e.minValue) {
                t = e.minValue;
            } else if (t > e.maxValue) {
                t = e.maxValue;
            }
            if (e.onChange && e.value !== t) e.onChange({
                value: t
            });
            e.onCommit && e.onCommit({
                value: t
            });
        },
        onCancel: () => {
            l.current?.focusGrip();
        },
        type: e.type,
        ariaLabel: e.inputAriaLabel,
        getSliderClientRect: e.getSliderClientRect,
        setSliderGripControlIsVisible: e.setSliderGripControlIsVisible
    })));
}));

var Xae = {
    horizontal: "sas_components-Slider-Slider_container_horizontal",
    vertical: "sas_components-Slider-Slider_container_vertical"
};

var Zae = "sas_components-Slider-Slider_no-ticks";

var Jae = {
    horizontal: "sas_components-Slider-Slider_track_horizontal",
    vertical: "sas_components-Slider-Slider_track_vertical"
};

var Qae = {
    container: Xae,
    noTicks: Zae,
    track: Jae
};

fb(qt);

const ere = fae.createFromMinMax(0, 100);

const tre = e => t(sre, Ee({}, e, {
    values: [ {
        type: "value",
        valueType: e.valueType,
        value: e.value,
        exclusive: e.exclusive,
        onChange: e.onChange,
        onCommit: e.onCommit
    } ],
    gripAriaText: e.gripAriaText
}));

const ore = e => {
    const [o, a] = n(false);
    return t(sre, Ee({}, e, {
        sliderGripControlIsVisible: o,
        setSliderGripControlIsVisible: a,
        values: [ {
            type: "range",
            valueType: e.valueType,
            minValue: e.minValue,
            maxValue: e.maxValue,
            minExclusive: e.minExclusive,
            maxExclusive: e.maxExclusive,
            onChange: e.onChange,
            onCommit: e.onCommit
        } ],
        minGripAriaText: e.minGripAriaText,
        maxGripAriaText: e.maxGripAriaText,
        rangeAriaText: e.rangeAriaText
    }));
};

const nre = MA("sliderTickLabels");

class are {
    constructor(e, t, o, n, a) {
        this._scale = e;
        this._step = t ?? 1;
        this._numberFormat = o ?? new Intl.NumberFormat(undefined, {
            maximumFractionDigits: 20
        });
        this._disableRoundToStep = n;
        this._isDateType = a;
    }
    value(e, t) {
        const o = this._scale.value(e);
        const n = this._disableRoundToStep && (this._isDateType || !t || o === this._scale.minValue || o === this._scale.maxValue);
        return Vne(o, this._step, this._numberFormat, n);
    }
    get minValue() {
        return this._scale.minValue;
    }
    get maxValue() {
        return this._scale.maxValue;
    }
    position(e) {
        return this._scale.position(e);
    }
}

const rre = (e, t, o) => {
    const n = t.indexOf(e);
    return o[n];
};

const sre = e => {
    const a = NA("Slider");
    const s = e.orientation || "horizontal";
    const i = e.arrowGrips ?? false;
    const l = jV();
    const d = new jne(l, {
        maximumFractionDigits: 20
    }, e.disableRoundToStep);
    const u = e.format || d;
    const m = r((() => {
        const t = new Intl.NumberFormat(l, {
            maximumFractionDigits: 20
        });
        const o = e.step ?? 1;
        let n;
        if (e.scale === undefined) {
            n = ere;
        } else if (Array.isArray(e.scale)) {
            n = fae.createFromMinMax(Vne(e.scale[0], o, t, e.disableRoundToStep), Vne(e.scale[1], o, t, e.disableRoundToStep));
        } else {
            n = e.scale;
        }
        return new are(n, e.step ?? 1, t, e.disableRoundToStep, e.isDateType);
    }), [ e.scale, e.step, l, e.disableRoundToStep, e.isDateType ]);
    const p = e.step ?? 1;
    const f = e.stepMedium ?? Gne("medium", p, m);
    const g = e.stepLarge ?? Gne("large", p, m);
    const h = e.disabled || m.minValue === m.maxValue;
    const b = Une(m, e.ticks, e.tickLabels?.length, p);
    const v = nre(b.length);
    const y = c(null);
    const x = c(null);
    const S = c(null);
    let w = undefined;
    const [C] = kN((() => {
        if (e.orientation === "vertical" && x.current) {
            const e = y.current?.getBoundingClientRect().width;
            const t = S.current?.getGripContainerWidth() ?? 0;
            const o = S.current?.getGripLabelElementWidth() ?? 0;
            if (e) {
                const n = e - t - o;
                x.current.style.maxWidth = `${n}px`;
            }
        }
    }));
    D_(C, y.current);
    const E = () => y.current?.getBoundingClientRect();
    const [I, _] = n([ -1, "single" ]);
    const D = c(null);
    const L = {
        getSize() {
            if (!D.current) {
                return undefined;
            }
            const e = D.current.getBoundingClientRect();
            return {
                width: e.width,
                height: e.height
            };
        }
    };
    const T = ay();
    const R = e.disabled || e.readOnly ? undefined : t => {
        if (!D.current) {
            return undefined;
        }
        const o = D.current.getBoundingClientRect();
        const n = s === "vertical" ? (o.bottom - t.clientY) / o.height : (T ? o.right - t.clientX : t.clientX - o.left) / o.width;
        const a = m.value(n);
        let r = Infinity, i = undefined, l = "value";
        for (const t of e.values) {
            if (t.type !== "range") {
                const e = Math.abs(t.value - a);
                if (e < r || e === r && a > t.value) {
                    r = e;
                    i = t;
                    l = "value";
                }
            } else {
                const e = Math.abs(t.minValue - a), o = Math.abs(t.maxValue - a);
                if (e < r || e === r && a > t.minValue) {
                    r = e;
                    i = t;
                    l = "minValue";
                }
                if (o < r || o === r && a > t.maxValue) {
                    r = o;
                    i = t;
                    l = "maxValue";
                }
            }
        }
        if (i !== undefined) {
            if (i.type !== "range") {
                i.onChange({
                    value: a
                });
                if (i.onCommit) {
                    i.onCommit({
                        value: a
                    });
                }
            } else {
                i.onChange({
                    minValue: l === "minValue" ? a : i.minValue,
                    maxValue: l === "maxValue" ? a : i.maxValue
                });
                if (i.onCommit) {
                    i.onCommit({
                        minValue: l === "minValue" ? a : i.minValue,
                        maxValue: l === "maxValue" ? a : i.maxValue
                    });
                }
            }
        }
    };
    const k = e.values.map(((n, r) => {
        const [c, y] = ire(e.values[r - 1], e.values[r + 1], m);
        w = n.valueType;
        const x = !!e.hideValueLabel || !!e.hideInput || !!e.disabled || !!e.readOnly;
        if (n.type !== "range") {
            let w = 1;
            if (I[0] === r && I[1] === "single") {
                w = 2;
            }
            const C = new Intl.NumberFormat(l, {
                maximumFractionDigits: 20
            });
            const D = Vne(n.value, e.step ?? 1, C, e.disableRoundToStep);
            const T = lre(D, c, y);
            const k = x && e.ariaLabel ? e.ariaLabel : a("sliderGrip.sliderThumb.aria");
            return t(o, {
                key: r
            }, n.valueType !== gae.LessThan ? null : t(Jne, {
                testId: gb(e.testId, "range"),
                disabled: h,
                xStyle: {
                    orientation: s,
                    minPos: m.position(c),
                    maxPos: m.position(T)
                },
                onClick: R
            }), t(qae, {
                setSliderGripControlIsVisible: e.setSliderGripControlIsVisible,
                testId: gb(e.testId, "valueGrip"),
                disabled: h,
                readOnly: e.readOnly,
                value: T,
                type: bae.Single,
                minValue: c,
                maxValue: y,
                inclusive: !n.exclusive,
                onChange: n.onChange,
                onCommit: n.onCommit,
                zIndex: w,
                format: u,
                defaultFormat: d,
                disableRoundToStep: e.disableRoundToStep,
                clientBounds: L,
                scale: m,
                orientation: s,
                hideLabel: !!e.hideValueLabel,
                hideInput: x,
                stepValue: p,
                stepMediumValue: f,
                stepLargeValue: g,
                gripLabelClassName: e.gripLabelClassName,
                renderGripInput: e.renderGripInput,
                handleLabelTokens: e.handleLabelTokens,
                onDragStart: e.disabled || e.readOnly ? undefined : () => _([ r, "single" ]),
                inputAriaLabel: a("slider.numericValueInput.aria"),
                ariaLabelledBy: x ? e.ariaLabelledBy : undefined,
                ariaLabel: e.gripAriaText ?? k,
                ariaDescribedBy: rre(n.value, b, v),
                arrowGrips: i,
                getSliderClientRect: E,
                ref: S,
                sliderHasTicks: !!e.ticks
            }), n.valueType !== gae.GreaterThan ? null : t(Jne, {
                testId: gb(e.testId, "range"),
                disabled: h,
                xStyle: {
                    orientation: s,
                    minPos: m.position(T),
                    maxPos: m.position(y)
                },
                onClick: R
            }));
        } else {
            const b = new Intl.NumberFormat(l, {
                maximumFractionDigits: 20
            });
            const v = Vne(n.minValue, e.step ?? 1, b, e.disableRoundToStep);
            const S = Vne(n.maxValue, e.step ?? 1, b, e.disableRoundToStep);
            const C = lre(v, c, y);
            const D = lre(S, c, y);
            let T = 1, k = 1;
            if (I[1] === "end") {
                k = 2;
            } else if (I[1] === "start") {
                T = 2;
            }
            return t(o, {
                key: r
            }, t(qae, {
                setSliderGripControlIsVisible: e.setSliderGripControlIsVisible,
                testId: gb(e.testId, "minValueGrip"),
                disabled: h,
                readOnly: e.readOnly,
                value: C,
                minValue: c,
                maxValue: D,
                type: bae.Minimum,
                inclusive: !n.minExclusive,
                zIndex: T,
                format: u,
                defaultFormat: d,
                disableRoundToStep: e.disableRoundToStep,
                scale: m,
                clientBounds: L,
                orientation: s,
                isRange: true,
                hideLabel: !!e.hideValueLabel,
                hideInput: x,
                stepValue: p,
                stepMediumValue: f,
                stepLargeValue: g,
                gripLabelClassName: e.gripLabelClassName,
                renderGripInput: e.renderGripInput,
                handleLabelTokens: e.handleLabelTokens,
                inputAriaLabel: a("slider.numericValueInput.aria"),
                ariaLabel: e.minGripAriaText ?? a("sliderGrip.sliderMinThumb.aria"),
                arrowGrips: i,
                onDragStart: e.disabled || e.readOnly ? undefined : () => _([ r, "start" ]),
                onChange: e.disabled || e.readOnly ? undefined : e => {
                    n.onChange({
                        minValue: e.value,
                        maxValue: D
                    });
                },
                onCommit: e.disabled || e.readOnly ? undefined : e => {
                    if (n.onCommit) {
                        n.onCommit({
                            minValue: e.value,
                            maxValue: D
                        });
                    }
                },
                getSliderClientRect: E
            }), t(pae, {
                sliderGripControlIsVisible: e.sliderGripControlIsVisible,
                testId: gb(e.testId, "rangeGrip"),
                disabled: h,
                readOnly: e.readOnly,
                startValue: C,
                endValue: D,
                minValue: c,
                maxValue: y,
                format: u,
                disableRoundToStep: e.disableRoundToStep,
                hideLabel: !!e.hideValueLabel,
                scale: m,
                clientBounds: L,
                orientation: s,
                showExclusive: w === hae.Exclusive,
                stepValue: p,
                stepMediumValue: f,
                stepLargeValue: g,
                gripLabelClassName: e.gripLabelClassName,
                handleLabelTokens: e.handleLabelTokens,
                ariaLabel: e.rangeAriaText,
                onPress: R,
                onChange: e.disabled || e.readOnly ? undefined : e => {
                    n.onChange({
                        minValue: e.startValue,
                        maxValue: e.endValue
                    });
                },
                onCommit: e.disabled || e.readOnly ? undefined : e => {
                    if (n.onCommit) n.onCommit({
                        minValue: e.startValue,
                        maxValue: e.endValue
                    });
                }
            }), t(qae, {
                setSliderGripControlIsVisible: e.setSliderGripControlIsVisible,
                testId: gb(e.testId, "maxValueGrip"),
                disabled: h,
                readOnly: e.readOnly,
                value: D,
                minValue: C,
                maxValue: y,
                type: bae.Maximum,
                inclusive: !n.maxExclusive,
                zIndex: k,
                format: u,
                defaultFormat: d,
                disableRoundToStep: e.disableRoundToStep,
                scale: m,
                clientBounds: L,
                orientation: s,
                isRange: true,
                hideLabel: !!e.hideValueLabel,
                hideInput: x,
                stepValue: p,
                stepMediumValue: f,
                stepLargeValue: g,
                gripLabelClassName: e.gripLabelClassName,
                renderGripInput: e.renderGripInput,
                handleLabelTokens: e.handleLabelTokens,
                inputAriaLabel: a("slider.numericValueInput.aria"),
                ariaLabel: e.maxGripAriaText ?? a("sliderGrip.sliderMaxThumb.aria"),
                arrowGrips: i,
                onDragStart: e.disabled || e.readOnly ? undefined : () => _([ r, "end" ]),
                onChange: e.disabled || e.readOnly ? undefined : e => {
                    n.onChange({
                        minValue: C,
                        maxValue: e.value
                    });
                },
                onCommit: e.disabled || e.readOnly ? undefined : e => {
                    n.onCommit && n.onCommit({
                        minValue: C,
                        maxValue: e.value
                    });
                },
                getSliderClientRect: E
            }));
        }
    }));
    const A = C_();
    const M = e.values[0] && e.values[0].type === "range" ? true : !e.hideInput && !e.hideValueLabel && !e.readOnly && !e.disabled;
    const N = e.ariaLabelledBy ? undefined : e.ariaLabel ?? a("slider.default.aria");
    const O = {
        ...cre(A, {
            gripLabelOverrides: e.handleLabelTokens,
            tickLabelOverrides: e.tickLabelTokens,
            valueType: e.values[0].valueType
        }),
        ...e.theme?.(A)
    };
    return t("div", {
        className: ke(Qae.container[s], !e.ticks && !e.tickLabels && Qae.noTicks, e.className),
        style: {
            ...O,
            ...e.style
        },
        "data-testid": e.testId,
        id: e.id,
        "aria-label": M ? N : undefined,
        "aria-labelledby": !M ? undefined : e.ariaLabelledBy,
        role: M ? "group" : undefined,
        ref: y
    }, t(Iae, {
        testId: gb(e.testId, "tickLabels"),
        disabled: h,
        ticks: b,
        tickIds: v,
        tickLabels: e.tickLabels,
        format: u,
        scale: m,
        orientation: s,
        labelTokens: e.tickLabelTokens,
        ref: x
    }), t("div", {
        className: ke(Qae.track[s], w === hae.Exclusive ? e.className : e.trackClassName),
        ref: D,
        style: e.trackStyle,
        "data-testid": gb(e.testId, "track"),
        onClick: R
    }, t(Tae, {
        testId: gb(e.testId, "trackTicks"),
        orientation: s,
        tickPositions: b.map(((e, t, o) => {
            if (e === m.maxValue && t === o.length - 1) {
                return 1;
            }
            return m.position(e);
        }))
    })), k);
};

function ire(e, t, o) {
    const n = [ 0, 0 ];
    if (e === undefined) {
        n[0] = o.minValue;
    } else if (e.type === "range") {
        n[0] = e.maxValue;
    } else {
        n[0] = e.value;
    }
    if (t === undefined) {
        n[1] = o.maxValue;
    } else if (t.type === "range") {
        n[1] = t.minValue;
    } else {
        n[1] = t.value;
    }
    return n;
}

function lre(e, t, o) {
    let n = Math.max(e, t);
    n = Math.min(n, o);
    return n;
}

const cre = (e, t) => ({
    ...__({
        "spacing-xs": e.tokensExperimental["space-base-xs"]
    }, "slider"),
    ...__({
        bd: e.tokensExperimental["color-container-border-4"],
        bg: t.valueType === hae.Exclusive ? e.tokensExperimental["color-action-background-on-off-selected"] : e.tokensExperimental["color-container-background-0"],
        "top-bd": e.tokensExperimental["color-container-border-4"]
    }, "slider-track"),
    ...__({
        "spacing-l": e.tokensExperimental["space-base-l"],
        "spacing-xl": e.tokensExperimental["space-base-xl"]
    }, "slider-datepicker"),
    ...__({
        "spacing-squish-xs": e.tokensExperimental["space-squish-xs"],
        "font-size-m": e.tokensExperimental["font-size-body-text-m"]
    }, "slider-value-grip"),
    ...__({
        bg: e.tokensExperimental["color-action-background-control-normal"],
        bd: e.tokensExperimental["color-action-border-control-normal"],
        "disabled-bd": e.tokensExperimental["color-action-border-control-disabled"],
        "indicator-bg": e.tokensExperimental["color-icon-secondary"],
        "spacing-s": e.tokensExperimental["space-base-s"],
        "indicator-disabled-bg": e.tokensExperimental["color-action-background-control-disabled"]
    }, "slider-grip"),
    ...__({
        "spacing-xs": e.tokensExperimental["space-base-xs"],
        "font-size-s": e.tokensExperimental["font-size-body-text-s"],
        fg: e.tokensExperimental["color-body-text"],
        "disabled-fg": e.tokensExperimental["color-action-text-control-disabled"],
        ...t.tickLabelOverrides?.font,
        ...t.tickLabelOverrides?.theme?.()
    }, "slider-tick-label"),
    ...__({
        "spacing-xs": e.tokensExperimental["space-base-xs"],
        "spacing-m": e.tokensExperimental["space-base-m"],
        "font-size-m": e.tokensExperimental["font-size-body-text-m"],
        fg: e.tokensExperimental["color-action-text-control-normal"],
        "disabled-fg": e.tokensExperimental["color-action-text-control-disabled"],
        ...t.gripLabelOverrides?.font,
        ...t.gripLabelOverrides?.theme?.()
    }, "slider-grip-label"),
    ...__({
        bg: e.tokensExperimental["color-action-background-control-normal"]
    }, "slider-datepicker"),
    ...__({
        fg: e.tokensExperimental["color-container-border-4"]
    }, "slider-track-ticks"),
    ...!e.enableNovaTokens && dre(e, t)
});

const dre = (e, t) => {
    let o;
    let n;
    switch (e.themeVariant) {
      case "high-contrast":
        o = e.c.n2;
        n = e.c.white;
        break;

      case "dark":
        o = e.c.white;
        n = e.c.white;
        break;

      default:
        o = e.c.n_1;
        n = e.c.n_1;
        break;
    }
    switch (e.baseReportThemeName) {
      case "highcontrast2018":
      case "highcontrast2017":
        o = {
            fg: e.c.white
        };
        return {
            ...__({
                bg: t.valueType === hae.Exclusive ? e.stateSecondaryToggle.selected.bg : e.c.black,
                bd: e.c.white,
                "top-bd": e.c.white
            }, "slider-track"),
            ...__({
                "font-size-m": e.font.size.m
            }, "slider-value-grip"),
            ...__({
                bg: e.stateSecondaryToggle.normal.bg,
                bd: e.stateSecondaryToggle.normal.bd,
                "indicator-bg": e.stateSecondaryToggle.selected.bg
            }, "slider-grip"),
            ...__({
                bg: e.backgrounds.panes.bg
            }, "slider-datepicker"),
            ...__({
                fg: e.c.white
            }, "slider-track-ticks")
        };
    }
    switch (e.themeVariant) {
      case "high-contrast":
        return {
            ...__({
                bg: t.valueType === hae.Exclusive ? e.stateSecondaryToggle.selected.bg : e.c.n_5,
                bd: e.c.n2,
                "top-bd": e.c.n2
            }, "slider-track"),
            ...__({
                "font-size-m": e.font.size.m
            }, "slider-value-grip"),
            ...__({
                bg: e.stateSecondaryToggle.normal.bg,
                bd: e.stateSecondaryToggle.normal.bd,
                "indicator-bg": e.stateSecondaryToggle.selected.bg
            }, "slider-grip"),
            ...__({
                bg: e.backgrounds.panes.bg
            }, "slider-datepicker"),
            ...__({
                fg: e.c.n2
            }, "slider-track-ticks")
        };

      case "dark":
        return {
            ...__({
                bg: t.valueType === hae.Exclusive ? e.stateSecondaryToggle.selected.bg : e.c.p_3,
                bd: e.c.p_2,
                "top-bd": e.c.p_2
            }, "slider-track"),
            ...__({
                "font-size-m": e.font.size.m
            }, "slider-value-grip"),
            ...__({
                bg: e.stateSecondaryToggle.normal.bg,
                bd: e.stateSecondaryToggle.normal.bd,
                "indicator-bg": e.stateSecondaryToggle.selected.bg
            }, "slider-grip"),
            ...__({
                bg: e.backgrounds.panes.bg
            }, "slider-datepicker"),
            ...__({
                fg: Jv(e.c.white, .3)
            }, "slider-track-ticks")
        };

      default:
        return {
            ...__({
                bg: t.valueType === hae.Exclusive ? e.stateSecondaryToggle.selected.bg : e.c.n5,
                bd: e.c.n3,
                "top-bd": e.c.n_1
            }, "slider-track"),
            ...__({
                "font-size-m": e.font.size.m
            }, "slider-value-grip"),
            ...__({
                bg: e.stateSecondaryToggle.normal.bg,
                bd: e.stateSecondaryToggle.normal.bd,
                "indicator-bg": e.stateSecondaryToggle.selected.bg
            }, "slider-grip"),
            ...__({
                fg: o,
                "font-size-s": e.font.size.s,
                "disabled-fg": e.stateStandard.disabled.fg,
                ...t.tickLabelOverrides?.font,
                ...t.tickLabelOverrides?.theme?.()
            }, "slider-tick-label"),
            ...__({
                fg: n,
                "font-size-m": e.font.size.m,
                "disabled-fg": e.stateStandard.disabled.fg,
                ...t.gripLabelOverrides?.font,
                ...t.gripLabelOverrides?.theme?.()
            }, "slider-grip-label"),
            ...__({
                bg: e.backgrounds.panes.bg
            }, "slider-datepicker"),
            ...__({
                fg: e.c.n_1
            }, "slider-track-ticks")
        };
    }
};

const ure = u((function e(o, r) {
    const [s, i] = n(false);
    const l = c(null);
    g(r, (() => ({
        focusInput() {
            l.current?.focus();
        }
    })));
    const {setSliderGripControlIsVisible: d} = o;
    a((() => {
        if (s) {
            d?.(true);
        } else {
            d?.(false);
        }
    }), [ s, d ]);
    return t(D$, Ee({}, o.datePickerProps, {
        testId: o.testId,
        enableResetButton: false,
        ariaLabel: o.ariaLabel,
        ref: l,
        className: ke(Gae.datepicker, o.datePickerProps.className, !s && Gae.offscreen),
        style: o.datePickerProps.style,
        value: new Date(o.value),
        onChange: e => {
            o.onCommit({
                value: e.value?.getTime() ?? (new Date).getTime()
            });
        },
        onCancel: o.onCancel,
        onFocusIn: () => i(true),
        onFocusOut: e => i(e === false ? true : false)
    }));
}));

var mre = {
    horizontal: "sas_components-Slider-DateSlider_composite-input-padding_horizontal",
    vertical: "sas_components-Slider-DateSlider_composite-input-padding_vertical"
};

var pre = {
    compositeInputPadding: mre
};

const fre = e => {
    const [o, a] = n(false);
    const r = NA("Slider");
    let s;
    let i;
    if (e.type === undefined || e.type === "value") {
        i = [ {
            type: "value",
            value: e.value.getTime(),
            valueType: e.valueType,
            exclusive: e.exclusive,
            onChange({value: t}) {
                e.onChange({
                    value: new Date(t)
                });
            },
            onCommit({value: t}) {
                e.onCommit?.({
                    value: new Date(t)
                });
            }
        } ];
        s = {
            gripAriaText: e.gripAriaText
        };
    } else if (e.type === "range") {
        i = [ {
            type: "range",
            minValue: e.minValue.getTime(),
            maxValue: e.maxValue.getTime(),
            valueType: e.valueType,
            minExclusive: e.minExclusive,
            maxExclusive: e.maxExclusive,
            onChange({minValue: t, maxValue: o}) {
                e.onChange({
                    minValue: new Date(t),
                    maxValue: new Date(o)
                });
            },
            onCommit({minValue: t, maxValue: o}) {
                e.onCommit?.({
                    minValue: new Date(t),
                    maxValue: new Date(o)
                });
            }
        } ];
        s = {
            minGripAriaText: e.minGripAriaText,
            maxGripAriaText: e.maxGripAriaText,
            rangeAriaText: e.rangeAriaText
        };
    } else {
        ZI(e.type);
    }
    const l = hre(e.scale[0]);
    const c = hre(e.scale[1]);
    let d;
    if (e.dateType === undefined || e.dateType === "date") {
        d = {
            type: "date",
            format: e.format,
            showWeekNumbers: e.showWeekNumbers,
            disabledDays: e.disabledDays,
            minDate: l,
            maxDate: c
        };
    } else if (e.dateType === "datetime") {
        d = {
            type: "datetime",
            format: e.format,
            showWeekNumbers: e.showWeekNumbers,
            disabledDays: e.disabledDays,
            minDate: l,
            maxDate: c,
            showMilliseconds: e.showMilliseconds,
            show24HourClock: e.show24HourClock,
            style: {
                minWidth: "11rem"
            }
        };
    } else if (e.dateType === "time") {
        d = {
            type: "time",
            format: e.format,
            showMilliseconds: e.showMilliseconds,
            show24HourClock: e.show24HourClock
        };
    } else if (e.dateType === "month" || e.dateType === "quarter" || e.dateType === "week") {
        d = {
            type: e.dateType,
            format: e.format,
            minDate: l,
            maxDate: c
        };
    }
    const u = kW({
        type: e.dateType ?? "date",
        show24HourClock: e.dateType === "datetime" && e.show24HourClock === true || e.dateType === "time" && e.show24HourClock === true ? true : false
    });
    const m = (e, t, o) => {
        const n = t === "forward" ? 1 : -1;
        const a = t === "forward" ? 3 : -3;
        const r = t === "forward" ? 10 : -10;
        const s = e;
        let i = s.getDate();
        let l;
        switch (o) {
          case "datetime":
          case "time":
            return new Date(e.setSeconds(e.getSeconds() + n));

          case "minute":
            return new Date(e.setMinutes(e.getMinutes() + n));

          case "hour":
            return new Date(e.setHours(e.getHours() + n));

          case "month":
            l = e.getMonth() + n;
            switch (l) {
              case 1:
                i = Math.min(i, 28);
                break;

              case 3:
              case 5:
              case 8:
              case 10:
                i = Math.min(i, 30);
                break;
            }
            s.setDate(i);
            s.setMonth(l);
            return s;

          case "quarter":
            l = e.getMonth() + a;
            if (l === 1) {
                i = Math.min(i, 28);
            } else if (l === 3 || l === 5 || l === 8 || l === 10) {
                i = Math.min(i, 30);
            }
            s.setDate(i);
            s.setMonth(l);
            return s;

          case "year":
            return new Date(e.setFullYear(e.getFullYear() + n));

          case "decade":
            return new Date(e.setFullYear(e.getFullYear() + r));

          default:
            return new Date(e.setDate(e.getDate() + n));
        }
    };
    const p = (t, {type: o}) => m(t, o, e.dateType);
    const f = (t, {type: o}) => {
        switch (e.dateType) {
          case "datetime":
          case "time":
            return m(t, o, "minute");

          case "month":
            return m(t, o, "month");

          case "quarter":
            return m(t, o, "year");

          default:
            return m(t, o, "month");
        }
    };
    const g = (t, {type: o}) => {
        switch (e.dateType) {
          case "datetime":
          case "time":
            return m(t, o, "hour");

          case "month":
            return m(t, o, "year");

          case "quarter":
            return m(t, o, "decade");

          default:
            return m(t, o, "year");
        }
    };
    const h = e.dateType === "datetime" ? r("slider.dateTimeInput.aria") : e.dateType === "time" ? r("slider.timeInput.aria") : r("slider.dateInput.aria");
    return t(sre, Ee({}, s, {
        sliderGripControlIsVisible: o,
        className: e.className,
        disabled: e.disabled,
        readOnly: e.readOnly,
        arrowGrips: e.arrowGrips,
        hideInput: e.hideInput,
        hideValueLabel: e.hideValueLabel,
        theme: e.theme,
        style: e.style,
        testId: e.testId,
        ariaLabel: e.ariaLabel,
        ariaLabelledBy: e.ariaLabelledBy,
        orientation: e.orientation,
        scale: [ l.getTime(), c.getTime() ],
        gripLabelClassName: pre.compositeInputPadding[e.orientation ?? "horizontal"],
        renderGripInput: e => t(ure, Ee({}, e, {
            testId: gb(e.testId, "datePicker"),
            ref: e.ref,
            datePickerProps: d,
            ariaLabel: h,
            setSliderGripControlIsVisible: a
        })),
        format: {
            format(t) {
                return (e.format ?? u)(new Date(t));
            },
            formatEditText() {
                throw new Error;
            },
            parse() {
                throw new Error;
            }
        },
        values: i,
        handleLabelTokens: e.handleLabelTokens,
        tickLabelTokens: e.tickLabelTokens,
        ticks: e.ticks?.map((e => hre(e).getTime())),
        step: gre(e.step ?? p),
        stepMedium: gre(e.stepMedium ?? f),
        stepLarge: gre(e.stepLarge ?? g),
        disableRoundToStep: !e.roundDateValues,
        isDateType: true
    }));
};

const gre = e => (t, o) => {
    const n = new Date(t);
    const a = e(n, o);
    return a.getTime();
};

function hre(e) {
    const t = new Date("1/1/1582");
    const o = new Date("12/31/9999");
    let n = Math.max(e.getTime(), t.getTime());
    n = Math.min(n, o.getTime());
    return new Date(n);
}

pb(Yt);

let bre;

Gh("NovaComponents-ColorPicker-gui-icu").then((e => {
    bre = e;
}));

const vre = e => {
    const {value: t} = e;
    let o = false, n, a;
    const r = /^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$/;
    if (t.length !== 0 && (/^\s+$/.test(t) || isNaN(parseInt(t, 10)) || !r.test(t))) {
        o = true;
        n = bre("customTab.rgbField.error.msg");
        a = "alert";
    } else {
        o = false;
        n = undefined;
        a = undefined;
    }
    return {
        isError: o,
        message: n,
        status: a
    };
};

const yre = e => {
    const {value: t, isLive: o} = e;
    let n = false, a, r;
    if (o && /[^0-9a-fA-F]+/.test(t)) {
        n = true;
        a = bre("customTab.hexField.error.msg");
        r = "alert";
    } else if (!o && t.length !== 0 && !/^([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/.test(t)) {
        n = true;
        a = bre("customTab.hexField.error.msg");
        r = "alert";
    } else {
        n = false;
        a = undefined;
        r = undefined;
    }
    return {
        isError: n,
        message: a,
        status: r
    };
};

const xre = e => {
    const [t, o] = n(e.initialValue ?? "");
    const [a, r] = n({
        isError: false,
        message: undefined,
        status: undefined
    });
    const s = c(t);
    const i = c(e.adapterType ?? "RGB");
    const l = t => {
        o(t.value);
        const n = e.validateInputFunction?.({
            value: t.value,
            isLive: true
        });
        r(n ?? {
            isError: false,
            message: undefined,
            status: undefined
        });
    };
    const d = () => {
        let n;
        if (i.current === "RGB") {
            if (a.isError) return;
            if (t.length === 0) {
                n = s.current;
            } else {
                n = parseInt(t, 10).toString();
            }
            e.onCommit?.(n);
            s.current = n;
            o(n);
        }
        if (i.current === "HEX") {
            if (a.isError) return;
            const i = e.validateInputFunction?.({
                value: t,
                isLive: false
            });
            if (i?.isError) {
                r(i);
                return;
            }
            if (t.length === 0) {
                n = s.current;
            } else if (t.length === 3) {
                n = [ ...t ].reduce(((e, t) => e + t.repeat(2)), "").toUpperCase();
                s.current = n;
            } else if (t !== s.current) {
                n = t.toUpperCase();
                s.current = n;
            } else {
                return;
            }
            o(n);
            e.onCommit?.(n);
        }
    };
    const u = n => {
        if (n.reason === "blur") return;
        let l;
        if (i.current === "RGB") {
            if (t.length === 0 || a.isError) return;
            l = parseInt(t, 10).toString();
            o(l);
            e.onCommit?.(l);
            s.current = l;
        }
        if (i.current === "HEX") {
            if (t.length === 0 || a.isError) return;
            const n = e.validateInputFunction?.({
                value: t,
                isLive: false
            });
            if (n?.isError) {
                r(n);
                return;
            }
            if (t.length === 3) {
                l = [ ...t ].reduce(((e, t) => e + t.repeat(2)), "").toUpperCase();
            } else if (t !== s.current) {
                l = t.toUpperCase();
            } else {
                return;
            }
            s.current = l;
            o(l);
            e.onCommit?.(l);
        }
    };
    const m = () => {
        let e;
        if (i.current === "RGB") {
            if (t === s.current) return false;
            if (t.length === 0 || a.isError || t !== s.current) {
                e = parseInt(s.current, 10).toString();
                o(e);
                a.isError && r({
                    isError: false,
                    message: undefined,
                    status: undefined
                });
                return true;
            }
        }
        if (i.current === "HEX") {
            if (t === s.current) return false;
            if (a.isError || t.length === 0 || t !== s.current) {
                o(s.current);
                a.isError && r({
                    isError: false,
                    message: undefined,
                    status: undefined
                });
                return true;
            }
        }
    };
    return {
        value: t,
        error: a,
        setValue: o,
        setError: r,
        preservedValue: s,
        handleChange: l,
        handleBlur: d,
        handleCommit: u,
        handleCancel: m
    };
};

const Sre = (e = "#000000") => () => {
    let t = e.trim().toUpperCase();
    if (t.slice(0, 1) === "#") {
        t = t.slice(1);
    }
    if (!/^([a-fA-F0-9]{3}|[a-fA-F0-9]{6})$/.test(t)) {
        t = "000000";
    }
    if (t.length === 3) {
        t = t[0] + t[0] + t[1] + t[1] + t[2] + t[2];
    }
    t = `#${t}`;
    const {red: o, green: n, blue: a} = Ere(t);
    const {hue: r, saturation: s, value: i} = Ire(o, n, a);
    return {
        r: o,
        g: n,
        b: a,
        h: r,
        s: s,
        v: i,
        hex: t
    };
};

const wre = (e, t, o) => {
    const n = e % 360 / 60;
    const a = t / 100;
    const r = o / 100;
    const s = r * a;
    const i = s * (1 - Math.abs(n % 2 - 1));
    const l = r - s;
    let c = 0;
    let d = 0;
    let u = 0;
    const m = Math.floor(n);
    switch (m) {
      case 0:
        c = s;
        d = i;
        break;

      case 1:
        c = i;
        d = s;
        break;

      case 2:
        d = s;
        u = i;
        break;

      case 3:
        d = i;
        u = s;
        break;

      case 4:
        c = i;
        u = s;
        break;

      case 5:
        c = s;
        u = i;
        break;

      default:
        c = 0;
        u = 0;
        d = 0;
        break;
    }
    c = Math.floor((c + l) * 255);
    d = Math.floor((d + l) * 255);
    u = Math.floor((u + l) * 255);
    return {
        red: c,
        green: d,
        blue: u
    };
};

const Cre = (e, t, o) => {
    const n = e.toString(16);
    const a = t.toString(16);
    const r = o.toString(16);
    const s = `#${[ n, a, r ].map((e => e.length === 1 ? e = `0${e}` : e)).join("").toUpperCase()}`;
    return s;
};

const Ere = e => {
    let t = e;
    if (t.slice(0, 1) === "#") {
        t = t.slice(1);
    }
    if (t.length === 3) {
        t = t[0] + t[0] + t[1] + t[1] + t[2] + t[2];
    }
    const o = parseInt(t.slice(0, 2), 16);
    const n = parseInt(t.slice(2, 4), 16);
    const a = parseInt(t.slice(4, 6), 16);
    return {
        red: o,
        green: n,
        blue: a
    };
};

const Ire = (e, t, o) => {
    const n = Math.max(e, t, o);
    const a = Math.min(e, t, o);
    const r = n - a;
    let s = 0;
    let i = n === 0 ? 0 : 100 * r / n;
    const l = Math.round(n * 100 / 255);
    if (i === 0) {
        s = 0;
    } else if (e === n) {
        s = 60 * ((t - o) / r % 6);
    } else if (t === n) {
        s = 120 + 60 * (o - e) / r;
    } else if (o === n) {
        s = 240 + 60 * (e - t) / r;
    }
    if (s < 0) {
        s += 359.9;
    }
    s = Math.round(s);
    i = Math.round(i);
    return {
        hue: s,
        saturation: i,
        value: l
    };
};

const _re = e => /^#([a-fA-F0-9]{3}|[a-fA-F0-9]{6})$/.test(e);

const Dre = e => /^#[0-9a-fA-F]{3}$/.test(e);

const Lre = e => {
    if (Dre(e)) {
        return e.replace(/^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/, "#$1$1$2$2$3$3").toUpperCase();
    }
    return e.toUpperCase();
};

var Tre = "sas_components-ColorPicker-__internal__-CustomColorPicker_container";

var Rre = "sas_components-ColorPicker-__internal__-CustomColorPicker_canvas-slider-container";

var kre = "sas_components-ColorPicker-__internal__-CustomColorPicker_canvas-thumb";

var Are = "sas_components-ColorPicker-__internal__-CustomColorPicker_color-canvas";

var Mre = "sas_components-ColorPicker-__internal__-CustomColorPicker_hue-slider-track";

var Nre = "sas_components-ColorPicker-__internal__-CustomColorPicker_action-button-container";

var Ore = {
    container: Tre,
    canvasSliderContainer: Rre,
    canvasThumb: kre,
    colorCanvas: Are,
    hueSliderTrack: Mre,
    actionButtonContainer: Nre
};

const Pre = dU(SH);

const Bre = e => {
    const o = NA("ColorPicker");
    const r = e.newColor.color === "" ? e.lastSelectedColor : e.newColor;
    const i = r?.type === "automatic" && e.renderAutomaticSwatch;
    const [l, u] = n(Sre(i ? "#000000" : r?.color));
    const [m, p] = n(l.hex);
    const [f, g] = n({
        x: 0,
        y: 0
    });
    const h = c(null);
    const b = c(null);
    const v = c(false);
    const y = ay();
    const x = db();
    const S = XA();
    const w = c(null);
    const C = c(null);
    const E = c(null);
    const I = c(null);
    const _ = 60.67;
    const D = 190;
    const [L, T] = n(_);
    const [R, k] = n(D);
    const A = c(null);
    const M = c(null);
    const N = e.selectedColor?.color.toUpperCase();
    const O = e.selectedColor?.type;
    const P = l.hex;
    const B = c(i ? "standard" : r?.type);
    const z = `${!y ? "linear-gradient(to right,#000000FF,transparent)" : "linear-gradient(to left,#000000FF,transparent)"},linear-gradient(to bottom,${m},transparent)`;
    const F = yne();
    const {canvasThumbAriaLabel: j, hueSliderThumbAriaLabel: V} = F(N, O, P, B.current);
    const H = () => {
        const e = K.error.isError || W.error.isError || $.error.isError;
        const t = Y.error.isError;
        return {
            rgbFieldHasError: e,
            hexFieldHasError: t
        };
    };
    const U = t => o => {
        let n, a;
        const r = parseInt(o, 10);
        const {rgbFieldHasError: s, hexFieldHasError: i} = H();
        let c = false;
        if (s) {
            u((e => ({
                ...e,
                [t]: r
            })));
        } else {
            switch (t) {
              case "r":
                n = Cre(r, l.g, l.b);
                a = Ire(r, l.g, l.b);
                c = K.value === "";
                break;

              case "g":
                n = Cre(l.r, r, l.b);
                a = Ire(l.r, r, l.b);
                c = W.value === "";
                break;

              case "b":
                n = Cre(l.r, l.g, r);
                a = Ire(l.r, l.g, r);
                c = $.value === "";
                break;
            }
            const {hue: o, saturation: s, value: d} = a;
            if (n !== l.hex || c) {
                n !== l.hex && de(s, d);
                u((e => ({
                    ...e,
                    [t]: r,
                    h: o,
                    s: s,
                    v: d,
                    hex: n
                })));
                Y.setValue(n.slice(1));
                i && X();
                B.current = !tne.includes(n) ? "custom" : "standard";
                e.hideCustomTabActionButtons ? e.onColorSelect({
                    color: n,
                    type: B.current
                }) : e.onNewColorChange?.({
                    color: n,
                    type: B.current
                });
            }
        }
    };
    const G = t => {
        const o = `#${t}`;
        const {red: n, green: a, blue: r} = Ere(o);
        const {hue: s, saturation: i, value: c} = Ire(n, a, r);
        const {rgbFieldHasError: d} = H();
        o !== l.hex && de(i, c);
        u((e => ({
            ...e,
            r: n,
            g: a,
            b: r,
            h: s,
            s: i,
            v: c,
            hex: o
        })));
        q({
            red: n,
            green: a,
            blue: r,
            hex: o
        });
        d && X();
        B.current = !tne.includes(o) ? "custom" : "standard";
        e.hideCustomTabActionButtons ? e.onColorSelect({
            color: o,
            type: B.current
        }) : e.onNewColorChange?.({
            color: o,
            type: B.current
        });
    };
    const K = xre({
        initialValue: l.r.toString(),
        validateInputFunction: vre,
        onCommit: U("r")
    });
    const W = xre({
        initialValue: l.g.toString(),
        validateInputFunction: vre,
        onCommit: U("g")
    });
    const $ = xre({
        initialValue: l.b.toString(),
        validateInputFunction: vre,
        onCommit: U("b")
    });
    const Y = xre({
        initialValue: l.hex.slice(1),
        validateInputFunction: yre,
        onCommit: G,
        adapterType: "HEX"
    });
    const q = e => {
        const {red: t, green: o, blue: n, hex: a} = e;
        K.setValue(t.toString());
        W.setValue(o.toString());
        $.setValue(n.toString());
        Y.setValue(a.slice(1));
    };
    const X = () => {
        const e = {
            isError: false,
            message: undefined,
            status: undefined
        };
        K.setError(e);
        W.setError(e);
        $.setError(e);
        Y.setError(e);
    };
    const Z = e => {
        const {touchX: t, touchY: o, canvasWidth: n, canvasHeight: a} = e;
        let r;
        if (y) {
            r = (1 - t / n) * 100;
        } else {
            r = t / n * 100;
        }
        const s = (1 - o / a) * 100;
        return {
            saturation: Math.round(s),
            value: Math.round(r)
        };
    };
    const J = e => {
        const t = e.currentTarget.getBoundingClientRect().width;
        const o = e.currentTarget.getBoundingClientRect().height;
        const n = e.currentTarget.getBoundingClientRect().left;
        const a = e.currentTarget.getBoundingClientRect().top;
        const r = b.current?.getBoundingClientRect().width;
        const s = b.current?.getBoundingClientRect().height;
        let i;
        if ("touches" in e) {
            i = e.changedTouches[0];
        } else {
            i = e;
        }
        let l = i.clientX - n;
        let c = i.clientY - a;
        l = Math.round(Math.min(Math.max(l, 0), t));
        c = Math.round(Math.min(Math.max(c, 0), o));
        const d = Math.round(l - r / 2);
        const u = Math.round(c - s / 2);
        return {
            thumbX: d,
            thumbY: u,
            touchX: l,
            touchY: c,
            canvasWidth: t,
            canvasHeight: o
        };
    };
    const Q = e => {
        const t = J(e);
        const {saturation: o, value: n} = Z(t);
        const {red: a, green: r, blue: s} = wre(l.h, o, n);
        const i = Cre(a, r, s);
        u((e => ({
            ...e,
            r: a,
            g: r,
            b: s,
            s: o,
            v: n,
            hex: i
        })));
        q({
            red: a,
            green: r,
            blue: s,
            hex: i
        });
        g({
            x: t.thumbX,
            y: t.thumbY
        });
        B.current = !tne.includes(i) ? "custom" : "standard";
    };
    const ee = e => {
        if (![ "ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown" ].includes(e.key)) return;
        const t = h.current?.getBoundingClientRect().width;
        const o = h.current?.getBoundingClientRect().height;
        const n = b.current?.getBoundingClientRect().width;
        const a = b.current?.getBoundingClientRect().height;
        const {x: r, y: s} = f;
        let i = r + n / 2, c = s + a / 2, d = true;
        switch (e.key) {
          case "ArrowLeft":
            i -= 1;
            break;

          case "ArrowRight":
            i += 1;
            break;

          case "ArrowUp":
            c -= 1;
            break;

          case "ArrowDown":
            c += 1;
            break;

          default:
            d = false;
            break;
        }
        if (d) {
            e.stopPropagation();
            e.preventDefault();
        }
        i = Math.min(Math.max(0, i), t);
        c = Math.min(Math.max(0, c), o);
        g({
            x: i - n / 2,
            y: c - a / 2
        });
        const {saturation: m, value: p} = Z({
            touchX: i,
            touchY: c,
            canvasWidth: t,
            canvasHeight: o
        });
        const {red: v, green: y, blue: x} = wre(l.h, m, p);
        const S = Cre(v, y, x);
        q({
            red: v,
            green: y,
            blue: x,
            hex: S
        });
        u((e => ({
            ...e,
            r: v,
            g: y,
            b: x,
            s: m,
            v: p,
            hex: S
        })));
        const {rgbFieldHasError: w, hexFieldHasError: C} = H();
        (w || C) && X();
        B.current = !tne.includes(S) ? "custom" : "standard";
    };
    const te = t => {
        if (![ "ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown" ].includes(t.key)) return;
        t.preventDefault();
        t.stopPropagation();
        e.hideCustomTabActionButtons ? e.onColorSelect({
            color: l.hex,
            type: B.current
        }) : e.onNewColorChange?.({
            color: l.hex,
            type: B.current
        });
    };
    const oe = e => {
        if (e.button !== 0) return;
        e.preventDefault();
        e.stopPropagation();
        v.current = true;
        Q(e);
        b.current?.focus({
            preventScroll: true
        });
        (H().rgbFieldHasError || H().hexFieldHasError) && X();
    };
    const ne = e => {
        e.preventDefault();
        e.stopPropagation();
        if (v.current) {
            Q(e);
        }
    };
    const ae = ne;
    const re = e => {
        e.preventDefault();
        e.stopPropagation();
        if (e.changedTouches && e.changedTouches.length > 0) {
            Q(e);
            b.current?.focus({
                preventScroll: true
            });
            (H().rgbFieldHasError || H().hexFieldHasError) && X();
        }
    };
    const se = re;
    const ie = t => {
        t.preventDefault();
        t.stopPropagation();
        e.hideCustomTabActionButtons ? e.onColorSelect({
            color: l.hex,
            type: B.current
        }) : e.onNewColorChange?.({
            color: l.hex,
            type: B.current
        });
    };
    const le = t => {
        const {red: n, green: a, blue: r} = wre(t.value, l.s, l.v);
        const s = Cre(n, a, r);
        u((e => ({
            ...e,
            r: n,
            g: a,
            b: r,
            h: t.value,
            hex: s
        })));
        q({
            red: n,
            green: a,
            blue: r,
            hex: s
        });
        B.current = !tne.includes(s) ? "custom" : "standard";
        e.hideCustomTabActionButtons ? e.onColorSelect({
            color: s,
            type: B.current
        }) : e.onNewColorChange?.({
            color: s,
            type: B.current
        });
        const i = !tne.includes(s) ? s.split("").join(" ") : `${o(`color.${s.slice(1)}.aria`)}, ${s.split("").join(" ")}`;
        const c = o("customTab.slider.colorSelect.msg", {
            color: i
        });
        S?.notify(c);
        (H().rgbFieldHasError || H().hexFieldHasError) && X();
    };
    const ce = () => {
        switch (true) {
          case K.error.isError:
            w.current?.focus();
            return;

          case W.error.isError:
            C.current?.focus();
            return;

          case $.error.isError:
            E.current?.focus();
            return;

          case Y.error.isError:
            I.current?.focus();
            return;
        }
        e.onColorSelect?.({
            color: l.hex,
            type: B.current
        });
    };
    const de = (e, t) => {
        const o = h.current?.getBoundingClientRect().width;
        const n = h.current?.getBoundingClientRect().height;
        const a = b.current?.getBoundingClientRect().width;
        const r = b.current?.getBoundingClientRect().height;
        let s;
        s = Math.round(t * o / 100);
        if (y) {
            s = Math.round(o - s);
        }
        const i = Math.round((1 - e / 100) * n);
        const l = Math.round(Math.max(s, 0) - a / 2);
        const c = Math.round(Math.max(i, 0) - r / 2);
        g({
            x: l,
            y: c
        });
    };
    d((() => {
        de(l.s, l.v);
    }), [ y ]);
    const ue = s((e => {
        const {red: t, green: o, blue: n} = wre(e, 100, 100);
        const a = Cre(t, o, n);
        p(a);
    }), []);
    d((() => {
        ue(l.h);
    }), [ l.h, ue ]);
    a((() => {
        K.preservedValue.current = l.r.toString();
        W.preservedValue.current = l.g.toString();
        $.preservedValue.current = l.b.toString();
        Y.preservedValue.current = l.hex.slice(1);
    }), [ l.r, l.g, l.b, l.hex ]);
    a((() => {
        const t = t => {
            if (t.button !== 0) return;
            if (v.current) {
                v.current = false;
                e.hideCustomTabActionButtons ? e.onColorSelect({
                    color: l.hex,
                    type: B.current
                }) : e.onNewColorChange?.({
                    color: l.hex,
                    type: B.current
                });
            }
        };
        window.addEventListener("mouseup", t);
        return () => window.removeEventListener("mouseup", t);
    }), [ l.hex, e.hideCustomTabActionButtons ]);
    a((() => {
        if (e.newColor?.color === "") {
            e.hideCustomTabActionButtons ? e.onColorSelect({
                color: P,
                type: B.current
            }) : e.onNewColorChange?.({
                color: P,
                type: B.current
            });
        }
    }), [ e.newColor?.color ]);
    const me = C_();
    let pe;
    if (me.themeVariant === "light") {
        pe = "var(--focus-dark-bg)";
    } else {
        pe = "var(--focus-light-bg)";
    }
    const fe = I_({
        "focus-outline": pe,
        bd: "#000000",
        "inner-bd": "#ffffff"
    }, "canvas-thumb");
    const ge = I_({
        "canvas-bd": me.tokensExperimental["color-container-border-4"],
        "spacing-s": me.tokensExperimental["space-base-s"],
        "spacing-m": me.tokensExperimental["space-base-m"],
        "no-color-mark": me.tokensExperimental["color-status-alert"],
        "canvas-bg": "#ffffff"
    }, "custom-color-picker");
    d((() => {
        if (M.current && A.current) {
            let e = M.current.getBoundingClientRect().width ?? _;
            e = parseFloat(e.toFixed(2));
            T(Math.max(_, e));
            const t = 2 * parseFloat(getComputedStyle(A.current).gap);
            const o = 3 * e + t;
            k(Math.max(D, o));
        }
    }), [ x, me.themeVariant ]);
    return t(iN, {
        id: e.id,
        role: "tabpanel",
        "data-testid": gb(e.testId, "container"),
        orientation: "vertical",
        className: Ore.container,
        style: {
            ...ge
        }
    }, t(Tne, {
        currentColor: {
            color: N,
            type: O
        },
        newColor: {
            color: P,
            type: B.current
        },
        renderAutomaticSwatch: e.renderAutomaticSwatch
    }), t(iN, {
        "data-testid": gb(e.testId, "canvasSliderContainer"),
        className: Ore.canvasSliderContainer,
        spacing: "none"
    }, t(iN, {
        ref: h,
        "data-testid": gb(e.testId, "colorCanvas"),
        className: Ore.colorCanvas,
        spacing: "none",
        style: {
            backgroundImage: z,
            ...fe
        },
        onMouseDown: oe,
        onMouseMove: ne,
        onMouseLeave: ae,
        onTouchStart: re,
        onTouchMove: se,
        onTouchEnd: ie,
        onScroll: e => {
            e.preventDefault();
            e.stopPropagation();
            e.currentTarget.scrollLeft = 0;
            e.currentTarget.scrollTop = 0;
        }
    }, t(iN, {
        role: "img",
        tabIndex: 0,
        ref: b,
        "aria-label": j,
        "data-testid": gb(e.testId, "canvasThumb"),
        onKeyUp: te,
        onKeyDown: ee,
        className: Ore.canvasThumb,
        style: {
            left: f.x,
            top: f.y
        }
    })), t(iN, {
        spacing: "none"
    }, t(tre, {
        testId: gb(e.testId, "hueSlider"),
        ariaLabel: V,
        hideValueLabel: true,
        trackClassName: Ore.hueSliderTrack,
        scale: [ 0, 360 ],
        value: l.h,
        orientation: "vertical",
        arrowGrips: true,
        onChange: le
    }))), t(iN, {
        orientation: "vertical",
        spacing: "m",
        "data-testid": gb(e.testId, "inputFieldsContainer")
    }, t(iN, {
        ref: A,
        orientation: "horizontal",
        spacing: "xs"
    }, t(Pre, {
        ref: w,
        testId: gb(e.testId, "redField"),
        label: o("customTab.redField.label"),
        labelPosition: "top",
        maxLength: 3,
        fieldWidth: L,
        fieldMinWidth: _,
        commitOnEnterInDialog: true,
        labelSpacing: {
            topAligned: "xs"
        },
        value: K.value,
        message: K.error?.message,
        status: K.error?.status,
        onChange: K.handleChange,
        onBlur: () => {
            if (v.current) return;
            K.handleBlur();
        },
        onCommit: K.handleCommit,
        onCancel: K.handleCancel
    }), t(Pre, {
        labelContainerRef: M,
        ref: C,
        testId: gb(e.testId, "greenField"),
        label: o("customTab.greenField.label"),
        labelPosition: "top",
        maxLength: 3,
        fieldWidth: L,
        fieldMinWidth: _,
        commitOnEnterInDialog: true,
        labelSpacing: {
            topAligned: "xs"
        },
        value: W.value,
        message: W.error?.message,
        status: W.error?.status,
        onChange: W.handleChange,
        onBlur: () => {
            if (v.current) return;
            W.handleBlur();
        },
        onCommit: W.handleCommit,
        onCancel: W.handleCancel
    }), t(Pre, {
        ref: E,
        testId: gb(e.testId, "blueField"),
        label: o("customTab.blueField.label"),
        labelPosition: "top",
        maxLength: 3,
        fieldWidth: L,
        fieldMinWidth: _,
        commitOnEnterInDialog: true,
        labelSpacing: {
            topAligned: "xs"
        },
        value: $.value,
        message: $.error?.message,
        status: $.error?.status,
        onChange: $.handleChange,
        onBlur: () => {
            if (v.current) return;
            $.handleBlur();
        },
        onCommit: $.handleCommit,
        onCancel: $.handleCancel
    })), t(Pre, {
        ref: I,
        testId: gb(e.testId, "hexField"),
        label: o("customTab.hexField.label"),
        labelPosition: "top",
        maxLength: 6,
        fieldWidth: R,
        fieldMinWidth: D,
        commitOnEnterInDialog: true,
        labelSpacing: {
            topAligned: "xs"
        },
        value: Y.value,
        message: Y.error?.message,
        status: Y.error?.status,
        onChange: Y.handleChange,
        onBlur: () => {
            if (v.current) return;
            Y.handleBlur();
        },
        onCommit: Y.handleCommit,
        onCancel: Y.handleCancel
    })), !e.hideCustomTabActionButtons && t(iN, {
        "data-testid": gb(e.testId, "actionButtonContainer"),
        className: Ore.actionButtonContainer,
        spacing: "s"
    }, t(QM, {
        testId: gb(e.testId, "okButton"),
        text: o("customTab.okBtn.label"),
        onPress: ce
    }), t(QM, {
        testId: gb(e.testId, "cancelButton"),
        text: o("customTab.cancelBtn.label"),
        onPress: e.onCancelPress
    })));
};

const zre = "transparent";

let Fre = Array(7).fill(zre);

function jre(e) {
    Fre = e;
}

const Vre = i(undefined);

const Hre = () => l(Vre);

var Ure = "sas_components-ColorPicker-DefaultColorPicker_default-color-picker-container";

var Gre = "sas_components-ColorPicker-DefaultColorPicker_tabbar-container";

var Kre = {
    defaultColorPickerContainer: Ure,
    tabbarContainer: Gre
};

const Wre = fb(Yt);

const $re = MA("DefaultColorPicker");

const Yre = Dh("DefaultColorPicker");

const qre = u((({hideCustomTabActionButtons: e = false, ...o}, r) => {
    const i = Wre();
    const l = c(o.newColor);
    const d = s((e => {
        l.current = e;
    }), []);
    const u = o.lastSelectedColor ?? {
        color: "#000000",
        type: "standard"
    };
    const m = o.selectedColor;
    const p = e ? o.newColor : l.current;
    const [f, g] = $re(2);
    const h = [ {
        label: i("basicTab.label"),
        ariaControls: f
    }, {
        label: i("customTab.label"),
        ariaControls: g
    } ];
    const b = C_();
    const v = db();
    const y = v.toLowerCase();
    const x = () => {
        switch (y) {
          case "de-de-pseudo":
          case "it-it-pseudo":
            return b.themeVariant === "high-contrast" ? "25rem" : "22rem";

          case "es-es-pseudo":
          case "ru-ru-pseudo":
            return b.themeVariant === "high-contrast" ? "25.5rem" : "22rem";

          case "fr-fr-pseudo":
            return b.themeVariant === "high-contrast" ? "24.5rem" : "21.5rem";

          case "pl-pl-pseudo":
            return b.themeVariant === "high-contrast" ? "24.5rem" : "21rem";

          case "lt-lt-pseudo":
            return b.themeVariant === "high-contrast" ? "24rem" : "20.5rem";

          case "zh-cn-pseudo":
            return "20.5rem";

          case "pl-xx":
            return b.themeVariant === "high-contrast" ? "21rem" : "17.5rem";

          default:
            return "12rem";
        }
    };
    const S = () => {
        switch (y) {
          case "zh-cn-pseudo":
            if (o.numberOfRecentCustomRows && o.numberOfRecentCustomRows >= 2) {
                return e ? "25rem" : "30rem";
            }

          default:
            return e ? "25rem" : "28rem";
        }
    };
    const w = I_({
        pd: b.tokensExperimental["space-base-m"],
        height: S(),
        width: x()
    }, "color-picker");
    const C = R_()?.get("appId");
    const E = o.dataProvider ?? Hre();
    const I = o.storeRecentCustomColorsPerApplication ?? true;
    const [_, D] = n([]);
    const L = YI();
    const T = t => {
        o.onColorSelect(t);
        if (!e && t.type === "standard" && t.color !== "#000000") {
            R(t);
        }
    };
    const R = e => {
        if (!Fre.includes(e.color)) {
            jre([ e.color, ...Fre ].slice(0, 7));
        }
    };
    const k = async e => {
        const t = _.indexOf(e.color);
        let n = _.slice(0, 20);
        if (t === -1 || t >= (o.numberOfRecentCustomRows ?? 1) * 7) {
            if (t >= (o.numberOfRecentCustomRows ?? 1) * 7) {
                n.splice(t, 1);
            }
            n = [ e.color, ...n ];
            try {
                await (E?.setRecentCustomColors(n, I ? C : null));
                if (L.current) D(n);
            } catch (e) {
                Yre.error(`The call to set recent custom colors ${I ? "using ".concat(C) : ""} has failed`);
            }
        }
    };
    const A = t => {
        if (!e && t.color !== "#000000") {
            if (t.type === "standard") {
                R(t);
            } else {
                k(t);
            }
        }
        o.onColorSelect(t);
    };
    a((() => {
        let e = true;
        const t = async () => {
            if (!I && E) {
                try {
                    const t = await E.getRecentCustomColors();
                    if (e && !qI(t)) {
                        D(t);
                    }
                } catch (e) {
                    Yre.error(`The call to get recent custom colors per user across applications has failed`);
                }
            }
        };
        t();
        return () => {
            e = false;
        };
    }), [ E, I ]);
    a((() => {
        let e = true;
        const t = async () => {
            if (E && I && C) {
                try {
                    const t = await E.getRecentCustomColors(C);
                    if (e && !qI(t)) {
                        D(t);
                    }
                } catch (e) {
                    Yre.error(`The call to get recent custom colors for application ${C} has failed`);
                }
            }
        };
        t();
        return () => {
            e = false;
        };
    }), [ C, E, I ]);
    return t(iN, {
        ref: r,
        style: {
            ...w,
            ...o.style
        },
        orientation: "vertical",
        "data-testid": o.testId,
        className: ke(Kre.defaultColorPickerContainer, o.className)
    }, t(iN, {
        "data-testid": gb(o.testId, "tabbarContainer"),
        className: Kre.tabbarContainer,
        spacing: "s"
    }, t(ene, {
        testId: gb(o.testId, "tabbar"),
        stretchToFit: true,
        variant: Tte.Standard,
        visualStyle: "standard-small",
        selectedIndex: o.selectedIndex,
        onItemSelected: ({index: e}) => {
            o.onTabItemSelect(e);
        },
        items: h
    })), o.selectedIndex === 0 ? t(Fne, {
        id: f,
        testId: gb(o.testId, "basicColorPicker"),
        onColorSelect: T,
        renderAutomaticSwatch: o.renderAutomaticSwatch,
        selectedColor: m,
        newColor: p,
        lastSelectedColor: u,
        automaticColor: o.automaticColor,
        hideNoColor: o.hideNoColor,
        showColorIndicator: o.showColorIndicator ?? e,
        recentCustomColors: _,
        numberOfRecentCustomRows: o.numberOfRecentCustomRows,
        hideAutomaticColor: o.hideAutomaticColor
    }) : t(Bre, Ee({
        id: g,
        testId: gb(o.testId, "customColorPicker"),
        selectedColor: m,
        renderAutomaticSwatch: o.renderAutomaticSwatch,
        newColor: p,
        lastSelectedColor: u,
        onColorSelect: A,
        hideCustomTabActionButtons: e
    }, !e && {
        onCancelPress: o.onCancelPress,
        onNewColorChange: d
    })));
}));

fb(Yt);

const Xre = e => {
    const t = "#000000";
    const {color: o, type: n} = e;
    const r = qI(o) || !_re(o) && o.length !== 0 ? t : Lre(o);
    const s = !n ? o === "" ? "nocolor" : tne.includes(r) ? "standard" : "custom" : n;
    const i = c(null);
    a((() => {
        if (r !== "" || s !== "nocolor") {
            i.current = {
                color: r,
                type: s
            };
        }
    }), [ r, s ]);
    const l = r !== "" && s !== "nocolor" ? {
        color: r,
        type: s
    } : !i.current ? {
        color: t,
        type: "standard"
    } : i.current;
    return {
        selectedColor: {
            color: r,
            type: s
        },
        lastSelectedColor: l
    };
};

const Zre = fb(Yt);

const Jre = () => {
    const e = Zre();
    const t = one();
    return s((o => {
        const n = o.selectedColor?.color ?? "#000000";
        const a = o.selectedColor?.type ?? "standard";
        const r = !tne.includes(n);
        const s = r ? t(n) : `${e(`color.${n.slice(1)}.title`)} (${t(n)})`;
        const i = n === "" && a === "nocolor" ? e(`color.noColor.title`) : a === "automatic" ? e(`automatic.title`, {
            color: s
        }) : s;
        const l = r ? n.split("").join(" ") : `${e(`color.${n.slice(1)}.aria`)} (${n.split("").join(" ")})`;
        const c = n === "" && a === "nocolor" ? e(`color.noColor.aria`) : a === "automatic" ? e(`automatic.aria`, {
            color: l
        }) : l;
        const d = o.localizedPrefix ? `${o.localizedPrefix}${i}` : e(o.readOnly ? "dropdownSwatch.readOnly.title" : "dropdownSwatch.title", {
            color: i
        });
        const u = o.localizedPrefix ? `${o.localizedPrefix}${c}` : e(o.readOnly ? "dropdownSwatch.readOnly.aria" : "dropdownSwatch.aria", {
            color: c
        });
        return {
            ariaLabel: o.ariaLabel ?? u,
            tooltip: o.tooltip ?? d
        };
    }), [ t, e ]);
};

var Qre = "sas_components-ColorPicker-ColorPicker_dropdown-color-swatch";

var ese = "sas_components-ColorPicker-ColorPicker_disabled";

var tse = "sas_components-ColorPicker-ColorPicker_read-only";

var ose = "sas_components-ColorPicker-ColorPicker_dropdown-color-swatch-inner";

var nse = "sas_components-ColorPicker-ColorPicker_no-color-swatch";

var ase = "sas_components-ColorPicker-ColorPicker_popover";

var rse = {
    dropdownColorSwatch: Qre,
    disabled: ese,
    readOnly: tse,
    dropdownColorSwatchInner: ose,
    noColorSwatch: nse,
    popover: ase
};

const sse = fb(Yt);

const ise = u(((e, a) => {
    const r = sse();
    const {selectedColor: s, lastSelectedColor: i} = Xre(e.selectedColor);
    const [l, d] = n(false);
    const [u, m] = n(0);
    const p = c(null);
    const f = Jre();
    const {ariaLabel: g, tooltip: h} = f({
        selectedColor: s,
        ariaLabel: e.ariaLabel,
        tooltip: e.tooltip,
        readOnly: e.readOnly
    });
    const b = C_();
    const v = {
        bd: b.tokensExperimental["color-neutral"],
        "mark-bg": b.tokensExperimental["color-status-alert"]
    };
    const y = e => {
        let t;
        switch (e.themeVariant) {
          case "light":
            t = {
                swatchBackground: "#FFFFFF",
                swatchBorder: "#CDD1D8"
            };
            break;

          case "dark":
            t = {
                swatchBackground: "#021727",
                swatchBorder: "#344652"
            };
            break;

          case "high-contrast":
            t = {
                swatchBackground: "#021727",
                swatchBorder: "#CED2D9"
            };
            break;

          default:
            t = {
                swatchBackground: "#FFFFFF",
                swatchBorder: "#CDD1D8"
            };
        }
        return t;
    };
    const {swatchBackground: x, swatchBorder: S} = y(b);
    const w = {
        "hover-bd": b.tokensExperimental["color-action-border-control-hover"],
        "hover-bg": b.tokensExperimental["color-action-background-control-hover"],
        "active-bd": b.tokensExperimental["color-action-border-control-selected"],
        "active-bg": b.tokensExperimental["color-action-background-control-selected"],
        "disabled-bd": b.tokensExperimental["color-action-border-control-disabled"],
        "inner-bd": b.tokensExperimental["color-neutral"],
        "border-radius": b.tokensExperimental["size-border-radius-xxs"],
        pd: b.tokensExperimental["space-base-xs"],
        "bd-width": b.tokensExperimental["size-border-width-s"],
        bg: x,
        bd: S
    };
    const C = {
        ...I_(w, "colorpicker-swatch"),
        ...I_(v, "colorpicker-no-color-swatch")
    };
    const E = () => {
        d(false);
        setTimeout((() => p.current?.focus()), 0);
    };
    const I = t => {
        if ("onColorChange" in e) {
            e.onColorChange?.(t);
        }
        E();
    };
    const _ = e.renderAutomaticSwatch ? e.renderAutomaticSwatch({
        getAttributes() {
            const e = `${r("selectColorAutomatic.label")} ${r("automatic.label")} (${r("multipleSmallCaseColors.label")})`;
            const t = `${r("selectColorAutomatic.label")} ${r("automatic.label")} (${r("multipleSmallCaseColors.label")})`;
            return {
                ariaLabel: e,
                title: t
            };
        }
    }) : null;
    const D = e => {
        if (e) {
            p.current = e;
            D_(a, e);
        }
    };
    return t(o, null, t(ZM, Ee({
        id: e.id,
        disabled: e.disabled,
        ref: D
    }, e.readOnly && {
        role: "img"
    }, !(e.selectedColor.type === "automatic" && e.renderAutomaticSwatch) && {
        tooltip: h
    }, !(e.selectedColor.type === "automatic" && e.renderAutomaticSwatch) && {
        ariaLabel: g
    }, {
        ariaDescribedBy: e.ariaDescribedBy,
        onPress: () => {
            if (!e.readOnly) {
                d(true);
            }
        },
        className: ke(rse.dropdownColorSwatch, s.color === "" && rse.noColorSwatch, e.disabled && rse.disabled, e.readOnly && rse.readOnly, e.className),
        style: {
            ...C,
            ...e.style
        },
        testId: gb(e.testId, "colorSwatch"),
        tokens: () => ({
            filter: "none"
        })
    }), e.selectedColor.type === "automatic" && e.renderAutomaticSwatch ? _ : t("span", {
        className: rse.dropdownColorSwatchInner,
        style: {
            background: s.color
        },
        "data-testid": gb(e.testId, "color-swatch-inner")
    })), t(zO, {
        role: "dialog",
        className: rse.popover,
        isOpen: l,
        isModal: u === 1,
        referenceElementRef: p,
        ariaLabel: r("popper.aria"),
        onClose: () => d(false),
        focusLockProps: e.focusLockProps,
        testId: gb(e.testId, "popover")
    }, t(qre, Ee({}, e, {
        testId: gb(e.testId, "defaultColorPicker"),
        renderAutomaticSwatch: e.renderAutomaticSwatch,
        selectedColor: s,
        automaticColor: e.automaticColor,
        newColor: s,
        lastSelectedColor: i,
        onColorSelect: I,
        selectedIndex: u,
        onTabItemSelect: m,
        onCancelPress: E
    }))));
}));

dU(ise);

var lse = "sas_components-NumericStepper-NumericStepper_container";

var cse = "sas_components-NumericStepper-NumericStepper_input";

var dse = "sas_components-NumericStepper-NumericStepper_select-mode";

var use = "sas_components-NumericStepper-NumericStepper_has-input-icon";

var mse = "sas_components-NumericStepper-NumericStepper_readonly";

var pse = "sas_components-NumericStepper-NumericStepper_disabled";

var fse = "sas_components-NumericStepper-NumericStepper_has-status";

var gse = "sas_components-NumericStepper-NumericStepper_button";

var hse = "sas_components-NumericStepper-NumericStepper_up-button";

var bse = "sas_components-NumericStepper-NumericStepper_down-button";

var vse = {
    container: lse,
    input: cse,
    selectMode: dse,
    hasInputIcon: use,
    readonly: mse,
    disabled: pse,
    hasStatus: fse,
    button: gse,
    upButton: hse,
    downButton: bse
};

const yse = u((({editMode: e = "select", readOnly: o = false, onStateChange: n, style: a, ...r}, s) => {
    const i = c(null);
    const {density: l} = YA();
    const u = C_();
    d((function e() {
        const t = i.current;
        const o = t?.parentElement;
        const n = o?.parentElement;
        if (t && o && n) {
            if (a?.width) {
                o.style.width = "100%";
                return;
            }
            const e = n.querySelector("button");
            const s = window.getComputedStyle(t);
            const i = s.fontFamily;
            const l = s.fontSize;
            const c = xse(l, i, r.maxLength);
            const d = c + parseInt(s.paddingLeft) + 20 + parseInt(s.marginLeft) + parseInt(s.marginRight) + parseInt(s.borderLeftWidth) + parseInt(s.borderRightWidth) + 2 + 1 + (e?.offsetWidth ?? 0) * 2;
            o.style.width = o.style.minWidth = n.style.minWidth = `${d}px`;
        }
    }), [ r.maxLength, a?.width, e, o, l ]);
    const m = yH(u, {
        disabled: r.disabled,
        status: r.status,
        editable: false,
        variant: "standard",
        isCustomFocusTurnedOn: true,
        density: l
    });
    const {isKeyboardUser: p} = h_() ?? false;
    const f = p ? {
        "--input-focus-bd": "var(--numeric-stepper-input-bd)"
    } : {};
    return e === "combo" || o ? t(SH, Ee({}, r, {
        className: ke(!o && vse.input, r.status && vse.hasStatus),
        editable: !o && e === "combo",
        onChange: t => {
            e === "combo" && !r.disabled && n?.({
                value: t.value,
                state: "change"
            });
        },
        onCommit: e => !r.disabled && n?.({
            value: e.value,
            state: e.reason === "suggestion" || e.reason === undefined ? "blur" : e.reason
        }),
        onFocus: () => !r.disabled && n?.({
            value: r.value,
            state: "focus"
        }),
        ref: e => {
            i.current = e;
            D_(s, e);
        },
        role: "spinbutton",
        type: "number",
        variant: "standard"
    })) : t("div", {
        style: {
            ...m,
            ...f
        },
        className: vse.input,
        onBlur: () => {
            !r.disabled && n?.({
                value: r.value,
                state: "blur"
            });
        }
    }, t("div", {
        ref: e => {
            i.current = e;
            D_(s, e);
        },
        className: ke(vse.selectMode, r.disabled && vse.disabled),
        role: "spinbutton",
        "aria-disabled": r.disabled,
        "aria-label": r.ariaLabel,
        "aria-labelledby": r.ariaLabelledBy,
        "aria-describedby": (r.ariaDescribedBy ?? []).join(" "),
        tabIndex: 0
    }, r.value));
}));

function xse(e, t, o) {
    const n = document.createElement("span");
    let a = n.offsetWidth;
    n.style.visibility = "hidden";
    n.style.fontSize = e;
    n.style.fontFamily = t;
    n.style.display = "inline-block";
    document.body.appendChild(n);
    const r = new Array(o).fill("0").join("");
    if (typeof n.textContent !== "undefined") {
        n.textContent = r;
    } else {
        n.innerText = r;
    }
    a = parseFloat(window.getComputedStyle(n).width) - a;
    document.body.removeChild(n);
    return a;
}

const Sse = fb(Xt);

const wse = ({children: e, className: o, disabled: n, minimum: a, maximum: r, stepSize: s = 1, pageSize: i = s * 2, style: l, testId: d, tooltip: u, value: m, onValueChange: p, onValueCommit: f}) => {
    const g = Sse();
    const h = c(null);
    const b = c(false);
    const v = c(null);
    const y = e => {
        if (e !== undefined) {
            p?.({
                newValue: e
            });
        }
    };
    const x = (e, t) => {
        f?.({
            value: e,
            reason: t
        });
    };
    const S = e => {
        if (!b.current && !v.current?.contains(e.relatedTarget)) {
            x(undefined, "blur");
        }
    };
    const w = n || m !== undefined && m >= r;
    const C = n || m !== undefined && m <= a;
    const E = e => {
        if (n) return;
        const t = Ese(m, e, s, a, r);
        h.current = m;
        b.current = true;
        y(t);
    };
    const I = e => {
        if (h.current !== null && h.current !== m && m !== undefined) {
            h.current = null;
            x(m, e);
        }
    };
    const _ = e => {
        if (e.button === 0) {
            e.preventDefault();
            b.current = false;
            I("click");
        }
    };
    const D = e => {
        if (n) return;
        switch (e.key) {
          case "Enter":
          case " ":
            e.preventDefault();
            I("keyin");
            break;
        }
    };
    const L = e => {
        if (n) return;
        switch (e.key) {
          case "ArrowDown":
          case "ArrowUp":
          case "PageDown":
          case "PageUp":
          case "Home":
          case "End":
            e.preventDefault();
            I("keyin");
            break;
        }
    };
    const T = e => {
        if (n) return;
        let t;
        switch (e.key) {
          case "ArrowDown":
            e.preventDefault();
            if (C) return;
            t = Ese(m, false, s, a, r);
            break;

          case "ArrowUp":
            e.preventDefault();
            if (w) return;
            t = Ese(m, true, s, a, r);
            break;

          case "PageDown":
            e.preventDefault();
            if (C) return;
            t = Ese(m, false, i, a, r);
            break;

          case "PageUp":
            e.preventDefault();
            if (w) return;
            t = Ese(m, true, i, a, r);
            break;

          case "Home":
            e.preventDefault();
            if (m === a) return;
            t = a;
            break;

          case "End":
            e.preventDefault();
            if (m === r) return;
            t = r;
            break;
        }
        if (t !== undefined) {
            h.current = m;
            y(t);
        }
    };
    return t("div", {
        ref: v,
        className: ke(vse.container, o),
        style: l,
        title: u,
        "data-testid": d,
        onKeyDown: T,
        onKeyUp: L
    }, e, t(ZM, {
        icon: {
            icon: xT,
            tooltip: ""
        },
        className: ke(vse.button, vse.downButton),
        onPress: () => {
            E(false);
        },
        onKeyUp: D,
        onMouseUp: _,
        onMouseLeave: _,
        focusable: false,
        onBlur: S,
        disabled: C,
        variant: oN.Icon,
        ariaLabel: g("decrementButton.aria"),
        testId: gb(d, "decrementButton"),
        enableContinuousPress: true
    }), t(ZM, {
        icon: {
            icon: rR,
            tooltip: ""
        },
        className: ke(vse.button, vse.upButton),
        onPress: () => {
            E(true);
        },
        onKeyUp: D,
        onMouseUp: _,
        onMouseLeave: _,
        onBlur: S,
        focusable: false,
        disabled: w,
        variant: oN.Icon,
        ariaLabel: g("incrementButton.aria"),
        testId: gb(d, "incrementButton"),
        enableContinuousPress: true
    }));
};

function Cse(e, t) {
    const o = e.toString().split("."), n = t.toString().split(".");
    if (o.length === 1 && n.length === 1) {
        return Number.parseInt(e.toString()) + t;
    }
    const a = Math.pow(10, Math.max(o[1] ? o[1].length : 0, n[1] ? n[1].length : 0));
    e = Math.round(e * a);
    t = Math.round(t * a);
    return (e + t) / a;
}

function Ese(e, t, o, n, a) {
    let r;
    if (t) {
        if (e === undefined) {
            r = a;
        } else if (e < n) {
            r = n;
        } else {
            r = Cse(e, o);
        }
        if (r > a) {
            r = a;
        }
    } else {
        if (e === undefined) {
            r = n;
        } else if (e > a) {
            r = a;
        } else {
            r = Cse(e, -o);
        }
        if (r < n) {
            r = n;
        }
    }
    return r;
}

const Ise = 0;

const _se = 3;

const Dse = -999999999;

const Lse = 999999999;

const Tse = 0;

const Rse = 7;

const kse = u((({allowIntegerOnly: e = false, enableRevertToCommitted: o = false, disabled: i = false, editMode: l = "select", readOnly: d = false, required: u = false, maximum: m = Lse, minimum: p = Dse, stepSize: f = 1, pageSize: g = f * 2, value: h, status: b, message: v, onChange: y, onCommit: x, className: S, tooltip: w, testId: C, ...E}, I) => {
    const _ = r((() => {
        const t = {
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        };
        if (!e) {
            t.minimumFractionDigits = E.numberFormatOptions?.minimumFractionDigits ?? Ise;
            t.maximumFractionDigits = E.numberFormatOptions?.maximumFractionDigits ?? Math.max(_se, t.minimumFractionDigits);
        }
        return t;
    }), [ e, E.numberFormatOptions?.maximumFractionDigits, E.numberFormatOptions?.minimumFractionDigits ]);
    Ase(_);
    Mse(p, m, _.maximumFractionDigits);
    Nse(f, g, _.maximumFractionDigits);
    h = typeof h === "number" ? Gse(h, _) : h;
    const D = c(null);
    const L = c(false);
    const T = c();
    const R = c(p);
    const k = c();
    const A = c(false);
    const M = jV();
    const [N, O] = n({
        status: undefined,
        message: ""
    });
    const P = r((() => {
        const e = {
            minimumFractionDigits: _.maximumFractionDigits,
            maximumFractionDigits: _.maximumFractionDigits
        };
        return Math.max(MH(p.toString(), undefined, e).formatValue.length, MH(m.toString(), undefined, e).formatValue.length);
    }), [ p, m, _.maximumFractionDigits ]);
    const B = s(((e, t, o) => {
        if (k.current !== e) {
            k.current = e;
            y({
                displayValue: e,
                numericValue: t,
                reason: o
            });
        }
    }), [ y ]);
    const z = s(((t, o) => {
        const n = t === null && k.current !== undefined ? jse({
            invalidValue: k.current,
            min: p,
            max: m,
            allowIntegerOnly: e,
            locale: M
        }) : undefined;
        if (T.current === undefined || T.current.value !== t || T.current.reason !== o || T.current.error !== n) {
            T.current = {
                value: t,
                reason: o,
                error: n
            };
            if (!qI(t)) {
                R.current = t;
            }
            x?.({
                value: t,
                reason: o,
                error: n
            });
        }
    }), [ e, M, m, p, x ]);
    const F = e => {
        const {formatValue: t, roundedRawValue: o} = zse(e.newValue, M, _);
        B(t, o, "press");
    };
    const j = e => {
        L.current = false;
        if (e.reason === "blur") {
            z(isNaN($) ? null : $, e.reason);
        } else {
            z(e.value, e.reason);
        }
    };
    const V = $B({
        source: OB.InputFull
    });
    const H = $B({
        source: OB.Error
    });
    const U = CH();
    const G = t => {
        const {rawValue: n, formatValue: a, roundedRawValue: r} = zse(t.value, M, _);
        switch (t.state) {
          case "change":
            L.current = true;
            const s = Vse(t.value, M, _);
            const i = s !== t.value;
            if (i) {
                V.playFromStart();
                const e = zse(s, M, _).rawValue;
                B(s, e, "type");
            } else {
                B(t.value, n, "type");
            }
            break;

          case "enter":
          case "blur":
            L.current = false;
            const c = t.value;
            const {status: d, message: f} = Pse(c, L.current, M, u, e, p, m, b, v, U);
            if (t.state === "blur" && (c === "" || d !== undefined) && o) {
                const e = zse(R.current, M, _).formatValue;
                B(e, R.current, "revise");
                z(R.current, "revise");
            } else {
                if (d === undefined && k.current !== undefined) {
                    B(c === "" ? "" : a, r, t.state);
                } else {
                    O({
                        status: d,
                        message: f
                    });
                }
                z(d === undefined ? c !== "" ? r : undefined : null, t.state);
            }
            break;

          case "focus":
            L.current = true;
            if (l === "combo" && N.status === undefined && !isNaN(r) && t.value.toString() !== r.toString()) {
                B(Bse(r, M, {
                    useGrouping: false,
                    ..._
                }), r, "focus");
            }
            break;
        }
    };
    const {rawValue: K, formatValue: W, roundedRawValue: $} = zse(h, M, _);
    const Y = zse(p, M, _).formatValue;
    a((function e() {
        const t = D.current;
        const o = t instanceof HTMLInputElement;
        if (!o) {
            return;
        }
        const n = e => {
            if (t.disabled || t.readOnly) {
                return;
            }
            if (Hse(e)) {
                if (t && t.value.length === t.maxLength && (t.selectionEnd ?? 0) - (t.selectionStart ?? 0) === 0) {
                    V.playFromStart();
                    return;
                } else if (Use(e.key, M)) {
                    H.playFromStart();
                }
            }
        };
        t.addEventListener("keydown", n);
        return () => {
            if (!o) {
                return;
            }
            t.removeEventListener("keydown", n);
        };
    }));
    a((function t() {
        if (L.current) return;
        const {status: o} = Pse(h, L.current, M, u, e, p, m, b, v);
        const n = o === undefined && o !== N.status;
        const a = !isNaN($);
        const r = R.current !== $;
        if (n && a && r) {
            z($, "revise");
        }
    }), [ p, m, b, u, e ]);
    a((function t() {
        const {status: o, message: n} = Pse(h, L.current, M, u, e, p, m, b, v);
        const a = T.current?.value === undefined;
        if (!(h === "" && l === "combo" && u && a)) {
            O({
                status: o,
                message: n
            });
        }
        const r = k.current === undefined;
        const s = k.current !== W && k.current !== h;
        A.current = !r && s && h === "";
        const i = (o || h === "" || h === undefined) && (r || s) && l === "select";
        const c = h === undefined && r && l === "combo";
        if (c || i) {
            B(Y, p, "revise");
            z(p, "revise");
            return;
        }
        if (r && !o) {
            R.current = h === "" ? p : K;
        }
        const d = !L.current;
        const f = !o;
        const g = h !== "";
        const y = K !== $;
        if (d && g && f && y) {
            B(W, $, "revise");
            z($, "revise");
            return;
        }
        if (!r && s) {
            k.current = W;
            T.current = undefined;
            R.current = p;
        }
    }), [ e, v, b, l, B, z, W, Y, M, m, p, K, u, $, h ]);
    a((function e() {
        const t = D.current;
        if (!t) return;
        if (A.current) {
            t.setAttribute("aria-valuetext", "blank");
            t.removeAttribute("aria-valuenow");
            return;
        }
        if (isNaN($)) {
            t.setAttribute("aria-valuetext", h?.toString() ?? "");
            t.removeAttribute("aria-valuenow");
        } else {
            t.setAttribute("aria-valuenow", $.toString());
            t.removeAttribute("aria-valuetext");
        }
        t.setAttribute("aria-valuemin", p.toString());
        t.setAttribute("aria-valuemax", m.toString());
    }), [ h, $, p, m, l, d ]);
    const q = e => {
        D.current = e;
        D_(I, e);
    };
    const X = C_();
    const {density: Z} = YA();
    const J = Kse(X, {
        disabled: i,
        status: N.status,
        editable: l === "combo",
        variant: "standard",
        isCustomFocusTurnedOn: true,
        density: Z
    });
    if (d) {
        return t(yse, Ee({}, E, {
            ref: q,
            readOnly: true,
            disabled: i,
            maxLength: P,
            value: Bse(h, M),
            onStateChange: () => {}
        }));
    } else {
        return t(wse, {
            testId: C,
            tooltip: w,
            style: {
                ...J,
                ...E.style
            },
            className: S,
            disabled: i,
            minimum: p,
            maximum: m,
            value: isNaN($) ? undefined : $,
            stepSize: f,
            pageSize: g,
            onValueChange: F,
            onValueCommit: j
        }, t(yse, Ee({}, E, {
            disabled: i,
            editMode: l,
            required: u,
            maxLength: P,
            value: L.current || N.status || h === "" ? Bse(h, M) : W,
            testId: gb(C, "inputField"),
            status: N.status,
            message: N.message,
            ref: q,
            onStateChange: G
        })));
    }
}));

function Ase(e) {
    if (e.minimumFractionDigits < Tse) {
        throw new Error(`The minimum number of fraction digits cannot be less than ${Tse}.`);
    }
    if (e.maximumFractionDigits > Rse) {
        throw new Error(`The maximum number of fraction digits cannot be larger than ${Rse}.`);
    }
    if (e.maximumFractionDigits < e.minimumFractionDigits) {
        throw new Error(`The maximum number of fraction digits cannot be less than the minimum number of fraction digits.`);
    }
}

function Mse(e, t, o) {
    const n = Math.max(e.toString().split(".")[1]?.length ?? 0, t.toString().split(".")[1]?.length ?? 0);
    if (n > o) {
        throw new Error(`The number of fraction digits in minimum/maximum cannot be larger than maximum fraction digits.`);
    }
    if (e < Dse) {
        throw new Error(`The minimum cannot be less than ${Dse}.`);
    }
    if (t > Lse) {
        throw new Error(`The maximum cannot be greater than ${Lse}.`);
    }
    if (t < e) {
        throw new Error(`The maximum cannot be less than minimum.`);
    }
}

function Nse(e, t, o) {
    const n = Math.max(e.toString().split(".")[1]?.length ?? 0, t.toString().split(".")[1]?.length ?? 0, 0);
    if (n > o) {
        throw new Error(`The number of fraction digits in stepSize/pageSize cannot be larger than maximum fraction digits.`);
    }
    if (e <= 0) {
        throw new Error(`The stepSize cannot be less than or equals 0.`);
    }
    if (t <= 0) {
        throw new Error(`The pageSize cannot be less than or equals 0.`);
    }
    if (t < e) {
        throw new Error(`The pageSize cannot be less than stepSize.`);
    }
}

function Ose(e, t, o, n, a, r, s, i) {
    const l = {
        value: (e ?? "").toLocaleString(o),
        isRequired: n,
        allowIntegersOnly: a,
        isLive: t,
        appLocale: o,
        minValue: r,
        maxValue: s,
        inclusiveMode: 3,
        formatter: i
    };
    return t ? zH(l.value, l.appLocale, l.isRequired, l.allowIntegersOnly, l.isLive) : XH(l);
}

function Pse(e, t, o, n, a, r, s, i, l, c) {
    const d = Bse(e, o);
    const u = Ose(d, t, o, n, a, r, s, c);
    if (!i) {
        return {
            status: u.status,
            message: u.message
        };
    } else if (i === "alert" || i === "warning" && u.status !== "alert") {
        return {
            status: i,
            message: l
        };
    } else {
        return {
            status: u.status,
            message: u.message
        };
    }
}

function Bse(e, t = "en-US", o) {
    return e === undefined ? "" : typeof e === "string" ? e : e.toLocaleString(ph(t), o);
}

function zse(e, t = "en-US", o) {
    const {rawValue: n, formatValue: a} = MH(Bse(e, t, o), t, o);
    const r = Fse(n, o.maximumFractionDigits);
    return {
        rawValue: n,
        formatValue: a.replace(/\u200e/, ""),
        roundedRawValue: r
    };
}

function Fse(e, t) {
    const o = Math.pow(10, t);
    return Number((e * o).toFixed(0)) / o;
}

function jse({invalidValue: e, allowIntegerOnly: t, min: o, max: n, locale: a}) {
    if (typeof e === "string" && (isNaN(Number(e)) || e.trim() === "" || !OH(e, a, false))) {
        return "notNumber";
    }
    const r = Number(e);
    if (r > n) {
        return "greaterThanMax";
    } else if (r < o) {
        return "lessThanMin";
    } else if (t && Math.floor(r) < r) {
        return "notInteger";
    }
    return undefined;
}

function Vse(e, t = "en-US", o) {
    const {rawValue: n} = MH(e, t, o);
    if (isNaN(n)) {
        return e;
    }
    const [a] = NH(t);
    const r = e.indexOf(a);
    return r > -1 ? e.substring(0, r) + e.substring(r, r + (o?.maximumFractionDigits ?? Rse) + 1) : e;
}

function Hse(e) {
    if (e.ctrlKey || e.altKey || e.metaKey) {
        return false;
    }
    if (e.keyCode === 229 || e.key.length === 1) {
        return true;
    }
    return false;
}

function Use(e, t) {
    const [o, n] = NH(t);
    const a = n === "\\s" ? " " : n;
    const r = `0123456789+-${o}${a}`;
    return r.indexOf(e) === -1;
}

function Gse(e, t) {
    return parseFloat(e.toLocaleString("en-US", {
        ...t,
        useGrouping: false
    }));
}

const Kse = (e, t) => {
    const o = yH(e, t);
    const n = eN(e, {
        variant: oN.Icon,
        density: t?.density
    });
    return {
        ...__({
            "input-bd": t?.disabled ? o["--input-disabled-bd"] : o["--input-bd"],
            "input-inline-pd": t?.density === "high" ? e.tokensExperimental["space-base-xs"] : e.tokensExperimental["space-base-s"],
            "button-icon-width": n["--icon-width"],
            "button-inline-padding": t?.density === "high" ? n["--button-spacing-xs"] : n["--button-spacing-s"]
        }, "numeric-stepper")
    };
};

var Wse = "sas_components-Settings-controls-FocusPreview_disabled";

var $se = "sas_components-Settings-controls-FocusPreview_outer-box";

var Yse = "sas_components-Settings-controls-FocusPreview_mask-box";

var qse = "sas_components-Settings-controls-FocusPreview_mask-label";

var Xse = {
    disabled: Wse,
    outerBox: $se,
    maskBox: Yse,
    maskLabel: qse
};

const Zse = e => {
    const o = NA("Settings");
    const n = (e.opacity ?? 100) / 100 * (e.disabled ? .3 : 1);
    const a = e.thickness ?? 1;
    const r = e.color ? e.color : "#000000";
    const s = {
        border: `${a}px var(--focus-preview-bd-style) ${Jse(r, n)}`
    };
    const i = C_();
    const l = I_({
        "spacing-m": i.tokensExperimental["space-base-m"],
        "spacing-xs": i.tokensExperimental["space-base-xs"],
        "bd-style": i.tokensExperimental["style-action-border-focus"]
    }, "focus-preview");
    return t("div", {
        style: l,
        className: ke(Xse.outerBox, e.disabled && Xse.disabled)
    }, t("div", {
        style: s,
        className: Xse.maskBox
    }, t(LP, {
        className: Xse.maskLabel,
        disabled: e.disabled
    }, o("settings.focusPreview.itemInFocus.label"))), t(LP, {
        disabled: e.disabled
    }, o("settings.focusPreview.adjacentItem.label")));
};

const Jse = (e, t) => {
    e = e.substring(1, e.length);
    if (e.length === 3) {
        e = e.charAt(0) + e.charAt(0) + e.charAt(1) + e.charAt(1) + e.charAt(2) + e.charAt(2);
    }
    const o = parseInt(e.substr(0, 2), 16);
    const n = parseInt(e.substr(2, 2), 16);
    const a = parseInt(e.substr(4, 2), 16);
    return `rgba(${o},${n},${a},${t})`;
};

pb(Dte);

dU(kse);

dU(Zse);

dU(DG);

var Qse = "sas_components-ImageSelector-__internal__-Cropper_cropper";

var eie = "sas_components-ImageSelector-__internal__-Cropper_ellipse";

var tie = "sas_components-ImageSelector-__internal__-Cropper_invisible-image";

var oie = {
    cropper: Qse,
    ellipse: eie,
    invisibleImage: tie
};

const nie = e => e.src.length > 0 ? t(o, null, t("img", {
    src: e.src,
    onError: e.onError,
    className: oie.invisibleImage
}), t(co, {
    key: e.cropperKey,
    className: ke(oie.cropper, e.ellipse && oie.ellipse, e.className),
    onInitialized: t => {
        if (e.cropperRef) {
            e.cropperRef.current = t;
        }
    },
    viewMode: 2,
    dragMode: "none",
    toggleDragModeOnDblclick: false,
    preview: e.previewClassName ? `.${e.previewClassName}` : undefined,
    minCropBoxWidth: 1,
    minCropBoxHeight: 1,
    src: e.src,
    aspectRatio: e.aspectRatio ?? 1,
    guides: false,
    ready: e.onReady
})) : null;

var aie = "sas_components-ImageSelector-__internal__-CropperDialog_dialog-content";

var rie = "sas_components-ImageSelector-__internal__-CropperDialog_cropper";

var sie = "sas_components-ImageSelector-__internal__-CropperDialog_preview";

var iie = "sas_components-ImageSelector-__internal__-CropperDialog_ellipse";

var lie = "sas_components-ImageSelector-__internal__-CropperDialog_bar";

var cie = "sas_components-ImageSelector-__internal__-CropperDialog_description";

var die = {
    dialogContent: aie,
    cropper: rie,
    preview: sie,
    ellipse: iie,
    bar: lie,
    description: cie
};

const uie = 5;

const mie = .1;

const pie = MA("CropDialog");

const fie = e => {
    const o = ay();
    const a = NA("ImageSelector");
    const r = pie();
    const s = c(null);
    const i = c(false);
    const [l, d] = n(Date.now());
    const u = e => {
        const t = s.current;
        if (!t) return;
        const {top: n, left: a, height: r, width: i} = t.getCropBoxData();
        const l = (e, o) => {
            t.move(e, o);
        };
        const c = (e, o) => {
            const n = t.getCropBoxData();
            n.top += o;
            n.left += e;
            t.setCropBoxData(n);
        };
        switch (e) {
          case "up":
            if (n <= 0) {
                l(0, uie);
            } else {
                c(0, -uie);
            }
            break;

          case "down":
            if (n + r >= t.getContainerData().height) {
                l(0, -uie);
            } else {
                c(0, uie);
            }
            break;

          case o ? "right" : "left":
            if (a <= 0) {
                l(uie, 0);
            } else {
                c(-uie, 0);
            }
            break;

          case o ? "left" : "right":
            if (a + i >= t.getContainerData().width) {
                l(-uie, 0);
            } else {
                c(uie, 0);
            }
            break;
        }
    };
    const m = () => {
        const e = s.current;
        if (!e || !i.current) return;
        e.reset();
        const t = e.getImageData();
        const o = e.getContainerData();
        e.setCropBoxData({
            width: t.width,
            height: t.height
        });
        const n = e.getCropBoxData();
        e.setCropBoxData({
            ...n,
            left: (o.width - n.width) / 2,
            top: (o.height - n.height) / 2
        });
    };
    const [p] = kN((() => {
        d(Date.now());
    }));
    const f = C_();
    const g = I_({
        "row-gap": f.spacing.core.s,
        "column-gap": f.spacing.core.m
    }, "cropper-dialog");
    return t(zF, {
        testId: e.testId,
        isOpen: e.isOpen,
        title: a("cropDialog.title"),
        size: {
            maxWidth: "calc(100% - 4rem)",
            maxHeight: "calc(100% - 4rem)",
            width: "calc(100% - 30rem)",
            height: "calc(100% - 10rem)",
            minWidth: "45rem",
            minHeight: "30rem"
        },
        firstAction: {
            text: a("cropDialog.confirmButton.label"),
            onPress: () => {
                if (!s.current) return;
                e.onCrop?.(s.current.getCroppedCanvas());
            },
            initialFocus: true,
            isDefault: true
        },
        dismissAction: {
            text: a("cropDialog.dismissButton.label"),
            onPress: e.onDismiss
        },
        style: g,
        ariaDescribedBy: r,
        busyStateIndicatorProps: {
            active: e.isBusy,
            delay: 0
        }
    }, t("div", {
        className: die.dialogContent,
        ref: p
    }, t(nie, {
        cropperKey: l,
        src: e.src,
        cropperRef: s,
        ellipse: e.ellipse,
        aspectRatio: e.aspectRatio,
        previewClassName: die.preview,
        onReady: () => {
            i.current = true;
            m();
        },
        onError: e.onError,
        className: die.cropper
    }), t("div", {
        className: die.bar
    }, t(QM, {
        testId: gb(e.testId, "zoomInButton"),
        variant: oN.Icon,
        icon: {
            icon: kk,
            tooltip: a("cropDialog.zoomInButton.tooltip.label"),
            ariaLabel: a("cropDialog.zoomInButton.aria")
        },
        onPress: () => s.current?.zoom(mie)
    }), t(QM, {
        testId: gb(e.testId, "zoomOutButton"),
        variant: oN.Icon,
        icon: {
            icon: Mk,
            tooltip: a("cropDialog.zoomOutButton.tooltip.label"),
            ariaLabel: a("cropDialog.zoomOutButton.aria")
        },
        onPress: () => s.current?.zoom(-mie)
    }), t(wte, null), t(Oee, {
        items: [ {
            type: "Button",
            testId: gb(e.testId, "moveLeftButton"),
            variant: oN.Icon,
            icon: {
                icon: ML,
                tooltip: a("cropDialog.moveLeftButton.tooltip.label"),
                ariaLabel: a("cropDialog.moveLeftButton.aria")
            },
            onPress: () => u("left"),
            enableContinuousPress: true
        }, {
            type: "Button",
            testId: gb(e.testId, "moveRightButton"),
            variant: oN.Icon,
            icon: {
                icon: OL,
                tooltip: a("cropDialog.moveRightButton.tooltip.label"),
                ariaLabel: a("cropDialog.moveRightButton.aria")
            },
            onPress: () => u("right"),
            enableContinuousPress: true
        }, {
            type: "Button",
            testId: gb(e.testId, "moveUpButton"),
            variant: oN.Icon,
            icon: {
                icon: BL,
                tooltip: a("cropDialog.moveUpButton.tooltip.label"),
                ariaLabel: a("cropDialog.moveUpButton.aria")
            },
            onPress: () => u("up"),
            enableContinuousPress: true
        }, {
            type: "Button",
            testId: gb(e.testId, "moveDownButton"),
            variant: oN.Icon,
            icon: {
                icon: RL,
                tooltip: a("cropDialog.moveDownButton.tooltip.label"),
                ariaLabel: a("cropDialog.moveDownButton.aria")
            },
            onPress: () => u("down"),
            enableContinuousPress: true
        } ]
    }), t(wte, null), t(QM, {
        testId: gb(e.testId, "resetButton"),
        icon: {
            icon: WR,
            tooltip: a("cropDialog.resetButton.tooltip.label"),
            ariaLabel: a("cropDialog.resetButton.aria")
        },
        onPress: m,
        variant: oN.Icon
    })), t("div", {
        className: die.description,
        id: r
    }, a("cropDialog.desc")), t("div", {
        className: ke(die.preview, e.ellipse && die.ellipse),
        key: l
    })));
};

const gie = () => {
    const e = NA("ImageSelector");
    return s((t => {
        const o = t?.tooltip ?? e("imageHotSpot.tooltip.label");
        return {
            ariaLabel: t?.ariaLabel ?? o,
            tooltip: o
        };
    }), [ e ]);
};

var hie = "sas_components-ImageSelector-__internal__-BaseImageSelector_image-container";

var bie = "sas_components-ImageSelector-__internal__-BaseImageSelector_has-background-color";

var vie = "sas_components-ImageSelector-__internal__-BaseImageSelector_image";

var yie = "sas_components-ImageSelector-__internal__-BaseImageSelector_hint-text";

var xie = "sas_components-ImageSelector-__internal__-BaseImageSelector_edit-icon";

var Sie = "sas_components-ImageSelector-__internal__-BaseImageSelector_overlay";

var wie = "sas_components-ImageSelector-__internal__-BaseImageSelector_active";

var Cie = {
    imageContainer: hie,
    hasBackgroundColor: bie,
    image: vie,
    hintText: yie,
    editIcon: xie,
    overlay: Sie,
    active: wie
};

const Eie = 16 / 9;

const Iie = fb(Zt);

const _ie = MA("hint-text");

const Die = e => {
    if (!e.includes("jpg") && !e.includes("jpeg")) return [ ...e ];
    return [ ...e.filter((e => e !== "jpg" && e !== "jpeg")), "jpg", "jpeg" ];
};

const Lie = e => {
    const a = Iie();
    const r = _ie(3);
    const s = e.showHintText ? e.additionalHintText ? r : r.slice(0, 2) : undefined;
    const i = e.resultImageType ?? "jpg";
    const l = e.maxFileSize ?? 1;
    const d = Die(e.validImageTypes ?? [ "jpg", "jpeg", "png", "bmp", "gif" ]);
    const u = c(null);
    const m = c(null);
    const [p, f] = n(false);
    const [g, h] = n();
    const [b, v] = n();
    const [y, x] = n(Eie);
    const [S, w] = n(false);
    const C = c();
    const E = c(null);
    const I = c(false);
    const _ = !e.src || e.src.length === 0;
    const D = (_ ? e.defaultSrc : e.src) ?? "";
    const L = () => {
        h(undefined);
        if (e.onFileValidationError) {
            e.onFileValidationError({
                reason: "failedToLoad"
            });
        } else {
            v({
                isOpen: true,
                type: "error",
                title: a("chooseImage.invalidFileContent.error.dialog.title"),
                text: a("chooseImage.invalidFileContent.error.dialog.content.msg"),
                dismissAction: {
                    text: a("chooseImage.invalidFileContent.error.dialog.dismissButton.label"),
                    onPress: () => {
                        v(undefined);
                        setTimeout(T, 0);
                    },
                    isDefault: true
                }
            });
        }
    };
    const T = async () => {
        C.current?.focus();
        if (e.onChooseImage) {
            e.onChooseImage().then((({type: e, size: t, src: o}) => {
                if (!A(e, t)) return;
                h(o);
            })).catch(L);
        } else {
            m.current?.click();
        }
    };
    const R = () => {
        C.current?.focus();
        const t = {
            isOpen: true,
            type: "error",
            title: a("removeImage.error.dialog.title"),
            text: a("removeImage.error.dialog.content.msg"),
            dismissAction: {
                text: a("removeImage.error.dialog.dismissButton.label"),
                onPress: () => {
                    v(undefined);
                },
                isDefault: true
            }
        };
        if (!e.skipRemovingImageWarning) {
            v({
                type: "warning",
                isOpen: true,
                title: a("removeImage.warning.dialog.title"),
                text: a("removeImage.warning.dialog.content.msg"),
                firstAction: {
                    text: a("removeImage.warning.dialog.confirmButton.label"),
                    onPress: () => {
                        v(undefined);
                        e.onRemoveImage?.().catch((() => v(t)));
                    }
                },
                dismissAction: {
                    text: a("removeImage.warning.dialog.dismissButton.label"),
                    onPress: () => {
                        v(undefined);
                    },
                    isDefault: true
                }
            });
        } else {
            e.onRemoveImage?.().catch((() => v(t)));
        }
    };
    const k = t => {
        if (!e.onSaveImage || I.current) return;
        I.current = true;
        f(true);
        e.onSaveImage(t.toDataURL(`image/${i}`)).then((() => {
            h(undefined);
        })).catch((() => {
            v({
                isOpen: true,
                type: "error",
                title: a("saveImage.error.dialog.title"),
                text: a("saveImage.error.dialog.content.msg"),
                dismissAction: {
                    text: a("saveImage.error.dialog.dismissButton.label"),
                    onPress: () => {
                        v(undefined);
                    },
                    isDefault: true
                }
            });
        })).finally((() => {
            I.current = false;
            f(false);
        }));
    };
    const A = (t, o) => {
        if (!d.map((e => `image/${e}`)).includes(t)) {
            if (e.onFileValidationError) {
                e.onFileValidationError({
                    reason: "wrongType"
                });
            } else {
                v({
                    isOpen: true,
                    type: "error",
                    title: a("chooseImage.invalidFileType.error.dialog.title"),
                    text: a("chooseImage.invalidFileType.error.dialog.content.msg", {
                        validFileTypes: Tie(d)
                    }),
                    dismissAction: {
                        text: a("chooseImage.invalidFileType.error.dialog.dismissButton.label"),
                        onPress: () => {
                            T();
                            v(undefined);
                        },
                        isDefault: true
                    }
                });
            }
            return false;
        }
        if (o >= l * 1048576) {
            if (e.onFileValidationError) {
                e.onFileValidationError({
                    reason: "sizeTooLarge"
                });
            } else {
                v({
                    isOpen: true,
                    type: "error",
                    title: a("chooseImage.invalidFileSize.error.dialog.title"),
                    text: a("chooseImage.invalidFileSize.error.dialog.content.msg", {
                        maxFileSize: l.toString()
                    }),
                    dismissAction: {
                        text: a("chooseImage.invalidFileSize.error.dialog.dismissButton.label"),
                        onPress: () => {
                            T();
                            v(undefined);
                        },
                        isDefault: true
                    }
                });
            }
            return false;
        }
        return true;
    };
    const M = C_();
    const N = {
        ...I_({
            "font-size-s": M.tokensExperimental["font-size-body-text-s"],
            overlay: Jv(M.tokensExperimental["color-container-background-0"], .6),
            bg: M.tokensExperimental["color-container-background-2"],
            "anim-dur": M.tokensExperimental["duration-100"],
            "anim-tf": M.tokensExperimental["ease-in-out"],
            "edit-icon-bd": M.tokensExperimental["color-primary"],
            "edit-icon-bg": M.tokensExperimental["color-action-icon-control-normal"]
        }, "image-selector")
    };
    const O = gie();
    const {tooltip: P, ariaLabel: B} = O({
        tooltip: e.tooltip,
        ariaLabel: e.ariaLabel
    });
    const {width: z, height: F} = Rie(e.imageSize);
    const [j] = kN((() => {
        if (!u.current) return;
        const {width: e, height: t} = u.current.getBoundingClientRect();
        if (e === 0 || t === 0 || Math.abs(e / t - Eie) < .01) {
            x(Eie);
        } else {
            x(e / t);
        }
    }));
    const V = e => {
        u.current = e;
        j(e);
    };
    return t(o, null, t(iN, {
        spacing: "m",
        orientation: "vertical",
        style: N
    }, t(bee, {
        sections: e.disableContextMenu ? undefined : [ {
            items: [ {
                text: a("contextMenu.chooseImage.menuItem.label")
            }, {
                text: a("contextMenu.removeImage.menuItem.label"),
                disabled: _
            } ]
        } ],
        onItemSelected: e => {
            if (e[0][1] === 0) {
                T();
            } else {
                R();
            }
        }
    }, !e.renderImageContainer ? t("div", {
        "data-testid": gb(e.testId, "imageContainer"),
        ref: V,
        className: ke(Cie.imageContainer, y !== Eie && !e.defaultSrc && !e.src && Cie.hasBackgroundColor),
        tabIndex: 0,
        role: "button",
        onClick: T,
        onKeyDown: e => {
            if (e.key === " " || e.key === "Enter") {
                e.preventDefault();
                w(true);
            }
        },
        onKeyUp: e => {
            if (e.key === " " || e.key === "Enter") {
                e.preventDefault();
                w(false);
                T();
            }
        },
        style: {
            width: z,
            height: F
        },
        title: P,
        "aria-label": B,
        onFocus: ({currentTarget: e}) => {
            C.current = e;
        },
        "aria-describedby": s?.join(" ")
    }, t("div", {
        "aria-hidden": "true"
    }, D.length > 0 ? t($0, {
        src: D,
        mode: "fit",
        className: Cie.image
    }) : y === Eie ? t(hM, {
        icon: LA,
        type: "thumbnail"
    }) : null), t("div", {
        className: ke(Cie.overlay, S && Cie.active)
    }, t("div", {
        className: Cie.editIcon
    }, t(MM, {
        icon: TT,
        tokens: () => ({
            fg: M.c.colorTextInverse
        }),
        tooltip: P,
        ariaHidden: true
    })))) : e.renderImageContainer({
        ref: V,
        onPress: T,
        tooltip: P,
        onFocus: e => {
            C.current = e;
        }
    })), e.showSplitButton ? t("div", {
        onFocus: () => {
            if (E.current) {
                C.current = E.current;
            }
        }
    }, t(Jz, {
        testId: gb(e.testId, "splitButton"),
        ref: E,
        text: a("splitButton.label"),
        items: [ a("splitButton.chooseImage.menuItem.label"), {
            text: a("splitButton.removeImage.menuItem.label"),
            disabled: _
        } ],
        onPress: T,
        onItemSelected: e => {
            if (e === 0) T(); else R();
        },
        ariaDescribedBy: s
    })) : null, e.showHintText ? t(iN, {
        spacing: "xs",
        orientation: "vertical"
    }, t(LP, {
        className: Cie.hintText,
        id: r[0]
    }, a("maximumFileSize.hint.msg", {
        maxFileSize: (e.maxFileSize ?? 1).toString()
    })), t(LP, {
        className: Cie.hintText,
        id: r[1]
    }, a("validFileTypes.hint.msg", {
        validFileTypes: Tie(d)
    })), e.additionalHintText ? t(LP, {
        className: Cie.hintText,
        id: r[2]
    }, e.additionalHintText) : null) : null), t(fie, {
        testId: gb(e.testId, "cropperDialog"),
        isBusy: p,
        ellipse: e.ellipse,
        aspectRatio: y,
        isOpen: !!g,
        src: g ?? "",
        onCrop: k,
        onDismiss: () => {
            v({
                isOpen: true,
                type: "warning",
                title: a("cropImage.unsavedChanges.warning.dialog.title"),
                text: a("cropImage.unsavedChanges.warning.dialog.content.msg"),
                firstAction: {
                    text: a("cropImage.unsavedChanges.warning.dialog.confirmButton.label"),
                    onPress: () => {
                        h(undefined);
                        v(undefined);
                    }
                },
                dismissAction: {
                    text: a("cropImage.unsavedChanges.warning.dialog.dismissButton.label"),
                    onPress: () => {
                        v(undefined);
                    },
                    isDefault: true
                }
            });
        },
        onError: L
    }), t("input", {
        type: "file",
        accept: d.map((e => `.${e}`)).join(","),
        ref: m,
        value: "",
        onChange: e => {
            const t = e.target.files;
            if (t?.length !== 1) return;
            const o = t[0];
            if (!A(o.type, o.size)) return;
            const n = new FileReader;
            n.onload = e => h(e.target?.result?.toString());
            n.readAsDataURL(o);
        },
        hidden: true
    }), b ? t(oW, b) : null);
};

const Tie = e => [ ...e ].sort().join(", ").toUpperCase();

const Rie = e => {
    const {width: t, height: o} = e;
    const n = !qI(t) && t.toString().length > 0;
    const a = !qI(o) && o.toString().length > 0;
    if (n && a) {
        return {
            width: t,
            height: o
        };
    } else if (!n && a) {
        return typeof o === "number" ? {
            width: o * Eie,
            height: o
        } : {
            width: `calc(${o} * ${Eie})`,
            height: o
        };
    } else if (n && !a) {
        return typeof t === "number" ? {
            width: t,
            height: t / Eie
        } : {
            width: t,
            height: `calc(${t} / ${Eie})`
        };
    } else {
        return {
            width: 0,
            height: 0
        };
    }
};

const kie = () => {
    console.error("Incorrect AvatarSelector data provider.");
    return Promise.reject();
};

const Aie = {
    getAvatar: kie,
    getName: kie,
    resolveId: kie,
    saveAvatar: kie,
    deleteAvatar: kie
};

const Mie = () => Aie;

const Nie = e => {
    const t = gie();
    const {ariaLabel: o, tooltip: n} = t({
        ariaLabel: e.imageSelectorProps?.ariaLabel,
        tooltip: e.imageSelectorProps?.tooltip
    });
    const {ariaLabel: a = "", tooltip: r = "", name: s} = y8({
        type: e.type,
        userId: e.userId,
        useAsButton: true,
        dataProvider: e.dataProvider
    });
    return {
        ariaLabel: e.ariaLabel ?? (s === undefined ? a ?? "" : [ a, o ].join(", ")),
        tooltip: e.tooltip ?? (s === undefined ? r ?? "" : [ r, n ].join(", "))
    };
};

var Oie = "sas_components-AvatarSelector-AvatarSelector_avatar-container";

var Pie = "sas_components-AvatarSelector-AvatarSelector_avatar";

var Bie = "sas_components-AvatarSelector-AvatarSelector_edit-icon";

var zie = {
    avatarContainer: Oie,
    avatar: Pie,
    editIcon: Bie
};

const Fie = Dh("AvatarSelector");

const jie = ({imageSelectorProps: e, dataProvider: r = Mie(), ...i}) => {
    const l = c(null);
    const [d, u] = n(true);
    const {tooltip: m, ariaLabel: p} = Nie({
        ...i,
        dataProvider: r
    });
    const [f, g] = n();
    const h = c(0);
    const b = f8(r, i.userId, i.type);
    a((() => () => {
        h.current += 1;
    }), []);
    const v = s((() => {
        const e = ++h.current;
        r.getAvatar?.(i.userId, i.type).then((t => {
            if (h.current > e) return;
            u(t.length === 0);
        })).catch((() => {
            if (h.current > e) return;
            u(true);
            Fie.warn(`Failed to fetch the avatar details info for id:${i.userId} and type: ${i.type}. Using default avatar.`);
        })).finally((() => {
            if (h.current > e) return;
            g(Date.now());
        }));
    }), [ r, i.userId, i.type ]);
    g8(r, v, i.userId, i.type, f);
    a(v, [ v ]);
    const y = () => new Promise(((e, t) => {
        r.deleteAvatar(i.userId, i.type).then((() => {
            b();
            e();
        })).catch(t);
    }));
    const x = e => new Promise(((t, o) => {
        r.saveAvatar(e, i.userId, i.type).then((() => {
            i.onSaveComplete?.({
                status: "success"
            });
            b();
            t();
        })).catch((() => {
            i.onSaveComplete?.({
                status: "failure"
            });
            o();
        }));
    }));
    const S = C_();
    const w = I_({
        bg: S.tokensExperimental["color-action-background-emphasis-normal"],
        "edit-icon-bd": S.tokensExperimental["color-action-border-emphasis-normal"],
        "edit-icon-bg": S.tokensExperimental["color-action-icon-control-normal"],
        "edit-icon-bw": S.tokensExperimental["size-border-width-s"]
    }, "avatar-selector");
    return t(o, null, t(Lie, Ee({
        ellipse: true,
        src: d ? undefined : "dummy string",
        imageSize: {},
        renderImageContainer: ({ref: e, onPress: o, onFocus: n}) => t("div", {
            style: w,
            className: zie.avatarContainer,
            ref: e,
            onFocus: () => {
                if (l.current) {
                    n(l.current);
                }
            }
        }, t(O8, Ee({}, i, {
            dataProvider: r,
            ref: e => {
                l.current = e;
                D_(i.avatarRef, e);
            },
            useAsButton: true,
            onPress: o,
            className: zie.avatar,
            size: i.size ?? "extraLarge",
            tooltip: m,
            ariaLabel: p,
            testId: gb(i.testId, "avatar")
        })), t("div", {
            className: zie.editIcon,
            onClick: o
        }, t(MM, {
            icon: TT,
            theme: e => ({
                "--icon-default-override-fg": e.tokensExperimental["color-text-neutral-inverse"]
            }),
            tooltip: m
        }))),
        onSaveImage: x,
        onRemoveImage: y,
        testId: gb(i.testId, "imageSelector")
    }, e)));
};

dU(jie);

pb(Dte);

dU(DG);

dU(QM);

dU(DG);

fb(Kt);

pb(Dte);

fb(Kt);

const Vie = new R(false);

let Hie = null;

let Uie = undefined;

function Gie(e) {
    if (e) {
        Uie = Uie !== null && Uie !== void 0 ? Uie : Jh.subscribe((e => {
            if (Hie !== e) {
                gn().then((() => na(e)));
                j_([ {
                    key: L_.FORMAT_LOCALE_KEY,
                    value: e || undefined,
                    oldValue: Hie || undefined
                } ]);
                Hie = e;
            }
        }));
    } else {
        Uie === null || Uie === void 0 ? void 0 : Uie.unsubscribe();
        Uie = undefined;
    }
    Vie.next(!!e);
}

function Kie() {
    return Zg(Vie);
}

const Wie = Gg("VASDK_E2EMODE") ?? false;

if (Wie) {
    qg();
}

const $ie = new R(undefined);

function Yie(e) {
    $ie.next(e);
}

function qie() {
    return $ie.value;
}

function Xie() {
    return Zg($ie);
}

var Zie, Jie;

const Qie = Hg["SASReport.genericError.msg"]();

function ele(e) {
    const t = e.getUrls();
    const o = [];
    if (t) {
        for (const e of t) {
            if (!e) {
                continue;
            }
            const t = e.getType();
            if (t !== Sl.STP && t !== Sl.IMAGE) {
                continue;
            }
            const n = new Gm;
            n.setName(e.getName());
            n.setType(Um.STP);
            n.setContentKey(e.getContentKey());
            n.setServerFile(e.getServerFile());
            n.setContent(e.getUrlString());
            o.push(n);
        }
    }
    return o;
}

function tle(e) {
    const t = e.getUrls();
    if (t) {
        for (let e = 0; e < t.length; ++e) {
            const o = t[e];
            if (o && o.getType() === Sl.REPORT) {
                return o.getContentKey();
            }
        }
    }
    const o = e.getFiles();
    if (o) {
        for (let e = 0; e < o.length; ++e) {
            const t = o[e];
            if (t && t.getType() === wl.REPORT) {
                return t.getContentKey();
            }
        }
    }
    return null;
}

let ole = (Zie = class e {
    _subscribe() {
        if (this._reportSubscribed) {
            return;
        }
        this._reportSubscribed = true;
        this._server.getStatusNotifier().pipe(W(this._destroyed$), $((e => e === "connected")), Y(1)).subscribe((() => this._fetchReport()));
    }
    constructor(e, t, o, n) {
        jo(this, "_report", Jie, this);
        this._server = void 0;
        this._identifierOrLocation = void 0;
        this._reportContent = void 0;
        this._reportState = void 0;
        this._reportFetched = false;
        this._reloadIgnoreUserState = undefined;
        this._reportGenerationInProgress = false;
        this._reloadPending = false;
        this._errorNotifier = new k(1);
        this._currentError = void 0;
        this._reportReadyNotifier = new R("loading");
        this._destroyed$ = new k(1);
        this._retainCount = 0;
        this._reportSubscribed = false;
        this._userStateSaving = false;
        this._server = e;
        this._identifierOrLocation = t;
        this._reportContent = o;
        this._reportState = n;
        this._currentError = e.getError();
        e.getErrorNotifier().pipe(W(this._destroyed$)).subscribe((e => this._setError(e)));
        this._subscribe();
    }
    getErrorNotifier() {
        return this._errorNotifier;
    }
    getReportStateNotifier() {
        return this._reportReadyNotifier;
    }
    _setError(e) {
        if (this._currentError === e) {
            return;
        }
        this._currentError = e;
        this._errorNotifier.next(e);
    }
    _fetchReport() {
        if (this._reportFetched) {
            throw new Error("Report already fetched.");
        }
        this._reportFetched = true;
        const e = this.getServer().getReportManager();
        if (!e) {
            throw new Error("ReportManager null. Unable to fetch report.");
        }
        const t = window.performance.now();
        let o;
        if (this._reportContent) {
            o = e.getReportByContentForClient(this._reportContent);
        } else if ($g() && !this._reloadIgnoreUserState) {
            o = e.getReportWithUserState(this._identifierOrLocation);
        } else {
            o = e.getReport(this._identifierOrLocation);
        }
        this._reloadIgnoreUserState = undefined;
        if (!o) {
            throw new Error(Qie);
        }
        this._reportGenerationInProgress = true;
        new hm(o).always((e => {
            this._reportGenerationInProgress = false;
            const o = window.performance.now();
            console.info("PERFORMANCE: Total time to generate report:", o - t);
            if (this._reloadPending) {
                this._reloadPending = false;
                if (this._deferredUnsubscribe()) {
                    return;
                }
                const t = e.getRequestedResource();
                if (t && t instanceof Ll) {
                    this._report = t;
                }
                this.reload();
                return;
            }
            const n = e.getWarning();
            if (n) {
                this._setError(n.getMessage() || Qie);
                this._deferredUnsubscribe();
                return;
            }
            const a = e.getRequestedResource();
            if (!a || !(a instanceof Ll)) {
                this._setError(yc.getLocalizedString("transport", "warning.resource.not.accessible.txt"));
                this._deferredUnsubscribe();
                return;
            }
            if (!this._deferredUnsubscribe()) {
                this._report = a;
                this._reportReadyNotifier.next("ready");
            }
        }));
    }
    getReportState() {
        return this._reportReadyNotifier.value;
    }
    getError() {
        return this._currentError || this._server.getError();
    }
    _getMeta() {
        return this._report ? this._report.getMeta() : null;
    }
    get name() {
        const e = this._getMeta();
        return e ? e.getDisplayName() : null;
    }
    get identifierOrLocation() {
        return this._identifierOrLocation;
    }
    get description() {
        const e = this._getMeta();
        return e ? e.getDescription() : null;
    }
    get dateCreated() {
        const e = this._getMeta();
        return e ? new Date(e.getCreatedDatetime()) : null;
    }
    get dateUpdated() {
        const e = this._getMeta();
        return e ? new Date(e.getLastModifiedDatetime()) : null;
    }
    get author() {
        const e = this._getMeta();
        return e ? e.getCreatedBy() : null;
    }
    createSession(e, t) {
        const o = this._server.getReportManager();
        if (!o || !this._report) {
            return null;
        }
        const n = new Mf(o, this._report);
        const a = n.getSASReportConfiguration();
        a.setUseSingleThreadMode(false);
        a.setUseDefaultGTLDataTips(false);
        a.setUseReadOnlyMode(false);
        a.setMaximumNumberOfSectionsInMemory(-1);
        a.setMetaDataQueryMode(Xm.LAZY);
        if ($g()) {
            n.setAutoSavePrimaryState(true);
        }
        const r = a.getFullyQualifiedPathToBIRDReportDirectory();
        if (eh()) {
            a.setDoVisualStyleOverride(true);
        }
        if (t !== undefined) {
            let e;
            {
                const t = Jo.getStringContentsOfFile(`${r}/report.xml`);
                if (t) {
                    const o = t.match(/<BaseStylesheetResource file="(.*?)"/);
                    if (o && o.length === 2) {
                        e = `${r}/${o[1]}`;
                    }
                }
            }
            if (e) {
                Jo.exports.FS.writeFile(e, t);
            } else {
                console.error("The base stylesheet was not found so the custom css could not be applied");
            }
        }
        if (this._reportState) {
            Jo.exports.FS.writeFile(`${r}/userStateReport.xml`, this._reportState);
            a.setRestoreUserState(true);
        }
        a.setComparisonEpsilon(this._report.getConnection().getServer().getMeta().getComparisonEpsilon());
        a.setTransportURL(this._server.getFinishedURLString());
        const s = this._server.getConnectionManager();
        if (!s) {
            return null;
        }
        a.setMapConnectionInfo(s.getMapConnectionInfo());
        const i = this._report.getManifest();
        if (i) {
            a.setCachedReportURLs(ele(i));
            const e = tle(i);
            if (e) {
                a.setContentKey(e);
            }
        }
        a.setViewSet(e);
        try {
            n.openReport();
        } catch (e) {
            return null;
        }
        return n;
    }
    reload(e) {
        this._reportFetched = false;
        this._reloadIgnoreUserState = e;
        if (this._report) {
            this._reportSubscribed = false;
            tde().removeReport(this._report);
            this._subscribe();
        } else if (this._reportGenerationInProgress) {
            this._reloadPending = true;
        }
        this._report = undefined;
        this._reportReadyNotifier.next("loading");
    }
    setUserStateSaving(e) {
        if (this._userStateSaving === e) {
            return;
        }
        this._userStateSaving = e;
        if (e) {
            this._reportReadyNotifier.next("saving");
        } else if (this._retainCount) {
            this.reload();
        }
    }
    getServer() {
        return this._server;
    }
    retain() {
        this._retainCount++;
        return this;
    }
    _deferredUnsubscribe() {
        if (this._retainCount === 0) {
            this._server.unsubscribe(this.identifierOrLocation);
            return true;
        }
        return false;
    }
    release() {
        if (this._retainCount <= 0) {
            throw new Error("SASReport released without being retained");
        }
        this._retainCount--;
        if (this._reportGenerationInProgress) {
            return;
        }
        if (this._retainCount === 0) {
            this._server.unsubscribe(this.identifierOrLocation);
        }
    }
    close() {
        if (this._retainCount !== 0) {
            console.error(`SASReport ${this.identifierOrLocation} was destroyed while in use`);
        }
        this._destroyed$.next(true);
    }
}, Jie = Vo(Zie.prototype, "_report", [ um ], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
}), Vo(Zie.prototype, "close", [ mm ], Object.getOwnPropertyDescriptor(Zie.prototype, "close"), Zie.prototype), 
Zie);

class nle {
    constructor(e) {
        this._callbacks = [];
        this._allScheduled = false;
        this._currentItem = e;
    }
    _scheduleUpdate() {
        if (this._timerId) {
            return;
        }
        this._timerId = setTimeout((() => this._notify()), 0);
    }
    _notify() {
        var e;
        const t = (e = this._nextItem) !== null && e !== void 0 ? e : this._currentItem;
        const o = this._scheduledItems;
        this._currentItem = t;
        this._nextItem = undefined;
        this._scheduledItems = undefined;
        this._timerId = undefined;
        if (this._allScheduled) {
            this._allScheduled = false;
            for (const e of this._callbacks) {
                if (this._callbacks.includes(e)) {
                    e(t);
                }
            }
        } else if (o) {
            for (const e of o) {
                e(t);
            }
        }
    }
    subscribe(e) {
        var t;
        if (this._callbacks.indexOf(e) === -1) {
            this._callbacks.push(e);
        }
        if (!this._allScheduled && !((t = this._scheduledItems) === null || t === void 0 ? void 0 : t.includes(e))) {
            this._scheduledItems = [ ...this._scheduledItems || [], e ];
            this._scheduleUpdate();
        }
        return () => {
            this.unsubscribe(e);
        };
    }
    unsubscribe(e) {
        this._callbacks = this._callbacks.filter((t => t !== e));
    }
    get currentItem() {
        return this._currentItem;
    }
    next(e) {
        this._allScheduled = true;
        this._nextItem = e;
        this._scheduleUpdate();
    }
}

const ale = {
    "loading.msg": () => `Loading...`,
    "logon.message.msg": () => `Authentication is required. Enter a valid user ID and password.`,
    "logon.button.msg": () => `Login...`,
    "SASServer.logonError.msg": () => `Unable to log on to the server.`,
    "SASServer.genericError.msg": () => `The server cannot be reached.`
};

const rle = {
    "loading.msg": () => `جارٍ التحميل...`,
    "logon.message.msg": () => `المصادقة مطلوبة. أدخل كلمة مرور ومعرف مستخدم صالح.`,
    "logon.button.msg": () => `تسجيل الدخول...`,
    "SASServer.logonError.msg": () => `يتعذر تسجيل الدخول إلى الخادم.`,
    "SASServer.genericError.msg": () => `لا يمكن الوصول إلى الخادم.`
};

const sle = {
    "loading.msg": () => `Načítání...`,
    "logon.message.msg": () => `Je požadována autentizace. Zadejte platní ID uživatele a heslo.`,
    "logon.button.msg": () => `Přihlášení...`,
    "SASServer.logonError.msg": () => `K serveru se nelze přihlásit.`,
    "SASServer.genericError.msg": () => `Server je nedosažitelný.`
};

const ile = {
    "loading.msg": () => `Indlæser...`,
    "logon.message.msg": () => `Validering er påkrævet. Skriv et gyldigt bruger-id og en gyldig adgangskode.`,
    "logon.button.msg": () => `Logon...`,
    "SASServer.logonError.msg": () => `Der kunne ikke logges på serveren.`,
    "SASServer.genericError.msg": () => `Der kan ikke oprettes forbindelse til serveren.`
};

const lle = {
    "loading.msg": () => `Ladevorgang...`,
    "logon.message.msg": () => `Authentifizierung erforderlich. Geben Sie eine gültige Benutzer-ID und ein gültiges Passwort ein.`,
    "logon.button.msg": () => `Anmeldung...`,
    "SASServer.logonError.msg": () => `Die Anmeldung am Server ist nicht möglich.`,
    "SASServer.genericError.msg": () => `Der Server ist nicht erreichbar.`
};

const cle = {
    "loading.msg": () => `Φόρτωση...`,
    "logon.message.msg": () => `Απαιτείται πιστοποίηση. Εισαγάγετε ένα έγκυρο αναγνωριστικό χρήστη και κωδικό πρόσβασης.`,
    "logon.button.msg": () => `Σύνδεση...`,
    "SASServer.logonError.msg": () => `Δεν είναι δυνατή η σύνδεση στον διακομιστή.`,
    "SASServer.genericError.msg": () => `Δεν είναι δυνατή η πρόσβαση στον διακομιστή.`
};

const dle = {
    "loading.msg": () => `Cargando...`,
    "logon.message.msg": () => `Se requiere autenticación. Introduzca un ID de usuario y una contraseña válidos.`,
    "logon.button.msg": () => `Iniciando sesión...`,
    "SASServer.logonError.msg": () => `No se puede iniciar sesión en el servidor.`,
    "SASServer.genericError.msg": () => `No se puede acceder al servidor.`
};

const ule = {
    "loading.msg": () => `Ladataan...`,
    "logon.message.msg": () => `Todennus vaaditaan. Anna kelvollinen käyttäjätunnus ja salasana.`,
    "logon.button.msg": () => `Kirjaudu sisään...`,
    "SASServer.logonError.msg": () => `Palvelimelle kirjautuminen ei onnistu.`,
    "SASServer.genericError.msg": () => `Palvelimeen ei saada yhteyttä.`
};

const mle = {
    "loading.msg": () => `Chargement en cours...`,
    "logon.message.msg": () => `Authentification requise. Saisissez un ID utilisateur et un mot de passe valides.`,
    "logon.button.msg": () => `Connexion...`,
    "SASServer.logonError.msg": () => `Impossible de se connecter au serveur.`,
    "SASServer.genericError.msg": () => `Le serveur est inaccessible.`
};

const ple = {
    "loading.msg": () => `טוען...`,
    "logon.message.msg": () => `חובה לבצע אימות. הזן מזהה משתמש וסיסמה חוקיים.`,
    "logon.button.msg": () => `נכנס...`,
    "SASServer.logonError.msg": () => `לא ניתן להתחבר לשרת.`,
    "SASServer.genericError.msg": () => `לא ניתן להתחבר לשרת.`
};

const fle = {
    "loading.msg": () => `Učitavanje...`,
    "logon.message.msg": () => `Obavezna je provjera autentičnosti. Unesite valjani korisnički ID i lozinku.`,
    "logon.button.msg": () => `Prijava...`,
    "SASServer.logonError.msg": () => `Prijava na poslužitelj nije moguća.`,
    "SASServer.genericError.msg": () => `Nije moguće uspostaviti vezu s poslužiteljem.`
};

const gle = {
    "loading.msg": () => `Betöltés...`,
    "logon.message.msg": () => `Hitelesítés szükséges. Adjon meg egy érvényed felhasználói azonosítót és jelszót.`,
    "logon.button.msg": () => `Bejelentkezés...`,
    "SASServer.logonError.msg": () => `Nem lehet bejelentkezni a kiszolgálóra.`,
    "SASServer.genericError.msg": () => `A kiszolgáló nem érhető el.`
};

const hle = {
    "loading.msg": () => `Caricamento...`,
    "logon.message.msg": () => `L’autenticazione è obbligatoria. Immetti ID utente e password validi.`,
    "logon.button.msg": () => `Accedi...`,
    "SASServer.logonError.msg": () => `Impossibile connettersi al server.`,
    "SASServer.genericError.msg": () => `Impossibile raggiungere il server.`
};

const ble = {
    "loading.msg": () => `טוען...`,
    "logon.message.msg": () => `חובה לבצע אימות. הזן מזהה משתמש וסיסמה חוקיים.`,
    "logon.button.msg": () => `נכנס...`,
    "SASServer.logonError.msg": () => `לא ניתן להתחבר לשרת.`,
    "SASServer.genericError.msg": () => `לא ניתן להתחבר לשרת.`
};

const vle = {
    "loading.msg": () => `ロード中...`,
    "logon.message.msg": () => `認証が必要です。有効なユーザー ID とパスワードを入力してください。`,
    "logon.button.msg": () => `ログイン...`,
    "SASServer.logonError.msg": () => `サーバーにログオンできません。`,
    "SASServer.genericError.msg": () => `サーバーにアクセスできません。`
};

const yle = {
    "loading.msg": () => `로드 중...`,
    "logon.message.msg": () => `인증이 필요합니다. 올바른 사용자 ID 및 암호를 입력하십시오.`,
    "logon.button.msg": () => `로그인...`,
    "SASServer.logonError.msg": () => `서버에 로그인할 수 없습니다.`,
    "SASServer.genericError.msg": () => `서버에 연결할 수 없습니다.`
};

const xle = {
    "loading.msg": () => `Laster inn...`,
    "logon.message.msg": () => `Godkjenning kreves. Tast inn gyldig bruker-ID og passord.`,
    "logon.button.msg": () => `Pålogging...`,
    "SASServer.logonError.msg": () => `Kan ikke logge på til tjeneren.`,
    "SASServer.genericError.msg": () => `Tjeneren kan ikke nås.`
};

const Sle = {
    "loading.msg": () => `Laden...`,
    "logon.message.msg": () => `Authenticatie is verplicht. Voer een geldige gebruikers-ID en een geldig wachtwoord in.`,
    "logon.button.msg": () => `Aanmelden...`,
    "SASServer.logonError.msg": () => `Aanmelding bij de server is mislukt.`,
    "SASServer.genericError.msg": () => `De server is niet bereikbaar.`
};

const wle = {
    "loading.msg": () => `Laster inn...`,
    "logon.message.msg": () => `Godkjenning kreves. Tast inn gyldig bruker-ID og passord.`,
    "logon.button.msg": () => `Pålogging...`,
    "SASServer.logonError.msg": () => `Kan ikke logge på til tjeneren.`,
    "SASServer.genericError.msg": () => `Tjeneren kan ikke nås.`
};

const Cle = {
    "loading.msg": () => `Ładowanie...`,
    "logon.message.msg": () => `Uwierzytelnienie jest wymagane. Podaj prawidłowy identyfikator i hasło użytkownika.`,
    "logon.button.msg": () => `Zaloguj się...`,
    "SASServer.logonError.msg": () => `Nie można zalogować się do serwera.`,
    "SASServer.genericError.msg": () => `Nie można połączyć się z serwerem.`
};

const Ele = {
    "loading.msg": () => `Carregando...`,
    "logon.message.msg": () => `É necessária autenticação. Insira um ID de usuário e uma senha válidos.`,
    "logon.button.msg": () => `Logon...`,
    "SASServer.logonError.msg": () => `Não é possível fazer logon no servidor.`,
    "SASServer.genericError.msg": () => `O servidor não pode ser alcançado.`
};

const Ile = {
    "loading.msg": () => `A carregar...`,
    "logon.message.msg": () => `A autenticação é necessária. Introduza um ID de utilizador e uma palavra-passe válidos.`,
    "logon.button.msg": () => `Iniciar sessão...`,
    "SASServer.logonError.msg": () => `Não foi possível iniciar sessão no servidor.`,
    "SASServer.genericError.msg": () => `Não foi possível contactar o servidor.`
};

const _le = {
    "loading.msg": () => `Загрузка...`,
    "logon.message.msg": () => `Требуется аутентификация. Введите допустимый идентификатор пользователя и пароль.`,
    "logon.button.msg": () => `Учетные данные...`,
    "SASServer.logonError.msg": () => `Невозможно войти на сервер.`,
    "SASServer.genericError.msg": () => `Невозможно связаться с сервером.`
};

const Dle = {
    "loading.msg": () => `Učitavanje...`,
    "logon.message.msg": () => `Obavezna je potvrda identiteta. Unesite važeći korisnički ID i lozinku.`,
    "logon.button.msg": () => `Prijavljivanje...`,
    "SASServer.logonError.msg": () => `Prijavljivanje na server nije moguće.`,
    "SASServer.genericError.msg": () => `Nije moguće uspostaviti vezu sa serverom.`
};

const Lle = {
    "loading.msg": () => `Načítava sa...`,
    "logon.message.msg": () => `Vyžaduje sa overenie. Zadajte platný identifikátor a heslo používateľa.`,
    "logon.button.msg": () => `Prihlásenie...`,
    "SASServer.logonError.msg": () => `Nedá sa prihlásiť na server.`,
    "SASServer.genericError.msg": () => `Nedá sa spojiť so serverom.`
};

const Tle = {
    "loading.msg": () => `Nalaganje ...`,
    "logon.message.msg": () => `Potrebno je preverjanje pristnosti. Vnesite veljavni ID uporabnika in geslo.`,
    "logon.button.msg": () => `Prijava ...`,
    "SASServer.logonError.msg": () => `Prijava v strežnik ni mogoča.`,
    "SASServer.genericError.msg": () => `Strežnika ni mogoče doseči.`
};

const Rle = {
    "loading.msg": () => `Učitavanje...`,
    "logon.message.msg": () => `Obavezna je potvrda identiteta. Unesite važeći korisnički ID i lozinku.`,
    "logon.button.msg": () => `Prijavljivanje...`,
    "SASServer.logonError.msg": () => `Prijavljivanje na server nije moguće.`,
    "SASServer.genericError.msg": () => `Nije moguće uspostaviti vezu sa serverom.`
};

const kle = {
    "loading.msg": () => `Läser in...`,
    "logon.message.msg": () => `Autentisering krävs. Ange ett giltigt användar-ID och lösenord.`,
    "logon.button.msg": () => `Inloggning...`,
    "SASServer.logonError.msg": () => `Det går inte att logga in på servern.`,
    "SASServer.genericError.msg": () => `Servern kan inte nås.`
};

const Ale = {
    "loading.msg": () => `กำลังโหลด…`,
    "logon.message.msg": () => `ต้องมีการรับรองความถูกต้อง ป้อน ID ผู้ใช้และรหัสผ่านที่ถูกต้อง`,
    "logon.button.msg": () => `เข้าสู่ระบบ...`,
    "SASServer.logonError.msg": () => `ไม่สามารถเข้าสู่ระบบเซิร์ฟเวอร์ได้`,
    "SASServer.genericError.msg": () => `ไม่สามารถเข้าถึงเซิร์ฟเวอร์ได้`
};

const Mle = {
    "loading.msg": () => `Yükleniyor...`,
    "logon.message.msg": () => `Kimlik doğrulaması gerekli. Geçerli bir kullanıcı kimliği ve parolası girin.`,
    "logon.button.msg": () => `Oturum aç...`,
    "SASServer.logonError.msg": () => `Sunucuya oturum açılamıyor.`,
    "SASServer.genericError.msg": () => `Sunucuya erişim sağlanamadı.`
};

const Nle = {
    "loading.msg": () => `正在加载...`,
    "logon.message.msg": () => `需要身份验证。请输入有效的用户 ID 和密码。`,
    "logon.button.msg": () => `登录...`,
    "SASServer.logonError.msg": () => `无法登录服务器。`,
    "SASServer.genericError.msg": () => `无法访问服务器。`
};

const Ole = {
    "loading.msg": () => `正在載入…`,
    "logon.message.msg": () => `需要驗證。請輸入有效的使用者 ID 和密碼。`,
    "logon.button.msg": () => `登入…`,
    "SASServer.logonError.msg": () => `無法登入伺服器。`,
    "SASServer.genericError.msg": () => `無法連到伺服器。`
};

const Ple = {
    "": ale,
    ar: rle,
    cs: sle,
    da: ile,
    de: lle,
    el: cle,
    es: dle,
    fi: ule,
    fr: mle,
    he: ple,
    hr: fle,
    hu: gle,
    it: hle,
    iw: ble,
    ja: vle,
    ko: yle,
    nb: xle,
    nl: Sle,
    no: wle,
    pl: Cle,
    "pt-BR": Ele,
    pt: Ile,
    ru: _le,
    sh: Dle,
    sk: Lle,
    sl: Tle,
    sr: Rle,
    sv: kle,
    th: Ale,
    tr: Mle,
    "zh-Hans": Nle,
    "zh-Hant": Ole
};

function Ble(e, t) {
    const o = e[""];
    if (o === undefined) {
        throw new Error;
    }
    const n = Object.keys(e);
    const a = Fle(t, n);
    if (o instanceof Function) {
        const t = a.map((t => e[t])).map((e => e()));
        return Promise.all(t).then((e => {
            const t = e.map((e => e.default));
            return Object.assign({}, ...t);
        }));
    } else {
        const t = a.map((t => e[t]));
        return Object.assign({}, ...t);
    }
}

const zle = "en";

function Fle(e, t) {
    const o = t.concat([ zle ]);
    const n = e.map((e => {
        e = Vle[e] || e;
        const t = (e, t) => jle(e, t) ? 1 : -1;
        return o.filter((t => jle(e, t))).sort(t);
    }));
    const a = n.filter((e => e.length > 0));
    const r = n.filter((e => e.length > 1));
    let s = [];
    if (r.length > 0) {
        s = r[0];
    } else if (a.length > 0) {
        s = a[0];
    } else {
        throw new Error(`Could not find a loader for locales: ${e}`);
    }
    return s.filter((e => e !== zle));
}

function jle(e, t) {
    e = e.replace(/\_/g, "-");
    t = t.replace(/\_/g, "-");
    if (t === "" || e === t) {
        return true;
    }
    if (!e.startsWith(t)) {
        return false;
    }
    const o = e[t.length];
    return o === "-";
}

const Vle = {
    zh: "zh-Hans",
    "zh-CN": "zh-Hans",
    "zh-HK": "zh-Hant",
    "zh-TW": "zh-Hant"
};

const Hle = Ble(Ple, navigator.languages);

const Ule = {
    major: 2,
    minor: 4,
    patch: 1
};

const Gle = [ "resize", "orientationchange", "mousemove", "mousedown", "mouseup", "touchstart", "touchmove", "touchend", "touchcancel", "keydown", "keyup", "wheel" ];

let Kle = 15 * 6e4;

let Wle = 0;

function $le() {
    if (!Yle) {
        clearInterval(Wle);
        Wle = 0;
        return;
    }
    Yle = false;
    for (const [e, t] of Zle) {
        if (e.startsWith("guest-token:") || t.status !== "authorized") {
            continue;
        }
        fetch(`${e}/SASLogon/`, {
            credentials: "include",
            headers: {
                Accept: "application/json",
                "X-Requested-With": "XMLHttpRequest"
            }
        }).catch((() => {}));
    }
}

let Yle = false;

function qle(e = false) {
    Yle = true;
    if (!Wle || e === true) {
        $le();
        window.clearInterval(Wle);
        Wle = window.setInterval($le, Kle);
    }
}

let Xle = new Map;

let Zle = new Map;

let Jle = new Map;

let Qle;

function ece(e, t) {
    if (t === "guest-token") {
        return `${t}:${e}`;
    }
    return e;
}

function tce(e) {
    return `${e}/SASVisualAnalytics/logon/index.html`;
}

function oce(e) {
    Xle = new Map(e.statusCbs);
    Zle = new Map(e.authMap);
    Jle = new Map(e.userIdMap);
}

async function nce(e) {
    const t = await fetch(`${e}/identities/users/@currentUser`, {
        headers: {
            Accept: "application/json",
            "X-Requested-With": "XMLHttpRequest"
        },
        credentials: "include"
    });
    if (!t.ok) {
        throw new Error("[authorization] Unable to update user, invalid identities response");
    }
    try {
        const o = await t.json();
        Jle.set(e, o.id);
    } catch (e) {
        throw new Error("[authorization] Unable to update user, invalid identities json response");
    }
}

async function ace(e) {
    const t = await fetch(`${e}/reports/?sso_guest=true`, {
        headers: {
            Accept: "application/json",
            "X-Requested-With": "XMLHttpRequest"
        },
        credentials: "include"
    });
    if (!t.ok) {
        throw new Error("invalid logon response");
    }
}

async function rce(e) {
    var t;
    const o = await fetch(`${e}/SASLogon/oauth/token`, {
        method: "POST",
        credentials: "omit",
        headers: {
            Authorization: `Basic ${btoa("sas.mobilebi:")}`,
            Accept: "application/json, */*"
        },
        body: new URLSearchParams("grant_type=guest")
    });
    if (!o.ok) {
        return [ undefined, "[Authorization]: Failed to fetch guest token." ];
    }
    let n;
    try {
        n = ((t = await o.json()) === null || t === void 0 ? void 0 : t.access_token) || undefined;
    } catch (e) {}
    if (!n) {
        return [ undefined, "[Authorization]: no guest token in response." ];
    }
    return [ n, undefined ];
}

async function sce(e) {
    const [t, o] = await rce(e);
    if (o) {
        console.error(o);
        ice(e, "guest-token", {
            status: "initalizing",
            error: Hle["SASServer.logonError.msg"]()
        });
        return;
    }
    ice(e, "guest-token", {
        status: "authorized",
        token: t
    });
}

function ice(e, t, o) {
    const n = Zle.get(ece(e, t));
    if (!n) {
        throw new Error("No auth found");
    }
    lce(e, t, Object.assign(Object.assign({}, n), o));
}

function lce(e, t, o) {
    Zle.set(ece(e, t), o);
    const n = T(o, [ "guestType", "serverHack" ]);
    for (const t of Xle.get(e) || []) {
        t(n);
    }
}

const cce = {
    versionInfo: Ule,
    getKey: ece,
    onStatusChange(e, t, o) {
        const n = Xle.get(ece(e, o)) || [];
        n.push(t);
        Xle.set(e, n);
    },
    getValue(e, t) {
        return Zle.get(ece(e, t));
    },
    async _logonAsGuest(e) {
        try {
            await ace(e);
        } catch (t) {
            ice(e, "guest", {
                status: "initalizing",
                error: Hle["SASServer.logonError.msg"]()
            });
            throw new Error("[authorization] Unable to log in as guest.");
        }
        this.authorize(e, "guest");
    },
    addConnection(e, t) {
        let o = Zle.get(ece(e, t));
        if (t === "guest-token") {
            if (o) {
                return o;
            }
            o = {
                status: "initalizing",
                guestType: "token"
            };
            lce(e, t, o);
            sce(e);
            return o;
        }
        if (o) {
            if (t === "guest") {
                if (o.status === "credentials-invalid") {
                    ice(e, "guest", {
                        status: "initalizing",
                        guestType: "credential"
                    });
                    this._logonAsGuest(e);
                } else {
                    ice(e, "guest", {
                        guestType: "credential"
                    });
                }
            }
            return o;
        }
        o = {
            status: "initalizing",
            guestType: t === "guest" ? "credential" : undefined
        };
        lce(e, t, o);
        (async () => {
            var o, n;
            try {
                const n = await fetch(tce(e), {
                    credentials: "include"
                });
                const a = await n.text();
                if (a.includes("data-report-sas-auth-success")) {
                    ice(e, "credentials", {
                        status: "authorized"
                    });
                    nce(e);
                } else {
                    if (((o = Zle.get(ece(e, t))) === null || o === void 0 ? void 0 : o.guestType) === "credential") {
                        await this._logonAsGuest(e);
                    } else {
                        ice(e, "credentials", {
                            status: "credentials-invalid"
                        });
                    }
                }
            } catch (o) {
                if (((n = Zle.get(ece(e, t))) === null || n === void 0 ? void 0 : n.guestType) === "credential") {
                    await this._logonAsGuest(e);
                } else {
                    console.warn("[Authorization]: unable to determine auth status", o);
                    ice(e, "credentials", {
                        status: "credentials-invalid"
                    });
                }
            }
        })();
        return o;
    },
    activate() {
        var e, t;
        if (Qle) {
            return;
        }
        Qle = async () => {
            qle(true);
            for (const [e, t] of Zle) {
                if (t.status !== "authorized") {
                    continue;
                }
                const o = await fetch(`${e}/reports/`, {
                    headers: {
                        Accept: "application/json",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    credentials: "include"
                });
                if (!o.ok || o.url.includes("/SASLogon/")) {
                    cce.deauthorize(e);
                }
            }
        };
        if ((t = (e = window.sas) === null || e === void 0 ? void 0 : e.ltjs) === null || t === void 0 ? void 0 : t.jest) {
            return;
        }
        if (!Wle) {
            Wle = window.setInterval($le, Kle);
            for (const e of Gle) {
                window.addEventListener(e, qle, {
                    capture: true
                });
            }
        }
        window.addEventListener("focus", Qle);
    },
    deactivate() {
        if (Wle) {
            window.clearInterval(Wle);
            Wle = 0;
        }
        for (const e of Gle) {
            window.removeEventListener(e, qle, {
                capture: true
            });
        }
        if (Qle) {
            window.removeEventListener("focus", Qle);
            Qle = undefined;
        }
        Xle.clear();
        Zle.clear();
        Jle.clear();
    },
    deauthorize(e, t) {
        const o = Zle.get(ece(e, t));
        if (!o || o.status !== "authorized") {
            return;
        }
        if (o.guestType === "token") {
            ice(e, "guest-token", {
                status: "initalizing",
                token: undefined
            });
            sce(e);
            return;
        }
        if (!o.guestType) {
            ice(e, t, {
                status: "credentials-invalid",
                serverHack: undefined
            });
            return;
        }
        ice(e, t, {
            status: "initalizing",
            serverHack: undefined
        });
        setTimeout((async () => {
            const [o] = await rce(e);
            if (!o) {
                ice(e, t, {
                    status: "credentials-invalid"
                });
                throw new Error("[authorization] unable to re-authorize guest.");
            }
            const n = await fetch(`${e}/identities/users/@currentUser`, {
                headers: {
                    Accept: "application/json",
                    "X-Requested-With": "XMLHttpRequest",
                    Authorization: `bearer ${o}`
                },
                credentials: "omit"
            });
            if (!n.ok) {
                ice(e, t, {
                    status: "credentials-invalid"
                });
                throw new Error("[authorization] unable to re-authorize guest.");
            }
            try {
                const t = await n.json();
                if (t.id !== Jle.get(e)) {
                    throw new Error("[authorization] user is not guest.");
                }
                await this._logonAsGuest(e);
            } catch (o) {
                ice(e, t, {
                    status: "credentials-invalid"
                });
                throw new Error("[authorization] unable to re-authorize guest.");
            }
        }), 15);
    },
    authorize(e, t) {
        const o = Zle.get(ece(e, t));
        if ((o === null || o === void 0 ? void 0 : o.status) === "authorized" || (o === null || o === void 0 ? void 0 : o.serverHack)) {
            return;
        }
        if (t === "guest-token") {
            ice(e, t, {
                status: "authorized"
            });
            return;
        }
        ice(e, t, {
            serverHack: true,
            status: "initalizing"
        });
        Promise.all([ nce(e), fetch(`${e}/reports/`, {
            headers: {
                Accept: "application/json",
                "X-Requested-With": "XMLHttpRequest"
            },
            credentials: "include"
        }).catch((() => {})) ]).then((() => {
            ice(e, t, {
                status: "authorized",
                serverHack: undefined
            });
        }));
    },
    _removeServer(e, t) {
        if (t) {
            Zle.delete(ece(e, t));
        } else {
            Zle.delete(e);
            Jle.delete(e);
        }
    },
    _getState() {
        return {
            statusCbs: Xle,
            authMap: Zle,
            userIdMap: Jle
        };
    },
    setKeepAliveInterval(e) {
        if (isNaN(e) || typeof e !== "number") {
            Kle = 6e4;
        } else {
            Kle = Math.min(e, 1) * 6e4;
        }
        if (Wle) {
            window.clearInterval(Wle);
            Wle = window.setInterval($le, Kle);
        }
    }
};

const dce = cce;

const uce = window;

uce.sas = uce.sas || {};

if (!uce.sas.__authInterface) {
    uce.sas.__authInterface = dce;
    dce.activate();
} else {
    const e = uce.sas.__authInterface;
    const t = e.versionInfo;
    let o = false;
    if (t.major < Ule.major) {
        o = true;
    } else if (t.major === Ule.major && t.minor < Ule.minor) {
        o = true;
    } else if (t.major === Ule.major && t.minor === Ule.minor && t.patch < Ule.patch) {
        o = true;
    }
    if (o) {
        oce(e._getState());
        e.deactivate();
        dce.activate();
        uce.sas.__authInterface = dce;
    }
}

function mce() {
    return uce.sas.__authInterface;
}

function pce(e, t) {
    var o;
    const n = mce();
    const a = (o = n.getKey(e, t)) !== null && o !== void 0 ? o : e;
    return n._getState().authMap.get(a);
}

const fce = new Map;

function gce(e, t) {
    var o;
    const n = (o = mce().getKey(e, t)) !== null && o !== void 0 ? o : e;
    const a = fce.get(n);
    if (a) {
        return a;
    }
    const r = mce().addConnection(e, t);
    const s = new nle(r);
    fce.set(n, s);
    mce().onStatusChange(e, (e => {
        s.next(e);
    }), t);
    return s;
}

function hce(e, t) {
    mce().authorize(e, t);
}

function bce(e, t) {
    mce().deauthorize(e, t);
}

function vce(e, t) {
    const o = pce(e, t);
    return (o === null || o === void 0 ? void 0 : o.serverHack) || (o === null || o === void 0 ? void 0 : o.status) === "authorized";
}

const yce = () => {
    const e = C_();
    return t(o, null, t("span", {
        style: {
            visibility: "hidden",
            position: "absolute",
            fontFamily: '"AvenirNext"'
        }
    }, "Mg"), t("div", {
        style: {
            display: "flex",
            flexShrink: 1,
            flexDirection: "column",
            height: "100%",
            justifyContent: "center",
            backgroundColor: e.enableNovaTokens ? e.backgroundsNova.panes.bg : e.backgrounds.panes.bg
        }
    }, t(DN, {
        active: true,
        text: Hle["loading.msg"](),
        delay: 0
    })));
};

const xce = 250;

function Sce(e, t) {
    const o = Dce();
    if (o === "open") {
        if (Cce === e) {
            Ece === null || Ece === void 0 ? void 0 : Ece.focus();
            return;
        }
        _ce();
    }
    const n = window.outerHeight / 2 + window.screenY - 600 / 2;
    const a = window.outerWidth / 2 + window.screenX - 700 / 2;
    const r = window.open(tce(e), t, `width=700,height=600,top=${n},left=${a}`);
    if (r) {
        Lce(e, r);
    }
    return r;
}

let wce;

let Cce;

let Ece = null;

let Ice;

function _ce() {
    if (Ece) {
        Ece.close();
        Ece = null;
    }
    if (Ice) {
        window.removeEventListener("message", Ice);
        Ice = undefined;
    }
    if (wce !== undefined) {
        clearInterval(wce);
        wce = undefined;
        Cce = undefined;
    }
}

function Dce() {
    if (!Ece || Ece.closed) {
        _ce();
        return "closed";
    }
    if (!Cce) {
        if (Ece && !Ece.closed) {
            _ce();
        }
        return "closed";
    }
    if (vce(Cce)) {
        _ce();
        return "closed";
    }
    Ece.postMessage("register", "*");
    return "open";
}

function Lce(e, t) {
    Dce();
    if (wce) {
        return;
    }
    Cce = e;
    Ece = t;
    Ice = t => {
        if (e.indexOf(t.origin) !== -1 && t.data && t.data.logonStatus) {
            hce(e);
        }
    };
    window.addEventListener("message", Ice);
    wce = setInterval((() => {
        Dce();
    }), xce);
}

const Tce = e => {
    var r, s;
    const {url: i, authenticationType: l = "credentials"} = e;
    const [c, u] = n((() => gce(i, l).currentItem));
    a((() => gce(i, l).subscribe((e => u(e)))), [ i, l ]);
    a((() => () => {
        Dce();
    }), []);
    const m = C_();
    const p = c.error;
    const f = e.onError;
    d((() => {
        if (p) {
            f === null || f === void 0 ? void 0 : f(p);
        }
    }), [ p, f ]);
    if (c.status === "authorized" && e.children) {
        return t(o, null, e.children);
    } else if (c.status !== "credentials-invalid") {
        return e.loadingFallback ? e.loadingFallback() : t(yce, null);
    } else {
        return t("div", {
            style: Object.assign({
                display: "flex",
                flexShrink: 1,
                flexDirection: "column",
                height: "100%",
                justifyContent: "center",
                alignItems: "center",
                backgroundColor: m.enableNovaTokens ? m.backgroundsNova.panes.bg : m.backgrounds.panes.bg
            }, e.style)
        }, t("div", {
            style: {
                color: ((r = e.style) === null || r === void 0 ? void 0 : r.color) ? (s = e.style) === null || s === void 0 ? void 0 : s.color : Rce(m)
            }
        }, Hle["logon.message.msg"]()), t(QM, {
            text: Hle["logon.button.msg"](),
            variant: oN.Primary,
            onPress: () => {
                Sce(e.url, "SAS Logon");
            },
            tokens: e.buttonTokens
        }));
    }
};

function Rce(e) {
    switch (e.themeVariant) {
      case "dark":
      case "high-contrast":
        return e.c.white;

      default:
        return e.c.n_3;
    }
}

const kce = new nle({
    status: "authorized"
});

let Ace = Hn("VASDK_BYPASSAUTH", false);

function Mce() {
    return Ace;
}

function Nce(e, t) {
    if (Ace) {
        return kce;
    }
    return gce(e, t);
}

function Oce(e, t) {
    if (Ace) {
        return;
    }
    bce(e, t);
}

const Pce = 200;

function Bce() {
    const e = {
        Accept: "application/vnd.sas.report.images.job, application/json, */*",
        "Content-Type": "application/json"
    };
    const t = eb();
    const o = nb();
    if (t) {
        e["Accept-Language"] = t;
    }
    if (o) {
        e["Accept-Locale"] = o;
    }
    return e;
}

const zce = new Map;

function Fce(e, t) {
    const o = new URL(e).pathname.split("/").filter((e => !!e))[0].toLocaleLowerCase();
    let n = {};
    const a = zce.get(o);
    if (a) {
        n["X-CSRF-TOKEN"] = a;
    }
    if (t && t.headers) {
        n = Object.assign(Object.assign({}, n), t.headers);
    }
    const r = Object.assign(Object.assign({}, t), {
        headers: n
    });
    return fetch(e, r).then((t => {
        let a = "";
        if (t.headers.get("X-CSRF-HEADER")) {
            const e = t.headers.get("X-CSRF-HEADER");
            if (e) {
                const n = t.headers.get(e);
                if (n) {
                    zce.set(o, n);
                    a = n;
                }
            }
        }
        if ((t.status === 449 || t.status === 403 && t.headers.get("X-Forbidden-Reason") === "CSRF") && a) {
            n["X-CSRF-TOKEN"] = a;
            return fetch(e, r);
        }
        return t;
    }));
}

function jce(e, t, o, n, a, r, s) {
    return Fce(t, {
        method: "GET",
        credentials: o
    }).then((e => e.json())).then((t => {
        Vce(t.images, e, o, n, a, r, s);
    }));
}

function Vce(e, t, o, n, a, r, s) {
    var i, l;
    if (!e) {
        return;
    }
    function c(e, o) {
        if (s === "visualElement") {
            r.next({
                type: s,
                reportUri: t,
                error: Hg["SASReportImage.genericError.msg"](),
                name: o
            });
        } else {
            r.next({
                type: s,
                reportUri: t,
                error: Hg["SASReportImage.genericError.msg"](),
                sectionIndex: e
            });
        }
    }
    for (const d of e) {
        const e = d.elementName;
        if (d.state !== "completed" || a.indexOf(d.elementName) > -1) {
            continue;
        }
        a.push(e);
        const {uri: u} = (l = (i = d.links) === null || i === void 0 ? void 0 : i.find((e => e.rel === "image"))) !== null && l !== void 0 ? l : {};
        if (!u) {
            c(d.sectionIndex, e);
            throw new Error("link not found");
        }
        Fce(n + u, {
            method: "GET",
            credentials: o
        }).then((e => e.blob())).then((o => {
            const n = URL.createObjectURL(o);
            const a = d.size.split("x");
            if (!a || a.length < 2) {
                c(d.sectionIndex, e);
                throw new Error("unexpected Image size string.");
            }
            if (s === "visualElement") {
                r.next({
                    type: s,
                    reportUri: t,
                    imageURL: n,
                    name: e
                });
            } else {
                r.next({
                    type: s,
                    reportUri: t,
                    imageURL: n,
                    sectionIndex: d.sectionIndex
                });
            }
        }));
    }
}

function Hce(e, t, o, n, a, r, s) {
    if (!t || !Array.isArray(t.links)) {
        s(null);
        throw new Error("No response from report image service");
    }
    const {stateURL: i, selfURL: l} = t.links.reduce(((e, t) => {
        if (t.rel === "state") {
            e.stateURL = n + t.uri;
        } else if (t.rel === "self") {
            e.selfURL = n + t.uri;
        }
        return e;
    }), {});
    if (!i || !l) {
        s(null);
        throw new Error("Unexpected response from report image service");
    }
    if (t.state === "failed") {
        const i = [];
        Vce(t.images, e, o, n, i, a, r);
        s(i);
        return;
    } else if (t.state === "completed") {
        Vce(t.images, e, o, n, [], a, r);
        return;
    }
    let c = false;
    const d = [];
    const u = async () => {
        if (c) {
            return;
        }
        c = true;
        const t = {};
        const m = await Fce(i, {
            method: "GET",
            credentials: o,
            headers: t
        });
        const p = await m.text();
        jce(e, l, o, n, d, a, r);
        if (p === "running") {
            c = false;
            setTimeout(u, Pce);
        } else if (p !== "completed") {
            s(d);
        }
    };
    u();
}

const Uce = new Map;

function Gce(e, t) {
    const o = `${e}:${t}`;
    const n = Uce.get(o);
    if (n) {
        return n;
    }
    const a = new Wce(e, t);
    Uce.set(o, a);
    return a;
}

function Kce(e, t) {
    Uce.delete(`${e}:${t}`);
}

class Wce {
    constructor(e, t) {
        this._imagesToLoad = new Map;
        this._$loadedImages = new A;
        this._isAuthorized = false;
        this._host = e;
        let o;
        this._authenticated = new Promise((e => {
            o = e;
        }));
        const n = Nce(e, t).subscribe((e => {
            if (e.status !== "authorized") {
                return;
            }
            n();
            this._isAuthorized = true;
            o();
            for (const e of this._imagesToLoad.keys()) {
                this._fetchImages(e);
            }
        }));
    }
    getObjectImage(e, t, o) {
        if (!o) {
            return undefined;
        }
        if (!this._imagesToLoad.has(e)) {
            this._imagesToLoad.set(e, []);
        }
        const n = this._imagesToLoad.get(e);
        n.push({
            name: t,
            size: `${Math.round(o.width)}x${Math.round(o.height)}`
        });
        if (n.length === 1 && this._isAuthorized) {
            setTimeout((() => {
                this._fetchImages(e);
            }), 15);
        }
        return this._$loadedImages.pipe($((function(o) {
            return o.type === "visualElement" && o.reportUri === e && o.name === t;
        })));
    }
    getReportImage(e, t, o = 0) {
        if (!t) {
            return undefined;
        }
        const n = `${this._host}/reportImages/jobs`;
        const a = () => {
            this._$loadedImages.next({
                type: "reportPage",
                error: Hg["SASReportImage.genericError.msg"](),
                reportUri: e,
                sectionIndex: o
            });
        };
        this._authenticated.then((() => Fce(n, {
            method: "POST",
            credentials: "include",
            headers: Bce(),
            body: JSON.stringify({
                reportUri: e,
                layoutType: "entireSection",
                sectionIndex: o,
                selectionType: "report",
                size: `${Math.round(t.width)}x${Math.round(t.height)}`,
                style: this._getStyle()
            })
        }))).then((e => e.json())).then((t => Hce(e, t, "include", this._host, this._$loadedImages, "reportPage", a))).catch((e => {
            a();
            return Promise.reject(e);
        }));
        return this._$loadedImages.pipe($((function(t) {
            return t.type === "reportPage" && t.reportUri === e && t.sectionIndex === o;
        })));
    }
    _fetchImages(e) {
        const t = this._imagesToLoad.get(e);
        if (!t || !t.length) {
            return;
        }
        const o = o => {
            for (const {name: n} of t) {
                if (!o || o.indexOf(n) === -1) {
                    this._$loadedImages.next({
                        type: "visualElement",
                        name: n,
                        error: Hg["SASReportImage.genericError.msg"](),
                        reportUri: e
                    });
                }
            }
        };
        this._imagesToLoad.set(e, []);
        const n = `${this._host}/reportImages/jobs`;
        Fce(n, {
            method: "POST",
            credentials: "include",
            headers: Bce(),
            body: JSON.stringify({
                reportUri: e,
                layoutType: "normal",
                selectionType: "visualElements",
                size: "0x0",
                specificVisualElements: t,
                style: this._getStyle()
            })
        }).then((e => e.json())).then((a => {
            var r, s;
            const i = (r = a.errorCode) !== null && r !== void 0 ? r : (s = a.error) === null || s === void 0 ? void 0 : s.errorCode;
            if (i) {
                if (i === 22e3 || i === 22005 || i === 22011) {
                    this._getImagesWithMultipleRequests(n, e, t);
                } else {
                    return Promise.reject("Failed to fetch report images");
                }
            } else {
                Hce(e, a, "include", this._host, this._$loadedImages, "visualElement", o);
            }
        })).catch((e => {
            o(null);
            console.error(e);
        }));
    }
    _getImagesWithMultipleRequests(e, t, o) {
        for (const n of o) {
            Fce(e, {
                method: "POST",
                credentials: "include",
                headers: Bce(),
                body: JSON.stringify({
                    reportUri: t,
                    layoutType: "normal",
                    selectionType: "visualElements",
                    size: n.size,
                    visualElementNames: n.name,
                    style: this._getStyle()
                })
            }).then((e => e.json())).then((e => {
                if (e.error && e.error.errorCode === 22005) {
                    this._$loadedImages.next({
                        type: "visualElement",
                        name: n.name,
                        error: Hg["SASReportImage.imageNotSupported.msg"](),
                        reportUri: t
                    });
                    return;
                }
                return Hce(t, e, "include", this._host, this._$loadedImages, "visualElement", (() => {
                    this._$loadedImages.next({
                        type: "visualElement",
                        name: n.name,
                        error: Hg["SASReportImage.genericError.msg"](),
                        reportUri: t
                    });
                }));
            }));
        }
    }
    _getStyle() {
        return eh() ? "highContrast" : undefined;
    }
}

function $ce(e) {
    let t = false;
    try {
        const o = new URL(e);
        if (o.protocol === "http:" || o.protocol === "https:") {
            t = true;
        }
    } catch (e) {}
    return t;
}

var Yce, qce, Xce;

const Zce = Hg["SASServer.genericError.msg"]();

let Jce = null;

fn((() => {
    const e = tde();
    e.attachEvent(Rl.DEPOT_CONNECTION_REQUIRES_AUTHENTICATION, (e => {
        if (Mce()) {
            console.warn("Authentication needed while in viya app mode. This should not happen.");
            return;
        }
        if (e instanceof Al) {
            const t = e.getAssociatedModel();
            if (!(t instanceof hl)) {
                return;
            }
            const o = Dde(t);
            if (!(o instanceof ode)) {
                return;
            }
            o.deauthorize();
        }
    }));
}));

function Qce(e) {
    return e ? e.getMessage() || Zce : Zce;
}

function ede() {
    return new Rl(Ul({
        dataLevel: xl.NODATA,
        highContrast: eh()
    }));
}

function tde() {
    if (!Jce) {
        Jce = ede().retain();
        const e = Jce;
        Jg.subscribe((t => {
            if (e.getDepotConfiguration()?.getUseHighContrastReportStyle() !== t) {
                e.setUseHighContrastReportStyle(t);
                Lde();
            }
        }));
    }
    return Jce;
}

let ode = (Yce = class e {
    constructor(e) {
        this._destroyed = false;
        jo(this, "_server", qce, this);
        jo(this, "_connection", Xce, this);
        this._url = void 0;
        this._authenticationType = void 0;
        this._errorNotifier = new k(1);
        this._currentError = void 0;
        this._statusNotifier = new k(1);
        this._currentStatus = "initalizing";
        this._connected = false;
        this._authUnsubscribe = void 0;
        this._connectionAdded = false;
        this._initializedConnect = false;
        this._iframeSandbox = void 0;
        this._requestedSandboxSetting = false;
        this._destroyed$ = new k(1);
        this._reportById = new Map;
        this._url = e.url;
        if (!$ce(e.url)) {
            this._setError(Zce);
        }
        this._statusNotifier.next(this._currentStatus);
        this._authenticationType = e.authenticationType;
        fn((() => {
            if (this._destroyed) {
                return;
            }
            this._server = Gl(e.url);
        }));
        M([ Zh, Jh ]).pipe(W(this._destroyed$), q(((e, t) => e[0] === t[0] && e[1] === t[1])), X(1), Z(0, N)).subscribe((() => {
            this.reloadAllReports();
        }));
    }
    getStatusNotifier() {
        return this._statusNotifier;
    }
    getErrorNotifier() {
        return this._errorNotifier;
    }
    getError() {
        return this._currentError;
    }
    getStatus() {
        return this._currentStatus;
    }
    getIframeSandbox() {
        return this._iframeSandbox;
    }
    getConnection() {
        return this._connection;
    }
    getConnectionManager() {
        return tde().getConnectionManager(this._connection);
    }
    _setStatus(e) {
        if (e === "connected" && (!this._requestedSandboxSetting || !this._connectionAdded)) {
            return;
        }
        this._currentStatus = e;
        this._statusNotifier.next(e);
    }
    _setError(e) {
        this._currentError = e;
        this._errorNotifier.next(e);
    }
    _createConnectionManager() {
        if (!this._server) {
            this._setError(Zce);
            throw new Error("Server connection closed.");
        }
        this._connection = Kl(this._server);
        const e = this.getConnectionManager();
        if (!e) {
            this._setError(Zce);
            throw new Error("Could not establish connection, getConnectionManager does not exist");
        }
        const t = e.getServerConfig();
        if (!t) {
            this._setError(Zce);
            throw new Error("Could not establish connection, serverConfig Voucher does not exist");
        }
        new hm(t).then((() => {
            if (this._currentError) {
                return;
            }
            this._performAuthorization();
        })).warning((() => {
            this._setError(Zce);
        }));
    }
    getServerType() {
        return "viya";
    }
    _performAuthorization() {
        if (!this._connection) {
            this._createConnectionManager();
            return;
        }
        const e = this.getConnectionManager();
        if (!e) {
            this._setError(Zce);
            console.error("Could not establish connection, getConnectionManager does not exist");
            return;
        }
        const t = this._url.endsWith("/") ? this._url : this._url + "/";
        Promise.allSettled([ fetch(`${t}reportPackages/`, {
            credentials: "include"
        }), fetch(`${t}folders/`, {
            credentials: "include"
        }), fetch(`${t}reportData/`, {
            credentials: "include"
        }), fetch(`${t}reports/`, {
            credentials: "include"
        }) ]).finally((() => {
            const e = this.getConnectionManager()?.initializeSession("false");
            if (!e) {
                this._setError(Zce);
                return;
            }
            if (this._connectionAdded) {
                this._setStatus("connected");
                return;
            }
            new hm(e).fulfilled((() => {
                this._connectionAdded = true;
                if (sas.ltjs.jest) {
                    this._connection?.setSessionToken(null);
                }
                const e = tde().addConnection(this._connection);
                if (e) {
                    this._setError(Qce(e));
                    return;
                }
                this._setStatus("connected");
            })).warning((e => {
                this._setError(Qce(e.getWarning()));
            }));
        }));
    }
    connect() {
        if (this._connected) {
            return;
        }
        this._connected = true;
        this._authUnsubscribe = Nce(this._url, this._authenticationType).subscribe((e => {
            if (e.error) {
                this._setError(e.error);
            } else {
                this._setError(undefined);
                if (e.status !== "authorized") {
                    const t = this.getStatus();
                    this._setStatus(e.status);
                    if (t === "connected") {
                        this.deauthorize();
                    }
                }
                if (e.status === "authorized" && !this._initializedConnect) {
                    this._setStatus("initalizing");
                    this._iframeSandbox = undefined;
                    fetch(`${this._url}/visualAnalyticsAdministration/commons/settings`, {
                        credentials: "include"
                    }).catch((() => fetch(`${this._url}/SASVisualAnalytics/commons/settings`, {
                        credentials: "include"
                    }))).then((e => {
                        if (!e.ok) {
                            return;
                        }
                        return e.json();
                    })).then((e => {
                        this._iframeSandbox = e?.attributes?.iframeSandbox;
                    })).finally((() => {
                        this._requestedSandboxSetting = true;
                        this._setStatus("connected");
                    }));
                    this._initializedConnect = true;
                    if (!this._connection) {
                        try {
                            gn().then((() => {
                                this._createConnectionManager();
                            }));
                        } catch (e) {
                            this._setError(Zce);
                        }
                    } else {
                        this._performAuthorization();
                    }
                }
            }
        }));
    }
    deauthorize() {
        this._initializedConnect = false;
        Oce(this.getUrl());
        this.reloadAllReports();
    }
    reloadAllReports() {
        for (const e of this._reportById.values()) {
            e.reload();
        }
    }
    getReportManager() {
        if (this._currentError || this._currentStatus !== "connected") {
            return null;
        }
        return tde().getReportManager(this._connection);
    }
    getReport(e) {
        return this._reportById.get(e);
    }
    subscribe(e, t) {
        let o = this._reportById.get(e);
        if (!o) {
            o = new ole(this, e, t);
            this._reportById.set(e, o);
        }
        return o;
    }
    subscribeWithUserState(e, t, o) {
        let n = this._reportById.get(e);
        if (!n) {
            n = new ole(this, t, undefined, o);
            this._reportById.set(e, n);
        }
        return n;
    }
    unsubscribe(e) {
        const t = this._reportById.get(e);
        if (!t) {
            return;
        }
        t.close();
        this._reportById.delete(e);
    }
    getUrl() {
        return this._url;
    }
    getFinishedURLString() {
        if (this._server) {
            const e = this._server.getBaseURL();
            if (e) {
                return e.getFinishedURLString();
            }
        }
        return null;
    }
    get isConnectionEstablished() {
        return this._currentStatus === "connected";
    }
    close() {
        if (this._authUnsubscribe) {
            this._authUnsubscribe();
            this._authUnsubscribe = undefined;
        }
        for (const e of this._reportById.values()) {
            e.close();
        }
        this._reportById.clear();
        Kce(this._url, this._authenticationType);
        this._destroyed = true;
        this._destroyed$.next(true);
    }
}, qce = Vo(Yce.prototype, "_server", [ um ], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function() {
        return null;
    }
}), Xce = Vo(Yce.prototype, "_connection", [ um ], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function() {
        return null;
    }
}), Vo(Yce.prototype, "close", [ mm ], Object.getOwnPropertyDescriptor(Yce.prototype, "close"), Yce.prototype), 
Yce);

var nde, ade;

const rde = Hg["SASReport.genericError.msg"]();

function sde(e) {
    const t = e.getUrls();
    const o = [];
    if (t) {
        for (const e of t) {
            if (!e) {
                continue;
            }
            const t = e.getType();
            if (t !== Sl.STP && t !== Sl.IMAGE) {
                continue;
            }
            const n = new Gm;
            n.setName(e.getName());
            n.setType(Um.STP);
            n.setContentKey(e.getContentKey());
            n.setServerFile(e.getServerFile());
            n.setContent(e.getUrlString());
            o.push(n);
        }
    }
    return o;
}

function ide(e) {
    const t = e.getUrls();
    if (t) {
        for (let e = 0; e < t.length; ++e) {
            const o = t[e];
            if (o && o.getType() === Sl.REPORT) {
                return o.getContentKey();
            }
        }
    }
    const o = e.getFiles();
    if (o) {
        for (let e = 0; e < o.length; ++e) {
            const t = o[e];
            if (t && t.getType() === wl.REPORT) {
                return t.getContentKey();
            }
        }
    }
    return null;
}

function lde(...e) {
    let t = "";
    for (let o of e) {
        if (!o) {
            continue;
        }
        if (o.charAt(o.length - 1) !== "/") {
            o += "/";
        }
        if (t) {
            if (o.indexOf("./") === 0) {
                o = o.substr(2);
            } else if (o.charAt(0) === "/") {
                o = o.substr(1);
            }
        }
        t += o;
    }
    return t.substr(0, t.length - 1);
}

function cde(e, t, o) {
    return fetch(e, {
        signal: o
    }).then((function(t) {
        if (!t.ok) {
            throw new Error(`Invalid response code: ${t.status} for ${e}`);
        }
        return t.text();
    })).then((e => {
        if (!t) {
            return e;
        }
        const o = Jo.exports.FS.findObject(t, true);
        if (!o) {
            const e = t.split("/").filter((e => !!e));
            e.pop();
            let o = "";
            for (const t of e) {
                o += "/" + t;
                try {
                    Jo.exports.FS.mkdir(o);
                } catch (e) {}
            }
        }
        Jo.exports.FS.writeFile(t, e);
        return e;
    }));
}

const dde = {
    attributes: {
        comparisonEpsilon: "1e-12",
        iframeSandbox: "allow-forms allow-presentation allow-same-origin allow-scripts",
        "maxRowsLookup.treeMap": 1500,
        "maxRowsLookup.graphDefault": 3e3,
        "maxRowsLookup.heatmap": 3e3,
        "maxRowsLookup.dropdown": 500,
        "maxRowsLookup.timeSeries": 1e4,
        "maxRowsLookup.bubble": 25e3,
        "maxRowsLookup.listTable": 4e4,
        "maxRowsLookup.geoBubble": 25e3,
        "maxRowsLookup.keyValue": 100,
        "maxRowsLookup.geoScatter": 4e4,
        "maxRowsLookup.heatbox": 800,
        "maxRowsLookup.buttonBar": 100,
        "maxRowsLookup.dualAxisTimeSeries": 1e4,
        "maxRowsLookup.crosstab": 4e4,
        "maxRowsLookup.geoHeatmap": 25e3,
        "maxRowsLookup.geoLine": 1e4,
        "maxRowsLookup.geoRegion": 5e3,
        "maxRowsLookup.list": 5e4,
        "maxRowsLookup.scatter": 4e4,
        "maxRowsLookup.textInput": 4e4,
        "maxRowsLookup.kpi": 10,
        "maxRowsLookup.wordCloud": 100,
        "maxRowsLookup.customContent": 4e4,
        "maxRowsLookup.geoContour": 4e4
    }
};

function ude(e) {
    if (!e.startsWith("maxRowsLookup.")) {
        return undefined;
    }
    const t = e.split(".")[1].toUpperCase();
    switch (t) {
      case "NONE":
        return wm.NONE;

      case "LISTTABLE":
        return wm.LISTTABLE;

      case "CROSSTAB":
        return wm.CROSSTAB;

      case "BUTTONBAR":
        return wm.BUTTONBAR;

      case "CUSTOMCONTENT":
        return wm.CUSTOMCONTENT;

      case "DROPDOWN":
        return wm.DROPDOWN;

      case "LIST":
        return wm.LIST;

      case "TEXTINPUT":
        return wm.TEXTINPUT;

      case "GRAPHDEFAULT":
        return wm.GRAPHDEFAULT;

      case "BUBBLE":
        return wm.BUBBLE;

      case "GEOBUBBLE":
        return wm.GEOBUBBLE;

      case "GEOCONTOUR":
        return wm.GEOCONTOUR;

      case "GEOSCATTER":
        return wm.GEOSCATTER;

      case "GEOREGION":
        return wm.GEOREGION;

      case "GEOHEATMAP":
        return wm.GEOHEATMAP;

      case "GEOLINE":
        return wm.GEOLINE;

      case "HEATMAP":
        return wm.HEATMAP;

      case "TIMESERIES":
        return wm.TIMESERIES;

      case "KPI":
        return wm.KPI;

      case "HEATBOX":
        return wm.HEATBOX;

      case "DUALAXISTIMESERIES":
        return wm.DUALAXISTIMESERIES;

      case "SCATTER":
        return wm.SCATTER;

      case "TREEMAP":
        return wm.TREEMAP;

      case "WORDCLOUD":
        return wm.WORDCLOUD;

      case "KEYVALUE":
        return wm.KEYVALUE;
    }
    return undefined;
}

let mde = (nde = class e {
    constructor(e) {
        jo(this, "_report", ade, this);
        this._server = void 0;
        this._reportUri = "";
        this._errorNotifier = new k(1);
        this._currentError = void 0;
        this._reportReadyNotifier = new R("loading");
        this._destroyed$ = new k(1);
        this._retainCount = 0;
        this._settingAttrs = void 0;
        this._reportSubscribed = false;
        this._highContrastPath = void 0;
        this._abortController = void 0;
        this._server = e;
        e.getErrorNotifier().pipe(W(this._destroyed$)).subscribe((e => this._setError(e)));
        this._subscribe();
    }
    _subscribe() {
        if (this._reportSubscribed) {
            return;
        }
        this._reportSubscribed = true;
        this._server.getStatusNotifier().pipe(W(this._destroyed$), $((e => e === "connected")), Y(1)).subscribe((() => this._fetchReport()));
    }
    async _fetchReport() {
        const e = lde(this._server.getUrl(), this._reportUri);
        const t = (new Ll).retain();
        const o = new El;
        o.setLocation(e);
        o.setPath(e);
        t.setMeta(o);
        t.setConnection(this._server.getConnection());
        this._abortController = new AbortController;
        const n = this._abortController.signal;
        const a = this._server.getReportManager()?.getReportSubdirectoryPath(t);
        await Promise.all([ fetch(lde(e, "settings.json"), {
            signal: n
        }).then((e => {
            if (!e.ok) {
                return Promise.reject(`Invalid response code when downloading settings.json. Status code: ${e.status}`);
            }
            return e.json();
        })).catch((e => {
            console.error(`Unable to download settings.json, Error: ${e}`);
            return dde;
        })).then((e => {
            this._settingAttrs = {
                ...dde.attributes,
                ...e?.attributes
            };
        })), cde(lde(e, "reportPackage.xml"), undefined, n).then((async t => {
            const o = (new DOMParser).parseFromString(t, "application/xml");
            const r = [];
            const s = [ "report", "css", "resource", "state" ];
            for (const t of o.querySelectorAll("reportPackage files file")) {
                const o = t.getAttribute("type");
                if (!o || !s.includes(o)) {
                    continue;
                }
                if (o === "resource" && t.getAttribute("name") === "settings") {
                    continue;
                }
                const i = t.querySelector("links link")?.getAttribute("href");
                if (!i) {
                    continue;
                }
                const l = i.substr(i.lastIndexOf("/") + 1);
                if (o === "css" && t.getAttribute("name") === "highcontrast.css") {
                    if (!eh()) {
                        continue;
                    }
                    this._highContrastPath = lde(a, l);
                }
                if (o === "css" && t.getAttribute("name") === "viyafonts.css") {
                    continue;
                }
                r.push(cde(lde(e, i), lde(a, l), n));
            }
            await Promise.all(r);
        })) ]).finally((() => {
            t.release();
        })).catch((e => {
            this._setError(rde);
            console.error(e);
        }));
        this._abortController = undefined;
        if (!this._currentError) {
            this._report = t;
            this._reportReadyNotifier.next("ready");
        }
    }
    getErrorNotifier() {
        return this._errorNotifier;
    }
    getReportStateNotifier() {
        return this._reportReadyNotifier;
    }
    _setError(e) {
        if (this._currentError === e) {
            return;
        }
        this._currentError = e;
        this._errorNotifier.next(e);
    }
    getReportState() {
        return this._reportReadyNotifier.value;
    }
    getError() {
        return this._currentError || this._server.getError();
    }
    get name() {
        return null;
    }
    get identifierOrLocation() {
        return this._reportUri;
    }
    get description() {
        return null;
    }
    get dateCreated() {
        return null;
    }
    get dateUpdated() {
        return null;
    }
    get author() {
        return null;
    }
    createSession(e, t) {
        const o = this._server.getReportManager();
        if (!o || !this._report) {
            return null;
        }
        const n = new Mf(o, this._report);
        const a = n.getSASReportConfiguration();
        a.setUseSingleThreadMode(false);
        a.setUseDefaultGTLDataTips(false);
        a.setUseReadOnlyMode(false);
        a.setMaximumNumberOfSectionsInMemory(-1);
        a.setUseOfflineMode(true);
        a.setOfflinePackageUrl(this._server.getUrl());
        if (this._settingAttrs) {
            const {comparisonEpsilon: e, iframeSandbox: t} = this._settingAttrs;
            if (e) {
                const t = typeof e === "number" ? e : parseFloat(e);
                a.setComparisonEpsilon(t);
            }
            if (t && typeof t === "string") {
                this._server.setIframeSandbox(t);
            }
            const o = [];
            for (const e of Object.keys(this._settingAttrs)) {
                const t = this._settingAttrs[e];
                const n = ude(e);
                if (n !== undefined && typeof t === "number") {
                    const e = new Ym;
                    e.setLookup(n);
                    e.setLimit(t);
                    o.push(e);
                }
            }
            a.setMaxRowsLimits(o);
        }
        const r = a.getFullyQualifiedPathToBIRDReportDirectory();
        if (eh()) {
            if (!this._highContrastPath) {
                console.warn("This report package is incompatible with high contrast mode: no high contrast CSS file found.");
            } else {
                a.setDoVisualStyleOverride(true);
                a.setReportCSSOverideFile(this._highContrastPath);
            }
        }
        if (t !== undefined) {
            let e;
            {
                const t = Jo.getStringContentsOfFile(`${r}/report.xml`);
                if (t) {
                    const o = t.match(/<BaseStylesheetResource file="(.*?)"/);
                    if (o && o.length === 2) {
                        e = `${r}/${o[1]}`;
                    }
                }
            }
            if (e) {
                Jo.exports.FS.writeFile(e, t);
            } else {
                console.error("The base stylesheet was not found so the custom css could not be applied");
            }
        }
        const s = this._server.getConnectionManager();
        if (!s) {
            return null;
        }
        a.setMapConnectionInfo(s.getMapConnectionInfo());
        const i = this._report.getManifest();
        if (i) {
            a.setCachedReportURLs(sde(i));
            const e = ide(i);
            if (e) {
                a.setContentKey(e);
            }
        }
        a.setViewSet(e);
        try {
            n.openReport();
        } catch (e) {
            return null;
        }
        return n;
    }
    getServer() {
        return this._server;
    }
    retain() {
        this._retainCount++;
        return this;
    }
    release() {
        if (this._retainCount <= 0) {
            throw new Error("SASReport released without being retained");
        }
        this._retainCount--;
        if (this._retainCount === 0) {
            this.close();
            this._server.removeReport();
        }
    }
    reload() {
        if (this._report) {
            this._reportSubscribed = false;
            this._subscribe();
        }
        this._report = undefined;
        this._reportReadyNotifier.next("loading");
    }
    close() {
        this._abortController?.abort();
        if (this._retainCount !== 0) {
            console.error(`SASReport ${this.identifierOrLocation} was destroyed while in use`);
        }
        this._destroyed$.next(true);
    }
}, ade = Vo(nde.prototype, "_report", [ um ], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
}), Vo(nde.prototype, "close", [ mm ], Object.getOwnPropertyDescriptor(nde.prototype, "close"), nde.prototype), 
nde);

var pde, fde, gde;

let hde = (pde = class e {
    getUrl() {
        return this._url;
    }
    getServerType() {
        return "standalone";
    }
    setIframeSandbox(e) {
        this._iframeSandbox = e;
    }
    getIframeSandbox() {
        return this._iframeSandbox;
    }
    constructor(e) {
        jo(this, "_depot", fde, this);
        this._depotSubscription = void 0;
        jo(this, "_connection", gde, this);
        this._url = void 0;
        this._errorNotifier = new k(1);
        this._currentError = void 0;
        this._statusNotifier = new k(1);
        this._currentStatus = "initalizing";
        this._report = void 0;
        this._iframeSandbox = void 0;
        this._destroyed$ = new k(1);
        this._url = e;
        gn().then((() => {
            this._depot = new Rl(Ul({
                dataLevel: xl.OFFLINE,
                highContrast: eh()
            }));
            this._depotSubscription = Jg.subscribe((e => {
                if (this._depot?.getDepotConfiguration()?.getUseHighContrastReportStyle() !== e) {
                    this._depot?.setUseHighContrastReportStyle(e);
                    this._depot?.removeAllReports();
                    this._report?.reload();
                }
            }));
            M([ Zh, Jh ]).pipe(W(this._destroyed$), q(((e, t) => e[0] === t[0] && e[1] === t[1])), X(1), Z(0, N)).subscribe((() => {
                this._report?.reload();
            }));
            this._connection = Kl(Gl("http://__standalone_location_token__/", 850));
            if (Fn(e)) {
                this._connection.setUseGuestCredentials(true);
            }
            this._connection.setUserId("000");
            const t = new fl;
            t.setCapabilities([ ml.ALLOW_WEB_CONTENT ]);
            this._connection.setUserInfo(t);
            const o = this._depot.addConnection(this._connection);
            if (o) {
                console.error(o.getMessage());
            }
            this._currentStatus = "connected";
            this._statusNotifier.next("connected");
        }));
    }
    getStatusNotifier() {
        return this._statusNotifier;
    }
    getErrorNotifier() {
        return this._errorNotifier;
    }
    getError() {
        return this._currentError;
    }
    getStatus() {
        return this._currentStatus;
    }
    getConnection() {
        return this._connection;
    }
    getReportManager() {
        return this._depot.getReportManager(this._connection);
    }
    getConnectionManager() {
        return this._depot.getConnectionManager(this._connection);
    }
    createReport() {
        if (this._report) {
            return this._report;
        }
        this._report = new mde(this);
        return this._report;
    }
    get isConnectionEstablished() {
        return true;
    }
    removeReport() {
        this._report = undefined;
    }
    close() {
        this._depotSubscription?.unsubscribe();
        this._depot?.shutdown();
        this._report?.close();
        this._destroyed$.next(true);
    }
}, fde = Vo(pde.prototype, "_depot", [ um ], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
}), gde = Vo(pde.prototype, "_connection", [ um ], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function() {
        return null;
    }
}), Vo(pde.prototype, "close", [ mm ], Object.getOwnPropertyDescriptor(pde.prototype, "close"), pde.prototype), 
pde);

const bde = {
    authenticationType: "credentials"
};

function vde(e, t) {
    const o = {
        ...bde,
        ...t
    };
    return {
        ...o,
        serverKey: e
    };
}

const yde = new Map;

const xde = new Map;

function Sde(e, t) {
    yde.set(e, t);
    if (t instanceof ode) {
        xde.set(e, t);
    }
}

const wde = new Map;

const Cde = new Map;

function Ede(e) {
    if ("packageUri" in e) {
        const t = new URL(e?.packageUri, window.location.href).href;
        const o = `::offline::${t}`;
        const n = yde.get(o) || new hde(t);
        Sde(o, n);
        return n.createReport();
    }
    const t = Cde.get(e.reportUri);
    if (t) {
        return _de(e.url, e).subscribeWithUserState(e.reportUri, t.reportUri, t.userState);
    }
    return _de(e.url, e).subscribe(e.reportUri, wde.get(e.reportUri));
}

function Ide(e, t) {
    _de(e, t);
}

function _de(e, t) {
    const {serverKey: o, authenticationType: n} = vde(e, t);
    const a = xde.get(o) || new ode({
        url: e,
        authenticationType: n
    });
    Sde(o, a);
    a.connect();
    return a;
}

function Dde(e) {
    for (const [, t] of yde) {
        if (t.getConnection() === e) {
            return t;
        }
    }
}

function Lde() {
    for (const e of xde.values()) {
        e.reloadAllReports();
    }
}

function Tde(e, t) {
    return function(o = e, n) {
        const a = t[n.type];
        return a ? a(o, n) : o;
    };
}

function Rde(e) {
    return function(t, o) {
        const n = t[o.payload.id];
        const a = e(n, o);
        if (n === a) {
            return t;
        }
        if (a === undefined) {
            const e = Object.assign({}, t);
            delete e[o.payload.id];
            return e;
        }
        return Object.assign(Object.assign({}, t), {
            [o.payload.id]: a
        });
    };
}

function kde(e) {
    return (t, o) => ({
        type: e,
        payload: {
            id: t,
            data: o
        }
    });
}

function Ade(e, t, o) {
    let n = t;
    if (e) {
        n = `${e}/${n}`;
    }
    if (o) {
        n = `${o}/${n}`;
    }
    return n;
}

const Mde = Symbol("idSliceSymbol");

function Nde(e) {
    const {elementName: t, initialState: o, namespace: n = ""} = e;
    const a = e.reducers || {};
    const r = Object.keys(a);
    const s = r.reduce(((e, o) => {
        e[Ade(t, o, n)] = Rde(a[o]);
        return e;
    }), {});
    const i = Tde(Object.assign(Object.assign({}, o), {
        [Mde]: true
    }), s);
    const l = r.reduce(((e, o) => {
        const a = Ade(t, o, n);
        e[o] = kde(a);
        return e;
    }), {});
    const c = r.reduce(((e, o) => {
        e[o] = Ade(t, o, n);
        return e;
    }), {});
    return {
        elementName: t,
        reducer: i,
        actions: l,
        actionTypes: c
    };
}

function Ode(e) {
    const {elementName: t, initialState: o, update: n, reducers: a} = e;
    return Nde({
        namespace: "birdElement",
        elementName: t,
        initialState: o,
        reducers: Object.assign(Object.assign({}, a), {
            update: function(e, t) {
                if (!e) {
                    return e;
                }
                let o = undefined;
                if (n) {
                    o = n(e, t);
                }
                return Object.assign(Object.assign(Object.assign({}, e), o), t.payload.data);
            },
            add: function(e, t) {
                return t.payload.data;
            },
            delete: function(e, t) {
                return undefined;
            }
        })
    });
}

const Pde = Ode({
    elementName: "web-content",
    initialState: {},
    reducers: {}
});

const Bde = Nde({
    elementName: "birdLayout",
    initialState: {},
    reducers: {
        update: function(e, t) {
            return Object.assign(Object.assign({}, e), t.payload.data);
        },
        set: function(e, t) {
            return t.payload.data;
        },
        setPosition: function(e, t) {
            return Object.assign(Object.assign({}, e), {
                position: t.payload.data
            });
        },
        setConstraints: function(e, t) {
            return Object.assign(Object.assign({}, e), {
                constraints: t.payload.data
            });
        },
        setPromptConstraints: function(e, t) {
            return Object.assign(Object.assign({}, e), {
                promptConstraints: t.payload.data
            });
        },
        setAboutInfoLayout: function(e, t) {
            return Object.assign(Object.assign({}, e), {
                aboutInfoLayout: t.payload.data
            });
        },
        setBreadcumbLayout: function(e, t) {
            return Object.assign(Object.assign({}, e), {
                breadcrumbLayout: t.payload.data
            });
        },
        setScrollbars: function(e, t) {
            return Object.assign(Object.assign({}, e), {
                scrollbars: t.payload.data
            });
        },
        setStyle: function(e, t) {
            return Object.assign(Object.assign({}, e), {
                style: t.payload.data
            });
        },
        setChildKeys: function(e, t) {
            return Object.assign(Object.assign({}, e), {
                childKeys: t.payload.data
            });
        },
        setIsSingleObject: function(e, t) {
            return Object.assign(Object.assign({}, e), {
                isSingleObject: t.payload.data
            });
        },
        setTitlePadding: function(e, t) {
            return Object.assign(Object.assign({}, e), {
                titlePadding: t.payload.data
            });
        }
    }
});

const zde = "birdLayout/layout/update";

const Fde = "birdLayout/layout/notifyInvalidateLayout";

const jde = {
    actions: Object.assign(Object.assign({}, Bde.actions), {
        updateState: e => rD(zde, e),
        notifyInvalidateLayout: () => rD(Fde)
    }),
    actionTypes: Object.assign(Object.assign({}, Bde.actionTypes), {
        updateState: zde,
        notifyInvalidateLayout: Fde
    }),
    reducer: (e = {
        [Mde]: true
    }, t) => {
        const o = t;
        if (o.type === Fde) {
            return e;
        }
        if (o.type === zde) {
            const t = o.payload;
            const n = Object.assign({}, e);
            for (const o of Object.keys(t)) {
                n[o] = Object.assign(Object.assign({}, e[o]), t[o]);
            }
            return n;
        }
        return Bde.reducer(e, t);
    }
};

const Vde = jde.actions.setConstraints;

function Hde(e) {
    if (e) {
        return e.filter((e => e !== null));
    } else {
        return [];
    }
}

let Ude = true;

window.addEventListener("resize", (() => {
    Ude = true;
}));

function Gde() {
    const e = FA(Ude);
    Ude = false;
    return e;
}

function Kde(e) {
    if (e instanceof Vm) {
        const t = e.getVisualElementName();
        if (t) {
            return t;
        }
    } else if (e instanceof km) {
        const t = e.getVisualElementController();
        if (t) {
            const e = t.getVisualElementName();
            if (e) {
                return e;
            }
        }
    } else if (e instanceof Rm) {
        const t = e.getVisualContainerElementController();
        if (t) {
            const e = t.getVisualElementName();
            if (e) {
                return e;
            }
        }
    }
    if (e instanceof Rm || e instanceof Tm || e instanceof km) {
        const t = e.getModel();
        if (t) {
            const e = t.getName();
            if (e) {
                return e;
            }
        }
    }
    return Jo.getClosetKey(e.getClosetAddress()) + "";
}

function Wde(e, t) {
    let o;
    if (e instanceof Mm) {
        if (t) {
            o = [ Kde(t) ];
        } else {
            o = Hde(e.getOrderedVisualAndContainerControllers()).map((e => Kde(e)));
        }
    } else {
        o = [];
    }
    let n;
    if (e instanceof km) {
        const t = e.getCompositeParent()?.getVisualContainerElementController()?.getVisualElementName();
        if (typeof t === "string") {
            n = t;
        }
    }
    const a = {
        childKeys: o,
        style: {},
        compositeParentKey: n
    };
    if (e.isPaddingAvailable()) {
        const t = e.getPadding();
        if (t) {
            a.style.padding = t.getScalarValueForUnit(js.PIXELS, -1, 1);
        }
    }
    a.style.zIndex = e.getZIndex();
    let r = null;
    if (e instanceof km) {
        const t = e.getVisualElementController();
        if (t) {
            r = t.getBackgroundStyleChain();
        }
    } else if (e instanceof Rm) {
        if (e instanceof af) {
            const t = e.getPromptContainerElementController();
            r = t && t.getBackgroundStyleChain();
        } else {
            r = e.getContainerBackgroundStyleChain();
        }
    }
    if (r) {
        const e = Ku(r);
        if (e) {
            a.style.backgroundColor = e;
        }
        const t = Wu(r, undefined);
        if (t) {
            if (t["border-color"]) {
                a.style.borderColor = t["border-color"];
            }
            if (t["border-style"]) {
                a.style.borderStyle = t["border-style"];
            }
            if (t["border-width"]) {
                const e = t["border-width"];
                a.style.borderWidth = parseFloat(e);
            }
        }
    }
    return a;
}

function $de(e, t) {
    const o = e.getRelativeBounds();
    const n = {
        left: o[0],
        top: o[1],
        width: o[2],
        height: o[3]
    };
    if (t) {
        return n;
    }
    const a = e.getParent();
    if (a) {
        const e = a.getBorderThickness();
        if (e) {
            const t = e.getScalarValueForUnit(js.PIXELS, -1, 1);
            n.left -= t;
            n.top -= t;
        }
        if (a.isPaddingAvailable()) {
            const e = a.getPadding();
            if (e) {
                const t = e.getScalarValueForUnit(js.PIXELS, -1, 1);
                n.left -= t;
                n.top -= t;
            }
        }
    }
    return n;
}

function Yde(e, t, o = true) {
    if (!e) {
        return;
    }
    for (const n of e) {
        if (!n) {
            continue;
        }
        const e = Kde(n);
        t[e] = {
            position: $de(n, o)
        };
        if (n instanceof af) {
            continue;
        }
        if (n instanceof Mm) {
            t[e].scrollbars = Xde(n).state;
            Yde(n.getOrderedVisualAndContainerControllers(), t, false);
        }
    }
}

function qde(e) {
    const t = {};
    if (!e) {
        return t;
    }
    if (e instanceof Nm) {
        Yde(e.getOrderedVisualAndContainerControllers(), t);
        t[Kde(e)] = {
            scrollbars: Xde(e).state
        };
    } else {
        Yde([ e ], t);
    }
    return t;
}

function Xde(e, t) {
    let o = false;
    let n = false;
    let a = false;
    const r = e.getOrderedVisualAndContainerControllers();
    if (!r) {
        return {
            layoutChanged: false,
            state: t
        };
    }
    const {width: s, height: i} = $de(e, false);
    const l = Gde();
    const c = s > l;
    const d = i > l;
    if (c || d) {
        for (let e = 0, t = r.length; (!n || !a) && e < t; ++e) {
            const t = r[e];
            if (!t) {
                continue;
            }
            const o = $de(t, false);
            const l = o.top + o.height;
            if (d && l - i > .5) {
                n = true;
            }
            if (o.left < -.5) {
                a = true;
                continue;
            }
            const u = o.left + o.width;
            if (c && u - s > .5) {
                a = true;
            }
        }
    }
    if (!t && n || t && n !== t.vertical) {
        if (l) {
            o = true;
        }
    }
    if (!t && a || t && a !== t.horizontal) {
        if (l) {
            o = true;
        }
    }
    return {
        layoutChanged: o,
        state: {
            horizontal: a,
            vertical: n
        }
    };
}

const Zde = 10;

const Jde = 5;

function Qde(e) {
    const t = e.getLayoutProxy();
    if (!t) {
        return null;
    }
    return eue(t);
}

function eue(e) {
    let t = e.getConstraint();
    if (!t) {
        t = new Kc;
        e.setDefaultConstraint(t);
    }
    return t;
}

function tue(e, t) {
    let o = 0;
    const n = t.scrollbars;
    if (n) {
        o = !!n.vertical ? Gde() : 0;
    }
    const a = t.constraints;
    if (a) {
        if (a.preferredHeight !== undefined && !isNaN(a.preferredHeight)) {
            e.setHeight(new Vs(a.preferredHeight, js.PIXELS));
        }
        if (a.preferredWidth !== undefined && !isNaN(a.preferredWidth)) {
            e.setWidth(new Vs(a.preferredWidth, js.PIXELS));
        }
        e.setMinimumHeight(a.minHeight || NaN);
        e.setMinimumWidth(a.minWidth || NaN);
        if (a.additionalContentWidth !== undefined && !isNaN(a.additionalContentWidth)) {
            o += a.additionalContentWidth;
        }
    }
    e.setRightSpace(o);
}

function oue(e, t) {
    const o = Kde(e);
    if (e instanceof Mm && !(e instanceof af)) {
        const o = e.getOrderedVisualAndContainerControllers();
        if (!o) {
            return;
        }
        for (const e of o) {
            if (!e) {
                continue;
            }
            oue(e, t);
        }
    }
    const n = t[o];
    const a = Qde(e);
    if (!a || !n) {
        return;
    }
    tue(a, n);
    if (e instanceof Nm) {
        e.refreshLayoutConstraints();
    }
}

function nue(e, t) {
    const o = e.getReportController();
    const n = e.getModel();
    const a = e.getLayoutProxy();
    if (!o || !n || !a) {
        return;
    }
    const r = n.getLayout();
    const s = new $c;
    if (r instanceof ff) {
        const e = Sm.LARGE;
        o.setWindowSize(e);
        s.setTileGap(0);
        s.setContainerInset(0);
    } else {
        s.setTileGap(Zde);
        s.setContainerInset(Jde);
    }
    s.setPositionTiledContentRelativeToRoot(false);
    s.setEnableTileReflow(false);
    s.setEnableTileMinimums(true);
    s.setDisableRecursion(true);
    s.setIgnoreContainerPadding(false);
    const i = o.getSASReportConfiguration();
    if (i) {
        s.setDefaultMinimumHeight(i.getSectionHeaderHeight());
    }
    if (ab() === "rtl") {
        s.setInvertXSpace(true);
    }
    const l = Kde(e);
    const c = t[l];
    const d = Qde(e);
    if (!d || !c) {
        return;
    }
    let u = {
        layoutChanged: true,
        state: c.scrollbars
    };
    while (u.layoutChanged) {
        tue(d, {
            ...c,
            scrollbars: u.state
        });
        a.layout(s);
        u = Xde(e, u.state);
    }
    const m = e.getContainerControllers();
    if (m) {
        for (const e of m) {
            if (!e) {
                continue;
            }
            nue(e, t);
        }
    }
}

function aue(e, t, o, n) {
    const a = e.getLayoutProxy();
    if (a) {
        a.setX(new Vs(0, js.PIXELS));
        a.setY(new Vs(0, js.PIXELS));
        a.setW(new Vs(o || 0, js.PIXELS));
        a.setH(new Vs(n || 0, js.PIXELS));
    }
    if (e instanceof Mm) {
        nue(e, t);
    }
}

const rue = {
    AddLayoutRoot: "vasdk/epic/addLayoutRoot",
    RemoveLayoutRoot: "vasdk/epic/removeLayoutRoot",
    LoadBirdModel: "vasdk/epic/loadBirdModel",
    UnloadBirdModel: "vasdk/epic/unloadBirdModel"
};

const sue = {
    actions: {
        addLayoutRoot: (e, t) => rD(rue.AddLayoutRoot, {
            controller: e,
            keyToPosition: t
        }),
        removeLayoutRoot: e => rD(rue.RemoveLayoutRoot, e),
        loadBirdModel: e => rD(rue.LoadBirdModel, e),
        unloadBirdModel: e => rD(rue.UnloadBirdModel, e)
    },
    actionTypes: rue
};

function iue(...e) {
    return uo(...e);
}

function lue(e, t) {
    return B((o => e.attachEvent(t, o)), ((e, t) => t.detach()));
}

function cue(e) {
    return t => O((() => {
        if (e.isExpired()) {
            return;
        }
        e.retain();
        return {
            unsubscribe: () => e.release()
        };
    }), (e => e ? t : P(new Error("Cannot create a new subscription after the wrapper has expired"))));
}

function due(e) {
    const t = Hde(e);
    return e => O((() => {
        if (t.some((e => e.isExpired()))) {
            return;
        }
        t.forEach((e => e.retain()));
        return {
            unsubscribe: () => t.forEach((e => e.release()))
        };
    }), (t => t ? e : P(new Error("Cannot create a new subscription after the wrappers have expired"))));
}

function uue(e, t) {
    return t.pipe(iue(sue.actionTypes.UnloadBirdModel), J((e => e.payload)), $((t => t === e)));
}

function mue() {
    return $((e => e !== null));
}

const pue = Nde({
    elementName: "style",
    initialState: {},
    reducers: {
        set: (e, t) => t.payload.data
    }
});

const fue = Nde({
    elementName: "breadcrumb",
    initialState: {},
    reducers: {
        setBasicData: (e = [], t) => t.payload.data.map(((t, o) => hue(e[o], t))),
        updateBreadcrumb: (e = [], t) => {
            const {target: o, labels: n} = t.payload.data;
            const a = gue(e, o.name);
            if (a === -1) return e;
            const r = e[a];
            const s = [ ...r.items ];
            const i = s[o.index];
            if (i.isSingle) return e;
            const l = i.values[i.selectedIndex];
            const c = n.indexOf(l);
            const d = c === -1 ? [ l, ...n ] : n;
            const u = c === -1 ? 0 : c;
            s[o.index] = Object.assign(Object.assign({}, i), {
                values: d,
                selectedIndex: u,
                status: "complete"
            });
            const m = [ ...e ];
            m[a] = Object.assign(Object.assign({}, r), {
                items: s
            });
            return m;
        },
        selectBreadcrumb: (e, t) => e,
        selectBreadcrumbItem: (e, t) => e,
        openBreadcrumb: (e, t) => e
    }
});

function gue(e, t) {
    return e.findIndex((e => e.name === t));
}

function hue(e, t) {
    if (e && e.name === t.name) {
        return Object.assign(Object.assign({}, e), {
            label: t.label,
            items: t.items.map(((t, o) => bue(e.items[o], t)))
        });
    }
    return Object.assign(Object.assign({}, t), {
        items: t.items.map((e => bue(undefined, e)))
    });
}

function bue(e, t) {
    if (e) {
        const o = e.values.indexOf(t);
        if (o !== -1) {
            return Object.assign(Object.assign({}, e), {
                selectedIndex: o,
                status: "invalid"
            });
        }
    }
    return {
        isSingle: false,
        selectedIndex: 0,
        status: "initial",
        values: [ t ]
    };
}

const vue = Ode({
    elementName: "container",
    initialState: {},
    reducers: {}
});

const yue = Ode({
    elementName: "combo-box",
    initialState: {},
    reducers: {}
});

const xue = Ode({
    elementName: "button-bar",
    initialState: {},
    reducers: {}
});

const Sue = Ode({
    elementName: "checkbox-list",
    initialState: {},
    reducers: {}
});

const wue = Ode({
    elementName: "slider",
    initialState: {},
    reducers: {}
});

const Cue = Ode({
    elementName: "radio-list",
    initialState: {},
    reducers: {}
});

const Eue = Ode({
    elementName: "text-field",
    initialState: {},
    reducers: {
        commitValue(e, t) {
            if (!e) return;
            return Object.assign(Object.assign({}, e), {
                committedValue: t.payload.data
            });
        },
        updateError(e, t) {
            return e;
        }
    }
});

const Iue = Ode({
    elementName: "unknown",
    initialState: {},
    reducers: {}
});

const _ue = Ode({
    elementName: "crosstab",
    initialState: {},
    reducers: {}
});

const Due = Ode({
    elementName: "table",
    initialState: {},
    reducers: {}
});

const Lue = Ode({
    elementName: "visualization",
    initialState: {},
    reducers: {
        openGraphAccelerator(e) {
            return e;
        }
    }
});

const Tue = Ode({
    elementName: "image",
    initialState: {},
    reducers: {
        notifyClick: (e, t) => e
    }
});

const Rue = Ode({
    elementName: "text",
    initialState: {},
    reducers: {
        notifyInteraction: (e, t) => e,
        notifyDoubleClick: e => e
    }
});

const kue = Ode({
    elementName: "stack-container",
    initialState: {},
    reducers: {
        notifyReorderItems: (e, t) => e
    }
});

const Aue = Ode({
    elementName: "prompt-container",
    initialState: {},
    reducers: {
        setOpen(e, t) {
            const o = t.payload.data;
            if (!e || e.isOpen === o) {
                return e;
            }
            return Object.assign(Object.assign({}, e), {
                isOpen: o
            });
        },
        toggleOpen(e) {
            if (!e) return e;
            return Object.assign(Object.assign({}, e), {
                isOpen: !e.isOpen
            });
        },
        notifyApplyChanges(e) {
            return e;
        },
        notifyCancelChanges(e) {
            return e;
        }
    }
});

const Mue = Ode({
    elementName: "job-content",
    initialState: {},
    reducers: {
        setJobResultsUri: (e, t) => {
            if (!e) {
                return;
            }
            return Object.assign(Object.assign({}, e), {
                jobResultsUri: t.payload.data
            });
        },
        setJobResultsContentSrc: (e, t) => {
            if (!e) {
                return;
            }
            return Object.assign(Object.assign({}, e), {
                jobResultsContentSrc: t.payload.data
            });
        },
        setJobResultsContentSrcDoc: (e, t) => {
            if (!e) {
                return;
            }
            return Object.assign(Object.assign({}, e), {
                jobResultsContentSrcDoc: t.payload.data
            });
        }
    }
});

const Nue = Ode({
    elementName: "info-bar",
    initialState: {},
    reducers: {
        notifyMenuButtonSelection: (e, t) => e
    }
});

const Oue = fo({
    Slider: wue.reducer,
    Image: Tue.reducer,
    Crosstab: _ue.reducer,
    Table: Due.reducer,
    Text: Rue.reducer,
    RadioList: Cue.reducer,
    CheckboxList: Sue.reducer,
    Container: vue.reducer,
    ComboBox: yue.reducer,
    TextField: Eue.reducer,
    DataVisualizations: Lue.reducer,
    ButtonBar: xue.reducer,
    StackContainer: kue.reducer,
    PromptContainer: Aue.reducer,
    WebContent: Pde.reducer,
    JobContent: Mue.reducer,
    InfoBar: Nue.reducer,
    Unknown: Iue.reducer
});

const Pue = Nde({
    elementName: "title",
    initialState: {},
    reducers: {
        set: (e, {payload: {data: t}}) => typeof t === "string" ? {
            title: t
        } : t,
        notifyDoubleClick: e => e
    }
});

const Bue = Nde({
    elementName: "warning",
    initialState: {},
    reducers: {
        set: (e, t) => t.payload.data
    }
});

const zue = {
    SetReportObjectName: "bird/SetReportObjectName",
    SetViewSetReport: "bird/SetViewSetReport",
    FocusVisual: "bird/FocusVisual",
    SetFocusedVisual: "bird/SetFocusedVisual",
    SetSelectedVisual: "bird/SetSelectedVisual",
    SetMaximizeVisual: "bird/SetMaximizeVisual",
    ToggleMaximizeVisual: "bird/ToggleMaximizeVisual",
    SetMaximizeAutofocusVisualId: "bird/SetMaximizeAutofocusVisualId",
    SetReportTheme: "bird/SetReportTheme",
    SetReportBackgroundColor: "bird/SetReportBackgroundColor",
    SetPageTabStyle: "bird/SetPageTabStyle",
    SetReportLabel: "bird/SetReportLabel",
    SetRestrictViewportGestures: "bird/SetRestrictViewportGestures"
};

const Fue = {
    actions: {
        setReportObjectName: e => rD(zue.SetReportObjectName, e),
        setViewSetReport: e => rD(zue.SetViewSetReport, e),
        focusVisual: e => rD(zue.FocusVisual, e),
        setFocusedVisual: e => rD(zue.SetFocusedVisual, e),
        setSelectedVisual: e => rD(zue.SetSelectedVisual, e),
        setMaximizedVisual: e => rD(zue.SetMaximizeVisual, e),
        toggleMaximizedVisual: e => rD(zue.ToggleMaximizeVisual, e),
        setMaximizeAutofocusVisualId: e => rD(zue.SetMaximizeAutofocusVisualId, e),
        setReportTheme: e => rD(zue.SetReportTheme, e),
        setReportBackgroundColor: e => rD(zue.SetReportBackgroundColor, e),
        setPageTabStyle: e => rD(zue.SetPageTabStyle, e),
        setReportLabel: e => rD(zue.SetReportLabel, e),
        setRestrictViewportGestures: e => rD(zue.SetRestrictViewportGestures, e)
    },
    actionTypes: zue,
    reducer: Tde({
        potentialFocusedVisual: null,
        focusedVisual: null,
        selectedVisual: null,
        maximizedVisual: null,
        reportTheme: null,
        reportBackgroundColor: null,
        pageTabStyle: null,
        reportLabel: "",
        maximizeAutofocusVisualId: null,
        restrictViewportGestures: undefined
    }, {
        [zue.SetReportObjectName]: (e, t) => Object.assign(Object.assign({}, e), {
            name: t.payload
        }),
        [zue.SetViewSetReport]: (e, t) => Object.assign(Object.assign({}, e), {
            viewSetReport: t.payload
        }),
        [zue.FocusVisual]: (e, t) => Object.assign(Object.assign({}, e), {
            potentialFocusedVisual: t.payload
        }),
        [zue.SetFocusedVisual]: (e, t) => Object.assign(Object.assign({}, e), {
            focusedVisual: t.payload
        }),
        [zue.SetSelectedVisual]: (e, t) => Object.assign(Object.assign({}, e), {
            selectedVisual: t.payload
        }),
        [zue.SetMaximizeVisual]: (e, t) => Object.assign(Object.assign({}, e), {
            maximizedVisual: t.payload,
            maximizeAutofocusVisualId: t.payload
        }),
        [zue.ToggleMaximizeVisual]: (e, t) => Object.assign(Object.assign({}, e), {
            maximizedVisual: e.maximizedVisual === t.payload ? null : t.payload,
            maximizeAutofocusVisualId: t.payload
        }),
        [zue.SetMaximizeAutofocusVisualId]: (e, t) => Object.assign(Object.assign({}, e), {
            maximizeAutofocusVisualId: t.payload
        }),
        [zue.SetReportTheme]: (e, t) => Object.assign(Object.assign({}, e), {
            reportTheme: t.payload
        }),
        [zue.SetReportBackgroundColor]: (e, t) => Object.assign(Object.assign({}, e), {
            reportBackgroundColor: t.payload
        }),
        [zue.SetPageTabStyle]: (e, t) => Object.assign(Object.assign({}, e), {
            pageTabStyle: t.payload
        }),
        [zue.SetReportLabel]: (e, t) => Object.assign(Object.assign({}, e), {
            reportLabel: t.payload
        }),
        [zue.SetRestrictViewportGestures]: (e, t) => Object.assign(Object.assign({}, e), {
            restrictViewportGestures: t.payload
        })
    })
};

const jue = "layout/AddRoot";

const Vue = "layout/RemoveRoot";

const Hue = {
    actions: {
        addRoot: e => rD(jue, e),
        removeRoot: e => rD(Vue, e)
    },
    actionTypes: {
        addRoot: jue,
        removeRoot: Vue
    },
    reducer: Tde([], {
        [jue]: (e, t) => {
            if (e.indexOf(t.payload) !== -1) {
                return e;
            }
            return [ ...e, t.payload ];
        },
        [Vue]: (e, t) => {
            const o = e.indexOf(t.payload);
            if (o === -1) {
                return e;
            }
            const n = e.concat();
            n.splice(o, 1);
            return n;
        }
    })
};

const Uue = Nde({
    elementName: "busy",
    initialState: {},
    reducers: {
        setBusy: (e, t) => {
            const o = t.payload.data.isBusy;
            return {
                isBusy: o,
                indicatorVisible: o,
                canPause: t.payload.data.canPause
            };
        },
        togglePaused: e => {
            if (!e) return;
            return Object.assign(Object.assign({}, e), {
                isPaused: !e.isPaused
            });
        },
        hideIndicator: e => {
            if (!e) return;
            return Object.assign(Object.assign({}, e), {
                indicatorVisible: false
            });
        }
    }
});

const Gue = "section/setSections";

const Kue = "section/setCurrentSection";

const Wue = "section/setNextSection";

const $ue = "section/updateSection";

const Yue = "section/sectionSwitchComplete";

const que = "section/setHiddenSection";

const Xue = "section/closeHiddenSection";

const Zue = "section/notifyExportHiddenSection";

const Jue = "section/setLinkLabels";

const Que = "section/notifyLinkNavigation";

const eme = "section/addNewSection";

const tme = "section/editTabLabel";

const ome = "section/setTabsEditable";

const nme = "section/setEmptyViewEditable";

const ame = "section/notifyTabMenuOpen";

const rme = "section/notifyReorderTabs";

const sme = "section/selectTabMenuItem";

const ime = "section/setFadeTransition";

const lme = "section/notifyPressCreateAutoChart";

const cme = "section/notifyPressSelectTemplate";

const dme = "section/notifyPressExploreSuggestions";

const ume = "section/notifyDrop";

const mme = "section/setTabDropTypes";

const pme = "section/notifyTabClose";

const fme = "section/setShowCreateAutoChart";

const gme = {
    actions: {
        setSections: e => rD(Gue, e),
        setCurrentSection: e => rD(Kue, e),
        setNextSection: e => rD(Wue, e),
        updateSection: (e, t) => rD($ue, {
            sectionId: e,
            sectionData: t
        }),
        sectionSwitchComplete: e => rD(Yue, e),
        setHiddenSection: e => rD(que, e),
        closeHiddenSection: () => rD(Xue),
        notifyExportHiddenSection: e => rD(Zue, e),
        setLinkLabels: e => rD(Jue, e),
        notifyLinkNavigation: e => rD(Que, e),
        addNewSection: () => rD(eme),
        setTabsEditable: e => rD(ome, e),
        editTabLabel: e => rD(tme, e),
        setEmptyViewEditable: e => rD(nme, e),
        notifyTabMenuOpen: e => rD(ame, e),
        notifyReorderTabs: (e, t) => rD(rme, {
            prevIndex: e,
            newIndex: t
        }),
        selectTabMenuItem: e => rD(sme, e),
        fadeTransition: e => rD(ime, e),
        notifyPressCreateAutoChart: e => rD(lme, e),
        notifyPressSelectTemplate: e => rD(cme, e),
        notifyPressExploreSuggestions: e => rD(dme, e),
        notifyDrop: e => rD(ume, e),
        setTabDropTypes: e => rD(mme, e),
        notifyTabClose: e => rD(pme, e),
        setShowCreateAutoChart: e => rD(fme, e)
    },
    actionTypes: {
        setSections: Gue,
        setCurrentSection: Kue,
        setNextSection: Wue,
        sectionSwitchComplete: Yue,
        updateSection: $ue,
        setHiddenSection: que,
        closeHiddenSection: Xue,
        notifyExportHiddenSection: Zue,
        setLinkLabels: Jue,
        notifyLinkNavigation: Que,
        addNewSection: eme,
        setTabsEditable: ome,
        editTabLabel: tme,
        setEmptyViewEditable: nme,
        notifyTabMenuOpen: ame,
        notifyReorderTabs: rme,
        selectTabMenuItem: sme,
        fadeTransition: ime,
        notifyPressCreateAutoChart: lme,
        notifyPressSelectTemplate: cme,
        notifyPressExploreSuggestions: dme,
        notifyDrop: ume,
        setTabDropTypes: mme,
        notifyTabClose: pme,
        setShowCreateAutoChart: fme
    },
    reducer: Tde({
        byId: {},
        currentSection: undefined,
        transitioning: false,
        sectionTabOrder: []
    }, {
        [ome]: (e, t) => Object.assign(Object.assign({}, e), {
            tabsEditable: t.payload
        }),
        [nme]: (e, t) => Object.assign(Object.assign({}, e), {
            emptyViewEditable: t.payload
        }),
        [Gue]: (e, t) => {
            const o = {};
            const n = [];
            for (const e of t.payload) {
                o[e.id] = e;
                if (!e.hidden) {
                    n.push(e.id);
                }
            }
            return Object.assign(Object.assign({}, e), {
                byId: o,
                sectionTabOrder: n
            });
        },
        [Kue]: (e, t) => Object.assign(Object.assign({}, e), {
            currentSection: t.payload,
            transitioning: e.currentSection !== undefined
        }),
        [Wue]: (e, t) => Object.assign(Object.assign({}, e), {
            nextSection: t.payload
        }),
        [$ue]: (e, t) => {
            const o = t.payload.sectionId;
            return Object.assign(Object.assign({}, e), {
                byId: Object.assign(Object.assign({}, e.byId), {
                    [o]: Object.assign(Object.assign({}, e.byId[o]), t.payload.sectionData)
                })
            });
        },
        [que]: (e, t) => Object.assign(Object.assign({}, e), {
            hiddenSection: t.payload || undefined
        }),
        [Yue]: (e, t) => {
            if (!e.transitioning) {
                return e;
            }
            const o = Object.assign(Object.assign({}, e), {
                transitioning: false
            });
            if (t.payload) {
                o.currentSection = e.nextSection === undefined ? e.currentSection : undefined;
            }
            return o;
        },
        [Xue]: (e, t) => Object.assign(Object.assign({}, e), {
            hiddenSection: undefined
        }),
        [Jue]: (e, t) => Object.assign(Object.assign({}, e), {
            linkLabels: t.payload
        }),
        [ime]: (e, t) => {
            throw new Error("fadeTransition is not supported");
        },
        [mme]: (e, t) => Object.assign(Object.assign({}, e), {
            tabDropTypes: t.payload
        }),
        [fme]: (e, t) => Object.assign(Object.assign({}, e), {
            showCreateAutoChart: t.payload
        })
    })
};

const hme = Nde({
    elementName: "message",
    initialState: {},
    reducers: {
        set: (e, t) => t.payload.data
    }
});

const bme = {
    OpenReportContextMenu: "reportContextMenu/open",
    CloseReportContextMenu: "reportContextMenu/close",
    SetReportItemSortKeys: "reportContextmenu/setReportItemSortKeys",
    SetReportItems: "reportContextMenu/setReportItems",
    SetReportItem: "reportContextMenu/setReportItem",
    SetObjectItemSortKeys: "reportContextmenu/setObjectItemSortKeys",
    SetObjectItems: "reportContextMenu/setObjectItems",
    SetObjectItem: "reportContextMenu/setObjectItem",
    SetReportContextMenuTarget: "reportContextMenu/setReportContextMenuTarget",
    SetGraphPosition: "reportContextMenu/setGraphPosition"
};

const vme = {
    position: {
        x: 0,
        y: 0
    },
    graphPosition: null,
    open: false,
    target: null,
    timestamp: null,
    reportItems: {},
    reportItemSortKeys: [],
    objectItems: {},
    objectItemSortKeys: []
};

const yme = {
    elementName: "reportContextMenu",
    actions: {
        open: e => rD(bme.OpenReportContextMenu, e),
        close: () => rD(bme.CloseReportContextMenu),
        setGraphPosition: e => rD(bme.SetGraphPosition, e),
        setReportContextMenuTarget: (e, t) => rD(bme.SetReportContextMenuTarget, {
            id: e,
            timestamp: t
        }),
        setReportItemSortKeys: e => rD(bme.SetReportItemSortKeys, e),
        setReportItems: e => rD(bme.SetReportItems, e),
        setReportItem: (e, t) => rD(bme.SetReportItem, {
            key: e,
            item: t
        }),
        setObjectItemSortKeys: e => rD(bme.SetObjectItemSortKeys, e),
        setObjectItems: e => rD(bme.SetObjectItems, e),
        setObjectItem: (e, t) => rD(bme.SetObjectItem, {
            key: e,
            item: t
        })
    },
    actionTypes: bme,
    reducer: Tde(vme, {
        [bme.OpenReportContextMenu]: (e, t) => Object.assign(Object.assign({}, e), {
            open: true,
            position: t.payload
        }),
        [bme.SetReportContextMenuTarget]: (e, t) => {
            if (t.payload.timestamp === e.timestamp) {
                return e;
            }
            return Object.assign(Object.assign({}, e), {
                target: {
                    id: t.payload.id
                },
                timestamp: t.payload.timestamp
            });
        },
        [bme.CloseReportContextMenu]: e => Object.assign(Object.assign({}, vme), {
            reportItemSortKeys: e.reportItemSortKeys,
            objectItemSortKeys: e.objectItemSortKeys
        }),
        [bme.SetReportItemSortKeys]: (e, t) => Object.assign(Object.assign({}, e), {
            reportItemSortKeys: t.payload
        }),
        [bme.SetReportItems]: (e, t) => Object.assign(Object.assign({}, e), {
            reportItems: t.payload
        }),
        [bme.SetReportItem]: (e, t) => Object.assign(Object.assign({}, e), {
            reportItems: Object.assign(Object.assign({}, e.reportItems), {
                [t.payload.key]: t.payload.item
            })
        }),
        [bme.SetObjectItemSortKeys]: (e, t) => Object.assign(Object.assign({}, e), {
            objectItemSortKeys: t.payload
        }),
        [bme.SetObjectItems]: (e, t) => Object.assign(Object.assign({}, e), {
            objectItems: t.payload
        }),
        [bme.SetObjectItem]: (e, t) => Object.assign(Object.assign({}, e), {
            objectItems: Object.assign(Object.assign({}, e.objectItems), {
                [t.payload.key]: t.payload.item
            })
        }),
        [bme.SetGraphPosition]: (e, t) => Object.assign(Object.assign({}, e), {
            graphPosition: t.payload
        })
    })
};

const xme = {
    isOpen: true,
    value: undefined
};

const Sme = Nde({
    elementName: "aboutInfo",
    initialState: {},
    reducers: {
        setValue(e = xme, t) {
            return Object.assign(Object.assign({}, e), {
                value: t.payload.data
            });
        },
        toggleOpen(e = xme) {
            return Object.assign(Object.assign({}, e), {
                isOpen: !e.isOpen
            });
        }
    }
});

const wme = {
    OpenBirdActionMenu: "birdActionMenu/open",
    SelectBirdActionMenuOption: "birdActionMenu/select",
    CloseBirdActionMenu: "birdActionMenu/close"
};

const Cme = {
    context: "",
    items: [],
    position: {
        x: 0,
        y: 0
    }
};

const Eme = {
    elementName: "birdActionMenu",
    actions: {
        open: e => rD(wme.OpenBirdActionMenu, e),
        select: (e, t) => rD(wme.SelectBirdActionMenuOption, {
            context: e,
            index: t
        }),
        close: () => rD(wme.CloseBirdActionMenu)
    },
    actionTypes: wme,
    reducer: Tde(Cme, {
        [wme.OpenBirdActionMenu]: (e, t) => Object.assign({}, t.payload),
        [wme.CloseBirdActionMenu]: () => Cme
    })
};

const Ime = Nde({
    elementName: "autoInteraction",
    initialState: {},
    reducers: {
        set: (e, t) => t.payload.data,
        deleteItem: (e, t) => e,
        deleteValue: (e, t) => e
    }
});

const _me = {
    SetConnectionStatus: "transportStatus/setConnectionStatus",
    SetTransportError: "transportStatus/setTransportError",
    SetTransportErrorKey: "transportStatus/setTransportErrorKey",
    SetReportLoaded: "transportStatus/setReportLoaded",
    SetThemeLoaded: "transportStatus/setThemeLoaded",
    SetReportContentComplete: "transportStatus/setReportContentComplete",
    SetReportObjectContentComplete: "transportStatus/setReportObjectContentComplete",
    SetPackageUrl: "transportStatus/setPackageUrl",
    SetServerHost: "transportStatus/setServerHost",
    SetServerType: "transportStatus/SetServerType",
    SetIframeSandbox: "transportStatus/SetIframeSandbox",
    SetRoundBirdSliderRange: "transportStatus/SetRoundBirdSliderRange"
};

const Dme = {
    actions: {
        setConnectionStatus: e => rD(_me.SetConnectionStatus, e),
        setTransportError: e => rD(_me.SetTransportError, e),
        setTransportErrorKey: e => rD(_me.SetTransportErrorKey, e),
        setReportLoaded: e => rD(_me.SetReportLoaded, e),
        setThemeLoaded: e => rD(_me.SetThemeLoaded, e),
        setReportContentComplete: e => rD(_me.SetReportContentComplete, e),
        setReportObjectContentComplete: e => rD(_me.SetReportObjectContentComplete, e),
        setPackageUrl: e => rD(_me.SetPackageUrl, e),
        setServerHost: e => rD(_me.SetServerHost, e),
        setServerType: e => rD(_me.SetServerType, e),
        setIframeSandbox: e => rD(_me.SetIframeSandbox, e),
        setRoundBirdSliderRange: e => rD(_me.SetRoundBirdSliderRange, e)
    },
    actionTypes: _me,
    reducer: Tde({
        connectionStatus: "initalizing"
    }, {
        [_me.SetConnectionStatus]: (e, t) => Object.assign(Object.assign({}, e), {
            connectionStatus: t.payload
        }),
        [_me.SetTransportError]: (e, t) => Object.assign(Object.assign({}, e), {
            transportError: t.payload
        }),
        [_me.SetTransportErrorKey]: (e, t) => Object.assign(Object.assign({}, e), {
            transportErrorKey: t.payload
        }),
        [_me.SetReportLoaded]: (e, t) => Object.assign(Object.assign({}, e), {
            reportLoaded: t.payload
        }),
        [_me.SetThemeLoaded]: (e, t) => Object.assign(Object.assign({}, e), {
            themeLoaded: t.payload
        }),
        [_me.SetReportObjectContentComplete]: (e, t) => Object.assign(Object.assign({}, e), {
            reportObjectContentComplete: t.payload
        }),
        [_me.SetReportContentComplete]: (e, t) => Object.assign(Object.assign({}, e), {
            reportContentComplete: t.payload
        }),
        [_me.SetPackageUrl]: (e, t) => Object.assign(Object.assign({}, e), {
            packageUrl: t.payload
        }),
        [_me.SetServerHost]: (e, t) => Object.assign(Object.assign({}, e), {
            serverHost: t.payload
        }),
        [_me.SetServerType]: (e, t) => Object.assign(Object.assign({}, e), {
            serverType: t.payload
        }),
        [_me.SetIframeSandbox]: (e, t) => Object.assign(Object.assign({}, e), {
            iframeSandbox: t.payload
        }),
        [_me.SetRoundBirdSliderRange]: (e, t) => Object.assign(Object.assign({}, e), {
            roundBirdSliderRange: t.payload
        })
    })
};

const Lme = Nde({
    elementName: "selectiondisabled",
    initialState: {},
    reducers: {
        set: (e, t) => t.payload.data
    }
});

const Tme = Nde({
    elementName: "elementDecorator",
    initialState: {},
    reducers: {
        set(e, t) {
            return t.payload.data;
        },
        setToolbarItems(e, t) {
            return Object.assign(Object.assign({}, e), {
                toolbarItems: t.payload.data
            });
        },
        setAlwaysShowOverflow(e, t) {
            return Object.assign(Object.assign({}, e), {
                alwaysShowOverflow: t.payload.data
            });
        },
        notifyToolbarOpen(e) {
            return e;
        }
    }
});

const Rme = {
    SetObjectOverlaysDisabled: "objectOverlaysDisabled/SetObjectOverlaysDisabled"
};

const kme = {
    actions: {
        setObjectOverlaysDisabled: e => rD(Rme.SetObjectOverlaysDisabled, e)
    },
    actionTypes: Rme,
    reducer: Tde(false, {
        [Rme.SetObjectOverlaysDisabled]: (e, t) => t.payload
    })
};

const Ame = {
    hideZoomControls: false,
    zoomInEnabled: false,
    zoomOutEnabled: false
};

const Mme = Nde({
    elementName: "zoom",
    initialState: {},
    reducers: {
        toggleZoomControls(e = Ame) {
            return Object.assign(Object.assign({}, e), {
                hideZoomControls: !e.hideZoomControls
            });
        },
        setZoomCapabilities(e = Ame, t) {
            return Object.assign(Object.assign({}, e), {
                zoomInEnabled: t.payload.data.zoomInEnabled,
                zoomOutEnabled: t.payload.data.zoomOutEnabled
            });
        },
        zoomIn(e) {
            return e;
        },
        zoomOut(e) {
            return e;
        },
        resetZoom(e) {
            return e;
        }
    }
});

const Nme = Nde({
    elementName: "dragMode",
    initialState: {},
    reducers: {
        init(e, t) {
            return t.payload.data;
        },
        setCurrentMode(e, t) {
            if (!e) {
                return;
            }
            return Object.assign(Object.assign({}, e), {
                currentMode: t.payload.data
            });
        }
    }
});

const Ome = Nde({
    elementName: "accessibilityLabel",
    initialState: {},
    reducers: {
        set: (e, t) => t.payload.data
    }
});

const Pme = Nde({
    elementName: "overview",
    initialState: {},
    reducers: {
        set(e, t) {
            return t.payload.data;
        },
        notifyToggleOverview(e) {
            return e;
        },
        setIsOverviewOn(e, t) {
            return Object.assign(Object.assign({}, e), {
                isOverviewOn: t.payload.data
            });
        },
        init(e, t) {
            return t.payload.data;
        },
        toggleOverview(e) {
            return e;
        }
    }
});

const Bme = Nde({
    elementName: "maximize",
    initialState: {},
    reducers: {
        set(e, t) {
            return t.payload.data;
        },
        update(e, t) {
            if (!e) {
                return;
            }
            return Object.assign(Object.assign({}, e), t.payload.data);
        }
    }
});

const zme = {
    Set: "explanation/set",
    Update: "explanation/update",
    Reset: "explanation/reset"
};

const Fme = {
    elementName: "explanation",
    actionTypes: zme,
    actions: {
        set: e => rD(zme.Set, e),
        update: e => rD(zme.Update, e),
        reset: () => rD(zme.Reset)
    },
    reducer: Tde({}, {
        [zme.Set](e, t) {
            return t.payload;
        },
        [zme.Update](e, t) {
            return Object.assign(Object.assign({}, e), t.payload);
        },
        [zme.Reset](e) {
            return {};
        }
    })
};

const jme = Nde({
    elementName: "prompt-header",
    initialState: {},
    reducers: {
        init(e, t) {
            return t.payload.data;
        },
        update(e, t) {
            if (!e) {
                return e;
            }
            return Object.assign(Object.assign({}, e), t.payload.data);
        },
        open(e) {
            if (!e) return;
            return Object.assign(Object.assign({}, e), {
                status: "open"
            });
        },
        close(e) {
            if (!e) return;
            return Object.assign(Object.assign({}, e), {
                status: "closed"
            });
        }
    }
});

const Vme = Nde({
    elementName: "status",
    initialState: {},
    reducers: {
        set: (e, t) => t.payload.data,
        notifyPress: e => e
    }
});

const Hme = {
    Update: "manageColumns/update",
    NotifyUpdateDisplayedColumns: "manageColumns/notifyUpdateDisplayedColumns"
};

const Ume = {
    elementName: "manageColumns",
    actionTypes: Hme,
    actions: {
        update: e => rD(Hme.Update, e),
        notifyUpdateDisplayedColumns: e => rD(Hme.NotifyUpdateDisplayedColumns, e)
    },
    reducer: Tde({}, {
        [Hme.Update](e, t) {
            return Object.assign(Object.assign({}, e), t.payload);
        },
        [Hme.NotifyUpdateDisplayedColumns](e, t) {
            return e;
        }
    })
};

function Gme(e, t) {
    var o;
    let n = [ e ];
    const a = (o = t.byId[e]) === null || o === void 0 ? void 0 : o.childKeys;
    if (!a) {
        return n;
    }
    for (const e of a) {
        n = n.concat(Gme(e, t));
    }
    return n;
}

function Kme(e, t, o) {
    let n = undefined;
    o.add(e);
    if (Mde in e) {
        for (const o of t) {
            if (!e[o]) {
                continue;
            }
            if (!n) {
                n = Object.assign({}, e);
            }
            delete n[o];
        }
    } else {
        for (const [a, r] of Object.entries(e)) {
            if (o.has(r)) {
                console.warn("Unexpected circular dependency in state. Skipping reached node.");
                continue;
            }
            if (r instanceof Object) {
                const s = Kme(r, t, o);
                if (r !== s) {
                    if (!n) {
                        n = Object.assign({}, e);
                    }
                    n[a] = s;
                }
            }
        }
    }
    o.delete(e);
    return n || e;
}

function Wme(e, t) {
    var o;
    const n = Gme(t, e.ui.birdLayout);
    let a = Kme(e, n, new Set);
    let r = false;
    for (const [e, n] of Object.entries(a.ui.birdLayout.byId)) {
        if ((o = n === null || n === void 0 ? void 0 : n.childKeys) === null || o === void 0 ? void 0 : o.includes(t)) {
            if (!r) {
                r = true;
                a = Object.assign(Object.assign({}, a), {
                    ui: Object.assign(Object.assign({}, a.ui), {
                        birdLayout: Object.assign(Object.assign({}, a.ui.birdLayout), {
                            byId: Object.assign({}, a.ui.birdLayout.byId)
                        })
                    })
                });
            }
            a.ui.birdLayout.byId[e] = Object.assign(Object.assign({}, n), {
                childKeys: n === null || n === void 0 ? void 0 : n.childKeys.filter((e => e !== t))
            });
            break;
        }
    }
    if (a.bird.maximizedVisual && n.includes(a.bird.maximizedVisual)) {
        a = Object.assign(Object.assign({}, a), {
            bird: Object.assign(Object.assign({}, a.bird), {
                maximizedVisual: null
            })
        });
    }
    return a;
}

const $me = {
    DeleteReportObject: "root/DeleteReportObject",
    DeleteSection: "root/DeleteSection"
};

const Yme = {
    deleteReportObject: e => rD($me.DeleteReportObject, e),
    deleteSection: e => rD($me.DeleteSection, e)
};

const qme = {
    actions: Yme,
    actionTypes: $me,
    reducer: (e, t) => {
        var o, n;
        const a = t;
        switch (a.type) {
          case $me.DeleteReportObject:
            {
                return Wme(e, a.payload);
            }

          case $me.DeleteSection:
            {
                const t = a.payload;
                const r = e.sections.byId[t];
                const s = Object.assign(Object.assign({}, e), {
                    sections: Object.assign({}, e.sections),
                    ui: Object.assign(Object.assign({}, e.ui), {
                        birdLayout: Object.assign({}, e.ui.birdLayout)
                    })
                });
                const i = e.sections.byId, l = t;
                i[l];
                const c = T(i, [ typeof l === "symbol" ? l : l + "" ]);
                s.sections.byId = c;
                const d = e.sections.sectionTabOrder.filter((e => e !== t));
                s.sections.sectionTabOrder = d;
                s.sections.transitioning = false;
                if (s.sections.nextSection !== undefined) {
                    s.sections.currentSection = s.sections.nextSection;
                    s.sections.nextSection = undefined;
                }
                if (s.sections.currentSection === t) {
                    const e = Math.max(0, s.sections.sectionTabOrder.indexOf(t) - 1);
                    s.sections.currentSection = (o = s.sections.sectionTabOrder[e]) !== null && o !== void 0 ? o : undefined;
                }
                const u = typeof s.sections.currentSection === "string" ? (n = s.sections.byId[s.sections.currentSection]) === null || n === void 0 ? void 0 : n.rootContainerId : undefined;
                if (u !== undefined) {
                    s.ui.birdLayout.rootIds = [ u ];
                } else {
                    s.ui.birdLayout.rootIds = [];
                }
                if ((r === null || r === void 0 ? void 0 : r.rootContainerId) !== undefined) {
                    const e = Wme(s, `${r.rootContainerId}-header`);
                    return Wme(e, r.rootContainerId);
                }
                return s;
            }
        }
        return e;
    }
};

const Xme = e => (e === null || e === void 0 ? void 0 : e.type) === "hint";

const Zme = e => (e === null || e === void 0 ? void 0 : e.type) === "result";

const Jme = e => (e === null || e === void 0 ? void 0 : e.type) === "route" || (e === null || e === void 0 ? void 0 : e.type) === "pin" || (e === null || e === void 0 ? void 0 : e.type) === "area" || (e === null || e === void 0 ? void 0 : e.type) === "myLocationPin";

const Qme = e => (e === null || e === void 0 ? void 0 : e.type) === "route";

const epe = e => {
    var t;
    return (t = e === null || e === void 0 ? void 0 : e.every((e => !isNaN(e)))) !== null && t !== void 0 ? t : false;
};

const tpe = e => e.every((e => {
    if (!(typeof e === "number")) {
        return e.location !== undefined && e.location.length > 0;
    }
    return true;
}));

const ope = (e, t) => {
    var o, n, a;
    const {indices: r, property: s, value: i} = t;
    if (!r) return;
    const l = (e, t, o) => {
        const n = r.filter((e => o.includes(e.type))).map((e => e.index));
        if (n.includes(t)) {
            return Object.assign(Object.assign({}, e), {
                [s]: i
            });
        }
        return e;
    };
    return Object.assign(Object.assign({}, e), {
        searchHints: (o = e.searchHints) === null || o === void 0 ? void 0 : o.map(((e, t) => l(e, t, [ "hint" ]))),
        searchResults: (n = e.searchResults) === null || n === void 0 ? void 0 : n.map(((e, t) => l(e, t, [ "result" ]))),
        features: (a = e.features) === null || a === void 0 ? void 0 : a.map(((e, t) => l(e, t, [ "pin", "route", "area", "myLocationPin" ])))
    });
};

const npe = Nde({
    elementName: "object-search",
    initialState: {},
    reducers: {
        set: (e, t) => t.payload.data,
        update: (e, t) => {
            var o;
            let n = {};
            const {navSelection: a} = t.payload.data;
            if ("navSelection" in t.payload.data) {
                const t = (o = e === null || e === void 0 ? void 0 : e.features) === null || o === void 0 ? void 0 : o.findIndex((e => {
                    if ((e === null || e === void 0 ? void 0 : e.type) === "area" && epe(e.latLon) && e.isRendered === false) {
                        return true;
                    }
                    if ((e === null || e === void 0 ? void 0 : e.type) === "route" && e.routeLocations.every((e => {
                        if (!(typeof e === "number")) {
                            return epe(e.latLon);
                        }
                        return false;
                    })) && e.isRendered === false) {
                        return true;
                    }
                    return false;
                }));
                if (t !== undefined && t !== -1) {
                    n = {
                        featurePendingRedraw: {
                            index: t,
                            pendingNavSelection: a
                        },
                        navSelection: e === null || e === void 0 ? void 0 : e.navSelection
                    };
                }
            }
            return Object.assign(Object.assign(Object.assign({}, e), t.payload.data), n);
        },
        setPinned: (e, t) => {
            if (!e) return;
            return Object.assign(Object.assign({}, e), {
                pinned: t.payload.data
            });
        },
        setPinModeEnabled: (e, t) => {
            if (!e) return;
            return Object.assign(Object.assign({}, e), {
                pinModeEnabled: t.payload.data
            });
        },
        toggleAutoLinkToPins: (e, t) => {
            if (!e) return;
            return Object.assign(Object.assign({}, e), {
                autoLinkToPins: !e.autoLinkToPins
            });
        },
        toggleRouteArrows: (e, t) => {
            if (!e) return;
            return Object.assign(Object.assign({}, e), {
                routeArrows: !e.routeArrows
            });
        },
        setRouteArrowType: (e, t) => {
            if (!e) return;
            const o = t.payload.data;
            return Object.assign(Object.assign({}, e), {
                routeArrowType: o
            });
        },
        notifyRefreshLocation: (e, t) => e,
        notifyNewPin: (e, t) => e,
        notifyUpdateSearchResult: (e, t) => e,
        notifyUpdatePin: (e, t) => e,
        notifyUpdateRoute: (e, t) => e,
        notifyUpdateArea: (e, t) => e,
        notifyDeletePins: (e, t) => e,
        notifyDeleteAllPins: (e, t) => e,
        notifyUpdateHints: (e, t) => e,
        notifyApplyHint: (e, t) => e,
        notifySearch: (e, t) => e,
        notifyDeleteSearchResults: (e, t) => e,
        notifyConvertSearchResults: (e, t) => e,
        notifyConvertAllSearchResults: (e, t) => e,
        notifyDrawAll: (e, t) => e,
        notifyNewRoute: (e, t) => e,
        notifyDrawRoute: (e, t) => e,
        notifyClearRoute: (e, t) => e,
        notifyNewArea: (e, t) => e,
        notifyDrawArea: (e, t) => e,
        notifyClearArea: (e, t) => e,
        updateItemStates: (e, t) => {
            if (!e) return;
            return ope(e, t.payload.data);
        },
        notifyUpdateSelection: (e, t) => e,
        notifyVisibilityChange: (e, t) => e,
        notifyOpen: e => e,
        setSelectedDemographicCountry: (e, t) => {
            if (!e || !e.features) return;
            const {index: o, country: n} = t.payload.data;
            return Object.assign(Object.assign({}, e), {
                features: e.features.map(((e, t) => t === o && e.type === "area" ? Object.assign(Object.assign({}, e), {
                    demographics: Object.assign(Object.assign({}, e.demographics), {
                        selectedCountry: n
                    })
                }) : e))
            });
        },
        setSelectedDemographicMeasures: (e, t) => {
            if (!e || !e.features) return;
            const {index: o, selectedMeasures: n} = t.payload.data;
            return Object.assign(Object.assign({}, e), {
                features: e.features.map(((e, t) => {
                    var a;
                    if (t === o && e.type === "area") {
                        let t = ((a = e.demographics) === null || a === void 0 ? void 0 : a.recentMeasures) || [];
                        n.forEach((e => {
                            t = t.filter((t => t !== e));
                            t.unshift(e);
                        }));
                        return Object.assign(Object.assign({}, e), {
                            demographics: Object.assign(Object.assign({}, e.demographics), {
                                selectedMeasures: n,
                                recentMeasures: t
                            })
                        });
                    }
                    return e;
                }))
            });
        },
        setDemographicData: (e, t) => {
            if (!e || !e.features) return;
            const {index: o, data: n} = t.payload.data;
            return Object.assign(Object.assign({}, e), {
                features: e.features.map(((e, t) => Object.assign(Object.assign({}, e), t === o && e.type === "area" && {
                    demographics: Object.assign(Object.assign({}, e.demographics), {
                        data: n
                    })
                })))
            });
        }
    }
});

const ape = Nde({
    elementName: "layerVisibility",
    initialState: {},
    reducers: {
        set(e, t) {
            return t.payload.data;
        },
        notifyToggleLayerVisibility(e, t) {
            return e;
        }
    }
});

const rpe = fo({
    byId: jde.reducer,
    rootIds: Hue.reducer
});

const spe = fo({
    birdLayout: rpe,
    busy: Uue.reducer,
    selectionDisabled: Lme.reducer,
    message: hme.reducer,
    warning: Bue.reducer,
    status: Vme.reducer,
    reportContextMenu: yme.reducer,
    birdActionMenu: Eme.reducer,
    dragMode: Nme.reducer,
    zoom: Mme.reducer,
    overview: Pme.reducer,
    layerVisibility: ape.reducer,
    elementDecorator: Tme.reducer,
    objectOverlaysDisabled: kme.reducer,
    maximize: Bme.reducer,
    explanation: Fme.reducer,
    promptHeader: jme.reducer,
    manageColumns: Ume.reducer,
    objectSearch: npe.reducer
});

const ipe = fo({
    sections: gme.reducer,
    aboutInfo: Sme.reducer,
    birdElements: Oue,
    titles: Pue.reducer,
    styles: pue.reducer,
    breadcrumbs: fue.reducer,
    autoInteractions: Ime.reducer,
    ui: spe,
    bird: Fue.reducer,
    transport: Dme.reducer,
    accessibilityLabel: Ome.reducer
});

function lpe(e, t) {
    const o = ipe(e, t);
    return qme.reducer(o, t);
}

function cpe(e, t) {
    if (e) {
        return go(lpe, t, vo(ho(e)));
    }
    return go(lpe, t);
}

const dpe = () => {
    const e = new nbe;
    const t = mo({
        dependencies: e
    });
    const o = cpe(t);
    t.run(sbe);
    return o;
};

function upe(e, t, o, n) {
    const a = e.getReportController();
    if (!a) {
        return V;
    }
    n.refreshLayoutConstraints(e, t);
    n.doBirdLayout(e, t, o.width, o.height);
    const r = n.getLayoutState(e);
    return z(jde.actions.updateState(r));
}

const mpe = (e, t, o) => {
    const n = t => e.pipe(iue(sue.actionTypes.RemoveLayoutRoot), $((e => e.payload === t)), Y(1));
    const a = (a, r) => {
        const s = e.pipe(iue(jde.actionTypes.setPosition), $((e => e.payload.id === r)), cue(a), W(n(a)));
        const i = e.pipe(iue(jde.actionTypes.notifyInvalidateLayout), ee(s), J((([, e]) => e)));
        return F(s, i).pipe(Z(0, j), Q((e => upe(a, t.value.ui.birdLayout.byId, e.payload.data, o))), cue(a), W(n(a)));
    };
    const r = (a, r) => e.pipe(iue(jde.actionTypes.setConstraints, jde.actionTypes.setBreadcumbLayout), Z(0, j), Q((() => {
        const e = t.value.ui.birdLayout.byId;
        const n = e[r];
        if (!n) {
            return V;
        }
        const s = n.position;
        if (!s || !s.width || !s.height) {
            return V;
        }
        return upe(a, t.value.ui.birdLayout.byId, s, o);
    })), W(n(a)));
    return e.pipe(iue(sue.actionTypes.AddLayoutRoot), Q((e => {
        const t = e.payload.keyToPosition;
        const s = e.payload.controller;
        const i = t ? t : o.getKey(s);
        const l = a(s, i);
        const c = r(s, i);
        const d = z(Hue.actions.addRoot(i));
        const u = n(s).pipe(J((() => Hue.actions.removeRoot(i))));
        return F(d, u, l, c);
    })));
};

const ppe = (e, t) => {
    if (!(e instanceof Mm)) {
        throw new Error("Expected the controller to be a PositionedModelOwnerController");
    }
    const o = H(gpe(e));
    const n = t.pipe(Q((() => H(hpe(e)))));
    return F(o, n);
};

function fpe(e, t) {
    return Hde(e.getOrderedVisualAndContainerControllers()).map(t);
}

function gpe(e) {
    return fpe(e, sue.actions.loadBirdModel);
}

function hpe(e) {
    return fpe(e, sue.actions.unloadBirdModel);
}

var bpe = "sas_components-Title-Title_title-container";

var vpe = "sas_components-Title-Title_title-container-flex";

var ype = "sas_components-Title-Title_title";

var xpe = "sas_components-Title-Title_help-content";

var Spe = "sas_components-Title-Title_help-content-header";

var wpe = "sas_components-Title-Title_help-content-text";

var Cpe = {
    titleContainer: bpe,
    titleContainerFlex: vpe,
    title: ype,
    helpContent: xpe,
    helpContentHeader: Spe,
    helpContentText: wpe
};

function Epe(e) {
    if (!e) {
        return "";
    }
    const t = e.match(/<body>(.*)<\/body>/s);
    if (!t?.[1]) {
        $n(false, "Encountered an unexpected content when parsing html string: " + e);
        return e;
    }
    return t[1];
}

const Ipe = document.createElement("div");

Ipe.style.fontFamily = "'AvenirNext', Arial, Helvetica, Verdana, 'Open Sans', sans-serif";

Ipe.style.visibility = "hidden";

Ipe.style.position = "absolute";

Ipe.style.lineHeight = "normal";

const _pe = document.createElement("div");

Ipe.appendChild(_pe);

function Dpe(e, t, o, n = {}) {
    _pe.innerHTML = e;
    Ipe.style.width = t + "px";
    Ipe.className = qie() || "";
    _pe.className = o || "";
    for (const [e, t] of Object.entries(n)) {
        _pe.style.setProperty(e, t ?? "");
    }
    document.body.appendChild(Ipe);
    const a = Ipe.getBoundingClientRect().height;
    document.body.removeChild(Ipe);
    return a;
}

function Lpe(e, t, o, n) {
    const a = [];
    if (!t || !o) {
        return a;
    }
    const r = t.getLayoutProxy();
    if (r) {
        const {measureHeight: t} = Tpe();
        a.push(lue(r, qc.HEIGHT_REQUEST).pipe(cue(r), te((a => {
            const s = n.value.ui.birdLayout.byId[e];
            const i = o.getTitleAsHTML();
            const l = a.getConstrainedSize();
            const c = s?.titlePadding;
            let d = t(i, l, Cpe.title, {
                "--title-font-size": "1.125rem",
                "--title-custom-padding": typeof c === "number" ? c + "px" : c
            });
            if (s) {
                if (s.constraints) {
                    d += s.constraints.additionalContentHeight || 0;
                }
                if (s.aboutInfoLayout) {
                    d += s.aboutInfoLayout.height || 0;
                }
                if (s.breadcrumbLayout) {
                    d += s.breadcrumbLayout.height || 0;
                }
                if (s.scrollbars && s.scrollbars.horizontal) {
                    d += Gde();
                }
            }
            const u = eue(r);
            u.setFooterHeight(d);
        })), oe()));
    }
    a.push(lue(o, Tp.DATACHANGE).pipe(Q((() => {
        const t = o.getTitleAsHTML();
        return H([ Pue.actions.set(e, Epe(t)), jde.actions.notifyInvalidateLayout() ]);
    }))));
    const s = Epe(o.getTitleAsHTML());
    a.push(z(Pue.actions.set(e, s)));
    return a;
}

function Tpe() {
    let e = null;
    const t = new Map;
    return {
        measureHeight(o, n, a, r) {
            let s = undefined;
            if (e !== o) {
                t.clear();
                e = o;
            }
            if (!o) {
                s = 0;
            } else {
                s = t.get(n);
                if (s === undefined) {
                    s = Dpe(Epe(o), n, a, r);
                    t.set(n, s);
                }
            }
            return s;
        }
    };
}

function Rpe(e) {
    if (!e) {
        return null;
    }
    if (e instanceof Rm) {
        const t = e.getVisualContainerElementController();
        if (!t) {
            return null;
        }
        const o = t.getModel();
        if (!o) {
            return null;
        }
        return o;
    } else if (e instanceof km) {
        const t = e.getVisualElementController();
        const o = t;
        if (typeof o.getModel === "function") {
            return o.getModel();
        }
    }
    return null;
}

function kpe(e) {
    if (!e) {
        return null;
    }
    const t = e.getBodyController();
    if (!t) {
        return null;
    }
    return t.getMediaContainerController();
}

function Ape(e, t) {
    if (!e) {
        return null;
    }
    const o = e.getOrderedVisualAndContainerControllers();
    if (!o) {
        return null;
    }
    for (const e of o) {
        const o = Rpe(e);
        if (o && o.getName() === t) {
            return e;
        }
        if (e instanceof Rm) {
            const o = Ape(e, t);
            if (o) {
                return o;
            }
        }
    }
    return null;
}

const Mpe = (e, t, o, n, a) => {
    if (!(e instanceof Rm)) {
        throw new Error("Expected the controller to be a ContainerController");
    }
    const r = a.getKey(e);
    const s = e.getModel();
    if (!s) {
        throw new Error("Expected the ContainerController to have a Model");
    }
    const i = [];
    let l;
    const c = s.getLayout();
    const d = e.getVisualContainerElementController();
    let u = V;
    const m = c instanceof vf || c instanceof ff && c.getOverflow() === Xc.STACK;
    if (m) {
        const t = [];
        const o = e.getOrderedVisualAndContainerControllers();
        if (o) {
            for (const e of o) {
                const o = Rpe(e);
                if (!o) {
                    continue;
                }
                t.push(o.getLabel() || "");
            }
        }
        let a = ql.BUTTON;
        let s = lc.CENTER;
        let i = kc.MIDDLE;
        let c = Lm.VERTICAL;
        if (d) {
            const e = d.getModel();
            if (e) {
                const t = e.getStackNavigationControl();
                if (t) {
                    c = t.getButtonDirection();
                    s = t.getHorizontalPosition();
                    i = t.getVerticalPosition();
                    a = t.getButtonType();
                }
            }
        }
        l = {
            create: () => kue.actions.add(r, {
                buttonType: a,
                horizontalPosition: s,
                verticalPosition: i,
                direction: Npe(c),
                labels: t,
                selectedIndex: e.getStackActiveVisualIndex()
            }),
            delete: () => kue.actions.delete(r)
        };
        u = n.pipe(J((e => {
            const t = e.birdElements.StackContainer[r];
            if (!t) {
                return undefined;
            }
            return t.selectedIndex;
        })), q(), te((t => {
            if (t !== undefined) {
                e.setStackActiveVisualIndex(t);
            }
        })), oe());
    } else {
        l = {
            create: () => vue.actions.add(r, {}),
            delete: () => vue.actions.delete(r)
        };
    }
    let p = V;
    if (d) {
        const r = a.getLoaderForVisualElementController(d);
        p = r(e, d, t, o, n, a, l).pipe(cue(d));
    } else {
        p = F(z(l.create()), z(jde.actions.set(r, a.getLayoutData(e))), t.pipe(J(l.delete)));
    }
    const f = ppe(e, t);
    const g = H(i);
    const h = F(f, p, g, u, ...Lpe(r, e, d, n));
    if (d) {
        return h.pipe(cue(d));
    }
    return h;
};

function Npe(e) {
    switch (e) {
      case Lm.VERTICAL:
        return "vertical";

      case Lm.HORIZONTAL:
      default:
        return "horizontal";
    }
}

const Ope = (e, t, o, n, a) => {
    const r = lue(e, Tp.DATACHANGE).pipe(J((() => Ppe(e))), J((e => fue.actions.setBasicData(a, e))));
    const s = o.pipe(iue(fue.actionTypes.openBreadcrumb), J((e => e.payload.data)));
    const i = n.pipe(J((e => e.breadcrumbs[a] || [])), q(), ne((e => F(s.pipe(ee(e), J((([e, t]) => {
        const o = t.find((({name: t}) => t === e.name));
        const n = o && o.items[e.index];
        return n && n.status !== "complete" ? [ e ] : [];
    }))), e.pipe(J((e => {
        const t = [];
        e.forEach((({name: e, items: o}) => {
            o.forEach(((o, n) => {
                if (o.status === "initial") {
                    t.push({
                        name: e,
                        index: n
                    });
                }
            }));
        }));
        return t;
    })), ae(0))))));
    const l = i.pipe(re((t => H(t).pipe(se((t => Vpe(e, t).pipe(J((e => (e || []).map((e => e && e.getDisplayString() || "")))), J((e => fue.actions.updateBreadcrumb(a, {
        target: t,
        labels: e
    }))))))))));
    const c = o.pipe(iue(fue.actionTypes.selectBreadcrumb), te((t => Fpe(e, t.payload.data))), oe());
    const d = o.pipe(iue(fue.actionTypes.selectBreadcrumbItem), Q((t => jpe(e, t.payload.data, n.value.breadcrumbs[a]))), oe());
    return F(r, l, c, d);
};

function Ppe(e) {
    const t = Hde(e.getAllDrillControllers());
    return t.map((e => {
        const t = e.getHierarchyName();
        if (!t) return null;
        return {
            name: t,
            label: Bpe(e),
            items: zpe(e)
        };
    })).filter((e => e !== null));
}

function Bpe(e) {
    const t = e.getLabel();
    return t ? {
        key: "Breadcrumb.all.fmt",
        args: {
            label: t
        }
    } : "";
}

function zpe(e) {
    const t = e.getConstantLevelValues();
    return (t || []).map((e => e || ""));
}

function Fpe(e, t) {
    const o = Upe(e, t.name);
    if (o) o.drillUp(t.index + 1);
}

function jpe(e, t, o) {
    const n = Upe(e, t.name);
    if (!n || !o) return V;
    const a = o.find((e => e.name === t.name));
    if (!a) return V;
    const r = a.items[t.index];
    if (r === undefined) return V;
    const s = r.values[t.valueIndex];
    return Vpe(e, t).pipe(cue(n), te((e => {
        const o = e.find((e => e !== null && e.getDisplayString() === s));
        if (o) {
            n.drillDownFromLevel(t.index, o);
        }
    })), oe());
}

function Vpe(e, t) {
    const o = Upe(e, t.name);
    const n = e.getResultControllers()?.[0];
    if (!o || !n) return V;
    const a = n.getDataSet();
    if (!a) return V;
    const r = a.getName();
    if (!r) return V;
    const s = Hpe(e).pipe(J((e => {
        if (e && e.navigationLevelIndex === t.index && e.hierarchyName === t.name) {
            return e.values;
        }
        return null;
    })), mue(), ie(), le(1));
    s.subscribe();
    e.retrieveUniqueValuesForLevel(t.name, r, t.index);
    return s;
}

function Hpe(e) {
    return lue(e, Zp.NAVIGATION_DATA_UPDATE).pipe(Q((e => {
        const t = e.getValueList();
        const o = e.getNavigationHierarchyName();
        const n = e.getNavigationLevelIndex();
        if (!t || !o) {
            return V;
        }
        return z({
            hierarchyName: o,
            navigationLevelIndex: n,
            values: t
        }).pipe(due(t));
    })));
}

function Upe(e, t) {
    const o = Hde(e.getAllDrillControllers());
    return o.find((e => e.getHierarchyName() === t)) || null;
}

Dr("gtl::FillPatternAttributes", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::AttributesModel" ], es, [ , {
    fillPattern: 4,
    fillPatternColor: 10,
    transparency: 5
}, , , {
    copyFromBundle: [ 0, 1 ],
    setStyle: [ 0, 1 ],
    setStyleElement: [ 0, 4 ],
    copyFrom: [ 0, 1 ],
    setStyleElementChain: [ 0, [ 4 ] ],
    asFillPatternAttributesInterface: [ 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::BarChartDisplay", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    fillPattern: 2,
    outline: 2,
    fill: 2,
    connect: 2
}, , , , {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    getValueFromString: [ 1, 7, 1 ],
    createSTANDARD: [ 1 ],
    createALL: [ 1 ],
    createNONE: [ 1 ]
}, , [ "_create" ] ]);

var Gpe = {
    HORIZONTAL: 0,
    VERTICAL: 1
};

var Kpe = Gpe;

Dr("gtl::AbstractBarChart", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::DataVisualization", "gtl::AbstractOverlay", "gtl::Overlay" ], es, [ , {
    barWidth: 5,
    groupOrder: 4,
    braceUpper: 1,
    isSingleResponse: 2,
    segmentLabelFormat: 7,
    includeMissingGroup: 2,
    intervalBarWidth: 1,
    fillEndAttributes: 1,
    fillPatternAttributes: 1,
    groupDisplay: 4,
    colorResponse: 1,
    intervalBarWidthType: 4,
    displayBaseline: 4,
    displayZeroLengthBar: 2,
    fillType: 4,
    baselineAttributes: 1,
    baselineIntercept: 6,
    colorModel: 1,
    group: 1,
    categorySortByResponse: 2,
    braceLower: 1,
    discreteOffset: 5,
    outlineAttributes: 1,
    orientation: 4,
    segmentLabelFitPolicy: 4,
    display: 1,
    segmentLabelAttributes: 1,
    connectAttributes: 1,
    index: 1,
    disableDataAnimationSubsetting: 2,
    target: 1,
    clusterBarWidth: 5,
    fillAttributes: 1,
    clusterWidth: 5,
    response: [ 1 ],
    category: 1,
    categorySortByRole: 1,
    braceAttributes: 1,
    group100: 4
}, , , {
    getResolvedDisplay: [ 1 ]
}, , ,  ]);

Dr("gtl::AbstractLayoutOverlayMapLayer", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , , , , {
    getRendererModel: [ 1 ],
    getOverlay: [ 1 ]
}, , ,  ]);

Dr("gtl::Region", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::DataVisualization" ], es, [ , , , , , , ,  ]);

var Wpe = Dr("gtl::BarChart", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::DataVisualization", "gtl::AbstractOverlay", "gtl::Overlay", "gtl::AbstractBarChart" ], es, [ , {
    statistic: 4,
    colorStatistic: 4,
    barLabel: 2,
    barLabelFormat: 7,
    barLabelAttributes: 1,
    segmentLabel: 2,
    barLabelFitPolicy: 4
}, , , {
    getColorStatisticAsStatisticType: [ 4 ],
    getStatisticAsStatisticType: [ 4 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var $pe = Wpe;

Dr("gtl::RelationalDataProvider", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::DataProvider" ], es, [ , {
    rowStates: 1,
    sortedIndicies: [ 3 ]
}, , , , , ,  ]);

var Ype = Dr("gtl::DataSetDataProvider", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::DataProvider", "gtl::RelationalDataProvider" ], es, [ , {
    dataSet: 1
}, , , {
    getName: [ 7 ]
}, {
    _create_v: [ 4 ],
    _create_o: [ 4, 1 ]
}, , [ "_create" ] ]);

var qpe = Ype;

Dr("gtl::ViewportOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    initialVAlign: 4,
    viewportLimits: 4,
    initialFitPolicy: 4,
    resetViewportForNewDataModel: 2,
    initialHAlign: 4
}, , , , {
    _create_v: [ 4 ],
    _create_b: [ 4, 2 ]
}, , [ "_create" ] ]);

Dr("gtl::NodeLinkDiagram", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::DataVisualization", "gtl::Region" ], es, [ , {
    linkTip: [ 1 ],
    nodeTip: [ 1 ],
    viewportOptions: 1
}, , , , , ,  ]);

var Xpe = Dr("gtl::KeyValueDisplay", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    outline: 2,
    stat: 2,
    categorylabel: 2,
    fill: 2,
    responselabel: 2,
    responsevalue: 2,
    categoryvalue: 2
}, , , , {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    getValueFromString: [ 1, 7, 1 ],
    createSTANDARD: [ 1 ],
    createALL: [ 1 ],
    createNONE: [ 1 ]
}, , [ "_create" ] ]);

var Zpe = Xpe;

var Jpe = {
    AUTO: 0,
    CATEGORYVALUE: 1,
    RESPONSEVALUE: 2
};

var Qpe = Jpe;

Dr("gtl::KeyValueResponseValueFormatOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    extractScaleType: 4,
    extractScale: 2
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var efe = Dr("gtl::KeyValue", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::DataVisualization", "gtl::Region" ], es, [ , {
    categorySelect: 4,
    outlineAttributes: 1,
    statistic: 4,
    categoryLabelAttributes: 1,
    hAlign: 4,
    responseLabelAttributes: 1,
    shape: 4,
    display: 1,
    keyAttributes: 1,
    categoryLabel: 7,
    responseValueFormatOptions: 1,
    vAlign: 4,
    responseLabel: 7,
    categoryValueAttributes: 1,
    fillAttributes: 1,
    statisticLabelAttributes: 1,
    response: 1,
    justify: 4,
    categorySelectAttributes: 1,
    spaceFill: 2,
    category: 1,
    key: 4,
    responseValueAttributes: 1
}, , , {
    getResolvedDisplay: [ 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var tfe = efe;

Dr("gtl::Overview", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel" ], es, [ , {
    border: 2,
    pad: 1,
    hAlign: 4,
    visible: 2,
    filterAttributes: 1,
    width: 1,
    borderAttributes: 1,
    backgroundAttributes: 1,
    vAlign: 4,
    viewportBorderAttributes: 1,
    height: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

Dr("gtl::LayoutOverlayMapViewportOptions", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    yMin: 6,
    yMax: 6,
    xMax: 6,
    xMin: 6
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var ofe = Dr("gtl::LayoutOverlayMap", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::Layout", "gtl::BaseLayoutOverlay" ], es, [ , {
    overview: 1,
    convertPinState: 2,
    lockNavigation: 2,
    content: [ 1 ],
    clip: [ 1 ],
    viewportOptions: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var nfe = ofe;

var afe = Dr("gtl::LayoutRegion", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::Layout" ], es, [ , {
    overview: 1,
    region: 1
}, , , , {
    _create: [ 4 ]
}, ,  ]);

var rfe = afe;

Dr("gtl::SankeyDiagramDisplay", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel" ], es, [ , {
    volumeLabels: 2,
    outline: 2,
    volumeBars: 2,
    volumeBarFillPattern: 2
}, , , {
    adoptOverrides: [ 0, 1 ]
}, {
    _create_v: [ 4 ],
    _create_s: [ 4, 7 ],
    getValueFromString: [ 1, 7, 1 ],
    createSTANDARD: [ 1 ],
    createALL: [ 1 ],
    createNONE: [ 1 ]
}, , [ "_create" ] ]);

var sfe = Dr("gtl::SankeyDiagram", [ "commons::PropertyOwner", "commons::BaseModel", "gtl::GTLModel", "gtl::RendererModel", "gtl::DataRendererModel", "gtl::DataVisualization", "gtl::Region", "gtl::NodeLinkDiagram" ], es, [ , {
    toId: 1,
    nodeSecondaryDetails: [ 1 ],
    volumeLabelType: 4,
    nodeSecondaryDetailsAttributes: 1,
    type: 1,
    nodeLabelAttributes: 1,
    linkWidthResponse: 1,
    nodeDetailsAttributes: 1,
    linkFillPatternAttributes: 1,
    volumeLineAttributes: 1,
    direction: 4,
    nodeDetails: [ 1 ],
    linkAlignment: 4,
    display: 1,
    nodeType: 1,
    fromId: 1,
    nodeVolumeLabelsAttributes: 1,
    volumeBarType: 4,
    linkId: 1,
    nodeInputLabel: 1,
    nodeOutlineAttributes: 1,
    linkGroup: 1,
    selectionGroup: 1,
    nodeOutputLabel: 1,
    nodeId: 1,
    nodeLabel: 1,
    linkFillAttributes: 1
}, , , {
    getResolvedDisplay: [ 1 ]
}, {
    _create: [ 4 ]
}, ,  ]);

var ife = sfe;

function lfe() {
    return !!window.SASGraphicsAccelerator_attendance;
}

function cfe(e) {
    if (!e) {
        return null;
    }
    var t = null;
    var o = e.getDataSet();
    if (o) {
        var n = o.getNumberOfRows();
        var a = o.getNumberOfColumns();
        if (a > 0 && n > 0) {
            var r = o.getColumns();
            if (!r) {
                return null;
            }
            t = '<DataModel><IQData type="2DEmbedded" name="' + o.getName() + '"><EmbeddedData><Variables>';
            for (var s = 0, i = r; s < i.length; s++) {
                var l = i[s];
                if (!l) {
                    continue;
                }
                var c = void 0;
                if (l.isNumber()) {
                    c = "Number";
                } else if (l.isString()) {
                    c = "String";
                } else if (l.isDateTime()) {
                    c = "DateTime";
                }
                var d = l.getFormatName();
                var u = "";
                if (d) {
                    u = ' SASFormat="' + d + '"';
                }
                t += '<Variable name="' + l.getName() + '" label="' + l.getLabel() + '" type="' + String(c) + '" valuesCount="' + String(n) + '"' + u + "/>";
            }
            t += '</Variables><ValuesList valuesCount="' + String(n) + '">';
            for (var m = 0; m < n; m++) {
                for (var p = 0, f = r; p < f.length; p++) {
                    var l = f[p];
                    if (!l) {
                        continue;
                    }
                    var g = l.getDataValueAtIndex(m, false);
                    if (!g) {
                        continue;
                    }
                    var h = "";
                    var b = "";
                    if (g.isMissing()) {
                        if (g.isString()) {
                            b = ' M=" "';
                        } else {
                            b = ' M="."';
                        }
                    } else if (g.isString()) {
                        h = g.getFormattedValue();
                    } else {
                        h = String(g.getNumericValue());
                        b = ' F="' + g.getFormattedValue() + '"';
                    }
                    t += "<V" + b + ">" + h + "</V>";
                }
            }
            t += "</ValuesList></EmbeddedData></IQData></DataModel>";
        }
    }
    return t;
}

function dfe(e) {
    if (!e) {
        return null;
    }
    var t = e.getAllDataProviders();
    if (!t) {
        return null;
    }
    var o = "";
    var n = [];
    var a = function(e) {
        var a = t[e];
        if (a instanceof qpe) {
            var r = a.getDataSet();
            if (r && !n.find((function(e) {
                return Ka.equals(e, r);
            }))) {
                var s = cfe(a);
                o += s;
                n.push(r);
            }
        }
    };
    for (var r = 0; r < t.length; r++) {
        a(r);
    }
    if (!o) {
        return null;
    }
    var s = new Ic;
    var i = s.serialize(e, 0, Ec.XML);
    if (!i) {
        return null;
    }
    return '<SASReport version="1.2"><Data version="9.4m4">' + o + "</Data><View>" + i + "</View></SASReport>";
}

function ufe(e, t, o) {
    var n = dfe(e);
    if (n) {
        document.dispatchEvent(new CustomEvent("SASGraphicsAccelerator-notify", {
            detail: {
                title: t,
                description: o,
                report: n
            }
        }));
    }
}

var mfe = Object.freeze({
    __proto__: null,
    getAccelleratorContent: dfe,
    getDataModelString: cfe,
    hasAccelerator: lfe,
    notifyAccelerator: ufe
});

var pfe = mfe;

const ffe = {};

function gfe(e, t) {
    return e.ui.busy[t];
}

function hfe(e, t) {
    return e.ui.selectionDisabled[t];
}

function bfe(e, t) {
    return e.ui.birdLayout.byId[t] || ffe;
}

function vfe(e, t) {
    var o;
    return (o = e.ui.birdLayout.byId[t]) === null || o === void 0 ? void 0 : o.childKeys;
}

function yfe(e, t) {
    return e.styles[t];
}

function xfe(e, t) {
    return e.ui.message[t];
}

function Sfe(e, t) {
    return e.aboutInfo[t];
}

function wfe(e, t) {
    return e.autoInteractions[t];
}

function Cfe(e, t) {
    return e.titles[t];
}

function Efe(e) {
    return e.birdElements || ffe;
}

function Ife(e, t) {
    return e.breadcrumbs[t] || [];
}

function _fe(e, t) {
    return e.birdElements.Text[t] || ffe;
}

function Dfe(e, t) {
    return e.birdElements.Slider[t] || ffe;
}

function Lfe(e, t) {
    return e.birdElements.ButtonBar[t] || ffe;
}

function Tfe(e, t) {
    return e.birdElements.Image[t] || ffe;
}

function Rfe(e, t) {
    return e.birdElements.TextField[t] || ffe;
}

function kfe(e, t) {
    return e.birdElements.WebContent[t] || ffe;
}

function Afe(e, t) {
    return e.birdElements.JobContent[t] || ffe;
}

function Mfe(e, t) {
    return e.birdElements.StackContainer[t] || ffe;
}

function Nfe(e, t) {
    return e.birdElements.PromptContainer[t] || ffe;
}

function Ofe(e, t) {
    return e.birdElements.ComboBox[t] || ffe;
}

function Pfe(e, t) {
    return e.ui.warning[t] || ffe;
}

function Bfe(e, t) {
    return e.birdElements.RadioList[t] || ffe;
}

function zfe(e, t) {
    return e.ui.status[t];
}

function Ffe(e, t) {
    return e.birdElements.CheckboxList[t] || ffe;
}

function jfe(e, t) {
    return e.birdElements.DataVisualizations[t] || ffe;
}

function Vfe(e, t) {
    return e.birdElements.InfoBar[t] || ffe;
}

function Hfe(e, t) {
    return e.ui.dragMode[t];
}

function Ufe(e, t) {
    return e.ui.zoom[t];
}

function Gfe(e, t) {
    return e.accessibilityLabel[t];
}

function Kfe(e, t) {
    return e.ui.overview[t];
}

function Wfe(e, t) {
    return e.ui.layerVisibility[t];
}

function $fe(e, t) {
    return e.ui.maximize[t];
}

function Yfe(e, t) {
    return e.ui.promptHeader[t];
}

function qfe(e, t) {
    return e.ui.elementDecorator[t];
}

function Xfe(e, t) {
    return e.ui.objectSearch[t];
}

function Zfe(e, t) {
    var o;
    switch ((o = e.ui.promptHeader[t]) === null || o === void 0 ? void 0 : o.location) {
      case "bottom":
        return "column-reverse";

      case "left":
        return "row";

      case "right":
        return "row-reverse";
    }
    return "column";
}

let Jfe = function(e) {
    e["SORT"] = "sort";
    e["EXPLAIN"] = "explain";
    e["MAXIMIZE"] = "maximize";
    e["MANAGECOLUMNS"] = "manageColumns";
    return e;
}({});

function Qfe(e, t, o, n, a, r) {
    if (!t || t instanceof km && t.getCompositeParent() !== null || n.value.bird.name) {
        return V;
    }
    const s = Hde(o.getSupplementalVisualElementControllers());
    const i = [];
    const l = [];
    for (const e of s) {
        i.push(sue.actions.loadBirdModel(e));
        l.push(sue.actions.unloadBirdModel(e));
    }
    const c = n.pipe(J((t => t.bird.maximizedVisual === e)), q(), ce());
    const d = c.pipe($((e => e)));
    const u = c.pipe($((e => !e)));
    return F(H(i), a.pipe(de(H(l))), z(Bme.actions.set(e, {
        isMaximized: false,
        preferOverflowMenu: r?.preferOverflowMenu ?? false,
        supplementalKeys: Hde(s.map((e => e.getVisualElementName() ?? null)))
    })), c.pipe(J((t => Bme.actions.update(e, {
        isMaximized: t
    })))), n.pipe(J((e => e.ui.reportContextMenu.target?.id)), q(), $((t => !!t && (t === e || bfe(n.value, t).compositeParentKey === e))), J((() => {
        const t = $fe(n.value, e);
        return yme.actions.setObjectItem(Jfe.MAXIMIZE, t ? {
            text: t.isMaximized ? {
                key: "ExpandControl.button.restore.txt"
            } : {
                key: "ExpandControl.button.expand.txt"
            },
            action: Fue.actions.toggleMaximizedVisual(e)
        } : undefined);
    }))), d.pipe(se((() => {
        const n = [];
        const r = [];
        const s = Hde(o.getSupplementalVisualElementControllers());
        const i = {};
        for (const e of s) {
            const t = e.getVisualElementName();
            if (!t || !(e instanceof xf)) {
                continue;
            }
            i[t] = e.getPresentationLabel() ?? undefined;
        }
        n.push(Bme.actions.update(e, {
            supplementalVisualLabels: i
        }));
        if (t instanceof Mm) {
            const o = "media-maximized";
            n.push(Bme.actions.update(e, {
                mediaKey: o
            }), sue.actions.addLayoutRoot(t, o), jde.actions.setChildKeys(o, [ e ]));
            r.push(Bme.actions.update(e, {
                mediaKey: undefined
            }), sue.actions.removeLayoutRoot(t), jde.actions.set(o, {}));
        }
        return U(H(n).pipe(ue((() => t.setMaximized(true)))), F(u, a).pipe(Y(1), oe()), H(r).pipe(ue((() => t.setMaximized(false)))));
    }))));
}

function ege(e) {
    const t = e.getPickedValue() || "";
    return {
        key: "VisualElementActionUtil.drillLabel.fmt",
        args: {
            value: t
        }
    };
}

function tge(e) {
    if (e instanceof xp) {
        const t = e.getLabel() || "";
        const o = e.getType();
        if (o === vp.SECTION) {
            return {
                key: "DrillableTooltip.section.link.fmt",
                args: {
                    page: t
                }
            };
        } else if (o === vp.REPORT) {
            return {
                key: "DrillableTooltip.report.link.fmt",
                args: {
                    report: t
                }
            };
        }
        return t;
    }
    return "";
}

function oge(e) {
    if (e instanceof xp) {
        const t = e.getType();
        if (t === vp.SECTION) {
            return bR;
        } else if (t === vp.REPORT) {
            return BT;
        } else if (t === vp.URL) {
            return GT;
        }
    }
    return null;
}

function nge(e, t, o) {
    const n = new A;
    const a = new A;
    const r = new A;
    return {
        birdActions$: F(n, a, r),
        birdActionsHandler(s, i, l) {
            const c = s ? s.getTooltipLinksController() : null;
            const d = c ? Hde(c.getActions()) : [];
            const u = d.map(((e, t) => ({
                action: e,
                index: t
            }))).filter((({action: e}) => {
                const t = e instanceof xp && e.getType() === vp.REPORT;
                return !t;
            }));
            const m = s ? Hde(s.getTooltipDrillControllers()).filter((e => !e.canExpandAll() && !e.canCollapseAll())) : [];
            const p = m.filter((e => e.canDrillDown()));
            const f = p.map((e => ({
                text: ege(e),
                icon: LT
            })));
            const g = u.map((({action: e}) => ({
                text: tge(e),
                icon: oge(e)
            })));
            const h = f.concat(g);
            const b = [ ...p.map((e => () => {
                e.drillDown();
            })), ...u.map((({index: t}) => () => {
                if (o.value.bird.maximizedVisual) {
                    n.next(hme.actions.set(e, {
                        text: {
                            key: "ReportVisualContainer.sectionLink.notAllowed.maximize.txt"
                        }
                    }));
                } else {
                    c.performAction(t);
                }
            })) ];
            if (h.length === 0 && m.length > 0) {
                n.next(hme.actions.set(e, {
                    text: {
                        key: m.length === 1 ? "VisualElementActionUtil.hierarchyExhausted.txt" : "VisualElementActionUtil.hierarchiesExhausted.txt"
                    }
                }));
                return true;
            } else if (p.length === 1 && u.length === 0) {
                p[0].drillDown();
                return true;
            } else if (h.length > 1) {
                const o = (e || "Visual Element") + " Bird Action";
                const n = {
                    x: i,
                    y: l
                };
                const s = {
                    key: "VisualElementActionUtil.actionMenuLabel.txt"
                };
                a.next(Eme.actions.open({
                    context: o,
                    position: n,
                    title: s,
                    items: h
                }));
                const d = t.pipe(iue(Eme.actionTypes.CloseBirdActionMenu));
                const u = Hde([ c, ...m ]);
                t.pipe(iue(Eme.actionTypes.SelectBirdActionMenuOption), due(u), $((e => e.payload.context === o)), Y(1), W(d), te((e => {
                    const t = e.payload.index;
                    if (t >= 0 && t < b.length) {
                        b[t]();
                    }
                    r.next(Eme.actions.close());
                }))).subscribe();
                return true;
            } else if (b.length === 1) {
                b[0]();
                return true;
            }
            return false;
        }
    };
}

const age = (e, t, o, n, a, r, s) => {
    const i = r.getKey(t);
    s = s ?? {
        create: () => Iue.actions.add(i, {}),
        delete: () => Iue.actions.delete(i)
    };
    const l = Lpe(i, e, t, a);
    l.push(lue(t, Vm.BUSY).pipe(J((() => Uue.actions.setBusy(i, {
        isBusy: true
    })))));
    l.push(lue(t, Vm.TRANSITION_STARTED).pipe(J((() => Uue.actions.hideIndicator(i)))));
    l.push(lue(t, Vm.READY).pipe(J((() => Uue.actions.setBusy(i, {
        isBusy: false
    })))));
    l.push(lue(t, Tp.DATACHANGE).pipe(me(null), se((() => {
        const e = [];
        const o = t.getVisualElementModel();
        const n = o?.getSelectionDisabled() ?? false;
        e.push(Lme.actions.set(i, n));
        const a = rge(t);
        e.push(Sme.actions.setValue(i, a));
        const r = t.getAccessibilityLabel();
        e.push(Ome.actions.set(i, r ?? undefined));
        return H(e);
    }))));
    const c = jde.actions.update(i, e ? r.getLayoutData(e) : {});
    const d = Uue.actions.setBusy(i, {
        isBusy: t.isBusy()
    });
    if (s.delete) {
        l.push(o.pipe(J(s.delete)));
    }
    return F(H([ c, s.create(), d ]), ...l);
};

function rge(e) {
    const t = e.getAboutInfo();
    if (!t) {
        return;
    }
    const o = t.getLabel();
    const n = Hde(t.getMessages());
    if (!o || !n.length) {
        return;
    }
    return {
        label: o,
        messages: n
    };
}

const sge = {
    Sort: "vasdk/sort/sort",
    RemoveItem: "vasdk/sort/removeItem",
    RemoveLevel: "vasdk/sort/removeLevel"
};

const ige = {
    actions: {
        sort: (e, t) => rD(sge.Sort, {
            id: e,
            data: t
        }),
        removeItem: (e, t) => rD(sge.RemoveItem, {
            id: e,
            index: t
        }),
        removeLevel: e => rD(sge.RemoveLevel, {
            id: e
        })
    },
    types: sge
};

function lge(e, t, o) {
    const n = t.getSortDirection();
    const a = n === oc.ASCENDING ? oc.DESCENDING : oc.ASCENDING;
    cge(e, t, a, o);
}

function cge(e, t, o, n) {
    t.setSortDirection(o);
    t.setPrimary(n);
    e.sort(t);
}

function dge(e, t, o, n, a) {
    return a.pipe(J((e => e.ui.reportContextMenu)), q(((e, t) => e.target === t.target && e.graphPosition === t.graphPosition)), re((({target: a, graphPosition: r}) => {
        if (a?.id !== o || e.isBusy()) {
            return V;
        }
        const s = t && r ? t.getPickResults(r.localX, r.localY, false, false) : null;
        const i = e.getTooltipSortControllerWithAllSortItems(s);
        if (!i) {
            return V;
        }
        return uge(i, o, n);
    })));
}

function uge(e, t, o) {
    const n = Hde(e.getSortItems());
    const a = F(o.pipe(iue(ige.types.Sort), te((t => {
        const {direction: o, isPrimary: a, index: r} = t.payload.data;
        cge(e, n[r], o, a);
    }))), o.pipe(iue(ige.types.RemoveItem), te((t => {
        const o = n[t.payload.index];
        e.removeSort(o);
    }))), o.pipe(iue(ige.types.RemoveLevel), te((() => {
        e.removeSortLevel();
    })))).pipe(oe());
    const r = yme.actions.setObjectItem(Jfe.SORT, mge(t, e) ?? undefined);
    return F(z(r), a).pipe(cue(e), due(n));
}

function mge(e, t) {
    const o = Hde(t.getSortItems());
    if (!o.length) {
        return null;
    }
    const n = o.length === 1 ? fge(e, t, o[0]) : pge(e, t, o);
    return {
        subSections: n,
        text: {
            key: "ContextMenu.sort.txt"
        }
    };
}

function pge(e, t, o) {
    const n = gge(e, o);
    if (t.canRemoveSortLevel()) {
        n.push({
            items: [ {
                text: {
                    key: "ContextMenu.removeSortLevel.txt"
                },
                checked: false,
                action: ige.actions.removeLevel(e)
            } ]
        });
    }
    return n;
}

function fge(e, t, o) {
    const n = gge(e, [ o ]);
    const a = o.getLabel() || "";
    const r = o.getSortDirection();
    const s = 0;
    if (!o.isPrimary()) {
        n.push({
            items: [ {
                text: {
                    key: "ContextMenu.sortAddAscending.fmt",
                    args: {
                        role: a
                    }
                },
                checked: r === oc.ASCENDING,
                action: ige.actions.sort(e, {
                    direction: oc.ASCENDING,
                    isPrimary: false,
                    index: s
                })
            }, {
                text: {
                    key: "ContextMenu.sortAddDescending.fmt",
                    args: {
                        role: a
                    }
                },
                checked: r === oc.DESCENDING,
                action: ige.actions.sort(e, {
                    direction: oc.DESCENDING,
                    isPrimary: false,
                    index: s
                })
            } ]
        });
    }
    if (t.canRemoveSort(o)) {
        n.push({
            items: [ {
                text: {
                    key: "ContextMenu.removeSortItem.fmt",
                    args: {
                        role: a
                    }
                },
                checked: false,
                action: ige.actions.removeItem(e, s)
            } ]
        });
    }
    return n;
}

function gge(e, t) {
    return t.map(((t, o) => {
        const n = t.getLabel() || "";
        const a = t.getSortDirection();
        return {
            items: [ {
                text: {
                    key: "ContextMenu.sortAscending.fmt",
                    args: {
                        role: n
                    }
                },
                checked: a === oc.ASCENDING,
                action: ige.actions.sort(e, {
                    direction: oc.ASCENDING,
                    isPrimary: true,
                    index: o
                })
            }, {
                text: {
                    key: "ContextMenu.sortDescending.fmt",
                    args: {
                        role: n
                    }
                },
                checked: a === oc.DESCENDING,
                action: ige.actions.sort(e, {
                    direction: oc.DESCENDING,
                    isPrimary: true,
                    index: o
                })
            } ]
        };
    }));
}

function hge(e, t, o, n, a) {
    if (!(o instanceof Ip) || o instanceof lf || !t) {
        return V;
    }
    const r = n.pipe(J((t => {
        const o = t.ui.reportContextMenu.target?.id;
        return !!o && (o === e || bfe(n.value, o).compositeParentKey === e);
    })), q(), ce());
    const s = new R(undefined);
    r.pipe(W(a), pe(false)).subscribe((e => {
        const t = e ? Hde(o.getSelectedDataItemsForExplainText()) : undefined;
        s.value?.forEach((e => e.release()));
        s.next(t);
        s.value?.forEach((e => e.retain()));
    }));
    const i = r.pipe($((e => e)), J((() => {
        const e = Hde(s.value?.map((e => {
            const t = e.getName();
            const n = o.getDataItemInfo(e)?.getLabel();
            if (!t || !n) {
                return null;
            }
            return {
                text: n,
                action: Fme.actions.set({
                    dataItem: {
                        name: t,
                        label: n
                    }
                })
            };
        })));
        return yme.actions.setObjectItem(Jfe.EXPLAIN, e.length ? {
            text: {
                key: "ContextMenu.explain.txt"
            },
            subSections: [ {
                items: e
            } ]
        } : undefined);
    })));
    const l = n.pipe(J((e => e.ui.explanation.dataItem)), q(), re((e => {
        const t = s.value;
        if (!e || !t) {
            return V;
        }
        const n = new G;
        n.next(Fme.actions.reset());
        const a = t.find((t => t.getName() === e.name));
        const r = a && o.getExplainTextForDataItem(a);
        if (r) {
            new hm(r).fulfilled((e => {
                const t = e.getRequestedResource();
                const o = t instanceof Op ? t.getContent() : null;
                if (o) {
                    n.next(Fme.actions.update({
                        content: o
                    }));
                }
            })).warning((e => {
                const t = e.getWarning()?.getMessage();
                if (t) {
                    n.next(Fme.actions.update({
                        warning: t
                    }));
                }
            })).always((() => {
                n.complete();
            }));
        } else {
            n.complete();
        }
        return n;
    })));
    return F(i, l);
}

const bge = (e, t, o, n, a, r, s, i) => {
    if (!(t instanceof Ip)) {
        throw new Error("Expected the controller to be a DataVisualElementController");
    }
    const l = r.getKey(t);
    const c = dge(t, i ?? null, l, n, a);
    const d = hge(l, e, t, a, o);
    const u = age(e, t, o, n, a, r, s);
    return F(u, c, d);
};

function vge(e) {
    const t = e.getModel()?.getPromptDefinition()?.getConstraint();
    if (t) {
        return t;
    }
    const o = e.getModel()?.getSpecialization();
    if (o instanceof hf || o instanceof Mp || o instanceof Ef) {
        return o.getConstraint();
    }
    return null;
}

function yge(e) {
    return e.isRequired();
}

function xge(e) {
    if (Sge(e)) {
        return false;
    }
    const t = e.getColumn();
    if (t) {
        return t.isNumber();
    }
    const o = vge(e);
    return o instanceof Qp || o instanceof tf;
}

function Sge(e) {
    const t = e.getColumn();
    if (t) {
        return t.isDateTime();
    }
    const o = vge(e);
    if (o instanceof kp) {
        return true;
    }
    const n = e.getPromptDefinitionWithCurrentValueSource();
    const a = n?.getDataType() ?? vm.NONE;
    return a === vm.DATE || a === vm.DATETIME;
}

function wge(e) {
    const t = e.getBIRDModel();
    const o = t instanceof rf ? t : undefined;
    const n = {
        label: e.getLabel() || "",
        name: o?.getLabel() || "",
        values: []
    };
    const a = e.getColumn();
    const r = e.getUniqueRowIndicies();
    if (!a || !r) {
        return n;
    }
    n.valueColumnLabel = a.getLabel() ?? undefined;
    n.values = r.map((e => {
        const t = a.getDataValueAtIndex(e, true);
        if (!t) {
            return "";
        }
        if (t.isMissing()) {
            return lf.getMissingDisplayString() || "";
        }
        return t.getFormattedValue() || t.getStringValue() || "";
    }));
    const s = e.getMeasureColumn();
    if (s) {
        n.measureColumnLabel = s.getLabel() ?? undefined;
        n.measureValues = r.map((t => e.getFormattedMeasure(t) || ""));
    }
    return n;
}

function Cge(e) {
    const t = e.getStyleChain();
    if (!t) return {};
    const o = Ege(t);
    const n = {};
    if (t.hasStyleAttributeValueAboveBase(_c.SELECTED_BACKGROUND_COLOR)) n.bg = Hu(t, _c.SELECTED_BACKGROUND_COLOR, 1);
    if (t.hasStyleAttributeValueAboveBase(_c.SELECTED_COLOR)) n.fg = Hu(t, _c.SELECTED_COLOR, 1);
    return {
        ...o,
        selected: n
    };
}

function Ege(e) {
    const t = $u(e);
    if (!t) {
        return;
    }
    const o = {};
    if (t["font-family"]) {
        o.fontFamily = t["font-family"];
    }
    if (t["font-size"]) {
        o.fontSize = t["font-size"];
    }
    if (t["font-style"]) {
        o.fontStyle = t["font-style"];
    }
    if (t["font-weight"]) {
        o.fontWeight = t["font-weight"];
    }
    if (t["text-decoration"]) {
        o.textDecoration = t["text-decoration"];
    }
    const n = {};
    if (t["background-color"]) {
        n.bg = t["background-color"];
    }
    if (t["color"]) {
        n.fg = t["color"];
    }
    return {
        font: o,
        normal: n
    };
}

const Ige = (e, t, o, n, a, r, s, i) => {
    if (!(t instanceof Ip)) {
        throw new Error("Expected the controller to be a DataVisualElementController");
    }
    if (!i?.contentId$) {
        throw new Error("contentId$ required for loadDataVisualElementController");
    }
    const {visualizationManager: l = new lm, contentId$: c} = i;
    l.setBaseView(t.getView());
    const d = t.getAccessibilityLabel();
    if (d) {
        l.setCanvasRole("img");
        l.setCanvasAriaLabel(d);
    }
    const u = r.getKey(t);
    const m = [];
    const p = t.getTipStyleChain();
    if (p) {
        const e = $u(p, true) || {};
        if (p.hasStyleAttributeValue(_c.FILL_COLOR)) {
            e["background-color"] = Uu(p, _c.FILL_COLOR, 1, true);
        }
        l.setCustomTooltipStyles(e);
    }
    const {birdActions$: f, birdActionsHandler: g} = nge(u, n, a);
    l.addGestureOverride("doubleClick", (e => {
        if (t.isBusy() || !e.sourceEvent) {
            return false;
        }
        const o = e.sourceEvent.x;
        const n = e.sourceEvent.y;
        const a = l.getPickResults(o, n, true, false);
        const r = t.getTooltipEventForPickResults(a);
        if (r) {
            return g(r, o, n);
        }
    }));
    l.setAccessibilityActionCallback((e => {
        if (t.isBusy()) {
            return;
        }
        const o = e.getPickResult();
        if (!o) {
            return;
        }
        const n = t.getTooltipEventForPickResults([ o ]);
        if (!n) {
            return;
        }
        const a = n.getLocationWithinSection();
        return g(n, a[0], a[1]);
    }));
    let h = 100;
    if (t.getVisualElementTypeInfo()?.getGraphDescription() === Im.KEY_VALUE) {
        h = 50;
    }
    if (!e) {
        h = 0;
    }
    m.push(Vde(u, {
        minHeight: h,
        minWidth: h
    }));
    const b = t.getElementContainerStyleChain();
    if (b) {
        m.push(pue.actions.set(u, Ege(b)));
    }
    const v = c.pipe(te((e => l.setContainerId(e))), oe()) ?? V;
    const y = a.pipe(J((e => e.bird.restrictViewportGestures ?? !!e.bird.viewSetReport)), q(), te((e => {
        const o = !!i.enableScrollOverlay && e && t.isZoomOverlaySupported();
        l.setRestrictViewportGestures(o);
        if (o) {
            l.setZoomOverlayStylesFromStyle(t.getStyle());
        }
    })), oe());
    const x = bge(e, t, o, n, a, r, s, l).pipe(ue((() => {
        l.destroy();
    })));
    return F(f, x, v, y, H(m));
};

const _ge = (e, t, o, n, a, r, s, i) => {
    if (!(t instanceof Sp)) {
        throw new Error("Expected the controller to be a GraphElementController");
    }
    const l = r.getKey(t);
    const c = a.pipe(J((e => e.birdElements.DataVisualizations[l])), $((e => e !== undefined && e.contentId !== undefined)), q(), J((e => e.contentId)));
    t.setCategoryLabelDrillEnabled(true);
    const d = e instanceof km && e.getCompositeParent() !== null;
    const u = pfe.hasAccelerator() && !d;
    const m = Ige(e, t, o, n, a, r, {
        create: () => Lue.actions.add(l, {
            acceleratorEnabled: u
        }),
        delete: () => Lue.actions.delete(l)
    }, {
        contentId$: c,
        visualizationManager: i,
        enableScrollOverlay: true
    });
    const p = Ope(t, o, n, a, l);
    const f = n.pipe(iue(Lue.actionTypes.openGraphAccelerator), te((() => {
        pfe.notifyAccelerator(t.getGraphModel(), t.getAccessibilityLabel() ?? "", "");
    })), oe());
    let g;
    {
        if (t.getAvailableDragModes()?.length) {
            g = z(null);
        } else if (t instanceof wp) {
            g = t.hasOperations() ? z(null) : lue(t, Ys.CONTROLLER_EVENT_TYPE);
        } else {
            const e = t.getGraphModel();
            g = e ? lue(e, Ys.CONTROLLER_EVENT_TYPE) : V;
        }
        g = g.pipe(Y(1));
    }
    const h = g.pipe(Q((() => {
        const e = t.getGraphModel();
        const o = e?.getLayout();
        const a = o instanceof rfe ? o.getRegion() : null;
        const r = a instanceof ife;
        const s = t instanceof wp;
        if (!s && !r) {
            return V;
        }
        const i = t.getAvailableDragModes()?.sort() ?? [];
        const c = t.getDragMode();
        return F(z(Nme.actions.init(l, {
            currentMode: c,
            availableModes: i
        })), n.pipe(iue(Nme.actionTypes.setCurrentMode), te((e => {
            t.setDragMode(e.payload.data);
        })), oe()));
    })));
    const b = g.pipe(Q((() => {
        if (!t.isOverviewSupported()) {
            return V;
        }
        const e = t.isOverviewOn();
        return F(z(Pme.actions.set(l, {
            isOverviewOn: e
        })), n.pipe(iue(Pme.actionTypes.toggleOverview), te((() => {
            t.toggleOverview();
        })), J((() => Pme.actions.setIsOverviewOn(l, t.isOverviewOn())))));
    })));
    const v = Qfe(l, e, t, a, o, {
        preferOverflowMenu: t.getVisualElementTypeInfo()?.getGraphDescription() === Im.KEY_VALUE
    });
    return F(m, p, f, h, b, v);
};

const Dge = (e, t, o, n, a) => {
    if (!(e instanceof Nm)) {
        throw new Error("Expected the controller to be a MediaContainerController");
    }
    const r = Ape(e, n.value.bird.name);
    const s = r ? F(z(sue.actions.loadBirdModel(r)), t.pipe(Q((() => z(sue.actions.unloadBirdModel(r)))))) : ppe(e, t);
    const i = a.getKey(e);
    const l = H([ jde.actions.set(i, a.getLayoutData(e, r)), vue.actions.add(i, {}) ]);
    return F(s, l, t.pipe(J((() => vue.actions.delete(i)))));
};

function Lge(e) {
    return e === null || e === undefined ? [] : [ e ];
}

class Tge {
    constructor(e, t) {
        this._controller = void 0;
        this._id = void 0;
        this._ignoreValueChange = false;
        this._controller = e;
        this._id = t;
    }
    createElement() {
        const e = this._controller.getCurrentValuesInTermsOfOrderedUniqueRowIndices();
        const t = wge(this._controller);
        const o = yge(this._controller);
        const n = e ? e[0] : null;
        return yue.actions.add(this._id, {
            required: o,
            label: t.label,
            name: t.name,
            valueColumnLabel: t.valueColumnLabel,
            measureColumnLabel: t.measureColumnLabel,
            values: t.values,
            measureValues: t.measureValues,
            selectedIndex: n
        });
    }
    deleteElement() {
        return yue.actions.delete(this._id);
    }
    handleDataChange(e) {
        return e.pipe(J((() => {
            const e = wge(this._controller);
            const t = this._controller.getCurrentValuesInTermsOfOrderedUniqueRowIndices();
            const o = t ? t[0] : null;
            return yue.actions.update(this._id, {
                valueColumnLabel: e.valueColumnLabel,
                measureColumnLabel: e.measureColumnLabel,
                values: e.values,
                measureValues: e.measureValues,
                selectedIndex: o
            });
        })));
    }
    handleValueChanged(e) {
        return e.pipe(Q((() => {
            if (this._ignoreValueChange) {
                return V;
            }
            const e = this._controller.getCurrentValuesInTermsOfOrderedUniqueRowIndices();
            const t = e ? e[0] : null;
            return z(yue.actions.update(this._id, {
                selectedIndex: t
            }));
        })));
    }
    handleActions(e, t) {
        return t.pipe(J((e => e.birdElements.ComboBox[this._id])), $((e => e !== undefined)), J((e => e.selectedIndex)), q(), fe((e => e === null || e === undefined)), te((e => {
            this._ignoreValueChange = true;
            this._controller.setCurrentValuesInTermsOfOrderedUniqueRowIndices(Lge(e));
            this._ignoreValueChange = false;
        })), oe());
    }
}

class Rge {
    constructor(e) {
        this._id = void 0;
        this._id = e;
    }
    createElement() {
        return Iue.actions.add(this._id, {});
    }
    deleteElement() {
        return Iue.actions.delete(this._id);
    }
    handleDataChange() {
        return V;
    }
    handleValueChanged() {
        return V;
    }
    handleActions() {
        return V;
    }
}

class kge {
    constructor(e, t, o) {
        this._controller = void 0;
        this._id = void 0;
        this._searchable = void 0;
        this._selectAllEnabled = void 0;
        this._ignoreValueChange = false;
        this._controller = e;
        this._id = t;
        this._searchable = o.getSearchable();
        this._selectAllEnabled = o.getSelectAllEnabled();
    }
    createElement() {
        const e = this._controller.getCurrentValuesInTermsOfOrderedUniqueRowIndices();
        const t = wge(this._controller);
        return Sue.actions.add(this._id, {
            name: t.name,
            valueColumnLabel: t.valueColumnLabel,
            measureColumnLabel: t.measureColumnLabel,
            required: yge(this._controller),
            values: t.values,
            measureValues: t.measureValues,
            selectedIndices: e,
            searchable: this._searchable,
            selectAllEnabled: this._selectAllEnabled
        });
    }
    deleteElement() {
        return Sue.actions.delete(this._id);
    }
    handleDataChange(e) {
        return e.pipe(J((() => {
            const e = this._controller.getCurrentValuesInTermsOfOrderedUniqueRowIndices();
            const t = wge(this._controller);
            return Sue.actions.update(this._id, {
                valueColumnLabel: t.valueColumnLabel,
                measureColumnLabel: t.measureColumnLabel,
                values: t.values,
                measureValues: t.measureValues,
                selectedIndices: e
            });
        })));
    }
    handleValueChanged(e) {
        return e.pipe(Q((() => {
            if (this._ignoreValueChange) {
                return V;
            }
            const e = this._controller.getCurrentValuesInTermsOfOrderedUniqueRowIndices();
            return z(Sue.actions.update(this._id, {
                selectedIndices: e
            }));
        })));
    }
    handleActions(e, t) {
        return t.pipe(J((e => e.birdElements.CheckboxList[this._id])), $((e => e !== undefined)), J((e => e.selectedIndices)), q(), fe((e => e === null || e === undefined)), te((e => {
            this._ignoreValueChange = true;
            this._controller.setCurrentValuesInTermsOfOrderedUniqueRowIndices(e ?? []);
            this._ignoreValueChange = false;
        })), oe());
    }
}

var Age = -138061;

var Mge = 2936547;

var Nge = -11928470400;

var Oge = 253717747199;

var Pge = new Date(9999, 11, 31, 0, 0, 0);

var Bge = new Date(9999, 11, 31, 23, 59, 59);

var zge = new Date(1582, 0, 1, 0, 0, 0);

var Fge = new Date(1582, 0, 1, 0, 0, 0);

var jge = function() {
    var e = new Date;
    e.setUTCFullYear(1960, 0, 1);
    e.setUTCHours(0, 0, 0, 0);
    return e;
}();

var Vge = function() {
    var e = new Date;
    e.setUTCFullYear(1970, 0, 1);
    e.setUTCHours(0, 0, 0, 0);
    return e;
}();

var Hge = jge.valueOf() - Vge.valueOf();

function Uge(e) {
    return Math.floor(e / (60 * 60 * 24));
}

function Gge(e) {
    if (e % 4e3 === 0) {
        return false;
    } else if (e % 400 === 0) {
        return true;
    } else if (e % 100 === 0) {
        return false;
    } else if (e % 4 === 0) {
        return true;
    }
    return false;
}

function Kge(e, t) {
    var o = 30;
    if (e === 1 || e === 3 || e === 5 || e === 7 || e === 8 || e === 10 || e === 12) {
        o = 31;
    } else if (e === 2) {
        o = 28;
        if (Gge(t)) {
            o += 1;
        }
    }
    return o;
}

function Wge(e) {
    if (!(e instanceof Date)) return 0;
    var t = new Date(e.getTime());
    var o = new Date;
    o.setUTCFullYear(t.getFullYear(), t.getMonth(), t.getDate());
    o.setUTCHours(t.getHours(), t.getMinutes(), t.getSeconds(), t.getMilliseconds());
    var n = (o.getTime() - Hge) / 1e3;
    var a = e.getFullYear();
    var r = Math.floor(a / 4e3);
    if (r !== 0) {
        var s = a % 4e3;
        n -= (r - (s === 0 && e.getMonth() < 2 ? 1 : 0)) * (60 * 60 * 24);
    }
    if (n > Oge) {
        n = NaN;
    } else if (n < Nge) {
        n = NaN;
    }
    return n;
}

function $ge(e) {
    if (typeof e !== "number") {
        return null;
    }
    var t = 715509;
    var o = Uge(e) + t;
    var n = Math.floor(o / 1460969);
    var a = o % 1460969;
    var r = Math.floor(a / 146097);
    var s = a % 146097;
    var i = Math.floor(s / 36524);
    var l = s % 36524;
    var c = Math.floor(l / 1461);
    var d = l % 1461;
    var u = Math.floor(d / 365);
    var m = d % 365;
    var p = 4e3 * n + 400 * r + 100 * i + 4 * c + u;
    var f = 366;
    if (i !== 4 && u !== 4) {
        f = m + 1;
        p += 1;
    }
    var g = 1;
    while (g <= 12 && 0 < f) {
        f -= Kge(g, p);
        g += 1;
    }
    g -= 1;
    f += Kge(g, p);
    g -= 1;
    var h = new Date;
    var b = Math.floor(e * 1e3) % (60 * 60 * 24 * 1e3);
    if (b < 0) {
        b = 60 * 60 * 24 * 1e3 + Math.floor(b);
    }
    h.setFullYear(p, g, f);
    h.setDate(h.getDate());
    var v = Math.floor(b / (60 * 60 * 1e3));
    var y = Math.floor(b % (60 * 60 * 1e3) / (60 * 1e3));
    var x = Math.floor(b % (60 * 1e3) / 1e3);
    var S = b % 1e3;
    h.setHours(v, y, x, S);
    return h;
}

function Yge(e) {
    if (!(e instanceof Date)) {
        return 0;
    }
    var t = Wge(e);
    var o = Uge(t);
    if (o > Mge) {
        o = NaN;
    } else if (o < Age) {
        o = NaN;
    }
    return o;
}

function qge(e) {
    if (typeof e !== "number") {
        return null;
    }
    return $ge(e * 60 * 60 * 24);
}

function Xge(e) {
    if (!(e instanceof Date)) {
        return 0;
    }
    return e.getHours() * 60 * 60 + e.getMinutes() * 60 + e.getSeconds() + e.getMilliseconds() / 1e3;
}

function Zge(e) {
    if (typeof e !== "number") {
        return null;
    }
    var t = new Date(1970, 0, 1, 0, 0, 0, 0).getTime() + e * 1e3;
    return new Date(t);
}

var Jge = {};

var Qge = {};

function ehe(e, t) {
    return t.replace(/_/g, "-").toUpperCase() + "_" + e.toUpperCase();
}

function the(e, t) {
    if (!t) {
        t = aa();
    }
    var o = ehe(e, t);
    var n = Jge[o];
    if (n) {
        return n;
    }
    var a = Qge[t];
    if (!a) {
        var r = yc.getLocalizationContext();
        if (!r) {
            return null;
        }
        a = r.getMutableCopy().retain();
        a.setFormatterLocale(Zn(t), 0);
        Qge[t] = a;
    }
    n = sc.instance().getFormatter(a, e);
    if (n) {
        n = Jge[o] = n.retain();
    }
    return n;
}

function ohe(e, t) {
    return the(e, t);
}

class nhe {
    constructor(e, t) {
        this._controller = void 0;
        this._id = void 0;
        this._isNumeric = void 0;
        this._isDateTime = void 0;
        this._isCategorical = void 0;
        this._minValue = void 0;
        this._maxValue = void 0;
        this._formatName = void 0;
        this._required = void 0;
        this._ignoreValueChange = false;
        this._controller = e;
        this._id = t;
        this._isNumeric = xge(e);
        this._isDateTime = Sge(e);
        this._isCategorical = false;
        this._formatName = e.getFormatName() ?? undefined;
        this._required = yge(e);
        const o = vge(this._controller);
        this._minValue = o?.getMin() ? Number(o.getMin()) : NaN;
        this._maxValue = o?.getMax() ? Number(o.getMax()) : NaN;
    }
    createElement() {
        return Eue.actions.add(this._id, {
            ...wge(this._controller),
            formattedValue: this.getFormattedValue(),
            committedValue: this.getRawValue(),
            error: null
        });
    }
    deleteElement() {
        return Eue.actions.delete(this._id);
    }
    handleDataChange(e) {
        return e.pipe(te((() => {
            this._isCategorical = this._controller.getColumn()?.getDataUsage() === $l.CATEGORICAL;
        })), J((() => Eue.actions.update(this._id, {
            ...wge(this._controller),
            formattedValue: this.getFormattedValue(),
            committedValue: this.getRawValue()
        }))));
    }
    handleValueChanged(e) {
        return e.pipe($((() => !this._ignoreValueChange)), J((() => Eue.actions.update(this._id, {
            formattedValue: this.getFormattedValue(),
            committedValue: this.getRawValue()
        }))));
    }
    handleActions(e) {
        return F(e.pipe(iue(Eue.actionTypes.commitValue), J((e => {
            const t = e.payload.data;
            const o = this.validateUserInput(t, {
                updateController: true
            });
            const n = !o && (this._isDateTime || this._isCategorical) ? this.getRawValue() : t;
            return Eue.actions.update(this._id, {
                committedValue: n,
                formattedValue: this.getFormattedValue(),
                error: o
            });
        }))), e.pipe(iue(Eue.actionTypes.updateError), J((e => {
            const t = this._isNumeric && !this._isCategorical ? this.validateUserInput(e.payload.data, {
                updateController: false
            }) : null;
            return Eue.actions.update(this._id, {
                error: t
            });
        }))));
    }
    getFormattedValue() {
        return this._controller.getCurrentValue()?.getDisplayString() ?? "";
    }
    getRawValue() {
        const e = this._controller.getCurrentValue();
        if (!e) {
            return "";
        }
        if (this._isDateTime || this._isCategorical) {
            return this.getFormattedValue();
        }
        if (this._isNumeric) {
            return the("BEST32.")?.format(e.getNumericValue()) ?? "";
        }
        return e.getStringValue() ?? "";
    }
    validateUserInput(e, {updateController: t} = {
        updateController: false
    }) {
        let o = e;
        if (this._isNumeric && this._formatName) {
            const t = the("BEST32.");
            const n = t?.parse(e) ?? NaN;
            if (!isNaN(n)) {
                const t = the(this._formatName);
                o = t?.format(n) ?? e;
            }
        }
        const n = this._controller.getDataValueForUserInput(o);
        if (this._required && !n) {
            return {
                key: "TextFieldTypeAhead.validation.string.txt"
            };
        }
        if (n) {
            if (this._isDateTime) {
                const e = isNaN(n.getNumericValue());
                const t = this._controller.validateValue(n) === null;
                if (e || t) {
                    return {
                        key: "TextFieldTypeAhead.validation.string.txt"
                    };
                }
            }
            if (this._isNumeric) {
                const e = isNaN(n.getNumericValue());
                if (e) {
                    return {
                        key: "TextFieldTypeAhead.validation.numeric.txt"
                    };
                }
            }
            const e = this._minValue;
            const t = this._maxValue;
            if (!isNaN(e) && !isNaN(t)) {
                const o = n.getNumericValue();
                if (o < e || o > t) {
                    const o = the(this._formatName ?? "BEST6");
                    const n = o?.format(e) || e.toString();
                    const a = o?.format(t) || t.toString();
                    return {
                        key: "TextFieldTypeAhead.validation.range.fmt",
                        args: {
                            min: n,
                            max: a
                        }
                    };
                }
            }
        }
        if (t) {
            this._ignoreValueChange = true;
            this._controller.setCurrentValue(n);
            this._ignoreValueChange = false;
        }
        return null;
    }
}

function ahe(e, t) {
    const o = e.getDefaultRange();
    const n = e.getCurrentDataRange() ?? o ?? [ 0, 0 ];
    let a = e.getCurrentSelectedRange();
    if (!a || Number.isNaN(a[0]) || t && Number.isNaN(a[1])) {
        a = o ?? n;
    }
    const r = {
        min: a[0],
        max: t ? a[1] : undefined
    };
    const s = e.getBIRDModel();
    const i = s instanceof rf ? s : undefined;
    return {
        name: i?.getLabel() || "",
        valueColumnLabel: e.getLabel() || "",
        values: r,
        sliderState: r,
        range: {
            min: n[0],
            max: n[1]
        },
        format: e.getFormatName() || undefined,
        horizontal: e.isHorizontal()
    };
}

class rhe {
    constructor(e, t, o) {
        this._controller = void 0;
        this._id = void 0;
        this._dualRange = void 0;
        this._ignoreValueChange = false;
        this._controller = e;
        this._id = t;
        this._dualRange = o;
    }
    createElement() {
        return wue.actions.add(this._id, {
            ...ahe(this._controller, this._dualRange)
        });
    }
    deleteElement() {
        return wue.actions.delete(this._id);
    }
    handleDataChange(e) {
        return e.pipe(J((() => wue.actions.update(this._id, ahe(this._controller, this._dualRange)))));
    }
    handleValueChanged(e) {
        return e.pipe(Q((() => {
            if (this._ignoreValueChange) {
                return V;
            }
            return z(wue.actions.update(this._id, ahe(this._controller, this._dualRange)));
        })));
    }
    handleActions(e, t) {
        return t.pipe(J((e => e.birdElements.Slider[this._id])), $((e => e !== undefined)), J((e => e.values)), fe((() => {
            const e = this._controller.getCurrentDataRange();
            return !e || e.every((e => e === 0)) || e.some((e => Number.isNaN(e)));
        })), q(((e, t) => e.min === t.min && e.max === t.max)), te((e => {
            this._ignoreValueChange = true;
            if (this._dualRange) {
                this._controller.setCurrentSelectedRange(e.min, e.max || 0);
            } else {
                this._controller.setCurrentSelectedValue(e.min);
            }
            this._ignoreValueChange = false;
        })), oe());
    }
}

function she(e) {
    return e === null || e === undefined ? [] : [ e ];
}

class ihe {
    constructor(e, t, o) {
        this._controller = void 0;
        this._id = void 0;
        this._ignoreValueChange = false;
        this._orientation = "horizontal";
        this._controller = e;
        this._id = t;
        this._orientation = o.getOrientation() === xm.HORIZONTAL ? "horizontal" : "vertical";
    }
    createElement() {
        const e = this._controller.getCurrentValuesInTermsOfOrderedUniqueRowIndices();
        const t = wge(this._controller);
        return xue.actions.add(this._id, {
            label: t.label,
            name: t.name,
            valueColumnLabel: t.valueColumnLabel,
            measureColumnLabel: t.measureColumnLabel,
            required: yge(this._controller),
            selectedIndex: e ? e[0] : null,
            values: t.values,
            measureValues: t.measureValues,
            orientation: this._orientation
        });
    }
    deleteElement() {
        return xue.actions.delete(this._id);
    }
    handleDataChange(e) {
        return e.pipe(J((() => {
            const e = wge(this._controller);
            const t = this._controller.getCurrentValuesInTermsOfOrderedUniqueRowIndices();
            return xue.actions.update(this._id, {
                valueColumnLabel: e.valueColumnLabel,
                measureColumnLabel: e.measureColumnLabel,
                values: e.values,
                measureValues: e.measureValues,
                selectedIndex: t ? t[0] : null
            });
        })));
    }
    handleValueChanged(e) {
        return e.pipe(Q((() => {
            if (this._ignoreValueChange) {
                return V;
            }
            const e = this._controller.getCurrentValuesInTermsOfOrderedUniqueRowIndices();
            return z(xue.actions.update(this._id, {
                selectedIndex: e ? e[0] : null
            }));
        })));
    }
    handleActions(e, t) {
        return t.pipe(J((e => e.birdElements.ButtonBar[this._id])), $((e => e !== undefined)), J((e => e.selectedIndex)), q(), fe((e => e === null || e === undefined)), te((e => {
            this._ignoreValueChange = true;
            this._controller.setCurrentValuesInTermsOfOrderedUniqueRowIndices(she(e));
            this._ignoreValueChange = false;
        })), oe());
    }
}

class lhe {
    constructor(e, t, o) {
        this._controller = void 0;
        this._id = void 0;
        this._searchable = void 0;
        this._ignoreValueChange = false;
        this._controller = e;
        this._id = t;
        this._searchable = o.getSearchable();
    }
    createElement() {
        const e = this._controller.getCurrentValuesInTermsOfOrderedUniqueRowIndices();
        const t = wge(this._controller);
        return Cue.actions.add(this._id, {
            name: t.name,
            valueColumnLabel: t.valueColumnLabel,
            measureColumnLabel: t.measureColumnLabel,
            values: t.values,
            measureValues: t.measureValues,
            selectedIndex: e ? e[0] : 0,
            searchable: this._searchable
        });
    }
    deleteElement() {
        return Cue.actions.delete(this._id);
    }
    handleDataChange(e) {
        return e.pipe(J((() => {
            const e = this._controller.getCurrentValuesInTermsOfOrderedUniqueRowIndices();
            const t = wge(this._controller);
            return Cue.actions.update(this._id, {
                valueColumnLabel: t.valueColumnLabel,
                measureColumnLabel: t.measureColumnLabel,
                values: t.values,
                measureValues: t.measureValues,
                selectedIndex: e ? e[0] : 0
            });
        })));
    }
    handleValueChanged(e) {
        return e.pipe(Q((() => {
            if (this._ignoreValueChange) {
                return V;
            }
            const e = this._controller.getCurrentValuesInTermsOfOrderedUniqueRowIndices();
            return z(Cue.actions.update(this._id, {
                selectedIndex: e ? e[0] : 0
            }));
        })));
    }
    handleActions(e, t) {
        return t.pipe(J((e => e.birdElements.RadioList[this._id])), $((e => e !== undefined)), J((e => e.selectedIndex)), q(), fe((e => e === 0)), te((e => {
            this._ignoreValueChange = true;
            this._controller.setCurrentValuesInTermsOfOrderedUniqueRowIndices([ e ]);
            this._ignoreValueChange = false;
        })), oe());
    }
}

function che(e, t) {
    const o = e.getModel();
    if (!o) {
        throw new Error(`Unable to get model for PromptElementController ${t}`);
    }
    const n = o.getSpecialization();
    if (!n) {
        throw new Error(`Unable to get specialization for PromptElementController ${t}`);
    }
    if (n instanceof hp) {
        return new Tge(e, t);
    } else if (n instanceof fp) {
        return new kge(e, t, n);
    } else if (n instanceof df) {
        return new lhe(e, t, n);
    } else if (n instanceof Ef) {
        return new nhe(e, t);
    } else if (e instanceof mf) {
        return new rhe(e, t, n instanceof Mp);
    } else if (n instanceof qp) {
        return new ihe(e, t, n);
    }
    return new Rge(t);
}

const dhe = (e, t, o, n, a, r) => {
    if (!(t instanceof lf)) {
        throw new Error("Expected the controller to be a PromptElementController");
    }
    const s = r.getKey(t);
    const i = che(t, s);
    const l = Cge(t);
    const c = i.modifyStyle ? i.modifyStyle(l) : l;
    const d = [];
    if (e) {
        const t = uhe(e);
        if (t) {
            d.push(jde.actions.setPromptConstraints(s, t));
        }
    }
    return F(H(d), z(pue.actions.set(s, c)), bge(e, t, o, n, a, r, {
        create: () => i.createElement(),
        delete: () => i.deleteElement()
    }), i.handleDataChange(lue(t, Tp.DATACHANGE)), i.handleValueChanged(lue(t, lf.CURRENT_VALUE_CHANGED)), i.handleActions(n, a));
};

function uhe(e) {
    const t = e.getLayoutProxy()?.getConstraint();
    if (!t) {
        return null;
    }
    const o = {
        widthFlexibility: mhe(t.getWidthFlexibility()),
        heightFlexibility: mhe(t.getHeightFlexibility())
    };
    const n = t.getWidth();
    if (n) {
        if (n.getUnit() !== js.PERCENTAGE) {
            console.warn("Unexpected dimension unit for prompt header prompt: ", n?.getUnit());
        } else {
            o.widthConstraint = n.getValue() + "%";
        }
    }
    const a = t.getHeight();
    if (a) {
        if (a.getUnit() !== js.PERCENTAGE) {
            console.warn("Unexpected dimension unit for prompt header prompt: ", n?.getUnit());
        } else {
            o.heightConstraint = a.getValue() + "%";
        }
    }
    return o;
}

function mhe(e) {
    switch (e) {
      case Uc.FLEXIBLE:
        return "flexible";

      case Uc.GROWABLE:
        return "growable";

      case Uc.SHRINKABLE:
        return "shrinkable";

      case Uc.FIXED:
        return "fixed";
    }
}

const phe = (e, t, o) => {
    if (!e) {
        return z(jme.actions.init(o, {
            location: "top",
            status: "auto"
        }));
    }
    const n = e.getMediaContainerController();
    if (!n) {
        return z(jme.actions.init(o, {
            location: "top",
            status: "auto"
        }));
    }
    const a = Hde(n.getOrderedVisualAndContainerControllers());
    const r = fhe(e.getLocation());
    return F(z(jme.actions.init(o, {
        status: "auto",
        location: r,
        width: e.getModel()?.getPropertyHandle("width")?.hasOverride() ? e.getModel()?.getWidth() || undefined : undefined
    })), H(a.map(sue.actions.loadBirdModel)), t.pipe(Q((() => H(a.map(sue.actions.unloadBirdModel))))), z(jde.actions.set(o, {
        childKeys: a.map(Kde)
    })));
};

function fhe(e) {
    switch (e) {
      case Cm.LEFT:
        return "left";

      case Cm.RIGHT:
        return "right";

      case Cm.BOTTOM:
        return "bottom";

      case Cm.TOP:
      default:
        return "top";
    }
}

function ghe(e) {
    return e + "-header";
}

const hhe = "reportHeader";

function bhe(e) {
    const t = e.getAllSectionControllers();
    if (!t) {
        return [];
    }
    const o = [];
    for (const e of t) {
        if (!e) {
            continue;
        }
        const t = vhe(e);
        if (!t) {
            continue;
        }
        o.push(t);
    }
    return o;
}

function vhe(e) {
    const t = e.getModel();
    const o = t?.getName();
    if (!t || !o) {
        return;
    }
    let n;
    const a = e.getPagePadding();
    if (a) {
        n = a.getScalarValueForUnit(js.PIXELS, -1, 1) + "px";
    }
    return {
        id: o,
        label: t.getLabel() || "",
        padding: n
    };
}

const yhe = (e, t, o, n) => {
    if (!(e instanceof dp)) {
        throw new Error("Expected the controller to be a ReportController");
    }
    const a = n.value.bird.name;
    let r = null;
    let s = null;
    let i = null;
    let l = null;
    const c = [];
    const d = e => {
        const t = [];
        const o = n.value.bird.viewSetReport;
        if (l) {
            l.release();
            l = null;
        }
        if (r === null) {
            r = e;
            if (r) {
                r.retain();
                t.push(sue.actions.loadBirdModel(r));
                t.push(gme.actions.setCurrentSection(r.getModel()?.getName() ?? undefined));
            }
        } else if (e !== r && !o) {
            if (s) {
                l = e;
                l?.retain();
                return V;
            }
            s = r;
            r = e;
            if (r) {
                r.retain();
                t.push(sue.actions.loadBirdModel(r));
                if (r.isHiddenSection()) {
                    const o = vhe(r);
                    const n = kpe(e);
                    if (!o || !n) {
                        throw new Error("Could not resolve hidden section info");
                    }
                    t.push(gme.actions.updateSection(o.id, {
                        ...o,
                        rootContainerId: Kde(n),
                        hidden: true
                    }));
                    t.push(gme.actions.setCurrentSection(o.id));
                } else {
                    t.push(gme.actions.setCurrentSection(r?.getModel()?.getName() ?? undefined));
                }
            }
        }
        return H(t);
    };
    const u = (t, o) => {
        const n = [];
        if (o !== undefined) {
            const a = o + 1;
            if (a <= 0 || a > t.length) {
                return V;
            }
            t.splice(0, a);
            e.removeLatestSectionLinkInfos(a);
            const r = e.getActiveSectionController();
            if (!r) {
                throw new Error("getActiveSectionController should never be null");
            }
            n.push(d(r));
        }
        const a = t.map((({label: e}) => e));
        return F(...n, H([ gme.actions.setLinkLabels(a.length ? a : undefined) ]));
    };
    function m() {
        const e = [];
        for (const t of [ r, s, i, l ]) {
            if (!t) {
                continue;
            }
            t.release();
            e.push(sue.actions.unloadBirdModel(t));
        }
        return H(e);
    }
    const p = [];
    p.push(z(gme.actions.setSections(bhe(e))));
    const f = n.pipe(J((e => e.sections.transitioning)), q(), Q((e => {
        if (e || !s) {
            return V;
        }
        const t = sue.actions.unloadBirdModel(s);
        s.release();
        s = null;
        return z(t);
    })));
    const g = n.pipe(J((e => ({
        transitioning: e.sections.transitioning,
        nextSection: e.sections.nextSection
    }))), q(((e, t) => e.transitioning === t.transitioning && e.nextSection === t.nextSection)), Q((t => {
        if (t.transitioning || t.nextSection === undefined) {
            return V;
        }
        const o = e.getIndexOfSectionWithName(t.nextSection);
        e.setCurrentSectionIndex(o);
        return z(gme.actions.setNextSection(undefined));
    })));
    const h = n.pipe(J((e => e.sections.transitioning)), q(), Q((e => {
        if (e || l === null) {
            return V;
        }
        return d(l);
    })));
    const b = e.getReportStyleChain();
    const v = b && Ku(b);
    p.push(z(Fue.actions.setReportBackgroundColor(v || null)));
    const y = b && Ege(b);
    p.push(z(Fue.actions.setPageTabStyle(y || null)));
    const x = b?.getStyleAttributeStringValue(_c.THEME, null);
    p.push(z(Fue.actions.setReportTheme(x ?? "light")));
    p.push(t.pipe(J((() => Fue.actions.setReportTheme(null)))));
    p.push(n.pipe(cue(e), J((e => e.bird.potentialFocusedVisual)), Z(0), q(), te((t => {
        const o = t ? e.getViewControllerForName(t) : null;
        if (o instanceof Dm) {
            e.setSelectedVisual(o);
        } else {
            e.setSelectedVisual(null);
        }
    })), J((e => Fue.actions.setFocusedVisual(e)))));
    p.push(lue(e, _f.SELECTION_CHANGED).pipe(cue(e), J((e => {
        const t = e.getVisualController();
        const o = t ? Kde(t) : null;
        return Fue.actions.setSelectedVisual(o);
    }))));
    const S = o.pipe(iue(gme.actionTypes.notifyLinkNavigation), Q((e => u(c, e.payload))));
    const w = lue(e, dp.CURRENT_SECTION_CHANGED).pipe(Q((() => d(e.getCurrentSectionController()))));
    const C = lue(e, Hm.ACTION).pipe($(xhe(vp.URL)), $((t => She(e, a, t))), J((e => e.getResolvedURL())), te((e => e && window.open(e, "_blank"))), oe());
    const E = lue(e, Hm.ACTION).pipe($(xhe(vp.SECTION)), Q((t => {
        const o = t.getSourceSection();
        if (!o) {
            return V;
        }
        const n = e.getActiveSectionController();
        if (!n || n.isInfoWindow()) {
            return V;
        }
        c.unshift({
            name: o.getName() || "",
            label: o.getLabel() || ""
        });
        n.setLinkFiltersActive(true);
        return F(d(n), u(c));
    })));
    const I = lue(e, Hm.ACTION).pipe($(xhe(vp.SECTION)), $((t => She(e, a, t))), Q((t => {
        const o = t.getAction().getValue();
        if (!o || !e.isHiddenSection(o)) {
            return V;
        }
        i = e.getHiddenSectionControllerForName(o, t);
        if (!i) {
            throw new Error(`Unable to find controller for hidden section named ${o}`);
        }
        if (!i.isInfoWindow()) {
            i = null;
            return V;
        }
        i.retain();
        const n = kpe(i);
        if (!n) {
            throw new Error(`Unable to find a media container controller for hidden section named ${o}`);
        }
        const a = i.getModel();
        if (!a || !(a instanceof Fp)) {
            throw new Error(`No hidden section named ${o}`);
        }
        const r = Kde(n);
        const s = a.getHeight()?.getScalarValueForUnit(js.PIXELS, 100, document.body.clientHeight) || document.body.clientHeight * .5;
        const l = a.getWidth()?.getScalarValueForUnit(js.PIXELS, 100, document.body.clientWidth) || document.body.clientWidth * .5;
        let c;
        const d = i.getPagePadding();
        if (d) {
            c = d.getScalarValueForUnit(js.PIXELS, -1, 1) + "px";
        }
        const u = a.getLabel();
        const m = sue.actions.loadBirdModel(i);
        const p = gme.actions.setHiddenSection({
            id: o,
            rootContainerId: r,
            label: u ?? undefined,
            size: {
                height: s,
                width: l
            },
            padding: c
        });
        return H([ m, p ]);
    })));
    const _ = o.pipe(iue(gme.actionTypes.closeHiddenSection), Q((() => {
        if (!i) {
            return V;
        }
        return z(sue.actions.unloadBirdModel(i));
    })), te((() => {
        if (i) {
            e.popHiddenSection();
            i.release();
            i = null;
        }
    })));
    p.push(n.pipe(J((e => e.sections.hiddenSection ?? e.sections.currentSection)), q(), X(1), Q((() => H([ Fue.actions.setMaximizedVisual(null), Fme.actions.reset() ])))));
    let D = V;
    if (a) {
        const o = e.getAllSectionControllers();
        if (!o) {
            throw new Error(`Unable to find report object named ${a}. No sections exist in report.`);
        }
        const n = e.getViewControllerForName(a);
        if (n instanceof Pm) {
            const e = kpe(n);
            if (!e) {
                throw new Error(`Unable to find a media container controller for hidden section named ${a}`);
            }
            const o = n.getModel();
            if (o instanceof Fp) {
                const r = sue.actions.loadBirdModel(n);
                const s = Kde(e);
                const i = gme.actions.setCurrentSection(a);
                const l = gme.actions.updateSection(a, {
                    id: a,
                    rootContainerId: s,
                    label: o.getLabel() || undefined
                });
                p.push(H([ r, i, l ]), t.pipe(J((() => sue.actions.unloadBirdModel(n)))));
            }
        } else if (n instanceof Dm) {
            const e = `media-${Kde(n)}`;
            p.push(H([ sue.actions.loadBirdModel(n), vue.actions.add(e, {}), jde.actions.set(e, {
                childKeys: [ Kde(n) ]
            }) ]));
            p.push(t.pipe(J((() => vue.actions.delete(e)))));
            p.push(t.pipe(J((() => sue.actions.unloadBirdModel(n)))));
            if (n instanceof Mm) {
                p.push(H([ sue.actions.addLayoutRoot(n, e) ]));
            } else {
                p.push(H([ jde.actions.setIsSingleObject(e, true) ]));
            }
            if (n.isContentComplete()) {
                p.push(H([ Dme.actions.setReportObjectContentComplete(true) ]));
            } else {
                D = lue(n, up.CONTENT_COMPLETE).pipe(ie(), J((() => Dme.actions.setReportObjectContentComplete(true))));
            }
        } else {
            p.push(H([ Dme.actions.setTransportErrorKey({
                key: "ReportObject.notFound.error.txt"
            }) ]));
        }
    } else {
        if (e.isContentComplete()) {
            p.push(H([ Dme.actions.setReportContentComplete(true) ]));
        } else {
            D = lue(e, up.CONTENT_COMPLETE).pipe(ie((() => e.isContentComplete())), J((() => Dme.actions.setReportContentComplete(true))));
        }
        p.push(d(e.getCurrentSectionController()));
    }
    const L = t.pipe(Q((() => m())));
    p.push(z(yme.actions.setObjectItemSortKeys([ Jfe.SORT, Jfe.EXPLAIN, Jfe.MAXIMIZE, Jfe.MANAGECOLUMNS ])));
    return F(phe(e.getHeaderController(), t, hhe), ...p, f, h, g, S, w, C, E, I, _, L, D);
};

function xhe(e) {
    return function t(o) {
        if (o.getType() !== Hm.ACTION) {
            return false;
        }
        const n = o.getAction();
        if (!(n instanceof xp)) {
            return false;
        }
        return n.getType() === e;
    };
}

function She(e, t, o) {
    if (!t) {
        return true;
    }
    let n = e.getViewControllerForName(t);
    if (n instanceof Pm) {
        n = kpe(n);
    }
    const a = o.getSourceController()?.getVisualElementName();
    return t === a || n instanceof Mm && !!Ape(n, a);
}

const whe = (e, t, o, n, a) => {
    if (!e) {
        return V;
    }
    const r = () => Che(a, e, t);
    const s = r();
    const i = lue(e, mp.EXPRESSION_UPDATED).pipe(J(r));
    const l = o.pipe(iue(Ime.actionTypes.deleteItem), te((t => {
        const o = t.payload.data.itemIndex;
        const n = e.getExpressionControlItems();
        const a = n && n[o];
        if (!a) {
            console.error("Expected group at index " + o);
            return;
        }
        a.removeAllValues();
    })), J(r));
    const c = o.pipe(iue(Ime.actionTypes.deleteValue), te((t => {
        const {itemIndex: o, valueIndex: n} = t.payload.data;
        const a = e.getExpressionControlItems();
        const r = a && a[o];
        if (!r) {
            console.error("Expected group at index " + n);
            return;
        }
        if (r.getValueList()?.length === 1) {
            r.removeAllValues();
        } else {
            r.removeValueFromList(n);
        }
    })), J(r));
    return F(z(s), i, l, c).pipe(cue(e), cue(t));
};

function Che(e, t, o) {
    const n = t.getExpressionControlItems() || [];
    return Ime.actions.set(e, {
        showControl: o.getShowSelectionControl(),
        mode: Ehe(t.getAutoInteractionMode()),
        items: n.map((e => {
            if (!e) {
                return {
                    label: "",
                    readonly: true,
                    values: []
                };
            }
            const t = e.getValueList() || [];
            return {
                label: e.getLabel() || "",
                values: t.map((e => e || "")),
                readonly: e.readOnly()
            };
        }))
    });
}

function Ehe(e) {
    switch (e) {
      case Em.BRUSH:
        return "brush";

      case Em.ONEWAYFILTER:
        return "onewayfilter";

      case Em.TWOWAYFILTER:
        return "twowayfilter";

      case Em.NONE:
      default:
        return "none";
    }
}

const Ihe = (e, t, o, n, a) => {
    if (!(e instanceof Pm)) {
        throw new Error("Expected the controller to be a SectionController");
    }
    const r = kpe(e);
    if (!r) {
        throw new Error("Expected the section to have a MediaContainer");
    }
    const s = e.getReportController();
    if (!s) {
        throw new Error("Expected the section to have a ReportController");
    }
    const i = e.getModel();
    if (!i) {
        throw new Error("Expected the SectionController to have a Section");
    }
    const l = i.getName();
    const c = !l || s.isHiddenSection(l) ? [] : [ gme.actions.updateSection(l, {
        rootContainerId: a.getKey(r)
    }) ];
    const d = H([ ...c, sue.actions.addLayoutRoot(r) ]);
    const u = t.pipe(Q((() => H([ sue.actions.removeLayoutRoot(r) ]))));
    return F(d, u, phe(e.getHeaderController(), t, ghe(a.getKey(r))), whe(e.getAutoInteractionController(), i, o, t, a.getKey(r)), Dge(r, t, o, n, a).pipe(cue(r)));
};

const _he = (e, t, o, n, a) => {
    if (!(e instanceof km)) {
        throw new Error("Expected the controller to be a VisualController");
    }
    const r = e.getVisualElementController();
    if (!r) {
        throw new Error("Expected the VisualController to have a VisualElementController");
    }
    const s = a.getKey(e);
    const i = lue(e, Mc.GENERIC).pipe(Q((e => {
        const t = e.getWarnings();
        if (!t) {
            return z(Bue.actions.set(s, undefined));
        }
        const o = t.filter((function(e) {
            return e && e.getSeverity() >= 40;
        }));
        if (!o.length) {
            return z(Bue.actions.set(s, undefined));
        }
        const n = o[0].getSeverity();
        if (n >= ei.SEVERITY_FATAL_MIN) {
            return z(Bue.actions.set(s, {
                type: "error",
                message: o[0].getMessage() || ""
            }));
        } else if (n >= ei.SEVERITY_ERROR_MIN) {
            return z(Bue.actions.set(s, {
                type: "information",
                message: o[0].getMessage() || ""
            }));
        } else {
            let e = "";
            for (const t of o) {
                e += t.getMessage();
            }
            return z(Bue.actions.set(s, {
                type: "warning",
                message: e
            }));
        }
    })));
    const l = a.getLoaderForVisualElementController(r);
    return F(i, l(e, r, t, o, n, a).pipe(cue(r)));
};

const Dhe = (e, t, o, n, a, r) => {
    if (!(t instanceof Up)) {
        throw new Error("Expected the controller to be a ImageElementController");
    }
    let s;
    const i = t.attachEvent(Cp.SHOW, (e => {
        if (e instanceof Cp) {
            if (s) {
                s.release();
            }
            s = e.retain();
        }
    }));
    const l = t.getBIRDModel();
    if (!l || !(l instanceof Vp)) {
        throw new Error("Expected the controller to be a ImageElementController");
    }
    l.retain();
    let c;
    switch (l.getScaleType()) {
      case uc.SCALE:
        c = "scale";
        break;

      case uc.SCALEHEIGHT:
        c = "fit-width";
        break;

      case uc.SCALEWIDTH:
        c = "fit-height";
        break;

      case uc.SCALETOFIT:
        c = "fit";
        break;

      case uc.TILE:
        c = "tile";
        break;
    }
    t.willAttemptDownload();
    const d = t.getImageRemoteURL();
    let u = "";
    let m = false;
    if (d) {
        u = d.getFinishedURLString() ?? "";
        m = true;
    } else {
        const e = t.getImageLocalFilePath();
        if (e) {
            if (a.value.transport.serverType === "standalone") {
                m = true;
                u = `${a.value.transport.packageUrl}image/${e.substr(e.lastIndexOf("/") + 1)}`;
            } else {
                try {
                    u = cm._ltjsModule.getStringContentsOfFile(e) ?? "";
                } catch (e) {
                    t.didAttemptDownload(false);
                    t.updateWarningStatus();
                }
            }
        } else {
            t.didAttemptDownload(false);
            t.updateWarningStatus();
        }
    }
    const p = r.getKey(t);
    const f = a.pipe(J((e => {
        const t = e.birdElements.Image[p];
        if (!t) {
            return undefined;
        }
        return t.loadState;
    })), q(), te((e => {
        if (e === undefined || e === "loading") {
            return;
        }
        if (e === "error") {
            t.didAttemptDownload(false);
        } else if (e === "success") {
            t.didAttemptDownload(true);
            t.redispatchReadyEvent();
        }
        t.updateWarningStatus();
    })), oe());
    const {birdActions$: g, birdActionsHandler: h} = nge(p, n, a);
    const b = n.pipe(iue(Tue.actionTypes.notifyClick), te((e => {
        const {x: o, y: n} = e.payload.data;
        t.showTooltip(l.getAlternateText(), o, n);
        if (!s) {
            return;
        }
        h(s, o, n);
    })), oe());
    return F(g, b, f, age(e, t, o, n, a, r, {
        create: () => Tue.actions.add(p, {
            mode: c,
            isExternal: m,
            url: u,
            alt: l.getAlternateText(),
            loadState: "loading"
        }),
        delete: () => Tue.actions.delete(p)
    }), o.pipe(te((() => {
        if (s) {
            s.release();
        }
        i.detach();
        l.release();
    })), oe()));
};

const Lhe = (e, t, o, n, a, r) => {
    if (!(t instanceof wf)) {
        throw new Error("Expected the controller to be a TextElementController");
    }
    const s = r.getKey(t);
    const i = e?.getLayoutProxy();
    if (!i) {
        throw new Error("layoutProxy should not be null");
    }
    const {measureHeight: l} = Tpe();
    const c = The(i);
    const d = c ? qc.PREFERRED_HEIGHT_REQUEST : qc.HEIGHT_REQUEST;
    const u = lue(i, d).pipe(cue(i), te((e => {
        const o = eue(i);
        let n = e.getConstrainedSize();
        if (c) {
            const e = o.getPadding()?.getScalarValueForUnit(js.PIXELS, -1, 1) ?? 0;
            const t = o.getBorderThickness();
            n -= e * 2 + t * 2;
        }
        const a = l(t.getRichTextAsHTML(), n);
        if (o.getHeightPreferredSizeBehavior() === Gc.HONORSIZE) {
            o.setHeight(new Vs(a, js.PIXELS));
        }
        const r = o.getHeightFlexibility() === Uc.SHRINKABLE;
        const s = r ? Math.min(a, 180) : a;
        o.setMinimumHeight(s);
    })), oe());
    const m = bge(e, t, o, n, a, r, {
        create: () => Rue.actions.add(s, {
            text: Epe(t.getRichTextAsHTML())
        }),
        delete: () => Rue.actions.delete(s)
    });
    const p = n.pipe(iue(Rue.actionTypes.notifyInteraction), te((e => {
        t.triggerInteraction(e.payload.data);
    })), oe());
    const f = lue(t, Tp.DATACHANGE).pipe(Q((() => H([ Rue.actions.update(s, {
        text: Epe(t.getRichTextAsHTML())
    }), jde.actions.notifyInvalidateLayout() ]))));
    return F(m, p, f, u);
};

function The(e) {
    const t = e.getConstraint();
    const o = t?.getHorizontalOffset() && t?.getVerticalOffset();
    return !!o;
}

function Rhe(e, t) {
    if (!e || !e.length) return [];
    const o = e[0];
    if (!o) return [];
    const n = o.getEntries();
    if (!n) return [];
    return n.filter((e => e instanceof t));
}

function khe(e, t) {
    return Hde(t?.map((t => {
        const o = e.getColumnHeader(t);
        if (!o) {
            return null;
        }
        return {
            label: o,
            column: t
        };
    })));
}

function Ahe(e, t, o, n, a) {
    if (!t) {
        return V;
    }
    let r = undefined;
    const s = n.pipe(J((t => {
        const o = t.ui.reportContextMenu.target?.id;
        if (o) {
            r = o;
        }
        return !!o && o === e;
    })), q(), ce());
    return s.pipe($((e => e)), re((() => {
        const t = o.getOrderedTableColumns();
        const s = o.getOrderedHiddenTableColumns();
        return F(z(yme.actions.setObjectItem(Jfe.MANAGECOLUMNS, {
            text: {
                key: "ContextMenu.manageColumns.txt"
            },
            action: Ume.actions.update({
                isOpen: true,
                displayedItems: khe(o, t),
                hiddenItems: khe(o, s)
            })
        })), a.pipe(due(t), due(s), iue(Ume.actionTypes.NotifyUpdateDisplayedColumns), J((e => e.payload)), te((t => {
            if (!t || !(r === e)) {
                return V;
            }
            o.beginSequence();
            const a = t.map((e => e.column));
            const s = n.value.ui.manageColumns.displayedItems?.concat(n.value.ui.manageColumns.hiddenItems || []);
            if (s) {
                for (const e of s) {
                    o.setVisibilityForColumn(e.column, a.includes(e.column));
                }
            }
            o.setColumnOrder(a);
            o.endSequence();
        })), oe()));
    })));
}

const Mhe = {
    manageColumns: {
        default: false,
        parameter: "auto"
    }
};

const Nhe = {};

const Ohe = {};

for (const [e, t] of Object.entries(Mhe)) {
    const o = e;
    Nhe[o] = t.default;
    let n = null;
    const a = `VASDK_${o.toUpperCase()}`;
    if (t.parameter === "auto") {
        if (typeof t.default === "boolean") {
            n = Gg(a);
        } else if (typeof t.default === "string") {
            n = Ug(a);
        } else {
            console.error(`Automatic url parameter not supported for ${o}`);
        }
    } else if (typeof t.parameter === "function") {
        const e = Ug(a);
        if (e !== null) {
            n = t.parameter(e);
        }
    }
    if (n !== null) {
        Ohe[o] = n;
    }
}

let Phe = {};

function Bhe() {
    return {
        ...Nhe,
        ...Phe,
        ...Ohe
    };
}

const zhe = new R(Bhe());

const Fhe = (e, t, o, n, a, r) => {
    if (!(t instanceof xf)) {
        throw new Error("Expected the controller to be a TableElementController");
    }
    const s = r.getKey(t);
    const i = a.pipe(J((e => e.birdElements.Table[s])), $((e => e !== undefined && e.contentId !== undefined)), q(), J((e => e.contentId)));
    const l = new lm;
    const c = Ige(e, t, o, n, a, r, {
        create: () => Due.actions.add(s, {}),
        delete: () => Due.actions.delete(s)
    }, {
        contentId$: i,
        visualizationManager: l
    });
    l.addGestureOverride("mouseUp", (e => {
        jhe(t, l, e);
    }));
    if (!e) {
        t.setSortEnabled(false);
        t.updateViewData();
    }
    const d = Qfe(s, e, t, a, o, {
        preferOverflowMenu: true
    });
    const u = e instanceof km && e.getCompositeParent() !== null;
    const m = zhe.pipe(J((e => e.manageColumns)), q(), re((o => o && !u ? Ahe(s, e, t, a, n) : V)));
    return F(c, d, m);
};

function jhe(e, t, o) {
    if (o.localX === undefined || o.localY === undefined) return;
    const n = t.getPickResults(o.localX, o.localY, false, false);
    const a = Rhe(n, Vc)[0];
    if (a && a.getType() === jc.DATAGRID_COLUMN_HEADER && e.canSort(a.getColumnIndex())) {
        const t = e.getTooltipSortControllerWithAllSortItems(n);
        if (t) {
            const e = Hde(t.getSortItems())[0];
            if (e) {
                const n = !o.ctrlKey;
                lge(t, e, n);
            }
        }
    }
}

const Vhe = (e, t, o, n, a, r) => {
    if (!(t instanceof Dp)) {
        throw new Error("Expected the controller to be a CrosstabElementController");
    }
    const s = r.getKey(t);
    const i = a.pipe(J((e => e.birdElements.Crosstab[s])), $((e => e !== undefined && e.contentId !== undefined)), q(), J((e => e.contentId)));
    const l = new lm;
    const c = Ige(e, t, o, n, a, r, {
        create: () => _ue.actions.add(s, {}),
        delete: () => _ue.actions.delete(s)
    }, {
        contentId$: i,
        visualizationManager: l
    });
    l.addGestureOverride("mouseUp", (e => {
        Hhe(t, l, e);
    }));
    const d = Ope(t, o, n, a, s);
    const u = Qfe(s, e, t, a, o, {
        preferOverflowMenu: true
    });
    return F(c, d, u);
};

function Hhe(e, t, o) {
    if (o.localX === undefined || o.localY === undefined) {
        return;
    }
    const n = t.getPickResults(o.localX, o.localY, false, false);
    const a = Rhe(n, Hc)[0];
    if (a) {
        const t = a.getButtonType();
        if (t === Fc.NONE) {
            const t = a.getType();
            if ((t === jc.CROSSTAB_COLUMN_AXIS_LABEL_HEADER || t === jc.CROSSTAB_ROW_AXIS_LABEL_HEADER || t === jc.CROSSTAB_MEASURE_HEADER) && e.canSort(a)) {
                const t = e.getTooltipSortControllerWithAllSortItems(n);
                if (t) {
                    const e = Hde(t.getSortItems())[0];
                    if (e) {
                        lge(t, e, true);
                    }
                }
            }
        } else {
            const o = Uhe(e, a);
            if (o) {
                switch (t) {
                  case Fc.CROSSTAB_DRILLDOWN_BUTTON:
                    o.drillDown(a.getNode());
                    break;

                  case Fc.CROSSTAB_EXPAND_BUTTON:
                    o.expand(a.getNode());
                    break;

                  case Fc.CROSSTAB_COLLAPSE_BUTTON:
                    o.collapse(a.getNode());
                    break;
                }
            }
        }
    }
}

function Uhe(e, t) {
    const o = e.getResultControllers();
    if (o) {
        const n = o[0];
        if (n) {
            const o = n.getDataSet();
            if (o) {
                return e.getTooltipDrillController(t.getHierarchyName(), o.getName());
            }
        }
    }
    return null;
}

const Ghe = (e, t, o, n, a, r) => {
    if (!(t instanceof Rf)) {
        throw new Error("Expected the controller to be a GraphElementController");
    }
    const s = t.getModel();
    if (!s) {
        throw new Error("Expected the WebContentElementController to have a model");
    }
    const i = r.getKey(t);
    const l = () => {
        const e = t.getJSONXData();
        if (e) {
            try {
                return JSON.parse(e);
            } catch (t) {
                console.error("Error parsing the JSON string: " + e, t);
            }
        }
    };
    return F(bge(e, t, o, n, a, r, {
        create: () => {
            const e = l();
            const t = e ? e.resultName : undefined;
            return Pde.actions.add(i, {
                src: s.getUrl() || "",
                messageDataPost: e,
                resultName: t
            });
        },
        delete: () => Pde.actions.delete(i)
    }), lue(t, Tp.DATACHANGE).pipe(J((() => {
        const e = l();
        const t = e ? e.resultName : undefined;
        return Pde.actions.update(i, {
            messageDataPost: e,
            resultName: t
        });
    }))), a.pipe(J((e => e.birdElements.WebContent[i])), $((e => e !== undefined)), J((e => e.messageDataReceive)), q(), te((e => {
        try {
            t.selectFromJSONX(JSON.stringify(e));
        } catch (e) {
            console.error("Error stringifying JSON data", e);
        }
    })), oe()), t.getModel()?.getWebContentType() === Lf.WEBDATACONTENT ? Qfe(i, e, t, a, o) : V);
};

const Khe = (e, t, o, n, a, r) => {
    if (!(t instanceof $p)) {
        throw new Error("Expected the controller to be a KPIElementController");
    }
    const s = r.getKey(t);
    const i = a.pipe(J((e => e.birdElements.DataVisualizations[s])), $((e => e !== undefined && e.contentId !== undefined)), q(), J((e => e.contentId)));
    const l = Ige(e, t, o, n, a, r, {
        create: () => Lue.actions.add(s, {}),
        delete: () => Lue.actions.delete(s)
    }, {
        contentId$: i
    });
    return l;
};

const Whe = (e, t, o, n, a, r, s) => {
    const i = r.getKey(t);
    return age(e, t, o, n, a, r, s ?? {
        create: () => vue.actions.add(i, {}),
        delete: () => vue.actions.delete(i)
    });
};

const $he = (e, t, o, n, a, r) => {
    const s = r.getKey(t);
    const i = [];
    const l = t?.getPrimaryVisualElementController()?.getVisualElementName() ?? "";
    const c = a.pipe(J((e => gfe(e, l)?.isBusy)), q(), Q((e => z(Uue.actions.setBusy(s, {
        isBusy: e || false
    })))));
    if (e) {
        i.push(lue(e, Mc.GENERIC).pipe(Q((() => {
            const e = t.getPrimaryVisualElementController()?.getCurrentWarningEvent()?.getWarnings();
            const o = e?.[0]?.getMessage() || "";
            const n = e?.[0]?.getSeverity();
            if (n && n >= 90) {
                return z(Bue.actions.set(s, {
                    type: "error",
                    message: o
                }));
            } else {
                return z(Bue.actions.set(s, undefined));
            }
        }))));
    }
    {
        const e = t.getReportController()?.getViewControllerForName(t.getPrimaryVisualElementController()?.getVisualElementName() ?? null);
        const o = e instanceof Dm ? e.getPadding()?.getScalarValueForUnit(js.PIXELS, -1, 1) : undefined;
        i.push(z(jde.actions.update(s, {
            titlePadding: o
        })));
    }
    i.push(Qfe(s, e, t, a, o));
    const d = Whe(e, t, o, n, a, r, {
        create: () => vue.actions.add(s, {
            isComposite: true
        }),
        delete: () => vue.actions.delete(s)
    });
    return F(d, ...i, c);
};

const Yhe = (e, t, o, n, a, r) => {
    if (!(e instanceof Rm)) {
        throw new Error("Expected the controller to be a ContainerController");
    }
    if (!(t instanceof of)) {
        throw new Error("Expected the element controller to be a VisualPromptContainerElementController");
    }
    const s = r.getKey(e);
    const i = e.getResponsiveLayoutScrollDirection();
    const l = t.getModel();
    const c = [];
    const d = e.getContainerBackgroundStyleChain();
    if (d) {
        c.push(pue.actions.set(s, Ege(d)));
    }
    const u = t.getStyle();
    if (u) {
        const e = qhe(u);
        c.push(pue.actions.set(s + "-buttonbar", e ? {
            normal: {
                bg: e
            }
        } : undefined));
    }
    const m = uhe(e);
    if (m) {
        c.push(jde.actions.setPromptConstraints(s, m));
    }
    return F(Whe(e, t, o, n, a, r, {
        create: () => Aue.actions.add(s, {
            label: l?.getButtonText() ?? "",
            isHorizontal: i === Am.HORIZONTAL,
            autoApplyValues: !t.isActionEnabled(),
            isOpen: false,
            autoClose: true
        }),
        delete: () => Aue.actions.delete(s)
    }), H(c), n.pipe(iue(Aue.actionTypes.notifyApplyChanges), te((() => t.applyDeferredPromptValues())), oe()), n.pipe(iue(Aue.actionTypes.notifyCancelChanges), te((() => t.cancelDeferredPromptValues())), oe()), a.pipe(J((e => e.birdElements.PromptContainer[s])), $((e => e !== undefined)), q(), te((e => t.setActive(e.isOpen))), oe()));
};

function qhe(e) {
    const t = e.getParentStyle();
    if (t) {
        const o = e.getAttributeBundleForPredefinedStyleElement(Dc.BUTTONBAR);
        const n = t.getAttributeBundleForPredefinedStyleElement(Dc.BUTTONBAR);
        if (o && n && o !== n) {
            return Ku(o);
        }
    }
    return null;
}

const Xhe = (e, t, o, n, a, r, s) => {
    if (!(t instanceof wp)) {
        throw new Error("Expected the controller to be a MapElementController");
    }
    const i = r.getKey(t);
    const l = new lm;
    const c = t.getGraphModel()?.getLayout();
    const d = c instanceof nfe ? c.getLockNavigation() : false;
    const u = d ? V : F(lue(t, wp.MAP_BOUNDS_CHANGED), B((e => l.setFrameValidCallback(e))), n.pipe(iue(Mme.actionTypes.zoomIn), te((() => {
        if (t.canZoomIn()) {
            t.zoomIn();
        }
    }))), n.pipe(iue(Mme.actionTypes.zoomOut), te((() => {
        if (t.canZoomOut()) {
            t.zoomOut();
        }
    }))), n.pipe(iue(Mme.actionTypes.resetZoom), te((() => {
        t.resetView();
    })))).pipe(J((() => ({
        zoomInEnabled: t.canZoomIn(),
        zoomOutEnabled: t.canZoomOut()
    }))), q(((e, t) => e.zoomInEnabled === t.zoomInEnabled && e.zoomOutEnabled === t.zoomOutEnabled)), J((e => Mme.actions.setZoomCapabilities(i, e))));
    const m = _ge(e, t, o, n, a, r, s, l);
    return F(m, u);
};

const Zhe = (e, t, o, n, a, r) => {
    if (!(t instanceof Kp)) {
        throw new Error("Expected the controller to be a JobContentElementController");
    }
    const s = r.getKey(t);
    return F(age(e, t, o, n, a, r, {
        create: () => Mue.actions.add(s, {
            jobResultsUri: t.getJobResultsUri() || undefined
        }),
        delete: () => Mue.actions.delete(s)
    }), lue(t, Kp.READY).pipe(J((() => Mue.actions.setJobResultsUri(s, t.getJobResultsUri() || undefined)))));
};

class Jhe {
    constructor(e) {
        this._loaders = void 0;
        this._loaders = e;
    }
    _getLoaderForTypeId(e) {
        const t = rn.getTypeEntry(e);
        if (!t) {
            return undefined;
        }
        let o = this._loaders[t.moduleName];
        if (!o) {
            o = this._getLoaderForTypeId(t.parentTypeId);
        }
        return o;
    }
    getLoader(e) {
        const t = this._getLoaderForTypeId(Jo.getTypeId(e.getClosetAddress()));
        if (!t) {
            throw new Error(`Unable to find loader for controller ${e}`);
        }
        return t;
    }
}

const Qhe = new Jhe({
    "BIRD::ReportController": yhe,
    "BIRD::SectionController": Ihe,
    "BIRD::PositionedModelOwnerController": ppe,
    "BIRD::VisualController": _he,
    "BIRD::ContainerController": Mpe,
    "BIRD::MediaContainerController": Dge
});

const ebe = new Jhe({
    "BIRD::VisualElementController": age,
    "BIRD::PromptElementController": dhe,
    "BIRD::RangeSliderController": dhe,
    "BIRD::GraphElementController": _ge,
    "BIRD::ImageElementController": Dhe,
    "BIRD::TextElementController": Lhe,
    "BIRD::MapElementController": Xhe,
    "BIRD::TableElementController": Fhe,
    "BIRD::CrosstabElementController": Vhe,
    "BIRD::WebContentElementController": Ghe,
    "BIRD::JobContentElementController": Zhe,
    "BIRD::KPIElementController": Khe,
    "BIRD::VisualPromptContainerElementController": Yhe,
    "BIRD::VisualContainerElementController": Whe,
    "BIRD::CompositeContainerElementController": $he
});

function tbe(e) {
    return Qhe.getLoader(e);
}

function obe(e) {
    return ebe.getLoader(e);
}

class nbe {
    constructor() {
        this.getLoaderForController = tbe;
        this.getLoaderForVisualElementController = obe;
        this.getKey = Kde;
        this.getLayoutData = Wde;
        this.refreshLayoutConstraints = oue;
        this.doBirdLayout = aue;
        this.getLayoutState = qde;
    }
}

const abe = (e, t, o) => {
    const n = new Map;
    e.subscribe((e => {
        let t = e.payload?.id;
        if (!t && e.type === sue.actionTypes.UnloadBirdModel) {
            t = rbe(e.payload);
        }
        const o = n.get(t);
        if (o) {
            o.next(e);
        } else if (!t) {
            for (const t of n.values()) {
                t.next(e);
            }
        }
    }));
    return e.pipe(iue(sue.actionTypes.LoadBirdModel), Q((e => {
        const a = e.payload;
        const r = rbe(a);
        if (n.get(r)) {
            console.error(`Controller with key '${r}' already loaded`);
            return V;
        }
        const s = new A;
        n.set(r, s);
        const i = s.asObservable();
        const l = uue(a, i).pipe(Y(1), ce());
        l.subscribe((() => {
            const t = rbe(e.payload);
            n.delete(t);
        }));
        let c;
        if (a instanceof Vm) {
            const e = o.getLoaderForVisualElementController(a);
            c = e(null, a, l, i, t, o);
        } else {
            const e = o.getLoaderForController(a);
            c = e(a, l, i, t, o);
        }
        return c.pipe(cue(a), W(l.pipe(ge())));
    })));
};

function rbe(e) {
    if (e instanceof Pm) {
        e = kpe(e) ?? e;
    }
    if (e instanceof Dm || e instanceof Vm) {
        return Kde(e);
    }
    return Jo.getClosetKey(e.getClosetAddress()) + "";
}

const sbe = po(mpe, abe);

function ibe(e) {
    if (!e) {
        throw new Error("This handle is no longer valid");
    }
}

async function lbe(e, t) {
    return K(e.getSessionStatusNotifier().pipe(W(t), he((e => e === "ready" || e === "error")), J((t => {
        if (t === undefined) {
            throw new Error("Handle was invalidated before the report controller was created.");
        }
        if (t === "error") {
            throw new Error("An error occurred while loading the report.");
        }
        const o = e.getReportSession();
        if (!o) {
            throw new Error("Report session could not be created.");
        }
        return o;
    }))));
}

class cbe {
    constructor(e, t) {
        this._context = void 0;
        this._destroyed$ = new k(1);
        this._objectName = void 0;
        this._eventListeners = new Map;
        this._context = e;
        this._objectName = t;
    }
    get objectName() {
        return this._objectName;
    }
    get readyState() {
        if (!this._context) {
            return "error";
        }
        return this._context.getReadyState(this._objectName);
    }
    async canExportData() {
        ibe(this._context);
        await lbe(this._context, this._destroyed$);
        return this._context.canExportData(this._objectName);
    }
    async exportData(e, t) {
        ibe(this._context);
        await lbe(this._context, this._destroyed$);
        return this._context.exportData(this._objectName, e, t);
    }
    async exportPDF(e) {
        ibe(this._context);
        await lbe(this._context, this._destroyed$);
        return this._context.exportPDF({
            ...e,
            includedReportObjects: [ this._objectName ]
        });
    }
    async getExportDataInfo() {
        ibe(this._context);
        return this._context.getExportDataInfo(this._objectName);
    }
    refreshData() {
        ibe(this._context);
        if (this._context.getSessionStatusNotifier().getValue() !== "ready") {
            return;
        }
        const e = this._context.getReportController();
        const t = e?.getVisualElementControllerForVisualElementName(this._objectName);
        t?.getPrimaryVisualElementController()?.refreshData();
    }
    getSelectedData(e) {
        ibe(this._context);
        return this._context.getData(this._objectName, e?.formatData, true);
    }
    getData(e) {
        ibe(this._context);
        return this._context.getData(this._objectName, e?.formatData, false);
    }
    addEventListener(e, t) {
        ibe(this._context);
        const o = this._eventListeners.get(e) || new Set;
        for (const e of o) {
            if (e.callback === t) {
                return;
            }
        }
        const n = this._context.subscribeEvent(e, {
            type: "object",
            callback: t,
            objectHandle: this
        });
        if (n) {
            this._eventListeners.set(e, o.add({
                callback: t,
                handle: n
            }));
        }
    }
    removeEventListener(e, t) {
        const o = this._eventListeners.get(e);
        if (!o) {
            return;
        }
        for (const e of o) {
            if (e.callback === t) {
                e.handle.detach();
                o.delete(e);
                break;
            }
        }
    }
    destroy() {
        for (const e of this._eventListeners.values()) {
            for (const t of e.values()) {
                t.handle.detach();
            }
        }
        this._eventListeners.clear();
        this._context = null;
        this._destroyed$.next(true);
    }
}

class dbe {
    constructor(e) {
        this._context = void 0;
        this._objectHandles = new Map;
        this._destroyed$ = new k(1);
        this._eventListeners = new Map;
        this._context = e;
    }
    get readyState() {
        if (!this._context) {
            return "error";
        }
        return this._context.getReadyState();
    }
    async getObjectHandle(e) {
        ibe(this._context);
        const t = await this._getReportController();
        const o = t.getVisualElementControllerForVisualElementName(e);
        if (!o) {
            throw new Error(`The object ${e} could not be found in the report`);
        }
        let n = this._objectHandles.get(e);
        if (!n) {
            n = new cbe(this._context, e);
            this._objectHandles.set(e, n);
        }
        return n;
    }
    setReportParameters(e) {
        ibe(this._context);
        this._context.setParameters(e);
    }
    updateReportParameters(e) {
        ibe(this._context);
        this._context.updateParameters(e);
    }
    async exportPDF(e) {
        ibe(this._context);
        await lbe(this._context, this._destroyed$);
        return this._context.exportPDF(e);
    }
    async _getReportController() {
        ibe(this._context);
        const e = await lbe(this._context, this._destroyed$);
        const t = e.getReportController();
        if (!t) {
            throw new Error("Report controller could not be created.");
        }
        return t;
    }
    async _getReportSession() {
        ibe(this._context);
        return lbe(this._context, this._destroyed$);
    }
    async saveUserStateXML() {
        await this._getReportController();
        ibe(this._context);
        return this._context.saveUserStateXML();
    }
    refreshData() {
        ibe(this._context);
        if (this._context.getSessionStatusNotifier().getValue() !== "ready") {
            return;
        }
        this._context.getReportController()?.refreshData();
    }
    reloadReport(e) {
        ibe(this._context);
        this._context.reloadReport(e);
    }
    addEventListener(e, t) {
        ibe(this._context);
        const o = this._eventListeners.get(e) || new Set;
        for (const e of o) {
            if (e.callback === t) {
                return;
            }
        }
        const n = this._context.subscribeEvent(e, {
            type: "report",
            callback: t,
            reportHandle: this
        });
        if (n) {
            this._eventListeners.set(e, o.add({
                callback: t,
                handle: n
            }));
        }
    }
    removeEventListener(e, t) {
        const o = this._eventListeners.get(e);
        if (!o) {
            return;
        }
        for (const e of o) {
            if (e.callback === t) {
                e.handle.detach();
                o.delete(e);
                break;
            }
        }
    }
    destroy() {
        for (const e of this._eventListeners.values()) {
            for (const t of e.values()) {
                t.handle.detach();
            }
        }
        this._eventListeners.clear();
        for (const e of this._objectHandles.values()) {
            e.destroy();
        }
        this._objectHandles.clear();
        this._context = null;
        this._destroyed$.next(true);
    }
}

const ube = e => {
    const t = new Bl;
    const o = {
        paperSize: "letter",
        orientation: "landscape",
        margin: {
            top: .25,
            bottom: .25,
            left: .25,
            right: .25,
            units: "inches"
        },
        showPageNumbers: true,
        showEmptyRowsAndColumns: false,
        includeTableOfContents: false,
        includeAppendix: true,
        includeComments: false,
        includeDetailsTables: false,
        expandClippedContent: false,
        includeCoverPage: true,
        coverPageText: "",
        includedReportObjects: [],
        enablePdfAccessibleTags: false
    };
    const n = {
        ...o,
        ...e
    };
    n.margin = {
        ...o.margin,
        ...e.margin
    };
    const a = n.margin.units.toUpperCase() === "CENTIMETERS" ? "cm" : "in";
    t.setMarginTop(`${n.margin.top} ${a}`);
    t.setMarginBottom(`${n.margin.bottom} ${a}`);
    t.setMarginLeft(`${n.margin.left} ${a}`);
    t.setMarginRight(`${n.margin.right} ${a}`);
    t.setShowPageNumbers(n.showPageNumbers);
    t.setShowEmptyRowsAndColumns(n.showEmptyRowsAndColumns);
    t.setShowPrintedTableOfContents(n.includeTableOfContents);
    t.setShowAppendix(n.includeAppendix);
    t.setShowCoverPage(n.includeCoverPage);
    t.setCoverPageText(n.coverPageText);
    t.setTableOfContentsDisplay(Pl.THUMBNAILS);
    t.setEnablePdfAccessibleTags(n.enablePdfAccessibleTags);
    const r = n.orientation.toUpperCase();
    const s = [ "LANDSCAPE", "PORTRAIT" ].includes(r) ? r : "LANDSCAPE";
    t.setOrientation(Ol[s]);
    const i = n.includedReportObjects.join(" ");
    t.setReportElements(i);
    if (typeof n.paperSize === "object") {
        t.setPaperType(Ml.CUSTOM);
        const e = n.paperSize.units?.toUpperCase() === "CENTIMETERS" ? "cm" : "in";
        t.setPaperWidth(`${n.paperSize.width} ${e}`);
        t.setPaperHeight(`${n.paperSize.height} ${e}`);
    } else {
        const e = n.paperSize.toUpperCase();
        const o = [ "LETTER", "LEGAL", "LEDGER", "A3", "A4" ].includes(e) ? e : "LETTER";
        t.setPaperType(Ml[o]);
    }
    if (n.expandClippedContent === true) {
        t.setFitOption(Nl.EXPAND_CLIPPED_CONTENT_IN_APPENDIX);
    } else {
        t.setFitOption(Nl.NONE);
    }
    const l = [];
    if (n.includeComments) {
        l.push("comments");
    }
    if (n.includeDetailsTables) {
        l.push("supplementalTables");
    }
    t.setAppendixDisplay(l.join(" "));
    return t;
};

const mbe = async (e, t) => {
    const o = ube(t ? t : {});
    e.printReport(o);
    return new Promise(((t, o) => {
        e?.attachEventOnce(Of.PRINT_COMPLETED, (e => {
            if (!(e instanceof Of)) {
                throw new Error("Unable to export PDF");
            }
            const n = e.getPDFLocation();
            if (n) {
                t(n);
            } else {
                return o("URL not found");
            }
        }));
        e?.attachEventOnce(Mc.GENERIC, (e => o(e.getWarnings()?.[0]?.getMessage())));
    }));
};

const pbe = [ "XLSX", "CSV", "TSV" ];

const fbe = (e, t, o) => {
    e.setFileFormat(Bm[t]);
    if (!o) {
        return e;
    }
    if (o.startRow && o.startRow >= 0) e.setStartRow(o.startRow);
    if (o.endRow && o.endRow >= -1) e.setEndRow(o.endRow);
    e.setNumberFormat(o.formattedData === false ? zm.RAW : zm.FORMATTED);
    if (o.columns) {
        const t = e.getAvailableVariables();
        const n = [];
        for (const e of o.columns) {
            const o = t?.find((t => t?.getLabel() === e)) ?? t?.find((t => t?.getName() === e));
            if (o) {
                n.push(o);
            }
        }
        e.setSelectedVariables(n);
    }
    return e;
};

const gbe = (e, t) => new Promise(((o, n) => {
    e.attachEventOnce(Fm.EXPORT_READY, (() => {
        if (t) {
            t.attachEventOnce(Fm.EXPORT_READY, (() => {
                o(t);
            }));
            t.attachEventOnce(Fm.EXPORT_WARNING, (() => {
                e?.release();
                t?.release();
                return n("Export detail controller failed");
            }));
            t.prepare();
        } else {
            o(e);
        }
    }));
    e.prepare();
}));

const hbe = (e, t) => {
    const o = e.getExportDataController();
    if (!o) {
        throw new Error("Export controller not found");
    }
    let n;
    if (t) {
        n = o.getExportDetailController();
    }
    return [ o.retain(), n?.retain() ];
};

const bbe = (e, t) => {
    const [o, n] = hbe(e, t);
    const a = t ? n : o;
    if (!a) {
        o?.release();
        n?.release();
        throw new Error("Export controller failed to prepare");
    }
    const r = [];
    for (const e of a.getAvailableVariables() || []) {
        if (e) r.push({
            name: e.getName() || "",
            label: e.getLabel() || ""
        });
    }
    o?.release();
    n?.release();
    return {
        rowCount: a.getEndRow(),
        columnInfo: r
    };
};

const vbe = e => {
    const t = e.getExportDataController();
    if (!t) {
        return false;
    }
    return true;
};

const ybe = async (e, t, o) => {
    if (!pbe.includes(t)) {
        throw new Error(`Expected a format of type "XLSX", "CSV", or "TSV". Received: ${t}`);
    }
    const [n, a] = hbe(e, o?.detailedData || false);
    const r = await gbe(n, a);
    const s = fbe(r, t, o);
    return new Promise(((e, t) => {
        s.attachEventOnce(Fm.EXPORT_COMPLETED, (o => {
            n?.release();
            a?.release();
            if (o instanceof Bp) {
                const n = o.getExportURL()?.getFinishedURLString();
                if (!n) {
                    return t("Failed to retrieve export URL");
                } else {
                    return e(n);
                }
            } else {
                return t("Failed to complete export");
            }
        }));
        s.attachEventOnce(Fm.EXPORT_WARNING, (() => {
            n?.release();
            a?.release();
            return t("Export failed");
        }));
        s.submit();
    }));
};

function xbe(e, t) {
    if (!e) {
        return t.toString();
    }
    const o = the(e) || the("BEST6");
    return o.format(t) || "";
}

function Sbe(e, t) {
    return the("COMMA.", t).parse(e);
}

var wbe, Cbe, Ebe;

const Ibe = Hg["SASReport.genericError.msg"]();

const _be = new Map;

window.addEventListener("beforeunload", (function() {
    if (!$g()) {
        return;
    }
    const e = new Set;
    for (const [t, o] of _be) {
        if (!o._isFullReport) {
            continue;
        }
        const t = o._report;
        const n = o._session;
        if (n && t instanceof ole && !e.has(t)) {
            e.add(t);
            n.savePrimaryState();
        }
    }
}));

function Dbe(e, t) {
    return `${Lbe(e.identifierOrLocation, e.getServer().getUrl())}:${t}`;
}

function Lbe(e, t) {
    return `${e}:${t}`;
}

function Tbe(e, t, o) {
    const n = e.getAllSectionControllers();
    if (!n) {
        return false;
    }
    for (const e of n) {
        const n = kpe(e);
        for (const e of o) {
            const o = Ape(n, e);
            if (o instanceof Mm) {
                const e = !!Ape(o, t);
                if (e) {
                    return true;
                }
            }
            const a = Ape(n, t);
            if (a instanceof Mm) {
                const t = !!Ape(a, e);
                if (t) {
                    return true;
                }
            }
        }
    }
    return false;
}

function Rbe(e, t) {
    const o = t.getAllSectionControllers();
    if (!o) {
        return undefined;
    }
    if (typeof e === "number") {
        return o[e] ?? undefined;
    }
    const n = o.find((t => {
        if (!t) {
            return false;
        }
        const o = t.getModel();
        if (o && o.getName() === e) {
            return true;
        }
        return false;
    }));
    return n ?? undefined;
}

function kbe(e, t) {
    if (!(e instanceof Mc)) {
        return false;
    }
    const o = e.getWarnings()?.find((e => {
        const o = e?.getWarningType();
        if (o === undefined) {
            return false;
        }
        return t.includes(o);
    }));
    return !!o;
}

let Abe = (wbe = class e {
    constructor(e, t, o, n) {
        this._report = null;
        jo(this, "_session", Cbe, this);
        this._retainCount = 0;
        jo(this, "_viewSet", Ebe, this);
        this._rawViews = void 0;
        this._isFullReport = void 0;
        this._contextKey = void 0;
        this._destroyed$ = new k(1);
        this._viewSet$ = new R([]);
        this._graphCSS = void 0;
        this._parameters = void 0;
        this._dateParameterTypes = {};
        this._handle = void 0;
        this._sessionStatus$ = new R("initial");
        this._reportStoreStates = new Map;
        this._contextKey = o;
        this._report = e.retain();
        this._isFullReport = t;
        this._graphCSS = n;
        if (!this._isFullReport) {
            this._rawViews = [];
        }
        this._handle = new dbe(this);
        M([ e.getReportStateNotifier(), this._viewSet$ ]).pipe(W(this._destroyed$)).subscribe((([e, t]) => {
            this._reportStoreStates.forEach((o => {
                this._processStore(o, e, t);
            }));
            if (e === "loading" && this._sessionStatus$.getValue() !== "initial") {
                this._session?.closeReport();
                this._session = null;
                this._sessionStatus$.next("initial");
            }
        }));
        e.getErrorNotifier().pipe(W(this._destroyed$)).subscribe((e => {
            this._reportStoreStates.forEach((({store: t}) => {
                t.dispatch(Dme.actions.setTransportError(e));
            }));
        }));
        e.getServer().getStatusNotifier().pipe(W(this._destroyed$)).subscribe((e => {
            this._reportStoreStates.forEach((({store: t}) => {
                t.dispatch(Dme.actions.setConnectionStatus(e));
            }));
        }));
        this.getSessionStatusNotifier().pipe(W(this._destroyed$)).subscribe((e => {
            if (e === "error") {
                this._reportStoreStates.forEach((({store: e}) => {
                    e.dispatch(Dme.actions.setTransportError(Ibe));
                }));
            }
        }));
    }
    _processStore(e, t, o) {
        const {store: n, reportAddedToStore: a, objectName: r} = e;
        if (t === "ready") {
            if (!a && (r === undefined || o.includes(r))) {
                this._addReportToStore(n, r);
                e.reportAddedToStore = true;
            }
        } else if (t === "loading") {
            const t = this._session?.getReportController();
            if (a && t) {
                n.dispatch(sue.actions.unloadBirdModel(t));
                n.dispatch(Dme.actions.setTransportErrorKey(undefined));
                n.dispatch(Dme.actions.setTransportError(undefined));
                n.dispatch(Dme.actions.setReportLoaded("reload"));
                n.dispatch(Dme.actions.setThemeLoaded(false));
                n.dispatch(Dme.actions.setReportContentComplete(false));
                e.reportAddedToStore = false;
            }
        } else {
            n.dispatch(Dme.actions.setReportLoaded("reload"));
        }
    }
    _getSession() {
        if (this._session) {
            return this._session;
        }
        if (!this._report) {
            console.error("ReportContext has unexpectedly been destroyed");
            return null;
        }
        if (this._report.getReportState() !== "ready") {
            return;
        }
        if (this._rawViews && !this._viewSet) {
            this._viewSet = new Jm;
            this._viewSet.setIncluded(this._rawViews.filter((e => typeof e === "string")));
        }
        this._session = this._report.createSession(this._viewSet, this._graphCSS);
        if (!this._session) {
            console.error("unable to create Report Session");
            this._sessionStatus$.next("error");
            return;
        }
        this._synchronizeViews();
        const e = this._session.getReportController();
        if (!e) {
            console.error("unable to get ReportController");
            this._sessionStatus$.next("error");
            return;
        }
        const t = e.getModel()?.getPromptDefinitions();
        if (t) {
            for (const e of t) {
                const t = e?.getFormat();
                const o = e?.getLabel();
                if (o && t) {
                    const e = sc.instance()?.getFormatterForFormatName(t);
                    if (e) {
                        if (e.isDateTimeFormat()) {
                            this._dateParameterTypes[o] = "datetime";
                        } else if (e.isDateFormat()) {
                            this._dateParameterTypes[o] = "date";
                        } else if (e.isTimeFormat()) {
                            this._dateParameterTypes[o] = "time";
                        }
                    }
                }
            }
        }
        if (this._parameters) {
            this.setParameters(this._parameters);
        }
        const o = e.getWarnings();
        if (o) {
            for (const e of o) {
                if (!e) {
                    continue;
                }
                if (e.getLevel() === Js.FATAL_LEVEL) {
                    console.error(e.getMessage() || Ibe);
                    this._sessionStatus$.next("error");
                    return;
                } else {
                    console.warn("ReportContext: ", e.getMessage());
                }
            }
        }
        this._sessionStatus$.next("ready");
        return this._session;
    }
    getSessionStatusNotifier() {
        return this._sessionStatus$;
    }
    getReportSession() {
        return this._getSession() ?? undefined;
    }
    getReportController() {
        return this.getReportSession()?.getReportController() || undefined;
    }
    findStoreState(e) {
        for (const t of this._reportStoreStates.values()) {
            if (t.objectName === e) {
                return t;
            }
        }
        return undefined;
    }
    calculateReadyState(e, t) {
        if (!t || t.transport.transportError) {
            return "error";
        }
        const o = e === "report" ? t?.transport.reportContentComplete : t?.transport.reportObjectContentComplete;
        if (t?.transport.reportLoaded === "reload") {
            return "loading";
        }
        if (t?.transport.reportLoaded) {
            if (o) {
                return "complete";
            } else {
                return "contentLoading";
            }
        } else {
            return "loading";
        }
    }
    getReadyState(e) {
        if (e) {
            const t = this.getReportController()?.getVisualElementControllerForVisualElementName(e);
            if (!t || !this._session) {
                return "error";
            }
        }
        const t = this.findStoreState(e)?.store;
        if (!t) {
            return "error";
        }
        const o = this.calculateReadyState(e ? "object" : "report", t.getState());
        if (!o || this.getSessionStatusNotifier().value === "error") {
            return "error";
        } else {
            return o;
        }
    }
    exportPDF(e) {
        const t = this._session;
        if (!t) {
            throw new Error("Unable to get ReportSession");
        }
        return mbe(t, e);
    }
    exportData(e, t, o) {
        const n = this.getReportController()?.getVisualElementControllerForVisualElementName(e);
        if (!n) {
            throw new Error("The requested object name does not exist.");
        }
        return ybe(n, t, o);
    }
    getData(e, t = "datesOnly", o) {
        const n = this.getReportController()?.getVisualElementControllerForVisualElementName(e);
        if (!n || !(n instanceof Ip)) {
            throw new Error(`Visual element not found for object name: ${e}`);
        }
        const a = o ? n.getDataSetsForSelections() : n.getAllDataSets();
        if (!a || !a.length) {
            return [];
        }
        const r = [];
        for (const e of a) {
            const o = [];
            const n = [];
            const a = e?.getColumns();
            const s = e?.getName();
            if (!a || !a.length || !s) {
                continue;
            }
            for (const e of a) {
                const a = e?.getName();
                const r = e?.getLabel();
                const s = e?.isDateTime();
                const i = e?.getDataType() === 0 ? "number" : "string";
                const l = e?.getNumberOfRows();
                if (!a || !r || !i || !l) {
                    continue;
                }
                for (let o = 0; o < l; o++) {
                    const a = e?.getDataValueAtIndex(o, true);
                    let r;
                    if (s) {
                        const o = a?.getNumericValue();
                        const n = e?.getFormatName();
                        if (!o || !n) {
                            continue;
                        }
                        r = t ? xbe(n, o) : o;
                    } else {
                        if (t === true) {
                            r = a?.getFormattedValue();
                        } else {
                            r = i === "number" ? a?.getNumericValue() : a?.getStringValue();
                        }
                    }
                    if (!n[o]) {
                        n[o] = [];
                    }
                    if (r === null || r === undefined) {
                        n[o].push(i === "number" ? NaN : ".");
                    } else {
                        n[o].push(r);
                    }
                }
                o.push({
                    name: a,
                    label: r,
                    type: i
                });
            }
            if (n.length > 0) {
                r.push({
                    resultName: s,
                    rowCount: n.length,
                    columns: o,
                    data: n
                });
            }
        }
        return r;
    }
    subscribeEvent(e, t) {
        if (e === "readyStateChanged") {
            const o = this.findStoreState(t.type === "object" ? t.objectHandle.objectName : undefined)?.store;
            if (!o) {
                return;
            }
            let n = this.calculateReadyState(t.type, o.getState());
            if (t.type === "object" && (n === "complete" || n === "error")) {
                return;
            }
            const a = o.subscribe((() => {
                const r = this.calculateReadyState(t.type, o.getState());
                if (t.type === "object" && (r === "complete" || r === "error")) {
                    a();
                }
                if (n !== r) {
                    if (t.type === "object") {
                        t.callback({
                            type: e,
                            target: t.objectHandle
                        });
                    } else {
                        t.callback({
                            type: e,
                            target: t.reportHandle
                        });
                    }
                    n = r;
                }
            }));
            return {
                detach: a
            };
        } else if (t.type === "object" && e === "selectionChanged") {
            const o = () => {
                t.callback({
                    type: e,
                    target: t.objectHandle
                });
            };
            const n = this.getReportController()?.getVisualElementControllerForVisualElementName(t.objectHandle.objectName)?.attachEvent(Pc.SELECTION_CHANGED, o);
            if (n) {
                return n;
            }
        }
    }
    getExportDataInfo(e) {
        const t = this.getReportController()?.getVisualElementControllerForVisualElementName(e);
        if (!t) {
            throw new Error("The requested object name does not exist.");
        }
        return bbe(t);
    }
    canExportData(e) {
        const t = this.getReportController()?.getVisualElementControllerForVisualElementName(e);
        if (!t) {
            return false;
        }
        return vbe(t);
    }
    async saveUserStateXML() {
        const e = this._session?.getReportManager();
        const t = this._session?.getReport();
        const o = this._session?.getReportController();
        if (!e) {
            throw new Error("Unable to get ReportManager");
        }
        if (!t) {
            throw new Error("Unable to get Report");
        }
        if (!o) {
            throw new Error("Unable to get ReportController");
        }
        o.saveUserState();
        const n = this._session?.getSASReportConfiguration()?.getFullyQualifiedPathToBIRDReportDirectory();
        return new Promise((e => {
            e(Jo.getStringContentsOfFile(`${n}/userStateReport.xml`));
        }));
    }
    initializeStore(e) {
        const t = dpe();
        const o = this.report?.getServer();
        if (!o || !this.report) {
            t.dispatch(Dme.actions.setTransportError(Hg["SASServer.genericError.msg"]()));
            return t;
        }
        if (this._isFullReport && e !== undefined || !this._isFullReport && e === undefined || this._rawViews && e !== undefined && this._rawViews.indexOf(e) !== -1) {
            t.dispatch(Dme.actions.setTransportErrorKey({
                key: "ReportObject.multipleReferences.error.txt"
            }));
            return t;
        }
        const n = {
            reportAddedToStore: false,
            objectName: e,
            store: t
        };
        this._reportStoreStates.set(t, n);
        this._processStore(n, this.report.getReportState(), this._rawViews || []);
        return t;
    }
    destroyStore(e) {
        const t = this.getReportController();
        if (t) {
            e.dispatch(sue.actions.unloadBirdModel(t));
        }
        this._reportStoreStates.delete(e);
    }
    _addReportToStore(e, t) {
        const o = this._getSession();
        if (!o) {
            return;
        }
        const n = this.report?.getServer();
        if (!this.report || !n) {
            e.dispatch(Dme.actions.setTransportError(Ibe));
            console.error("Server not found");
            return;
        }
        const a = o.getReportController();
        if (!a) {
            e.dispatch(Dme.actions.setTransportError(Ibe));
            console.error("Unable to get ReportController");
            return;
        }
        if (t !== undefined) {
            let o = t;
            if (typeof o === "number") {
                const n = this._getNameForSectionIndex(o);
                if (!n) {
                    e.dispatch(Dme.actions.setTransportErrorKey({
                        key: "ReportObject.invalidPage.error.txt"
                    }));
                    console.error(`Page index ${t} is out of range`);
                    return;
                }
                o = n;
            }
            e.dispatch(Fue.actions.setViewSetReport(true));
            const n = this._viewSet ? this._viewSet.getIncluded() : null;
            if (!n) {
                e.dispatch(Dme.actions.setTransportError(Ibe));
                console.error("viewSet returned null");
                return;
            }
            if (!n.includes(o)) {
                e.dispatch(Dme.actions.setTransportErrorKey({
                    key: "ReportObject.multipleReferences.error.txt"
                }));
                console.error("Report objects cannot be used in multiple contexts.");
                return;
            }
            const r = Rbe(t, a);
            if (r !== undefined) {
                if (a.getCurrentSectionController() !== r) {
                    a.attachEventOnce(dp.CURRENT_SECTION_CHANGED, (() => {
                        a.popHiddenSection();
                        a.release();
                        this._finalizeStore(e, a);
                    }));
                    a.retain();
                    a.setCurrentSectionIndex(r.getSectionIndex());
                } else {
                    this._finalizeStore(e, a);
                }
            } else {
                e.dispatch(Fue.actions.setReportObjectName(o));
                this._finalizeStore(e, a);
            }
        } else {
            this._finalizeStore(e, a);
        }
    }
    _finalizeStore(e, t) {
        if (this.report) {
            const t = this.report.getServer();
            e.dispatch(Dme.actions.setServerType(t.getServerType()));
            let o = t.getUrl();
            if (o.endsWith("/")) {
                o = o.slice(0, -1);
            }
            e.dispatch(Dme.actions.setServerHost(o));
            let n = `${o}/${this.report.identifierOrLocation}`;
            if (!n.endsWith("/")) {
                n += "/";
            }
            e.dispatch(Dme.actions.setPackageUrl(n));
            e.dispatch(Dme.actions.setIframeSandbox(t.getIframeSandbox()));
        }
        e.dispatch(Fue.actions.setReportLabel(t.getModel()?.getLabel() || ""));
        e.dispatch(sue.actions.loadBirdModel(t));
        e.dispatch(Dme.actions.setReportLoaded(true));
    }
    addToViewSet(e) {
        if (e === undefined) {
            return;
        }
        if (!this._rawViews) {
            this._rawViews = [];
        }
        this._rawViews.push(e);
        this._synchronizeViews();
        this._viewSet$.next(this._rawViews);
    }
    removeFromViewSet(e) {
        if (e === undefined) {
            return;
        }
        if (this._rawViews) {
            const t = this._rawViews.indexOf(e);
            if (t !== -1) {
                this._rawViews.splice(t, 1);
                this._synchronizeViews();
                this._viewSet$.next(this._rawViews);
            }
        }
    }
    _synchronizeViews() {
        if (!this._session || !this._rawViews) {
            return;
        }
        const e = this._session.getReportController();
        if (!e) {
            return;
        }
        const t = this._rawViews.map((e => typeof e === "number" ? this._getNameForSectionIndex(e) : e)).reduce(((t, o) => {
            if (!o || Tbe(e, o, t)) {
                return t;
            }
            t.push(o);
            return t;
        }), []);
        if (!this._viewSet) {
            this._viewSet = new Jm;
        }
        this._viewSet.setIncluded(t);
    }
    _getNameForSectionIndex(e) {
        if (!this._session) {
            return;
        }
        const t = this._session.getReportController();
        if (!t) {
            return;
        }
        const o = t.getAllSectionControllers();
        if (!o) {
            return;
        }
        const n = o[e];
        if (!n) {
            return;
        }
        const a = n.getModel();
        if (!a) {
            return;
        }
        const r = a.getName();
        if (r) {
            return r;
        }
    }
    get report() {
        return this._report;
    }
    get url() {
        if (this._report) {
            return this._report.getServer().getUrl();
        } else {
            return "";
        }
    }
    getParameters() {
        return this._parameters;
    }
    setParameters(e = {}) {
        const t = this._parameters ?? {};
        this._parameters = e;
        const o = this._session?.getReportController();
        if (!o) {
            return;
        }
        this.updateParameters(e);
        const n = [];
        const a = Object.keys(e);
        const r = Hde(o.getInitialReportParameterValues());
        for (const e of r) {
            const t = e.getLabel();
            if (t && !a.includes(t)) {
                n.push(t);
                o.setReportParameterValue(e);
            }
        }
        for (const e of Object.keys(t)) {
            if (!a.includes(e) && !n.includes(e)) {
                const t = new Wm;
                t.setLabel(e);
                t.setValues(null);
                o.setReportParameterValue(t);
            }
        }
    }
    updateParameters(e) {
        this._parameters = {
            ...this._parameters,
            ...e
        };
        const t = this._session?.getReportController();
        if (!t) {
            return;
        }
        for (const o of Object.keys(e)) {
            const n = e[o];
            const a = new Wm;
            a.setLabel(o);
            if (n === null || n === undefined || n === "") {
                a.setValues(null);
            } else if (this._dateParameterTypes[o]) {
                const e = Array.isArray(n) ? n : [ n ];
                const t = this._dateParameterTypes[o];
                a.setValues(e.map((e => {
                    if (typeof e === "string" || typeof e === "number") {
                        return e + "";
                    }
                    switch (t) {
                      case "datetime":
                        return Wge(e) + "";

                      case "date":
                        return Yge(e) + "";

                      case "time":
                        return Xge(e) + "";
                    }
                    return null;
                })));
            } else {
                a.setValues(Array.isArray(n) ? n.map((e => e + "")) : [ n + "" ]);
            }
            t.setReportParameterValue(a);
        }
    }
    getReportHandle() {
        return this._handle;
    }
    _saveState(e) {
        if (!(this.report instanceof ole) || !this._session) {
            return;
        }
        this.report.setUserStateSaving(true);
        const t = this._session.attachEvent(es.ALL, (o => {
            const n = o.getType();
            if (n === Mf.STATE_SAVED) {
                t.detach();
                const o = this.report;
                if (e) {
                    this._destroy();
                }
                if (o instanceof ole) {
                    o.setUserStateSaving(false);
                }
            } else if (n === Mc.GENERIC && kbe(o, [ Mf.STATE_NOT_SAVED, Mf.STATE_NOT_SUPPORTED ])) {
                t.detach();
                if (this._report) {
                    console.error(`Failed to save user state for report ${Lbe(this._report.identifierOrLocation, this._report.getServer().getUrl())}`);
                }
                const o = this.report;
                if (e) {
                    this._destroy();
                }
                if (o instanceof ole) {
                    o.setUserStateSaving(false);
                }
            }
        }));
        this._session.savePrimaryState();
    }
    reloadReport(e) {
        if (!(this.report instanceof ole)) {
            console.error("Refresh only supported for server connected reports.");
            return;
        }
        if (!e && $g()) {
            this._saveState(false);
        } else {
            this.report.reload(e);
        }
    }
    retain() {
        this._retainCount++;
        return this;
    }
    release() {
        if (this._retainCount <= 0) {
            throw new Error("ReportContext released without being retained");
        }
        this._retainCount--;
        if (this._retainCount === 0) {
            if (this._report && this._session && $g() && this._isFullReport && this.report instanceof ole) {
                _be.delete(Dbe(this._report, this._contextKey));
                this.report.setUserStateSaving(true);
                this._saveState(true);
            } else {
                this._destroy();
            }
        }
    }
    _destroy() {
        this._handle.destroy();
        if (this._report) {
            _be.delete(Dbe(this._report, this._contextKey));
            this._report.release();
            this._report = null;
            if (this._session) {
                this._session.closeReport();
            }
            this._session = null;
            this._viewSet = null;
        }
        this._destroyed$.next(true);
        this._sessionStatus$.complete();
        this._reportStoreStates.clear();
    }
}, Cbe = Vo(wbe.prototype, "_session", [ um ], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function() {
        return null;
    }
}), Ebe = Vo(wbe.prototype, "_viewSet", [ um ], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function() {
        return null;
    }
}), Vo(wbe.prototype, "_destroy", [ mm ], Object.getOwnPropertyDescriptor(wbe.prototype, "_destroy"), wbe.prototype), 
wbe);

function Mbe(e) {
    const {isFullReport: t, contextKey: o, graphCSS: n, ...a} = e;
    const r = Ede(a);
    let s = _be.get(Dbe(r, e.contextKey));
    if (!s) {
        s = new Abe(r, t ?? true, o, n);
        _be.set(Dbe(r, o), s);
    }
    return s;
}

class Nbe {
    constructor(e, t) {
        this.reportContext = void 0;
        this.store = void 0;
        this.objectName = void 0;
        this.unsubscribe = void 0;
        this.reportContext = Mbe({
            url: e.url,
            reportUri: e.reportUri,
            authenticationType: e.authenticationType || "credentials",
            isFullReport: false
        }).retain();
        const o = this.reportContext.initializeStore(e.objectName);
        this.reportContext.addToViewSet(e.objectName);
        this.objectName = e.objectName;
        this.store = o;
        let n = null;
        this.unsubscribe = o.subscribe((() => {
            const a = o.getState();
            if (a.birdElements) {
                const o = a.birdElements.WebContent;
                if (o) {
                    const a = o[e.objectName];
                    if (a) {
                        const e = a.messageDataPost;
                        if (e && e !== n) {
                            n = e;
                            t({
                                ...n,
                                postMessage: postMessage
                            });
                        }
                    }
                }
            }
        }));
    }
    dispatch(e) {
        this.store.dispatch(Pde.actions.update(this.objectName, {
            messageDataReceive: e
        }));
    }
    deregister() {
        this.unsubscribe();
        this.reportContext.removeFromViewSet(this.objectName);
        this.reportContext.release();
    }
}

function Obe(e, t) {
    return new Nbe(e, t);
}

const Pbe = new Set;

function Bbe(e, t) {
    if (Pbe.has(e)) {
        return;
    }
    Pbe.add(e);
    console.debug(t);
}

const zbe = function t(n) {
    {
        Bbe(n.id, `Unable to resolve component with id ${n.id}`);
        return e.createElement(o, null);
    }
};

function Fbe(e) {
    const t = {
        overflowX: "hidden",
        overflowY: "hidden",
        height: "100%",
        display: "flex",
        flexShrink: 1,
        position: "relative"
    };
    if (e.scrollbars) {
        if (e.scrollbars.horizontal) {
            t.overflowX = "scroll";
        }
        if (e.scrollbars.vertical) {
            t.overflowY = "scroll";
        }
    }
    return t;
}

const jbe = function(t) {
    var o;
    const n = ((o = t.elementState.Container[t.id]) === null || o === void 0 ? void 0 : o.isComposite) ? t.accessibilityLabel : undefined;
    return e.createElement("div", {
        "aria-label": n,
        style: Fbe(t.layoutState)
    }, tTe(t.layoutState.childKeys, t.elementState));
};

const Vbe = yo(((e, t) => ({
    layoutState: bfe(e, t.id),
    elementState: Efe(e),
    accessibilityLabel: Gfe(e, t.id)
})))(jbe);

const Hbe = {
    "Alerts.noAlerts.txt": () => `No alerts are set for this report.`,
    "BirdImage.image.txt": () => `Image`,
    "ComboBox.clearFilter.txt": () => `Clear Filter`,
    "ComboBox.defautValueNoData.fmt": ({categoryValue: e}) => `${e} (No Data)`,
    "ContextMenu.selectAll.txt": () => `Select all`,
    "ContextMenu.clearSelection.txt": () => `Clear selection`,
    "ContextMenu.exportImage.txt": () => `Export as Image`,
    "ContextMenu.sortAscending.fmt": ({role: e}) => `${e}: Ascending`,
    "ContextMenu.sortDescending.fmt": ({role: e}) => `${e}: Descending`,
    "ContextMenu.sortAddAscending.fmt": ({role: e}) => `${e}: Add ascending`,
    "ContextMenu.sortAddDescending.fmt": ({role: e}) => `${e}: Add descending`,
    "ContextMenu.removeSortItem.fmt": ({role: e}) => `Remove ${e} from sort`,
    "ContextMenu.removeSortLevel.txt": () => `Remove sort level`,
    "ContextMenu.sort.txt": () => `Sort`,
    "ContextMenu.selectShortestPath.txt": () => `Select shortest path`,
    "ContextMenu.explain.txt": () => `Explain data`,
    "ContextMenu.explainRole.txt": ({role: e}) => `Explain ${e}...`,
    "ContextMenu.manageColumns.txt": () => `Manage columns`,
    "DrillableTooltip.drill.txt": () => `DRILL`,
    "DrillableTooltip.tooltip.txt": () => `TOOLTIP`,
    "DrillableTooltip.links.txt": () => `LINKS`,
    "DrillableTooltip.section.link.fmt": ({page: e}) => `Page Link to ${e}`,
    "DrillableTooltip.report.link.fmt": ({report: e}) => `Report Link to ${e}`,
    "DrillableTooltip.external.link.fmt": ({url: e}) => `External Link to ${e}`,
    "DrillableTooltip.notAvailable.txt": () => `Not available`,
    "Breadcrumb.all.fmt": ({label: e}) => `All ${e}`,
    "BrowserCheck.title.txt": () => `WebGL Check`,
    "BrowserCheck.msg.txt": () => `WebGL is either disabled or not supported by your browser.   \nClick OK to view the report in the classic viewer.`,
    "EmailUtil.subject.multiple.txt": () => `Reports for review`,
    "EmailUtil.tooLongEmail.txt": () => `The email length limit was exceeded. Select fewer reports to email.`,
    "HiddenSectionDialog.close.txt": () => `Close`,
    "HiddenSectionDialog.export.txt": () => `Export as PDF`,
    "InfoPanel.information.txt": () => `Information`,
    "InfoPanel.comments.txt": () => `Comments`,
    "InfoPanel.alerts.txt": () => `Alerts`,
    "IncomingFilters.promptbars.txt": () => `Prompt Bars`,
    "Information.title.txt": () => `Title`,
    "Information.name.txt": () => `Name:`,
    "Information.description.txt": () => `Description:`,
    "Information.displayRules.txt": () => `Display rules:`,
    "Information.graphLevel.txt": () => `Graph Level`,
    "Information.reportLevel.txt": () => `Report Level`,
    "Information.legend.txt": () => `Legend`,
    "Information.incomingFilters.txt": () => `Incoming filters:`,
    "Information.noIncomingFilters.txt": () => `No Incoming Filters`,
    "Information.dataSourceFilters.txt": () => `Data source filters:`,
    "Information.interactiveFilters.txt": () => `Interactive filters:`,
    "MobileContainer.mobileBIMessage.txt": () => `Access SAS reports on your mobile device.`,
    "ObjectTypes.report.txt": () => `Report`,
    "ObjectTypes.Report.BI.txt": () => `SAS report (2G)`,
    "ObjectTypes.Report.StoredProcess.txt": () => `Stored process report`,
    "ObjectTypes.StoredProcess.txt": () => `Stored process`,
    "MissingValues.label.txt": () => `(missing values)`,
    "PromptContainer.apply.txt": () => `OK`,
    "PromptContainer.cancel.txt": () => `Cancel`,
    "PromptContainer.close.txt": () => `Close`,
    "TextFieldTypeAhead.validation.range.fmt": ({min: e, max: t}) => `Value must be a number between ${e} and ${t}, inclusive.`,
    "TextFieldTypeAhead.validation.numeric.txt": () => `Specify a valid numeric value.`,
    "TextFieldTypeAhead.validation.string.txt": () => `Value is not valid for the assigned data.`,
    "TextFieldTypeAhead.categoryAndMeasureTooltip.fmt": ({categoryLabel: e, measureLabel: t}) => `Enter: ${e}, ${t}`,
    "TextFieldTypeAhead.categoryTooltip.fmt": ({categoryLabel: e}) => `Enter: ${e}`,
    "TextFieldTypeAhead.placeholder.fmt": ({placeholderLabel: e}) => `Enter ${e}...`,
    "RangeSlider.tooltip.fmt": ({label: e, min: t, max: o}) => `${e}: ${t} - ${o}`,
    "PromptElement.categoryLabelValueAndMeasureLabelValueTooltip.fmt": ({categoryLabel: e, categoryValue: t, measureLabel: o, measureValue: n}) => `${e}: ${t}, ${o}: ${n}`,
    "PromptElement.categoryLabelValueTooltip.fmt": ({categoryLabel: e, categoryValue: t}) => `${e}: ${t}`,
    "ReportContainer.back.txt": () => `Back`,
    "ReportContainer.reportCorrupted.txt": () => `REPORT CORRUPTED`,
    "ReportContainer.themeLoadFailed.txt": () => `Failed to load report theme.`,
    "ReportContainer.restoreButton.tip.txt": () => `Restore report`,
    "ReportContainer.restoreButtonAriaAnnounce.txt": () => `Report restored`,
    "ReportContainer.renderError.txt": () => `An error occurred. The report could not be displayed.`,
    "ReportContainer.component.renderError.txt": () => `An error occurred. The component could not be rendered.`,
    "ReportContentPage.open.txt": () => `Open...`,
    "ReportContentPage.refreshReport.txt": () => `Refresh report`,
    "ReportContentPage.editReport.txt": () => `Edit report`,
    "ReportContentPage.print.txt": () => `Print...`,
    "ReportContentPage.email.txt": () => `Email...`,
    "ReportContentPage.export.txt": () => `Export to Excel...`,
    "ReportContentPage.reportProperties.txt": () => `Report Properties`,
    "ReportContentPage.shareReport.txt": () => `Share report`,
    "ReportContentPage.enableOverlays.txt": () => `Enable object overlays`,
    "ReportContentPage.disableOverlays.txt": () => `Disable object overlays`,
    "ReportContentPage.link.txt": () => `Link...`,
    "ReportContentPage.settings.txt": () => `Settings...`,
    "ReportContentPage.editPlayback.txt": () => `Edit playback`,
    "ReportContentPage.playReport.txt": () => `Play report`,
    "ReportContentPage.showFiltersButton.tip.txt": () => `Show prompted filters`,
    "ReportContentPage.hideFiltersButton.tip.txt": () => `Hide prompted filters`,
    "ReportContentPage.reportFilters.txt": () => `Report level`,
    "ReportContentPage.pageFilters.txt": () => `Page level`,
    "ReportContentPage.refreshRequired.txt": () => `Report refresh is required`,
    "ReportContentPage.infoButton.tip.txt": () => `Information Panel`,
    "ReportContentPage.backButton.tip.txt": () => `View all reports`,
    "ReportContentPage.overflowMenuButton.tip.txt": () => `More options`,
    "ReportContentPage.itemGroupName.txt": () => `Reports`,
    "ReportContentPage.maximizeButton.tip.txt": () => `Maximize report`,
    "ReportContentPage.closeButton.txt": () => `Close report`,
    "ReportContentPage.maximizeButtonAriaAnnounce.txt": () => `Report maximized`,
    "ReportContentPage.resetReportState.txt": () => `Restore default report state`,
    "ReportContentPage.summary.txt": () => `Show summary`,
    "ReportManagerPage.objectMenu.open.txt": () => `Open`,
    "ReportManagerPage.objectMenu.edit.txt": () => `Edit`,
    "ReportManagerPage.objectMenu.summary.txt": () => `Summary`,
    "ReportManagerPage.objectMenu.properties.txt": () => `Properties`,
    "ReportManagerPage.objectMenu.email.txt": () => `Email...`,
    "ReportManagerPage.objectMenu.print.txt": () => `Print`,
    "ReportManagerPage.browseReportsButton.txt": () => `Browse Reports`,
    "ReportManagerPage.newReportButton.txt": () => `New Report`,
    "ReportManagerPage.emptyView.message.txt": () => `No reports were found.`,
    "ReportManagerPage.emptyView.browseReportsButton.txt": () => `Browse for Reports`,
    "ReportManagerPage.tableView.name.txt": () => `Name`,
    "ReportManagerPage.tableView.author.txt": () => `Author`,
    "ReportManagerPage.tableView.lastModified.txt": () => `Last Modified`,
    "ReportManagerPage.openButton.tip.txt": () => `Open report`,
    "ReportManagerPage.emailButton.tip.txt": () => `Email report`,
    "ReportManagerPage.printButton.tip.txt": () => `Print report to PDF`,
    "ReportManagerPage.propertiesButton.tip.txt": () => `Report properties`,
    "ReportObject.multipleReferences.error.txt": () => `Report objects cannot be used in multiple contexts.`,
    "ReportObject.notFound.error.txt": () => `The object name cannot be found in the specified report.`,
    "ReportObject.invalidPage.error.txt": () => `The specified page is invalid.`,
    "ReportPropertiesDialog.open.txt": () => `Open`,
    "ReportPropertiesDialog.close.txt": () => `Close`,
    "ReportPropertiesDialog.name.txt": () => `Name:`,
    "ReportPropertiesDialog.description.txt": () => `Description:`,
    "ReportPropertiesDialog.keywords.txt": () => `Keywords:`,
    "ReportPropertiesDialog.type.txt": () => `Type:`,
    "ReportPropertiesDialog.location.txt": () => `Location:`,
    "ReportPropertiesDialog.createdBy.txt": () => `Created by:`,
    "ReportPropertiesDialog.dateCreated.txt": () => `Date created:`,
    "ReportPropertiesDialog.modifiedBy.txt": () => `Modified by:`,
    "ReportPropertiesDialog.dateModified.txt": () => `Date modified:`,
    "ReportSections.newPageButton.txt": () => `New Page`,
    "ReportSections.closeTab.tooltip.txt": () => `Delete page`,
    "ReportSummaryDialog.title.txt": () => `Summary`,
    "ReportSummaryDialog.open.txt": () => `Open`,
    "ReportSummaryDialog.cancel.txt": () => `Cancel`,
    "ReportSummaryDialog.close.txt": () => `Close`,
    "ReportSummaryDialog.noSummary.txt": () => `No summary is available.`,
    "ReportTileBody.modifiedBy.txt": () => `Modified by:`,
    "ReportTileBody.lastModified.txt": () => `Last modified:`,
    "VAViewerSettingsProvider.reportViewer.txt": () => `SAS Report Viewer`,
    "VAViewerSettingsProvider.reportRefreshSettings.txt": () => `Report Refresh`,
    "VAViewerSettingsProvider.reportAutoRefresh.txt": () => `Report Auto-Refresh`,
    "VAViewerSettingsProvider.reportRefreshFrequency.txt": () => `Check for updates after this number of minutes:`,
    "VAViewerSettingsProvider.alert.group.label.txt": () => `Alert Notifications`,
    "VAViewerSettingsProvider.alert.field.label.txt": () => `Select the default alert notifications:`,
    "VAViewerSettingsProvider.alert.email.txt": () => `Send e-mail messages`,
    "VAViewerSettingsProvider.alert.sms.txt": () => `Send SMS text messages`,
    "VAViewerSettingsProvider.alert.system.txt": () => `Administrator default`,
    "VAViewerSettingsProvider.generalSettings.txt": () => `Themes`,
    "VAViewerSettingsProvider.enableHighContrast.txt": () => `Override the report theme and use the SAS High Contrast report theme`,
    "ViewerBusyDialog.openReport.txt": () => `Opening report...`,
    "ViewerBusyDialog.prepareExport.txt": () => `Preparing export...`,
    "ViewerBusyDialog.preparePrint.txt": () => `Preparing to print...`,
    "PDFGeneration.printingReport.txt": () => `Generating report PDF. It will download when ready.`,
    "PDFGeneration.fileName.fmt": ({fileName: e, date: t}) => `${e} on ${t}`,
    "VisualElementActionUtil.actionMenuLabel.txt": () => `Select an action`,
    "VisualElementActionUtil.hierarchyExhausted.txt": () => `You have reached the lowest level of the hierarchy.`,
    "VisualElementActionUtil.hierarchiesExhausted.txt": () => `You have reached the lowest level of all hierarchies.`,
    "VisualElementActionUtil.drillLabel.fmt": ({value: e}) => `Drill into ${e}`,
    "SaveImageUtil.snapshot.fmt": ({a0: e, a1: t, a2: o}) => `Snapshot of ${e} ${t} at ${o}`,
    "ObjectToolbarIcon.SaveImageTooltip.txt": () => `Save image`,
    "ObjectToolbarIcon.PrintObject.txt": () => `Print object...`,
    "ObjectToolbarIcon.ShareObject.txt": () => `Share object...`,
    "ObjectToolbarIcon.OverflowButton.default.txt": () => `More`,
    "ObjectToolbarIcon.OverflowButton.labeled.fmt": ({label: e}) => `Object menu for ${e}`,
    "ObjectToolbarIcon.Accelerator.txt": () => `View with SAS® Graphics Accelerator`,
    "ZoomControl.button.tip.txt": () => `Zoom`,
    "ZoomControl.button.zoomin.txt": () => `Zoom in`,
    "ZoomControl.button.zoomout.txt": () => `Zoom out`,
    "ZoomControl.button.display.txt": () => `Zoom Controls`,
    "ZoomControl.button.reset.txt": () => `Reset zoom`,
    "ExpandControl.button.expand.txt": () => `Maximize view`,
    "ExpandControl.button.restore.txt": () => `Restore view`,
    "ExpandControl.button.expand.tip.txt": () => `Maximize`,
    "ExpandControl.button.restore.tip.txt": () => `Restore`,
    "ReportVisualContainer.sectionLink.notAllowed.maximize.txt": () => `Page links cannot be executed while this object is maximized.`,
    "DragModeControl.button.pan.tip.txt": () => `Pan`,
    "DragModeControl.button.circular.tip.txt": () => `Circular selection`,
    "DragModeControl.button.freeform.tip.txt": () => `Free-form selection`,
    "DragModeControl.button.rectangular.tip.txt": () => `Rectangular selection`,
    "DragModeControl.button.zoom.tip.txt": () => `Zoom to rectangle`,
    "ReportXMLDialog.title.txt": () => `Report XML`,
    "ReportXMLDialog.closeButton.txt": () => `Close`,
    "ReportXMLDialog.copyButton.txt": () => `Copy to Clipboard`,
    "ReportXMLDialog.error.txt": () => `Error loading report XML`,
    "ErrorDialog.error.txt": () => `An error occurred. Please contact your system administrator.`,
    "Application.banner.txt": () => `SAS® Report Viewer`,
    "Application.wip.banner.txt": () => `SAS® Visual Analytics - Report Viewer`,
    "Application.productName.txt": () => `SAS® Visual Analytics`,
    "OpenReportDialog.title.txt": () => `Open Report`,
    "OpenReportDialog.reports.txt": () => `Reports:`,
    "OpenReportDialog.cancel.txt": () => `Cancel`,
    "OpenReportDialog.ok.txt": () => `OK`,
    "AriaLive.numberOfObjectsUpdated.fmt": ({count: e}) => `${e} objects updated`,
    "AriaLive.oneObjectUpdated.txt": () => `1 object updated`,
    "AriaLive.reportOpened.txt": () => `Report opened`,
    "AriaLive.reportClosed.txt": () => `Report closed`,
    "ExportData.generating.txt": () => `Generating export. It will download when ready.`,
    "ExportData.warning.txt": () => `Error generating data`,
    "ExportData.nodata.txt": () => `No data to export`,
    "ExportData.exportData.txt": () => `Export data...`,
    "PlaybackAnimationDialog.saveButton.txt": () => `Save`,
    "PlaybackAnimationDialog.cancelButton.txt": () => `Cancel`,
    "PlaybackAnimationDialog.playButton.txt": () => `Play report`,
    "PlaybackAnimationDialog.title.txt": () => `Edit Playback`,
    "PlaybackAnimationDialog.transitionUnit.label.txt": () => `Transition unit:`,
    "PlaybackAnimationDialog.transitionUnit.page.txt": () => `Page`,
    "PlaybackAnimationDialog.transitionUnit.object.txt": () => `Object`,
    "PlaybackAnimationDialog.secondsPerUnit.label.txt": () => `Seconds per unit:`,
    "PlaybackAnimationDialog.showMaximized.label.txt": () => `Show maximized objects:`,
    "PlaybackAnimationDialog.showCanvasOnly.label.txt": () => `Show canvas only:`,
    "PlaybackAnimationDialog.showTimer.label.txt": () => `Show timer:`,
    "PlaybackAnimationDialog.showNavigationControls.label.txt": () => `Show navigation controls upon click or touch:`,
    "PlaybackNavigationControls.previousPage.txt": () => `Previous page`,
    "PlaybackNavigationControls.nextPage.txt": () => `Next page`,
    "PlaybackNavigationControls.previousObject.txt": () => `Previous object`,
    "PlaybackNavigationControls.nextObject.txt": () => `Next object`,
    "TransportConnection.generateReportTimeout.txt": () => `The report is taking a long time to load. Do you want to continue?`,
    "TransportConnection.openReport.txt": () => `Open Report`,
    "ViewerContainer.reportNotFound.fmt": ({location: e}) => `The specified report at the following location does not exist: ${e}`,
    "Hierarchy.expand.fmt": ({label: e}) => `Expand ${e}`,
    "Hierarchy.collapse.fmt": ({label: e}) => `Collapse ${e}`,
    "GraphElementDecorator.overview.txt": () => `Overview`,
    "GraphElementDecorator.layers.txt": () => `Hide or show layers`,
    "CompositeGraphElementDecorator.hideOverview.txt": () => `Hide Overview`,
    "CompositeGraphElementDecorator.showOverview.txt": () => `Show Overview`,
    "TitleInfoButton.tooltip.txt": () => `Information`,
    "SectionSelectionBar.noSelections.txt": () => `No selections`,
    "SectionSelectionBar.title.txt": () => `Filters:`,
    "CheckboxList.selectAll.txt": () => `Select all`,
    "CheckboxList.clearSelection.txt": () => `Clear selection`,
    "CheckboxList.clearSelection.fmt": ({count: e}) => `Clear selection (${e})`,
    "ExplanationInfoDialog.title.fmt": ({label: e}) => `Explaining ${e}`,
    "ExplanationInfoDialog.loading.txt": () => `Preparing explanation...`,
    "ExplanationInfoDialog.cancel.txt": () => `Cancel`,
    "ExplanationInfoDialog.close.txt": () => `Close`,
    "PromptHeader.emptyReport.txt": () => `Drag a data item or control here to create a report prompt.`,
    "PromptHeader.emptyPage.txt": () => `Drag a data item or control here to create a page prompt.`,
    "PromptHeader.collapsePageControlArea.txt": () => `Collapse page control area`,
    "PromptHeader.expandPageControlArea.txt": () => `Expand page control area`,
    "PromptHeader.collapseReportControlArea.txt": () => `Collapse report control area`,
    "PromptHeader.expandReportControlArea.txt": () => `Expand report control area`,
    "PromptHeader.collapseControlArea.txt": () => `Collapse control area`,
    "PromptHeader.expandControlArea.txt": () => `Expand control area`,
    "PromptHeader.reportControlArea.txt": () => `Report control area`,
    "PromptHeader.allControlAreas.txt": () => `All control areas`,
    "PromptHeader.pageControlArea.txt": () => `Page control area`,
    "ZeroState.editMode.txt": () => `Drag a template, data items, or objects here.`,
    "ZeroState.viewMode.txt": () => `No content to display.`,
    "ObjectStatus.assignData.txt": () => `Assign data`,
    "ObjectStatus.selectImage.txt": () => `Select image`,
    "ObjectStatus.selectJob.txt": () => `Select job`,
    "ObjectStatus.cancelLoading.txt": () => `Cancel loading`,
    "ObjectStatus.loadingCanceled.txt": () => `Loading canceled`,
    "ObjectStatus.resumeLoading.txt": () => `Resume loading`,
    "ObjectStatus.refresh.txt": () => `Refresh`,
    "ObjectStatus.setJobParameters.txt": () => `Set parameter values`,
    "ObjectSearch.title.txt": () => `Geographic search`,
    "ObjectSearch.pin.txt": () => `Pin`,
    "ObjectSearch.unpin.txt": () => `Unpin`,
    "MainSearchPanel.searchHints.txt": () => `Search Hints`,
    "MainSearchPanel.searchResults.txt": () => `Search Results`,
    "MainSearchPanel.features.txt": () => `Features`,
    "MainSearchPanel.pin.txt": () => `New pin`,
    "MainSearchPanel.pin.tooltip.txt": () => `New pin`,
    "MainSearchPanel.route.txt": () => `New route`,
    "MainSearchPanel.route.tooltip.txt": () => `New route`,
    "MainSearchPanel.geographicArea.txt": () => `New geo area`,
    "MainSearchPanel.geographicArea.tooltip.txt": () => `New geographic area`,
    "MainSearchPanel.newMyLocationPin.txt": () => `My location pin`,
    "MainSearchPanel.myLocationPin.txt": () => `My Location`,
    "MainSearchPanel.show.txt": () => `Show`,
    "MainSearchPanel.show.all.txt": () => `Show all`,
    "MainSearchPanel.hide.txt": () => `Hide`,
    "MainSearchPanel.hide.all.txt": () => `Hide all`,
    "MainSearchPanel.delete.txt": () => `Delete`,
    "MainSearchPanel.delete.all.txt": () => `Delete all`,
    "MainSearchPanel.convert.txt": () => `Convert search results to pins`,
    "MainSearchPanel.convert.all.txt": () => `Convert all search results to pins`,
    "MainSearchPanel.showPinLabels.txt": () => `Show pin labels`,
    "MainSearchPanel.close.label.txt": () => `Geographic search`,
    "MainSearchPanel.navigate.tooltip.txt": () => `Show details`,
    "MainSearchPanel.demographics.tooltip.txt": () => `Demographics`,
    "PanelHeader.back.tooltip.txt": () => `Back`,
    "GeographicAreaPanel.title.txt": () => `Geographic Area`,
    "GeographicAreaPanel.draw.txt": () => `Draw area`,
    "GeographicAreaPanel.update.txt": () => `Update area`,
    "GeographicAreaPanel.label.txt": () => `Label:`,
    "GeographicAreaPanel.location.txt": () => `Location:`,
    "GeographicAreaPanel.distance.miles.txt": () => `Distance (mi):`,
    "GeographicAreaPanel.distance.kilometer.txt": () => `Distance (km):`,
    "GeographicAreaPanel.distance.add.txt": () => `Add distance`,
    "GeographicAreaPanel.time.add.txt": () => `Add time`,
    "GeographicAreaPanel.distance.delete.txt": () => `Delete distance`,
    "GeographicAreaPanel.time.minutes.txt": () => `Time (min):`,
    "GeographicAreaPanel.duration.txt": () => `Duration:`,
    "GeographicAreaPanel.distanceUnits.miles.txt": () => `Miles`,
    "GeographicAreaPanel.distanceUnits.kilometers.txt": () => `Kilometers`,
    "GeographicAreaPanel.menu.clear.txt": () => `Clear geographic area`,
    "GeographicAreaPanel.menu.link.txt": () => `Link address to data elements and pins by default`,
    "GeographicAreaPanel.menu.unlink.txt": () => `Unlink geographic area address`,
    "GeographicAreaPanel.menu.delete.txt": () => `Delete geographic area`,
    "GeographicAreaPanel.demographics.txt": () => `Demographics`,
    "GeographicAreaPanel.demographics.set.txt": () => `Show demographics`,
    "GeographicAreaPanel.demographics.menu.expand.txt": () => `Expand view`,
    "GeographicAreaPanel.demographics.menu.edit.txt": () => `Edit demographics`,
    "GeographicAreaPanel.demographics.menu.delete.txt": () => `Delete demographics`,
    "GeographicAreaPanel.demographics.expired.txt": () => `Demographics data must be reloaded`,
    "GeographicAreaPanel.demographics.reload.txt": () => `Reload demographics`,
    "GeographicAreaPanel.invalid.location.txt": () => `The geographic area does not have a valid location and cannot be created.`,
    "TravelTypeField.dateselector.tooltip.txt": () => `Select a day and time`,
    "TravelTypeField.cancel.txt": () => `Cancel`,
    "TravelTypeField.ok.txt": () => `OK`,
    "TravelTypeField.button.tooltip.txt": () => `Select a day and time`,
    "TravelTypeField.day.txt": () => `Day:`,
    "TravelTypeField.time.txt": () => `Time:`,
    "TravelTypeField.distanceTypes.direct.txt": () => `Direct`,
    "TravelTypeField.distanceTypes.distance.txt": () => `Distance`,
    "TravelTypeField.travelType.txt": () => `Travel type:`,
    "TravelTypeField.traffic.txt": () => `Include traffic:`,
    "TravelTypeField.traffic.offset.txt": () => `Traffic time offset:`,
    "TravelTypeField.traffic.daytime.txt": () => `Traffic day and time:`,
    "TravelTypeField.distanceTypes.distance.unit.txt": () => `Distance unit`,
    "TravelTypeField.distanceTypes.driving.distance.txt": () => `Driving distance`,
    "TravelTypeField.distanceTypes.driving.time.txt": () => `Driving time`,
    "TravelTypeField.distanceTypes.trucking.distance.txt": () => `Trucking distance`,
    "TravelTypeField.distanceTypes.trucking.time.txt": () => `Trucking time`,
    "TravelTypeField.distanceTypes.walking.distance.txt": () => `Walking distance`,
    "TravelTypeField.distanceTypes.walking.time.txt": () => `Walking time`,
    "TravelTypeField.driveTimeTrafficTypes.none.txt": () => `No`,
    "TravelTypeField.driveTimeTrafficTypes.live.txt": () => `Current traffic`,
    "TravelTypeField.driveTimeTrafficTypes.historic.txt": () => `Typical traffic`,
    "TravelTypeField.driveTimeTraffic.offset.fmt": ({hour: e}) => `${e} hr`,
    "TravelTypeField.driveTimeTraffic.update.refresh.txt": () => `Update traffic for this feature`,
    "TravelTypeField.driveTimeTraffic.update.refreshAll.txt": () => `Update traffic for all features`,
    "TravelTypeField.driveTimeTraffic.update.tooltip.txt": () => `Update traffic data`,
    "RoutePanel.title.txt": () => `Route`,
    "RoutePanel.draw.txt": () => `Draw route`,
    "RoutePanel.update.txt": () => `Update route`,
    "RoutePanel.label.txt": () => `Label:`,
    "RoutePanel.locations.txt": () => `Locations`,
    "RoutePanel.menu.clear.txt": () => `Clear route`,
    "RoutePanel.menu.reverse.txt": () => `Reverse route`,
    "RoutePanel.menu.add.waypoint.txt": () => `Add route location`,
    "RoutePanel.menu.delete.waypoint.txt": () => `Delete route location`,
    "RoutePanel.menu.unlink.txt": () => `Unlink route location`,
    "RoutePanel.menu.arrows.txt": () => `Route arrows`,
    "RoutePanel.menu.arrows.hide.txt": () => `Hide route arrows`,
    "RoutePanel.menu.arrows.show.txt": () => `Show route arrows`,
    "RoutePanel.menu.arrows.oneway.txt": () => `One-way`,
    "RoutePanel.menu.arrows.twoway.txt": () => `Two-way`,
    "RoutePanel.menu.delete.txt": () => `Delete route`,
    "RoutePanel.route.width.txt": () => `Route width`,
    "RoutePanel.distance.txt": () => `Distance:`,
    "RoutePanel.distance.miles.fmt": ({distance: e}) => `${e} mi`,
    "RoutePanel.distance.kilometers.fmt": ({distance: e}) => `${e} km`,
    "RoutePanel.location.add.txt": () => `Add location`,
    "RoutePanel.location.delete.txt": () => `Delete location`,
    "RoutePanel.duration.txt": () => `Time:`,
    "RoutePanel.invalid.location.txt": () => `The route has no valid locations and cannot be created.`,
    "RoutePanel.accessibilityCellInfo.fmt": ({index: e, location: t}) => `Location ${e}, ${t}, input`,
    "PinPanel.pinTitle.txt": () => `Pin`,
    "PinPanel.addDescription.txt": () => `Add description`,
    "PinPanel.deleteDescription.txt": () => `Delete description`,
    "PinPanel.newPin.txt": () => `New pin at this location`,
    "PinPanel.deletePin.txt": () => `Delete pin`,
    "PinPanel.linkPins.txt": () => `Link pins to data elements by default`,
    "PinPanel.unlinkAllItems.txt": () => `Unlink all items`,
    "PinPanel.unlinkItems.txt": () => `Unlink items`,
    "PinPanel.label.txt": () => `Label:`,
    "PinPanel.location.txt": () => `Location:`,
    "PinPanel.description.txt": () => `Description:`,
    "PinPanel.linked.txt": () => `LINKED`,
    "PinPanel.searchClickPlaceholder.txt": () => `Search or select on the map`,
    "PinPanel.searchPlaceholder.txt": () => `Search`,
    "PinPanel.addRoute.txt": () => `Add route`,
    "PinPanel.addRoute.tooltip.txt": () => `Add route`,
    "PinPanel.addArea.txt": () => `Add geo area`,
    "PinPanel.addArea.tooltip.txt": () => `Add geographic area`,
    "PinPanel.addArea.title.txt": () => `Add Geographic Area`,
    "PinPanel.myLocationTitle.txt": () => `My Location Pin`,
    "PinPanel.deleteMyLocationPin.txt": () => `Delete My Location pin`,
    "PinPanel.enableAutoUpdate.txt": () => `Enable My Location auto-update`,
    "PinPanel.disableAutoUpdate.txt": () => `Disable My Location auto-update`,
    "PinPanel.editAutoRefreshInterval.txt": () => `Edit My Location auto-refresh interval...`,
    "PinPanel.linkToPin.txt": () => `Link to pin`,
    "PinPanel.useCurrentLocation.txt": () => `Use current location of pin`,
    "PinPanel.notDrawn.txt": () => `Not drawn`,
    "PinPanel.undetermined.txt": () => `Undetermined`,
    "PinPanel.findMyLocation.txt": () => `Find My Location`,
    "PinPanel.cannotDetermineLocation.txt": () => `The application cannot determine your current location. If you want to share your location, see the help for your browser or device.`,
    "PinPanel.autoRefreshInterval.txt": () => `My Location Auto-Refresh Interval`,
    "PinPanel.interval.hours.txt": () => `Hours:`,
    "PinPanel.interval.minutes.txt": () => `Minutes:`,
    "PinPanel.interval.seconds.txt": () => `Seconds:`,
    "PinPanel.invalid.location.txt": () => `The pin does not have a valid location and cannot be created.`,
    "PinPanel.description.miles.1.fmt": ({value1: e}) => `${e} mi`,
    "PinPanel.description.miles.2.fmt": ({value1: e, value2: t}) => `${e}, ${t} mi`,
    "PinPanel.description.miles.3.fmt": ({value1: e, value2: t, value3: o}) => `${e}, ${t}, ${o} mi`,
    "PinPanel.description.kilometers.1.fmt": ({value1: e}) => `${e} km`,
    "PinPanel.description.kilometers.2.fmt": ({value1: e, value2: t}) => `${e}, ${t} km`,
    "PinPanel.description.kilometers.3.fmt": ({value1: e, value2: t, value3: o}) => `${e}, ${t}, ${o} km`,
    "PinPanel.description.minutes.1.fmt": ({value1: e}) => `${e} min`,
    "PinPanel.description.minutes.2.fmt": ({value1: e, value2: t}) => `${e}, ${t} min`,
    "PinPanel.description.minutes.3.fmt": ({value1: e, value2: t, value3: o}) => `${e}, ${t}, ${o} min`,
    "PinPanel.clearLocation.tooltip.txt": () => `Clear location text`,
    "DiscardChangesDialog.title.area.txt": () => `Geographic Area`,
    "DiscardChangesDialog.title.route.txt": () => `Route`,
    "DiscardChangesDialog.text.area.txt": ({label: e}) => `You made changes to the geographic area but did not redraw the area.\n\nDo you want to discard the changes to ${e}?`,
    "DiscardChangesDialog.text.route.txt": ({label: e}) => `You made changes to the geographic route but did not redraw the route.\n\nDo you want to discard the changes to ${e}?`,
    "DiscardChangesDialog.discard.txt": () => `Discard`,
    "DiscardChangesDialog.cancel.txt": () => `Cancel`,
    "FeatureErrorDialog.title.area.txt": () => `Draw Geographic Area`,
    "FeatureErrorDialog.title.route.txt": () => `Draw Route`,
    "FeatureErrorDialog.text.area.txt": () => `The geographic area could not be drawn..\n\nTip: If your area's location does not contain travel infrastructure such as roads, then it might not be possible to calculate a geographic area. Use a distance travel type instead, or move the area to a location that has travel infrastructure.`,
    "FeatureErrorDialog.text.route.txt": () => `The route could not be drawn..\n\nTip: If your route's location does not contain travel infrastructure such as roads, then it might not be possible to calculate a route. Use a distance travel type instead, or move the route to a location that has travel infrastructure.`,
    "FeatureErrorDialog.close.txt": () => `Close`,
    "DemographicsSelectorDialog.title.txt": () => `Show Demographics`,
    "DemographicsSelectorDialog.cancel.txt": () => `Cancel`,
    "DemographicsSelectorDialog.ok.txt": () => `OK`,
    "DemographicsSelectorDialog.country.txt": () => `Country/Region`,
    "DemographicsSelectorDialog.tab.basic.txt": () => `Basic`,
    "DemographicsSelectorDialog.tab.advanced.txt": () => `Advanced`,
    "DemographicsSelectorDialog.tab.recent.txt": () => `Recent`,
    "DemographicsSelectorDialog.categories.txt": () => `Categories`,
    "DemographicsSelectorDialog.category.income.txt": () => `Income`,
    "DemographicsSelectorDialog.category.age.txt": () => `Age`,
    "DemographicsSelectorDialog.category.households.txt": () => `Households`,
    "DemographicsSelectorDialog.category.housing.txt": () => `Housing`,
    "DemographicsSelectorDialog.category.maritalstatus.txt": () => `Marital Status`,
    "DemographicsSelectorDialog.category.population.txt": () => `Population`,
    "DemographicsSelectorDialog.category.usergroup.txt": () => `User Group`,
    "DemographicsSelectorDialog.category.health.txt": () => `Health`,
    "DemographicsSelectorDialog.category.education.txt": () => `Education`,
    "DemographicsSelectorDialog.category.business.txt": () => `Business`,
    "DemographicsSelectorDialog.category.race.txt": () => `Race`,
    "DemographicsSelectorDialog.category.spending.txt": () => `Spending`,
    "DemographicsSelectorDialog.category.behaviors.txt": () => `Behaviours`,
    "DemographicsSelectorDialog.category.jobs.txt": () => `Jobs`,
    "DemographicsSelectorDialog.category.poverty.txt": () => `Poverty`,
    "DemographicsSelectorDialog.category.tapestry.txt": () => `Tapestry`,
    "DemographicsSelectorDialog.category.atrisk.txt": () => `At Risk`,
    "DemographicsSelectorDialog.category.keyfacts.txt": () => `Key Facts`,
    "DemographicsSelectorDialog.category.supplyanddemand.txt": () => `Supply and Demand`,
    "DemographicsSelectorDialog.category.policy.txt": () => `Policy`,
    "DemographicsSelectorDialog.category.landscape.txt": () => `Landscape`,
    "DemographicsSelectorDialog.category.crime.txt": () => `Crime`,
    "ManageColumns.title.txt": () => `Manage Columns`,
    "ManageColumns.ok.txt": () => `OK`,
    "ManageColumns.cancel.txt": () => `Cancel`,
    "ManageColumns.hiddenColumns.txt": () => `Hidden columns`,
    "ManageColumns.displayedColumns.txt": () => `Displayed columns`,
    "SearchResultPanel.title.txt": () => `Search Result`,
    "SearchResultPanel.menu.delete.txt": () => `Delete search result`,
    "SearchResultPanel.convert.txt": () => `Convert to pin`,
    "SearchResultPanel.convert.tooltip.txt": () => `Convert to pin`,
    "DemographicsResultsDialog.title.txt": () => `Demographics`,
    "DemographicsResultsDialog.cancel.txt": () => `Cancel`,
    "DemographicsResultsDialog.close.txt": () => `Close`,
    "DemographicsResultsDialog.edit.txt": () => `Edit`,
    "DemographicsResultsDialog.layout.page.txt": () => `Carousel view`,
    "DemographicsResultsDialog.layout.list.txt": () => `Single column view`,
    "DemographicsResultsDialog.layout.tile.txt": () => `Tile view`,
    "DemographicsResultsDialog.noData.txt": () => `No data matches the current geographic area.`,
    "PinsAtSameLocationPanel.title.txt": () => `Pins at the Same Location`,
    "PinsAtSameLocationPanel.searchResults.txt": () => `SEARCH RESULTS`,
    "PinsAtSameLocationPanel.pins.txt": () => `PINS`,
    "PinsAtSameLocationPanel.showAll.txt": () => `Show all`,
    "PinsAtSameLocationPanel.hideAll.txt": () => `Hide all`,
    "PinsAtSameLocationPanel.deleteAll.txt": () => `Delete all`,
    "PinsAtSameLocationPanel.show.txt": () => `Show`,
    "PinsAtSameLocationPanel.hide.txt": () => `Hide`,
    "PinsAtSameLocationPanel.delete.txt": () => `Delete`,
    "LocationPopover.pin.title.txt": () => `Pin Location`,
    "LocationPopover.area.title.txt": () => `Geographic Area Location`,
    "LocationPopover.route.title.txt": ({label: e}) => `Route Location ${e}`,
    "LocationPopover.name.txt": () => `Name`,
    "LocationPopover.location.txt": () => `Location:`,
    "LocationPopover.ok.txt": () => `Set location`,
    "LocationPopover.cancel.txt": () => `Exit selection mode`,
    "LocationPopover.hint.txt": () => `Click the map again to identify a different location.`,
    "TreeDualSelector.source.default.txt": () => `Available items`,
    "TreeDualSelector.target.default.txt": () => `Selected items`,
    "TreeDualSelector.filtered.length.fmt": ({label: e, filteredLength: t, totalLength: o}) => `${e} (${t} of ${o}):`,
    "TreeDualSelector.item.length.fmt": ({label: e, length: t}) => `${e} (${t}):`,
    "TreeDualSelector.emptymessage.txt": () => `No items`,
    "TreeDualSelector.filter.placeholder.txt": () => `Filter`,
    "TreeDualSelector.customItem.choiceIcon.tooltip.txt": () => `Custom item`,
    "TreeDualSelector.afterAction.add.fmt": ({noOfSelectedRows: e}) => `${e} items added`,
    "TreeDualSelector.afterAction.remove.fmt": ({noOfSelectedRows: e}) => `${e} items removed`,
    "TreeDualSelector.afterAction.addAll.txt": () => `All items are added`,
    "TreeDualSelector.afterAction.removeAll.txt": () => `All items are removed`,
    "TreeDualSelector.afterAction.up.txt": () => `Moved up`,
    "TreeDualSelector.afterAction.down.txt": () => `Moved down`,
    "TreeDualSelector.afterAction.top.txt": () => `Moved to the top`,
    "TreeDualSelector.afterAction.bottom.txt": () => `Moved to the bottom`,
    "TreeDualSelector.afterAction.undo.add.txt": () => `Add action reverted`,
    "TreeDualSelector.afterAction.undo.remove.txt": () => `Remove action reverted`,
    "TreeDualSelector.afterAction.customAdd.txt": () => `custom item added`,
    "TreeDualSelector.customItemSelection.fmt": ({customItemSelected: e}) => `${e} custom item selected`,
    "TreeDualSelector.itemSelectionWithDescription.fmt": ({itemSelected: e, itemDescription: t}) => `${e} ${t} selected`,
    "TreeDualSelector.itemSelection.fmt": ({itemSelected: e}) => `${e} selected`,
    "TreeDualSelector.reorderButton.up.button.aria": ({targetListLabel: e}) => `Move up one row in ${e}`,
    "TreeDualSelector.reorderButton.down.button.aria": ({targetListLabel: e}) => `Move down one row in ${e}`,
    "TreeDualSelector.reorderButton.top.button.aria": ({targetListLabel: e}) => `Move to the top of ${e}`,
    "TreeDualSelector.reorderButton.bottom.button.aria": ({targetListLabel: e}) => `Move to the bottom of ${e}`,
    "TreeDualSelector.moveButton.add.button.aria": ({targetListLabel: e}) => `Add item to ${e}`,
    "TreeDualSelector.moveButton.addall.button.aria": ({targetListLabel: e}) => `Add all to ${e}`,
    "TreeDualSelector.moveButton.remove.button.aria": ({targetListLabel: e}) => `Remove item from ${e}`,
    "TreeDualSelector.moveButton.removeall.button.aria": ({targetListLabel: e}) => `Remove all from ${e}`,
    "TreeDualSelector.moveButton.undoadd.button.aria": ({targetListLabel: e}) => `Undo add for ${e}`,
    "TreeDualSelector.moveButton.undoremove.button.aria": ({targetListLabel: e}) => `Undo remove for ${e}`,
    "TreeDualSelector.searchField.aria": ({listLabel: e}) => `Filter ${e}`,
    "TreeDualSelector.moveButton.removeButton.warningDialog.title": () => `Remove`,
    "TreeDualSelector.moveButton.removeButton.warningDialog.txt": () => `Any custom items that you have selected for removal will be permanently deleted if you continue.\n\n Do you want to continue?`,
    "TreeDualSelector.moveButton.removeAllButton.warningDialog.title": () => `Remove All Items`,
    "TreeDualSelector.moveButton.removeAllButton.warningDialog.txt": () => `The custom items in this list will be permanently deleted if you continue.\n\n Do you want to continue?`,
    "LinkNavigator.backButton.label": () => `Back`,
    "LinkNavigator.rootOrReportLinkBreadcrumb.label": ({reportLabel: e, sectionLabel: t}) => `${e}: ${t}`,
    "LinkNavigator.incomingFilters.title": () => `Incoming Filters`,
    "LinkNavigator.reportLevel.label": () => `Report level`,
    "LinkNavigator.sectionLevel.label": () => `Page level`,
    "ReportSectionZeroState.heading.label": () => `Design a Report`,
    "ReportSectionZeroState.description.label": () => `Drag objects or data items onto the page, or select an option below.`,
    "ReportSectionZeroState.hideAutoChartButton.description.label": () => `Drag objects or data items onto the page, or start from a page template.`,
    "ReportSectionZeroState.autoChartButton.label": () => `Generate object`,
    "ReportSectionZeroState.selectTemplateButton.label": () => `Select a template`,
    "ReportSectionZeroState.exploreSuggestions.label": () => `Explore suggestions`,
    "PromptContainerTooltip.noSelections.txt": () => `No selections`,
    "PromptContainerTooltip.selectedValues.txt": () => `Selected Values`
};

var Ube = Object.freeze({
    __proto__: null,
    default: Hbe
});

const Gbe = {
    localizers: Hbe,
    loadingTextLocalizers: Pf
};

const Kbe = i(Gbe);

Kbe.displayName = "I18nContext";

const Wbe = Kbe.Provider;

function $be(e) {
    const t = l(Kbe).localizers;
    return r((() => {
        if (e === undefined) {
            return e => qbe(e, t);
        }
        return qbe(e, t);
    }), [ t, e ]);
}

function Ybe() {
    const e = l(Kbe).loadingTextLocalizers;
    return r((() => e["loading.msg"]()), [ e ]);
}

function qbe(e, t) {
    if (typeof e === "string") {
        return e;
    }
    if (!t[e.key]) {
        return e.key;
    }
    return e.args ? t[e.key](e.args) : t[e.key]();
}

const Xbe = .5 * 16 + 2;

function Zbe(e) {
    const t = {};
    for (const o of Object.keys(e)) {
        const n = e[o];
        if (n !== undefined) {
            t[o] = n;
        }
    }
    return t;
}

function Jbe(e, t) {
    if (!t) {
        return undefined;
    }
    if (e.state === "normal") {
        return t.normal;
    }
    const o = t.normal ? t.normal.fg : undefined;
    const n = t.normal ? t.normal.bg : undefined;
    return Zbe({
        fg: o,
        bg: n ? "initial" : undefined
    });
}

function Qbe(e, t) {
    return Object.assign({
        fontFamily: t.font.family.default,
        fontSize: t.font.size.m,
        fontWeight: "normal",
        fontStyle: "normal"
    }, e);
}

function eve(e) {
    return dd.getTextHeightFromStyle(e);
}

function tve(e, t, o) {
    return ove(t ? e.map(((e, o) => {
        var n;
        return (n = e + t[o]) !== null && n !== void 0 ? n : "";
    })) : e, o);
}

function ove(e, t) {
    if (!e) {
        return 0;
    }
    return dd.getTextWidthFromComputedStyle(e, t);
}

function nve(e, t) {
    if (!e) {
        return 0;
    }
    return e.reduce(((e, o) => dd.getTextWidthFromComputedStyle(o, t) + e), 0);
}

async function ave(e) {
    var t;
    const o = `${e}/fonts/fonts?limit=1000`;
    const n = await fetch(o, {
        credentials: "include",
        headers: {
            Accept: "application/json",
            "X-Requested-With": "XMLHttpRequest"
        }
    });
    if (!n.ok || n.url.includes("/SASLogon/")) {
        return Promise.reject("Unable to fetch fonts");
    }
    const a = await n.json();
    return (t = a.items) !== null && t !== void 0 ? t : [];
}

function rve(e, t) {
    var o, n;
    if ((n = (o = window.sas) === null || o === void 0 ? void 0 : o.ltjs) === null || n === void 0 ? void 0 : n.jest) {
        return lve;
    }
    sve.next([ e, t ]);
    return lve;
}

const sve = new A;

const ive = new A;

const lve = ive.pipe(be(((e, t) => {
    var o;
    return Object.assign(Object.assign({}, e), {
        [t.family]: ((o = e[t.family]) !== null && o !== void 0 ? o : 0) + 1
    });
}), {}), ce());

sve.pipe(ve((([e, t]) => e)), Q((([e, t]) => {
    const o = Nce(e, t);
    return B((e => o.subscribe(e)), ((e, t) => t())).pipe(se((t => {
        if (t.status !== "authorized") {
            return V;
        }
        const o = new G;
        ave(e).then((e => o.next(e))).catch((() => {})).finally((() => o.complete()));
        return o;
    })), Y(1), Q((e => H(e))), ye((e => cve(e))), Q((e => e.pipe(xe()))), J((t => dve(e, t))), $((e => e !== null)));
})), ve((e => cve(e)))).subscribe((e => {
    try {
        document.fonts.add(e);
    } catch (e) {
        return;
    }
    e.loaded.then((e => ive.next(e))).catch((t => {
        console.error(`Failed to load font '${e.style} ${e.weight} "${e.family}"' with error: '${t}'`);
    }));
}));

function cve({family: e, weight: t, style: o}) {
    return `${e} ${t} ${o}`;
}

function dve(e, t) {
    var o, n;
    const a = t[0];
    if (!(a === null || a === void 0 ? void 0 : a.family)) {
        return null;
    }
    const r = {
        display: "swap"
    };
    if (a.usWeightClass) {
        r.weight = "" + a.usWeightClass;
    }
    if (a.weight) {
        r.weight = a.weight;
    }
    if (a.style) {
        r.style = a.style;
    }
    const s = [];
    const i = [];
    if (a.name) {
        s.push(`local('${a.name}')`);
    }
    if (a.postScriptName && a.postScriptName !== a.name) {
        s.push(`local('${a.postScriptName}')`);
    }
    const l = {};
    for (const e of t) {
        const t = (n = (o = e.links) === null || o === void 0 ? void 0 : o.find((e => e.rel === "content"))) === null || n === void 0 ? void 0 : n.uri;
        if (e.format && t) {
            l[e.format] = t;
        }
    }
    if (l.woff) {
        i.push(`url('${e}${l.woff}') format('woff')`);
    }
    if (l.ttf) {
        i.push(`url('${e}${l.ttf}') format('truetype')`);
    }
    if (!i.length) {
        return null;
    }
    return new FontFace(a.family, [ ...s, ...i ].join(", "), r);
}

const uve = i({});

const mve = ({url: t, authenticationType: o, children: r}) => {
    const [s, i] = n({});
    a((() => {
        if (!t || !$ce(t) || !o) {
            return;
        }
        const e = rve(t, o).subscribe((e => {
            dd.clearFontCache();
            i(e);
        }));
        return () => e.unsubscribe();
    }), [ t, o ]);
    return e.createElement(uve.Provider, {
        value: s
    }, r);
};

function pve(e) {
    const t = l(uve);
    return r((() => {
        var o;
        return (o = e === null || e === void 0 ? void 0 : e.split(",").map((e => {
            var o;
            const n = e.trim().replace(/['"]/g, "");
            return (o = t[n]) !== null && o !== void 0 ? o : 0;
        })).reduce(((e, t) => e + t), 0)) !== null && o !== void 0 ? o : 0;
    }), [ e, t ]);
}

const fve = 16 + 2 + 18;

const gve = function(t) {
    var o;
    const a = $be({
        key: "ComboBox.clearFilter.txt"
    });
    const {values: i, measureValues: l, label: c, required: u} = t.state;
    const m = t.actions;
    const {font: p} = t.style || {};
    const f = s((e => Jbe(e, t.style)), [ t.style ]);
    const g = s((() => {
        if (!t.style) {
            return;
        }
        return t.style.normal;
    }), [ t.style ]);
    const h = s((() => t.style ? t.style.normal : undefined), [ t.style ]);
    const [b, v] = n();
    {
        const e = C_();
        const o = r((() => Qbe(p, e)), [ p, e ]);
        const n = pve(o.fontFamily);
        const a = t.preferredSizing ? i : undefined;
        const s = t.preferredSizing ? l : undefined;
        d((() => {
            const e = Math.max(28, eve(o) + 2 + 8);
            v(e);
            const n = {
                preferredHeight: e,
                minHeight: e,
                minWidth: 160
            };
            if (a) {
                n.preferredWidth = tve(a, s, o) + fve;
            }
            m.setConstraints(t.id, n);
        }), [ n, a, s, m, t.id, o ]);
    }
    return e.createElement(DG, {
        style: {
            maxWidth: "none"
        },
        popoverTokens: {
            theme: h
        },
        listTokens: {
            font: p,
            theme: f
        },
        selectTokens: {
            font: p,
            theme: g
        },
        testId: Xg() ? `${t.id}-dropdown` : null,
        unselectedValue: u ? undefined : {
            item: {
                text: a
            },
            placeholder: c
        },
        virtualItems: {
            count: (o = i === null || i === void 0 ? void 0 : i.length) !== null && o !== void 0 ? o : 0,
            itemHeight: b,
            renderItem({index: e}) {
                return {
                    text: i === null || i === void 0 ? void 0 : i[e],
                    secondaryText: l === null || l === void 0 ? void 0 : l[e],
                    concatSecondaryText: true
                };
            }
        },
        selectedIndex: t.state.selectedIndex,
        onSelected: e => m.update(t.id, {
            selectedIndex: e
        }),
        ariaLabel: t.accessibilityLabel,
        displaySecondaryText: true
    });
};

const hve = yo(((e, t) => ({
    state: Ofe(e, t.id),
    style: yfe(e, t.id),
    accessibilityLabel: Gfe(e, t.id)
})), (e => ({
    actions: bo(Object.assign({
        setConstraints: Vde
    }, yue.actions), e)
})))(gve);

var bve = "sas_components-WindowShade-__internal__-dnd-DraggableSection_draggable";

var vve = "sas_components-WindowShade-__internal__-dnd-DraggableSection_dragged-item";

var yve = "sas_components-WindowShade-__internal__-dnd-DraggableSection_drop-line";

var xve = "sas_components-WindowShade-__internal__-dnd-DraggableSection_place-at-end";

var Sve = {
    draggable: bve,
    draggedItem: vve,
    dropLine: yve,
    placeAtEnd: xve
};

const wve = e => {
    const o = c(null);
    const r = c(null);
    const {useDrag: s, useDrop: i, getEmptyImage: l} = nX();
    const [{isDragging: d}, u, m] = s({
        type: e.dragType,
        item: {
            index: e.index,
            dragType: e.dragType,
            dndPrefix: e.dndPrefix
        },
        canDrag: e.allowDrag,
        options: {
            dropEffect: "move"
        },
        collect: e => ({
            isDragging: e.isDragging()
        })
    });
    const p = e => {
        if (o.current && e.getClientOffset()) {
            const t = o.current.getBoundingClientRect().height;
            const n = o.current.getBoundingClientRect().bottom;
            const a = e.getClientOffset()?.y ?? 0;
            const r = n - a;
            if (r <= .5 * t) return true; else return false;
        }
    };
    const [f, g] = n("");
    const [{isOver: h, canDrop: b}, v] = i({
        accept: e.allowDropTypes,
        canDrop: () => e.allowDrop,
        hover: (t, o) => {
            let n = "";
            const {index: a, dndPrefix: r} = t ?? {};
            if (o.isOver({
                shallow: true
            }) && o.canDrop()) {
                if (r === e.dndPrefix) {
                    if (a < e.index) n = ke(Sve.dropLine, Sve.placeAtEnd); else if (a > e.index) n = Sve.dropLine;
                } else {
                    if (p(o) && e.isLastSection) n = ke(Sve.dropLine, Sve.placeAtEnd); else n = Sve.dropLine;
                }
            }
            g(n);
        },
        collect: e => ({
            isOver: e.isOver({
                shallow: true
            }),
            canDrop: e.canDrop()
        }),
        drop: (t, o) => {
            if (!o.didDrop()) {
                if (t.dndPrefix === e.dndPrefix) {
                    if (t.index !== e.index) e.onSectionsReorder?.(t.index, e.index);
                } else {
                    const n = e.isLastSection && p(o) ? e.index + 1 : e.index;
                    const a = {
                        index: n,
                        dragType: e.dragType,
                        dndPrefix: e.dndPrefix
                    };
                    e.onDrop?.({
                        monitor: o,
                        dropTarget: a,
                        droppedItem: t
                    });
                }
            }
        }
    });
    a((() => {
        m(l(), {
            captureDraggingState: true
        });
    }));
    u(r);
    v(o);
    const y = C_();
    const x = IQ(y);
    const S = e.allowDrag && !d && Sve.draggable;
    const w = d ? Sve.draggedItem : undefined;
    const C = h && b ? f : undefined;
    return t("div", {
        ref: o,
        style: x,
        className: ke(S, C)
    }, e.children({
        draggingClassName: w,
        dragRef: r
    }));
};

var Cve = "sas_components-WindowShade-__internal__-dnd-DroppableZeroState_droppable-zero-state";

var Eve = "sas_components-WindowShade-__internal__-dnd-DroppableZeroState_drop-line";

var Ive = "sas_components-WindowShade-__internal__-dnd-DroppableZeroState_place-at-end";

var _ve = {
    droppableZeroState: Cve,
    dropLine: Eve,
    placeAtEnd: Ive
};

const Dve = e => {
    const o = c(null);
    const {useDrop: n} = nX();
    const [{hoverClassName: a}, r] = n({
        accept: e.allowDropTypes,
        collect: e => {
            let t = "";
            if (e.isOver({
                shallow: true
            }) && e.canDrop()) {
                t = _ve.dropLine;
            }
            return {
                hoverClassName: t
            };
        },
        drop: (t, o) => {
            if (!o.didDrop()) {
                const n = {
                    index: 0,
                    dragType: e.dragType,
                    dndPrefix: e.dndPrefix
                };
                e.onDrop?.({
                    monitor: o,
                    dropTarget: n,
                    droppedItem: t
                });
            }
        }
    });
    const s = C_();
    const i = IQ(s);
    r(o);
    return t("div", {
        ref: o,
        "data-testid": e.testId,
        style: {
            ...i
        },
        className: ke(_ve.droppableZeroState, a)
    });
};

const Lve = u(((e, o) => {
    const {useDragLayer: n} = nX();
    const {item: a, itemType: r} = n((e => ({
        item: e.getItem(),
        itemType: e.getItemType()
    })));
    const s = () => {
        if (!a || a.dndPrefix !== e.dndPrefix) return null;
        switch (r) {
          case e.dragType:
            return e.children(a.index);

          default:
            return null;
        }
    };
    return t(RQ, {
        ref: o,
        style: {
            ...e.style
        }
    }, s());
}));

var Tve = "sas_components-WindowShade-WindowShade_container";

var Rve = "sas_components-WindowShade-WindowShade_section";

var kve = "sas_components-WindowShade-WindowShade_section-header";

var Ave = "sas_components-WindowShade-WindowShade_heading-layout";

var Mve = "sas_components-WindowShade-WindowShade_heading";

var Nve = "sas_components-WindowShade-WindowShade_header-action";

var Ove = "sas_components-WindowShade-WindowShade_header";

var Pve = "sas_components-WindowShade-WindowShade_header-wrap";

var Bve = "sas_components-WindowShade-WindowShade_disabled";

var zve = "sas_components-WindowShade-WindowShade_header-icon";

var Fve = "sas_components-WindowShade-WindowShade_header-icon-open";

var jve = "sas_components-WindowShade-WindowShade_header-icon-closed";

var Vve = "sas_components-WindowShade-WindowShade_header-icon-transitioning";

var Hve = "sas_components-WindowShade-WindowShade_header-optional-icon";

var Uve = "sas_components-WindowShade-WindowShade_indicator";

var Gve = "sas_components-WindowShade-WindowShade_indicator-no-icon";

var Kve = "sas_components-WindowShade-WindowShade_indicator-multi-state";

var Wve = "sas_components-WindowShade-WindowShade_count-indicator";

var $ve = "sas_components-WindowShade-WindowShade_count-indicator-no-icon";

var Yve = "sas_components-WindowShade-WindowShade_count-indicator-multi-state";

var qve = "sas_components-WindowShade-WindowShade_header-text";

var Xve = "sas_components-WindowShade-WindowShade_header-Count";

var Zve = "sas_components-WindowShade-WindowShade_content";

var Jve = "sas_components-WindowShade-WindowShade_content-transitioning";

var Qve = "sas_components-WindowShade-WindowShade_section-container";

var eye = "sas_components-WindowShade-WindowShade_required-mark";

var tye = "sas_components-WindowShade-WindowShade_arrow-cursor";

var oye = {
    container: Tve,
    section: Rve,
    sectionHeader: kve,
    headingLayout: Ave,
    heading: Mve,
    headerAction: Nve,
    header: Ove,
    headerWrap: Pve,
    disabled: Bve,
    headerIcon: zve,
    headerIconOpen: Fve,
    headerIconClosed: jve,
    headerIconTransitioning: Vve,
    headerOptionalIcon: Hve,
    indicator: Uve,
    indicatorNoIcon: Gve,
    indicatorMultiState: Kve,
    countIndicator: Wve,
    countIndicatorNoIcon: $ve,
    countIndicatorMultiState: Yve,
    headerText: qve,
    headerCount: Xve,
    content: Zve,
    contentTransitioning: Jve,
    sectionContainer: Qve,
    requiredMark: eye,
    arrowCursor: tye
};

const nye = fb(Jt);

const aye = MA("WindowShade-dragType");

const rye = MA("WindowShade-dndPrefix");

const sye = MA("Section-state");

const iye = Dh("WindowShade");

const lye = {
    "": "4",
    4: "5",
    5: "6",
    6: "6"
};

const cye = e => {
    const {refs: n, createSetRef: s} = uU();
    const i = C_();
    const l = rye();
    const d = e.dndPrefix ?? l;
    const u = aye();
    const m = e.dragType ?? u;
    const p = [ ...new Set([ m, ...e.allowDropTypes ?? [] ]) ];
    const f = e.allowDrop ?? false;
    const g = c(null);
    const h = r((() => e.sections.some((e => !!e.allowDrag))), [ e.sections ]);
    const [b, v] = ZA("data-ws-heading-level");
    const y = lye[b];
    a((() => {
        if (b === "6") iye.error("Only three levels of Window Shades are allowed. Additional levels will cause an accessibility WCAG violation as well as usability issues. Please re-evaluate your design. If you still need additional levels, contact the Filament Nova team for a new feature.");
    }), [ b ]);
    const x = t => o => {
        if (o.key === "Enter" || o.key === " ") {
            e.onToggleSection(t);
            o.preventDefault();
            return;
        }
        if (!n.includes(o.target)) {
            return;
        }
        if (o.key === "Home") {
            n[0]?.focus();
        } else if (o.key === "End") {
            n[n?.length - 1]?.focus();
        } else if (o.key === "ArrowDown") {
            const e = n.indexOf(o.target);
            n[e + 1]?.focus();
        } else if (o.key === "ArrowUp") {
            const e = n.indexOf(o.target);
            n[e - 1]?.focus();
        } else {
            return;
        }
        o.preventDefault();
    };
    const S = t => () => e.onToggleSection(t);
    function w(o, n, a) {
        const {allowDrag: r = false} = n;
        return t(wve, {
            key: o,
            index: o,
            dragType: m,
            allowDrag: r,
            allowDrop: f,
            dndPrefix: d,
            allowDropTypes: p,
            onDrop: e.onDrop,
            onSectionsReorder: e.onSectionsReorder,
            isLastSection: o === e.sections.length - 1
        }, (e => C(o, n, a, {
            ...e
        })));
    }
    function C(e, o, n, a = {}) {
        const {draggingClassName: r, isDragImage: s, dragRef: i} = a;
        return t(uye, Ee({
            key: e
        }, o, {
            dragRef: i,
            isDragImage: s,
            draggingClassName: r
        }), n);
    }
    const E = ({section: t, index: o, isDragImage: n}) => {
        const {theme: a, header: r, headerCount: i, content: l, disabled: c, required: d, staticMode: u, maxHeight: m, allowDrag: p, headingIcon: f, headingStyle: g, headerAction: h, state: b, count: v, renderToolbar: w, headingClassName: C} = t;
        return {
            theme: a,
            header: r,
            headerCount: i,
            content: l,
            disabled: c,
            required: d,
            staticMode: u ?? e.staticMode,
            maxHeight: m,
            allowDrag: p,
            headingIcon: f,
            headingStyle: g,
            headerAction: h,
            state: b,
            count: v,
            renderToolbar: w,
            headingClassName: C,
            variant: e.variant,
            wrapHeaderText: e.wrapHeaderText,
            showHeadingIcon: e.showHeadingIcon,
            isOpen: e.openSections.includes(o),
            headerRef: s(o),
            onKeyDown: x(o),
            onSelectHeader: S(o),
            testId: gb(e.testId, `section-${o}`),
            headingLevel: y,
            ...!!n && {
                isOpen: false,
                headerRef: null,
                allowDrag: false,
                onKeyDown: () => {},
                onSelectHeader: () => {},
                variant: e.variant,
                wrapHeaderText: e.wrapHeaderText,
                showHeadingIcon: e.showHeadingIcon,
                testId: gb(e.testId, `section-${o}-ghost-image`)
            }
        };
    };
    function I() {
        const n = {
            ...mye(i),
            ...e.theme?.(i)
        };
        return t(o, null, t("div", {
            ref: e => {
                g.current = e;
                v(e);
            },
            className: ke(oye.container, e.className),
            style: {
                ...n,
                ...e.style
            },
            "data-testid": e.testId
        }, e.sections.map(((t, o) => {
            const {content: n, ...a} = E({
                section: t,
                index: o
            });
            const r = {
                ...a,
                isLastSection: o === e.sections.length - 1
            };
            const {allowDrag: s} = r;
            return s || f ? w(o, r, n) : C(o, r, n);
        })), f && e.sections.length === 0 && t(Dve, {
            dragType: m,
            dndPrefix: d,
            onDrop: e.onDrop,
            allowDropTypes: p,
            testId: gb(e.testId, "droppable-zeroState")
        })), h && t(Lve, {
            ref: e => {
                if (e && g.current) {
                    e.style.width = `${g.current.offsetWidth}px`;
                }
            },
            dragType: m,
            dndPrefix: d,
            style: {
                ...n
            }
        }, (t => {
            const {content: o, ...n} = E({
                section: e.sections[t],
                index: t,
                isDragImage: true
            });
            return C(t, n, o, {
                isDragImage: true
            });
        })));
    }
    return I();
};

const dye = MA("WindowShadeSection");

const uye = e => {
    const r = c(null);
    const i = nye();
    const {0: l, 1: d, 2: u} = dye(3);
    const m = `h${e.headingLevel ?? "4"}`;
    const [{isOpen: p, sectionTransitionProps: f, iconTransitionProps: g}, h] = n({
        isOpen: e.isOpen
    });
    const b = e => {
        const t = 1 / 16 * 25;
        return Math.max(Math.min(e * t, 400), 100);
    };
    a((() => {
        if (e.isOpen === p || !r.current) return;
        let t;
        let o;
        if (e.isOpen) {
            r.current.style.height = "auto";
            r.current.style.display = "";
            const e = r.current.clientHeight;
            r.current.style.height = "0px";
            r.current.getBoundingClientRect();
            const n = `calc(${b(e)}ms * var(--nova-animation-duration-factor, 1))`;
            t = {
                height: e,
                transitionDuration: n
            };
            o = {
                transitionDuration: n
            };
        } else {
            const e = r.current.clientHeight;
            r.current.style.height = `${e}px`;
            r.current.getBoundingClientRect();
            const n = `calc(${b(e)}ms * var(--nova-animation-duration-factor, 1))`;
            t = {
                height: 0,
                transitionDuration: n,
                display: "none"
            };
            o = {
                transitionDuration: n
            };
        }
        h({
            isOpen: e.isOpen,
            sectionTransitionProps: {
                className: oye.contentTransitioning,
                style: t
            },
            iconTransitionProps: {
                className: oye.headerIconTransitioning,
                style: o
            }
        });
    }), [ p, e.isOpen ]);
    const v = "*";
    let y;
    if (e.renderToolbar) {
        y = e.renderToolbar();
    } else if (e.headerAction?.type === "button") {
        y = t(QM, {
            testId: gb(e.testId, "action-button"),
            variant: oN.Icon,
            disabled: e.headerAction.disabled ?? e.disabled,
            onPress: e.headerAction.onPress,
            icon: {
                icon: e.headerAction.iconType
            }
        });
    } else if (e.headerAction?.type === "link") {
        y = t(AJ, {
            testId: gb(e.testId, "action-link"),
            wrapText: false,
            small: true,
            disabled: e.headerAction.disabled ?? e.disabled,
            onPress: e.headerAction.onPress
        }, e.headerAction.text);
    }
    const x = e.state;
    const S = x !== undefined && x !== null && !Array.isArray(x) ? [ x ] : x ?? [];
    const w = sye(S.length);
    const C = [];
    if (S.length > 0) {
        C.splice(0, 0, ...w);
    }
    if (e.required) {
        C.push(`${l}-required`);
    }
    const E = e.count;
    const I = () => {
        let t = "";
        if (_.current && UA(_.current)) {
            if (e.showHeadingIcon && e.headingIcon?.tooltip) {
                t = `${e.headingIcon.tooltip}, `;
            }
            t += e.header;
        }
        return t;
    };
    const _ = c(null);
    const D = WA();
    const L = fO({
        getTooltip: I
    });
    const T = s((t => {
        L(t);
        D_(e.headerRef, t);
    }), [ e.headerRef, L ]);
    const R = s((e => {
        D(e);
        _.current = e;
    }), [ D ]);
    const k = C_();
    const A = {
        ...fye(k, {
            disabled: e.disabled,
            variant: e.variant,
            showHeadingIcon: e.showHeadingIcon,
            headingIcon: e.headingIcon,
            state: x
        }),
        ...e.theme?.(k)
    };
    const M = c(false);
    a((() => {
        if (!e.isLastSection) return;
        if (M.current && e.isOpen && r.current) {
            r.current.scrollIntoView?.({
                block: "nearest"
            });
        }
        M.current = false;
    }), [ e.isLastSection, e.isOpen ]);
    return t("div", {
        className: ke(oye.section, e.className),
        "data-testid": e.testId,
        style: {
            ...e.style,
            ...A
        },
        tabIndex: undefined
    }, t("div", {
        ref: e.dragRef,
        className: ke(oye.sectionHeader, e.draggingClassName),
        tabIndex: undefined
    }, t("div", {
        className: oye.headingLayout
    }, t(m, {
        className: oye.heading
    }, t("div", Ee({
        className: ke(oye.header, e.wrapHeaderText && oye.headerWrap, e.staticMode && oye.arrowCursor),
        ref: T,
        onClick: t => {
            e.onSelectHeader?.(t);
            if (e.isLastSection) M.current = true;
        },
        onKeyDown: t => {
            e.onKeyDown?.(t);
            if (e.isLastSection) M.current = true;
        }
    }, !e.staticMode && {
        role: "button",
        "aria-expanded": e.isOpen
    }, {
        "aria-describedby": C.join(" "),
        tabIndex: e.staticMode ? -1 : 0,
        "data-testid": gb(e.testId, "header"),
        id: d,
        "aria-controls": !e.staticMode ? u : undefined
    }), t(MM, {
        testId: gb(e.testId, "icon"),
        className: ke(oye.headerIcon, g?.className, p ? oye.headerIconOpen : oye.headerIconClosed),
        style: {
            ...g?.style
        },
        icon: SL,
        disabled: e.staticMode ?? false,
        theme: t => {
            if (e.variant === "primary-light" && t.themeVariant === "light") {
                return {
                    "--icon-default-override-fg": t.themeVariant === "light" ? t.tokensExperimental["color-action-icon-emphasis-normal"] : t.tokensExperimental["color-action-icon-standard-normal"]
                };
            }
        }
    }), e.showHeadingIcon && e.headingIcon && t(MM, {
        testId: gb(e.testId, "optionalIcon"),
        className: oye.headerOptionalIcon,
        icon: e.headingIcon.icon,
        color: e.headingIcon.color,
        tooltip: e.headingIcon.tooltip ?? "",
        ariaLabel: e.headingIcon.ariaLabel ?? "",
        theme: e.headingIcon.theme
    }), S.map(((n, a) => t(o, {
        key: n
    }, t(Hoe, {
        key: n,
        type: n,
        count: n === "count" ? E : undefined,
        className: ke(n === "count" ? !e.showHeadingIcon || !e.headingIcon ? a === 0 ? oye.countIndicatorNoIcon : oye.countIndicatorMultiState : a === 0 ? oye.countIndicator : oye.countIndicatorMultiState : !e.showHeadingIcon || !e.headingIcon ? a === 0 ? oye.indicatorNoIcon : oye.indicatorMultiState : a === 0 ? oye.indicator : oye.indicatorMultiState),
        testId: gb(e.testId, `state-${n}`)
    }), t(bO, {
        id: w[a]
    }, n === "count" ? `${E}` : i(`shade.${n}.ariaLabel.aria`))))), t(jP, {
        ref: R,
        testId: gb(e.testId, "heading"),
        wrapText: !!e.wrapHeaderText,
        className: ke(oye.headerText, e.headingClassName, e.disabled && oye.disabled),
        style: e.headingStyle
    }, e.header), e.headerCount && t(jP, {
        testId: gb(e.testId, "headingCount"),
        className: ke(oye.headerCount, e.disabled && oye.disabled)
    }, e.headerCount), e.required && t(o, null, t("span", {
        className: oye.requiredMark,
        "aria-hidden": true
    }, v), t(bO, {
        id: `${l}-required`
    }, i("header.required.aria")))))), y && t("div", {
        className: oye.headerAction,
        "aria-disabled": e.disabled
    }, y)), !e.isDragImage && t("section", {
        className: ke(oye.content, f?.className),
        style: {
            display: p ? undefined : "none",
            height: p ? "auto" : 0,
            maxHeight: e.maxHeight,
            overflowY: e.maxHeight ? "auto" : "hidden",
            ...f?.style
        },
        onTransitionEnd: t => {
            if (t.target === t.currentTarget) {
                h({
                    isOpen: e.isOpen
                });
            }
        },
        ref: r,
        "data-testid": gb(e.testId, "content"),
        id: u,
        "aria-labelledby": d,
        "aria-disabled": e.disabled
    }, t("div", {
        className: oye.sectionContainer,
        "data-ws-heading-level": e.headingLevel
    }, e.children)));
};

const mye = e => ({
    ...__({
        "spacing-m": e.tokensExperimental["space-base-m"],
        "spacing-xxs": e.tokensExperimental["space-base-xxs"],
        "spacing-s": e.tokensExperimental["space-base-s"],
        "spacing-xs": e.tokensExperimental["space-base-xs"],
        "hoverState-color": e.themeVariant === "high-contrast" || e.themeVariant === "dark" ? e.tokensExperimental["color-action-background-standard-hover"] : e.tokensExperimental["color-action-background-control-hover"],
        "medium-sh": e.tokensExperimental["shadow-depth-m"],
        "trans-dur": e.tokensExperimental["duration-400"],
        "anim-dur": e.tokensExperimental["duration-100"],
        "dragged-opacity": .3,
        "indicator-line-bg": e.tokensExperimental["color-primary"],
        "indicator-loop": e.tokensExperimental["color-text-neutral-inverse"],
        "font-size-h5": e.tokensExperimental["font-size-heading-text-5"],
        "font-weight-default": e.tokensExperimental["font-style-weight-400"]
    }, "windowshade"),
    ...!e.enableNovaTokens && pye(e)
});

const pye = e => __({
    "hoverState-color": e.themeVariant === "high-contrast" || e.themeVariant === "dark" ? e.backgrounds.page.bg : e.backgroundsDepth.standard.bg,
    "medium-sh": e.backgroundsDepth.medium.sh,
    "trans-dur": e.animation.duration.exit.l,
    "anim-dur": e.animation.duration.standard,
    "indicator-line-bg": e.c.primary,
    "indicator-loop": e.themeVariant === "light" ? e.c.white : e.c.black,
    "font-size-h5": e.font.size.h5,
    "font-weight-default": e.font.weight.default
}, "windowshade");

const fye = (e, t) => {
    const o = t?.disabled ? {
        bg: e.tokensExperimental["color-action-background-control-disabled"],
        bd: e.tokensExperimental["color-action-border-control-disabled"]
    } : {
        bg: e.tokensExperimental["color-action-background-control-normal"],
        bd: e.tokensExperimental["color-action-border-control-normal"]
    };
    let n = "var(--focus-light-bg)";
    let a = e.tokensExperimental["color-action-text-control-normal"];
    if (e.themeVariant === "light" && t?.variant === "primary-light") {
        a = e.tokensExperimental["color-text-neutral-inverse"];
        n = "var(--focus-dark-bg)";
    }
    return {
        ...__({
            ...o,
            fg: a,
            "asterisk-fg": t?.disabled ? e.tokensExperimental["color-action-icon-control-disabled"] : e.tokensExperimental["color-status-alert"],
            "font-size-m": e.tokensExperimental["font-size-body-text-m"],
            focus: n
        }, "windowshade-header"),
        ...__({
            "padding-start": t?.showHeadingIcon && t?.headingIcon || !!t?.state && t.state.length > 0 ? "var(--windowshade-spacing-xs)" : "var(--windowshade-spacing-m)"
        }, "windowshade"),
        ...!e.enableNovaTokens && pye(e)
    };
};

const gye = ({initialOpenSections: e, isAccordion: o, staticMode: n, ...a}) => {
    const [r, s] = m(((e, t) => {
        const n = e.indexOf(t);
        if (n === -1) {
            return o ? [ t ] : [ ...e, t ];
        } else {
            const t = e.slice();
            t.splice(n, 1);
            return t;
        }
    }), e || []);
    const i = e => {
        if (!a.sections[e].staticMode) {
            s(e);
            a.onToggleSection?.(e);
        }
    };
    return t(cye, Ee({
        staticMode: n
    }, a, {
        openSections: a.openSections ?? r,
        onToggleSection: i
    }));
};

function hye(e, t, o = false) {
    if (o) {
        return [ t ];
    }
    const n = [ ...e ];
    const a = e.indexOf(t);
    if (a !== -1) {
        n.splice(a, 1);
    } else {
        n.push(t);
    }
    return n;
}

const bye = function({id: t, aboutInfo: o, actions: n}) {
    a((() => {
        if (o && o.value) {
            const e = 32;
            const a = o.isOpen ? 14 + 18 * o.value.messages.length + 30 : 0;
            n.setAboutInfoLayout(t, {
                height: e + a
            });
        }
    }), [ o, n, t ]);
    const r = C_();
    return (o === null || o === void 0 ? void 0 : o.value) ? e.createElement(gye, {
        openSections: o.isOpen ? [ 0 ] : [],
        onToggleSection: () => n.toggleOpen(t),
        sections: [ {
            header: o.value.label,
            content: e.createElement("ul", {
                style: {
                    marginTop: "1em",
                    marginBottom: "calc(1em + 1rem)",
                    listStyleType: "disc",
                    color: r.stateStandardContent.normal.fg,
                    fontSize: "0.875rem"
                }
            }, o.value.messages.map(((t, o) => e.createElement("li", {
                key: o
            }, t))))
        } ]
    }) : null;
};

const vye = yo(((e, t) => ({
    aboutInfo: Sfe(e, t.id)
})), (e => ({
    actions: bo(Object.assign({
        setAboutInfoLayout: jde.actions.setAboutInfoLayout
    }, Sme.actions), e)
})))(bye);

function yye(e, t) {
    const [o, a] = n(e);
    const r = c(0);
    const i = s(((e, o = false) => {
        if (o) {
            a(e);
            return;
        }
        const n = !!r.current;
        if (r.current) {
            clearInterval(r.current);
        }
        r.current = window.setTimeout((() => {
            r.current = 0;
        }), t);
        if (n) {
            return;
        }
        a(e);
    }), []);
    return [ o, i ];
}

function xye(e) {
    const t = c(e);
    a((() => {
        t.current = e;
    }), [ e ]);
    return r((() => {
        const e = e => {
            if (t.current && (e.key === "ContextMenu" || e.key === "F10" && e.shiftKey) && bD() !== fD.Win) {
                e.preventDefault();
                const o = e.target instanceof HTMLElement ? e.target : document.activeElement;
                const {x: n = 0, y: a = 0} = (o === null || o === void 0 ? void 0 : o.getBoundingClientRect()) || {};
                t.current({
                    x: n,
                    y: a,
                    source: "keyboard",
                    nativeEvent: e.nativeEvent
                });
            }
        };
        const o = e => {
            if (t.current) {
                e.preventDefault();
                t.current({
                    x: e.pageX,
                    y: e.pageY,
                    source: "mouse",
                    nativeEvent: e.nativeEvent
                });
            }
        };
        return {
            onKeyDown: e,
            onContextMenu: o
        };
    }), []);
}

function Sye(e) {
    const t = c(e);
    a((() => {
        t.current = e;
    }), [ e ]);
    return t;
}

function wye(e, t) {
    const o = Sye(e);
    a((() => {
        const e = setTimeout((() => o.current()), t);
        return () => {
            clearTimeout(e);
        };
    }), [ t, o ]);
}

function Cye(e) {
    const t = Sye(e);
    a((() => () => t.current()), [ t ]);
}

function Eye(e, t) {
    const [o, a] = n();
    const r = o === undefined || t.some(((e, t) => !Object.is(e, o[t])));
    if (r) {
        a(t);
        e();
    }
    return r;
}

function Iye(t) {
    const {message: o, onDismiss: n, referenceElementRef: a} = t;
    Cye((() => {
        if (o) {
            n();
        }
    }));
    const r = cy();
    return r && o ? _e(e.createElement(_ye, {
        message: o,
        onDismiss: n,
        referenceElementRef: a
    }), r) : null;
}

const _ye = t => {
    const o = $be(t.message.text);
    const n = c("Outside");
    wye((() => {
        if (n.current === "Hovering") {
            n.current = "HoveringExpired";
            return;
        }
        n.current = "Outside";
        t.onDismiss();
    }), 3e3);
    return e.createElement(wq, {
        onMouseEnter: () => n.current = "Hovering",
        onMouseLeave: () => {
            if (n.current === "HoveringExpired") {
                t.onDismiss();
            }
            n.current = "Outside";
        },
        referenceElementRef: t.referenceElementRef,
        displayMode: "primary",
        referenceElementDock: [ "center", "start" ],
        toastDock: [ "center", "start" ],
        isOpen: true
    }, o);
};

var Dye = "sas_components-BIRDVisualization-BIRDVisualization_visualization";

var Lye = {
    visualization: Dye
};

const Tye = function(t) {
    const [a] = n(Lo);
    const {messageActions: r, actions: s, hasPosition: i, isSingleObject: l} = t;
    const u = c(null);
    const m = Iye({
        message: t.message,
        referenceElementRef: u,
        onDismiss: () => r.set(t.id, undefined)
    });
    d((function() {
        if (!i && !l) {
            s.update(t.id, {
                contentId: undefined
            });
            return;
        }
        s.update(t.id, {
            contentId: a
        });
        return function() {
            s.update(t.id, {
                contentId: undefined
            });
        };
    }), [ s, a, t.id, i, l ]);
    const p = {};
    if (t.minWidth) {
        p.minWidth = t.minWidth + "px";
    }
    if (t.minHeight) {
        p.minHeight = t.minHeight + "px";
    }
    return e.createElement(o, null, e.createElement("div", {
        id: a,
        "data-testid": Xg() ? t.id + "-content" : null,
        className: Lye.visualization,
        tabIndex: 0,
        ref: u,
        "aria-label": t.accessibilityLabel,
        style: Object.assign(Object.assign({}, p), {
            position: "relative",
            display: "flex",
            flexShrink: 1,
            width: "100%",
            height: "100%"
        }),
        onContextMenu: e => {
            const o = Bu.getMousePosition(e.nativeEvent, e.currentTarget, true);
            t.menuActions.setGraphPosition(o);
        }
    }), m, e.createElement(vye, {
        id: t.id
    }));
};

const Rye = yo(((e, t) => {
    var o;
    const {constraints: n, position: a} = bfe(e, t.id);
    const r = !!((o = bfe(e, `media-${t.id}`)) === null || o === void 0 ? void 0 : o.isSingleObject);
    return {
        message: xfe(e, t.id),
        minWidth: n === null || n === void 0 ? void 0 : n.minWidth,
        minHeight: n === null || n === void 0 ? void 0 : n.minHeight,
        accessibilityLabel: Gfe(e, t.id),
        hasPosition: !!a,
        isSingleObject: r
    };
}), (e => ({
    actions: bo(Lue.actions, e),
    messageActions: bo(hme.actions, e),
    menuActions: bo(yme.actions, e)
})))(Tye);

var kye = "sas_components-SearchableList-ListFix_list-fix";

var Aye = {
    listFix: kye
};

const Mye = {
    toRowKey(e) {
        return e.toString();
    },
    fromRowKey(e) {
        return parseInt(e);
    }
};

function Nye(t) {
    const {filteredSelections: o, searchResults: n, selectedSearchResults: s} = r((() => {
        var e, o;
        const n = new Set(t.selection);
        const a = new Set(n);
        const r = [];
        const s = new Set;
        const i = t.searchValue.toLocaleLowerCase();
        for (const [l, c] of (o = (e = t.values) === null || e === void 0 ? void 0 : e.entries()) !== null && o !== void 0 ? o : []) {
            if (c.toLocaleLowerCase().includes(i)) {
                const e = Mye.toRowKey(r.length);
                r.push(l);
                if (n.has(l)) {
                    a.delete(l);
                    s.add(e);
                }
            }
        }
        return {
            filteredSelections: a,
            searchResults: r,
            selectedSearchResults: s
        };
    }), [ t.selection, t.values, t.searchValue ]);
    const [i, l] = Q1();
    const c = D9();
    const d = c.clearMeasurementCache;
    a((() => {
        d({
            startRowIndex: 0,
            startColumnIndex: 0
        });
    }), [ t.itemHeight, d ]);
    const u = Eye((() => {
        c.setSelectRows({
            selectedRows: s
        });
    }), [ s ]);
    if (u) {
        return null;
    } else {
        const a = e.createElement("div", {
            style: {
                height: "100%",
                minHeight: 0
            }
        }, e.createElement("div", {
            ref: i,
            style: {
                width: t.preferredWidth,
                height: t.preferredHeight
            }
        }, l ? e.createElement(pee, Object.assign({}, c, {
            width: Math.floor(l.width),
            height: Math.floor(l.height),
            itemHeight: t.itemHeight ? () => t.itemHeight : undefined,
            className: Aye.listFix,
            testId: t.listTestId,
            getRowKey: Mye.toRowKey,
            getRowIndex: Mye.fromRowKey,
            onSelect: function e(a) {
                var r;
                const s = [];
                for (const e of a !== null && a !== void 0 ? a : []) {
                    const t = n[Mye.fromRowKey(e)];
                    if (t !== undefined) {
                        s.push(t);
                    }
                }
                if (t.type === "multi") {
                    for (const e of o) {
                        s.push(e);
                    }
                }
                (r = t.onSelect) === null || r === void 0 ? void 0 : r.call(t, s.sort(((e, t) => e - t)));
            },
            selectionMode: t.type === "multi" ? "toggle" : "singleRadio",
            rowCount: n.length,
            tableTheme: () => {
                var e, o;
                return {
                    "--table-bg": (o = (e = t.styleState) === null || e === void 0 ? void 0 : e.normal) === null || o === void 0 ? void 0 : o.bg
                };
            },
            theme: e => {
                var o;
                const {normal: n, font: a} = (o = t.styleState) !== null && o !== void 0 ? o : {};
                return {
                    "--list-item-bg": n === null || n === void 0 ? void 0 : n.bg,
                    "--list-item-fg": n === null || n === void 0 ? void 0 : n.fg,
                    "--list-item-description-fg": n === null || n === void 0 ? void 0 : n.fg,
                    "--list-item-default-fg": n === null || n === void 0 ? void 0 : n.fg,
                    "--list-item-default-description-fg": n === null || n === void 0 ? void 0 : n.fg,
                    "--list-item-font-family": a === null || a === void 0 ? void 0 : a.fontFamily,
                    "--list-item-font-style": a === null || a === void 0 ? void 0 : a.fontStyle,
                    "--list-item-font-weight-default": a === null || a === void 0 ? void 0 : a.fontWeight,
                    "--list-item-font-size-m": a === null || a === void 0 ? void 0 : a.fontSize,
                    "--list-item-font-size-s": "var(--list-item-font-size-m)"
                };
            },
            itemColumn: {
                key: "itemColumn",
                item(o) {
                    var a, r;
                    const s = n[o];
                    if (s === undefined || !((a = t.values) === null || a === void 0 ? void 0 : a[s])) {
                        return null;
                    }
                    const i = (r = t.measureValues) === null || r === void 0 ? void 0 : r[s];
                    return e.createElement(y9, {
                        title: t.values[s],
                        info: i !== undefined ? {
                            infoText: i,
                            hasPriority: true
                        } : null
                    });
                }
            },
            ariaLabel: t.accessibilityLabel
        })) : null));
        return e.createElement("div", {
            style: {
                minHeight: 0,
                height: "100%",
                display: "flex",
                flexDirection: "column"
            },
            tabIndex: -1
        }, t.searchable ? e.createElement("div", {
            style: {
                padding: "0.1875rem 0 0.1875rem 0.5rem",
                display: "flex"
            }
        }, e.createElement(pQ, {
            filterMode: true,
            value: t.searchValue,
            numberOfResults: t.searchValue ? n.length : null,
            onChange: e => {
                t.onSearchValueChange(e.value);
            }
        })) : null, t.renderListWrapper ? t.renderListWrapper(a) : a);
    }
}

const Oye = 40 + 8 + 26 + 2;

const Pye = function(t) {
    var o, a;
    const s = t.actions;
    const {values: i, measureValues: l, selectedIndices: c, required: u, selectAllEnabled: m, searchable: p} = t.state;
    const {font: f} = t.style || {};
    const g = $be();
    const [h, b] = n();
    {
        const e = C_();
        const o = r((() => Qbe(f, e)), [ f, e ]);
        const n = r((() => Qbe(undefined, e)), [ e ]);
        const a = pve(o.fontFamily);
        const c = t.preferredSizing ? i : undefined;
        const u = t.preferredSizing ? l : undefined;
        d((() => {
            const e = Math.max(16, eve(o)) + Xbe;
            const a = m ? eve(n) + 3 : 0;
            const r = p ? Math.max(28, eve(n) + 4) + 1 + 2 + 6 : 0;
            const i = {
                minHeight: e * 2 + r + a,
                minWidth: 160
            };
            let l;
            if (c) {
                i.preferredWidth = Oye + ove(c, o) + (u ? 8 + Math.max(24, ove(u, o)) : 0);
                l = e * c.length;
                i.preferredHeight = l + r + a;
            }
            b({
                itemHeight: e,
                preferredWidth: i.preferredWidth,
                preferredHeight: l
            });
            s.setConstraints(t.id, i);
        }), [ a, c, u, s, t.id, o, n, p, m ]);
    }
    const [v, y] = n("");
    const x = (o = i === null || i === void 0 ? void 0 : i.length) !== null && o !== void 0 ? o : 0;
    const S = (a = c === null || c === void 0 ? void 0 : c.length) !== null && a !== void 0 ? a : 0;
    const w = r((() => {
        if (!m || v.length > 0) {
            return;
        }
        if (u) {
            if (S === x) {
                return {
                    text: g({
                        key: "CheckboxList.clearSelection.txt"
                    }),
                    onPress: () => s.update(t.id, {
                        selectedIndices: [ 0 ]
                    })
                };
            } else {
                return {
                    text: g({
                        key: "CheckboxList.selectAll.txt"
                    }),
                    onPress: () => s.update(t.id, {
                        selectedIndices: [ ...Array(x).keys() ]
                    })
                };
            }
        }
        if (S > 0) {
            return {
                text: g({
                    key: "CheckboxList.clearSelection.fmt",
                    args: {
                        count: `${S}`
                    }
                }),
                onPress: () => s.update(t.id, {
                    selectedIndices: []
                })
            };
        } else {
            return {
                text: g({
                    key: "CheckboxList.selectAll.txt"
                }),
                onPress: () => s.update(t.id, {
                    selectedIndices: [ ...Array(x).keys() ]
                })
            };
        }
    }), [ s, t.id, m, u, x, S, v, g ]);
    return e.createElement(Nye, {
        searchable: p,
        type: "multi",
        values: i,
        measureValues: l,
        listTestId: Xg() ? `${t.id}-CbList` : null,
        accessibilityLabel: t.accessibilityLabel,
        styleState: t.style,
        selection: c !== null && c !== void 0 ? c : [],
        searchValue: v,
        onSearchValueChange: e => y(e),
        onSelect: e => {
            if (u && e.length === 0 && c) {
                e = [ ...c ];
            }
            s.update(t.id, {
                selectedIndices: e
            });
        },
        itemHeight: h === null || h === void 0 ? void 0 : h.itemHeight,
        preferredWidth: h === null || h === void 0 ? void 0 : h.preferredWidth,
        preferredHeight: h === null || h === void 0 ? void 0 : h.preferredHeight,
        renderListWrapper: w ? function t(o) {
            return e.createElement("div", {
                style: {
                    display: "flex",
                    flexDirection: "column",
                    height: "100%",
                    minHeight: 0
                }
            }, e.createElement("div", {
                style: {
                    padding: "0 0 0.1875rem 0.5625rem"
                }
            }, e.createElement(AJ, {
                onPress: w.onPress,
                wrapText: false
            }, w.text)), o);
        } : undefined
    });
};

const Bye = yo(((e, t) => ({
    state: Ffe(e, t.id),
    layoutState: bfe(e, t.id),
    style: yfe(e, t.id),
    accessibilityLabel: Gfe(e, t.id)
})), (e => ({
    actions: bo(Object.assign({
        setConstraints: Vde
    }, Sue.actions), e)
})))(Pye);

const zye = 16 + 2;

const Fye = 8 + 2 + 1;

const jye = function(t) {
    const o = t.actions;
    const {values: s = [], measureValues: i = [], committedValue: l = "", formattedValue: u = "", label: m, error: p} = t.state;
    const f = $be();
    const {font: g, normal: h} = t.style || {};
    const b = m ? f({
        key: "TextFieldTypeAhead.placeholder.fmt",
        args: {
            placeholderLabel: m
        }
    }) : null;
    const [v, y] = n(l);
    d((() => {
        y(l);
    }), [ l ]);
    const x = r((() => s.map(((e, t) => ({
        text: e,
        secondaryText: i[t],
        concatSecondaryText: true
    })))), [ s, i ]);
    {
        const e = t.preferredSizing ? x : undefined;
        const n = C_();
        const a = r((() => Qbe(g, n)), [ g, n ]);
        const s = pve(a.fontFamily);
        d((() => {
            const n = Math.max(28, eve(a) + Fye);
            let r = undefined;
            if (e) {
                const t = e.map((e => e.text + (e.secondaryText || "")));
                if (b) {
                    t.push(b);
                }
                r = ove(t, a) + zye;
                r = Math.max(160, r);
            }
            o.setConstraints(t.id, {
                minHeight: n,
                preferredHeight: n,
                minWidth: 160,
                preferredWidth: r
            });
        }), [ s, o, e, t.id, b, a ]);
    }
    const [S, w] = n(false);
    const [C, E] = n(false);
    const {onBlur: I, onFocus: _} = JI((() => {
        w(false);
        E(false);
    }));
    const D = p === null && u !== undefined && (!C || S);
    const L = c(null);
    a((() => {
        if (!L.current || !S) {
            return;
        }
        const e = L.current;
        const t = e => {
            if (e.key === "Enter") {
                return;
            }
            w(false);
        };
        const o = () => {
            w(false);
        };
        e.addEventListener("keydown", t);
        e.addEventListener("mousedown", o);
        return () => {
            e.removeEventListener("keydown", t);
            e.removeEventListener("mousedown", o);
        };
    }), [ S ]);
    return e.createElement(SH, {
        style: {
            width: "100%"
        },
        ref: L,
        futureTheme: () => Zbe({
            "--input-bg": h === null || h === void 0 ? void 0 : h.bg,
            "--input-fg": h === null || h === void 0 ? void 0 : h.fg,
            "--input-placeholder-fg": h === null || h === void 0 ? void 0 : h.fg,
            "--input-font-family": g === null || g === void 0 ? void 0 : g.fontFamily,
            "--input-fontSize": g === null || g === void 0 ? void 0 : g.fontSize,
            "--input-fontStyle": g === null || g === void 0 ? void 0 : g.fontStyle,
            "--input-fontWeight": g === null || g === void 0 ? void 0 : g.fontWeight,
            "--input-textDecoration": g === null || g === void 0 ? void 0 : g.textDecoration
        }),
        placeholder: b,
        suggestionItems: x,
        onChange: ({value: e}) => {
            w(false);
            y(e);
            o.updateError(t.id, e);
        },
        onCommit: e => {
            if (S) {
                return;
            }
            if (e.reason === "enter") {
                w(true);
            }
            o.commitValue(t.id, e.value);
        },
        onCancel: () => {
            y(l);
            o.updateError(t.id, l);
            return v !== l;
        },
        value: D ? u : v,
        message: p ? f(p) : null,
        status: p ? "alert" : null,
        onFocus: () => {
            _();
            E(true);
        },
        onBlur: I,
        filterType: "contains",
        ariaLabel: t.accessibilityLabel,
        enableVirtualScrolling: true
    });
};

const Vye = yo(((e, t) => ({
    state: Rfe(e, t.id),
    style: yfe(e, t.id),
    accessibilityLabel: Gfe(e, t.id)
})), (e => ({
    actions: bo(Object.assign({
        setConstraints: Vde
    }, Eue.actions), e)
})))(jye);

const Hye = new Map;

function Uye(e, t) {
    let o = Hye.get(e);
    if (!o) {
        o = {
            value: t,
            subject: new A
        };
        Hye.set(e, o);
    }
    o.value = t;
    o.subject.next(t);
    return o;
}

function Gye(e) {
    fetch(e, {
        credentials: "include"
    }).then((e => e.blob())).then((t => {
        Uye(e, {
            dataUrl: URL.createObjectURL(t)
        });
    })).catch((() => {
        Uye(e, {
            error: true
        });
    }));
}

const Kye = function(t) {
    const [o, r] = n(false);
    const [s, i] = n(undefined);
    const {mode: l, url: d, alt: u, isExternal: m} = t.state;
    const p = $be({
        key: "BirdImage.image.txt"
    });
    a((() => {
        if (!d) {
            i("");
            return;
        }
        if (m) {
            i(d);
            return;
        }
        let e = Hye.get(d);
        if (!e) {
            e = Uye(d, {});
            Gye(d);
        }
        if (e.value.error) {
            Gye(d);
        }
        if (e.value.dataUrl) {
            i(e.value.dataUrl);
        }
        const o = e === null || e === void 0 ? void 0 : e.subject.subscribe((e => {
            if (e.dataUrl) {
                i(e.dataUrl);
            } else if (e.error) {
                t.actions.update(t.id, {
                    loadState: "error"
                });
            }
        }));
        return () => o.unsubscribe();
    }), [ d, m, t.id, t.actions ]);
    const f = e => {
        const o = e.currentTarget;
        t.actions.setConstraints(t.id, {
            minHeight: 10,
            minWidth: 10,
            preferredHeight: o.naturalHeight,
            preferredWidth: o.naturalWidth
        });
        t.actions.update(t.id, {
            loadState: "success"
        });
        r(true);
    };
    const [g, h] = yye(undefined, 300);
    a((() => {
        const e = t.actions.notifyClick;
        if (!g) {
            return;
        }
        e(t.id, g);
        h(undefined, true);
    }), [ g, t.id, t.actions.notifyClick, h ]);
    const b = c(null);
    return e.createElement("div", {
        ref: b,
        style: {
            overflow: "auto",
            width: "100%",
            height: "100%",
            position: "relative",
            display: o ? "flex" : "none",
            flexShrink: 1
        }
    }, e.createElement($0, {
        style: {
            position: "absolute"
        },
        tooltip: u !== null && u !== void 0 ? u : undefined,
        mode: l,
        src: s !== null && s !== void 0 ? s : "",
        alt: t.accessibilityLabel || p,
        onLoad: f,
        onError: () => {
            if (!s) {
                return;
            }
            t.actions.update(t.id, {
                loadState: "error"
            });
        },
        onClick: e => h({
            x: e.clientX,
            y: e.clientY
        }),
        onPress: () => {
            var e, t;
            const {x: o = 0, y: n = 0} = (t = (e = b.current) === null || e === void 0 ? void 0 : e.getBoundingClientRect()) !== null && t !== void 0 ? t : {};
            h({
                x: o,
                y: n
            });
        }
    }));
};

const Wye = yo(((e, t) => ({
    state: Tfe(e, t.id),
    accessibilityLabel: Gfe(e, t.id)
})), (e => ({
    actions: bo(Object.assign({
        setConstraints: Vde
    }, Tue.actions), e)
})))(Kye);

function $ye(e, t) {
    const {toDate: o, toValue: n} = Yye[e];
    const a = qye[t];
    return function e(t, r) {
        let s;
        s = o(t);
        a(s, {
            dir: r.type === "forward" ? 1 : -1
        });
        s = n(s);
        return s;
    };
}

const Yye = {
    date: {
        toDate: qge,
        toValue: Yge
    },
    datetime: {
        toDate: $ge,
        toValue: Wge
    },
    time: {
        toDate: Zge,
        toValue: Xge
    },
    month: {
        toDate: qge,
        toValue: Yge
    },
    quarter: {
        toDate: qge,
        toValue: Yge
    }
};

const qye = {
    second(e, {dir: t}) {
        e.setSeconds(e.getSeconds() + t);
    },
    minute(e, {dir: t}) {
        e.setMinutes(e.getMinutes() + t);
    },
    hour(e, {dir: t}) {
        e.setHours(e.getHours() + t);
    },
    day(e, {dir: t}) {
        e.setDate(e.getDate() + t);
    },
    month(e, {dir: t}) {
        const o = e.getMonth() + t;
        e.setDate(Math.min(e.getDate(), Xye(o, e.getFullYear())));
        e.setMonth(o);
    },
    quarter(e, {dir: t}) {
        const o = e.getMonth() + 3 * t;
        e.setDate(Math.min(e.getDate(), Xye(o, e.getFullYear())));
        e.setMonth(o);
    },
    year(e, {dir: t}) {
        e.setFullYear(e.getFullYear() + t);
    },
    decade(e, {dir: t}) {
        e.setFullYear(e.getFullYear() + 10 * t);
    }
};

function Xye(e, t) {
    t += Math.floor(e / 12);
    e %= 12;
    if (e === 1) {
        return Gge(t) ? 29 : 28;
    } else if (e === 3 || e === 5 || e === 8 || e === 10) {
        return 30;
    } else {
        return 31;
    }
}

function Zye(e) {
    switch (e.toUpperCase()) {
      case "DATE":
      case "DATEN":
      case "DATEYW":
      case "DAY":
      case "DTDATE":
      case "DDMMYY":
      case "DOWNAME":
      case "DTWKDATX":
      case "HDATE":
      case "HEBDATE":
      case "JULDAY":
      case "JULIAN":
      case "MMDDYY":
      case "WEEKDATE":
      case "WEEKV":
      case "WORDDATE":
      case "YYMMDD":
        return [ "day", "month", "year" ];

      case "DATETIME":
      case "TIME":
      case "MMSS":
        return [ "second", "minute", "hour" ];

      case "HHMM":
        return [ "minute", "minute", "hour" ];

      case "HOUR":
        return [ "hour", "hour", "day" ];

      case "DTMONYY":
      case "MMYY":
      case "MONYY":
      case "YYMM":
      case "MONNAME":
        return [ "month", "month", "year" ];

      case "DTYYQC":
      case "QTR":
      case "YYQC":
        return [ "quarter", "year", "decade" ];

      case "YEAR":
      case "DTYEAR":
        return [ "year", "year", "decade" ];

      default:
        return [ "second", "day", "year" ];
    }
}

function Jye(e) {
    var t;
    let o;
    let n = false;
    const a = (t = e.getFormatName()) === null || t === void 0 ? void 0 : t.toUpperCase();
    switch (a) {
      case "DTDATE":
      case "DATE":
      case "DATEN":
      case "WEEKDATE":
      case "WORDDATE":
      case "DTWKDATX":
      case "NLDATE":
      case "NLDATEMD":
      case "NLDATEMDL":
      case "NLDATEMDM":
      case "NLDATEMDS":
      case "XYYMMDD":
      case "NLDATEL":
      case "NLDATEM":
      case "NLDATEW":
      case "NLDATMDT":
      case "NLDATMMD":
      case "NLDATMMDL":
      case "NLDATMMDM":
      case "NLDATMMDS":
      case "NLDATMYW":
      case "NLDATMWN":
      case "MMDDYY":
      case "NLDATES":
      case "DDMMYY":
      case "YYMMDD":
      case "YEAR":
      case "DTYEAR":
      case "NLDATEYR":
      case "NLDATMYR":
      case "DAY":
      case "DOWNAME":
      case "NLDATEWN":
      case "WEEKDAY":
      case "DDMMYYB":
      case "DDMMYYC":
      case "DDMMYYD":
      case "DDMMYYN":
      case "DDMMYYP":
      case "DDMMYYS":
      case "MMDDYYB":
      case "MMDDYYC":
      case "MMDDYYD":
      case "MMDDYYN":
      case "MMDDYYP":
      case "MMDDYYS":
      case "WEEKDATX":
      case "YYMMDDB":
      case "YYMMDDC":
      case "YYMMDDD":
      case "YYMMDDN":
      case "YYMMDDP":
      case "YYMMDDS":
      case "HDATE":
      case "HEBDATE":
      case "YYQN":
      case "WEEKV":
      case "YYWEEKU":
      case "YYWEEKV":
      case "YYWEEKW":
      case "JULIAN":
      case "JULDAY":
        o = "date";
        break;

      case "TIMEAMPM":
      case "NLDATMTM":
      case "NLTIMAP":
      case "TOD":
      case "NLDATMTZ":
      case "NLTIME":
        n = true;
        o = "time";
        break;

      case "TIME":
        n = true;
        o = "time";
        break;

      case "MMSS":
        n = true;
        o = "time";
        break;

      case "HHHH":
      case "HOUR":
      case "HHMM":
        o = "time";
        break;

      case "DATEAMPM":
      case "DATETIME":
      case "NLDATM":
      case "NLDATMAP":
      case "NLDATML":
      case "NLDATMM":
      case "NLDATMS":
      case "NLDATMW":
      case "NLDATMWZ":
      case "NLDATMZ":
      case "MDYAMPM":
        n = true;
        o = "datetime";
        break;

      case "DTYYQC":
      case "YYQC":
      case "QTR":
      case "NLDATEYQ":
      case "NLDATEYQL":
      case "NLDATEYQM":
      case "NLDATEYQS":
      case "YYQ":
      case "YYQD":
      case "YYQP":
      case "YYQR":
      case "YYQRC":
      case "YYQRD":
      case "YYQRN":
      case "YYQRP":
      case "YYQRS":
      case "YYQS":
      case "YYQZ":
      case "QTRR":
      case "NLDATMYQ":
      case "NLDATMYQL":
      case "NLDATMYQM":
      case "NLDATMYQS":
        o = "quarter";
        break;

      case "DTMONYY":
      case "MMYY":
      case "MONYY":
      case "YYMM":
      case "MONNAME":
      case "MONTH":
      case "MMYYC":
      case "MMYYD":
      case "MMYYN":
      case "MMYYP":
      case "MMYYS":
      case "NLDATEYMS":
      case "NLDATEMN":
      case "NLDATEYM":
      case "NLDATEYML":
      case "NLDATEYMM":
      case "NLDATMMN":
      case "NLDATMYM":
      case "NLDATMYML":
      case "NLDATMYMM":
      case "NLDATMYMS":
      case "YYMON":
        o = "month";
        break;

      default:
        o = exe(e);
        break;
    }
    n = n && e.getDecimalWidth() > 0;
    if (o === "time" || o === "datetime") {
        return {
            dateType: o,
            showMilliseconds: n
        };
    } else {
        return {
            dateType: o
        };
    }
}

function Qye(e) {
    if ([ "datetime", "time" ].includes(e)) {
        return {
            toJsDate: $ge,
            fromJsDate: Wge
        };
    } else {
        return {
            toJsDate: qge,
            fromJsDate: Yge
        };
    }
}

function exe(e) {
    if (e.isTimeFormat()) {
        return "time";
    } else if (e.isDateFormat()) {
        return "date";
    } else if (e.isDateTimeFormat()) {
        return "datetime";
    } else {
        return undefined;
    }
}

function txe(e, t = Math.round) {
    return function o(n) {
        let a = Number(n + `e+${e}`);
        a = t(a);
        a = Number(a + `e-${e}`);
        return a;
    };
}

function oxe(e) {
    const t = e[1] - e[0];
    if (t <= 0 || t >= 10) {
        return 0;
    } else {
        return Math.ceil(-(Math.log(t) / Math.log(10))) + 1;
    }
}

function nxe(e, t) {
    const o = t[1] - t[0];
    let n = o / 100;
    let a = o / 10;
    if (e.getFormatName() === "BEST") {
        const e = oxe(t);
        if (o > 100) {
            n = txe(e, Math.floor)(n);
        } else if (o === 0) {
            n = 0;
        } else {
            n = Math.max(n, 10 ** (-1 * e));
        }
        a = txe(e, Math.ceil)(a);
    }
    return [ n, undefined, a ];
}

const axe = Yge(zge);

const rxe = Yge(Pge);

const sxe = Wge(Fge);

const ixe = Wge(Bge);

function lxe(e, t) {
    if (t.isDateFormat()) {
        return Math.min(rxe, Math.max(axe, e));
    }
    if (t.isDateTimeFormat()) {
        return Math.min(ixe, Math.max(sxe, e));
    }
    if (!Number.isSafeInteger(Math.ceil(e))) {
        return Math.min(Number.MAX_SAFE_INTEGER, Math.max(Number.MIN_SAFE_INTEGER, e));
    }
    return e;
}

function cxe(e, t, o) {
    const n = t ? qge(e) : $ge(e);
    const a = new Date(mxe(n.valueOf(), o));
    return t ? Yge(a) : Wge(a);
}

function dxe(e, t, o) {
    const n = ohe(o);
    if ((n === null || n === void 0 ? void 0 : n.isDateFormat()) || (n === null || n === void 0 ? void 0 : n.isTimeFormat()) || (n === null || n === void 0 ? void 0 : n.isDateTimeFormat())) {
        const a = n === null || n === void 0 ? void 0 : n.isDateFormat();
        return {
            min: cxe(e, a, o),
            max: cxe(t, a, o)
        };
    }
    const a = hxe(o, e, t);
    return {
        min: pxe(e, a, o),
        max: fxe(t, a, o)
    };
}

function uxe(e) {
    const t = e.toUpperCase().split(/\d/)[0];
    const o = e.substring(t.length).split(".");
    return {
        name: t,
        width: parseInt(o[0]),
        decimal: parseInt(o[1])
    };
}

function mxe(e, t) {
    if (!t) {
        return e;
    }
    let o = t;
    const {name: n, decimal: a, width: r} = uxe(t);
    switch (n) {
      case "DATE":
      case "DATEN":
      case "DATEYW":
      case "DAY":
      case "DTDATE":
      case "DDMMYY":
      case "DOWNAME":
      case "DTWKDATX":
      case "HDATE":
      case "HEBDATE":
      case "JULDAY":
      case "JULIAN":
      case "MMDDYY":
      case "WEEKDATE":
      case "WORDDATE":
      case "YYMMDD":
        o = "DTDATE10";
        break;

      case "DATETIME":
        o = "DATETIME18";
        break;

      case "DTMONYY":
      case "MMYY":
      case "MONYY":
      case "YYMM":
      case "MONNAME":
        o = "MONYY7";
        break;

      case "DTYYQC":
      case "QTR":
      case "YYQC":
        o = "YYQC8";
        break;

      case "YEAR":
      case "DTYEAR":
        {
            const t = new Date(e);
            t.setDate(1);
            t.setMonth(0);
            e = t.valueOf();
            o = "DTDATE10";
            break;
        }

      case "WEEKV":
        {
            o = "DTDATE10";
            if (isNaN(r) || r > 6) {
                break;
            }
            const t = new Date(e);
            const n = t.getDay() === 7 ? t.getDay() : 0;
            t.setDate(t.getDate() - n + 1);
            e = t.valueOf();
            break;
        }
    }
    if (a > 0) {
        o = t;
    }
    const s = ohe(o);
    if (!s) {
        return e;
    }
    let i;
    if (s.isDateFormat() === true) {
        const t = Yge(new Date(e));
        const o = s.format(t);
        const n = s.parse(o);
        if (!isNaN(n)) {
            i = qge(n);
        }
    } else if (s.isDateTimeFormat() === true) {
        const t = Wge(new Date(e));
        const o = s.format(t);
        const a = s.parse(o);
        if (!isNaN(a)) {
            if (n === "TOD") {
                i = Zge(a);
            } else {
                i = $ge(a);
            }
        }
    }
    if (i) {
        const e = i.valueOf();
        if (!isNaN(e)) {
            return e;
        }
    }
    return e;
}

function pxe(e, t, o) {
    const n = gxe(e, t);
    if (!o) {
        return n;
    }
    if (n > e) {
        return gxe(e - t, t);
    }
    return n;
}

function fxe(e, t, o) {
    const n = gxe(e, t);
    if (!o) {
        return n;
    }
    if (n < e) {
        return gxe(e + t, t);
    }
    return n;
}

function gxe(e, t) {
    if (t === null || t === undefined || t === 0) {
        return e;
    }
    const o = String(t).indexOf(".");
    let n = 0;
    if (o >= 0) {
        n = String(t).length - o - 1;
    }
    if (t === 1) {
        return Math.round(e);
    }
    const a = (e / t).toFixed(n);
    const r = Math.floor(a);
    const s = (a - r) * t;
    const i = t / 2;
    let l = r * t;
    if (s >= i) {
        l = l + t;
    }
    return parseFloat(l.toFixed(n));
}

function hxe(e, t, o) {
    let n = 1;
    if (!e) {
        return 1;
    }
    const {name: a, decimal: r} = uxe(e);
    const s = r;
    if (a === "BEST") {
        return bxe(t, o);
    }
    let i = 0;
    for (i; i < s; i++) {
        n = n / 10;
    }
    n = parseFloat(n.toFixed(s));
    if (a === "PERCENT") {
        n = n / 100;
    }
    return n;
}

function bxe(e, t) {
    const o = Math.abs(t - e);
    let n = 1;
    let a = o / n;
    while (a < 10) {
        n = n / 10;
        a = o / n;
    }
    return n;
}

const vxe = {
    key: "TextFieldTypeAhead.validation.numeric.txt"
};

const yxe = function(t) {
    var o;
    const {actions: n, roundRange: a} = t;
    const {range: s, format: i, sliderState: l, horizontal: c} = t.state;
    const u = jV();
    const [m, p] = r((() => {
        const e = the(i || "BEST6", u);
        if (e) {
            return [ e, i || "BEST6" ];
        }
        return [ the("BEST6", u), "BEST6" ];
    }), [ i, u ]);
    const f = exe(m);
    const g = $be(vxe);
    const h = r((() => e => {
        e = lxe(e, m);
        if (f === undefined) {
            return m.parse(m.format(e));
        }
        const t = m === null || m === void 0 ? void 0 : m.isDateFormat();
        return cxe(e, t, p);
    }), [ m, f, p ]);
    const {maxRange: b, minRange: v} = r((() => {
        if (!s) {
            return {
                minRange: 0,
                maxRange: 100
            };
        }
        const e = lxe(s.max, m);
        const t = lxe(s.min, m);
        if (!a) {
            return {
                minRange: h(t),
                maxRange: h(e)
            };
        }
        const o = dxe(t, e, p);
        return {
            minRange: o.min,
            maxRange: o.max
        };
    }), [ m, s, p, a, h ]);
    const y = r((() => {
        const e = new Intl.NumberFormat([ u ], {
            useGrouping: false,
            maximumFractionDigits: 20
        });
        return {
            format(e) {
                if (!h) return "";
                return m.format(h(e)) || "";
            },
            formatEditText(t) {
                if (!h) return "";
                return e.format(h(t));
            },
            parse(e) {
                if (!h) return {
                    type: "success",
                    result: 0
                };
                const t = Sbe(e, u);
                if (isNaN(t)) {
                    return {
                        type: "error",
                        result: g
                    };
                } else {
                    return {
                        type: "success",
                        result: h(t)
                    };
                }
            }
        };
    }), [ g, h, m, u ]);
    {
        const e = (o = t.style) === null || o === void 0 ? void 0 : o.font;
        const a = C_();
        const s = r((() => Qbe(e, a)), [ a, e ]);
        const i = pve(s.fontFamily);
        d((() => {
            function e(e) {
                if (e === undefined) {
                    return 0;
                } else if (f === undefined) {
                    e = parseFloat(e.toString().replace(/\d/g, "8"));
                }
                let t;
                let o;
                if (f === undefined) {
                    t = c ? 32 : 48;
                    o = c ? 1.25 : 1.1;
                } else {
                    t = c ? 45 : 73;
                    o = c ? 1.25 : 1.2;
                }
                let n = y.format(e);
                if (n === "") {
                    return t;
                }
                n = c ? `${n} to ${n}` : n;
                const a = ove([ n ], s) * o;
                return a + t;
            }
            const o = Math.max(e(v), e(b));
            const a = Math.max(o, t.preferredSizing ? 200 : 160);
            let r;
            if (c) {
                const e = eve(s);
                r = 4 + e + 4 + 4 + 4 + 8 + 4 + e + 8;
            } else {
                r = 200;
            }
            n.setConstraints(t.id, {
                minHeight: r,
                preferredHeight: r,
                minWidth: a,
                preferredWidth: o
            });
        }), [ i, s, y, f, v, b, n, c, t.id, t.preferredSizing ]);
    }
    const [x, S, w] = r((() => {
        const e = m.getFormatName();
        if (!e) {
            return [ undefined, undefined, undefined ];
        } else if (f !== undefined) {
            const {toJsDate: t, fromJsDate: o} = Qye(f);
            return Zye(e).map((e => {
                const n = $ye(f, e);
                return (e, a) => t(n(o(e), a));
            }));
        } else if (!s) {
            return [ undefined, undefined, undefined ];
        } else {
            return nxe(m, [ v, b ]);
        }
    }), [ m, f, v, b, s ]);
    const C = {
        theme: () => t.style && t.style.normal && {
            fg: t.style.normal.fg
        },
        font: t.style && t.style.font
    };
    const E = {
        testId: `${t.id}-slider`,
        style: t.preferredSizing && !c ? {
            height: "200px"
        } : undefined,
        orientation: c ? "horizontal" : "vertical",
        tickLabelTokens: C,
        handleLabelTokens: C,
        ariaLabel: t.accessibilityLabel,
        disableRoundToStep: true
    };
    if (!l) {
        return e.createElement(sre, Object.assign({}, E, {
            values: []
        }));
    }
    let I;
    if (l.max !== undefined) {
        I = {
            type: "range",
            minValue: l.min,
            maxValue: l.max,
            onChange(e) {
                n.update(t.id, {
                    sliderState: {
                        min: e.minValue,
                        max: e.maxValue
                    }
                });
            },
            onCommit(e) {
                if (!h) return;
                n.update(t.id, {
                    values: {
                        min: h(e.minValue),
                        max: h(e.maxValue)
                    }
                });
            }
        };
    } else {
        I = {
            type: "value",
            value: l.min,
            onChange(e) {
                n.update(t.id, {
                    sliderState: {
                        min: e.value
                    }
                });
            },
            onCommit(e) {
                if (!h) return;
                n.update(t.id, {
                    values: {
                        min: h(e.value)
                    }
                });
            }
        };
    }
    if (f !== undefined) {
        const {toJsDate: t, fromJsDate: o} = Qye(f);
        let n;
        if (I.type === "range") {
            n = {
                type: I.type,
                minValue: t(I.minValue),
                maxValue: t(I.maxValue),
                onChange(e) {
                    I.onChange({
                        minValue: o(e.minValue),
                        maxValue: o(e.maxValue)
                    });
                },
                onCommit(e) {
                    var t, n;
                    (n = (t = I).onCommit) === null || n === void 0 ? void 0 : n.call(t, {
                        minValue: o(e.minValue),
                        maxValue: o(e.maxValue)
                    });
                }
            };
        } else {
            n = {
                type: I.type,
                value: t(I.value),
                onChange(e) {
                    I.onChange({
                        value: o(e.value)
                    });
                },
                onCommit(e) {
                    var t, n;
                    (n = (t = I).onCommit) === null || n === void 0 ? void 0 : n.call(t, {
                        value: o(e.value)
                    });
                }
            };
        }
        const a = s ? [ t(v), t(b) ] : [ new Date(2e3, 0, 1), new Date(2020, 11, 31) ];
        return e.createElement(fre, Object.assign({}, E, n, Jye(m), {
            scale: a,
            ticks: a,
            format: e => y.format(o(e)),
            step: x,
            stepMedium: S,
            stepLarge: w
        }));
    } else {
        const t = [ v, b ];
        const o = {
            ticks: t,
            scale: t,
            format: y,
            step: x,
            stepMedium: S,
            stepLarge: w
        };
        if (I.type === "range") {
            return e.createElement(ore, Object.assign({}, E, o, I));
        } else {
            return e.createElement(tre, Object.assign({}, E, o, I));
        }
    }
};

const xxe = yo(((e, t) => ({
    state: Dfe(e, t.id),
    style: yfe(e, t.id),
    accessibilityLabel: Gfe(e, t.id),
    roundRange: e.transport.roundBirdSliderRange
})), (e => ({
    actions: bo(Object.assign({
        setConstraints: Vde
    }, wue.actions), e)
})))(yxe);

var Sxe = "sas_components-BirdText-BirdText_text";

var wxe = {
    text: Sxe
};

const Cxe = /^ac\d+$/;

const Exe = function({actions: t, state: o, id: n}) {
    const a = C_();
    const {text: r = ""} = o;
    d((() => {
        t.setConstraints(n, {
            minWidth: 100
        });
    }), [ t, n ]);
    return e.createElement("div", {
        style: I_({
            "font-size": a.font.size.m
        }, "text"),
        className: wxe.text,
        tabIndex: 0,
        onClick: e => {
            if (!(e.target instanceof HTMLAnchorElement)) return;
            const o = e.target.getAttribute("href");
            if (o !== null && Cxe.test(o)) {
                t.notifyInteraction(n, o);
                e.preventDefault();
            }
        },
        onDoubleClick: () => {
            t.notifyDoubleClick(n);
        },
        dangerouslySetInnerHTML: {
            __html: r
        }
    });
};

const Ixe = yo(((e, t) => ({
    state: _fe(e, t.id)
})), (e => ({
    actions: bo(Object.assign({
        setConstraints: Vde
    }, Rue.actions), e)
})))(Exe);

const _xe = 40 + 8 + 26 + 2;

const Dxe = function(t) {
    const o = t.actions;
    const {values: a, measureValues: s, selectedIndex: i, searchable: l} = t.state;
    const {font: c} = t.style || {};
    const [u, m] = n("");
    const [p, f] = n();
    {
        const e = C_();
        const n = r((() => Qbe(c, e)), [ c, e ]);
        const i = r((() => Qbe(undefined, e)), [ e ]);
        const u = pve(n.fontFamily);
        const m = t.preferredSizing ? a : undefined;
        const p = t.preferredSizing ? s : undefined;
        d((() => {
            const e = Math.max(16, eve(n)) + Xbe;
            const a = l ? Math.max(28, eve(i) + 4) + 1 + 2 + 6 : 0;
            const r = {
                minHeight: e * 2 + a,
                minWidth: 160
            };
            if (m) {
                r.preferredWidth = _xe + ove(m, n) + (p ? 8 + Math.max(24, ove(p, n)) : 0);
                r.preferredHeight = e * m.length + a;
            }
            f({
                itemHeight: e,
                preferredWidth: r.preferredWidth,
                preferredHeight: r.preferredHeight
            });
            o.setConstraints(t.id, r);
        }), [ u, o, m, p, t.id, n, i, l ]);
    }
    return e.createElement(Nye, {
        type: "single",
        searchable: l,
        selection: [ i || 0 ],
        onSelect: e => {
            o.update(t.id, {
                selectedIndex: e[0]
            });
        },
        values: a,
        measureValues: s,
        listTestId: Xg() ? `${t.id}-RdList` : null,
        accessibilityLabel: t.accessibilityLabel,
        styleState: t.style,
        itemHeight: p === null || p === void 0 ? void 0 : p.itemHeight,
        preferredWidth: p === null || p === void 0 ? void 0 : p.preferredWidth,
        preferredHeight: p === null || p === void 0 ? void 0 : p.preferredHeight,
        searchValue: u,
        onSearchValueChange: e => m(e)
    });
};

const Lxe = yo(((e, t) => ({
    state: Bfe(e, t.id),
    style: yfe(e, t.id),
    accessibilityLabel: Gfe(e, t.id)
})), (e => ({
    actions: bo(Object.assign({
        setConstraints: Vde
    }, Cue.actions), e)
})))(Dxe);

var Txe = "sas_components-BirdTable-BirdTable_table";

var Rxe = {
    table: Txe
};

const kxe = function({id: t, actions: a, menuActions: r, message: s, messageActions: i, minWidth: l, minHeight: u, accessibilityLabel: m}) {
    const [p] = n(Lo);
    d((function() {
        a.update(t, {
            contentId: p
        });
        return function() {
            a.update(t, {
                contentId: undefined
            });
        };
    }), [ a, p, t ]);
    const f = c(null);
    const g = Iye({
        message: s,
        referenceElementRef: f,
        onDismiss: () => i.set(t, undefined)
    });
    const h = {};
    if (l) {
        h.minWidth = l + "px";
    }
    if (u) {
        h.minHeight = u + "px";
    }
    return e.createElement(o, null, e.createElement("div", {
        id: p,
        "data-testid": Xg() ? p : null,
        className: Rxe.table,
        tabIndex: 0,
        ref: f,
        "aria-label": m,
        style: Object.assign(Object.assign({}, h), {
            display: "flex",
            flexShrink: 1,
            width: "100%",
            height: "100%"
        }),
        onContextMenu: e => {
            const t = Bu.getMousePosition(e.nativeEvent, e.currentTarget, true);
            r.setGraphPosition(t);
        }
    }), g);
};

const Axe = yo(((e, t) => {
    const o = bfe(e, t.id).constraints;
    return {
        minWidth: o === null || o === void 0 ? void 0 : o.minWidth,
        minHeight: o === null || o === void 0 ? void 0 : o.minHeight,
        accessibilityLabel: Gfe(e, t.id),
        message: xfe(e, t.id)
    };
}), (e => ({
    actions: bo(Due.actions, e),
    messageActions: bo(hme.actions, e),
    menuActions: bo(yme.actions, e)
})))(kxe);

var Mxe = "sas_components-BirdCrosstab-BirdCrosstab_crosstab";

var Nxe = {
    crosstab: Mxe
};

const Oxe = function(t) {
    const [a] = n(Lo);
    d((() => {
        t.actions.update(t.id, {
            contentId: a
        });
        return function() {
            t.actions.update(t.id, {
                contentId: undefined
            });
        };
    }), [ t.actions, t.id, a ]);
    const r = c(null);
    const s = Iye({
        message: t.message,
        referenceElementRef: r,
        onDismiss: () => t.messageActions.set(t.id, undefined)
    });
    const i = {};
    if (t.minWidth) {
        i.minWidth = t.minWidth + "px";
    }
    if (t.minHeight) {
        i.minHeight = t.minHeight + "px";
    }
    return e.createElement(o, null, e.createElement("div", {
        id: a,
        "data-testid": Xg() ? a : null,
        className: Nxe.crosstab,
        tabIndex: 0,
        ref: r,
        "aria-label": t.accessibilityLabel,
        style: Object.assign(Object.assign({}, i), {
            display: "flex",
            flexShrink: 1,
            width: "100%",
            height: "100%"
        }),
        onContextMenu: e => {
            const o = Bu.getMousePosition(e.nativeEvent, e.currentTarget, true);
            t.actions.setGraphPosition(o);
        }
    }), s);
};

const Pxe = yo(((e, t) => {
    const o = bfe(e, t.id).constraints;
    return {
        minWidth: o === null || o === void 0 ? void 0 : o.minWidth,
        minHeight: o === null || o === void 0 ? void 0 : o.minHeight,
        accessibilityLabel: Gfe(e, t.id),
        message: xfe(e, t.id)
    };
}), (e => ({
    actions: bo(Object.assign({
        setGraphPosition: yme.actions.setGraphPosition
    }, _ue.actions), e),
    messageActions: bo(hme.actions, e)
})))(Oxe);

function Bxe(e) {
    if (!e) {
        return undefined;
    }
    return Fxe(e.normal, e.font);
}

function zxe(e) {
    if (!e) {
        return undefined;
    }
    return Fxe(e.selected, e.font);
}

function Fxe(e, t) {
    const o = {};
    if (e && e.bg) {
        o.backgroundColor = e.bg;
    }
    if (e && e.fg) {
        o.color = e.fg;
    }
    return Object.assign(Object.assign({}, t), o);
}

const jxe = 24 + 1;

const Vxe = ({id: t, preferredSizing: o, state: n, actions: a, style: s, accessibilityLabel: i}) => {
    const {values: l, measureValues: c, selectedIndex: u, orientation: m, required: p} = n;
    const f = r((() => l && c && c.length ? l.map(((e, t) => {
        if (c.length <= t) {
            return e;
        }
        const o = c[t];
        if (o.length < 1) {
            return e;
        }
        return e + " (" + o + ")";
    })) : l || []), [ l, c ]);
    {
        const {font: e} = s || {};
        const n = C_();
        const i = r((() => Qbe(e, n)), [ e, n ]);
        const l = pve(i.fontFamily);
        d((() => {
            const e = Math.max(28, eve(i) + 8 + 2);
            if (m === "vertical") {
                const o = f ? f.length : 0;
                a.setConstraints(t, {
                    preferredHeight: e * o,
                    minHeight: e * Math.min(3, o),
                    minWidth: Math.max(ove(f, i) + jxe + 1, 100)
                });
            } else {
                const n = nve(f, i) + jxe * f.length + 1;
                let r = {
                    preferredHeight: e,
                    minHeight: e,
                    minWidth: Math.max(100, Math.min(n, 160))
                };
                if (o) {
                    r = Object.assign(Object.assign({}, r), {
                        preferredWidth: n
                    });
                }
                a.setConstraints(t, r);
            }
        }), [ l, m, f, a, t, o, i ]);
    }
    const g = ({selected: e}) => e ? zxe(s) : Bxe(s);
    function h(e) {
        a.update(t, {
            selectedIndex: e !== null && e !== void 0 ? e : undefined
        });
    }
    const b = m === "vertical" ? {
        height: "100%",
        flexShrink: 1,
        minHeight: 0,
        overflowX: "hidden",
        overflowY: "auto",
        display: "flex"
    } : {
        display: "flex",
        flexGrow: o ? 0 : 1,
        flexDirection: "column",
        minHeight: 0
    };
    return e.createElement("div", {
        style: b
    }, e.createElement(H1, {
        orientation: m,
        values: f,
        selectedIndex: u,
        onSelectedIndex: h,
        buttonStyle: g,
        style: {
            flexGrow: 1
        },
        deselectable: !p,
        ariaLabel: i,
        scrollable: true,
        variableWidth: true
    }));
};

const Hxe = yo(((e, t) => ({
    state: Lfe(e, t.id),
    style: yfe(e, t.id),
    accessibilityLabel: Gfe(e, t.id)
})), (e => ({
    actions: bo(Object.assign({
        setConstraints: Vde
    }, xue.actions), e)
})))(Vxe);

function Uxe(e, t) {
    const o = e.scrollWidth;
    if (o <= e.offsetWidth) {
        return;
    }
    const n = e.getBoundingClientRect();
    const a = t.left - n.left;
    const r = t.right - n.right;
    const s = Math.max(0, Math.min(n.width / 4, n.width - t.width));
    if (a < 0) {
        e.scrollLeft = e.scrollLeft + a - s;
    } else if (r > 0) {
        e.scrollLeft = e.scrollLeft + r + s;
    }
}

var Gxe = "sas_components-StackContainer-StackNavigation-StackLink_stack-link";

var Kxe = "sas_components-StackContainer-StackNavigation-StackLink_stack-link-text";

var Wxe = "sas_components-StackContainer-StackNavigation-StackLink_stack-link-no-wrap";

var $xe = {
    stackLink: Gxe,
    stackLinkText: Kxe,
    stackLinkNoWrap: Wxe
};

const Yxe = u(((t, o) => {
    const n = C_();
    return e.createElement("div", {
        ref: o,
        className: $xe.stackLink,
        style: I_(qxe(t.selected, n), "stack-link"),
        onClick: () => t.onClick && t.onClick(),
        "data-testid": t.testId,
        tabIndex: t.tabIndex,
        "aria-selected": t.selected,
        role: "tab"
    }, e.createElement("span", {
        className: ke($xe.stackLinkText, !t.wrapText && $xe.stackLinkNoWrap)
    }, t.label));
}));

function qxe(e, t) {
    return {
        fg: e ? t.c.primary : t.stateStandardContentNova.normal.fg,
        "text-decoration": e ? "none" : "underline",
        cursor: e ? "default" : "pointer"
    };
}

var Xxe = {
    left: "sas_components-StackContainer-StackNavigation-StackButton_stack-button_left",
    right: "sas_components-StackContainer-StackNavigation-StackButton_stack-button_right",
    top: "sas_components-StackContainer-StackNavigation-StackButton_stack-button_top",
    bottom: "sas_components-StackContainer-StackNavigation-StackButton_stack-button_bottom"
};

var Zxe = {
    stackButton: Xxe
};

const Jxe = "dragType";

const Qxe = {
    textOverflow: "ellipsis",
    display: "block",
    overflow: "hidden",
    width: "100%",
    maxWidth: "25rem",
    alignItems: "flex-start"
};

const eSe = f((t => {
    const {selected: o, focused: n, isFocusActive: r} = t;
    const s = c(null);
    const i = t.scrollTo;
    const l = t.tabLocation === "right" || t.tabLocation === "left";
    const u = C_();
    d((() => {
        if (o && s.current) {
            i(s.current.getBoundingClientRect());
        }
    }), [ o, i ]);
    const m = c(null);
    a((() => {
        var e;
        if (n && r) {
            (e = m.current) === null || e === void 0 ? void 0 : e.focus();
        }
    }), [ n, r ]);
    const p = () => t.onChange(t.index);
    const f = (() => {
        switch (t.buttonType) {
          case ql.DOT:
            {
                return e.createElement(QM, {
                    ref: m,
                    icon: {
                        icon: o ? BR : PR
                    },
                    focusable: n,
                    variant: oN.Light,
                    onPress: p,
                    tokens: () => ({
                        bg: "transparent"
                    }),
                    "aria-selected": o
                });
            }

          case ql.LINK:
            return e.createElement(Yxe, {
                ref: m,
                label: t.label,
                key: t.index,
                selected: o,
                wrapText: l,
                onClick: p,
                tabIndex: n ? 0 : -1
            });

          case ql.TAB:
            return e.createElement(Zoe, {
                style: {
                    padding: u.spacing.insetSquish.m.padding
                },
                textStyle: Object.assign(Object.assign({}, Qxe), {
                    whiteSpace: l ? "normal" : "nowrap"
                }),
                label: t.label,
                selected: o,
                focused: n && r,
                onPress: p,
                location: t.tabLocation,
                tokenOverrides: () => ({
                    bg: "transparent"
                }),
                tabIndex: n ? 0 : -1,
                "aria-selected": o,
                allowDrag: true
            });

          case ql.BUTTON:
          default:
            return e.createElement(QM, {
                ref: m,
                text: t.label,
                focusable: n,
                className: Zxe.stackButton[t.tabLocation],
                onPress: p,
                tokens: ({state: e}) => tSe(o, e, u),
                "aria-selected": o
            });
        }
    })();
    return e.createElement("div", {
        ref: s
    }, e.createElement(Bte, {
        key: t.index,
        id: `${t.dndPrefix}-dndTab-${t.index}`,
        allowDrag: t.enableDrag,
        allowDrop: t.enableDrag,
        acceptDropTypes: [ Jxe ],
        index: t.index,
        dndPrefix: t.dndPrefix,
        type: Jxe,
        droppableContent: [ Jxe ],
        reorderTabs: t.reorderItem,
        onDragLeave: () => {},
        onDragOver: () => {}
    }, f));
}));

function tSe(e, t, o) {
    if (e) {
        return o.stateSecondary.selected;
    }
    if (t === nN.Normal) {
        return {
            bg: "transparent"
        };
    }
    return {};
}

const oSe = MA("StackNavigation-dndPrefix");

const nSe = u(((t, o) => {
    const a = C_().stateStandardContentNova.normal.fg;
    const [r, s] = n(false);
    const i = oSe();
    const {buttonType: l, items: c} = t;
    const d = t.selectedIndex < c.length - 1;
    const u = t.selectedIndex !== 0;
    let m = undefined;
    let p;
    let f;
    let g;
    let h;
    const b = {
        padding: ".5rem",
        display: "inline-flex",
        flexShrink: 0
    };
    if (t.direction === "horizontal") {
        m = "row";
        b.flexDirection = m;
        b.maxWidth = "100%";
        p = _T;
        f = ET;
        switch (t.horizontalPosition) {
          case lc.LEFT:
            b.justifyContent = "flex-start";
            break;

          case lc.RIGHT:
            b.justifyContent = "flex-end";
            break;

          default:
            b.justifyContent = "center";
            break;
        }
        g = t.verticalPosition === kc.TOP ? "bottom" : "top";
        h = "center";
    } else {
        m = "column";
        b.flexDirection = m;
        b.maxHeight = "100%";
        p = wT;
        f = CT;
        b.maxWidth = "25%";
        switch (t.verticalPosition) {
          case kc.TOP:
            b.justifyContent = "flex-start";
            break;

          case kc.BOTTOM:
            b.justifyContent = "flex-end";
            break;

          default:
            b.justifyContent = "center";
            break;
        }
        g = t.horizontalPosition === lc.LEFT ? "right" : "left";
        h = t.horizontalPosition === lc.LEFT ? "right" : "left";
    }
    const v = ay();
    const y = e => {
        let o = "ArrowRight", n = "ArrowLeft";
        if (v) {
            [o, n] = [ n, o ];
        }
        if (e.key === o) {
            e.preventDefault();
            t.onFocusedIndexChange(Math.min(t.focusedIndex + 1, t.items.length - 1));
        } else if (e.key === n) {
            e.preventDefault();
            t.onFocusedIndexChange(Math.max(t.focusedIndex - 1, 0));
        } else if ([ " ", "Enter" ].includes(e.key)) {
            e.preventDefault();
            t.onChange(t.focusedIndex);
        }
    };
    const {isOverflowed: x, setContentRef: S, scrollTo: w} = aSe();
    const C = l === ql.PROGRESSNUMBER ? e.createElement("span", {
        style: {
            color: a
        }
    }, t.selectedIndex + 1, " / ", c.length) : c.map(((o, n) => e.createElement(eSe, {
        key: n,
        index: n,
        dndPrefix: i,
        selected: n === t.selectedIndex,
        onChange: t.onChange,
        reorderItem: t.onReorderItems,
        scrollTo: w,
        buttonType: l,
        label: o,
        tabLocation: g,
        focused: n === t.focusedIndex,
        isFocusActive: r,
        enableDrag: !!t.enableDrag
    })));
    return e.createElement("div", {
        ref: o,
        style: b,
        "data-testid": t.id
    }, e.createElement(QM, {
        icon: {
            icon: p,
            tooltip: ""
        },
        variant: oN.Light,
        disabled: !u,
        onPress: () => u && t.onChange(t.selectedIndex - 1)
    }), e.createElement("div", {
        role: "tablist",
        onKeyDown: y,
        ref: S,
        style: {
            display: "flex",
            flexGrow: 0,
            flexShrink: 1,
            overflow: "hidden",
            flexDirection: m,
            textOverflow: "ellipsis",
            textAlign: h
        },
        onFocus: () => {
            s(true);
        },
        onBlur: () => {
            s(false);
        }
    }, C), e.createElement(QM, {
        icon: {
            icon: f,
            tooltip: ""
        },
        variant: oN.Light,
        disabled: !d,
        onPress: () => d && t.onChange(t.selectedIndex + 1)
    }), !x || t.items.length <= 1 ? null : e.createElement("div", {
        style: {
            display: "flex",
            alignItems: "center"
        }
    }, e.createElement(MJ, {
        variant: oN.Icon,
        icon: {
            icon: ck
        },
        hideDownArrow: true,
        sections: [ {
            items: t.items.map(((e, o) => ({
                text: e,
                checked: o === t.selectedIndex
            })))
        } ],
        onItemSelected: e => {
            const o = e[0][1];
            t.onChange(o);
        }
    })), e.createElement(zte, {
        dragType: Jxe,
        dndPrefix: i
    }, (o => {
        const n = c[o];
        return e.createElement(eSe, {
            key: o,
            index: o,
            dndPrefix: i,
            selected: o === t.selectedIndex,
            onChange: t.onChange,
            scrollTo: w,
            buttonType: l,
            label: n,
            tabLocation: g,
            focused: o === t.focusedIndex,
            isFocusActive: r,
            enableDrag: false
        });
    })));
}));

function aSe() {
    const [e, t] = n(false);
    const [o, r] = kN((() => {
        i();
    }));
    a((() => {
        i();
    }));
    const i = s((() => {
        const e = r();
        if (!e) return;
        const {clientWidth: o, scrollWidth: n} = e;
        t(o < n);
    }), [ r ]);
    const l = s((e => {
        const t = r();
        if (!t) return;
        Uxe(t, e);
    }), [ r ]);
    return {
        isOverflowed: e,
        setContentRef: o,
        scrollTo: l
    };
}

const rSe = i(null);

function sSe(e) {
    let t = null, o, n;
    return () => {
        if (!n) {
            n = Promise.all(e());
        }
        n.then((e => {
            t = [ {
                Draggable: e[0].Draggable,
                Droppable: e[0].Droppable,
                DragDropContext: e[0].DragDropContext
            }, {
                useDrag: e[1].useDrag,
                useDragLayer: e[1].useDragLayer,
                useDrop: e[1].useDrop,
                getEmptyImage: e[2].getEmptyImage
            }, {
                DndProvider: e[1].DndProvider,
                HTML5Backend: e[2].HTML5Backend
            } ];
        })).catch((e => o = e));
        if (t) return t; else if (o) throw o; else throw n;
    };
}

const iSe = sSe((() => [ import("./chunk8.mjs"), import("react-dnd"), import("react-dnd-html5-backend") ]));

function lSe(e) {
    let o = null;
    let n = tX;
    let a;
    let r;
    if (e.enableDragDrop) {
        const e = iSe();
        [o, n, {HTML5Backend: a, DndProvider: r}] = e;
    }
    return t(rSe.Provider, {
        value: o
    }, t(oX.Provider, {
        value: n
    }, r && a ? t(r, {
        backend: a
    }, e.children) : e.children));
}

function cSe(e, t, o) {
    if (e === "horizontal") {
        return o === kc.BOTTOM ? "column-reverse" : "column";
    }
    return t === lc.RIGHT ? "row-reverse" : "row";
}

const dSe = ({id: t, state: o, layoutState: r, elementState: i, accessibilityLabel: l, actions: d, enableDrag: u}) => {
    var m, p;
    const {buttonType: f = ql.BUTTON, direction: g = "horizontal", horizontalPosition: h = lc.CENTER, verticalPosition: b = kc.MIDDLE, selectedIndex: v = 0, labels: y = []} = o;
    const [x, S] = n(v);
    const w = c(null);
    a((() => {
        if (!w.current) {
            return;
        }
        const e = g === "vertical";
        const o = e ? w.current.clientWidth : 0;
        const n = e ? 0 : w.current.clientHeight;
        const a = r.constraints;
        if (!a || a.additionalContentWidth !== o || a.additionalContentHeight !== n) {
            d.setConstraints(t, {
                additionalContentWidth: o,
                additionalContentHeight: n
            });
        }
    }));
    const C = tTe(r.childKeys, i);
    const E = C ? C.map(((o, n) => {
        const a = n === v;
        return e.createElement("div", {
            "data-testid": Xg() ? t + "-stack-layer-" + n : undefined,
            key: n,
            style: {
                display: a ? "block" : "none"
            }
        }, o);
    })) : null;
    const I = cSe(g, h, b);
    const _ = s((e => {
        S(e);
        d.update(t, {
            selectedIndex: e
        });
    }), [ d, t ]);
    const D = s(((e, o) => {
        d.notifyReorderItems(t, {
            oldItemIndex: e,
            newItemIndex: o
        });
    }), [ d, t ]);
    let L = e.createElement(nSe, {
        id: t + "-stack-navigation",
        ref: w,
        items: y,
        onChange: _,
        onReorderItems: D,
        onFocusedIndexChange: S,
        focusedIndex: x,
        buttonType: f,
        direction: g,
        horizontalPosition: h,
        verticalPosition: b,
        selectedIndex: v,
        enableDrag: (m = o.enableDrag) !== null && m !== void 0 ? m : u
    });
    if ((p = o.enableDrag) !== null && p !== void 0 ? p : u) {
        L = e.createElement(lSe, {
            enableDragDrop: true
        }, L);
    }
    return e.createElement("div", {
        style: {
            display: "flex",
            flexDirection: I,
            flexGrow: 1,
            height: 0
        },
        "aria-label": l
    }, L, e.createElement("div", {
        style: Object.assign(Object.assign({}, Fbe(r)), {
            flexGrow: 1
        })
    }, E));
};

const uSe = yo(((e, t) => ({
    state: Mfe(e, t.id),
    layoutState: bfe(e, t.id),
    elementState: Efe(e),
    accessibilityLabel: Gfe(e, t.id),
    enableDrag: e.sections.tabsEditable
})), (e => ({
    actions: bo(Object.assign({
        setConstraints: Vde
    }, kue.actions), e)
})))(dSe);

const mSe = i(null);

mSe.Provider;

function pSe() {
    return l(mSe);
}

const fSe = i(null);

fSe.Provider;

function gSe() {
    return l(fSe);
}

const hSe = i(null);

const bSe = hSe.Provider;

function vSe() {
    return l(hSe);
}

var ySe = "sas_components-PromptContainer-__internal__-SelectionsContent_label";

var xSe = "sas_components-PromptContainer-__internal__-SelectionsContent_value";

var SSe = "sas_components-PromptContainer-__internal__-SelectionsContent_title";

var wSe = "sas_components-PromptContainer-__internal__-SelectionsContent_divider";

var CSe = "sas_components-PromptContainer-__internal__-SelectionsContent_selections-container";

var ESe = {
    label: ySe,
    value: xSe,
    title: SSe,
    divider: wSe,
    selectionsContainer: CSe
};

function ISe(e, t, o, n) {
    if (t.valueColumnLabel) {
        if (n && t.measureColumnLabel) {
            return e({
                key: "PromptElement.categoryLabelValueAndMeasureLabelValueTooltip.fmt",
                args: {
                    categoryLabel: t.valueColumnLabel,
                    categoryValue: o,
                    measureLabel: t.measureColumnLabel,
                    measureValue: n
                }
            });
        }
        return e({
            key: "PromptElement.categoryLabelValueTooltip.fmt",
            args: {
                categoryLabel: t.valueColumnLabel,
                categoryValue: o
            }
        });
    }
    return o;
}

function _Se(e, t, o) {
    var n, a, r, s, i, l, c, d, u, m, p, f, g, h, b, v, y, x, S, w, C, E, I, _, D, L, T, R, k, A, M, N, O, P, B, z, F, j, V, H, U, G, K, W, $, Y, q, X, Z, J, Q, ee, te, oe, ne, ae, re, se, ie, le, ce, de, ue, me, pe, fe, ge;
    const he = ((n = t.warning[o]) === null || n === void 0 ? void 0 : n.type) === "error" || ((a = t.status[o]) === null || a === void 0 ? void 0 : a.type);
    if (e.ButtonBar[o]) {
        if (he) {
            return {
                name: (s = (r = e.ButtonBar[o]) === null || r === void 0 ? void 0 : r.name) !== null && s !== void 0 ? s : "",
                type: "no-selections"
            };
        }
        const t = (i = e.ButtonBar[o]) === null || i === void 0 ? void 0 : i.selectedIndex;
        return {
            type: "value",
            value: (c = (l = e.ButtonBar[o]) === null || l === void 0 ? void 0 : l.values) === null || c === void 0 ? void 0 : c[t],
            measure: (u = (d = e.ButtonBar[o]) === null || d === void 0 ? void 0 : d.measureValues) === null || u === void 0 ? void 0 : u[t],
            name: (p = (m = e.ButtonBar[o]) === null || m === void 0 ? void 0 : m.name) !== null && p !== void 0 ? p : "",
            valueColumnLabel: (f = e.ButtonBar[o]) === null || f === void 0 ? void 0 : f.valueColumnLabel,
            measureColumnLabel: (g = e.ButtonBar[o]) === null || g === void 0 ? void 0 : g.measureColumnLabel
        };
    }
    if (e.CheckboxList[o]) {
        if (he) {
            return {
                name: (b = (h = e.CheckboxList[o]) === null || h === void 0 ? void 0 : h.name) !== null && b !== void 0 ? b : "",
                type: "no-selections"
            };
        }
        return {
            type: "values",
            indices: (v = e.CheckboxList[o]) === null || v === void 0 ? void 0 : v.selectedIndices,
            values: (y = e.CheckboxList[o]) === null || y === void 0 ? void 0 : y.values,
            measureValues: (x = e.CheckboxList[o]) === null || x === void 0 ? void 0 : x.measureValues,
            name: (w = (S = e.CheckboxList[o]) === null || S === void 0 ? void 0 : S.name) !== null && w !== void 0 ? w : "",
            valueColumnLabel: (C = e.CheckboxList[o]) === null || C === void 0 ? void 0 : C.valueColumnLabel,
            measureColumnLabel: (E = e.CheckboxList[o]) === null || E === void 0 ? void 0 : E.measureColumnLabel
        };
    }
    if (e.RadioList[o]) {
        if (he) {
            return {
                name: (_ = (I = e.RadioList[o]) === null || I === void 0 ? void 0 : I.name) !== null && _ !== void 0 ? _ : "",
                type: "no-selections"
            };
        }
        const t = (D = e.RadioList[o]) === null || D === void 0 ? void 0 : D.selectedIndex;
        return {
            type: "value",
            value: (T = (L = e.RadioList[o]) === null || L === void 0 ? void 0 : L.values) === null || T === void 0 ? void 0 : T[t],
            measure: (k = (R = e.RadioList[o]) === null || R === void 0 ? void 0 : R.measureValues) === null || k === void 0 ? void 0 : k[t],
            name: (M = (A = e.RadioList[o]) === null || A === void 0 ? void 0 : A.name) !== null && M !== void 0 ? M : "",
            valueColumnLabel: (N = e.RadioList[o]) === null || N === void 0 ? void 0 : N.valueColumnLabel,
            measureColumnLabel: (O = e.RadioList[o]) === null || O === void 0 ? void 0 : O.measureColumnLabel
        };
    }
    if (e.ComboBox[o]) {
        if (he) {
            return {
                name: (B = (P = e.ComboBox[o]) === null || P === void 0 ? void 0 : P.name) !== null && B !== void 0 ? B : "",
                type: "no-selections"
            };
        }
        const t = (z = e.ComboBox[o]) === null || z === void 0 ? void 0 : z.selectedIndex;
        return {
            type: "value",
            value: (j = (F = e.ComboBox[o]) === null || F === void 0 ? void 0 : F.values) === null || j === void 0 ? void 0 : j[t],
            measure: (H = (V = e.ComboBox[o]) === null || V === void 0 ? void 0 : V.measureValues) === null || H === void 0 ? void 0 : H[t],
            name: (G = (U = e.ComboBox[o]) === null || U === void 0 ? void 0 : U.name) !== null && G !== void 0 ? G : "",
            valueColumnLabel: (K = e.ComboBox[o]) === null || K === void 0 ? void 0 : K.valueColumnLabel,
            measureColumnLabel: (W = e.ComboBox[o]) === null || W === void 0 ? void 0 : W.measureColumnLabel
        };
    }
    if (e.TextField[o]) {
        if (he) {
            return {
                name: (Y = ($ = e.TextField[o]) === null || $ === void 0 ? void 0 : $.name) !== null && Y !== void 0 ? Y : "",
                type: "no-selections"
            };
        }
        const t = (q = e.TextField[o]) === null || q === void 0 ? void 0 : q.formattedValue;
        const n = (X = e.TextField[o]) === null || X === void 0 ? void 0 : X.values;
        const a = (Z = n === null || n === void 0 ? void 0 : n.indexOf(t)) !== null && Z !== void 0 ? Z : -1;
        if (t && !n || ((J = e.TextField[o]) === null || J === void 0 ? void 0 : J.error) || a === -1) {
            return {
                type: "value",
                value: t,
                name: (ee = (Q = e.TextField[o]) === null || Q === void 0 ? void 0 : Q.name) !== null && ee !== void 0 ? ee : "",
                valueColumnLabel: (te = e.TextField[o]) === null || te === void 0 ? void 0 : te.valueColumnLabel
            };
        }
        return {
            type: "value",
            value: t,
            name: (ne = (oe = e.TextField[o]) === null || oe === void 0 ? void 0 : oe.name) !== null && ne !== void 0 ? ne : "",
            measure: (re = (ae = e.TextField[o]) === null || ae === void 0 ? void 0 : ae.measureValues) === null || re === void 0 ? void 0 : re[a],
            valueColumnLabel: (se = e.TextField[o]) === null || se === void 0 ? void 0 : se.valueColumnLabel,
            measureColumnLabel: (ie = e.TextField[o]) === null || ie === void 0 ? void 0 : ie.measureColumnLabel
        };
    }
    if (e.Slider[o]) {
        if (he) {
            return {
                name: (ce = (le = e.Slider[o]) === null || le === void 0 ? void 0 : le.name) !== null && ce !== void 0 ? ce : "",
                type: "no-selections"
            };
        }
        return {
            type: "range",
            values: (de = e.Slider[o]) === null || de === void 0 ? void 0 : de.values,
            name: (me = (ue = e.Slider[o]) === null || ue === void 0 ? void 0 : ue.name) !== null && me !== void 0 ? me : "",
            valueColumnLabel: (pe = e.Slider[o]) === null || pe === void 0 ? void 0 : pe.valueColumnLabel,
            format: (ge = (fe = e.Slider[o]) === null || fe === void 0 ? void 0 : fe.format) !== null && ge !== void 0 ? ge : ""
        };
    }
}

function DSe(e, t) {
    var o;
    if ((o = t === null || t === void 0 ? void 0 : t.normal) === null || o === void 0 ? void 0 : o.fg) {
        return {
            "title-fg": t.normal.fg,
            "divider-bd": e.themeVariant === "high-contrast" ? t.normal.fg : Jv(t.normal.fg, .5)
        };
    }
    if (e.enableNovaTokens) {
        return {
            "title-fg": e.stateStandardNova.normal.fg,
            "divider-bd": Jv(e.c.colorUiBorder, .5)
        };
    } else {
        switch (e.themeVariant) {
          case "dark":
            return {
                "title-fg": e.c.white,
                "divider-bd": e.c.white15
            };

          case "high-contrast":
            return {
                "title-fg": e.c.white,
                "divider-bd": e.c.white
            };

          default:
            return {
                "title-fg": e.c.n_3,
                "divider-bd": e.c.n3
            };
        }
    }
}

const LSe = t => {
    var o, n, a, s, i, l, c;
    const d = C_();
    const u = jV();
    const m = $be();
    const p = r((() => {
        const e = [];
        const o = m({
            key: "PromptContainerTooltip.noSelections.txt"
        });
        for (const n of t.childSelections) {
            const t = {
                name: n.name,
                selections: []
            };
            switch (n.type) {
              case "no-selections":
                {
                    t.selections = [ o ];
                    break;
                }

              case "value":
                {
                    t.selections = [ n.value ? ISe(m, n, n.value, n.measure) : o ];
                    break;
                }

              case "values":
                {
                    const e = n.indices;
                    const a = n.values;
                    const r = n.measureValues;
                    if (!e || !a) {
                        t.selections = [ o ];
                        break;
                    }
                    for (const o of e) {
                        const e = a[o];
                        if (!e) {
                            continue;
                        }
                        t.selections.push(ISe(m, n, e, r === null || r === void 0 ? void 0 : r[o]));
                    }
                    if (!t.selections.length) {
                        t.selections.push(o);
                    }
                    break;
                }

              case "range":
                {
                    if (!n.values) {
                        t.selections.push(o);
                        break;
                    }
                    const e = the(n.format, u);
                    const a = t => {
                        if (e) {
                            return e.format(t);
                        }
                        return t;
                    };
                    if (n.values.max !== undefined && !isNaN(n.values.max)) {
                        t.selections.push(m({
                            key: "RangeSlider.tooltip.fmt",
                            args: {
                                label: n.valueColumnLabel || "",
                                max: a(n.values.max) + "",
                                min: a(n.values.min) + ""
                            }
                        }));
                    } else {
                        t.selections.push(ISe(m, n, `${a(n.values.min)}`));
                    }
                    break;
                }
            }
            e.push(t);
        }
        return e;
    }), [ u, m, t.childSelections ]);
    const f = ((n = (o = t.style) === null || o === void 0 ? void 0 : o.font) === null || n === void 0 ? void 0 : n.fontFamily) ? {
        fontFamily: (s = (a = t.style) === null || a === void 0 ? void 0 : a.font) === null || s === void 0 ? void 0 : s.fontFamily
    } : undefined;
    return e.createElement("div", {
        "data-testid": Xg() ? `${t.id}-selectionsContent` : undefined,
        onMouseEnter: t.onMouseEnter,
        onMouseLeave: t.onMouseLeave,
        style: Object.assign(Object.assign({}, f), I_(Object.assign(Object.assign({}, DSe(d, t.style)), {
            "font-size": (c = (l = (i = t.style) === null || i === void 0 ? void 0 : i.font) === null || l === void 0 ? void 0 : l.fontSize) !== null && c !== void 0 ? c : d.font.size.l
        }), "selections"))
    }, e.createElement("div", {
        className: ESe.title
    }, m({
        key: "PromptContainerTooltip.selectedValues.txt"
    })), e.createElement("div", {
        className: ESe.divider
    }), e.createElement(iN, {
        className: ESe.selectionsContainer,
        orientation: "vertical",
        spacing: "m"
    }, p.map(((t, o) => e.createElement("div", {
        key: o
    }, e.createElement("span", {
        className: ESe.label
    }, t.name, ":"), t.selections.map(((t, o) => e.createElement("span", {
        key: o,
        className: ESe.value
    }, t))))))));
};

const TSe = yo(((e, t) => {
    var o;
    const n = (o = e.ui.birdLayout.byId[t.id]) === null || o === void 0 ? void 0 : o.childKeys;
    const a = [];
    if (!n) {
        return {
            childSelections: a
        };
    }
    for (const t of n) {
        const o = _Se(e.birdElements, e.ui, t);
        if (o) {
            a.push(o);
        }
    }
    return {
        childSelections: a
    };
}), undefined, undefined, {
    areStatePropsEqual: (e, t) => {
        const o = e === null || e === void 0 ? void 0 : e.childSelections;
        const n = t === null || t === void 0 ? void 0 : t.childSelections;
        if (!o || !n) {
            return o === n;
        }
        if (o.length !== n.length) {
            return false;
        }
        for (let e = o.length - 1; e >= 0; e--) {
            if (!xo(o[e], n[e])) {
                return false;
            }
        }
        return true;
    }
})(LSe);

const RSe = i(null);

const kSe = i(false);

const ASe = t => {
    var o;
    return e.createElement(RSe.Provider, {
        value: t.direction
    }, e.createElement(kSe.Provider, {
        value: (o = t.crossAxisOnly) !== null && o !== void 0 ? o : false
    }, t.children));
};

function MSe(e) {
    const t = l(RSe);
    const o = l(kSe);
    if (!t || !e) {
        return undefined;
    }
    const n = {};
    let a, r, s, i, c;
    if (t === "horizontal") {
        a = e.widthConstraint;
        s = e.widthFlexibility;
        r = e.heightConstraint;
        i = e.heightFlexibility;
        c = "height";
    } else {
        a = e.heightConstraint;
        s = e.heightFlexibility;
        r = e.widthConstraint;
        i = e.widthFlexibility;
        c = "width";
    }
    if (!o) {
        if (a) {
            n.flexBasis = a;
        }
        switch (s) {
          case "flexible":
            n.flexShrink = 1;
            n.flexGrow = 1;
            break;

          case "growable":
            n.flexGrow = 1;
            break;

          case "shrinkable":
            n.flexShrink = 1;
            break;

          case "fixed":
            n.flexShrink = 0;
            n.flexGrow = 0;
            break;
        }
    }
    switch (i) {
      case "flexible":
      case "growable":
        n[c] = "100%";
        break;
    }
    if (r) {
        n[c] = r;
    }
    return n;
}

const NSe = MA("PromptContainer-popover");

const OSe = (e = 500, t = 100) => {
    const [o, r] = n(false);
    const i = c(0);
    const l = c(false);
    a((() => () => {
        if (i.current) {
            clearTimeout(i.current);
        }
    }), []);
    return [ s((function t() {
        l.current = true;
        if (i.current) {
            clearTimeout(i.current);
            i.current = 0;
        }
        i.current = window.setTimeout((() => {
            r((e => e === "disabled" ? "disabled" : true));
        }), e);
    }), [ e ]), s((function e() {
        l.current = false;
        if (i.current) {
            clearTimeout(i.current);
            i.current = 0;
        }
        i.current = window.setTimeout((() => {
            r((e => e === "disabled" ? "disabled" : false));
        }), t);
    }), [ t ]), o === "disabled" ? false : o, s((function t(o) {
        if (!o) {
            r("disabled");
            if (i.current) {
                clearTimeout(i.current);
                i.current = 0;
            }
            return;
        }
        r(false);
        if (l.current) {
            i.current = window.setTimeout((() => {
                r(true);
            }), e);
        }
    }), [ e ]) ];
};

const PSe = t => {
    var n, i, l, u;
    const {label: m, isHorizontal: p, autoApplyValues: f, isOpen: g, autoClose: h, focusLockProps: b, autoFocus: v} = t.state;
    const y = t.actions;
    const x = $be();
    const S = ay();
    const w = c(null);
    const C = c(null);
    const E = c(null);
    const [I, _, D, L] = OSe();
    a((() => {
        L(!g);
    }), [ L, g ]);
    const {font: T} = t.style || {};
    const R = C_();
    const k = r((() => Qbe(T, R)), [ T, R ]);
    const A = pve(k.fontFamily);
    d((() => {
        const e = Math.max(28, eve(k) + 8 + 2);
        const o = dd.getTextWidthFromComputedStyle(m || "", k) + 18 + 16 + 2;
        y.setConstraints(t.id, {
            minWidth: o,
            preferredWidth: o,
            minHeight: e,
            preferredHeight: e
        });
    }), [ A, y, t.id, k, m ]);
    a((() => {
        var e;
        if (C.current && v) {
            (e = RF(C.current)) === null || e === void 0 ? void 0 : e.focus();
        }
    }), [ g, v ]);
    const M = Object.assign(Object.assign({}, Bxe(t.style)), {
        backgroundColor: (i = (n = t.buttonBarStyle) === null || n === void 0 ? void 0 : n.normal) === null || i === void 0 ? void 0 : i.bg
    });
    const N = s((() => {
        var e, o, n, a;
        const r = {};
        if ((o = (e = t.style) === null || e === void 0 ? void 0 : e.normal) === null || o === void 0 ? void 0 : o.fg) {
            r.fg = (a = (n = t.style) === null || n === void 0 ? void 0 : n.normal) === null || a === void 0 ? void 0 : a.fg;
        }
        return r;
    }), [ t.style ]);
    const O = vSe();
    const P = gSe();
    const B = NSe();
    const z = c(false);
    const F = (e, o) => {
        var n;
        if (e === "ok") {
            t.actions.notifyApplyChanges(t.id);
        } else if (e === "cancel") {
            t.actions.notifyCancelChanges(t.id);
        }
        y.setOpen(t.id, false);
        if (o) {
            if (b === null || b === void 0 ? void 0 : b.disabled) {
                (n = w.current) === null || n === void 0 ? void 0 : n.focus();
            } else {
                z.current = true;
            }
        }
    };
    let j;
    const V = [];
    if (f) {
        j = "close";
        if (!h) {
            V.push(e.createElement(QM, {
                key: "close",
                text: x({
                    key: "PromptContainer.close.txt"
                }),
                onPress: () => {
                    F("close", true);
                },
                tokens: N
            }));
        }
    } else {
        j = "cancel";
        V.push(e.createElement(QM, {
            key: "ok",
            text: x({
                key: "PromptContainer.apply.txt"
            }),
            onPress: () => {
                F("ok", true);
            },
            tokens: N
        }));
        V.push(e.createElement(QM, {
            key: "cancel",
            text: x({
                key: "PromptContainer.cancel.txt"
            }),
            onPress: () => {
                F("cancel", true);
            },
            tokens: N
        }));
    }
    let H;
    if (!((l = t.childKeys) === null || l === void 0 ? void 0 : l.length)) {
        H = p ? {
            width: 400,
            height: 100
        } : {
            width: 300,
            height: 300
        };
    }
    return e.createElement(o, null, e.createElement("div", {
        onMouseEnter: I,
        onMouseLeave: _
    }, e.createElement(dG, {
        label: m,
        font: T,
        theme: () => {
            var e;
            return (e = t.style) === null || e === void 0 ? void 0 : e.normal;
        },
        innerRef: w,
        onPress: () => t.actions.toggleOpen(t.id),
        onKeyDown: e => {
            if (e.key === " " || e.key === "Enter") {
                t.actions.toggleOpen(t.id);
            }
        },
        isOpen: g,
        ariaLabel: t.accessibilityLabel,
        listId: B
    })), e.createElement(zO, {
        id: B,
        theme: () => {
            var e;
            return (e = t.style) === null || e === void 0 ? void 0 : e.normal;
        },
        isModal: h && !f,
        isOpen: g,
        onClose: h ? () => F(j, false) : undefined,
        style: {
            display: "flex",
            flexDirection: "column",
            minWidth: "6.25rem",
            minHeight: "2rem",
            padding: 0
        },
        focusable: false,
        referenceElementRef: w,
        placement: "bottom",
        returnFocus: false,
        focusLockProps: Object.assign({
            onDeactivation() {
                if (z.current) {
                    z.current = false;
                    setTimeout((() => {
                        var e;
                        (e = w.current) === null || e === void 0 ? void 0 : e.focus();
                    }));
                }
            }
        }, b),
        onEscape: () => {
            z.current = true;
        },
        popoverRoot: O,
        allowOnContextMenuPropagation: true,
        animation: {
            variants: undefined,
            initial: undefined,
            animate: undefined,
            exit: undefined
        }
    }, e.createElement("div", {
        style: Object.assign({
            position: "relative",
            flex: "1 1 auto",
            minHeight: 0,
            maxWidth: "100%"
        }, H)
    }, e.createElement("div", {
        ref: C,
        style: {
            height: "100%",
            overflow: "auto",
            display: "flex",
            flexDirection: p ? "row" : "column",
            alignItems: "flex-start"
        },
        role: "document"
    }, e.createElement(ASe, {
        direction: p ? "horizontal" : "vertical",
        crossAxisOnly: true
    }, tTe(t.childKeys, t.elementState, {
        includePreferredSizing: true,
        style: Object.assign({
            maxWidth: "100%",
            maxHeight: "350px"
        }, p ? {
            flexShrink: 1
        } : undefined),
        contentJustification: "normal"
    }))), P && e.createElement(P, {
        id: t.id,
        type: "prompt-container"
    })), V.length ? e.createElement("div", {
        ref: E,
        style: Object.assign({
            padding: "1rem",
            flexShrink: 0,
            display: "flex",
            justifyContent: "flex-end",
            gap: "1rem"
        }, M)
    }, V) : null), e.createElement(zO, {
        theme: () => {
            var e;
            return (e = t.style) === null || e === void 0 ? void 0 : e.normal;
        },
        style: {
            "--popover-padding": ".5rem"
        },
        placement: `${S ? "left" : "right"}-start`,
        hideArrow: true,
        focusable: false,
        referenceElementRef: w,
        isOpen: !!((u = t.childKeys) === null || u === void 0 ? void 0 : u.length) && D
    }, e.createElement(TSe, {
        style: t.style,
        onMouseEnter: I,
        onMouseLeave: _,
        id: t.id
    })));
};

const BSe = yo(((e, t) => ({
    state: Nfe(e, t.id),
    childKeys: vfe(e, t.id),
    elementState: Efe(e),
    style: yfe(e, t.id),
    buttonBarStyle: yfe(e, t.id + "-buttonbar"),
    accessibilityLabel: Gfe(e, t.id)
})), (e => ({
    actions: bo(Object.assign({
        setConstraints: Vde
    }, Aue.actions), e)
})))(PSe);

function zSe(e, t, o) {
    var n;
    if (!((n = o.current) === null || n === void 0 ? void 0 : n.contentWindow) || !e || e === "about:blank") {
        return;
    }
    o.current.contentWindow.postMessage(t, e);
}

const FSe = function({id: t, actions: o, iframeSandbox: a, state: r, accessibilityLabel: s}) {
    const {src: i, messageDataPost: l, resultName: u} = r;
    const m = c(null);
    const [p, f] = n();
    const g = 100;
    d((() => {
        o.setConstraints(t, {
            minWidth: g,
            minHeight: g
        });
        function e(e) {
            if (!e.data || !u || u !== e.data.resultName || !i || i.indexOf(e.origin) === -1) {
                return;
            }
            o.update(t, {
                messageDataReceive: e.data
            });
        }
        window.addEventListener("message", e);
        return () => {
            window.removeEventListener("message", e);
        };
    }), [ i, u, o, t ]);
    d((() => {
        if (p === i) {
            zSe(i, l, m);
        }
    }), [ p, i, l ]);
    return e.createElement("iframe", {
        style: {
            borderWidth: 0,
            flexGrow: 1,
            flexShrink: 0,
            minWidth: g + "px",
            minHeight: g + "px"
        },
        ref: m,
        src: i,
        "aria-label": s,
        onLoad: () => f(i),
        sandbox: a || "allow-presentation allow-scripts allow-same-origin allow-forms"
    });
};

const jSe = yo(((e, t) => ({
    state: kfe(e, t.id),
    iframeSandbox: e.transport.iframeSandbox,
    accessibilityLabel: Gfe(e, t.id)
})), (e => ({
    actions: bo(Object.assign({
        setConstraints: Vde
    }, Pde.actions), e)
})))(FSe);

var VSe = "sas_components-ObjectStatus-ObjectStatus_base";

var HSe = "sas_components-ObjectStatus-ObjectStatus_busy-single";

var USe = "sas_components-ObjectStatus-ObjectStatus_text";

var GSe = "sas_components-ObjectStatus-ObjectStatus_icon";

var KSe = {
    base: VSe,
    busySingle: HSe,
    text: USe,
    icon: GSe
};

const WSe = function(t) {
    var o;
    const n = Ybe();
    const a = $be();
    const r = C_();
    const s = $Se(r, t);
    const i = Object.assign(Object.assign({
        "--objectstatus-bd": "transparent"
    }, I_(Object.assign(Object.assign({}, s), {
        padding: r.spacing.core.s
    }), "objectstatus")), I_({
        outline: "var(--focus-light-bg)",
        "outline-offset": "calc(-2px + calc(-1 * var(--focus-width)))"
    }, "objectstatus-focus"));
    let l = {};
    let c;
    if (t.onPress) {
        l = {
            cursor: "pointer"
        };
        c = "button";
    }
    let d;
    let u;
    switch (t.mode) {
      case "information":
        d = e.createElement(MM, {
            icon: oA,
            className: KSe.icon,
            color: "informational"
        });
        break;

      case "error":
        d = e.createElement(MM, {
            icon: Yk,
            className: KSe.icon,
            color: "alert"
        });
        break;

      case "busy":
        d = e.createElement(I1, {
            type: "AnimatedInProgress",
            text: "",
            focusable: false
        });
        u = n;
        break;

      case "cancelLoading":
        d = e.createElement(MM, {
            icon: rk,
            className: KSe.icon
        });
        u = a({
            key: "ObjectStatus.cancelLoading.txt"
        });
        break;

      case "loadingCanceled":
        d = e.createElement(MM, {
            icon: Fk,
            className: KSe.icon
        });
        u = a({
            key: "ObjectStatus.loadingCanceled.txt"
        });
        break;

      case "resumeLoading":
        d = e.createElement(MM, {
            icon: jR,
            className: KSe.icon
        });
        u = a({
            key: "ObjectStatus.resumeLoading.txt"
        });
        break;

      case "assignData":
        d = e.createElement(MM, {
            icon: mT,
            className: KSe.icon
        });
        u = a({
            key: "ObjectStatus.assignData.txt"
        });
        break;

      case "selectImage":
        d = e.createElement(MM, {
            icon: nR,
            className: KSe.icon
        });
        u = a({
            key: "ObjectStatus.selectImage.txt"
        });
        break;

      case "selectJob":
        d = e.createElement(MM, {
            icon: fR,
            className: KSe.icon
        });
        u = a({
            key: "ObjectStatus.selectJob.txt"
        });
        break;

      case "setJobParameters":
        d = e.createElement(MM, {
            icon: fR,
            className: KSe.icon
        });
        u = a({
            key: "ObjectStatus.setJobParameters.txt"
        });
        break;

      case "refresh":
        d = e.createElement(MM, {
            icon: lk,
            className: KSe.icon
        });
        u = a({
            key: "ObjectStatus.refresh.txt"
        });
        break;

      default:
        ZI(t.mode);
    }
    const m = (o = t.text) !== null && o !== void 0 ? o : u;
    return e.createElement(iN, {
        role: c,
        "aria-label": t["aria-label"],
        title: m,
        className: ke(!m && t.mode === "busy" ? KSe.busySingle : KSe.base),
        style: Object.assign(Object.assign(Object.assign({}, i), l), t.style),
        spacing: "s",
        onClick: t.onPress,
        onKeyPress: e => {
            var o;
            if (e.key === "Enter" || e.key === " ") {
                (o = t.onPress) === null || o === void 0 ? void 0 : o.call(t);
            }
        },
        onMouseEnter: t.onMouseEnter,
        onMouseLeave: t.onMouseLeave,
        tabIndex: 0
    }, d, m ? e.createElement("span", {
        className: KSe.text
    }, m) : null);
};

function $Se(e, t) {
    if (e.enableNovaTokens) {
        switch (t.mode) {
          case "error":
            return e.stateStatusNova.alert;

          case "information":
            return e.stateStatusNova.informational;

          default:
            return e.stateStandardNova.normal;
        }
    }
    switch (t.mode) {
      case "error":
        return e.themeVariant === "high-contrast" ? e.stateStatus.alert : e.stateStatusPadBox.alert;

      case "information":
        return e.themeVariant === "high-contrast" ? e.stateStatus.informational : e.stateStatusPadBox.informational;

      default:
        switch (e.themeVariant) {
          case "dark":
            return {
                bg: e.c.p_3,
                bd: e.c.white30,
                fg: e.text.description.fg
            };

          case "high-contrast":
            return {
                bg: e.c.black,
                bd: e.c.white,
                fg: e.text.description.fg
            };

          case "light":
            return {
                bg: e.c.white,
                bd: e.c.n2,
                fg: e.text.description.fg
            };

          default:
            return ZI(e.themeVariant);
        }
    }
}

var YSe = "sas_components-ErrorBoundary-ErrorBoundary_container";

var qSe = {
    container: YSe
};

const XSe = t => {
    const o = $be();
    let n;
    if (t.position) {
        n = {
            top: t.position.top !== undefined ? t.position.top + "px" : undefined,
            left: t.position.left !== undefined ? t.position.left + "px" : undefined,
            width: t.position.width !== undefined ? t.position.width + "px" : undefined,
            height: t.position.height !== undefined ? t.position.height + "px" : undefined
        };
    }
    return e.createElement("div", {
        className: ke(qSe.container, t.className),
        style: Object.assign(Object.assign({}, I_(n, "errorBoundary")), t.style)
    }, e.createElement(WSe, {
        text: o(t.errorMessageKey),
        mode: "error"
    }));
};

class ZSe extends C {
    constructor(e) {
        super(e);
        this.state = {
            hasError: false
        };
        this.onAbort = this.onAbort.bind(this);
        if (this.props.respondToWASMCrash) {
            Jo.addAbortCallback(this.onAbort);
        }
    }
    componentWillUnmount() {
        if (this.props.respondToWASMCrash) {
            Jo.removeAbortCallback(this.onAbort);
        }
    }
    static getDerivedStateFromError() {
        return {
            hasError: true
        };
    }
    componentDidCatch(e) {
        console.error(e);
    }
    onAbort() {
        this.forceUpdate();
    }
    render() {
        if (this.state.hasError || Jo.wasmCrashed && this.props.respondToWASMCrash) {
            return e.createElement(XSe, {
                className: this.props.className,
                style: this.props.style,
                position: this.props.position,
                errorMessageKey: this.props.errorMessageKey
            });
        }
        return this.props.children;
    }
}

const JSe = yo(((e, t) => ({
    position: t.visualId ? bfe(e, t.visualId).position : undefined
})))(ZSe);

const QSe = i((() => []));

QSe.displayName = "MenuItemProviderContext";

const ewe = t => {
    const o = c(t.menuItemProvider);
    a((() => {
        o.current = t.menuItemProvider;
    }), [ t.menuItemProvider ]);
    const n = s((e => {
        var t, n;
        return (n = (t = o.current) === null || t === void 0 ? void 0 : t.call(o, e)) !== null && n !== void 0 ? n : [];
    }), []);
    return e.createElement(QSe.Provider, {
        value: n
    }, t.children);
};

function twe() {
    return l(QSe);
}

var owe = "sas_components-ObjectToolbar-ObjectToolbar_wrapper";

var nwe = "sas_components-ObjectToolbar-ObjectToolbar_enable-pointer";

var awe = "sas_components-ObjectToolbar-ObjectToolbar_toolbar-container";

var rwe = "sas_components-ObjectToolbar-ObjectToolbar_toolbar";

var swe = "sas_components-ObjectToolbar-ObjectToolbar_button";

var iwe = "sas_components-ObjectToolbar-ObjectToolbar_button-pane";

var lwe = {
    wrapper: owe,
    enablePointer: nwe,
    toolbarContainer: awe,
    toolbar: rwe,
    button: swe,
    buttonPane: iwe
};

const cwe = t => {
    var o, r, i;
    const [l, u] = n({
        isOpen: false
    });
    const m = $be();
    const {refs: p, createSetRef: f} = uU();
    function g() {
        var e, o;
        if (!l.isOpen) {
            return;
        }
        u({
            isOpen: false
        });
        (e = t.onClose) === null || e === void 0 ? void 0 : e.call(t);
        (o = p[D]) === null || o === void 0 ? void 0 : o.focus();
    }
    function h(e, o) {
        var n;
        u({
            isOpen: true,
            focusFirstItem: I.current === "keyboard",
            targetId: e.id,
            buttonIndex: o
        });
        const a = p[o];
        if (!a) {
            return;
        }
        (n = t.onOpen) === null || n === void 0 ? void 0 : n.call(t);
    }
    const {createTargetRef: b, rootRef: v} = uwe((e => {
        for (const {intersectionRatio: t, target: o} of e) {
            o.style.visibility = t === 1 ? "visible" : "hidden";
        }
    }), {
        threshold: 1
    });
    let y;
    const x = c(null);
    const [S, w] = n(false);
    const [C, E] = n(undefined);
    {
        function O() {
            const e = B();
            const t = x.current;
            if (!t || !e) {
                w(false);
                return;
            }
            w(t.getBoundingClientRect().bottom + 2 > e.getBoundingClientRect().bottom);
        }
        d(O);
        const [P, B] = kN((e => {
            g();
            O();
            const t = 2;
            const o = 4;
            const n = 28;
            const a = Math.max(1, Math.floor((e.target.getBoundingClientRect().height - t - o) / n));
            E(a);
        }));
        y = s((e => {
            var t;
            v(e);
            P((t = e === null || e === void 0 ? void 0 : e.parentElement) !== null && t !== void 0 ? t : null);
        }), [ P, v ]);
    }
    const I = c(undefined);
    let _;
    const [D, L] = n(0);
    const T = c();
    {
        let z;
        let F;
        {
            let U = 0;
            let G = t.alwaysShowOverflow;
            t.items.forEach((e => {
                if (e.type === "button" && !e.button.preferOverflow) {
                    U++;
                } else if (e.type === "overflow") {
                    G = true;
                }
            }));
            const K = U + (G ? 1 : 0);
            z = C && K > C ? C - 1 : U;
            F = t.items.length - z;
        }
        let j;
        let V;
        {
            j = [];
            V = [ {
                items: []
            } ];
            t.items.forEach((e => {
                if (e.type === "overflow") {
                    V[V.length - 1].items.push(e);
                } else if (e.type === "button") {
                    if (!e.button.preferOverflow && j.length < z || e.button.preferOverflow && F === 1 && !t.alwaysShowOverflow) {
                        j.push(e);
                    } else {
                        V[V.length - 1].items.push(e);
                    }
                } else if (e.type === "separator") {
                    V.push({
                        items: []
                    });
                }
            }));
            V = V.filter((e => e.items.length > 0));
        }
        const H = V.length > 0 || t.alwaysShowOverflow;
        if (H) {
            const W = t.accessibilityLabel ? m({
                key: "ObjectToolbarIcon.OverflowButton.labeled.fmt",
                args: {
                    label: t.accessibilityLabel
                }
            }) : m({
                key: "ObjectToolbarIcon.OverflowButton.default.txt"
            });
            j.unshift({
                type: "button",
                id: "objectToolbar-overflow",
                text: W,
                subSections: V,
                button: {
                    icon: OR
                }
            });
        }
        _ = j;
        if (T.current === undefined) {
            T.current = false;
            let $ = -1;
            if (t.autofocusId) {
                $ = j.findIndex((e => e.id === t.autofocusId));
                if ($ === -1 && V.some((({items: e}) => e.some((({id: e}) => e === t.autofocusId))))) {
                    $ = 0;
                }
                if ($ !== -1) {
                    T.current = true;
                    L($);
                }
            }
        }
    }
    const R = l.targetId ? (o = _.find((({id: e}) => e === l.targetId))) === null || o === void 0 ? void 0 : o.subSections : undefined;
    const k = c(null);
    a((() => {
        var e, t;
        if (!T.current && !((e = k.current) === null || e === void 0 ? void 0 : e.contains(document.activeElement))) {
            return;
        }
        T.current = false;
        (t = p[D]) === null || t === void 0 ? void 0 : t.focus();
    }), [ D, p ]);
    a((() => {
        var e;
        if ((e = k.current) === null || e === void 0 ? void 0 : e.contains(document.activeElement)) {
            return;
        }
        L(0);
    }), [ _.length ]);
    const A = C_();
    const M = I_({
        bg: A.backgrounds.page.bg
    }, "button-pane");
    const N = _.length > 0 || !!((r = t.buttons) === null || r === void 0 ? void 0 : r.length);
    return N ? e.createElement("div", {
        className: ke(lwe.wrapper, t.className),
        style: Object.assign({
            opacity: t.visible || l.isOpen ? undefined : 0
        }, t.style),
        onClickCapture: () => {
            I.current = "mouse";
        },
        onKeyDownCapture: () => {
            I.current = "keyboard";
        },
        ref: y,
        "data-testid": Xg() ? `${t.id}-object-toolbar` : null
    }, (i = t.buttons) === null || i === void 0 ? void 0 : i.map(((t, o) => e.createElement("div", {
        key: o,
        className: lwe.buttonPane,
        style: Object.assign(Object.assign({}, M), {
            visibility: "hidden"
        }),
        ref: b(o)
    }, t.type === "menubutton" ? e.createElement(MJ, Object.assign({}, t, {
        className: lwe.enablePointer,
        icon: t.icon && {
            icon: t.icon
        }
    })) : e.createElement(QM, Object.assign({}, t, {
        className: lwe.enablePointer,
        icon: t.icon && {
            icon: t.icon
        }
    }))))), _.length <= 0 ? null : e.createElement("div", {
        className: lwe.toolbarContainer
    }, e.createElement("div", {
        ref: k,
        className: ke(lwe.toolbar, lwe.enablePointer),
        role: "toolbar",
        style: I_(dwe(A), "object-toolbar"),
        onKeyDown: e => {
            let t = true;
            const o = _.length - 1;
            switch (e.key) {
              case "ArrowUp":
              case "ArrowLeft":
                L((e => e > 0 ? e - 1 : o));
                break;

              case "ArrowDown":
              case "ArrowRight":
                L((e => e < o ? e + 1 : 0));
                break;

              case "PageUp":
              case "Home":
                L(0);
                break;

              case "PageDown":
              case "End":
                L(o);
                break;

              default:
                t = false;
            }
            if (t) {
                e.preventDefault();
            }
        }
    }, _.map(((t, o) => {
        var n, a;
        return e.createElement(QM, {
            key: t.id,
            ref: f(o),
            className: lwe.button,
            variant: oN.Icon,
            icon: {
                icon: t.button.icon
            },
            onPress: () => {
                var e;
                L(o);
                if (t.subSections) {
                    h(t, o);
                } else {
                    (e = t.onSelected) === null || e === void 0 ? void 0 : e.call(t);
                }
            },
            tooltip: (n = t.button.tooltip) !== null && n !== void 0 ? n : t.text,
            ariaLabel: (a = t.button.tooltip) !== null && a !== void 0 ? a : t.text,
            "aria-haspopup": t.subSections ? true : undefined,
            "aria-expanded": !!t.subSections && l.targetId === t.id,
            focusable: D === o
        });
    }))), e.createElement(Hz, {
        isOpen: l.isOpen && !!(R === null || R === void 0 ? void 0 : R.length),
        defaultFocusLocation: l.focusFirstItem ? [ 0, 0 ] : undefined,
        position: {
            dockingElement: typeof l.buttonIndex === "number" ? p[l.buttonIndex] : undefined,
            horizontalAlign: "end",
            verticalAlign: "end"
        },
        sections: R !== null && R !== void 0 ? R : [],
        onItemSelected: e => {
            var t, o, n;
            let a;
            let r = R;
            for (const [n, s] of e) {
                a = (o = (t = r === null || r === void 0 ? void 0 : r[n]) === null || t === void 0 ? void 0 : t.items) === null || o === void 0 ? void 0 : o[s];
                r = a === null || a === void 0 ? void 0 : a.subSections;
            }
            if (!a) {
                console.error("[ObjectToolbar]: invalid item picked");
                return;
            }
            (n = a.onSelected) === null || n === void 0 ? void 0 : n.call(a);
            if (!a.keepOpen) {
                g();
            }
        },
        onDismiss: g
    }), t.children ? e.createElement("div", {
        ref: x,
        className: ke(!S && lwe.enablePointer),
        style: {
            visibility: S ? "hidden" : undefined
        }
    }, t.children) : null)) : null;
};

function dwe(e) {
    return {
        bd: e.stateStandard.normal.bd,
        bg: e.backgrounds.page.bg
    };
}

function uwe(e, t) {
    const {createSetRef: o, refs: n} = uU();
    const i = Sye(e);
    const l = c(null);
    const d = c();
    const u = s((e => {
        if (!e) {
            return;
        }
        const o = new IntersectionObserver((e => {
            var t;
            (t = i.current) === null || t === void 0 ? void 0 : t.call(i, e);
        }), {
            root: e,
            threshold: t.threshold
        });
        for (const e of n) {
            if (!e) {
                continue;
            }
            o.observe(e);
        }
        return o;
    }), [ t.threshold, n, i ]);
    a((() => {
        d.current = u(l.current);
        return () => {
            var e;
            (e = d.current) === null || e === void 0 ? void 0 : e.disconnect();
            d.current = undefined;
        };
    }), [ u ]);
    return r((() => ({
        createTargetRef: e => t => {
            var a, r;
            const s = n[e];
            if (s) {
                (a = d.current) === null || a === void 0 ? void 0 : a.unobserve(s);
            }
            if (t) {
                (r = d.current) === null || r === void 0 ? void 0 : r.observe(t);
            }
            o(e)(t);
        },
        rootRef: e => {
            var t;
            (t = d.current) === null || t === void 0 ? void 0 : t.disconnect();
            l.current = e;
            d.current = u(l.current);
        }
    })), [ n, o, u ]);
}

var mwe = "sas_components-ZoomToolbar-ZoomToolbar_container";

var pwe = "sas_components-ZoomToolbar-ZoomToolbar_button";

var fwe = {
    container: mwe,
    button: pwe
};

const gwe = t => {
    const o = $be();
    const r = C_();
    const [s, i] = n(0);
    const l = c(null);
    const d = c(null);
    const u = c(null);
    a((() => {
        var e, t, o;
        if (!((e = u.current) === null || e === void 0 ? void 0 : e.contains(document.activeElement))) {
            return;
        }
        if (s === 0) {
            (t = l.current) === null || t === void 0 ? void 0 : t.focus();
        } else {
            (o = d.current) === null || o === void 0 ? void 0 : o.focus();
        }
    }), [ s ]);
    return e.createElement("div", {
        ref: u,
        className: fwe.container,
        role: "toolbar",
        style: I_(hwe(r), "zoom"),
        onKeyDown: e => {
            let t = true;
            switch (e.key) {
              case "ArrowUp":
              case "ArrowLeft":
              case "ArrowDown":
              case "ArrowRight":
                i((e => e === 1 ? 0 : 1));
                break;

              case "PageUp":
              case "Home":
                i(0);
                break;

              case "PageDown":
              case "End":
                i(1);
                break;

              default:
                t = false;
            }
            if (t) {
                e.preventDefault();
            }
        },
        onFocus: e => {
            var t, o;
            if ((t = l.current) === null || t === void 0 ? void 0 : t.contains(e.target)) {
                i(0);
            } else if ((o = d.current) === null || o === void 0 ? void 0 : o.contains(e.target)) {
                i(1);
            }
        }
    }, e.createElement(QM, {
        ref: l,
        className: fwe.button,
        variant: oN.Icon,
        icon: {
            icon: Ak
        },
        onPress: t.onZoomIn,
        disabled: !t.canZoomIn,
        tooltip: o({
            key: "ZoomControl.button.zoomin.txt"
        }),
        focusable: s === 0
    }), e.createElement(QM, {
        ref: d,
        className: fwe.button,
        variant: oN.Icon,
        icon: {
            icon: Nk
        },
        onPress: t.onZoomOut,
        disabled: !t.canZoomOut,
        tooltip: o({
            key: "ZoomControl.button.zoomout.txt"
        }),
        focusable: s === 1
    }));
};

function hwe(e) {
    return {
        bd: e.stateStandard.normal.bd,
        bg: e.backgrounds.page.bg
    };
}

async function bwe(e, t) {
    const o = {
        Accept: "application/vnd.sas.theme.report.complete+json"
    };
    const n = await fetch(`${e}/themes/themes/${t}`, {
        credentials: "include",
        headers: o
    });
    if (!n.ok) {
        throw new Error(`Failed to fetch report theme ${t}`);
    }
    const a = await n.json();
    if (a.type !== "custom") {
        console.warn(`Expected theme ${t} to have type 'custom' but got '${a.type}'`);
    }
    const r = Hv(a);
    return $v(r);
}

async function vwe(e, t) {
    const o = await fetch(`${e}/css/theme-${t}.json`);
    if (!o.ok) {
        throw new Error(`Failed to fetch report theme ${t}`);
    }
    const n = await o.json();
    if (n.type !== "custom") {
        console.warn(`Expected theme ${t} to have type 'custom' but got '${n.type}'`);
    }
    const a = Hv(n);
    return $v(a);
}

function ywe() {
    const e = C_();
    return s((() => ({
        bg: e.c.primary,
        "animation-start": e.c.primary,
        "animation-end": e.c.n3
    })), [ e ]);
}

var xwe = "sas_components-ReportContainer-ReportThemeContainer_theme-container";

var Swe = {
    themeContainer: xwe
};

const wwe = i([ Yv("light"), undefined ]);

const Cwe = () => l(wwe);

const Ewe = () => {
    const [, e] = Cwe();
    const t = s((() => {
        const t = {};
        if (e === null || e === void 0 ? void 0 : e.backgroundColor) {
            t.bg = e.backgroundColor;
        }
        if (e === null || e === void 0 ? void 0 : e.textColor) {
            t.fg = e.textColor;
        }
        return t;
    }), [ e ]);
    const o = ywe();
    const n = r((() => {
        const t = e === null || e === void 0 ? void 0 : e.primary;
        if (!t) {
            return o;
        }
        return () => Object.assign(Object.assign({}, o()), {
            bg: t,
            "animation-start": t
        });
    }), [ e, o ]);
    return [ n, t ];
};

function Iwe(e) {
    switch (e) {
      case "high-contrast":
        return "highcontrast2020";

      case "dark":
        return "midnight2020";

      case "light":
      default:
        return "light";
    }
}

const _we = ({reportTheme: t, children: o, url: s, packageUri: i, themeOverrides: l, authenticated: c, actions: d, className: u, style: m}) => {
    const p = th() ? "highcontrast2020" : "light";
    const f = r((() => Yv(p)), [ p ]);
    const g = r((() => qI(t) ? f : Yv(t)), [ t, f ]);
    const [h, b] = n(null);
    const v = r((() => l ? $v(l) : null), [ l ]);
    const y = v || h || g;
    const x = ah();
    const S = r((() => {
        if (!x) {
            return [ v !== null && v !== void 0 ? v : f, undefined ];
        }
        if (typeof x === "string") {
            return [ Yv(Iwe(x)), undefined ];
        }
        let e = Yv(Iwe(x.baseTheme || "light"));
        if (x.fontFamily) {
            e = Object.assign(Object.assign({}, e), {
                overrides: Object.assign(Object.assign({}, e.overrides), {
                    fontFamily: x.fontFamily
                })
            });
        }
        return [ e, x ];
    }), [ x, v, f ]);
    a((() => {
        if (h && !t) {
            b(null);
        }
    }), [ h, t ]);
    a((() => {
        if (!t) {
            return;
        }
        const e = !!v || qv(t);
        if (e) {
            d.setThemeLoaded(true);
            b(null);
            return;
        }
        if (!c) {
            return;
        }
        let o = false;
        if (i) {
            vwe(i, t).then((e => {
                if (o) {
                    return;
                }
                b(e);
                d.setThemeLoaded(true);
            })).catch((() => {
                if (o) {
                    return;
                }
                d.setTransportErrorKey({
                    key: "ReportContainer.themeLoadFailed.txt"
                });
            }));
        } else if (s) {
            bwe(s, t).then((e => {
                if (o) {
                    return;
                }
                b(e);
                d.setThemeLoaded(true);
            })).catch((() => {
                if (o) {
                    return;
                }
                d.setTransportErrorKey({
                    key: "ReportContainer.themeLoadFailed.txt"
                });
            }));
        } else {
            return;
        }
        return () => {
            o = true;
        };
    }), [ c, s, i, t, v, d ]);
    return e.createElement(d_, {
        className: ke(Swe.themeContainer, u),
        style: m,
        currentTheme: y
    }, e.createElement(wwe.Provider, {
        value: S
    }, o));
};

const Dwe = yo(((e, t) => ({
    reportTheme: e.bird.reportTheme,
    authenticated: e.transport.reportLoaded === true
})), (e => ({
    actions: bo(Dme.actions, e)
})))(_we);

const Lwe = i("report");

const Twe = Lwe.Provider;

function Rwe() {
    return l(Lwe);
}

const kwe = t => e.createElement(mve, {
    url: t.url,
    authenticationType: t.authenticationType
}, e.createElement(ewe, {
    menuItemProvider: t.menuItemProvider
}, e.createElement(Dwe, {
    url: t.url,
    packageUri: t.packageUri,
    themeOverrides: t.themeOverrides
}, e.createElement(Twe, {
    value: t.elementType
}, t.children))));

function Awe(e, t, o) {
    a((() => {
        var n, a;
        const r = (((n = e.current) === null || n === void 0 ? void 0 : n.clientHeight) || 28) + (((a = t.current) === null || a === void 0 ? void 0 : a.clientHeight) || 61) + 16 + 3;
        o(r);
    }), [ e, t, o ]);
}

var Mwe = "sas_components-ObjectSearch-panels-components-PanelHeader_container";

var Nwe = "sas_components-ObjectSearch-panels-components-PanelHeader_header";

var Owe = {
    container: Mwe,
    header: Nwe
};

const Pwe = u(((t, o) => {
    const n = C_();
    const a = I_(Bwe(n), "heading");
    const r = $be({
        key: "PanelHeader.back.tooltip.txt"
    });
    return e.createElement(iN, {
        ref: o,
        spacing: "xs",
        orientation: "horizontal",
        className: Owe.container
    }, e.createElement(QM, {
        tooltip: r,
        icon: {
            icon: _T
        },
        variant: oN.Icon,
        onPress: () => {
            t.actions.update(t.id, Object.assign({
                navSelection: []
            }, t.type !== "result" && {
                searchHints: []
            }));
        }
    }), e.createElement(oO, {
        id: t.headingId,
        level: 3,
        className: Owe.header,
        style: a
    }, t.text), t.type === "myLocationPin" && e.createElement(QM, {
        icon: {
            icon: KR
        },
        variant: oN.Icon,
        onPress: () => t.actions.notifyRefreshLocation(t.id)
    }), e.createElement(MJ, {
        icon: {
            icon: NR
        },
        onItemSelected: t.onMenuItemSelected,
        sections: t.menuSections,
        variant: oN.Light
    }));
}));

function Bwe(e) {
    switch (e.themeVariant) {
      case "dark":
        return {
            fg: e.c.p2
        };

      case "high-contrast":
        return {
            fg: e.c.p3
        };

      default:
        return {
            fg: e.c.p
        };
    }
}

const zwe = yo(undefined, (e => ({
    actions: bo(npe.actions, e)
})), undefined, {
    forwardRef: true
})(Pwe);

var Fwe = "sas_components-ObjectSearch-panels-components-LocationPopover_reset-cursor";

var jwe = "sas_components-ObjectSearch-panels-components-LocationPopover_content";

var Vwe = "sas_components-ObjectSearch-panels-components-LocationPopover_footer";

var Hwe = "sas_components-ObjectSearch-panels-components-LocationPopover_hint";

var Uwe = {
    resetCursor: Fwe,
    content: jwe,
    footer: Vwe,
    hint: Hwe
};

const Gwe = dU(jP);

const Kwe = 400;

const Wwe = t => {
    var r, s, i, l;
    const [c, d] = n(null);
    const u = !!t.locationCandidate;
    const m = C_();
    a((() => {
        var e;
        let o;
        if (u && t.contentId) {
            o = (e = document.getElementById(t.contentId)) === null || e === void 0 ? void 0 : e.getBoundingClientRect();
        }
        d(o !== null && o !== void 0 ? o : null);
    }), [ u, t.contentId ]);
    const p = $be();
    const f = t.locationCandidate && !t.locationCandidate.name && !t.locationCandidate.location;
    const g = (s = (r = t.locationCandidate) === null || r === void 0 ? void 0 : r.pixelLocation) !== null && s !== void 0 ? s : [ 0, 0 ];
    const h = I_({
        "with-labels-spacing-xs": -1,
        "hint-font-size": m.font.size.s,
        "hint-color": m.c.colorTextLabel,
        "footer-max-width": `${Kwe - 34}px`
    });
    const [b, v] = n(false);
    a((() => {
        v(false);
    }), [ t.locationCandidate ]);
    const y = ywe();
    return e.createElement(zO, Object.assign({
        animation: {
            exit: undefined
        },
        focusLockProps: {
            className: Uwe.resetCursor,
            disabled: b,
            returnFocus: false
        },
        onEscape: t.onCancel,
        onOutsideClick: () => {
            v(true);
            t.onOutsideClick();
        },
        isModal: false,
        title: t.title,
        isOpen: !!t.locationCandidate,
        position: c ? {
            left: c.x + g[0],
            right: c.x + g[0],
            width: 0,
            top: c.y + c.height - g[1],
            bottom: c.y + c.height - g[1],
            height: 0
        } : undefined,
        style: {
            maxWidth: `${Kwe}px`
        }
    }, !f && {
        footer: e.createElement(iN, {
            spacing: "xxs",
            className: Uwe.footer,
            style: h
        }, e.createElement(AJ, {
            onPress: t.onCancel,
            wrapText: false
        }, p({
            key: "LocationPopover.cancel.txt"
        })), e.createElement(CJ, {
            library: "vaeua-gui-eua",
            contentKey: "react.va.geo.search.exitSelectionMode"
        }), e.createElement(Te, null, e.createElement(QM, {
            onPress: t.onConfirm,
            text: p({
                key: "LocationPopover.ok.txt"
            })
        })))
    }), f ? e.createElement(DN, {
        animationTokens: y,
        active: true,
        delay: 0
    }) : e.createElement("div", {
        className: Uwe.content
    }, ((i = t.locationCandidate) === null || i === void 0 ? void 0 : i.name) ? e.createElement(Gwe, {
        label: p({
            key: "LocationPopover.name.txt"
        }),
        labelPosition: "left",
        wrapText: false
    }, t.locationCandidate.name) : null, ((l = t.locationCandidate) === null || l === void 0 ? void 0 : l.location) ? e.createElement(o, null, e.createElement(Gwe, {
        label: p({
            key: "LocationPopover.location.txt"
        }),
        labelPosition: "left",
        wrapText: true,
        style: h
    }, t.locationCandidate.location), e.createElement(jP, {
        wrapText: false,
        className: Uwe.hint,
        style: h
    }, p({
        key: "LocationPopover.hint.txt"
    }))) : null));
};

function $we(e) {
    switch (e.themeVariant) {
      case "high-contrast":
      case "dark":
        return e.c.white;

      default:
        return e.c.black;
    }
}

function Ywe(e, t) {
    var o;
    return {
        fg: (o = t.color) !== null && o !== void 0 ? o : $we(e)
    };
}

function qwe(e, t) {
    return e.selected && t !== null ? {
        filter: "var(--table-selected-internal-filter)"
    } : {};
}

var Xwe = "sas_components-ObjectSearch-panels-components-PanelListItem_container";

var Zwe = "sas_components-ObjectSearch-panels-components-PanelListItem_item";

var Jwe = "sas_components-ObjectSearch-panels-components-PanelListItem_bold-override";

var Qwe = "sas_components-ObjectSearch-panels-components-PanelListItem_hint-icon";

var eCe = "sas_components-ObjectSearch-panels-components-PanelListItem_icon-large";

var tCe = "sas_components-ObjectSearch-panels-components-PanelListItem_item-counter";

var oCe = "sas_components-ObjectSearch-panels-components-PanelListItem_item-counter-container";

var nCe = {
    container: Xwe,
    item: Zwe,
    boldOverride: Jwe,
    hintIcon: Qwe,
    iconLarge: eCe,
    itemCounter: tCe,
    itemCounterContainer: oCe
};

const aCe = 56;

const rCe = t => {
    var o, n;
    const a = C_();
    const r = E_();
    const s = $be();
    const i = jV();
    const l = (o = t.description) !== null && o !== void 0 ? o : sCe(t.item, s, i);
    const c = (n = t.icon) !== null && n !== void 0 ? n : iCe(t.item);
    const d = typeof t.counter === "number";
    return e.createElement(iN, {
        style: t.style,
        className: ke(nCe.container, t.className),
        spacing: "s",
        orientation: "horizontal"
    }, d && c ? e.createElement("div", {
        title: `(${t.counter}) ${t.item.location}`,
        className: nCe.itemCounterContainer,
        style: I_(lCe(a, r), "panelListItem")
    }, e.createElement(MM, {
        icon: c,
        className: nCe.iconLarge,
        theme: e => ({
            "--icon-default-override-fg": lCe(e, r)["itemCounter-bg"]
        })
    }), e.createElement("div", {
        className: nCe.itemCounter
    }, `${t.counter}`)) : null, e.createElement(y9, {
        className: ke(nCe.item, !l && nCe.boldOverride),
        title: t.item.name,
        description: l,
        group: t.group,
        icon: c && !d ? {
            icon: c,
            className: Xme(t.item) ? nCe.hintIcon : nCe.iconLarge,
            style: Jme(t.item) ? qwe(t.item, t.item.color) : undefined,
            tokens: () => Jme(t.item) ? Ywe(a, t.item) : {}
        } : null
    }));
};

function sCe(e, t, o) {
    var n, a;
    switch (e.type) {
      case "hint":
      case "pin":
      case "result":
      case "myLocationPin":
        return e.location;

      case "route":
        if (!e.isRendered) {
            return t({
                key: "PinPanel.notDrawn.txt"
            });
        }
        return !!e.routeTravelDuration ? `${e.routeTravelDuration}, ${e.routeTravelDistance}` : (n = e.routeTravelDistance) !== null && n !== void 0 ? n : undefined;

      case "area":
        if (!e.isRendered) {
            return t({
                key: "PinPanel.notDrawn.txt"
            });
        }
        const r = e => e.toLocaleString(o, {
            maximumFractionDigits: 3
        }) || "";
        const s = e.mode === oi.DRIVING_TIME || e.mode === oi.TRUCKING_TIME || e.mode === oi.WALKING_TIME;
        const i = ((a = e.amount) !== null && a !== void 0 ? a : []).map(r);
        switch (i.length) {
          case 1:
            return t({
                key: s ? `PinPanel.description.minutes.1.fmt` : e.unit === ai.MILE ? `PinPanel.description.miles.1.fmt` : `PinPanel.description.kilometers.1.fmt`,
                args: {
                    value1: i[0]
                }
            });

          case 2:
            return t({
                key: s ? `PinPanel.description.minutes.2.fmt` : e.unit === ai.MILE ? `PinPanel.description.miles.2.fmt` : `PinPanel.description.kilometers.2.fmt`,
                args: {
                    value1: i[0],
                    value2: i[1]
                }
            });

          case 3:
            return t({
                key: s ? `PinPanel.description.minutes.3.fmt` : e.unit === ai.MILE ? `PinPanel.description.miles.3.fmt` : `PinPanel.description.kilometers.3.fmt`,
                args: {
                    value1: i[0],
                    value2: i[1],
                    value3: i[2]
                }
            });
        }
    }
}

function iCe(e) {
    switch (e.type) {
      case "pin":
        return VT;

      case "route":
        return bL;

      case "area":
        return FT;

      case "hint":
        return e.isMultiple === true ? XR : yR;

      case "myLocationPin":
        return UT;

      case "result":
        return ek;

      default:
        return null;
    }
}

function lCe(e, t) {
    switch (e.themeVariant) {
      case "high-contrast":
        return {
            "itemCounter-fg": "#000000",
            "itemCounter-bg": t.graphDefault.n2
        };

      case "dark":
        return {
            "itemCounter-fg": t.graphDefault.n_5,
            "itemCounter-bg": t.graphDefault.n
        };

      default:
        return {
            "itemCounter-fg": t.graphDefault.white,
            "itemCounter-bg": t.graphDefault.n_1
        };
    }
}

var cCe = "sas_components-ObjectSearch-panels-components-PanelSearchField_panel-search-field";

var dCe = {
    panelSearchField: cCe
};

const uCe = dU(pQ);

const mCe = u(((t, o) => {
    var r, s, i, l, d, u;
    const m = $be();
    const p = C_();
    const f = I_({
        bg: p.backgrounds.panes.bg,
        bd: p.backgroundsDepth.standard.bd
    }, "panelSearchField");
    const b = D9();
    const v = uU();
    const [y, x] = n(undefined);
    const [S] = kN((e => {
        x(e.target.getBoundingClientRect().width);
    }));
    const w = c(null);
    g(o, (() => ({
        focus: () => {
            var e;
            return (e = w.current) === null || e === void 0 ? void 0 : e.focus();
        }
    })), []);
    const [C, E] = n(false);
    const [I, _] = n(false);
    const D = JI((() => {
        var e;
        if (!t.contentId || ((e = document.getElementById(t.contentId)) === null || e === void 0 ? void 0 : e.contains(document.activeElement))) {
            return;
        }
        E(false);
    }));
    const L = !!((r = t.feature) === null || r === void 0 ? void 0 : r.location);
    const T = !!t.locationCandidate;
    const [R, k] = n("");
    let A = Eye((() => {
        if (L) {
            k("");
        }
    }), [ L ]);
    {
        const e = c(true);
        a((() => {
            var o;
            if (e.current && !L && !t.disableAutoFocus) {
                (o = w.current) === null || o === void 0 ? void 0 : o.focus();
            }
            e.current = false;
        }), [ L, t.disableAutoFocus ]);
    }
    {
        const e = Sye(t.onUpdatePinMode);
        const o = C && !L && !R;
        a((() => {
            e.current(o);
        }), [ e, o ]);
    }
    {
        const e = Sye(t.onUpdateHints);
        a((() => {
            if (T) {
                e.current({
                    searchTerm: ""
                });
            }
        }), [ e, T ]);
    }
    A = Eye((() => {
        b.setSelectRows({
            selectedRows: new Set
        });
    }), [ R ]) || A;
    if (A) {
        return null;
    }
    const M = (s = t.features) === null || s === void 0 ? void 0 : s.filter((e => e.type === "pin"));
    const N = t.includePinResults && R ? [ ...(i = t.searchHints) !== null && i !== void 0 ? i : [], ...(M === null || M === void 0 ? void 0 : M.filter((e => {
        var t;
        return e.name.toLocaleLowerCase().includes(R.toLocaleLowerCase()) || ((t = e.location) === null || t === void 0 ? void 0 : t.toLocaleLowerCase().includes(R.toLocaleLowerCase()));
    }))) || [] ] : (l = t.searchHints) !== null && l !== void 0 ? l : [];
    const O = !!R && !t.locationCandidate && !!N.length && C;
    const [P = "-1"] = (d = b.preference.selectedRows) !== null && d !== void 0 ? d : [];
    const B = parseInt(P);
    const z = N[B];
    return e.createElement(iN, {
        orientation: "vertical",
        spacing: "s",
        ref: e => {
            var t;
            S((t = e === null || e === void 0 ? void 0 : e.lastElementChild) !== null && t !== void 0 ? t : null);
        },
        style: f,
        onFocus: e => {
            E(true);
            D.onFocus();
            if (e.target.tagName === "INPUT") {
                _(true);
            }
        },
        onBlur: e => {
            if (e.target.tagName === "INPUT") {
                _(false);
            }
            D.onBlur();
        },
        onKeyDown: e => {
            var t, o;
            if (e.target !== w.current) {
                return;
            }
            switch (e.key) {
              case "ArrowDown":
                const n = B === -1 ? 0 : B + 1;
                const a = n < N.length;
                b.setSelectRows({
                    selectedRows: new Set(a ? [ `${n}` ] : [])
                });
                (t = v.refs[a ? n : 0]) === null || t === void 0 ? void 0 : t.scrollIntoView({
                    block: "nearest"
                });
                e.preventDefault();
                break;

              case "ArrowUp":
                const r = B === -1 ? N.length - 1 : B - 1;
                const s = r >= 0;
                b.setSelectRows({
                    selectedRows: new Set(s ? [ `${r}` ] : [])
                });
                (o = v.refs[s ? r : 0]) === null || o === void 0 ? void 0 : o.scrollIntoView({
                    block: "nearest"
                });
                e.preventDefault();
                break;
            }
        }
    }, t.label && e.createElement(h, {
        fallback: null
    }, e.createElement(LP, {
        helpPopup: t.labelHelp
    }, t.label)), e.createElement(uCe, {
        ariaLabel: (u = t.ariaLabel) !== null && u !== void 0 ? u : t.label,
        fieldWidth: "100%",
        className: dCe.panelSearchField,
        onChange: e => {
            k(e.value);
            t.onInvalidateLocation();
            t.onUpdateHints({
                searchTerm: e.value
            });
        },
        onCommit: e => {
            var o;
            if (!e.value) {
                k("");
                return;
            }
            switch (z === null || z === void 0 ? void 0 : z.type) {
              case "pin":
                (o = t.onApplyPin) === null || o === void 0 ? void 0 : o.call(t, {
                    pin: z
                });
                break;

              case "hint":
                t.onApplyHint({
                    hint: z
                });
                break;

              default:
                t.onApplyHint({
                    searchTerm: e.value
                });
            }
        },
        value: (z === null || z === void 0 ? void 0 : z["location"]) || (z === null || z === void 0 ? void 0 : z.name) || R || t.feature.location || "",
        placeholder: m({
            key: I && !t.locationCandidate ? "PinPanel.searchClickPlaceholder.txt" : "PinPanel.searchPlaceholder.txt"
        }),
        inputRef: w,
        clearButtonTooltip: m({
            key: "PinPanel.clearLocation.tooltip.txt"
        }),
        numberOfResults: R ? N.length : null
    }), e.createElement(zO, {
        isOpen: O,
        referenceElementRef: w,
        hideArrow: true,
        placement: "bottom-start",
        isModal: false,
        focusLockProps: {
            disabled: true
        },
        onClose: () => {
            t.onUpdateHints({
                searchTerm: ""
            });
        },
        style: {
            width: y,
            padding: 0,
            marginLeft: -1,
            overflow: "auto",
            cursor: "auto"
        }
    }, e.createElement(pee, Object.assign({}, b, {
        rowRef: e => v.createSetRef(e),
        selectionMode: "single",
        rowCount: N.length,
        showSeparator: () => false,
        width: (y || 2) - 2,
        itemHeight: () => "double",
        height: aCe * (N.length || 2),
        getItemInfo: e => ({
            type: y9,
            props: {
                itemID: "" + e,
                children: undefined
            }
        }),
        renderItem: ({index: o}) => {
            const n = N[o];
            return e.createElement(rCe, {
                item: n,
                icon: n.type === "hint" ? t.hintIconOverride : undefined
            });
        },
        style: {
            overflow: "hidden"
        },
        onSelect: e => {
            var o;
            const [n = "-1"] = e || [];
            const a = N[parseInt(n)];
            switch (a === null || a === void 0 ? void 0 : a.type) {
              case "pin":
                (o = t.onApplyPin) === null || o === void 0 ? void 0 : o.call(t, {
                    pin: a
                });
                break;

              case "hint":
                t.onApplyHint({
                    hint: a
                });
                break;
            }
        }
    }))), e.createElement(Wwe, {
        id: t.id,
        contentId: t.contentId,
        title: t.locationPopoverTitle,
        locationCandidate: t.locationCandidate,
        onOutsideClick: () => {
            D.onBlur();
            t.onOutsideClick();
        },
        onConfirm: () => {
            E(false);
            t.onConfirm();
        },
        onCancel: () => {
            E(false);
            t.onCancel();
        }
    }));
}));

const pCe = yo(((e, t) => {
    var o, n;
    const {contentId: a} = (o = jfe(e, t.id)) !== null && o !== void 0 ? o : {};
    const {features: r, searchHints: s} = (n = Xfe(e, t.id)) !== null && n !== void 0 ? n : {};
    return {
        contentId: a,
        features: r,
        searchHints: s
    };
}), undefined, undefined, {
    forwardRef: true
})(mCe);

var fCe = "sas_components-ObjectSearch-panels-components-TravelTypeField_form-field";

var gCe = "sas_components-ObjectSearch-panels-components-TravelTypeField_form-menu-button";

var hCe = {
    formField: fCe,
    formMenuButton: gCe
};

function bCe(e) {
    const t = new Intl.DateTimeFormat(e, {
        weekday: "long"
    });
    const o = [];
    for (let e = 5; e < 12; e++) {
        const n = new Date(2020, 0, e, 0, 0, 0);
        o.push(t.format(n));
    }
    return o;
}

const vCe = t => {
    const a = $be();
    const s = jV();
    const {initialValue: i, buttonProps: l, onChange: d} = t, u = T(t, [ "initialValue", "buttonProps", "onChange" ]);
    const m = r((() => bCe(s).map(((e, t) => ({
        key: t,
        text: e
    })))), [ s ]);
    const [p, f] = n((() => {
        var e, o, n, a, r, s;
        const i = new Date;
        return new Date(0, 0, (o = (e = t.initialValue) === null || e === void 0 ? void 0 : e.day) !== null && o !== void 0 ? o : i.getDay(), (a = (n = t.initialValue) === null || n === void 0 ? void 0 : n.hour) !== null && a !== void 0 ? a : i.getHours(), (s = (r = t.initialValue) === null || r === void 0 ? void 0 : r.minute) !== null && s !== void 0 ? s : i.getMinutes());
    }));
    const g = c(null);
    const h = c(null);
    const [b, v] = n(false);
    const [y, x] = n(p);
    const S = () => setTimeout((() => {
        var e;
        return (e = g.current) === null || e === void 0 ? void 0 : e.focus();
    }), 0);
    return e.createElement(o, null, e.createElement($Z, Object.assign({
        value: p.toLocaleTimeString(s, {
            weekday: "long",
            hour: "2-digit",
            minute: "2-digit"
        }),
        buttonDisplay: a({
            key: "TravelTypeField.dateselector.tooltip.txt"
        }),
        onOpen: () => v(true),
        buttonProps: Object.assign({
            tooltip: a({
                key: "TravelTypeField.button.tooltip.txt"
            })
        }, l),
        mode: "select",
        entryFieldRef: g,
        buttonRef: h
    }, u)), e.createElement(zO, {
        referenceElementRef: h,
        isOpen: b,
        returnFocus: false,
        onEscape: S,
        onClose: () => v(false),
        isModal: true,
        footer: e.createElement(iN, {
            spacing: "s"
        }, e.createElement(QM, {
            onPress: () => {
                var e, t;
                f(y);
                d === null || d === void 0 ? void 0 : d({
                    day: y.getDay(),
                    hour: (e = y.getHours()) !== null && e !== void 0 ? e : 0,
                    minute: (t = y.getMinutes()) !== null && t !== void 0 ? t : 0
                });
                v(false);
                S();
            },
            text: a({
                key: "TravelTypeField.ok.txt"
            })
        }), e.createElement(QM, {
            onPress: () => {
                v(false);
                S();
            },
            text: a({
                key: "TravelTypeField.cancel.txt"
            })
        }))
    }, e.createElement(iN, {
        className: hCe.formField,
        orientation: "vertical",
        spacing: "s"
    }, e.createElement(yCe, {
        label: a({
            key: "TravelTypeField.day.txt"
        }),
        selectedIndex: y.getDay(),
        onSelected: e => {
            if (e !== null && e !== undefined) {
                x(new Date(0, 0, e, y.getHours(), y.getMinutes()));
            }
        },
        values: m,
        fieldWidth: "100%",
        className: hCe.formField
    }), e.createElement(LP, null, a({
        key: "TravelTypeField.time.txt"
    })), e.createElement(SW, {
        testId: t.testId,
        value: y,
        onChange: x,
        showMilliseconds: false,
        showHours: true,
        showMinutes: true,
        showSeconds: false,
        showDayPeriod: true
    }))));
};

const yCe = dU(DG);

const xCe = dU(vCe);

const SCe = t => {
    var n, a;
    const r = $be();
    const s = [ {
        key: oi.DIRECT,
        text: r({
            key: t.feature.type === "area" ? "TravelTypeField.distanceTypes.distance.txt" : "TravelTypeField.distanceTypes.direct.txt"
        })
    } ];
    if (t.canDoPremiumServices) {
        s.push({
            key: oi.DRIVING_DISTANCE,
            text: r({
                key: "TravelTypeField.distanceTypes.driving.distance.txt"
            })
        });
        s.push({
            key: oi.DRIVING_TIME,
            text: r({
                key: "TravelTypeField.distanceTypes.driving.time.txt"
            })
        });
        s.push({
            key: oi.TRUCKING_DISTANCE,
            text: r({
                key: "TravelTypeField.distanceTypes.trucking.distance.txt"
            })
        });
        s.push({
            key: oi.TRUCKING_TIME,
            text: r({
                key: "TravelTypeField.distanceTypes.trucking.time.txt"
            })
        });
        s.push({
            key: oi.WALKING_DISTANCE,
            text: r({
                key: "TravelTypeField.distanceTypes.walking.distance.txt"
            })
        });
        s.push({
            key: oi.WALKING_TIME,
            text: r({
                key: "TravelTypeField.distanceTypes.walking.time.txt"
            })
        });
    }
    const i = s.findIndex((e => e.key === t.feature.mode));
    const l = ((n = s[i]) === null || n === void 0 ? void 0 : n.key) === oi.DRIVING_TIME || ((a = s[i]) === null || a === void 0 ? void 0 : a.key) === oi.TRUCKING_TIME;
    const c = [ {
        key: si.NONE,
        text: r({
            key: "TravelTypeField.driveTimeTrafficTypes.none.txt"
        })
    }, {
        key: si.LIVE,
        text: r({
            key: "TravelTypeField.driveTimeTrafficTypes.live.txt"
        })
    }, {
        key: si.HISTORICAL_AVERAGE,
        text: r({
            key: "TravelTypeField.driveTimeTrafficTypes.historic.txt"
        })
    } ];
    const d = c.findIndex((e => e.key === (t.feature.traffic || si.NONE)));
    const u = [ -4, -3, -2, -1, 0, 1, 2, 3, 4 ].map((e => ({
        key: e,
        text: r({
            key: "TravelTypeField.driveTimeTraffic.offset.fmt",
            args: {
                hour: e < 0 ? String(e) : `+${String(e)}`
            }
        })
    })));
    const m = u.findIndex((e => {
        var o;
        return e.key === (((o = t.feature.trafficTime) === null || o === void 0 ? void 0 : o.hour) || 0);
    }));
    return e.createElement(o, null, s.length > 1 ? e.createElement(iN, {
        spacing: "s",
        orientation: "horizontal",
        style: {
            width: "100%"
        }
    }, e.createElement(yCe, {
        label: r({
            key: "TravelTypeField.travelType.txt"
        }),
        selectedIndex: i,
        onSelected: e => {
            if (typeof e !== "number") {
                return;
            }
            t.onTravelTypeChange(s[e].key);
        },
        values: s,
        fieldWidth: "100%",
        className: hCe.formField
    })) : null, l ? e.createElement(iN, {
        spacing: "s",
        orientation: "vertical",
        style: {
            width: "100%"
        }
    }, e.createElement(iN, {
        spacing: "none",
        orientation: "horizontal",
        style: {
            width: "100%"
        }
    }, e.createElement(yCe, {
        label: r({
            key: "TravelTypeField.traffic.txt"
        }),
        selectedIndex: d,
        onSelected: e => {
            if (typeof e !== "number") {
                return;
            }
            t.onTrafficTypeChange(c[e].key);
        },
        labelHelp: {
            library: "vaeua-gui-eua",
            contentKey: "react.va.geo.search.includeTraffic"
        },
        values: c,
        fieldWidth: "100%",
        className: hCe.formField
    }), e.createElement(MJ, {
        sections: [ {
            items: [ {
                text: r({
                    key: "TravelTypeField.driveTimeTraffic.update.refresh.txt"
                })
            }, {
                text: r({
                    key: "TravelTypeField.driveTimeTraffic.update.refreshAll.txt"
                })
            } ]
        } ],
        disabled: t.feature.traffic !== si.HISTORICAL_AVERAGE && t.feature.traffic !== si.LIVE,
        icon: {
            icon: KR
        },
        onItemSelected: e => {
            switch (e[0][1]) {
              case 0:
                t.onTrafficRefresh(false);
                break;

              case 1:
                t.onTrafficRefresh(true);
                break;
            }
        },
        tooltip: r({
            key: "TravelTypeField.driveTimeTraffic.update.tooltip.txt"
        }),
        className: hCe.formMenuButton,
        variant: oN.Light
    })), t.feature.traffic === si.LIVE ? e.createElement(yCe, {
        label: r({
            key: "TravelTypeField.traffic.offset.txt"
        }),
        selectedIndex: m,
        onSelected: e => {
            if (typeof e !== "number") {
                return;
            }
            t.onTrafficTimeChange({
                hour: u[e].key
            });
        },
        values: u,
        fieldWidth: "100%",
        className: hCe.formField
    }) : null, t.feature.traffic === si.HISTORICAL_AVERAGE ? e.createElement(xCe, {
        label: r({
            key: "TravelTypeField.traffic.daytime.txt"
        }),
        buttonDisplay: vT,
        fieldWidth: "100%",
        className: hCe.formField,
        initialValue: t.feature.trafficTime,
        onChange: t.onTrafficTimeChange
    }) : null) : null);
};

var wCe = "sas_components-Layouts-Form-Form_item";

var CCe = "sas_components-Layouts-Form-Form_form-fields";

var ECe = "sas_components-Layouts-Form-Form_title";

var ICe = "sas_components-Layouts-Form-Form_toolbar";

var _Ce = "sas_components-Layouts-Form-Form_dependency";

var DCe = {
    item: wCe,
    formFields: CCe,
    title: ECe,
    toolbar: ICe,
    dependency: _Ce
};

const LCe = MA("form-title");

const TCe = e => {
    const {className: o, style: n, title: a, toolbarItems: r, dependency: s, testId: i, role: l, ariaLabel: c, ariaLabelledBy: d, ...u} = e;
    const m = C_();
    const p = I_({
        "toolbar-bd": m.c.colorUiBorder,
        "toolbar-pd": m.spacing.core.s,
        "font-weight-thick": m.fontNova.weight.thick,
        "text-transform-uppercase": m.fontNova.textTransform.uppercase
    }, "form");
    const f = [];
    const g = LCe();
    if (a) {
        f.push({
            type: "Heading",
            id: g,
            level: 6,
            children: a,
            className: DCe.title
        });
        f.push({
            type: "ToolbarSpacer"
        });
    }
    if (r) {
        f.push(...r);
    }
    return t(iN, {
        orientation: "vertical",
        className: ke(o, e.dependency && DCe.dependency),
        style: {
            ...p,
            ...n
        },
        "data-testid": i,
        role: l ?? f.length > 0 ? "group" : undefined,
        "aria-label": c,
        "aria-labelledby": d !== undefined ? d : a ? g : undefined
    }, f.length > 0 ? t(_te, {
        items: f,
        className: DCe.toolbar,
        ariaLabelledby: a ? "" : undefined
    }) : null, t(RCe, Ee({
        testId: gb(i, "form-fields")
    }, u), e.children));
};

const RCe = ({labelPosition: e = "auto", breakpoint: o = 600, fieldSpacing: s = "m", labelSpacing: i, children: l, fieldLabelWidth: d, busyStateIndicatorProps: u, disabled: m, testId: p}) => {
    const f = C_();
    const [g, h] = n(false);
    const y = e === "top" || (e === "auto" ? g : false);
    const [x, S] = n(false);
    const [w, C] = n(undefined);
    const {refs: E, createSetRef: I} = uU();
    const _ = c(null);
    function D() {
        const e = R();
        if (!e) return;
        h(e.offsetWidth < o);
    }
    function L() {
        S((R()?.offsetWidth ?? 0) > 0);
    }
    const [T, R] = kN((() => {
        D();
        L();
    }));
    const k = e !== "top" && !d && x;
    const [A, M] = n(true);
    a((() => {
        if (w || x) {
            M(false);
        }
    }), [ w, x ]);
    a((() => {
        S((R()?.offsetWidth ?? 0) > 0);
    }), [ R ]);
    a((() => {
        if (E.length < 1 || !k) {
            C(undefined);
            return;
        }
        let e = 0;
        if (_.current !== null) {
            _.current.style.whiteSpace = "nowrap";
        }
        for (const t of E) {
            if (!t) continue;
            _.current?.replaceChildren(t.textContent ?? "");
            const o = Math.ceil((_.current?.getBoundingClientRect().width ?? 0) + 2);
            e = Math.max(o, e);
        }
        _.current?.replaceChildren("");
        if (e > 0) {
            e += parseFloat(i?.leftAligned ? f.spacing.core[i?.leftAligned] : f.spacing.core.m) * 16;
        }
        C(e);
    }), [ k, E, i, f.spacing.core ]);
    const N = r((() => v.toArray(l).map(((e, o) => {
        let n;
        if (!y && d) {
            n = d;
        } else if (w) {
            n = `${w}px`;
        }
        if (e.type.displayName?.includes("WithLabels")) {
            return b(e, {
                key: o,
                labelPosition: y ? "top" : "left",
                fieldLabelWidth: n,
                labelContainerRef: I(o),
                labelSpacing: i,
                ...m ? {
                    disabled: m
                } : {}
            });
        } else {
            return t("div", {
                key: o,
                className: DCe.item,
                style: !y ? {
                    paddingInlineStart: d ? d : w
                } : undefined
            }, e);
        }
    }))), [ l, d, y, I, i, w, m ]);
    return t(DN, Ee({
        disableAutoFocus: true,
        active: A,
        fillParentContainer: true,
        testId: gb(p, "busy-state-indicator")
    }, u), t(iN, {
        orientation: "vertical",
        ref: T,
        className: DCe.formFields,
        spacing: s,
        style: {
            opacity: A ? 0 : 1
        },
        "data-testid": gb(p, "flow")
    }, t(LP, {
        style: {
            visibility: "hidden",
            position: "absolute"
        },
        ref: _
    }), N));
};

var kCe = "sas_components-Tile-__internal__-TileContainer_tile";

var ACe = "sas_components-Tile-__internal__-TileContainer_selected";

var MCe = {
    tile: kCe,
    selected: ACe
};

const NCe = u((function e(o, n) {
    const a = C_();
    const r = c(null);
    const s = TEe();
    const i = o.index !== undefined ? s?.createTileRef?.(o.index) : null;
    const l = o.isGridCell ?? s?.isGridCell;
    const d = e => {
        const t = window.getSelection()?.toString() ?? "";
        if (e.isDefaultPrevented() || t.length > 0) return;
        o.onSelect?.({
            selectionArea: "tile",
            index: o.index,
            altKey: e.altKey,
            ctlKey: e.ctrlKey,
            metaKey: e.metaKey,
            shiftKey: e.shiftKey
        });
    };
    const u = e => {
        e.preventDefault();
        o.onOpen?.();
    };
    const m = n5({
        persist: true,
        onSingleClick: d,
        onDoubleClick: u
    });
    const p = () => {
        if (l) return "gridcell";
        if (o.isInteractive) return "dialog";
        if (o.role) return o.role;
        if (o.disableInteractiveMode) return "option";
        return "group";
    };
    return t("div", {
        style: {
            ...I_(OCe(a, o), "tile"),
            ...o.style
        },
        onContextMenu: o.onContextMenu,
        ref: e => {
            D_(n, e);
            D_(r, e);
            D_(i, e);
        },
        className: ke(MCe.tile, o.className, o.selected && MCe.selected),
        role: p(),
        "aria-label": o.ariaLabel,
        "aria-labelledby": o.ariaLabelledBy,
        "aria-describedby": o.ariaDescribedBy,
        "aria-selected": o.ariaSelected,
        tabIndex: o.tabIndex,
        "data-testid": o.testId,
        onClick: e => {
            o.onClick?.();
            (o.disableClickDelay ? d : m.onClick)(e);
        },
        onDoubleClick: o.disableClickDelay ? u : m.onDoubleClick,
        onFocus: o.onFocus,
        onBlur: o.onBlur,
        onKeyDown: e => {
            o.onKeyDown?.(e);
            if (e.target !== e.currentTarget) return;
            if (e.key === "Enter" && o.onOpen) {
                o.onOpen();
                PA(e);
                e.preventDefault();
            } else if (e.key === " " && o.onSelect) {
                o.onSelect({
                    index: o.index ?? undefined,
                    selectionArea: "tile",
                    altKey: e.altKey,
                    ctlKey: e.ctrlKey,
                    metaKey: e.metaKey,
                    shiftKey: e.shiftKey
                });
                e.preventDefault();
            }
        },
        onMouseDown: e => {
            if (e.shiftKey || e.detail > 1 && o.onOpen) e.preventDefault();
        }
    }, o.disableInteractiveMode ? o.children : t(De, Ee({
        disabled: !o.isInteractive
    }, o.focusLockProps), o.children));
}));

const OCe = (e, t) => ({
    bg: e.tokensExperimental["color-container-background-0"],
    "border-radius": e.tokensExperimental["size-border-radius-s"],
    sh: e.tokensExperimental["shadow-depth-s"],
    bd: t.selected ? e.tokensExperimental["color-secondary"] : e.tokensExperimental["color-container-border-4"],
    "bd-width": t.selected && e.themeVariant === "high-contrast" ? e.tokensExperimental["size-border-width-l"] : e.tokensExperimental["size-border-width-s"],
    "spacing-s": e.tokensExperimental["space-base-s"],
    "outline-radius": t.selected && e.themeVariant === "high-contrast" ? e.tokensExperimental["size-border-radius-s"] : e.tokensExperimental["size-border-width-null"],
    focus: t.variant === "primary-light" && e.themeVariant === "light" ? "var(--focus-dark-bg)" : "var(--focus-light-bg)"
});

var PCe = "sas_components-Tile-__internal__-TileFooter_full-width";

var BCe = {
    fullWidth: PCe
};

const zCe = u((function e({objectMarkers: o = [], ...n}, a) {
    if (!n.children && o.length === 0) return null;
    return t("div", {
        ref: a,
        "data-testid": n.testId,
        className: BCe.fullWidth
    }, n.children ?? t(iN, {
        spacing: "xxs",
        className: BCe.fullWidth
    }, o.map(((e, a) => t("div", {
        key: a
    }, t(I1, Ee({
        testId: gb(n.testId, `objectMarker-${a}`)
    }, e, {
        hideLabel: e.hideLabel || o.length > 1 && !e.popperText
    })))))));
}));

var FCe = "sas_components-Tile-__internal__-TileHeader_container";

var jCe = "sas_components-Tile-__internal__-TileHeader_with-subtitle";

var VCe = "sas_components-Tile-__internal__-TileHeader_title";

var HCe = "sas_components-Tile-__internal__-TileHeader_subtitle";

var UCe = "sas_components-Tile-__internal__-TileHeader_menu-button-container";

var GCe = "sas_components-Tile-__internal__-TileHeader_icon";

var KCe = {
    container: FCe,
    withSubtitle: jCe,
    title: VCe,
    subtitle: HCe,
    menuButtonContainer: UCe,
    icon: GCe
};

const WCe = e => {
    const n = C_();
    const a = I_({
        "spacing-xs": n.tokensExperimental["space-inline-xs"],
        "spacing-s": n.tokensExperimental["space-inline-s"],
        "spacing-m": n.tokensExperimental["space-inline-m"],
        "icon-fg": n.tokensExperimental["color-body-text"],
        "icon-size": n.tokensExperimental["size-icon-m"],
        "font-size": n.tokensExperimental["font-size-heading-text-5"],
        "font-size-s": n.tokensExperimental["font-size-body-text-s"],
        "font-weight": n.tokensExperimental["font-style-weight-700"]
    }, "tile-header");
    return t(o, null, t("div", {
        className: ke(KCe.container, e.title && e.subTitle && KCe.withSubtitle),
        style: a
    }, e.avatarProps ? t(O8, Ee({}, e.avatarProps, {
        size: "small",
        testId: gb(e.testId, "object-avatar"),
        className: ke(e.avatarProps.className, KCe.icon),
        focusable: e.tabIndex === 0 && e.avatarProps.focusable ? true : undefined
    })) : e.icon ? t(MM, Ee({}, e.icon, {
        testId: gb(e.testId, "object-icon"),
        className: ke(e.icon.className, KCe.icon),
        tabIndex: e.tabIndex === 0 && !e.objectIconAriaHidden ? 0 : undefined,
        theme: () => ({
            "--icon-default-override-fg": "var(--tile-header-icon-fg)",
            "--icon-neutral-override-fg": "var(--tile-header-icon-fg)",
            "--icon-alert-override-fg": "var(--tile-header-icon-fg)",
            "--icon-warning-override-fg": "var(--tile-header-icon-fg)",
            "--icon-success-override-fg": "var(--tile-header-icon-fg)",
            "--icon-information-override-fg": "var(--tile-header-icon-fg)"
        })
    })) : null, e.title ? t(o, null, e.onOpen && !e.suppressTitleAsLink ? t(AJ, {
        id: e.titleId,
        tabIndex: e.tabIndex,
        onPress: () => {
            e.onOpen?.();
        },
        wrapText: false,
        decoration: "hover-only",
        className: KCe.title,
        testId: gb(e.testId, "link")
    }, e.title) : t(oO, {
        focusable: e.tabIndex === 0,
        id: e.titleId,
        level: 4,
        wrapText: false,
        className: KCe.title,
        testId: gb(e.testId, "title-heading")
    }, e.title), e.subTitle ? t(oO, {
        level: 5,
        focusable: e.tabIndex === 0,
        wrapText: false,
        className: KCe.subtitle,
        testId: gb(e.testId, "subtitle-heading")
    }, e.subTitle) : null) : null, e.menuButtonProps ? t("div", {
        className: KCe.menuButtonContainer
    }, t(MJ, Ee({}, e.menuButtonProps, {
        focusable: e.tabIndex === 0,
        hideDownArrow: true,
        variant: oN.Icon,
        icon: {
            icon: OR
        },
        testId: gb(e.testId, "menuButton")
    }))) : null), e.description ? t(jP, {
        tabIndex: e.tabIndex === 0 ? 0 : undefined,
        testId: gb(e.testId, "description")
    }, e.description) : null);
};

const $Ce = new WeakSet;

function YCe(e) {
    return $Ce.has(e);
}

const qCe = (e, t) => {
    a((() => {
        const o = o => {
            if (YCe(o)) return;
            const n = !Array.isArray(e) ? [ e ] : e;
            for (const e of n) {
                if (e.current?.contains(o.target)) {
                    return;
                }
            }
            const a = document.getElementsByClassName(uL.modalBlockLayer);
            if (a.length) {
                const e = a[a.length - 1];
                for (const t of n) {
                    if (t.current && !e.contains(t.current)) return;
                }
            }
            t();
        };
        window.addEventListener("mousedown", o);
        return () => {
            window.removeEventListener("mousedown", o);
        };
    }), [ e, t ]);
};

const XCe = e => {
    const t = c(false);
    const [o, r] = n(false);
    qCe(e.tileRef, s((() => {
        r(false);
    }), []));
    const {onFocus: i, onBlur: l} = JI((() => {
        t.current = false;
    }));
    a((() => {
        if (t.current && !o && e.tileRef.current !== document.activeElement) {
            e.tileRef.current?.focus({
                preventScroll: true
            });
        }
    }), [ o, e.tileRef ]);
    a((() => {
        const t = [];
        for (const o of e.customContentRefs ?? []) {
            if (!o.current) continue;
            t.push(...TF(o.current));
        }
        if (e.disableInteractiveMode) {
            if (e.suppressCustomContentFocus) {
                for (const e of t) {
                    e.setAttribute("tabindex", "-1");
                }
                return () => {
                    for (const e of t) {
                        e.setAttribute("tabindex", "0");
                    }
                };
            }
            return;
        }
        for (const e of t) {
            e.setAttribute("tabindex", o ? "0" : "-1");
        }
        return () => {
            for (const e of t) {
                e.setAttribute("tabindex", "0");
            }
        };
    }), [ e.customContentRefs, o, e.disableInteractiveMode, e.suppressCustomContentFocus ]);
    return {
        isInteractive: o,
        onClick: () => {
            r(true);
        },
        onFocus: () => {
            i();
            t.current = true;
        },
        onBlur: l,
        onKeyDown: e => {
            if (e.defaultPrevented) return;
            if (e.key === "F2") {
                r((e => !e));
                e.preventDefault();
            } else if (o) {
                if (e.key === "Escape") {
                    r(false);
                    e.preventDefault();
                }
                e.stopPropagation();
            }
        }
    };
};

const ZCe = e => {
    const t = E1();
    const o = [];
    if (e.favorited) {
        o.push({
            type: "Favorite"
        });
    }
    if (e.objectMarkers) {
        o.push(...e.objectMarkers);
    }
    const n = [];
    for (const {type: e} of o) {
        const {labelText: o} = h1(e, t);
        n.push(o);
    }
    return n.join(", ");
};

const JCe = fb(Qt);

const QCe = e => {
    const t = JCe();
    const o = ZCe(e);
    const n = [];
    if (e.disableInteractiveMode) {
        if (e.title) {
            n.push(e.title);
        }
        if (o) {
            n.push(o);
        }
        if (e.selected) {
            n.push(t("selected.keyboard.tooltip.label"));
        }
    } else {
        n.push(t("interactiveMode.hint.keyboardTooltip.label"));
    }
    const a = fO({
        tooltip: n.join(", ")
    });
    return a;
};

var eEe = "sas_components-Tile-Tile_draggable";

var tEe = "sas_components-Tile-Tile_dragged-item";

var oEe = "sas_components-Tile-Tile_drag-over";

var nEe = "sas_components-Tile-Tile_tile";

var aEe = "sas_components-Tile-Tile_selected";

var rEe = "sas_components-Tile-Tile_checkbox";

var sEe = "sas_components-Tile-Tile_bar";

var iEe = "sas_components-Tile-Tile_content-container";

var lEe = "sas_components-Tile-Tile_thumbnail-container";

var cEe = "sas_components-Tile-Tile_content";

var dEe = "sas_components-Tile-Tile_footer";

var uEe = "sas_components-Tile-Tile_object-marker";

var mEe = "sas_components-Tile-Tile_object-status";

var pEe = "sas_components-Tile-Tile_drag-preview";

var fEe = "sas_components-Tile-Tile_drop-line";

var gEe = "sas_components-Tile-Tile_place-at-end";

var hEe = "sas_components-Tile-Tile_drop-container";

var bEe = "sas_components-Tile-Tile_metadata-table-input";

var vEe = "sas_components-Tile-Tile_metadata-table-form";

var yEe = "sas_components-Tile-Tile_metadata-table-row";

var xEe = {
    draggable: eEe,
    draggedItem: tEe,
    dragOver: oEe,
    tile: nEe,
    selected: aEe,
    checkbox: rEe,
    bar: sEe,
    contentContainer: iEe,
    thumbnailContainer: lEe,
    content: cEe,
    footer: dEe,
    objectMarker: uEe,
    objectStatus: mEe,
    dragPreview: pEe,
    dropLine: fEe,
    placeAtEnd: gEe,
    dropContainer: hEe,
    metadataTableInput: bEe,
    metadataTableForm: vEe,
    metadataTableRow: yEe
};

const SEe = "NOVA_TILE";

const wEe = e => {
    const {useDragLayer: o} = nX();
    const {itemType: n, item: a} = o((e => ({
        itemType: e.getItemType(),
        item: e.getItem()
    })));
    if (!a || n !== SEe || e.dndPrefix !== undefined && a.dndProps?.dndPrefix !== e.dndPrefix) return null;
    const {dndProps: r, ...s} = a;
    return t(RQ, null, t(MEe, Ee({}, s, {
        disableInteractiveMode: true,
        className: ke(s.className, xEe.dragPreview)
    })));
};

const CEe = MA("Tile");

const EEe = MA("tile-container");

const IEe = MA("favorite-object-marker");

const _Ee = fb(Qt);

const DEe = dU(SH);

const LEe = i(null);

const TEe = () => l(LEe);

const REe = e => t(LEe.Provider, {
    value: e.value
}, e.children);

const kEe = u((function e(o, n) {
    const a = TEe();
    const s = CEe();
    const i = C_();
    const l = EEe();
    const d = EEe();
    const u = EEe(o.objectMarkers?.length ?? 0);
    const m = IEe();
    const p = (o.avatarProps ? o.avatarProps.id : o.icon?.id) ?? l;
    const f = _Ee();
    const g = c(null);
    const h = c(null);
    const b = c(null);
    const v = r((() => [ h, b ]), []);
    const y = QCe(o);
    const x = o.hideCheckbox ?? a?.hideCheckbox;
    const S = o.onSelect ?? a?.onSelect;
    const w = o.selected ?? a?.isSelected?.(o.index) ?? false;
    const C = o.selectionMode ?? a?.selectionMode ?? "single";
    const E = o.isGridCell ?? a?.isGridCell;
    const I = C === "multi" ? false : o.disableInteractiveMode ?? a?.disableInteractiveMode ?? false;
    const {isInteractive: _, ...D} = XCe({
        tileRef: g,
        customContentRefs: v,
        disableInteractiveMode: I,
        suppressCustomContentFocus: o.tabIndex !== -1
    });
    const L = I && o.tabIndex !== undefined ? o.tabIndex : I || !_ ? 0 : -1;
    const T = (e, n, a = false) => n ? t(DEe, {
        key: e,
        label: a ? f("objectMetadata.addition.label", {
            key: e
        }) : f(`objectMetadata.${e}.label`),
        "aria-labelledby": e,
        type: "text",
        editable: false,
        value: n,
        onChange: () => {},
        fieldWidth: "100%",
        tabindex: L === -1 ? 0 : -1,
        testId: gb(o.testId, `metadata-${e}`),
        wrapLabel: false,
        labelStyle: {
            fontSize: i.tokensExperimental["font-size-body-text-xs"]
        },
        inputStyle: {
            fontSize: i.tokensExperimental["font-size-body-text-xs"]
        },
        inputClassName: xEe.metadataTableInput,
        className: xEe.metadataTableRow
    }) : null;
    const R = () => {
        const e = [];
        const {creator: n, modifier: a, creationDate: r, modificationDate: s, location: i, ...l} = o.metadata ?? {};
        if (n) {
            e.push(T("creator", n));
        }
        if (a) {
            e.push(T("modifier", a));
        }
        if (r) {
            e.push(T("creationDate", r));
        }
        if (s) {
            e.push(T("modificationDate", s));
        }
        if (i) {
            e.push(T("location", i));
        }
        for (const t in l) {
            const o = l[t];
            if (o) {
                e.push(T(t, o, true));
            }
        }
        return e.length > 0 ? t(TCe, {
            labelPosition: "left",
            fieldSpacing: "xs",
            fieldLabelWidth: "20rem",
            className: xEe.metadataTableForm
        }, e) : null;
    };
    const k = R();
    return t(NCe, Ee({
        testId: o.testId,
        ref: e => {
            D_(n, e);
            D_(g, e);
            y(e);
        },
        style: {
            ...I_({
                pd: i.tokensExperimental["space-base-m"]
            }, "tile-content"),
            ...I_({
                bg: i.themeVariant === "high-contrast" ? i.tokensExperimental["color-container-background-0"] : Jv(i.tokensExperimental["color-container-background-0"], .4),
                "margin-xxs": i.tokensExperimental["space-base-xxs"]
            }, "tile-object-marker"),
            ...o.style
        },
        className: ke(xEe.tile, w && xEe.selected, o.className),
        isInteractive: _,
        ariaLabel: o.ariaLabel
    }, I ? {} : D, {
        index: o.index,
        tabIndex: L,
        selected: w,
        onSelect: S,
        onOpen: o.onOpen,
        ariaLabelledBy: o.ariaLabelledBy ?? (o.ariaLabel ? undefined : [ ...o.title ? [ s ] : [], ...o.avatarProps && o.avatarProps.ariaLabel !== "" || !o.avatarProps && o.icon && !o.objectIconAriaHidden ? [ p ] : [] ].join(" ")),
        ariaDescribedBy: o.ariaDescribedBy ?? [ ...o.favorited ? [ m ] : [], ...u, ...C === "none" || C === "single" && !w || !E && C === "desktop" && I ? [] : [ d ] ].join(" "),
        ariaSelected: (E || I) && C !== "none" ? w : undefined,
        disableInteractiveMode: I,
        disableClickDelay: o.disableClickDelay,
        onContextMenu: o.onContextMenu,
        variant: o.variant,
        isGridCell: E,
        focusLockProps: {
            ...o.focusLockProps,
            onActivation: e => {
                o.focusLockProps?.onActivation?.(e);
                if (!I) {
                    D.onFocus();
                }
            }
        }
    }), t(bO, {
        id: d
    }, f(w ? "selected.aria" : "unselected.aria")), t("div", {
        className: xEe.bar
    }, !x ? t(tB, {
        focusable: _,
        ariaLabelledBy: o.checkBoxAriaLabelledBy ?? (!o.checkBoxAriaLabel && o.title ? s : undefined),
        ariaLabel: o.checkBoxAriaLabel,
        className: xEe.checkbox,
        style: !_ ? undefined : {
            display: "inline-block"
        },
        checked: !!w,
        testId: gb(o.testId, "checkbox"),
        onPress: e => {
            S?.({
                index: o.index ?? undefined,
                selectionArea: "checkbox",
                altKey: e.altKey,
                ctlKey: e.ctrlKey,
                metaKey: e.metaKey,
                shiftKey: e.shiftKey
            });
        },
        theme: () => ({
            "--checkbox-spacing-xxs": "0"
        })
    }) : undefined, t(wte, null), o.favorited ? t(I1, {
        className: xEe.objectMarker,
        type: "Favorite",
        hideLabel: true,
        focusable: _,
        testId: gb(o.testId, "favorite-icon"),
        id: m
    }) : null), t("div", {
        className: xEe.contentContainer
    }, o.thumbnail ? t("div", {
        tabIndex: _ && o.thumbnailAriaNotHidden ? 0 : undefined,
        "data-testid": gb(o.testId, "thumbnail"),
        className: xEe.thumbnailContainer,
        "aria-hidden": !o.thumbnailAriaNotHidden
    }, o.thumbnail) : null, NEe(o) ? t(iN, {
        orientation: "vertical",
        className: xEe.content,
        spacing: "s",
        testId: gb(o.testId, "content-flow")
    }, t(WCe, {
        testId: gb(o.testId, "header"),
        tabIndex: L === 0 ? -1 : 0,
        titleId: s,
        onOpen: o.onOpen,
        icon: o.icon ? {
            ...o.icon,
            id: p
        } : undefined,
        avatarProps: o.avatarProps ? {
            ...o.avatarProps,
            id: p,
            focusable: o.avatarProps.focusable ?? o.avatarProps.ariaLabel !== ""
        } : undefined,
        title: o.title,
        subTitle: o.subTitle,
        suppressTitleAsLink: o.suppressTitleAsLink,
        objectIconAriaHidden: o.objectIconAriaHidden,
        menuButtonProps: o.menuButtonProps,
        description: o.description
    }), o.showObjectMetadataTable || o.body ? t("div", {
        ref: h,
        "data-testid": gb(o.testId, "body-segment")
    }, k, o.body) : null, t(zCe, {
        ref: o.footerContent ? b : undefined,
        testId: gb(o.testId, "footer"),
        objectMarkers: o.objectMarkers?.map(((e, t) => ({
            ...e,
            focusable: e.focusable !== false && L === -1,
            id: u[t]
        })))
    }, o.footerContent)) : null));
}));

const AEe = u((function e(o, n) {
    const {dndProps: r, ...s} = o;
    const i = c(null);
    const {useDrag: l, getEmptyImage: d} = nX();
    const u = C_();
    const m = IQ(u);
    const [{dragClassName: p}, f, g] = l({
        type: SEe,
        item: o,
        canDrag: r.allowDrag,
        collect: e => ({
            dragClassName: ke(e.isDragging() && xEe.draggedItem)
        })
    });
    a((() => {
        g(d(), {
            captureDraggingState: true
        });
    }), [ g, d ]);
    f(i);
    const h = o.dndProps.dropMode ?? "insert";
    const {dropClassName: b, tileDropZoneConnect: v} = OEe({
        ...o.dndProps,
        index: o.index
    });
    v(i);
    return t("div", {
        className: ke(xEe.dropContainer, h === "insert" && b),
        style: m
    }, t(kEe, Ee({}, s, {
        ref: e => {
            D_(n, e);
            D_(i, e);
        },
        style: s.style,
        className: ke(s.className, xEe.draggable, p, h === "combine" && b)
    })));
}));

const MEe = u((function e({dndProps: o, ...n}, a) {
    return o ? t(AEe, Ee({}, n, {
        dndProps: o,
        ref: a
    })) : t(kEe, Ee({}, n, {
        ref: a
    }));
}));

const NEe = e => !!(e.icon || e.avatarProps || e.title || e.description || e.menuButtonProps || e.showObjectMetadataTable || e.body || e.footerContent || e.objectMarkers && e.objectMarkers.length > 0);

const OEe = e => {
    const {useDrop: t} = nX();
    const o = c(null);
    const n = C_();
    const a = IQ(n);
    const r = e.dropMode ?? "insert";
    const [{dropClassName: s, isOver: i}, l] = t({
        accept: [ SEe ],
        canDrop: t => !!e.allowDrop && (!e.allowDropDndPrefixes || e.allowDropDndPrefixes.includes(t.dndProps?.dndPrefix ?? "")) && (e.dndPrefix !== t.dndProps?.dndPrefix || t.index !== e.index),
        collect: t => {
            const o = t.isOver() && t.canDrop();
            const n = t.getItem()?.index;
            const a = t.getItem()?.dndProps?.dndPrefix;
            const s = r === "insert" ? ke(xEe.dropLine, a === e.dndPrefix && n !== undefined && e.index !== undefined && e.index > n && xEe.placeAtEnd) : xEe.dragOver;
            return {
                isOver: o,
                dropClassName: o ? s : undefined
            };
        },
        drop: (t, o) => {
            if (o.didDrop() || !o.canDrop()) return;
            e.onDrop?.({
                dropIndex: e.index,
                droppedItem: t,
                monitor: o
            });
        }
    });
    l(o);
    return {
        ref: o,
        dropClassName: s,
        isOver: i,
        style: a,
        tileDropZoneConnect: l
    };
};

var PEe = "sas_components-TileCarousel-__internal__-PageIndicator_page-indicator";

var BEe = "sas_components-TileCarousel-__internal__-PageIndicator_page-indicator-dot";

var zEe = {
    pageIndicator: PEe,
    pageIndicatorDot: BEe
};

const FEe = fb(eo);

const jEe = e => {
    const o = FEe();
    const r = C_();
    const s = ay();
    const [i, l] = n(0);
    const d = c(null);
    const {refs: u, createSetRef: m} = uU();
    const p = t => {
        if (t.defaultPrevented) return;
        switch (t.key) {
          case "ArrowDown":
          case s ? "ArrowLeft" : "ArrowRight":
            l((t => Math.min(e.totalPages - 1, t + 1)));
            break;

          case "ArrowUp":
          case s ? "ArrowRight" : "ArrowLeft":
            l((e => Math.max(0, e - 1)));
            break;

          case "Home":
            l(0);
            break;

          case "End":
            l(e.totalPages - 1);
            break;

          default:
            return;
        }
        t.preventDefault();
    };
    a((() => {
        if (!u[i]?.contains(document.activeElement) && d.current?.contains(document.activeElement)) {
            u[i]?.focus();
        }
    }), [ i, u ]);
    return t(iN, {
        className: zEe.pageIndicator,
        "aria-label": o("pageIndicator.aria"),
        spacing: "xs",
        role: "radiogroup",
        onKeyDown: p,
        ref: d
    }, [ ...Array(e.totalPages) ].map(((n, a) => {
        const s = a === e.currentPageIndex;
        const i = e.tooltip?.(a) ?? o("pageIndicator.dot.aria", {
            number: (a + 1).toString()
        });
        return t("div", {
            key: a,
            role: "radio",
            tabIndex: -1,
            ref: m(a),
            className: zEe.pageIndicatorDot,
            title: i,
            "aria-label": e.ariaLabel?.(a) ?? i,
            "aria-checked": s,
            onFocus: () => {
                l(a);
            },
            onClick: () => {
                e.onPageTo(a);
            },
            onKeyDown: t => {
                if (t.key === "Enter" || t.key === " ") {
                    t.preventDefault();
                    e.onPageTo(a);
                }
            }
        }, t(MM, {
            icon: s ? BR : PR,
            tokens: () => ({
                "default-fg": s ? r.c.colorSecondary : r.c.colorTextDefault
            }),
            ariaHidden: true
        }));
    })));
};

const VEe = fb(eo);

const HEe = ({tileRefs: e, tilesPerPage: t, numberOfTiles: o, scrollableContentRef: r, initialFocusableIndex: s, onSelect: i, reorderTiles: l, tiles: c}) => {
    const d = VEe();
    const u = ay();
    const m = $B({
        source: OB.InputFull
    });
    const p = XA();
    const [f, g] = n(s ?? 0);
    const h = bD() === fD.Mac;
    a((() => {
        const t = e[f];
        if (!t?.contains(document.activeElement) && r.current?.contains(document.activeElement)) {
            t?.focus();
        }
        for (const [t, o] of e.entries()) {
            o?.setAttribute("tabindex", t === f ? "0" : "-1");
        }
    }), [ f, r, e ]);
    const b = l ? (e, t) => {
        l?.(e, t);
        const n = c?.[t];
        const a = n?.ariaLabelledBy ? document.querySelector(`#${n?.ariaLabelledBy}`)?.textContent : undefined;
        p?.notify(d(t < e ? "moveTileBefore.aria" : "moveTileAfter.aria", {
            tileName: a ?? n?.ariaLabel ?? n?.title ?? "",
            position: (t + 1).toString(),
            numberOfTiles: o.toString()
        }));
    } : undefined;
    const v = e => {
        const n = h ? e.metaKey : e.ctrlKey;
        switch (e.key) {
          case "ArrowDown":
          case "ArrowUp":
          case "ArrowLeft":
          case "ArrowRight":
            {
                const t = e.key === "ArrowDown" || u && e.key === "ArrowLeft" || !u && e.key === "ArrowRight" ? 1 : -1;
                e.persist();
                const a = Math.max(0, Math.min(o - 1, f + t));
                if (f === a) m.play(); else {
                    if (e.shiftKey && n && b) {
                        b(f, a);
                    } else if (e.shiftKey) {
                        i(a, {
                            selectionArea: "tile",
                            ctlKey: e.ctrlKey,
                            metaKey: e.metaKey,
                            shiftKey: e.shiftKey,
                            altKey: e.altKey
                        });
                    }
                    g(a);
                }
                break;
            }

          case "Home":
            {
                if (f === 0) m.play(); else {
                    if (e.shiftKey && n && b) {
                        b(f, 0);
                    }
                    g(0);
                }
                break;
            }

          case "End":
            {
                if (f === o - 1) m.play(); else {
                    if (e.shiftKey && n && b) {
                        b(f, o - 1);
                    }
                    g(o - 1);
                }
                break;
            }

          case "PageDown":
            {
                const e = Math.min(o - 1, f + t);
                if (f === e) m.play();
                g(e);
                break;
            }

          case "PageUp":
            {
                const e = Math.max(0, f - t);
                if (f === e) m.play();
                g(e);
                break;
            }

          default:
            return;
        }
        e.preventDefault();
    };
    return {
        handleKeyDown: v,
        focusableIndex: f,
        setFocusableIndex: g
    };
};

var UEe = "sas_components-TileCarousel-TileCarousel_carousel-container";

var GEe = "sas_components-TileCarousel-TileCarousel_page-container";

var KEe = "sas_components-TileCarousel-TileCarousel_scroll-window";

var WEe = "sas_components-TileCarousel-TileCarousel_zero-state";

var $Ee = "sas_components-TileCarousel-TileCarousel_add-button";

var YEe = "sas_components-TileCarousel-TileCarousel_scrollable-container";

var qEe = "sas_components-TileCarousel-TileCarousel_inner-container";

var XEe = "sas_components-TileCarousel-TileCarousel_zero-state-container";

var ZEe = "sas_components-TileCarousel-TileCarousel_hidden";

var JEe = {
    carouselContainer: UEe,
    pageContainer: GEe,
    scrollWindow: KEe,
    zeroState: WEe,
    addButton: $Ee,
    scrollableContainer: YEe,
    innerContainer: qEe,
    zeroStateContainer: XEe,
    hidden: ZEe
};

const QEe = fb(eo);

const eIe = Dh("TileCarousel");

const tIe = u((function e({pageIndicatorLocation: o = "below", maxNumTiles: r = 100, ...s}, i) {
    const l = QEe();
    const d = C_();
    const u = I_({
        "spacing-s": d.spacing.core.s,
        "spacing-m": d.spacing.core.m,
        "add-button-bd": d.c.colorUiBorder
    }, "tile-carousel");
    const m = XA();
    const [p, f] = n(s.initialFocusableIndex ?? 0);
    const h = c(null);
    const b = s.selectionMode === "single" ? s.allowDeselection ?? true : true;
    const [y, x] = n(0);
    const [S, w] = n(0);
    const [C, E] = n(0);
    const I = C ? Math.floor(S / C) : 0;
    const _ = c(0);
    const D = s.selectionMode ?? "multi";
    const L = D === "none" || D === "single" || D === "desktop";
    const T = e => {
        const t = Math.min(_.current, e);
        const o = Math.max(_.current, e);
        return [ ...Array(o - t + 1) ].map(((e, o) => t + o));
    };
    const R = bD() === fD.Mac;
    const k = (e, t) => {
        if (D === "none" || !s.tiles) return;
        const o = t.shiftKey ? T(e) : undefined;
        const n = R ? t.metaKey : t.ctlKey;
        const a = D === "single" || t.selectionArea === "tile" && !n;
        const r = a ? s.tiles.reduce(((t, n, a) => n.selected && !o?.includes(a) && a !== e ? [ ...t, a ] : t), []) : [];
        if (o) {
            for (const e of o) {
                const t = s.tiles[e];
                if (!t.selected) {
                    t.onSelect?.({
                        index: e,
                        selectionArea: "checkbox"
                    });
                }
            }
        } else {
            const o = s.tiles[e].selected && (!b || r.length > 0);
            if (!o) {
                if (D === "single" && !J && s.tiles[e].selected) {
                    m?.notify(l("unselected.aria"));
                }
                s.tiles[e].onSelect?.(t);
            }
            _.current = e;
        }
        for (const e of r) {
            s.tiles[e].onSelect?.({
                index: e,
                selectionArea: "checkbox"
            });
        }
    };
    const {refs: A, createSetRef: M} = uU();
    const N = Math.min(r, (s.tiles ?? v.toArray(s.children)).length);
    const {focusableIndex: O, setFocusableIndex: P, handleKeyDown: B} = HEe({
        tileRefs: A,
        tilesPerPage: I,
        numberOfTiles: N,
        scrollableContentRef: h,
        initialFocusableIndex: s.initialFocusableIndex,
        onSelect: k,
        reorderTiles: s.reorderTiles,
        tiles: s.tiles
    });
    const {wrapDndProps: z} = sIe({
        numberOfTiles: N,
        maxNumTiles: r
    });
    const F = s.tiles?.slice(0, r).map(((e, o) => t(MEe, Ee({}, e, {
        key: o,
        onSelect: e => k(o, e),
        tabIndex: o === O ? 0 : -1,
        index: e.index ?? o,
        dndProps: z(e.dndProps)
    })))) ?? v.toArray(s.children).slice(0, r);
    const j = I ? Math.ceil(N / I) : 0;
    const V = S > j * 18;
    const H = s.showPageIndicator && V && j > 1;
    const U = !!s.onAdd;
    const G = s.addButtonProps?.tooltip ?? l("addTile.button.tooltip.label");
    const K = async () => {
        const {status: e, message: t} = await (s.onAdd?.()) ?? {};
        if (t) {
            m?.notify(t);
        } else if (e === "success") {
            m?.notify(l("tileAdded.aria"));
        }
    };
    const [W, $] = kN((() => {
        const e = $();
        x(e?.offsetHeight ?? 0);
        const t = e?.clientWidth ?? 0;
        if (t <= 0) return;
        E(aIe(A?.[0]));
        w(t);
    }));
    a((() => {
        if (N > r) {
            eIe.debug(`TileCarousel is limited to ${r} tiles`);
        }
    }), [ N, r ]);
    a((() => {
        P((e => Math.min(N - 1, e)));
        f((e => Math.min(N - 1, e)));
        _.current = Math.min(N - 1, _.current);
    }), [ N, P ]);
    g(i, (() => ({
        scrollTo: ({tileIndex: e, pageIndex: t}) => {
            if (e !== undefined) {
                f(e);
            } else if (t !== undefined) {
                f(t * I);
            }
        },
        setFocusableTile: P
    })));
    const Y = e => ({
        onFocus: () => {
            P(e);
            f(e);
        }
    });
    const q = H ? t(jEe, {
        totalPages: j,
        currentPageIndex: Math.floor(p / I),
        onPageTo: e => {
            f(e * I);
        },
        ariaLabel: s.pageIndicatorAriaLabel,
        tooltip: s.pageIndicatorTooltip
    }) : null;
    const X = H ? Math.floor(p / I) : p;
    a((() => {
        if (!H) return;
        const e = s.onScrollPositionChange;
        const t = X * I;
        const o = Math.min(N - 1, t + I - 1);
        e?.({
            tileIndices: [ ...Array(o - t + 1) ].map(((e, o) => t + o)),
            pageIndex: X,
            numberOfPages: j
        });
        P((e => e >= t && e <= o ? e : t));
    }), [ X, H, I, j, N, s.onScrollPositionChange, P ]);
    const Z = s.addButtonProps?.iconType ?? "add";
    const J = D === "multi" ? false : s.disableInteractiveMode;
    const {ariaLabel: Q} = oIe(l, {
        ...s,
        disableInteractiveMode: J
    });
    const {ref: ee, isOver: te} = OEe({
        allowDrop: s.dndProps?.allowDrop,
        allowDropDndPrefixes: s.dndProps?.allowDropDndPrefixes,
        dndPrefix: s.dndProps?.dndPrefix
    });
    const oe = OEe({
        ...z(s.dndProps),
        dropMode: "combine"
    });
    const {ref: ne = undefined, dropClassName: ae = undefined, style: re = undefined} = s.dndProps ? oe : {};
    return t("div", {
        style: {
            ...u,
            ...s.style
        },
        className: ke(JEe.carouselContainer, s.className),
        "data-testid": s.testId,
        ref: ee
    }, N > 0 ? t(iN, {
        orientation: "horizontal",
        spacing: "m",
        className: JEe.innerContainer
    }, t(iN, {
        orientation: "vertical",
        spacing: "xs",
        className: JEe.scrollableContainer
    }, o === "above" ? q : null, t("div", {
        onKeyDown: B
    }, t(REe, {
        value: {
            createTileRef: M,
            hideCheckbox: L,
            isSelected: () => false,
            disableInteractiveMode: J,
            selectionMode: D
        }
    }, t(bX, {
        selectedIndex: X,
        currentIndex: X,
        setCurrentIndex: e => {
            if (typeof e === "function") {
                f((t => H ? e(t) * I : e(t)));
            } else {
                const t = e;
                f(H ? t * I : t);
            }
        },
        acceptDropTypes: [ SEe ],
        contentProps: {
            "aria-label": Q,
            role: J ? "listbox" : "group",
            "aria-multiselectable": J && D === "desktop" ? "true" : undefined
        },
        scrollWindowRef: W,
        scrollWindowClassName: JEe.scrollWindow,
        contentRef: h,
        variant: s.variant,
        testId: gb(s.testId, "scrollable")
    }, H ? rIe(F, I, C, r).map(((e, o) => t(iN, {
        spacing: "none",
        key: o,
        style: S ? {
            width: `${S - 8}px`
        } : undefined,
        className: JEe.pageContainer
    }, e.map(((e, n) => {
        const a = o * I + n;
        return t("div", Ee({
            key: n
        }, Y(a)), e);
    }))))) : F.map(((e, o) => t("div", Ee({
        key: o
    }, Y(o)), e)))), t(wEe, null))), o === "below" ? q : null), U || s.dndProps ? t("div", {
        ref: ne,
        className: ke(ae, !U && !te && JEe.hidden),
        style: re
    }, t(QM, Ee({
        tooltip: G,
        ariaLabel: G
    }, s.addButtonProps, {
        testId: gb(s.testId, "addTileButton"),
        icon: {
            icon: Z === "addToInsights" ? yL : hL
        },
        variant: oN.Icon,
        disabled: N >= r,
        className: JEe.addButton,
        onPress: K
    }))) : null) : t("div", {
        ref: ne,
        className: ke(ae, JEe.zeroStateContainer),
        style: re
    }, t(g2, {
        testId: gb(s.testId, "zeroState"),
        text: s.zeroStateMsg ?? (s.useAddZeroStateMsg ? l("carousel.zeroState.noItemsAdded.label") : l("carousel.zeroState.noItems.label")),
        style: {
            height: `${y}px`
        },
        className: JEe.zeroState,
        actionButtonOneProps: U ? {
            tooltip: G,
            ariaLabel: G,
            ...s.addButtonProps,
            text: l("addTile.zeroState.button.label"),
            testId: gb(s.testId, "zeroState-addButton"),
            onPress: K
        } : undefined
    })));
}));

const oIe = (e, {selectionMode: t = "multi", ...o}) => {
    const n = o.ariaLabel ?? e("carousel.aria");
    const a = [ n ];
    if (t === "single") {
        a.push(e("selectionMode.single.aria"));
    } else if (t === "multi" || t === "desktop") {
        a.push(e("selectionMode.multi.aria"));
    }
    if (!o.disableInteractiveMode) {
        a.push(e("interactiveMode.hint.aria"));
    }
    return {
        ariaLabel: a.join(", ")
    };
};

const nIe = 160;

const aIe = e => {
    if (!e) return 0;
    const {marginLeft: t, marginRight: o, paddingLeft: n, paddingRight: a} = window.getComputedStyle(e);
    const r = parseFloat(t) + parseFloat(o);
    const s = parseFloat(n) + parseFloat(a);
    return (e?.offsetWidth ?? nIe) + r + s;
};

const rIe = (e, o, n, a) => {
    const r = e.length;
    const s = [];
    for (const [i, l] of e.entries()) {
        if (i >= a) break;
        if (i % o === 0) {
            s.push([ l ]);
        } else {
            s[s.length - 1].push(l);
        }
        if (i === r - 1) {
            const e = s[s.length - 1].length;
            s[s.length - 1].push(...new Array(o - e).fill(t("div", {
                style: {
                    width: n
                }
            })));
        }
    }
    return s;
};

const sIe = ({numberOfTiles: e, maxNumTiles: t}) => {
    const o = $B({
        source: OB.InputFull
    });
    const n = n => n ? {
        ...n,
        onDrop: a => {
            if (e >= t) {
                o.play();
            } else {
                n?.onDrop?.(a);
            }
        }
    } : undefined;
    return {
        wrapDndProps: n
    };
};

var iIe = "sas_components-TiledLayout-TiledLayout_tiled-layout";

var lIe = "sas_components-TiledLayout-TiledLayout_tiles-container";

var cIe = "sas_components-TiledLayout-TiledLayout_content";

var dIe = "sas_components-TiledLayout-TiledLayout_toolbar";

var uIe = "sas_components-TiledLayout-TiledLayout_variable-width";

var mIe = "sas_components-TiledLayout-TiledLayout_row-container";

var pIe = {
    tiledLayout: iIe,
    tilesContainer: lIe,
    content: cIe,
    toolbar: dIe,
    variableWidth: uIe,
    rowContainer: mIe
};

var fIe = "sas_components-PresentationTile-PresentationTile_tile";

var gIe = {
    tile: fIe
};

const hIe = fb(to);

const bIe = e => t("div", {
    "data-index": e.index,
    className: ke("tileWrapper", e.disableVariableWidth ? undefined : pIe.variableWidth),
    onMouseDown: t => {
        e.setFocusedIndex(e.index);
    }
}, e.renderTile(e.index) ?? t("div", {
    style: {
        height: e.tileHeight
    }
}));

const vIe = () => t("div", {
    className: pIe.variableWidth
});

const yIe = e => {
    const o = e.virtualRow.index;
    const n = e.virtualRow.start;
    const a = e.virtualRow.measureRef;
    const r = [];
    const s = o * e.tilesPerRow;
    for (let o = s; o < s + e.tilesPerRow; o++) {
        if (o >= e.length) {
            if (!e.disableVariableWidth) {
                r.push(t(vIe, {
                    key: `placeholderTile-${o}`
                }));
            }
        } else {
            r.push(t(bIe, {
                index: o,
                key: `tileWrapper-${o}`,
                renderTile: e.renderTile,
                tileHeight: e.tileHeight,
                setFocusedIndex: e.setFocusedIndex,
                disableVariableWidth: e.disableVariableWidth
            }));
        }
    }
    return t("div", {
        style: {
            position: "absolute",
            top: 0,
            left: 0,
            transform: `translateY(${n}px)`,
            width: "100%"
        },
        role: "row",
        "aria-rowindex": o + 1,
        ref: a ?? undefined,
        className: pIe.rowContainer
    }, r);
};

const xIe = u((function e({length: i, renderTile: l, tileClassname: d = xEe.tile, width: u, height: m, tilesContainerRef: p, testId: f, disableInteractiveMode: h = false, selectionMode: b = "none", selectedTiles: v, getTileKey: y, onTileSelect: x, zeroStateText: S, ariaLabel: w, disableVariableWidth: C, apiRef: E}, I) {
    const _ = hIe();
    const D = c(null);
    const {refs: L, createSetRef: T} = uU();
    const R = c(null);
    const k = c({
        start: 0,
        end: 0
    });
    const [A, M] = n(0);
    const N = L[A];
    const O = !!N;
    const P = R.current?.clientWidth ? R.current?.clientWidth : 600;
    const B = 120;
    const z = N?.closest(".tileWrapper");
    const F = r((() => !!R.current?.clientWidth), [ O ]);
    const [j, V] = r((() => {
        const e = z?.offsetWidth ?? B;
        const t = z?.offsetHeight ?? B;
        return [ e, t ];
    }), [ F ]);
    const H = Math.max(Math.floor(P / j), 1);
    const U = Math.ceil(i / H);
    const G = c(true);
    const K = ay();
    const W = c(null);
    const $ = s((e => {
        if (e === undefined) return false;
        if (b === "none" || !v) return false;
        const t = y?.(e);
        if (!t) return false;
        if (b === "single") {
            const [e] = v;
            return e === t;
        }
        return v.has(t);
    }), [ b, v, y ]);
    const Y = hj({
        size: U,
        parentRef: R,
        estimateSize: s((() => V), [ V ]),
        rangeExtractor: s((e => {
            k.current = e;
            return gj(e);
        }), [])
    });
    const q = k.current.end - k.current.start;
    const X = q === 0 ? 10 : q;
    const Z = {
        scrollToIndex: (e, t) => {
            const o = Math.floor(e / H);
            Y.scrollToIndex(o, t);
        },
        setFocusedIndex: e => {
            G.current = false;
            M(e);
        },
        createTileRef: e => {
            const t = T(e);
            return t;
        }
    };
    g(E, (() => Z));
    a((() => {
        if (A >= i) M(0);
        if (!G.current) {
            if (i === 0) W.current?.focus(); else L[A]?.focus();
        }
    }), [ L, N, A, Y.virtualItems, i ]);
    const J = e => {
        const t = !e.relatedTarget?.classList.contains(d) && !e.relatedTarget?.classList.contains(gIe.tile);
        if (t) {
            const e = Math.floor(A / H);
            Y.scrollToIndex(e);
            L[A]?.focus();
        } else {
            G.current = true;
        }
    };
    const Q = e => {
        const t = !e.relatedTarget?.classList.contains(d) && !e.relatedTarget?.classList.contains(gIe.tile);
        if (t) {
            const e = Math.floor(A / H);
            Y.scrollToIndex(e);
            L[A]?.focus();
        } else {
            G.current = true;
        }
    };
    const ee = c(null);
    const te = c(null);
    const oe = gb(f, "topBumper");
    const ne = gb(f, "bottomBumper");
    const ae = wIe({
        length: i,
        rowsPerPage: X,
        scrollToIndex: Y.scrollToIndex,
        currentTileIndex: A,
        tilesPerRow: H,
        setFocusedIndex: M,
        onTileSelect: x,
        ignoreFocus: G,
        topBumperRef: te,
        bottomBumperRef: ee,
        rangeRef: k,
        isRTL: K,
        tileClassname: d
    });
    const re = b !== "multiple";
    const se = e => {
        x?.(e);
    };
    const {calculatedAriaLabel: ie} = SIe(_, {
        selectionMode: b,
        ariaLabel: w,
        disableInteractiveMode: h
    });
    return t(REe, {
        value: {
            hideCheckbox: re,
            disableInteractiveMode: h,
            isGridCell: true,
            selectionMode: b === "multiple" ? "multi" : b,
            onSelect: se,
            isSelected: $,
            createTileRef: T
        }
    }, t("div", {
        "data-testid": f,
        ref: I,
        className: pIe.tiledLayout,
        style: {
            width: u ?? "100%",
            height: m ?? "100%"
        }
    }, i > 0 ? t(o, null, t("div", {
        ref: te,
        tabIndex: 0,
        onFocus: Q,
        "data-testid": oe
    }), t("div", {
        className: pIe.content,
        role: "grid",
        ref: R,
        "aria-rowcount": U,
        "aria-label": ie,
        "aria-multiselectable": b === "multiple" || b === "desktop" ? "true" : undefined
    }, t("div", {
        ref: p ?? D,
        className: pIe.tilesContainer,
        onKeyDown: ae,
        onMouseDown: () => G.current = true,
        style: {
            height: Y.totalSize,
            width: "100%",
            position: "relative"
        }
    }, Y.virtualItems.map((e => t(yIe, {
        length: i,
        key: `row-${e.index}`,
        virtualRow: e,
        tilesPerRow: H,
        tileHeight: V,
        renderTile: l,
        setFocusedIndex: M,
        disableVariableWidth: C
    }))))), t("div", {
        ref: ee,
        tabIndex: 0,
        onFocus: J,
        "data-testid": ne
    })) : t(g2, {
        ref: W,
        className: pIe.content,
        text: S ?? _("noItems.msg"),
        style: {
            height: "100%"
        }
    })));
}));

const SIe = (e, {selectionMode: t = "multiple", ariaLabel: o, disableInteractiveMode: n}) => {
    const a = [];
    a.push(o ?? e("tiledItems.aria"));
    if (t === "single") {
        a.push(e("selectionMode.single.aria"));
    } else if (t === "multiple" || t === "desktop") {
        a.push(e("selectionMode.multi.aria"));
    }
    if (!n) {
        a.push(e("interactiveMode.hint.aria"));
    }
    return {
        calculatedAriaLabel: a.join(", ")
    };
};

const wIe = ({length: e, rowsPerPage: t, scrollToIndex: o, currentTileIndex: n, tilesPerRow: a, setFocusedIndex: r, onTileSelect: i, ignoreFocus: l, topBumperRef: c, bottomBumperRef: d, rangeRef: u, isRTL: m, tileClassname: p}) => s((s => {
    if (!document.activeElement?.classList.contains(p) && !document.activeElement?.classList.contains(gIe.tile)) return;
    l.current = false;
    const f = e => {
        i?.({
            selectionArea: "tile",
            index: e,
            altKey: s.altKey,
            ctlKey: s.ctrlKey,
            metaKey: s.metaKey,
            shiftKey: s.shiftKey
        });
    };
    if (e <= 0) {
        return;
    }
    const g = e - 1;
    const h = Math.ceil(e / a) - 1;
    let b;
    let v;
    const y = Math.floor(n / a);
    const x = u?.current?.end ?? Math.floor(e / a);
    const S = u?.current?.start ?? 0;
    let w = 0;
    switch (s.key) {
      case "Tab":
        if (!s.shiftKey) {
            d.current?.focus({
                preventScroll: true
            });
        } else {
            c.current?.focus();
        }
        break;

      case m ? "ArrowRight" : "ArrowLeft":
        if (n > 0) {
            b = n - 1;
            v = Math.floor(b / a);
            if (v < S) {
                o(v);
            }
            r?.(b);
            if (s.shiftKey) f(b);
        }
        s.preventDefault();
        break;

      case m ? "ArrowLeft" : "ArrowRight":
        if (n < e - 1) {
            b = n + 1;
            v = Math.floor(b / a);
            if (v > x) {
                o(v, {
                    align: "end"
                });
            }
            r?.(b);
            if (s.shiftKey) f(b);
        }
        s.preventDefault();
        break;

      case "ArrowDown":
        b = n + a < e ? n + a : e - 1;
        o(Math.floor(b / a), {
            align: "end"
        });
        r?.(b);
        if (s.shiftKey) {
            f(b);
        }
        s.preventDefault();
        break;

      case "ArrowUp":
        b = n - a > 0 ? n - a : 0;
        o(Math.floor(b / a));
        r?.(b);
        if (s.shiftKey) {
            f(b);
        }
        s.preventDefault();
        break;

      case "PageDown":
        {
            if (n === g || y >= h) return;
            v = Math.min(x, y + t);
            if (y === x) v = y + t; else v = x;
            w = v - y;
            b = Math.min(n + w * a, g);
            o(Math.floor(b / a), {
                align: "end"
            });
            r?.(b);
            s.preventDefault();
            break;
        }

      case "PageUp":
        if (n === 0 || y === 0) return;
        v = Math.max(S, y - t);
        if (y === S) v = y - t; else v = S;
        w = y - v;
        b = Math.max(n - w * a, 0);
        o(Math.floor(b / a));
        r?.(b);
        s.preventDefault();
        break;

      case "End":
        if (s.ctrlKey) {
            o(h);
            r?.(g);
            break;
        }
        b = y * a + a - 1;
        r?.(b);
        s.preventDefault();
        break;

      case "Home":
        if (s.ctrlKey) {
            o(0);
            r?.(0);
            break;
        }
        b = y * a;
        r?.(b);
        s.preventDefault();
        break;
    }
}), [ e, r, n, o, t, l, c, d, m, i, u, a, p ]);

fb(to);

const CIe = new Map([ [ "high-contrast", "sas_hcb" ], [ "dark", "sas_ignite" ], [ "light", "sas_corporate" ] ]);

function EIe(e) {
    const t = CIe.get(e) ?? "sas_corporate";
    if (t !== Rs()) {
        Ts(t);
    }
}

window.sas = window.sas || {};

window.sas.ltjs = window.sas.ltjs || {};

window.sas.ltjs.nextVisualizationId = window.sas.ltjs.nextVisualizationId || 0;

function IIe() {
    return `visualization_id_${window.sas.ltjs.nextVisualizationId++}`;
}

const _Ie = u((function e({syncAppTheme: o = true, applyAppTheme: r = true, ...s}, i) {
    const [l] = n(IIe);
    const d = c();
    a((() => {
        const e = new lm;
        d.current = e;
        return () => {
            e.destroy();
            d.current = undefined;
        };
    }), []);
    a((() => {
        if (d.current) {
            d.current.setModel(s.model, {
                applyAppTheme: r
            });
            d.current.setContainerId(l);
            d.current.setTooltipsEnabled(!s.disableTooltips);
        }
    }), [ l, s.model, s.disableTooltips, r ]);
    const u = S_();
    a((() => {
        if (o) {
            EIe(u.baseThemeName);
        }
    }), [ u.baseThemeName, o ]);
    g(i, (() => ({
        getPickResults: (e, t, o, n) => d.current.getPickResults(e, t, o, n),
        id: l,
        _getVisualizationManager: () => d.current
    })), [ l ]);
    return t("div", {
        tabIndex: 0,
        id: l,
        style: s.style,
        className: s.className
    });
}));

function DIe(e) {
    const [t, o] = n();
    const r = c(t);
    const i = c(e);
    const l = s((e => {
        const t = r.current;
        if (t !== undefined) {
            i.current.release(t);
        }
        if (e !== undefined) {
            i.current.retain(e);
        }
        r.current = e;
        o(r.current);
    }), []);
    a((() => {
        var e, t;
        l((t = (e = i.current).createInitialValue) === null || t === void 0 ? void 0 : t.call(e));
        return () => {
            l(undefined);
        };
    }), [ l ]);
    return [ t, l ];
}

var LIe = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsResults_formContainer";

var TIe = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsResults_formScrollContainer";

var RIe = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsResults_formField";

var kIe = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsResults_formTile";

var AIe = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsResults_formGraph";

var MIe = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsResults_formGraphRelative";

var NIe = {
    formContainer: LIe,
    formScrollContainer: TIe,
    formField: RIe,
    formTile: kIe,
    formGraph: AIe,
    formGraphRelative: MIe
};

const OIe = (e, t, o, n, a) => {
    const r = new rfe;
    const s = t !== undefined && t !== null;
    const i = new tfe;
    i.setCategory(new ap("category"));
    i.setResponse(new ep("response"));
    i.setKey(Qpe.RESPONSEVALUE);
    i.setTip(s ? [ i.getResponse() ] : []);
    i.setSpaceFill(true);
    const l = Zpe.createSTANDARD();
    l === null || l === void 0 ? void 0 : l.setCategorylabel(false);
    l === null || l === void 0 ? void 0 : l.setResponselabel(!s);
    l === null || l === void 0 ? void 0 : l.setResponsevalue(s);
    i.setDisplay(l);
    r.setRegion(i);
    const c = new lp;
    c.setStyle(n !== null && n !== void 0 ? n : null);
    c.setLayout(r);
    c.setSelectionMode(ip.NONE);
    c.setPad(new Qm(0));
    c.setLayout(r);
    const d = new Zl;
    d.setDataType(Xl.STRING);
    d.setName("category");
    d.setStrings([ s ? e : a || "" ]);
    const u = new Zl;
    u.setDataType(Xl.NUMBER);
    u.setName("response");
    u.setNumbers([ s ? t : NaN ]);
    u.setLabel(e);
    if (o) {
        u.setFormatName(o);
    }
    const m = new Jl([ d, u ], true, true);
    c.setDataProvider(new qpe(m));
    return c;
};

const PIe = (e, t, o, n, a) => {
    const r = new lp;
    r.setStyle(a !== null && a !== void 0 ? a : null);
    r.setSelectionMode(ip.NONE);
    r.setPad(new Qm(5));
    r.setBorder(false);
    const s = new np;
    const i = new $pe;
    const l = new ap(e);
    const c = new ep("response");
    i.setResponse([ c ]);
    i.setCategory(l);
    i.setOrientation(Kpe.HORIZONTAL);
    i.setTip([]);
    i.setBarLabel(false);
    i.setSegmentLabel(true);
    const d = s.getXAxisOptions();
    d === null || d === void 0 ? void 0 : d.setGridDisplay(op.OFF);
    d === null || d === void 0 ? void 0 : d.setDisplay(tp.createNONE());
    const u = tp.createSTANDARD();
    u === null || u === void 0 ? void 0 : u.setLabel(true);
    u === null || u === void 0 ? void 0 : u.setLine(false);
    const m = s.getYAxisOptions();
    m === null || m === void 0 ? void 0 : m.setGridDisplay(op.OFF);
    m === null || m === void 0 ? void 0 : m.setDisplay(u);
    const p = new sp;
    p.setVisible(rp.OFF);
    r.setLayoutGlobalLegend(p);
    s.setOverlays([ i ]);
    r.setLayout(s);
    const f = new Jl(true, true);
    const g = new Zl;
    const h = new Zl;
    g.setName(e);
    g.setStrings(t);
    g.setDataType(Xl.STRING);
    f.addColumn(g);
    h.setName("response");
    h.setNumbers(o);
    h.setDataType(Xl.NUMBER);
    if (!!(n === null || n === void 0 ? void 0 : n.length) && n[0]) {
        h.setFormatName(n[0]);
    }
    f.addColumn(h);
    i.setDataProvider(new qpe(f));
    return r;
};

const BIe = t => {
    var o;
    const [n, r] = Q1();
    const s = $be();
    const [i = [], l] = DIe({
        retain: e => e.forEach((({graph: e}) => e.retain())),
        release: e => e.forEach((({graph: e}) => e.release()))
    });
    a((() => {
        var e, o;
        const n = ((e = t.area.demographics) === null || e === void 0 ? void 0 : e.data) || {};
        const a = Object.keys(n).length === 0 ? [ "" ] : Object.keys(n);
        const r = new Us(ns.NONE);
        r.addAttributeBundlesDefinedInCSSString((o = t.visualizationStyle) !== null && o !== void 0 ? o : null);
        const i = a.map((e => {
            const t = n[e];
            return {
                measure: e,
                graph: !t || t.length === 1 ? OIe((t === null || t === void 0 ? void 0 : t[0].category) || e, t === null || t === void 0 ? void 0 : t[0].value, t === null || t === void 0 ? void 0 : t[0].format, r, s({
                    key: "DemographicsResultsDialog.noData.txt"
                })) : PIe(e || "", t.map((e => e.category)).reverse(), t.map((e => e.value)).reverse(), t.map((e => e.format)).reverse(), r)
            };
        }));
        l(i);
    }), [ (o = t.area.demographics) === null || o === void 0 ? void 0 : o.data, t.demographicCategories, l, s, t.visualizationStyle ]);
    const c = 50;
    return i.length > 0 ? e.createElement(iN, {
        spacing: "s",
        orientation: "vertical",
        className: ke(NIe.formContainer, t.className),
        ref: n
    }, (t.type === "carousel" || i.length === 1) && r && e.createElement(tIe, {
        className: NIe.formField,
        disableInteractiveMode: true,
        showPageIndicator: true,
        useAddZeroStateMsg: true,
        pageIndicatorLocation: "below",
        selectionMode: "none",
        tiles: i.map((o => ({
            key: o.measure,
            className: NIe.formTile,
            style: {
                height: r.height - c - (i.length > 0 ? 20 : 0),
                width: r.width - (2 * 32 + 2 * 8 + 2 * 8)
            },
            thumbnail: e.createElement(_Ie, {
                applyAppTheme: !t.visualizationStyle,
                syncAppTheme: false,
                model: o.graph,
                style: {
                    height: r.height - c - (i.length > 0 ? 20 : 0)
                },
                className: NIe.formGraph
            })
        })))
    }), t.type === "list" && i.length > 1 && r && e.createElement(iN, {
        spacing: "s",
        orientation: "vertical",
        className: NIe.formScrollContainer,
        style: {
            height: r.height - c
        }
    }, i.map(((o, n) => e.createElement("div", {
        key: `viz${n}`,
        className: NIe.formTile
    }, e.createElement(_Ie, {
        applyAppTheme: !t.visualizationStyle,
        syncAppTheme: false,
        model: o.graph,
        style: {
            height: r.height - c
        },
        className: ke(NIe.formGraph, NIe.formGraphRelative)
    }))))), t.type === "tiles" && i.length > 1 && r && e.createElement(xIe, {
        length: i.length,
        height: r.height - c,
        renderTile: o => e.createElement(MEe, {
            index: o,
            hideCheckbox: true,
            body: e.createElement(_Ie, {
                applyAppTheme: !t.visualizationStyle,
                syncAppTheme: false,
                model: i[o].graph,
                style: {
                    width: `${Math.abs(r.width / 2) - 16 * 4}px`,
                    height: `${Math.max(Math.abs(r.height / 2), 100)}px`
                }
            })
        })
    })) : null;
};

const zIe = yo(((e, t) => {
    var o;
    const {features: n, demographicCategories: a, visualizationStyle: r} = (o = Xfe(e, t.id)) !== null && o !== void 0 ? o : {};
    const s = n === null || n === void 0 ? void 0 : n.find(((e, o) => e.type === "area" && o === t.featureIndex));
    if (!s) {
        throw new Error("Area not found");
    }
    return {
        area: s,
        demographicCategories: a,
        visualizationStyle: r
    };
}), (e => ({
    actions: bo(npe.actions, e)
})))(BIe);

var FIe = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsResultsDialog_demographicsDialog";

var jIe = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsResultsDialog_formContainer";

var VIe = {
    demographicsDialog: FIe,
    formContainer: jIe
};

const HIe = t => {
    const o = $be();
    const a = C_();
    const [r, s] = n(0);
    const i = I_({
        "spacing-m": a.spacing.core.m
    }, "demographics");
    const l = ywe();
    return e.createElement(zF, {
        className: VIe.demographicsDialog,
        style: Object.assign(Object.assign({}, i), {
            minHeight: "20rem",
            minWidth: "30rem"
        }),
        isOpen: t.isOpen,
        title: o({
            key: "DemographicsResultsDialog.title.txt"
        }),
        firstAction: {
            text: o({
                key: "DemographicsResultsDialog.edit.txt"
            }),
            onPress: () => {
                t.onCloseDialog("edit");
            }
        },
        dismissAction: {
            text: o({
                key: "DemographicsResultsDialog.close.txt"
            }),
            onPress: () => {
                t.onCloseDialog("cancel");
            }
        },
        resizable: true,
        busyStateIndicatorProps: {
            animationTokens: l,
            active: t.geoEnrichmentResults === undefined,
            delay: 0,
            overlayStyle: {
                zIndex: 1
            }
        }
    }, e.createElement(iN, {
        spacing: "s",
        orientation: "vertical",
        className: VIe.formContainer
    }, Object.keys(t.geoEnrichmentResults || {}).length > 1 ? e.createElement(H1, {
        orientation: "horizontal",
        values: [ {
            icon: oT,
            tooltip: o({
                key: "DemographicsResultsDialog.layout.page.txt"
            })
        }, {
            icon: ok,
            tooltip: o({
                key: "DemographicsResultsDialog.layout.list.txt"
            })
        }, {
            icon: Lk,
            tooltip: o({
                key: "DemographicsResultsDialog.layout.tile.txt"
            })
        } ],
        selectedIndex: r,
        onSelectedIndex: s
    }) : null, e.createElement(zIe, {
        id: t.id,
        featureIndex: t.featureIndex,
        type: r === 0 ? "carousel" : r === 1 ? "list" : "tiles"
    })));
};

const UIe = yo(((e, t) => {
    var o, n;
    const {features: a} = (o = Xfe(e, t.id)) !== null && o !== void 0 ? o : {};
    const r = a === null || a === void 0 ? void 0 : a.find(((e, o) => e.type === "area" && o === t.featureIndex));
    if (!r) {
        throw new Error(`${t.featureIndex} is not a valid feature index`);
    } else {
        return {
            geoEnrichmentResults: (n = r.demographics) === null || n === void 0 ? void 0 : n.data
        };
    }
}), (e => ({
    actions: bo(npe.actions, e)
})))(HIe);

var GIe = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsSelectorDialog_demographicsDialog";

var KIe = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsSelectorDialog_formContainer";

var WIe = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsSelectorDialog_formField";

var $Ie = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsSelectorDialog_formTree";

var YIe = "sas_components-ObjectSearch-panels-GeographicAreaPanel-DemographicsSelectorDialog_formHeader";

var qIe = {
    demographicsDialog: GIe,
    formContainer: KIe,
    formField: WIe,
    formTree: $Ie,
    formHeader: YIe
};

const XIe = e => {
    switch (e) {
      case "usergroup":
        return Ek;

      case "income":
        return fT;

      case "age":
        return hT;

      case "households":
        return oR;

      case "housing":
        return tR;

      case "health":
        return ER;

      case "education":
        return RT;

      case "business":
        return tT;

      case "race":
        return Ik;

      case "spending":
        return pT;

      case "behaviors":
        return KL;

      case "jobs":
        return kT;

      case "poverty":
        return HR;

      case "maritalstatus":
        return uT;

      case "tapestry":
        return SR;

      case "atrisk":
        return xL;

      case "keyfacts":
        return gT;

      case "supplyanddemand":
        return hR;

      case "policy":
        return KT;

      case "landscape":
        return nR;

      case "population":
        return Ek;

      case "crime":
        return VR;
    }
    return undefined;
};

const ZIe = (e, t) => e.toLowerCase().includes(t.toLowerCase());

const JIe = (e, t) => {
    const o = t.findIndex((t => t.subNodes.map((e => e.id)).includes(e)));
    return o !== -1 ? t[o] : null;
};

const QIe = (e, t) => {
    const o = t.findIndex((t => t.key === e));
    const n = t[o];
    if (!n || !n.node.hasChildren) return [];
    const a = [];
    let r = n.node.level + 1;
    for (let e = o + 1; e < t.length; e++) {
        const {level: o, hasChildren: n} = t[e].node;
        if (o === r) a.push(t[e]);
        if (n) r++;
    }
    return a;
};

const e_e = (e, t) => QIe(e, t).map((e => e.key));

const t_e = (e, t, o) => {
    const n = [];
    let a = 0;
    for (let r = 0; r < t.length; r++) {
        const s = t[r];
        const {hasChildren: i} = s.node;
        let l = ZIe(s.node.text, o);
        if (!l && i) {
            let e = r + 1;
            const n = t.length;
            let a = e < n ? t[e] : null;
            while (!l && a && e <= n && !a.node.hasChildren) {
                l = ZIe(a.node.text, o);
                e++;
                a = e < n ? t[e] : null;
            }
        }
        if (l) {
            const o = s.subNodes.some((t => e.has(t.id)));
            n[a] = Object.assign({}, s);
            a++;
            if (!o && i) {
                const e = e_e(s.key, t);
                r += e.length;
            }
        }
    }
    return n;
};

const o_e = t => {
    var o;
    const i = $be();
    const l = C_();
    const d = r((() => {
        var e;
        return (e = t.features) === null || e === void 0 ? void 0 : e.find(((e, o) => e.type === "area" && o === t.featureIndex));
    }), [ t.features, t.featureIndex ]);
    const [u, m] = n(false);
    const [p, f] = n(false);
    const [g, h] = n(0);
    const [b, v] = n("");
    const [y, x] = Q1();
    const [S, w] = n(((o = d === null || d === void 0 ? void 0 : d.demographics) === null || o === void 0 ? void 0 : o.selectedMeasures) || []);
    const C = i3(new Set([]));
    const {onExpand: E, setSelectRows: I, setExpandedNodes: _} = C;
    const D = c(null);
    const [L, T] = n([]);
    const [R, k] = n([]);
    const [A, M] = n([]);
    const [N, O] = n(L.length);
    const [P, B] = n((() => t_e(C.expandedNodes, L, b)));
    const z = [ {
        key: "node",
        label: ""
    }, {
        key: "info",
        label: "",
        width: 32
    } ];
    const F = s((e => {
        const o = [];
        const n = [];
        const a = new Map;
        if (t.demographicCategories) {
            const e = {};
            let r = true;
            let s = 0;
            const l = (t, o, i) => {
                var c, d;
                n.push(Object.assign(Object.assign({
                    id: `c${s++}`,
                    text: t.label
                }, r && {
                    expanded: true
                }), {
                    hasChildren: true,
                    level: i,
                    icon: Object.assign(Object.assign({}, XIe(t.name) || OT), {
                        tooltipKey: undefined
                    }),
                    infoText: t.description
                }));
                (c = t.variables) === null || c === void 0 ? void 0 : c.forEach((t => {
                    var o;
                    if (r) {
                        r = false;
                    }
                    const s = {
                        id: t.name,
                        text: t.label,
                        icon: t.type === "decimal" ? CR : nT,
                        level: i + 1,
                        infoText: t.description,
                        isBasicCategory: t.basicCategory !== undefined
                    };
                    S.includes(t.name) ? a.set(t.name, s) : n.push(s);
                    if (t.basicCategory) {
                        if (!e[t.basicCategory]) {
                            e[t.basicCategory] = {};
                        }
                        if (t.subGroup) {
                            const n = ((o = e[t.basicCategory][t.subGroup]) === null || o === void 0 ? void 0 : o.subNodes) || [];
                            if (!n.map((e => e.id)).includes(t.name)) {
                                n.push({
                                    id: t.name,
                                    text: t.label
                                });
                            }
                            e[t.basicCategory][t.subGroup] = {
                                node: {
                                    id: t.subGroup,
                                    text: t.subGroup,
                                    hasChildren: false,
                                    icon: t.type === "decimal" ? CR : nT,
                                    level: 1
                                },
                                subNodes: n,
                                key: `row-${t.subGroup}`,
                                data: []
                            };
                        } else {
                            e[t.basicCategory][t.name] = {
                                node: {
                                    id: t.name,
                                    text: t.label,
                                    hasChildren: false,
                                    icon: t.type === "decimal" ? CR : nT,
                                    level: 1,
                                    description: t.description
                                },
                                subNodes: [ {
                                    id: t.name,
                                    text: t.label
                                } ],
                                key: `row-${t.name}`,
                                data: [ t.description ]
                            };
                        }
                    }
                }));
                (d = t.categories) === null || d === void 0 ? void 0 : d.forEach(((e, t) => l(e, o === 0 ? t : -1, i + 1)));
            };
            t.demographicCategories.forEach(((e, t) => l(e, t, 0)));
            Object.keys(e).forEach((t => {
                o.push({
                    node: {
                        id: t,
                        text: i({
                            key: `DemographicsSelectorDialog.category.${t}.txt`
                        }),
                        icon: XIe(t),
                        hasChildren: true,
                        level: 0
                    },
                    subNodes: [ {
                        id: t,
                        text: ""
                    } ],
                    key: `row-${t}`,
                    data: [ "" ]
                });
                o.push(...Object.values(e[t]));
            }));
        }
        T(o);
        const r = o.filter((e => e.subNodes.some((e => S.includes(e.id))))).map((e => e.key));
        if (e) {
            const e = new Set;
            o.forEach((t => {
                if (t.node.hasChildren && e_e(t.key, o).some((e => r.includes(e)))) {
                    e.add(t.node.id);
                }
            }));
            _(e);
        }
        I({
            selectedRows: new Set(r)
        });
        k(n);
        M(Array.from(a.values()).sort(((e, t) => S.indexOf(e.id) > S.indexOf(t.id) ? 1 : -1)));
        f(false);
    }), [ t.demographicCategories, i, S, _, I ]);
    a((() => {
        let e = false;
        if (S.length > 0) {
            e = true;
        }
        m(e);
    }), [ S ]);
    const j = c(true);
    a((() => {
        if (j.current && t.demographicCategories) {
            F(true);
            j.current = false;
        }
    }), [ F, t.demographicCategories ]);
    a((() => {
        const e = t_e(C.expandedNodes, L, b);
        B(e);
        O(e.length);
    }), [ C.expandedNodes, L, b ]);
    const V = I_({
        "spacing-m": l.spacing.core.m
    }, "demographics");
    const H = I_({
        "table-scroll-bar-space": "-.25rem",
        "tree-hover-bg": "transparent"
    });
    const U = ywe();
    return e.createElement(zF, {
        className: qIe.demographicsDialog,
        style: Object.assign(Object.assign({}, V), {
            minHeight: "20rem",
            minWidth: "30rem"
        }),
        isOpen: t.isOpen,
        title: i({
            key: "DemographicsSelectorDialog.title.txt"
        }),
        firstAction: {
            text: i({
                key: "DemographicsSelectorDialog.ok.txt"
            }),
            disabled: !u,
            isDefault: true,
            onPress: () => {
                t.actions.setSelectedDemographicMeasures(t.id, {
                    index: t.featureIndex,
                    selectedMeasures: Array.from(S).filter((e => {
                        var t;
                        return !((t = JIe(e, L)) === null || t === void 0 ? void 0 : t.node.hasChildren);
                    }))
                });
                t.closeDialog("ok");
            }
        },
        dismissAction: {
            text: i({
                key: "DemographicsSelectorDialog.cancel.txt"
            }),
            onPress: () => {
                t.closeDialog("cancel");
            }
        },
        resizable: true
    }, e.createElement(iN, {
        spacing: "s",
        orientation: "vertical",
        className: qIe.formContainer,
        ref: y
    }, e.createElement(ene, {
        visualStyle: "standard",
        selectedIndex: g,
        onItemSelected: ({index: e}) => {
            h(e);
            F();
        },
        items: [ {
            label: i({
                key: "DemographicsSelectorDialog.tab.basic.txt"
            }),
            altId: "one"
        }, {
            label: i({
                key: "DemographicsSelectorDialog.tab.advanced.txt"
            }),
            altId: "two"
        }, {
            label: i({
                key: "DemographicsSelectorDialog.tab.recent.txt"
            }),
            altId: "three"
        } ]
    }), e.createElement(DN, {
        animationTokens: U,
        active: p,
        fillParentContainer: true,
        buttonText: i({
            key: "DemographicsSelectorDialog.cancel.txt"
        }),
        onButtonPress: () => f(false)
    }, e.createElement(iN, {
        spacing: "s",
        orientation: "vertical"
    }, e.createElement(LP, {
        className: qIe.formHeader
    }, i({
        key: "DemographicsSelectorDialog.categories.txt"
    })), (g === 0 || g === 2) && e.createElement(pQ, {
        className: qIe.formField,
        filterMode: true,
        value: b,
        onChange: e => v(e.value),
        numberOfResults: b ? N : null
    }), e.createElement("div", {
        className: ke(qIe.formField, qIe.formTree)
    }, x && g === 0 && e.createElement(r3, Object.assign({
        style: H,
        rowCount: N,
        columns: z,
        treeTableAPIRef: D,
        expandToFillWidth: true,
        height: x.height - 120,
        columnHeadersVisible: false,
        cellBordersVisible: false,
        selectionMode: "parentChild",
        renderCellData: ({rowIndex: t, columnKey: o, disabled: n}) => {
            const a = z === null || z === void 0 ? void 0 : z.findIndex((e => e.key === o));
            const r = P.length > t ? P[t].data[a - 1] : "";
            return o === "info" && (r === null || r === void 0 ? void 0 : r.length) > 0 ? e.createElement(MM, {
                icon: sR,
                tooltip: r,
                onClick: e => {
                    e.preventDefault();
                    e.stopPropagation();
                },
                disabled: n
            }) : e.createElement(jP, {
                wrapText: false,
                disabled: n
            }, r);
        },
        getDataNode: e => P[e] ? P[e].node : undefined,
        getRowKey: e => {
            if (e >= P.length || e < 0) return "";
            return P[e].key;
        },
        getRowIndex: e => P.findIndex((t => t.key === e)),
        getChildNodesRowKey: e => e_e(e, L),
        rowHeight: () => 28,
        onSelect: e => {
            const t = new Set;
            if (e) {
                e.forEach((e => {
                    const o = L.findIndex((t => t.key === e));
                    if (o >= 0) {
                        const n = L[o];
                        if (n.node.hasChildren) {
                            const o = QIe(e, L);
                            o.forEach((e => e.subNodes.map((e => e.id)).forEach(t.add, t)));
                        }
                        n.subNodes.map((e => e.id)).forEach(t.add, t);
                    }
                }));
            }
            w(S.filter((e => {
                const t = A.find((t => t.id === e));
                return t && !t.isBasicCategory;
            })).concat(Array.from(t)));
        },
        getParentsRowKey: e => {
            const t = P.findIndex((t => t.key === e));
            const o = [];
            const n = P[t];
            let a = (n === null || n === void 0 ? void 0 : n.node.level) - 1;
            for (let e = t; e >= 0; e--) {
                const {level: t} = P[e].node;
                if (t === a) {
                    o.push(P[e].key);
                    --a;
                }
            }
            return o;
        },
        areRowsVisible: e => {
            let t = true;
            for (const o of e) {
                const e = P.find((e => e.key === o));
                if (e === undefined) {
                    t = false;
                    break;
                }
            }
            return t;
        }
    }, C, {
        onExpand: (e, t) => {
            const o = new Set(C.expandedNodes);
            if (o.has(e.id) && !t) o.delete(e.id); else if (!o.has(e.id) && t) o.add(e.id);
            const n = t_e(o, L, b);
            B(n);
            E(e, t);
            O(n.length);
        }
    })), x && g === 1 && e.createElement(c6, {
        type: "tree",
        mode: "move",
        disableAddButton: S.length >= 100,
        style: Object.assign(Object.assign({}, H), {
            height: `${x.height - 120}px`
        }),
        dataFieldKeys: [ "text" ],
        hideAddAllButton: true,
        sourceAttribute: [ {
            hideSearch: false,
            data: R
        } ],
        targetAttribute: [ {
            data: A
        } ],
        onTargetChange: e => {
            queueMicrotask((() => w(e.map((e => e.id)))));
        }
    }), x && g === 2 && (() => {
        var t, o;
        const n = [];
        (o = (t = d === null || d === void 0 ? void 0 : d.demographics) === null || t === void 0 ? void 0 : t.recentMeasures) === null || o === void 0 ? void 0 : o.forEach((e => {
            const t = R.concat(A).find((t => t.id === e));
            if (!!t && (!b || ZIe(t.text, b))) {
                n.push(t);
            }
        }));
        return e.createElement(pee, {
            style: H,
            rowCount: n.length,
            width: x.width,
            height: x.height - 120,
            itemHeight: () => "single",
            selectionMode: "desktop",
            itemColumn: {
                key: "mainContent",
                item: t => {
                    var o;
                    return e.createElement(y9, {
                        title: (o = n[t]) === null || o === void 0 ? void 0 : o.text,
                        icon: {
                            icon: CR
                        }
                    });
                }
            },
            iconColumns: [ {
                key: "icon",
                cellIcon: e => n[e].infoText ? {
                    icon: sR,
                    tooltip: n[e].infoText
                } : null
            } ],
            onSelect: e => {
                if (!e) {
                    return;
                }
                const t = Array.from(e).map((e => n[parseInt(e)].id));
                w(t);
            }
        });
    })())))));
};

const n_e = yo(((e, t) => {
    var o;
    const {features: n, demographicCountries: a, demographicCategories: r} = (o = Xfe(e, t.id)) !== null && o !== void 0 ? o : {};
    return {
        features: n,
        demographicCountries: a,
        demographicCategories: r
    };
}), (e => ({
    actions: bo(npe.actions, e)
})))(o_e);

const a_e = t => {
    const {dialogOpenState: n, setDialogOpenState: r} = t;
    const s = k_(n.selectorDialogIsOpen);
    a((() => {
        var e;
        const o = (e = t.features) === null || e === void 0 ? void 0 : e[n.featureIndex];
        if ((o === null || o === void 0 ? void 0 : o.type) === "area" && o.country) {
            if (s !== n.selectorDialogIsOpen && n.selectorDialogIsOpen) {
                t.actions.setSelectedDemographicCountry(t.id, {
                    index: n.featureIndex,
                    country: o.country
                });
            }
        }
    }), [ t.id, t.features, n.featureIndex, n.selectorDialogIsOpen, t.actions, s ]);
    return e.createElement(o, null, t.canDoPremiumServices ? e.createElement(o, null, n.selectorDialogIsOpen ? e.createElement(n_e, {
        isOpen: n.selectorDialogIsOpen,
        closeDialog: e => {
            r((e => Object.assign(Object.assign({}, e), {
                selectorDialogIsOpen: false
            })));
            if (e === "ok") {
                r((e => Object.assign(Object.assign({}, e), {
                    resultsDialogIsOpen: true
                })));
            }
        },
        id: t.id,
        featureIndex: n.featureIndex
    }) : null, n.resultsDialogIsOpen ? e.createElement(UIe, {
        isOpen: n.resultsDialogIsOpen,
        onCloseDialog: e => {
            r((t => Object.assign(Object.assign({}, t), {
                resultsDialogIsOpen: e === "edit"
            })));
            if (e === "edit") {
                r((e => Object.assign(Object.assign({}, e), {
                    selectorDialogIsOpen: true
                })));
            }
        },
        id: t.id,
        featureIndex: n.featureIndex
    }) : null) : null);
};

const r_e = yo(((e, t) => {
    var o;
    const {features: n, canDoPremiumServices: a} = (o = Xfe(e, t.id)) !== null && o !== void 0 ? o : {};
    return {
        features: n,
        canDoPremiumServices: a
    };
}), (e => ({
    actions: bo(npe.actions, e)
})))(a_e);

const s_e = t => {
    const o = C_();
    return e.createElement(ise, {
        automaticColor: $we(o),
        selectedColor: {
            color: Ywe(o, t.feature).fg,
            type: t.feature.color === null ? "automatic" : "standard"
        },
        onColorChange: ({color: e, type: o}) => {
            t.onColorChange(o === "automatic" ? null : e);
        },
        hideNoColor: true
    });
};

var i_e = "sas_components-ObjectSearch-panels-GeographicAreaPanel-GeographicAreaPanel_formContainer";

var l_e = "sas_components-ObjectSearch-panels-GeographicAreaPanel-GeographicAreaPanel_formScrollContainer";

var c_e = "sas_components-ObjectSearch-panels-GeographicAreaPanel-GeographicAreaPanel_formContent";

var d_e = "sas_components-ObjectSearch-panels-GeographicAreaPanel-GeographicAreaPanel_formIconLarge";

var u_e = "sas_components-ObjectSearch-panels-GeographicAreaPanel-GeographicAreaPanel_formHeader";

var m_e = "sas_components-ObjectSearch-panels-GeographicAreaPanel-GeographicAreaPanel_formField";

var p_e = "sas_components-ObjectSearch-panels-GeographicAreaPanel-GeographicAreaPanel_formFieldCentered";

var f_e = "sas_components-ObjectSearch-panels-GeographicAreaPanel-GeographicAreaPanel_formWindowShadeSection";

var g_e = "sas_components-ObjectSearch-panels-GeographicAreaPanel-GeographicAreaPanel_formDemographicsReloadLabel";

var h_e = "sas_components-ObjectSearch-panels-GeographicAreaPanel-GeographicAreaPanel_footer";

var b_e = "sas_components-ObjectSearch-panels-GeographicAreaPanel-GeographicAreaPanel_footerButton";

var v_e = {
    formContainer: i_e,
    formScrollContainer: l_e,
    formContent: c_e,
    formIconLarge: d_e,
    formHeader: u_e,
    formField: m_e,
    formFieldCentered: p_e,
    formWindowShadeSection: f_e,
    formDemographicsReloadLabel: g_e,
    footer: h_e,
    footerButton: b_e
};

const y_e = MA("GeographicAreaPanel");

const x_e = t => {
    var s, i, l, d, u, m;
    const p = $be();
    const f = C_();
    const [g, b] = n([]);
    const v = t.area.maxBufferDistance || 99;
    const y = epe(t.area.latLon) && !t.area.isRendered && g.length === 0 && ((s = t.area.amount) === null || s === void 0 ? void 0 : s.every((e => e <= v)));
    const [x, S] = n({
        featureIndex: t.featureIndex,
        resultsDialogIsOpen: false,
        selectorDialogIsOpen: false
    });
    const [w, C] = n([ 0 ]);
    const E = y_e();
    const I = c(true);
    const _ = c(null);
    const D = t.area.mode === oi.DRIVING_TIME || t.area.mode === oi.TRUCKING_TIME || t.area.mode === oi.WALKING_TIME;
    const L = c(null);
    const T = c(null);
    Awe(L, T, (e => {
        t.actions.update(t.id, {
            minPanelHeight: e
        });
    }));
    const R = RH({
        isRequired: true,
        minLength: 1,
        initialValue: t.area.name
    });
    {
        const e = Sye(R.handleChange);
        a((() => {
            e.current({
                value: t.area.name
            });
        }), [ e, t.area.name ]);
    }
    Cye((() => {
        t.actions.update(t.id, {
            pinModeEnabled: false,
            locationCandidate: undefined,
            searchHints: []
        });
    }));
    const k = () => {
        const o = [];
        const n = (t.area.amount || [ 5 ]).filter(((e, t) => t === 0 || e <= v));
        const a = (e, o) => {
            const a = g.indexOf(e);
            if (o === null || o === undefined) {
                if (a === -1) {
                    b((t => [ ...t, e ]));
                }
                return;
            } else if (a !== -1) {
                const e = [ ...g ];
                e.splice(a, 1);
                b(e);
            }
            if (o === -1) {
                n.splice(e, 1);
            } else {
                n[e] = Math.min(o, v);
            }
            t.actions.notifyUpdateArea(t.id, {
                index: t.featureIndex,
                update: {
                    amount: n
                }
            });
        };
        n.forEach(((t, r) => {
            const s = r > 0 ? n[r - 1] + .001 : .001;
            const i = Math.min(r + 1 !== n.length ? n[r + 1] - .001 : v, v);
            const l = r + 1 === n.length && r < 2 && t < i;
            const c = r > 0;
            o.push(e.createElement(iN, {
                key: `${r}`,
                spacing: "xs",
                orientation: "horizontal",
                className: v_e.formField
            }, e.createElement(S_e, {
                minimum: s,
                maximum: i,
                distance: t,
                onCommit: e => a(r, e)
            }), c && e.createElement(QM, {
                icon: {
                    icon: ST
                },
                variant: oN.Icon,
                onPress: () => a(r, -1),
                tooltip: p({
                    key: "GeographicAreaPanel.distance.delete.txt"
                })
            }), l && e.createElement(QM, {
                icon: {
                    icon: hL
                },
                variant: oN.Icon,
                onPress: () => a(r + 1, t + 5),
                tooltip: p({
                    key: D ? "GeographicAreaPanel.time.add.txt" : "GeographicAreaPanel.distance.add.txt"
                })
            })));
        }));
        return o;
    };
    a((() => {
        var e;
        let o = undefined;
        if (t.linkingEnabled) {
            o = (e = t.features) === null || e === void 0 ? void 0 : e.find(((e, o) => e.type === "pin" && o === t.area.linkedPinIndex));
        }
        if (o && o.location !== t.area.location) {
            t.actions.notifyUpdatePin(t.id, {
                index: t.featureIndex,
                update: {
                    latLon: (o === null || o === void 0 ? void 0 : o.latLon) || t.area.latLon,
                    location: (o === null || o === void 0 ? void 0 : o.location) || t.area.location
                }
            });
        }
    }), [ t.area.linkedPinIndex, t.features, t.area.location, t.linkingEnabled, t.actions, t.area.latLon, t.featureIndex, t.id ]);
    const A = I_({
        "spacing-m": f.spacing.core.m,
        bg: f.backgrounds.panes.bg
    }, "geoArea");
    const M = r((() => {
        let e = [ {
            items: [ {
                text: p({
                    key: "GeographicAreaPanel.menu.clear.txt"
                })
            } ]
        } ];
        if (t.linkingEnabled) {
            e = e.concat([ {
                items: [ {
                    text: p({
                        key: "GeographicAreaPanel.menu.link.txt"
                    }),
                    checked: t.autoLinkToPins
                }, {
                    text: p({
                        key: "GeographicAreaPanel.menu.unlink.txt"
                    }),
                    disabled: !t.area.linkedPinIndex
                } ]
            } ]);
        }
        e = e.concat([ {
            items: [ {
                text: p({
                    key: "TravelTypeField.distanceTypes.distance.unit.txt"
                }),
                subSections: [ {
                    items: [ {
                        text: p({
                            key: "GeographicAreaPanel.distanceUnits.miles.txt"
                        }),
                        checked: t.area.unit === ai.MILE
                    }, {
                        text: p({
                            key: "GeographicAreaPanel.distanceUnits.kilometers.txt"
                        }),
                        checked: t.area.unit === ai.KILOMETER
                    } ]
                } ]
            }, {
                text: p({
                    key: "GeographicAreaPanel.menu.delete.txt"
                })
            } ]
        } ]);
        return e;
    }), [ t.linkingEnabled, t.autoLinkToPins, t.area.linkedPinIndex, t.area.unit, p ]);
    a((() => {
        var e;
        if (((e = t.area.location) === null || e === void 0 ? void 0 : e.length) === 0 && t.area.isRendered) {
            t.actions.notifyClearArea(t.id, {
                index: t.featureIndex
            });
        }
    }), [ t.area.location, t.actions, t.area.isRendered, t.id, t.featureIndex ]);
    return e.createElement("section", {
        className: v_e.formContainer,
        style: A,
        tabIndex: -1,
        "aria-labelledby": E
    }, e.createElement(zwe, {
        id: t.id,
        headingId: E,
        ref: L,
        type: "area",
        text: p({
            key: "GeographicAreaPanel.title.txt"
        }),
        onMenuItemSelected: e => {
            const o = e[0];
            if (o.length === 2) {
                switch (o[0]) {
                  case 0:
                    t.actions.notifyClearArea(t.id, {
                        index: t.featureIndex
                    });
                    break;

                  case 1:
                    switch (o[1]) {
                      case 0:
                        if (t.linkingEnabled) {
                            t.actions.toggleAutoLinkToPins(t.id);
                        } else {
                            t.actions.notifyUpdateArea(t.id, {
                                index: t.featureIndex,
                                update: {
                                    unit: e[1][1] === 0 ? ai.MILE : ai.KILOMETER
                                }
                            });
                        }
                        break;

                      case 1:
                        if (t.linkingEnabled) {
                            t.actions.notifyUpdateArea(t.id, {
                                index: t.featureIndex,
                                update: {
                                    linkedPinIndex: undefined
                                }
                            });
                        } else {
                            I.current = false;
                            t.actions.notifyDeletePins(t.id, [ t.featureIndex ]);
                        }
                        break;
                    }
                    break;

                  case 2:
                    t.actions.notifyUpdateArea(t.id, {
                        index: t.featureIndex,
                        update: {
                            unit: o[1] === 0 ? ai.MILE : ai.KILOMETER
                        }
                    });
                    break;

                  case 3:
                    I.current = false;
                    t.actions.notifyDeletePins(t.id, [ t.featureIndex ]);
                    break;
                }
            }
        },
        menuSections: M
    }), e.createElement("div", {
        className: v_e.formScrollContainer
    }, e.createElement(iN, {
        className: v_e.formContent,
        orientation: "vertical",
        spacing: "s"
    }, e.createElement(LP, null, p({
        key: "GeographicAreaPanel.label.txt"
    })), e.createElement(iN, {
        className: ke(v_e.formField, v_e.formFieldCentered),
        orientation: "horizontal",
        spacing: "s"
    }, e.createElement(SH, {
        value: R.value,
        onBlur: R.handleBlur,
        onCommit: R.handleCommit,
        message: (i = R.errors) === null || i === void 0 ? void 0 : i.message,
        status: (l = R.errors) === null || l === void 0 ? void 0 : l.status,
        onCancel: R.handleCancel,
        onChange: e => {
            R.handleChange(e);
            t.actions.notifyUpdateArea(t.id, {
                index: t.featureIndex,
                update: {
                    name: e.value
                }
            });
        },
        className: v_e.formField
    }), e.createElement(s_e, {
        id: t.id,
        feature: t.area,
        featureIndex: t.featureIndex,
        onColorChange: e => {
            t.actions.notifyUpdateArea(t.id, {
                index: t.featureIndex,
                update: {
                    color: e
                }
            });
        }
    })), e.createElement(SCe, {
        canDoPremiumServices: t.canDoPremiumServices,
        feature: t.area,
        onTravelTypeChange: e => {
            t.actions.notifyUpdateArea(t.id, {
                index: t.featureIndex,
                update: {
                    mode: e
                }
            });
        },
        onTrafficTypeChange: e => {
            var o, n;
            const a = new Date;
            t.actions.notifyUpdateArea(t.id, {
                index: t.featureIndex,
                update: Object.assign(Object.assign({
                    traffic: e
                }, e === si.HISTORICAL_AVERAGE && {
                    trafficTime: {
                        day: a.getDay(),
                        hour: (o = a.getHours()) !== null && o !== void 0 ? o : 0,
                        minute: (n = a.getMinutes()) !== null && n !== void 0 ? n : 0
                    }
                }), e === si.LIVE && {
                    trafficTime: {
                        hour: 0
                    }
                })
            });
        },
        onTrafficTimeChange: e => {
            t.actions.notifyUpdateArea(t.id, {
                index: t.featureIndex,
                update: {
                    trafficTime: e
                }
            });
        },
        onTrafficRefresh: e => {
            if (e) {
                t.actions.notifyDrawAll(t.id);
            } else {
                t.actions.notifyDrawArea(t.id, t.featureIndex);
            }
        }
    }), e.createElement(LP, null, p({
        key: D ? "GeographicAreaPanel.time.minutes.txt" : t.area.unit === ai.MILE ? "GeographicAreaPanel.distance.miles.txt" : "GeographicAreaPanel.distance.kilometer.txt"
    })), k(), e.createElement(h, {
        fallback: null
    }, e.createElement(LP, {
        helpPopup: {
            library: "vaeua-gui-eua",
            contentKey: "react.va.geo.search.geographicAreaLocation"
        }
    }, p({
        key: "GeographicAreaPanel.location.txt"
    }))), e.createElement(iN, {
        spacing: "s",
        orientation: "horizontal"
    }, e.createElement(MM, {
        icon: t.area.linkedPinIndex !== undefined && t.linkingEnabled ? jT : FT,
        className: v_e.formIconLarge
    }), e.createElement("div", {
        className: v_e.formField,
        style: {
            width: "calc(100% - 2rem)"
        }
    }, e.createElement(pCe, {
        id: t.id,
        ref: _,
        includePinResults: true,
        hintIconOverride: vL,
        feature: t.area,
        locationCandidate: t.locationCandidate,
        locationPopoverTitle: p({
            key: "LocationPopover.area.title.txt"
        }),
        onInvalidateLocation: () => t.actions.notifyUpdateArea(t.id, {
            index: t.featureIndex,
            update: {
                latLon: undefined,
                location: undefined
            }
        }),
        onUpdateHints: ({searchTerm: e}) => {
            t.actions.notifyUpdateHints(t.id, {
                featureIndex: t.featureIndex,
                searchTerm: e
            });
        },
        onApplyHint: ({hint: e, searchTerm: o}) => {
            t.actions.notifyApplyHint(t.id, {
                featureIndex: t.featureIndex,
                hint: e,
                searchTerm: o
            });
        },
        onApplyPin: ({pin: e}) => {
            t.actions.notifyUpdateArea(t.id, {
                index: t.featureIndex,
                update: {
                    location: e.location,
                    latLon: e.latLon
                }
            });
        },
        onUpdatePinMode: e => {
            t.actions.setPinModeEnabled(t.id, e);
        },
        onConfirm: () => {
            var e, o;
            t.actions.update(t.id, {
                pinModeEnabled: false,
                locationCandidate: undefined
            });
            t.actions.notifyUpdateArea(t.id, {
                index: t.featureIndex,
                update: Object.assign({
                    latLon: t.locationCandidate.latLon,
                    location: (e = t.locationCandidate.location) !== null && e !== void 0 ? e : undefined
                }, ((o = t.locationCandidate) === null || o === void 0 ? void 0 : o.country) && {
                    country: {
                        id3: t.locationCandidate.country
                    }
                })
            });
        },
        onCancel: () => {
            t.actions.update(t.id, {
                pinModeEnabled: false,
                locationCandidate: undefined
            });
        },
        onOutsideClick: () => {
            t.actions.update(t.id, {
                locationCandidate: undefined
            });
        }
    })), t.area.linkedPinIndex !== undefined && t.linkingEnabled && e.createElement(QM, {
        icon: {
            icon: vR
        },
        variant: oN.Icon,
        onPress: () => {
            t.actions.notifyUpdateArea(t.id, {
                index: t.featureIndex,
                update: {
                    linkedPinIndex: undefined
                }
            });
        }
    })), t.canDoPremiumServices ? e.createElement(o, null, e.createElement(gye, {
        className: v_e.formField,
        sections: [ {
            header: p({
                key: "GeographicAreaPanel.demographics.txt"
            }),
            renderToolbar: () => {
                var o;
                return e.createElement(_te, {
                    items: [ {
                        type: "MenuButton",
                        variant: oN.Light,
                        icon: {
                            icon: NR
                        },
                        sections: [ {
                            items: [ {
                                text: p({
                                    key: "GeographicAreaPanel.demographics.menu.expand.txt"
                                })
                            }, {
                                text: p({
                                    key: "GeographicAreaPanel.demographics.menu.edit.txt"
                                })
                            }, {
                                text: p({
                                    key: "GeographicAreaPanel.demographics.menu.delete.txt"
                                })
                            } ]
                        } ],
                        onItemSelected: e => {
                            const o = e[0];
                            if (o.length === 2) {
                                if (o[0] === 0) {
                                    switch (o[1]) {
                                      case 0:
                                        S((e => Object.assign(Object.assign({}, e), {
                                            resultsDialogIsOpen: true
                                        })));
                                        break;

                                      case 1:
                                        S((e => Object.assign(Object.assign({}, e), {
                                            selectorDialogIsOpen: true
                                        })));
                                        break;

                                      case 2:
                                        t.actions.setSelectedDemographicMeasures(t.id, {
                                            index: t.featureIndex,
                                            selectedMeasures: []
                                        });
                                        break;
                                    }
                                }
                            }
                        },
                        disabled: Object.keys(((o = t.area.demographics) === null || o === void 0 ? void 0 : o.data) || {}).length === 0
                    } ]
                });
            },
            content: ((d = t.area.demographics) === null || d === void 0 ? void 0 : d.selectedMeasures) && t.area.demographics.selectedMeasures.length > 0 && Object.keys(((u = t.area.demographics) === null || u === void 0 ? void 0 : u.data) || {}).length === 0 ? e.createElement(iN, {
                spacing: "s",
                orientation: "vertical",
                className: v_e.formWindowShadeSection
            }, e.createElement(LP, {
                className: v_e.formDemographicsReloadLabel
            }, p({
                key: "GeographicAreaPanel.demographics.expired.txt"
            })), e.createElement(QM, {
                icon: {
                    icon: KR
                },
                variant: oN.Light,
                text: p({
                    key: "GeographicAreaPanel.demographics.reload.txt"
                }),
                onPress: () => {
                    var e, o;
                    t.actions.setSelectedDemographicMeasures(t.id, {
                        index: t.featureIndex,
                        selectedMeasures: ((o = (e = t.area) === null || e === void 0 ? void 0 : e.demographics) === null || o === void 0 ? void 0 : o.selectedMeasures) || []
                    });
                }
            })) : Object.keys(((m = t.area.demographics) === null || m === void 0 ? void 0 : m.data) || {}).length === 0 ? e.createElement(QM, {
                text: p({
                    key: "GeographicAreaPanel.demographics.set.txt"
                }),
                icon: {
                    icon: _k
                },
                variant: oN.Light,
                onPress: () => S((e => Object.assign(Object.assign({}, e), {
                    selectorDialogIsOpen: true
                }))),
                disabled: !t.area.isRendered || !t.area.demographics || !t.area.country
            }) : e.createElement(zIe, {
                id: t.id,
                className: v_e.formWindowShadeSection,
                featureIndex: t.featureIndex,
                type: "carousel"
            })
        } ],
        openSections: w,
        onToggleSection: e => C((t => hye(t, e)))
    }), e.createElement(r_e, {
        id: t.id,
        dialogOpenState: x,
        setDialogOpenState: S
    })) : null)), e.createElement(Iz, {
        variant: "standard"
    }), e.createElement("div", {
        ref: T,
        className: v_e.footer
    }, e.createElement(QM, {
        className: v_e.footerButton,
        disabled: !y,
        text: p({
            key: t.area.isRendered === undefined ? "GeographicAreaPanel.draw.txt" : "GeographicAreaPanel.update.txt"
        }),
        onPress: () => {
            t.actions.notifyDrawArea(t.id, t.featureIndex);
        }
    })));
};

const S_e = t => {
    const [o, a] = n(t.distance);
    const [r, s] = n(t.distance);
    if (t.distance !== o) {
        a(t.distance);
        s(t.distance);
        return null;
    }
    return e.createElement(kse, {
        minimum: parseFloat(t.minimum.toFixed(3)),
        maximum: parseFloat(t.maximum.toFixed(3)),
        stepSize: 1,
        required: true,
        onChange: e => s(e.displayValue),
        onCommit: e => t.onCommit(e.value),
        className: v_e.formField,
        editMode: "combo",
        value: r,
        style: {
            width: "10rem"
        },
        numberFormatOptions: {
            maximumFractionDigits: 3
        }
    });
};

const w_e = yo(((e, t) => {
    var o;
    const {features: n, autoLinkToPins: a, canDoPremiumServices: r, demographicCountries: s, linkingEnabled: i, pinModeEnabled: l, locationCandidate: c} = (o = Xfe(e, t.id)) !== null && o !== void 0 ? o : {};
    const d = n === null || n === void 0 ? void 0 : n[t.featureIndex];
    if (!d || d.type !== "area") {
        throw new Error("Area not found");
    }
    return {
        area: d,
        autoLinkToPins: a,
        features: n,
        canDoPremiumServices: r,
        demographicCountries: s,
        linkingEnabled: i,
        pinModeEnabled: l,
        locationCandidate: c
    };
}), (e => ({
    actions: bo(npe.actions, e)
})))(x_e);

var C_e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_container";

var E_e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_header";

var I_e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_search-field-container";

var __e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_search-field";

var D_e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_button";

var L_e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_content-container";

var T_e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_footer";

var R_e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_footer-toolbar";

var k_e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_footer-toolbar-button";

var A_e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_list";

var M_e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_group-item-header";

var N_e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_new-feature-popover-title";

var O_e = "sas_components-ObjectSearch-panels-MainSearchPanel-MainSearchPanel_overflow-button";

var P_e = {
    container: C_e,
    header: E_e,
    searchFieldContainer: I_e,
    searchField: __e,
    button: D_e,
    contentContainer: L_e,
    footer: T_e,
    footerToolbar: R_e,
    footerToolbarButton: k_e,
    list: A_e,
    groupItemHeader: M_e,
    newFeaturePopoverTitle: N_e,
    overflowButton: O_e
};

const B_e = e => "item" in e;

const z_e = t => {
    var o, s, i, l, d, u, m, p, f;
    const g = $be();
    const h = C_();
    const [b, v] = Q1({
        initialDimensions: {
            height: 0,
            width: 0
        }
    });
    const y = jV();
    const [x, S] = n({
        featureIndex: -1,
        resultsDialogIsOpen: false,
        selectorDialogIsOpen: false
    });
    const w = k_(t.searchTerm);
    const C = (s = (o = t.searchResults) === null || o === void 0 ? void 0 : o.filter((e => e.selected))) !== null && s !== void 0 ? s : [];
    const E = (l = (i = t.features) === null || i === void 0 ? void 0 : i.filter((e => e.selected))) !== null && l !== void 0 ? l : [];
    const I = r((() => e => {
        if (t.searchHints && Xme(e)) {
            return t.searchHints.indexOf(e);
        }
        if (t.searchResults && Zme(e)) {
            return t.searchResults.indexOf(e);
        }
        if (t.features && Jme(e)) {
            return t.features.indexOf(e);
        }
        return -1;
    }), [ t.searchHints, t.searchResults, t.features ]);
    const _ = (e, o, n) => {
        t.actions.notifyVisibilityChange(t.id, {
            searchResults: e.map(I),
            features: o.map(I),
            value: n
        });
    };
    const D = r((() => {
        var e, o, n;
        const a = e => {
            const o = I(e);
            t.actions.notifyUpdateSelection(t.id, e.type === "result" ? {
                searchResults: [ o ],
                navigate: true
            } : {
                features: [ o ],
                navigate: true
            });
        };
        const r = [];
        if ((e = t.searchHints) === null || e === void 0 ? void 0 : e.length) {
            const e = g({
                key: "MainSearchPanel.searchHints.txt"
            });
            r.push(...t.searchHints.map((t => ({
                item: t,
                group: e,
                description: sCe(t, g, y),
                onNavigationButtonPress: a
            }))));
        }
        if ((o = t.searchResults) === null || o === void 0 ? void 0 : o.length) {
            const e = g({
                key: "MainSearchPanel.searchResults.txt"
            });
            r.push({
                title: e,
                className: P_e.groupItemHeader
            }, ...t.searchResults.map(((o, n) => ({
                item: o,
                group: e,
                counter: n + 1,
                description: sCe(o, g, y),
                onVisibilityButtonPress: () => t.actions.notifyUpdateSearchResult(t.id, {
                    index: n,
                    update: {
                        hidden: !o.hidden
                    }
                }),
                onNavigationButtonPress: a
            }))));
        }
        if ((n = t.features) === null || n === void 0 ? void 0 : n.length) {
            const e = g({
                key: "MainSearchPanel.features.txt"
            });
            r.push({
                title: e,
                className: P_e.groupItemHeader
            }, ...t.features.map(((o, n) => Object.assign(Object.assign({
                item: o,
                group: e,
                description: sCe(o, g, y),
                onVisibilityButtonPress: e => {
                    if (Xme(e)) {
                        return;
                    }
                    t.actions.notifyUpdatePin(t.id, {
                        index: n,
                        update: {
                            hidden: !e.hidden
                        }
                    });
                }
            }, o.type === "area" && {
                onShowDemographicButtonPress: () => {
                    S({
                        featureIndex: n,
                        selectorDialogIsOpen: false,
                        resultsDialogIsOpen: true
                    });
                }
            }), {
                onNavigationButtonPress: a
            }))));
        }
        return r;
    }), [ t.id, t.searchResults, t.searchHints, t.features, t.actions, g, y, I, S ]);
    const L = r((() => {
        const e = [];
        D.forEach(((t, o) => {
            if ("item" in t && "selected" in t.item && t.item["selected"] === true) {
                e.push(String(o));
            }
        }));
        return e;
    }), [ D ]);
    const T = c(L.length > 0 ? parseInt(L[0]) : -1);
    const R = D9();
    const {setSelectRows: k, scrollTo: A, clearMeasurementCache: M} = R;
    a((() => {
        k({
            selectedRows: new Set(L)
        });
        M({
            startRowIndex: 0,
            startColumnIndex: 0
        });
    }), [ D, k, L, M ]);
    a((() => {
        if (T.current > 0) {
            A({
                cell: {
                    rowIndex: T.current,
                    colIndex: 0,
                    region: n2.Data
                },
                focusToCell: false,
                align: "center"
            });
        }
    }), [ A ]);
    a((() => {
        if (w !== undefined && w !== t.searchTerm) {
            A({
                cell: {
                    rowIndex: 0,
                    colIndex: 0,
                    region: n2.Data
                },
                focusToCell: false,
                align: "center"
            });
        }
    }), [ A, w, t.searchTerm ]);
    const N = I_({
        "spacing-s": h.spacing.core.s,
        "spacing-m": h.spacing.core.m
    }, "mainSearch");
    const O = I_({
        "hover-bg": "transparent"
    }, "button");
    const P = XA();
    const B = JA();
    return e.createElement("div", {
        className: P_e.container,
        style: N
    }, e.createElement("div", {
        className: P_e.header
    }, e.createElement(QM, {
        className: P_e.button,
        style: O,
        variant: oN.Icon,
        icon: {
            icon: yR,
            tooltip: g({
                key: "MainSearchPanel.close.label.txt"
            })
        },
        onPress: t.onCollapse
    }), e.createElement(Te, {
        className: P_e.searchFieldContainer
    }, e.createElement(pQ, {
        className: P_e.searchField,
        onChange: e => t.actions.update(t.id, {
            searchTerm: e.value
        }),
        onCommit: e => t.actions.notifySearch(t.id, {
            term: e.value
        }),
        value: (d = t.searchTerm) !== null && d !== void 0 ? d : "",
        numberOfResults: t.searchTerm ? (m = (u = t.searchResults) === null || u === void 0 ? void 0 : u.length) !== null && m !== void 0 ? m : null : null
    }))), e.createElement("div", {
        className: P_e.contentContainer
    }, e.createElement("div", {
        className: P_e.list
    }, e.createElement("div", {
        ref: b
    }, e.createElement(pee, Object.assign({
        tableTheme: () => ({
            "--table-scroll-bar-space": "1rem"
        })
    }, R, {
        selectionMode: "desktop",
        rowCount: D.length,
        showSeparator: () => false,
        itemHeight: () => "double",
        height: v === null || v === void 0 ? void 0 : v.height,
        width: v === null || v === void 0 ? void 0 : v.width,
        iconColumns: [ {
            key: "demographics",
            cellIcon: e => {
                var t;
                const o = D[e];
                const n = B_e(o) && o.item.type === "area" && Object.keys(((t = o.item.demographics) === null || t === void 0 ? void 0 : t.data) || {}).length > 0;
                return n ? {
                    icon: _k,
                    tooltip: g({
                        key: "MainSearchPanel.demographics.tooltip.txt"
                    })
                } : null;
            },
            onPress: e => {}
        }, {
            key: "visibility",
            cellIcon: e => {
                const t = D[e];
                if (!B_e(t) || Xme(t.item)) {
                    return null;
                }
                return {
                    icon: t.item.hidden ? QT : Tk,
                    style: {
                        "--icon-default-override-fg": t.item.hidden ? h.c.colorTextLabel : undefined
                    }
                };
            },
            onPress: e => {
                var t;
                const o = D[e];
                if (!B_e(o) || Xme(o.item)) {
                    return;
                }
                (t = o.onVisibilityButtonPress) === null || t === void 0 ? void 0 : t.call(o, o.item);
                const {ariaLabel: n, tooltip: a} = B({
                    icon: o.item.hidden ? Tk : QT
                });
                const r = n !== null && n !== void 0 ? n : a;
                if (P && r) {
                    P.notify(r);
                }
            }
        }, {
            key: "navigate",
            cellIcon: e => {
                const t = D[e];
                if (!B_e(t) || Xme(t.item)) {
                    return null;
                }
                return {
                    icon: ET,
                    variant: oN.RoundIcon,
                    tooltip: g({
                        key: "MainSearchPanel.navigate.tooltip.txt"
                    })
                };
            },
            onPress: e => {
                var t;
                const o = D[e];
                if (!B_e(o)) {
                    return o;
                }
                (t = o.onNavigationButtonPress) === null || t === void 0 ? void 0 : t.call(o, o.item);
            },
            width: 4 + 32 + 16,
            minimumWidth: 4 + 32 + 16,
            maximumWidth: 4 + 32 + 16
        } ],
        itemColumn: {
            key: "test",
            minimumWidth: 0,
            item(t) {
                const o = D[t];
                return B_e(o) ? e.createElement(rCe, Object.assign({}, o)) : e.createElement(a8, Object.assign({}, o));
            },
            colSpan({rowIndex: e}) {
                var t;
                const o = D[e];
                if (!B_e(o)) {
                    return 1;
                }
                if (Xme(o.item)) {
                    return 4;
                }
                if (o.item.type === "area" && Object.keys(((t = o.item.demographics) === null || t === void 0 ? void 0 : t.data) || {}).length) {
                    return 1;
                }
                return 2;
            }
        },
        getItemInfo: e => {
            const t = D[e];
            if (!B_e(t)) {
                return;
            }
            switch (t.item.type) {
              case "hint":
                return {
                    type: y9,
                    props: {
                        title: t.item.name,
                        description: t.description,
                        group: g({
                            key: "MainSearchPanel.searchHints.txt"
                        })
                    }
                };

              case "result":
                return {
                    type: y9,
                    props: {
                        title: t.item.name,
                        description: t.description,
                        group: g({
                            key: "MainSearchPanel.searchResults.txt"
                        })
                    }
                };

              default:
                return {
                    type: y9,
                    props: {
                        title: t.item.name,
                        description: t.description,
                        group: g({
                            key: "MainSearchPanel.features.txt"
                        })
                    }
                };
            }
        },
        onSelect: e => {
            if (!e) {
                return;
            }
            const o = [];
            const n = [];
            for (const a of Array.from(e)) {
                const e = D[parseInt(a)];
                if (B_e(e)) {
                    if (Xme(e.item)) {
                        t.actions.notifySearch(t.id, {
                            term: e.item.name,
                            autoCreate: !e.item.isMultiple
                        });
                        return;
                    }
                    if (Zme(e.item)) {
                        const t = I(e.item);
                        o.push(t);
                    }
                    if (Jme(e.item)) {
                        const o = I(e.item);
                        n.push(o);
                        t.actions.update(t.id, {
                            searchHints: []
                        });
                    }
                }
            }
            t.actions.notifyUpdateSelection(t.id, {
                searchResults: o,
                features: n
            });
        }
    })))), x.featureIndex >= 0 ? e.createElement(r_e, {
        id: t.id,
        dialogOpenState: x,
        setDialogOpenState: S
    }) : null, e.createElement(Iz, {
        variant: "standard"
    }), e.createElement(iN, {
        className: P_e.footer,
        orientation: "horizontal"
    }, e.createElement(iN, {
        orientation: "horizontal",
        role: "group",
        className: P_e.footerToolbar,
        spacing: "xxs"
    }, e.createElement(QM, {
        className: P_e.footerToolbarButton,
        variant: oN.Light,
        ariaLabel: g({
            key: "MainSearchPanel.pin.txt"
        }),
        icon: {
            icon: yR
        },
        text: g({
            key: "MainSearchPanel.pin.txt"
        }),
        tooltip: g({
            key: "MainSearchPanel.pin.tooltip.txt"
        }),
        onPress: () => t.actions.notifyNewPin(t.id)
    }), e.createElement(QM, {
        className: P_e.footerToolbarButton,
        variant: oN.Light,
        ariaLabel: g({
            key: "MainSearchPanel.route.txt"
        }),
        icon: {
            icon: bL
        },
        text: g({
            key: "MainSearchPanel.route.txt"
        }),
        tooltip: g({
            key: "MainSearchPanel.route.tooltip.txt"
        }),
        onPress: () => t.actions.notifyNewRoute(t.id)
    }), t.canDoDistanceSelections ? e.createElement(QM, {
        className: P_e.footerToolbarButton,
        variant: oN.Light,
        ariaLabel: g({
            key: "MainSearchPanel.geographicArea.txt"
        }),
        icon: {
            icon: FT,
            tooltip: g({
                key: "MainSearchPanel.geographicArea.txt"
            })
        },
        text: g({
            key: "MainSearchPanel.geographicArea.txt"
        }),
        tooltip: g({
            key: "MainSearchPanel.geographicArea.tooltip.txt"
        }),
        onPress: () => t.actions.notifyNewArea(t.id)
    }) : null), e.createElement(MJ, {
        className: P_e.overflowButton,
        disabled: !(((p = t.features) === null || p === void 0 ? void 0 : p.length) || ((f = t.searchResults) === null || f === void 0 ? void 0 : f.length)),
        onItemSelected: e => {
            var o, n, a;
            let r = C;
            let s = E;
            if (r.length + s.length === 0) {
                r = (o = t.searchResults) !== null && o !== void 0 ? o : [];
                s = (n = t.features) !== null && n !== void 0 ? n : [];
            }
            const i = e[0];
            if (i.length === 2) {
                if (i[0] === 0 && i[1] === 0) {
                    _(r, s, true);
                } else if (i[0] === 0 && i[1] === 1) {
                    _(r, s, false);
                } else if (i[0] === 0 && i[1] === 2) {
                    if (!C.length && !E.length) {
                        if ((a = t.searchResults) === null || a === void 0 ? void 0 : a.length) {
                            t.actions.notifyDeleteSearchResults(t.id, t.searchResults.map(I));
                        }
                        t.actions.notifyDeleteAllPins(t.id);
                    }
                    if (C.length) {
                        t.actions.notifyDeleteSearchResults(t.id, C.map(I));
                    }
                    if (E.length) {
                        t.actions.notifyDeletePins(t.id, E.map(I));
                    }
                } else if (i[0] === 1 && i[1] === 0) {
                    if (C.length > 0) {
                        t.actions.notifyConvertSearchResults(t.id, C.map(I));
                    } else {
                        t.actions.notifyConvertAllSearchResults(t.id);
                    }
                }
            }
        },
        sections: [ {
            items: [ {
                text: g({
                    key: C.length > 0 || E.length > 0 ? "MainSearchPanel.show.txt" : "MainSearchPanel.show.all.txt"
                })
            }, {
                text: g({
                    key: C.length > 0 || E.length > 0 ? "MainSearchPanel.hide.txt" : "MainSearchPanel.hide.all.txt"
                })
            }, {
                text: g({
                    key: C.length > 0 || E.length > 0 ? "MainSearchPanel.delete.txt" : "MainSearchPanel.delete.all.txt"
                })
            } ]
        }, {
            items: [ {
                disabled: !t.searchResults || t.searchResults.length === 0,
                text: g({
                    key: C.length > 0 ? "MainSearchPanel.convert.txt" : "MainSearchPanel.convert.all.txt"
                })
            } ]
        } ],
        variant: oN.Light,
        icon: {
            icon: NR
        }
    }))));
};

const F_e = yo(((e, t) => {
    var o;
    const {features: n, searchTerm: a, searchResults: r, searchHints: s, canDoPremiumServices: i, canDoDistanceSelections: l} = (o = Xfe(e, t.id)) !== null && o !== void 0 ? o : {};
    return {
        searchTerm: a,
        searchHints: s,
        searchResults: r,
        features: n,
        canDoPremiumServices: i,
        canDoDistanceSelections: l
    };
}), (e => ({
    actions: bo(npe.actions, e)
})))(z_e);

fb(oo);

var j_e = "sas_components-ObjectSearch-panels-PinPanel-Dialog_separator";

var V_e = "sas_components-ObjectSearch-panels-PinPanel-Dialog_time-input";

var H_e = {
    separator: j_e,
    timeInput: V_e
};

const U_e = dU(DG);

const G_e = (e = 0) => ({
    hours: Math.floor(e / 3600),
    minutes: Math.floor(e / 60) % 60,
    seconds: e % 60
});

const K_e = t => {
    const o = $be();
    const {CANCEL: a, OK: r} = eW();
    const [s, i] = n(G_e(t.interval));
    return e.createElement(zF, {
        isOpen: t.isOpen,
        title: o({
            key: "PinPanel.autoRefreshInterval.txt"
        }),
        firstAction: {
            text: r,
            onPress: () => {
                var e;
                const o = s.hours * 3600 + s.minutes * 60 + s.seconds;
                (e = t.onPress) === null || e === void 0 ? void 0 : e.call(t, o);
            },
            isDefault: true
        },
        dismissAction: {
            text: a,
            onPress: () => {
                var e;
                (e = t.onDismiss) === null || e === void 0 ? void 0 : e.call(t);
                i(G_e(t.interval));
            }
        }
    }, e.createElement("div", {
        className: H_e.timeInput
    }, e.createElement(U_e, {
        label: o({
            key: "PinPanel.interval.hours.txt"
        }),
        values: [ ...Array(24).keys() ].map((e => ({
            text: e
        }))),
        selectedIndex: s.hours,
        onSelected: e => {
            if (e || e === 0) {
                i(Object.assign(Object.assign({}, s), {
                    hours: e
                }));
            }
        }
    }), e.createElement("span", {
        className: H_e.separator
    }, " : "), e.createElement(U_e, {
        label: o({
            key: "PinPanel.interval.minutes.txt"
        }),
        values: [ ...Array(60).keys() ].map((e => ({
            text: e
        }))),
        selectedIndex: s.minutes,
        onSelected: e => {
            if (e || e === 0) {
                i(Object.assign(Object.assign({}, s), {
                    minutes: e
                }));
            }
        }
    }), e.createElement("span", {
        className: H_e.separator
    }, " : "), e.createElement(U_e, {
        label: o({
            key: "PinPanel.interval.seconds.txt"
        }),
        values: [ ...Array(60).keys() ].map((e => ({
            text: e
        }))),
        selectedIndex: s.seconds,
        onSelected: e => {
            if (e || e === 0) {
                i(Object.assign(Object.assign({}, s), {
                    seconds: e
                }));
            }
        }
    })));
};

var W_e = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_container";

var $_e = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_form-scroll-container";

var Y_e = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_form-content";

var q_e = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_input";

var X_e = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_label";

var Z_e = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_pin-icon";

var J_e = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_location-label";

var Q_e = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_linked-list-heading";

var eDe = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_heading-text";

var tDe = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_linked-list";

var oDe = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_add-area-popover-title";

var nDe = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_content-container";

var aDe = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_footer";

var rDe = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_footer-toolbar";

var sDe = "sas_components-ObjectSearch-panels-PinPanel-PinPanel_footer-toolbar-button";

var iDe = {
    container: W_e,
    formScrollContainer: $_e,
    formContent: Y_e,
    input: q_e,
    label: X_e,
    pinIcon: Z_e,
    locationLabel: J_e,
    linkedListHeading: Q_e,
    headingText: eDe,
    linkedList: tDe,
    addAreaPopoverTitle: oDe,
    contentContainer: nDe,
    footer: aDe,
    footerToolbar: rDe,
    footerToolbarButton: sDe
};

const lDe = dU(YK);

const cDe = MA("PinPanel");

const dDe = t => {
    var o, r, s, i;
    const l = $be();
    const d = C_();
    const u = I_({
        "spacing-s": d.spacing.core.s,
        "spacing-m": d.spacing.core.m,
        bg: d.backgrounds.panes.bg,
        "inline-s": d.spacing.inline.s
    }, "pin");
    const [m, p] = n((() => new Set));
    const f = c(null);
    const [g, h] = n(false);
    const b = c(null);
    const [v, y] = n(false);
    const [x, S] = n();
    const [w, C] = cDe(2);
    const E = epe(t.pin.latLon);
    const I = c(null);
    const _ = c(null);
    Awe(I, _, (e => {
        t.actions.update(t.id, {
            minPanelHeight: e
        });
    }));
    Cye((() => {
        t.actions.update(t.id, {
            pinModeEnabled: false,
            locationCandidate: undefined,
            searchHints: []
        });
    }));
    const D = e => {
        var o;
        return e.type === "route" && ((o = e.routeLocations) === null || o === void 0 ? void 0 : o.filter((e => typeof e === "number")).includes(t.featureIndex)) || e.type === "area" && e.linkedPinIndex === t.featureIndex;
    };
    const L = (r = (o = t.features) === null || o === void 0 ? void 0 : o.filter(D).map((e => ({
        item: e
    })))) !== null && r !== void 0 ? r : [];
    const T = () => {
        var e;
        const o = [];
        if (!t.features) {
            return;
        }
        if (m.size > 0) {
            let e = 0;
            for (const [n, a] of t.features.entries()) {
                if (D(a)) {
                    if (m.has(e.toString())) {
                        o.push({
                            index: n,
                            type: a.type
                        });
                    }
                    e++;
                }
            }
            p(new Set);
        } else {
            for (const [n, a] of (e = t.features) === null || e === void 0 ? void 0 : e.entries()) {
                if (D(a)) {
                    o.push({
                        index: n,
                        type: a.type
                    });
                }
            }
        }
        return t.actions.updateItemStates(t.id, {
            indices: o,
            property: "linkedPinIndex",
            value: undefined
        });
    };
    const R = RH({
        isRequired: true,
        minLength: 1,
        initialValue: t.pin.name
    });
    {
        const e = Sye(R.handleChange);
        a((() => {
            e.current({
                value: t.pin.name
            });
        }), [ e, t.pin.name ]);
    }
    let k = [ {
        items: [ {
            text: l({
                key: t.pin.description !== undefined ? "PinPanel.deleteDescription.txt" : "PinPanel.addDescription.txt"
            })
        }, {
            text: l({
                key: "PinPanel.newPin.txt"
            }),
            disabled: !E
        }, {
            text: l({
                key: t.pin.type === "pin" ? "PinPanel.deletePin.txt" : "PinPanel.deleteMyLocationPin.txt"
            })
        } ]
    } ];
    if (t.linkingEnabled) {
        k = k.concat([ {
            items: [ {
                text: l({
                    key: m.size > 0 ? "PinPanel.unlinkItems.txt" : "PinPanel.unlinkAllItems.txt"
                }),
                disabled: L.length === 0
            } ]
        } ]);
    }
    if (t.pin.type === "myLocationPin") {
        k = k.concat([ {
            items: [ {
                text: l({
                    key: t.pin.autoUpdateEnabled === true ? "PinPanel.disableAutoUpdate.txt" : "PinPanel.enableAutoUpdate.txt"
                })
            }, {
                text: l({
                    key: "PinPanel.editAutoRefreshInterval.txt"
                })
            } ]
        } ]);
    }
    a((() => {
        S(t.pin.description);
    }), [ t.pin.description ]);
    return e.createElement("section", {
        className: iDe.container,
        style: u,
        tabIndex: -1,
        "aria-labelledby": w
    }, e.createElement(zwe, {
        ref: I,
        id: t.id,
        headingId: w,
        type: t.pin.type,
        text: l({
            key: t.pin.type === "pin" ? "PinPanel.pinTitle.txt" : "PinPanel.myLocationTitle.txt"
        }),
        menuSections: k,
        onMenuItemSelected: e => {
            const o = e[0][0];
            const n = e[0][1];
            if (o === 0) {
                switch (n) {
                  case 0:
                    if (t.pin.description !== undefined) {
                        t.actions.notifyUpdatePin(t.id, {
                            index: t.featureIndex,
                            update: {
                                description: undefined
                            }
                        });
                    } else {
                        t.actions.notifyUpdatePin(t.id, {
                            index: t.featureIndex,
                            update: {
                                description: ""
                            }
                        });
                    }
                    break;

                  case 1:
                    t.actions.notifyNewPin(t.id, {
                        sourceFeatureIndex: t.featureIndex,
                        location: t.pin.location,
                        latLon: t.pin.latLon
                    });
                    break;

                  case 2:
                    t.actions.notifyDeletePins(t.id, [ t.featureIndex ]);
                    break;
                }
            } else if (o === 1) {
                switch (n) {
                  case 0:
                    if (t.linkingEnabled) {
                        T();
                    } else {
                        t.actions.notifyUpdatePin(t.id, {
                            index: t.featureIndex,
                            update: {
                                autoUpdateEnabled: !t.pin.autoUpdateEnabled
                            }
                        });
                    }
                    break;

                  case 1:
                    y(true);
                    break;
                }
            } else if (o === 2) {
                switch (n) {
                  case 0:
                    t.actions.notifyUpdatePin(t.id, {
                        index: t.featureIndex,
                        update: {
                            autoUpdateEnabled: !t.pin.autoUpdateEnabled
                        }
                    });
                    break;

                  case 1:
                    y(true);
                    break;
                }
            }
        }
    }), e.createElement("div", {
        className: iDe.contentContainer
    }, e.createElement(K_e, {
        isOpen: v,
        onDismiss: () => y(false),
        onPress: e => {
            t.actions.notifyUpdatePin(t.id, {
                index: t.featureIndex,
                update: {
                    autoRefreshInterval: e
                }
            });
            y(false);
        },
        interval: t.pin.autoRefreshInterval
    }), e.createElement("div", {
        className: iDe.formScrollContainer
    }, e.createElement(iN, {
        className: iDe.formContent,
        orientation: "vertical",
        spacing: "s"
    }, t.pin.type === "pin" && e.createElement(LP, {
        id: C,
        wrapText: false
    }, l({
        key: "PinPanel.label.txt"
    })), e.createElement(iN, {
        spacing: "s",
        orientation: "horizontal",
        className: iDe.label
    }, e.createElement(MM, {
        className: iDe.pinIcon,
        icon: t.pin.type === "pin" ? VT : UT,
        tokens: () => Ywe(d, t.pin),
        ariaHidden: true,
        tooltip: ""
    }), e.createElement(SH, {
        ariaLabelledBy: C,
        className: iDe.input,
        onChange: R.handleChange,
        value: R.value,
        onBlur: R.handleBlur,
        onCommit: e => {
            R.handleCommit();
            const o = TH({
                value: e.value,
                isRequired: true,
                minLength: 1
            });
            if (!o.isError) {
                t.actions.notifyUpdatePin(t.id, {
                    index: t.featureIndex,
                    update: {
                        name: e.value
                    }
                });
            }
        },
        message: (s = R.errors) === null || s === void 0 ? void 0 : s.message,
        status: (i = R.errors) === null || i === void 0 ? void 0 : i.status,
        onCancel: R.handleCancel
    }), e.createElement(s_e, {
        id: t.id,
        feature: t.pin,
        featureIndex: t.featureIndex,
        onColorChange: e => {
            t.actions.notifyUpdatePin(t.id, {
                index: t.featureIndex,
                update: {
                    color: e
                }
            });
        }
    })), t.pin.type === "pin" ? e.createElement(pCe, {
        id: t.id,
        label: l({
            key: "PinPanel.location.txt"
        }),
        labelHelp: {
            library: "vaeua-gui-eua",
            contentKey: "react.va.geo.search.pinLocation"
        },
        feature: t.pin,
        ref: f,
        hintIconOverride: yR,
        locationCandidate: t.locationCandidate,
        locationPopoverTitle: l({
            key: "LocationPopover.pin.title.txt"
        }),
        onInvalidateLocation: () => t.actions.notifyUpdatePin(t.id, {
            index: t.featureIndex,
            update: {
                latLon: undefined,
                location: undefined
            }
        }),
        onUpdateHints: ({searchTerm: e}) => {
            t.actions.notifyUpdateHints(t.id, {
                featureIndex: t.featureIndex,
                searchTerm: e
            });
        },
        onApplyHint: ({hint: e, searchTerm: o}) => {
            t.actions.notifyApplyHint(t.id, {
                featureIndex: t.featureIndex,
                hint: e,
                searchTerm: o
            });
        },
        onUpdatePinMode: e => {
            t.actions.setPinModeEnabled(t.id, e);
        },
        onConfirm: () => {
            var e, o;
            t.actions.update(t.id, {
                pinModeEnabled: false,
                locationCandidate: undefined
            });
            t.actions.notifyUpdatePin(t.id, {
                index: t.featureIndex,
                update: Object.assign({
                    latLon: t.locationCandidate.latLon,
                    location: (e = t.locationCandidate.location) !== null && e !== void 0 ? e : undefined
                }, ((o = t.locationCandidate) === null || o === void 0 ? void 0 : o.country) && {
                    country: {
                        id3: t.locationCandidate.country
                    }
                })
            });
        },
        onCancel: () => {
            t.actions.update(t.id, {
                pinModeEnabled: false,
                locationCandidate: undefined
            });
        },
        onOutsideClick: () => {
            t.actions.update(t.id, {
                locationCandidate: undefined
            });
        }
    }) : e.createElement(LP, {
        style: I_({
            fg: d.c.colorTextDefault
        }, "myLocation"),
        className: iDe.locationLabel,
        wrapText: false
    }, t.pin.location), t.pin.description !== undefined && e.createElement(lDe, {
        fieldWidth: "100%",
        wrapLabel: false,
        label: l({
            key: "PinPanel.description.txt"
        }),
        value: x || "",
        onChange: ({value: e}) => S(e),
        onCommit: e => {
            t.actions.notifyUpdatePin(t.id, {
                index: t.featureIndex,
                update: {
                    description: e.value
                }
            });
        },
        rows: 3,
        className: iDe.input
    })), !!L.length && t.linkingEnabled && e.createElement(iN, {
        orientation: "vertical",
        spacing: "s"
    }, e.createElement(iN, {
        orientation: "horizontal",
        className: iDe.linkedListHeading,
        spacing: "s"
    }, e.createElement(oO, {
        className: iDe.headingText,
        level: 5
    }, l({
        key: "PinPanel.linked.txt"
    })), e.createElement(MM, {
        icon: vR,
        disabled: m.size === 0,
        onClick: T
    })), e.createElement(Iz, {
        variant: "standard"
    }), e.createElement("div", {
        className: iDe.linkedList
    }, e.createElement(pee, {
        selectionMode: "desktop",
        rowCount: L.length,
        expandToFillWidth: true,
        itemHeight: () => "double",
        height: aCe * L.length,
        renderItem: ({index: t}) => {
            const o = L[t];
            return e.createElement(rCe, Object.assign({}, o));
        },
        onSelect: e => p(e !== null && e !== void 0 ? e : new Set)
    })))), e.createElement(Iz, {
        variant: "standard"
    }), e.createElement(iN, {
        ref: _,
        className: iDe.footer,
        orientation: "horizontal"
    }, e.createElement(iN, {
        orientation: "horizontal",
        spacing: "xxs",
        role: "group",
        className: iDe.footerToolbar
    }, e.createElement(QM, {
        className: iDe.footerToolbarButton,
        variant: oN.Light,
        ariaLabel: l({
            key: "PinPanel.addRoute.txt"
        }),
        text: l({
            key: "PinPanel.addRoute.txt"
        }),
        icon: {
            icon: bL
        },
        disabled: !E,
        onPress: () => t.actions.notifyNewRoute(t.id, {
            sourceFeatureIndex: t.featureIndex,
            latLon: t.pin.latLon,
            location: t.pin.location
        }),
        tooltip: l({
            key: "PinPanel.addRoute.tooltip.txt"
        })
    }), t.canDoDistanceSelections ? e.createElement(QM, {
        className: iDe.footerToolbarButton,
        variant: oN.Light,
        ariaLabel: l({
            key: "PinPanel.addArea.txt"
        }),
        text: l({
            key: "PinPanel.addArea.txt"
        }),
        icon: {
            icon: FT,
            tooltip: l({
                key: "PinPanel.addArea.txt"
            })
        },
        disabled: !E,
        onPress: () => {
            if (t.linkingEnabled) {
                h(!g);
            } else {
                t.actions.notifyNewArea(t.id, {
                    sourceFeatureIndex: t.featureIndex,
                    latLon: t.pin.latLon,
                    location: t.pin.location,
                    country: t.pin.country
                });
            }
        },
        ref: b,
        tooltip: l({
            key: "PinPanel.addArea.tooltip.txt"
        })
    }) : null, e.createElement(zO, {
        referenceElementRef: b,
        isOpen: g,
        onClose: () => h(false),
        role: "dialog"
    }, e.createElement(oO, {
        level: 5,
        className: iDe.addAreaPopoverTitle,
        style: I_({
            fg: d.c.colorTextPrimary,
            "spacing-m": d.spacing.core.m
        }, "addAreaPopoverTitle")
    }, l({
        key: "PinPanel.addArea.title.txt"
    })), e.createElement(pee, {
        rowCount: 2,
        expandToFillWidth: true,
        selectionMode: "single",
        itemHeight: () => "single",
        onSelect: e => {
            var o;
            const n = {
                0: () => {
                    t.actions.notifyNewArea(t.id, {
                        sourceFeatureIndex: t.featureIndex,
                        link: true,
                        linkedPinIndex: t.featureIndex
                    });
                },
                1: () => {
                    t.actions.notifyNewArea(t.id, {
                        sourceFeatureIndex: t.featureIndex,
                        latLon: t.pin.latLon,
                        location: t.pin.location
                    });
                }
            };
            h(false);
            const a = Array.from(e !== null && e !== void 0 ? e : [])[0];
            (o = n[a]) === null || o === void 0 ? void 0 : o.call(n);
        },
        height: 30 * 2,
        width: 205,
        renderItem: ({index: t}) => {
            let o;
            switch (t) {
              case 0:
                o = "PinPanel.linkToPin.txt";
                break;

              case 1:
                o = "PinPanel.useCurrentLocation.txt";
                break;
            }
            if (!o) return null;
            return e.createElement(y9, {
                title: l({
                    key: o
                })
            });
        }
    }))))));
};

const uDe = yo(((e, t) => {
    var o;
    const {features: n, autoLinkToPins: a, canDoDistanceSelections: r, pinModeEnabled: s, linkingEnabled: i, locationCandidate: l} = (o = Xfe(e, t.id)) !== null && o !== void 0 ? o : {};
    const c = n === null || n === void 0 ? void 0 : n[t.featureIndex];
    if (!c || c.type !== "pin" && c.type !== "myLocationPin") {
        throw new Error("Pin not found");
    }
    return {
        autoLinkToPins: a,
        pin: c,
        features: n,
        canDoDistanceSelections: r,
        pinModeEnabled: s,
        linkingEnabled: i,
        locationCandidate: l
    };
}), (e => ({
    actions: bo(npe.actions, e)
})))(dDe);

var mDe = "sas_components-ObjectSearch-panels-SearchResultPanel-SearchResultPanel_container";

var pDe = "sas_components-ObjectSearch-panels-SearchResultPanel-SearchResultPanel_body";

var fDe = "sas_components-ObjectSearch-panels-SearchResultPanel-SearchResultPanel_item";

var gDe = "sas_components-ObjectSearch-panels-SearchResultPanel-SearchResultPanel_content-container";

var hDe = "sas_components-ObjectSearch-panels-SearchResultPanel-SearchResultPanel_footer";

var bDe = "sas_components-ObjectSearch-panels-SearchResultPanel-SearchResultPanel_footer-toolbar";

var vDe = "sas_components-ObjectSearch-panels-SearchResultPanel-SearchResultPanel_footer-toolbar-button";

var yDe = {
    container: mDe,
    body: pDe,
    item: fDe,
    contentContainer: gDe,
    footer: hDe,
    footerToolbar: bDe,
    footerToolbarButton: vDe
};

const xDe = MA("SearchResultPanel");

const SDe = t => {
    const o = C_();
    const n = $be();
    const a = I_({
        "spacing-m": o.spacing.core.m
    }, "searchResult");
    const r = xDe();
    return e.createElement("section", {
        className: yDe.container,
        style: a,
        tabIndex: -1,
        "aria-labelledby": r
    }, e.createElement(zwe, {
        id: t.id,
        headingId: r,
        text: n({
            key: "SearchResultPanel.title.txt"
        }),
        menuSections: [ {
            items: [ {
                text: n({
                    key: "SearchResultPanel.menu.delete.txt"
                })
            } ]
        } ],
        onMenuItemSelected: () => t.actions.notifyDeleteSearchResults(t.id, [ t.searchIndex ]),
        type: "result"
    }), e.createElement("div", {
        className: yDe.contentContainer
    }, e.createElement("div", {
        className: yDe.body,
        style: uee(o)
    }, e.createElement(rCe, {
        className: yDe.item,
        item: t.searchResult,
        counter: t.searchIndex + 1
    })), e.createElement(Iz, {
        variant: "standard"
    }), e.createElement(iN, {
        className: yDe.footer,
        orientation: "horizontal"
    }, e.createElement(iN, {
        orientation: "horizontal",
        spacing: "xxs",
        role: "group",
        className: yDe.footerToolbar
    }, e.createElement(QM, {
        className: yDe.footerToolbarButton,
        variant: oN.Light,
        text: n({
            key: "SearchResultPanel.convert.txt"
        }),
        icon: {
            icon: yR
        },
        onPress: () => {
            t.actions.notifyConvertSearchResults(t.id, [ t.searchIndex ]);
        },
        tooltip: n({
            key: "SearchResultPanel.convert.tooltip.txt"
        })
    })))));
};

const wDe = yo(((e, t) => {
    var o;
    const {searchResults: n} = (o = Xfe(e, t.id)) !== null && o !== void 0 ? o : {};
    const a = n === null || n === void 0 ? void 0 : n[t.searchIndex];
    if (!a) {
        throw new Error(`Search result not found`);
    }
    return {
        searchResult: a
    };
}), (e => ({
    actions: bo(npe.actions, e)
})))(SDe);

var CDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formContainer";

var EDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formScrollContainer";

var IDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formContent";

var _De = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formIconLarge";

var DDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formHeader";

var LDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formField";

var TDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formFieldIndent";

var RDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formFieldCentered";

var kDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formTable";

var ADe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formRowContainer";

var MDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formGrabberIcon";

var NDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formDashIcon";

var ODe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formRouteIcon";

var PDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formRouteIconLabel";

var BDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_formRouteDistance";

var zDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_locationHeader";

var FDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_footer";

var jDe = "sas_components-ObjectSearch-panels-RoutePanel-RoutePanel_footerButton";

var VDe = {
    formContainer: CDe,
    formScrollContainer: EDe,
    formContent: IDe,
    formIconLarge: _De,
    formHeader: DDe,
    formField: LDe,
    formFieldIndent: TDe,
    formFieldCentered: RDe,
    formTable: kDe,
    formRowContainer: ADe,
    formGrabberIcon: MDe,
    formDashIcon: NDe,
    formRouteIcon: ODe,
    formRouteIconLabel: PDe,
    formRouteDistance: BDe,
    locationHeader: zDe,
    footer: FDe,
    footerButton: jDe
};

const HDe = MA("RoutePanel");

const UDe = dU(kse);

const GDe = t => {
    var o, s, i, l, d, u, m, p;
    const f = $be();
    const g = C_();
    const b = E_();
    const v = HDe();
    const [y, x] = Q1({
        initialDimensions: {
            height: 0,
            width: 0
        }
    });
    const S = c();
    const w = t.route.routeLocations.length;
    const C = r((() => t.route.routeLocations.reduce(((e, t, o) => {
        if (typeof t !== "number" && t.selected) {
            e.add(o.toString());
        }
        return e;
    }), new Set)), [ t.route.routeLocations ]);
    const E = D9({
        selectedRows: C
    });
    const {setSelectRow: I, setSelectAllRows: _, setSelectRows: D} = E;
    const {selectedRows: L} = E.preference;
    const T = c(false);
    const R = c(true);
    const [k, A] = n(t.route.routeWidth !== undefined);
    const [M, N] = n(-1);
    const O = c(null);
    const P = c(null);
    const B = c(null);
    Awe(O, B, (e => {
        t.actions.update(t.id, {
            minPanelHeight: e
        });
    }));
    const z = RH({
        isRequired: true,
        minLength: 1,
        initialValue: t.route.name
    });
    {
        const e = Sye(z.handleChange);
        a((() => {
            e.current({
                value: t.route.name
            });
        }), [ e, t.route.name ]);
    }
    const F = tpe(t.route.routeLocations);
    let j;
    {
        j = F;
        if (z.errors.status) {
            j = false;
        }
        if (t.route.isRendered) {
            j = false;
        }
    }
    const V = t.route.mode === oi.DRIVING_TIME || t.route.mode === oi.TRUCKING_TIME || t.route.mode === oi.WALKING_TIME;
    const H = ((o = t.route.routeWidth) === null || o === void 0 ? void 0 : o.mode) === oi.DRIVING_TIME || ((s = t.route.routeWidth) === null || s === void 0 ? void 0 : s.mode) === oi.TRUCKING_TIME || ((i = t.route.routeWidth) === null || i === void 0 ? void 0 : i.mode) === oi.WALKING_TIME;
    const U = (e, o, n) => {
        if (n && o !== -1) {
            const e = [ ...t.route.routeLocations ];
            const a = Array.from(n).map((e => parseInt(e))).sort(((e, t) => t - e));
            const r = [];
            a === null || a === void 0 ? void 0 : a.forEach((t => {
                const [o] = e.splice(t, 1);
                r.push(o);
            }));
            e.splice(Math.min(o, e.length), 0, ...r);
            t.actions.notifyUpdateRoute(t.id, {
                index: t.featureIndex,
                update: {
                    routeLocations: e
                }
            });
        }
    };
    const G = () => {
        if (C) {
            Array.from(C).map((e => parseInt(e))).sort(((e, t) => t - e)).forEach((e => {
                t.route.routeLocations.splice(e, 1);
            }));
            t.actions.notifyUpdateRoute(t.id, {
                index: t.featureIndex,
                update: {
                    routeLocations: t.route.routeLocations
                }
            });
        }
    };
    const K = () => {
        t.actions.notifyUpdateRoute(t.id, {
            index: t.featureIndex,
            update: {
                routeLocations: t.route.routeLocations.reverse()
            }
        });
    };
    const W = () => {
        t.actions.notifyUpdateRoute(t.id, {
            index: t.featureIndex,
            update: {
                routeLocations: t.route.routeLocations.concat([ {
                    name: `Pin ${t.route.routeLocations.length + 1}`
                } ])
            }
        });
    };
    const $ = () => {
        t.actions.notifyClearRoute(t.id, {
            index: t.featureIndex
        });
    };
    const Y = () => {
        t.actions.notifyUpdateRoute(t.id, {
            index: t.featureIndex,
            update: {
                routeLocations: t.route.routeLocations.map(((e, o) => {
                    var n;
                    if (t.features && typeof e === "number" && (C === null || C === void 0 ? void 0 : C.has(o.toString()))) {
                        const o = (n = t.features) === null || n === void 0 ? void 0 : n.find(((t, o) => t.type === "pin" && o === e));
                        return o ? o : e;
                    }
                    return e;
                }))
            }
        });
    };
    const q = t.route.routeLocations.findIndex((e => typeof e !== "number" && !e.location));
    const X = uU();
    a((() => {
        const e = X.refs[q];
        e === null || e === void 0 ? void 0 : e.focus();
    }), [ X, q ]);
    const Z = I_({
        "spacing-xs": g.spacing.core.xs,
        "spacing-m": g.spacing.core.m,
        "distance-color": b.graphDataText.textColor,
        fg: g.stateStandard.normal.fg
    }, "geoRoute");
    const J = I_({
        "table-bg": "transparent",
        "table-row-bg": "transparent",
        "table-scroll-bar-space": 0,
        "table-last-column-pd-adjustment": "-1rem",
        "table-cell-pd-inline-start-adjustment": "-1rem"
    });
    const Q = r((() => {
        let e = [ {
            items: [ {
                text: f({
                    key: "RoutePanel.menu.clear.txt"
                })
            }, {
                text: f({
                    key: "RoutePanel.menu.reverse.txt"
                })
            }, {
                text: f({
                    key: "RoutePanel.menu.add.waypoint.txt"
                }),
                disabled: t.route.routeLocations.length >= 99
            }, {
                text: f({
                    key: "RoutePanel.menu.delete.waypoint.txt"
                }),
                disabled: !C || C.size === 0 || t.route.routeLocations.length - C.size < 2
            } ]
        } ];
        if (t.linkingEnabled) {
            e = e.concat([ {
                items: [ {
                    text: f({
                        key: "RoutePanel.menu.unlink.txt"
                    }),
                    disabled: !C || Array.from(C).map((e => t.route.routeLocations[parseInt(e)])).filter((e => typeof e === "number")).length === 0
                } ]
            } ]);
        }
        e = e.concat([ {
            items: [ {
                text: f({
                    key: "TravelTypeField.distanceTypes.distance.unit.txt"
                }),
                subSections: [ {
                    items: [ {
                        text: f({
                            key: "GeographicAreaPanel.distanceUnits.miles.txt"
                        }),
                        checked: t.route.unit === ai.MILE
                    }, {
                        text: f({
                            key: "GeographicAreaPanel.distanceUnits.kilometers.txt"
                        }),
                        checked: t.route.unit === ai.KILOMETER
                    } ]
                } ]
            }, {
                text: f({
                    key: "RoutePanel.menu.delete.txt"
                })
            } ]
        } ]);
        return e;
    }), [ t.route.routeLocations, C, t.linkingEnabled, t.route.unit, f ]);
    a((() => {
        D({
            selectedRows: C
        });
    }), [ C, D ]);
    a((() => {
        if ([ ...L || [] ].some((e => parseInt(e) >= t.route.routeLocations.length))) {
            _({
                selectAll: false
            });
        } else {
            if (T.current) {
                T.current = false;
                t.actions.notifyUpdateRoute(t.id, {
                    index: t.featureIndex,
                    update: {
                        routeLocations: t.route.routeLocations.map(((e, t) => {
                            if (typeof e === "number") {
                                return e;
                            }
                            return Object.assign(Object.assign({}, e), {
                                selected: L === null || L === void 0 ? void 0 : L.has(t.toString())
                            });
                        }))
                    }
                });
            }
        }
    }), [ L, _, t.actions, t.route.routeLocations, t.id, t.featureIndex ]);
    a((() => {
        var e, o;
        if (t.route.isRendered && (((e = S.current) === null || e === void 0 ? void 0 : e.distance) !== t.route.routeTravelDistance || ((o = S.current) === null || o === void 0 ? void 0 : o.duration) !== t.route.routeTravelDuration)) {
            const e = setTimeout((() => {
                var e;
                S.current = {
                    distance: t.route.routeTravelDistance,
                    duration: t.route.routeTravelDuration
                };
                (e = P.current) === null || e === void 0 ? void 0 : e.scrollIntoView({
                    behavior: "smooth"
                });
            }), 50);
            return () => clearTimeout(e);
        }
    }), [ t.route.routeTravelDistance, t.route.routeTravelDuration, t.route.isRendered ]);
    Cye((() => {
        t.actions.update(t.id, {
            pinModeEnabled: false,
            locationCandidate: undefined,
            searchHints: []
        });
    }));
    return e.createElement("section", {
        "aria-labelledby": v,
        className: VDe.formContainer,
        style: Z,
        tabIndex: -1
    }, e.createElement(zwe, {
        id: t.id,
        ref: O,
        headingId: v,
        type: "route",
        text: f({
            key: "RoutePanel.title.txt"
        }),
        onMenuItemSelected: e => {
            const o = e[0];
            if (o.length === 2) {
                switch (o[0]) {
                  case 0:
                    switch (o[1]) {
                      case 0:
                        $();
                        break;

                      case 1:
                        K();
                        break;

                      case 2:
                        W();
                        break;

                      case 3:
                        G();
                        break;
                    }
                    break;

                  case 1:
                    switch (o[1]) {
                      case 0:
                        if (t.linkingEnabled) {
                            Y();
                        } else {
                            t.actions.notifyUpdateRoute(t.id, {
                                index: t.featureIndex,
                                update: {
                                    unit: e[1][1] === 0 ? ai.MILE : ai.KILOMETER
                                }
                            });
                        }
                        break;

                      case 1:
                        if (t.linkingEnabled) {
                            t.actions.notifyUpdateRoute(t.id, {
                                index: t.featureIndex,
                                update: {
                                    unit: e[1][1] === 0 ? ai.MILE : ai.KILOMETER
                                }
                            });
                        } else {
                            R.current = false;
                            t.actions.notifyDeletePins(t.id, [ t.featureIndex ]);
                        }
                        break;
                    }
                    break;

                  case 2:
                    switch (o[1]) {
                      case 0:
                        t.actions.notifyUpdateRoute(t.id, {
                            index: t.featureIndex,
                            update: {
                                unit: e[1][1] === 0 ? ai.MILE : ai.KILOMETER
                            }
                        });
                        break;

                      case 1:
                        R.current = false;
                        t.actions.notifyDeletePins(t.id, [ t.featureIndex ]);
                        break;
                    }
                    break;
                }
            }
        },
        menuSections: Q
    }), e.createElement("div", {
        className: VDe.formScrollContainer
    }, e.createElement(iN, {
        spacing: "m",
        orientation: "vertical",
        className: VDe.formContent
    }, e.createElement(iN, {
        className: VDe.formField,
        orientation: "vertical",
        spacing: "s"
    }, e.createElement(LP, null, f({
        key: "RoutePanel.label.txt"
    })), e.createElement(iN, {
        className: ke(VDe.formField, VDe.formFieldCentered),
        orientation: "horizontal",
        spacing: "s"
    }, e.createElement(SH, {
        value: z.value,
        onBlur: z.handleBlur,
        onCommit: z.handleCommit,
        message: (l = z.errors) === null || l === void 0 ? void 0 : l.message,
        status: (d = z.errors) === null || d === void 0 ? void 0 : d.status,
        onCancel: z.handleCancel,
        onChange: e => {
            z.handleChange(e);
            t.actions.notifyUpdateRoute(t.id, {
                index: t.featureIndex,
                update: {
                    name: e.value
                }
            });
        },
        className: VDe.formField
    }), e.createElement(s_e, {
        id: t.id,
        feature: t.route,
        featureIndex: t.featureIndex,
        onColorChange: e => {
            t.actions.notifyUpdateRoute(t.id, {
                index: t.featureIndex,
                update: {
                    color: e
                }
            });
        }
    }))), e.createElement(SCe, {
        canDoPremiumServices: t.canDoPremiumServices,
        feature: t.route,
        onTravelTypeChange: e => {
            t.actions.notifyUpdateRoute(t.id, {
                index: t.featureIndex,
                update: {
                    mode: e
                }
            });
        },
        onTrafficTypeChange: e => {
            var o, n;
            const a = new Date;
            t.actions.notifyUpdateRoute(t.id, {
                index: t.featureIndex,
                update: Object.assign(Object.assign({
                    traffic: e
                }, e === si.HISTORICAL_AVERAGE && {
                    trafficTime: {
                        day: a.getDay(),
                        hour: (o = a.getHours()) !== null && o !== void 0 ? o : 0,
                        minute: (n = a.getMinutes()) !== null && n !== void 0 ? n : 0
                    }
                }), e === si.LIVE && {
                    trafficTime: {
                        hour: 0
                    }
                })
            });
        },
        onTrafficTimeChange: e => {
            t.actions.notifyUpdateRoute(t.id, {
                index: t.featureIndex,
                update: {
                    trafficTime: e
                }
            });
        },
        onTrafficRefresh: e => {
            if (e) {
                t.actions.notifyDrawAll(t.id);
            } else {
                t.actions.notifyDrawRoute(t.id, t.featureIndex);
            }
        }
    }), e.createElement("div", {
        ref: y
    }, e.createElement(iN, {
        spacing: "s",
        orientation: "horizontal",
        className: VDe.locationHeader
    }, e.createElement(h, {
        fallback: null
    }, e.createElement(LP, {
        className: VDe.formHeader,
        wrapText: false,
        helpPopup: {
            library: "vaeua-gui-eua",
            contentKey: "react.va.geo.search.routeLocations"
        },
        id: `${t.id}-locations`
    }, f({
        key: "RoutePanel.locations.txt"
    }))), e.createElement(_te, {
        items: [ {
            type: "Button",
            overflowPriority: "never",
            variant: oN.Light,
            icon: {
                icon: $R
            },
            onPress: K
        }, {
            type: "Button",
            overflowPriority: "high",
            variant: oN.Light,
            icon: {
                icon: hL
            },
            onPress: W,
            disabled: t.route.routeLocations.length >= 99 || !F,
            tooltip: f({
                key: "RoutePanel.location.add.txt"
            })
        }, {
            type: "Button",
            id: "BUTTON_UNLINK_LOCATION",
            overflowPriority: "high",
            variant: oN.Light,
            icon: {
                icon: vR
            },
            onPress: Y,
            disabled: !C || Array.from(C).map((e => t.route.routeLocations[parseInt(e)])).filter((e => typeof e === "number")).length === 0
        }, {
            type: "Button",
            overflowPriority: "high",
            variant: oN.Light,
            icon: {
                icon: ST
            },
            onPress: G,
            disabled: !C || C.size === 0 || t.route.routeLocations.length - C.size < 2,
            tooltip: f({
                key: "RoutePanel.location.delete.txt"
            })
        } ].filter((e => !(e.id === "BUTTON_UNLINK_LOCATION" && !t.linkingEnabled)))
    })), e.createElement(Iz, {
        variant: "standard"
    }), e.createElement(lSe, {
        enableDragDrop: true
    }, e.createElement(pee, Object.assign({}, E, {
        style: J,
        width: x === null || x === void 0 ? void 0 : x.width,
        className: VDe.formTable,
        dndPrefix: "dndRouteLocation",
        expandToFillWidth: true,
        height: w * 50,
        itemHeight: () => 50,
        dragEnabled: true,
        dropEnabled: true,
        rowCount: w,
        outerBorderVisible: false,
        disableAutoFocus: true,
        ariaLabelledBy: `${t.id}-locations`,
        selectionMode: "desktop",
        singleSelectionOverrides: {
            allowDeselection: true
        },
        onSelect: e => {
            D({
                selectedRows: e
            });
            T.current = true;
        },
        rowContainer: (o, n, a) => {
            const r = (L === null || L === void 0 ? void 0 : L.has("" + o)) ? "var(--table-selected-internal-filter)" : undefined;
            return e.createElement("div", {
                className: ke(a, VDe.formRowContainer)
            }, o !== 0 && e.createElement(MM, {
                icon: XT,
                color: "neutral",
                className: VDe.formDashIcon,
                style: {
                    filter: r
                },
                tooltip: ""
            }), n, o !== t.route.routeLocations.length - 1 && e.createElement(MM, {
                icon: XT,
                color: "neutral",
                className: VDe.formDashIcon,
                style: {
                    filter: r
                },
                tooltip: ""
            }));
        },
        itemColumn: {
            key: "itemBody",
            containsInteractiveContent: true,
            item: (o, n) => {
                var a;
                const r = t.route.routeLocations[o];
                const s = typeof r === "number";
                const i = typeof r === "number" ? (a = t.features) === null || a === void 0 ? void 0 : a[r] : r;
                if (!i) {
                    return null;
                }
                const l = f({
                    key: "LocationPopover.route.title.txt",
                    args: {
                        label: `${o + 1}`
                    }
                });
                return e.createElement(iN, {
                    key: `${o}`,
                    spacing: "s",
                    orientation: "horizontal",
                    className: VDe.formField,
                    onMouseDown: e => {
                        I({
                            index: o,
                            selected: !(C === null || C === void 0 ? void 0 : C.has(o.toString())),
                            selectionType: "cell",
                            clearPrevious: !e.ctrlKey,
                            rowCount: w,
                            rangeSelection: e.shiftKey,
                            rowKey: e => e.toString()
                        });
                        T.current = true;
                    }
                }, e.createElement("div", {
                    className: VDe.formRouteIcon
                }, e.createElement(MM, {
                    icon: s ? HT : eT,
                    className: VDe.formIconLarge,
                    style: qwe(i, t.route.color),
                    tokens: () => Ywe(g, t.route)
                }), e.createElement(LP, {
                    className: VDe.formRouteIconLabel,
                    style: qwe(i, t.route.color),
                    theme: () => ({
                        "--label-fg": Ywe(g, t.route).fg
                    })
                }, String(o + 1))), e.createElement("div", {
                    className: VDe.formField,
                    style: {
                        width: "calc(100% - 3rem)"
                    }
                }, e.createElement(pCe, {
                    id: t.id,
                    ref: e => {
                        X.createSetRef(o)(e);
                        if (n) {
                            n.current = e;
                        }
                    },
                    feature: i,
                    includePinResults: true,
                    hintIconOverride: dT,
                    disableAutoFocus: true,
                    ariaLabel: l,
                    locationPopoverTitle: l,
                    locationCandidate: M === o ? t.locationCandidate : undefined,
                    onInvalidateLocation: () => {
                        t.actions.notifyUpdateRoute(t.id, {
                            index: t.featureIndex,
                            update: {
                                routeLocations: t.route.routeLocations.map(((e, t) => {
                                    if (t === o && typeof e !== "number") {
                                        e = Object.assign(Object.assign({}, e), {
                                            latLon: [ NaN, NaN ],
                                            location: undefined
                                        });
                                    }
                                    return e;
                                }))
                            }
                        });
                    },
                    onUpdateHints: ({searchTerm: e}) => {
                        t.actions.notifyUpdateHints(t.id, {
                            featureIndex: t.featureIndex,
                            searchTerm: e
                        });
                    },
                    onApplyHint: ({hint: e, searchTerm: n}) => {
                        t.actions.notifyApplyHint(t.id, {
                            featureIndex: t.featureIndex,
                            waypointIndex: o,
                            hint: e,
                            searchTerm: n
                        });
                    },
                    onApplyPin: ({pin: e}) => {
                        t.actions.notifyUpdateRoute(t.id, {
                            index: t.featureIndex,
                            update: {
                                routeLocations: t.route.routeLocations.map(((t, n) => {
                                    if (n === o && typeof t !== "number") {
                                        t = Object.assign(Object.assign({}, t), {
                                            latLon: e.latLon,
                                            location: e.location
                                        });
                                    }
                                    return t;
                                }))
                            }
                        });
                    },
                    onUpdatePinMode: e => {
                        if (e || M === o) {
                            N(o);
                            t.actions.setPinModeEnabled(t.id, e);
                        }
                    },
                    onConfirm: () => {
                        t.actions.update(t.id, {
                            pinModeEnabled: false,
                            locationCandidate: undefined
                        });
                        t.actions.notifyUpdateRoute(t.id, {
                            index: t.featureIndex,
                            update: {
                                routeLocations: t.route.routeLocations.map(((e, n) => {
                                    var a, r;
                                    if (n === o && typeof e !== "number") {
                                        e = Object.assign(Object.assign(Object.assign({}, e), {
                                            latLon: t.locationCandidate.latLon,
                                            location: (a = t.locationCandidate.location) !== null && a !== void 0 ? a : undefined
                                        }), ((r = t.locationCandidate) === null || r === void 0 ? void 0 : r.country) && {
                                            country: {
                                                id3: t.locationCandidate.country
                                            }
                                        });
                                    }
                                    return e;
                                }))
                            }
                        });
                    },
                    onCancel: () => {
                        t.actions.update(t.id, {
                            pinModeEnabled: false,
                            locationCandidate: undefined
                        });
                    },
                    onOutsideClick: () => {
                        t.actions.update(t.id, {
                            locationCandidate: undefined
                        });
                    }
                })), e.createElement(MM, {
                    className: VDe.formGrabberIcon,
                    icon: $T
                }));
            }
        },
        accessibilityInfo: {
            getCellInfo: ({rowIndex: e, columnIndex: o}) => {
                var n;
                const a = t.route.routeLocations[e];
                const r = typeof a === "number" ? (n = t.features) === null || n === void 0 ? void 0 : n[a] : a;
                const s = f({
                    key: "PinPanel.searchPlaceholder.txt"
                });
                return o === 0 ? f({
                    key: "RoutePanel.accessibilityCellInfo.fmt",
                    args: {
                        index: `${e + 1}`,
                        location: r.location ? r.location : s
                    }
                }) : null;
            }
        },
        reorderItem: U,
        getRowKey: e => e.toString()
    })))), e.createElement(iN, {
        ref: P,
        spacing: "none",
        orientation: "vertical",
        style: {
            flexDirection: V ? "column-reverse" : "column"
        }
    }, t.route.routeTravelDistance && t.route.isRendered ? e.createElement(iN, {
        spacing: "s",
        orientation: "horizontal"
    }, e.createElement(LP, null, f({
        key: "RoutePanel.distance.txt"
    })), e.createElement(LP, {
        className: VDe.formRouteDistance
    }, t.route.routeTravelDistance)) : null, t.route.routeTravelDuration && t.route.isRendered && V ? e.createElement(iN, {
        spacing: "s",
        orientation: "horizontal"
    }, e.createElement(LP, null, f({
        key: "RoutePanel.duration.txt"
    })), e.createElement(LP, {
        className: VDe.formRouteDistance
    }, t.route.routeTravelDuration)) : null), t.route.routeWidth ? e.createElement(tB, {
        label: f({
            key: "RoutePanel.route.width.txt"
        }),
        checked: k,
        onPress: () => {
            t.actions.notifyUpdateRoute(t.id, {
                index: t.featureIndex,
                update: {
                    routeWidth: {
                        mode: oi.DIRECT
                    }
                }
            });
            A(!k);
        }
    }) : null, k && t.route.routeWidth && e.createElement(TCe, {
        dependency: true,
        labelPosition: "top",
        className: VDe.formField
    }, e.createElement(SCe, {
        canDoPremiumServices: t.canDoPremiumServices,
        feature: t.route.routeWidth,
        onTravelTypeChange: e => {
            t.actions.notifyUpdateRoute(t.id, {
                index: t.featureIndex,
                update: {
                    routeWidth: Object.assign(Object.assign({}, t.route.routeWidth), {
                        mode: e
                    })
                }
            });
        },
        onTrafficTypeChange: e => {
            var o, n;
            const a = new Date;
            t.actions.notifyUpdateRoute(t.id, {
                index: t.featureIndex,
                update: {
                    routeWidth: Object.assign(Object.assign(Object.assign(Object.assign({}, t.route.routeWidth), {
                        traffic: e
                    }), e === si.HISTORICAL_AVERAGE && {
                        trafficTime: {
                            day: a.getDay(),
                            hour: (o = a.getHours()) !== null && o !== void 0 ? o : 0,
                            minute: (n = a.getMinutes()) !== null && n !== void 0 ? n : 0
                        }
                    }), e === si.LIVE && {
                        trafficTime: {
                            hour: 0
                        }
                    })
                }
            });
        },
        onTrafficTimeChange: e => {
            t.actions.notifyUpdateRoute(t.id, {
                index: t.featureIndex,
                update: {
                    routeWidth: Object.assign(Object.assign({}, t.route.routeWidth), {
                        trafficTime: e
                    })
                }
            });
        },
        onTrafficRefresh: e => {
            if (e) {
                t.actions.notifyDrawAll(t.id);
            } else {
                t.actions.notifyDrawRoute(t.id, t.featureIndex);
            }
        }
    }), e.createElement(UDe, {
        label: f({
            key: H ? "GeographicAreaPanel.time.minutes.txt" : t.route.unit === ai.MILE ? "GeographicAreaPanel.distance.miles.txt" : "GeographicAreaPanel.distance.kilometer.txt"
        }),
        className: VDe.formField,
        minimum: 0,
        maximum: 99,
        stepSize: 1,
        onChange: e => {
            var o;
            t.actions.notifyUpdateRoute(t.id, {
                index: t.featureIndex,
                update: {
                    routeWidth: Object.assign(Object.assign({}, t.route.routeWidth), {
                        amount: [ (o = e.numericValue) !== null && o !== void 0 ? o : 0 ]
                    })
                }
            });
        },
        editMode: "combo",
        value: ((m = (u = t.route.routeWidth) === null || u === void 0 ? void 0 : u.amount) === null || m === void 0 ? void 0 : m.length) === 1 ? (p = t.route.routeWidth) === null || p === void 0 ? void 0 : p.amount[0] : 1
    })))), e.createElement(Iz, {
        variant: "standard"
    }), e.createElement("div", {
        ref: B,
        className: VDe.footer
    }, e.createElement(QM, {
        className: VDe.footerButton,
        disabled: !j,
        text: f({
            key: t.route.isRendered === undefined ? "RoutePanel.draw.txt" : "RoutePanel.update.txt"
        }),
        onPress: () => {
            t.actions.notifyDrawRoute(t.id, t.featureIndex);
        }
    })));
};

const KDe = yo(((e, t) => {
    var o;
    const {features: n, autoLinkToPins: a, routeArrows: r, routeArrowType: s, linkingEnabled: i, canDoPremiumServices: l, pinModeEnabled: c, locationCandidate: d} = (o = Xfe(e, t.id)) !== null && o !== void 0 ? o : {};
    const u = n === null || n === void 0 ? void 0 : n[t.featureIndex];
    if (!u || u.type !== "route") {
        throw new Error("Route not found");
    }
    return {
        autoLinkToPins: a,
        route: u,
        routeArrows: r,
        routeArrowType: s,
        features: n,
        linkingEnabled: i,
        canDoPremiumServices: l,
        pinModeEnabled: c,
        locationCandidate: d
    };
}), (e => ({
    actions: bo(npe.actions, e)
})))(GDe);

function WDe(e) {
    const {ref: t, onResize: o} = e;
    const n = ay();
    const a = e => {
        const o = t === null || t === void 0 ? void 0 : t.current;
        if (!o) return;
        const a = {
            width: parseInt(o.style.width),
            height: parseInt(o.style.height)
        };
        const r = {
            width: n ? a.width - e.deltaX : a.width + e.deltaX,
            height: a.height + e.deltaY
        };
        if (!isNaN(parseFloat(o.style.minWidth))) {
            r.width = Math.max(r.width, parseFloat(o.style.minWidth));
        }
        if (!isNaN(parseFloat(o.style.minHeight))) {
            r.height = Math.max(r.height, parseFloat(o.style.minHeight));
        }
        if (!isNaN(parseFloat(o.style.maxWidth))) {
            r.width = Math.min(r.width, parseFloat(o.style.maxWidth));
        }
        if (!isNaN(parseFloat(o.style.maxHeight))) {
            r.height = Math.min(r.height, parseFloat(o.style.maxHeight));
        }
        return r;
    };
    const {startDrag: r, abortDrag: s} = uO({
        onDrag: (e, t) => {
            o(a(t));
        },
        onDragEnd: (e, t) => {
            o(a(t));
        }
    });
    const i = e => {
        const t = 5;
        switch (e.key) {
          case "ArrowLeft":
            o(a({
                deltaX: -t,
                deltaY: 0
            }));
            break;

          case "ArrowRight":
            o(a({
                deltaX: t,
                deltaY: 0
            }));
            break;

          case "ArrowUp":
            o(a({
                deltaX: 0,
                deltaY: -t
            }));
            break;

          case "ArrowDown":
            o(a({
                deltaX: 0,
                deltaY: t
            }));
            break;
        }
    };
    return {
        startResize: e => {
            if (e.button !== 0) return;
            r([ e.clientX, e.clientY ]);
            e.preventDefault();
        },
        onArrowKeyResize: i,
        abortResize: s
    };
}

var $De = "sas_components-ObjectSearch-Panel_container";

var YDe = "sas_components-ObjectSearch-Panel_container-inner";

var qDe = "sas_components-ObjectSearch-Panel_resizeGrabber";

var XDe = {
    container: $De,
    containerInner: YDe,
    resizeGrabber: qDe
};

function ZDe(t) {
    var o;
    const n = (o = t.size) !== null && o !== void 0 ? o : {
        width: 350,
        height: 400
    };
    const r = C_();
    const s = JDe(r);
    const i = c(null);
    const {startResize: l, onArrowKeyResize: d, abortResize: u} = WDe({
        ref: i,
        onResize: e => {
            if (e) {
                t.onSizeChange(e);
            }
        }
    });
    const m = Sye(t.onSizeChange);
    a((() => {
        var e, o;
        if (t.maxHeight !== undefined && t.maxHeight < n.height || t.maxWidth !== undefined && t.maxWidth < n.width) {
            m.current({
                height: Math.min(n.height, (e = t.maxHeight) !== null && e !== void 0 ? e : n.height),
                width: Math.min(n.width, (o = t.maxWidth) !== null && o !== void 0 ? o : n.width)
            });
        }
    }), [ n.height, n.width, t.maxHeight, t.maxWidth, m ]);
    return e.createElement("div", {
        ref: i,
        className: ke(XDe.container, t.className),
        style: Object.assign(Object.assign({
            height: n.height,
            width: n.width,
            maxHeight: t.maxHeight,
            maxWidth: t.maxWidth,
            minHeight: t.minHeight,
            minWidth: t.minWidth
        }, I_(s, "panel")), t.style),
        tabIndex: -1
    }, e.createElement(Re, {
        className: XDe.containerInner,
        key: t.contentKey,
        disabled: !t.autofocus
    }, t.children), e.createElement("div", {
        className: XDe.resizeGrabber,
        tabIndex: 0,
        onMouseDown: l,
        onMouseUp: u,
        onKeyDown: d
    }, e.createElement(MM, {
        icon: qT
    })));
}

function JDe(e) {
    return e.backgroundsDepth.standard;
}

const QDe = t => {
    var o;
    const n = $be();
    const a = t.featurePendingRedraw !== undefined && t.featurePendingRedraw.index >= 0 ? (o = t.features) === null || o === void 0 ? void 0 : o[t.featurePendingRedraw.index] : undefined;
    return e.createElement(oW, {
        type: "warning",
        isOpen: a !== undefined,
        title: n({
            key: (a === null || a === void 0 ? void 0 : a.type) === "area" ? "DiscardChangesDialog.title.area.txt" : "DiscardChangesDialog.title.route.txt"
        }),
        text: n({
            key: (a === null || a === void 0 ? void 0 : a.type) === "area" ? "DiscardChangesDialog.text.area.txt" : "DiscardChangesDialog.text.route.txt",
            args: {
                label: (a === null || a === void 0 ? void 0 : a.name) || ""
            }
        }),
        firstAction: {
            text: n({
                key: "DiscardChangesDialog.discard.txt"
            }),
            onPress: () => {
                var e;
                if (t.featurePendingRedraw !== undefined) {
                    if (!t.featurePendingRedraw.pendingNavSelection) {
                        t.onResetFocus();
                    } else if (t.featurePendingRedraw.pendingNavSelection.length > 0) {
                        const e = t.featurePendingRedraw.pendingNavSelection[0].index;
                        setTimeout((() => {
                            t.actions.notifyUpdateSelection(t.id, {
                                features: [ e ],
                                navigate: true
                            });
                        }), 0);
                    }
                    if ((a === null || a === void 0 ? void 0 : a.type) === "area") {
                        t.actions.notifyClearArea(t.id, {
                            index: t.featurePendingRedraw.index,
                            revertChanges: true
                        });
                    } else if ((a === null || a === void 0 ? void 0 : a.type) === "route") {
                        t.actions.notifyClearRoute(t.id, {
                            index: t.featurePendingRedraw.index,
                            revertChanges: true
                        });
                    }
                    t.actions.update(t.id, Object.assign({
                        featurePendingRedraw: undefined
                    }, ((e = t.featurePendingRedraw.pendingNavSelection) === null || e === void 0 ? void 0 : e.length) === 0 && {
                        navSelection: []
                    }));
                }
            }
        },
        secondAction: {
            text: n({
                key: "DiscardChangesDialog.cancel.txt"
            }),
            onPress: () => {
                if (t.featurePendingRedraw !== undefined) {
                    t.actions.notifyUpdateSelection(t.id, {
                        features: [ t.featurePendingRedraw.index ]
                    });
                }
                t.actions.update(t.id, {
                    featurePendingRedraw: undefined
                });
            },
            isDefault: true
        }
    });
};

const eLe = yo(((e, t) => {
    var o;
    const {features: n, featurePendingRedraw: a} = (o = Xfe(e, t.id)) !== null && o !== void 0 ? o : {};
    return {
        features: n,
        featurePendingRedraw: a
    };
}), (e => ({
    actions: bo(npe.actions, e)
})))(QDe);

const tLe = t => {
    var o, n, a, r, s, i;
    const l = $be();
    const c = ((n = (o = t.featureErrorState) === null || o === void 0 ? void 0 : o.messages) === null || n === void 0 ? void 0 : n.join("\n\n")) || "";
    return e.createElement(oW, {
        type: ((a = t.featureErrorState) === null || a === void 0 ? void 0 : a.type) || "error",
        isOpen: t.featureInErrorState !== undefined,
        title: l({
            key: ((r = t.featureInErrorState) === null || r === void 0 ? void 0 : r.type) === "area" ? "FeatureErrorDialog.title.area.txt" : "FeatureErrorDialog.title.route.txt"
        }),
        text: ((s = t.featureErrorState) === null || s === void 0 ? void 0 : s.type) === "information" ? c : l({
            key: ((i = t.featureInErrorState) === null || i === void 0 ? void 0 : i.type) === "area" ? "FeatureErrorDialog.text.area.txt" : "FeatureErrorDialog.text.route.txt"
        }),
        detailText: c,
        firstAction: {
            text: l({
                key: "FeatureErrorDialog.close.txt"
            }),
            onPress: () => {
                t.actions.update(t.id, {
                    featureErrorState: undefined
                });
            }
        }
    });
};

const oLe = yo(((e, t) => {
    var o;
    const {features: n, featureErrorState: a} = (o = Xfe(e, t.id)) !== null && o !== void 0 ? o : {};
    const r = a !== undefined && a.index >= 0 ? n === null || n === void 0 ? void 0 : n[a.index] : undefined;
    return {
        featureInErrorState: r,
        featureErrorState: a
    };
}), (e => ({
    actions: bo(npe.actions, e)
})))(tLe);

var nLe = "sas_components-ObjectSearch-ObjectSearch_position-top-left";

var aLe = "sas_components-ObjectSearch-ObjectSearch_container";

var rLe = "sas_components-ObjectSearch-ObjectSearch_enable-pointer";

var sLe = "sas_components-ObjectSearch-ObjectSearch_button";

var iLe = "sas_components-ObjectSearch-ObjectSearch_button-container";

var lLe = "sas_components-ObjectSearch-ObjectSearch_hidden";

var cLe = "sas_components-ObjectSearch-ObjectSearch_pin-container";

var dLe = {
    positionTopLeft: nLe,
    container: aLe,
    enablePointer: rLe,
    button: sLe,
    buttonContainer: iLe,
    hidden: lLe,
    pinContainer: cLe
};

const uLe = t => {
    var o, r;
    const [i, l] = n(false);
    const [d, u] = n(false);
    const m = C_();
    const p = $be();
    const f = c(false);
    const [g, h] = n(false);
    const [b, v] = n(false);
    const y = s((e => {
        f.current = e;
        v((t => t || e));
        h(e);
    }), []);
    const x = !!((o = t.navSelection) === null || o === void 0 ? void 0 : o.length);
    const S = t.pinned || (i || x || g || t.pinModeEnabled) && !d;
    {
        const e = zq();
        const [o, n] = (() => {
            if (!t.features || x) {
                return [];
            }
            const e = t.features.findIndex((e => {
                const t = Qme(e) ? e.routeLocations : [ e ];
                const o = t.some((e => typeof e === "number" ? true : epe(e.latLon)));
                return !o;
            }));
            if (e === -1) {
                return [];
            }
            const o = t.features[e].type;
            return [ e, o ];
        })();
        a((() => {
            if (typeof o === "number") {
                t.actions.notifyDeletePins(t.id, [ o ]);
                e(p({
                    key: n === "route" ? "RoutePanel.invalid.location.txt" : n === "area" ? "GeographicAreaPanel.invalid.location.txt" : "PinPanel.invalid.location.txt"
                }), {
                    closeable: true
                });
            }
        }), [ o, n, e, p, t.actions, t.id ]);
    }
    a((() => {
        if (S) {
            t.actions.notifyOpen(t.id);
        }
    }), [ t.id, t.actions, S ]);
    const [w, C] = kN((e => {
        const {height: t, width: o} = e.target.getBoundingClientRect();
        if ((R === null || R === void 0 ? void 0 : R.height) !== t || (R === null || R === void 0 ? void 0 : R.width) !== o) {
            k({
                height: t,
                width: o
            });
        }
    }));
    const {onBlur: E, onFocus: I} = JI((() => {
        y(false);
    }));
    {
        const e = !g && !t.pinned;
        a((() => {
            var o, n;
            if (!e || f.current) {
                return;
            }
            if ((n = (o = C()) === null || o === void 0 ? void 0 : o.firstElementChild) === null || n === void 0 ? void 0 : n.contains(document.activeElement)) {
                return;
            }
            t.actions.update(t.id, {
                navSelection: []
            });
        }), [ e, C, t.actions, t.id ]);
    }
    a((() => {
        if (i) {
            l(false);
        }
    }), [ i ]);
    a((() => {
        if (d) {
            y(false);
            u(false);
        }
    }), [ y, d ]);
    const _ = I_(pLe(m), "button");
    const D = c(null);
    const L = c(null);
    const T = c(false);
    a((() => {
        var e, t, o;
        if (T.current) {
            if (S) {
                (t = RF((e = D.current) !== null && e !== void 0 ? e : undefined)) === null || t === void 0 ? void 0 : t.focus();
            } else {
                (o = L.current) === null || o === void 0 ? void 0 : o.focus();
            }
        }
        T.current = false;
    }), [ S ]);
    const [R, k] = n(undefined);
    let A;
    let M;
    {
        M = c(undefined);
        if (!M.current) {
            M.current = new Map;
        }
        const e = SO();
        A = Object.assign(Object.assign({}, e), {
            openPopover(t) {
                const o = e.openPopover(t);
                M.current.set(o, t.popoverElement);
                return o;
            },
            closePopover(t) {
                M.current.delete(t);
                return e.closePopover(t);
            }
        });
    }
    if (!S) {
        return e.createElement("div", {
            className: ke(dLe.buttonContainer, dLe.positionTopLeft, !t.visible && dLe.hidden, t.className),
            style: Object.assign(Object.assign({}, _), t.style),
            ref: e => {
                var t;
                w((t = e === null || e === void 0 ? void 0 : e.parentElement) !== null && t !== void 0 ? t : null);
            },
            onContextMenu: e => {
                e.preventDefault();
            },
            onFocus: () => v(true)
        }, e.createElement(QM, {
            ref: L,
            className: dLe.button,
            style: _,
            variant: oN.Icon,
            icon: {
                icon: XR,
                tooltip: p({
                    key: "ObjectSearch.title.txt"
                })
            },
            onPress: () => {
                T.current = true;
                l(true);
            },
            tokens: () => ({
                bd: m.c.n_1
            })
        }));
    }
    let N;
    let O;
    if (((r = t.navSelection) === null || r === void 0 ? void 0 : r.length) === 1) {
        const o = t.navSelection[0];
        N = o.type;
        switch (o.type) {
          case "result":
            O = e.createElement(wDe, {
                id: t.id,
                searchIndex: o.index
            });
            break;

          case "pin":
          case "myLocationPin":
            O = e.createElement(uDe, {
                id: t.id,
                featureIndex: o.index
            });
            break;

          case "area":
            O = e.createElement(w_e, {
                id: t.id,
                featureIndex: o.index
            });
            break;

          case "route":
            O = e.createElement(KDe, {
                id: t.id,
                featureIndex: o.index
            });
            break;
        }
    }
    N = N !== null && N !== void 0 ? N : "main";
    O = O !== null && O !== void 0 ? O : e.createElement(F_e, {
        id: t.id,
        onCollapse: () => {
            if (t.pinned) {
                t.actions.setPinned(t.id, false);
            }
            T.current = true;
            u(true);
        }
    });
    return e.createElement(xO.Provider, {
        value: A
    }, e.createElement("div", {
        className: ke(dLe.container, dLe.positionTopLeft, t.className),
        style: t.style,
        onBlur: E,
        onFocus: () => {
            y(true);
            I();
        },
        onKeyDown: e => {
            if (e.key === "Escape") {
                T.current = true;
                u(true);
                t.actions.update(t.id, {
                    navSelection: []
                });
            }
        },
        ref: e => {
            var t;
            w((t = e === null || e === void 0 ? void 0 : e.parentElement) !== null && t !== void 0 ? t : null);
            D_(D, e);
        },
        onContextMenu: e => {
            e.preventDefault();
            e.stopPropagation();
        },
        role: "dialog",
        "aria-label": p({
            key: "ObjectSearch.title.txt"
        })
    }, e.createElement(De, {
        disabled: !b,
        lockProps: {
            style: {
                display: "flex"
            }
        },
        whiteList: e => {
            const t = [ D.current, document.getElementById("static-area"), ...M.current.values() ];
            return t.some((t => t === null || t === void 0 ? void 0 : t.contains(e)));
        }
    }, e.createElement(ZDe, {
        autofocus: b,
        className: dLe.enablePointer,
        maxHeight: R === null || R === void 0 ? void 0 : R.height,
        maxWidth: R === null || R === void 0 ? void 0 : R.width,
        minHeight: 100,
        minWidth: 100,
        size: t.panelSize,
        onSizeChange: e => t.actions.update(t.id, {
            panelSize: e
        }),
        contentKey: N
    }, e.createElement(JSe, {
        errorMessageKey: {
            key: "ReportContainer.component.renderError.txt"
        },
        style: {
            position: "static",
            height: "100%",
            width: "100%",
            padding: "1rem",
            boxSizing: "border-box"
        }
    }, e.createElement(f_, null, O))), e.createElement("div", {
        className: ke(dLe.pinContainer, dLe.enablePointer),
        style: _
    }, e.createElement(W1, {
        className: dLe.button,
        icon: {
            icon: t.pinned ? FR : Sk,
            tooltip: p({
                key: t.pinned ? "ObjectSearch.unpin.txt" : "ObjectSearch.pin.txt"
            })
        },
        pressed: t.pinned,
        onPress: () => t.actions.setPinned(t.id, !t.pinned),
        testId: Xg() ? "object-search-pin" : null,
        tokens: () => ({
            bd: m.c.n_1
        })
    }))), e.createElement(eLe, {
        id: t.id,
        onResetFocus: () => {
            y(false);
        }
    }), e.createElement(oLe, {
        id: t.id
    })));
};

const mLe = yo(((e, t) => {
    var o;
    const {pinned: n, navSelection: a, features: r, panelSize: s, pinModeEnabled: i, minPanelHeight: l} = (o = Xfe(e, t.id)) !== null && o !== void 0 ? o : {};
    return {
        pinned: n,
        navSelection: a,
        features: r,
        panelSize: s,
        pinModeEnabled: i,
        minPanelHeight: l
    };
}), (e => ({
    actions: bo(npe.actions, e)
})))(uLe);

function pLe(e) {
    return {
        "pin-bg": e.backgroundsDepth.standard.bg,
        bg: e.backgrounds.page.bg,
        bd: e.stateStandard.normal.bd,
        "hover-bd": e.stateStandard.normal.bd
    };
}

function fLe(e) {
    switch (e) {
      case Xs.PAN:
        return {
            key: "DragModeControl.button.pan.tip.txt",
            icon: zR
        };

      case Xs.RECTANGLE_SELECT:
        return {
            key: "DragModeControl.button.rectangular.tip.txt",
            icon: UR
        };

      case Xs.RADIAL_SELECT:
        return {
            key: "DragModeControl.button.circular.tip.txt",
            icon: sT
        };

      case Xs.POLYGON_SELECT:
      case Xs.FREEFORM_SELECT:
        return {
            key: "DragModeControl.button.freeform.tip.txt",
            icon: PT
        };

      case Xs.ZOOM:
        return {
            key: "DragModeControl.button.zoom.tip.txt",
            icon: Rk
        };

      case Xs.INVALID:
      case Xs.NONE:
      default:
        return;
    }
}

const gLe = t => {
    var r, i, l, c, d, u, m;
    const [p, f] = n([]);
    const g = twe();
    const h = s((() => {
        const e = g({
            type: "object",
            name: t.id
        }).map((({text: e, callback: t}, o) => ({
            type: "overflow",
            text: e,
            onSelected: t,
            id: `elementDecorator-customAction-${o}`
        })));
        f(e);
    }), [ g, t.id ]);
    const b = !t.selectionDisabled && !t.objectOverlaysDisabled;
    const v = b && !((r = t.busyState) === null || r === void 0 ? void 0 : r.isBusy) && (t.focused || t.selected || t.hasMouseHover);
    a((() => {
        if (v) {
            h();
        }
    }), [ h, v ]);
    const y = [];
    {
        const e = $be();
        const o = Rwe();
        if (t.maximizeState && o !== "object") {
            const {isMaximized: o, preferOverflowMenu: n} = t.maximizeState;
            y.push({
                type: "button",
                id: "elementDecorator-maximize",
                text: o ? e({
                    key: "ExpandControl.button.restore.txt"
                }) : e({
                    key: "ExpandControl.button.expand.txt"
                }),
                button: {
                    icon: o ? RR : wR,
                    tooltip: e(o ? e({
                        key: "ExpandControl.button.restore.tip.txt"
                    }) : e({
                        key: "ExpandControl.button.expand.tip.txt"
                    })),
                    preferOverflow: n
                },
                onSelected: () => {
                    t.birdActions.toggleMaximizedVisual(t.id);
                }
            });
        }
        if (t.overviewState) {
            const {isOverviewOn: o} = t.overviewState;
            y.push({
                type: "button",
                id: "elementDecorator-overview",
                text: o ? e({
                    key: "CompositeGraphElementDecorator.hideOverview.txt"
                }) : e({
                    key: "CompositeGraphElementDecorator.showOverview.txt"
                }),
                button: {
                    icon: Dk
                },
                onSelected: () => {
                    t.overviewActions.toggleOverview(t.id);
                    t.overviewActions.notifyToggleOverview(t.id);
                }
            });
        }
        if ((i = t.layerVisibilityState) === null || i === void 0 ? void 0 : i.layers.length) {
            y.push({
                type: "button",
                id: "elementDecorator-layerVisiblity",
                text: e({
                    key: "GraphElementDecorator.layers.txt"
                }),
                button: {
                    icon: gR
                },
                subSections: [ {
                    items: t.layerVisibilityState.layers.map(((e, o) => ({
                        text: e.text,
                        icon: e.icon,
                        checked: e.visible,
                        keepOpen: true,
                        onSelected: () => t.layerVisibilityActions.notifyToggleLayerVisibility(t.id, o)
                    })))
                } ]
            });
        }
        if (t.dragModeState) {
            const o = [];
            for (const n of t.dragModeState.availableModes) {
                if (n === t.dragModeState.currentMode) {
                    continue;
                }
                const a = fLe(n);
                if (a) {
                    o.push({
                        text: e({
                            key: a.key
                        }),
                        onSelected: () => t.dragModeActions.setCurrentMode(t.id, n),
                        icon: a.icon
                    });
                }
            }
            const n = fLe(t.dragModeState.currentMode);
            if (n && o.length) {
                y.push({
                    type: "button",
                    id: "elementDecorator-dragMode",
                    text: e({
                        key: n.key
                    }),
                    button: {
                        icon: n.icon
                    },
                    subSections: [ {
                        items: o
                    } ]
                });
            }
        }
        if (t.zoomState) {
            y.push({
                type: "overflow",
                id: "elementDecorator-zoom",
                text: e({
                    key: "ZoomControl.button.tip.txt"
                }),
                subSections: [ {
                    items: [ {
                        text: e({
                            key: "ZoomControl.button.display.txt"
                        }),
                        icon: t.zoomState.hideZoomControls ? WL : aT,
                        onSelected: () => t.zoomActions.toggleZoomControls(t.id)
                    } ]
                }, {
                    items: [ {
                        text: e({
                            key: "ZoomControl.button.zoomin.txt"
                        }),
                        icon: Ak,
                        disabled: !t.zoomState.zoomInEnabled,
                        onSelected: () => t.zoomActions.zoomIn(t.id),
                        keepOpen: true
                    }, {
                        text: e({
                            key: "ZoomControl.button.zoomout.txt"
                        }),
                        icon: Nk,
                        disabled: !t.zoomState.zoomOutEnabled,
                        onSelected: () => t.zoomActions.zoomOut(t.id),
                        keepOpen: true
                    } ]
                }, {
                    items: [ {
                        text: e({
                            key: "ZoomControl.button.reset.txt"
                        }),
                        icon: Ok,
                        onSelected: () => t.zoomActions.resetZoom(t.id)
                    } ]
                } ]
            });
        }
        if (t.visualizationState.acceleratorEnabled) {
            y.push({
                type: "overflow",
                id: "elementDecorator-accelerator",
                text: e({
                    key: "ObjectToolbarIcon.Accelerator.txt"
                }),
                onSelected: () => {
                    t.visualizationActions.openGraphAccelerator(t.id);
                }
            });
        }
    }
    return b ? e.createElement(o, null, t.hasObjectSearch && e.createElement(mLe, {
        id: t.id,
        visible: v
    }), e.createElement(cwe, {
        id: t.id,
        style: {
            maxWidth: (l = t.elementDecoratorState) === null || l === void 0 ? void 0 : l.maxWidth
        },
        accessibilityLabel: t.accessibilityLabel,
        autofocusId: t.autofocusMaximizeButton ? "elementDecorator-maximize" : undefined,
        visible: v,
        alwaysShowOverflow: (c = t.elementDecoratorState) === null || c === void 0 ? void 0 : c.alwaysShowOverflow,
        items: [ ...y, ...(u = (d = t.elementDecoratorState) === null || d === void 0 ? void 0 : d.toolbarItems) !== null && u !== void 0 ? u : [], ...p ],
        buttons: (m = t.elementDecoratorState) === null || m === void 0 ? void 0 : m.toolbarButtons,
        onOpen: () => {
            t.elementDecoratorActions.notifyToolbarOpen(t.id);
            h();
        }
    }, !t.zoomState || t.zoomState.hideZoomControls ? null : e.createElement(gwe, {
        canZoomIn: t.zoomState.zoomInEnabled,
        canZoomOut: t.zoomState.zoomOutEnabled,
        onZoomIn: () => t.zoomActions.zoomIn(t.id),
        onZoomOut: () => t.zoomActions.zoomOut(t.id)
    }))) : null;
};

const hLe = yo(((e, t) => {
    var o;
    return {
        focused: e.bird.focusedVisual === t.id,
        selected: e.bird.selectedVisual === t.id,
        accessibilityLabel: e.accessibilityLabel[t.id],
        hasObjectSearch: !!Xfe(e, t.id),
        selectionDisabled: (o = hfe(e, t.id)) !== null && o !== void 0 ? o : false,
        overviewState: Kfe(e, t.id),
        layerVisibilityState: Wfe(e, t.id),
        visualizationState: jfe(e, t.id),
        zoomState: Ufe(e, t.id),
        busyState: gfe(e, t.id),
        dragModeState: Hfe(e, t.id),
        maximizeState: $fe(e, t.id),
        elementDecoratorState: qfe(e, t.id),
        objectOverlaysDisabled: e.ui.objectOverlaysDisabled
    };
}), (e => ({
    overviewActions: bo(Pme.actions, e),
    layerVisibilityActions: bo(ape.actions, e),
    dragModeActions: bo(Nme.actions, e),
    zoomActions: bo(Mme.actions, e),
    visualizationActions: bo(Lue.actions, e),
    birdActions: bo(Fue.actions, e),
    elementDecoratorActions: bo(Tme.actions, e)
})))(gLe);

const bLe = ({warning: t, iconStyle: a}) => {
    const [r, s] = n(false);
    const i = c(null);
    const l = c(false);
    const d = C_();
    return t ? e.createElement(o, null, e.createElement(MM, {
        ref: i,
        style: a,
        tooltip: t,
        icon: oA,
        onPress: () => {
            s(true);
        }
    }), e.createElement(zO, {
        focusLockProps: {
            onDeactivation() {
                if (l.current) {
                    l.current = false;
                    setTimeout((() => {
                        var e;
                        (e = i.current) === null || e === void 0 ? void 0 : e.focus();
                    }));
                }
            }
        },
        onEscape: () => {
            l.current = true;
        },
        returnFocus: false,
        referenceElementRef: i,
        isOpen: r,
        placement: "bottom",
        onClose: () => s(false),
        focusable: true,
        style: {
            color: d.c.colorTextDefault
        }
    }, t)) : null;
};

var vLe = "sas_components-StatusLayout-StatusLayout_status-overlay";

var yLe = "sas_components-StatusLayout-StatusLayout_content";

var xLe = {
    statusOverlay: vLe,
    content: yLe
};

const SLe = t => {
    var {warningState: r, statusState: s, busyState: i, parentBusyState: l} = t, d = T(t, [ "warningState", "statusState", "busyState", "parentBusyState" ]);
    const u = $be();
    const m = r.type === "error" ? r.message : null;
    const p = r.type === "warning" ? r.message : null;
    const f = r.type === "information" ? r.message : null;
    const [g, h] = n(true);
    const [b, v] = n(false);
    let y;
    let x = true;
    const S = (i === null || i === void 0 ? void 0 : i.isBusy) && !(l === null || l === void 0 ? void 0 : l.isBusy);
    if (m) {
        y = {
            mode: "error",
            text: m
        };
    } else if (f) {
        y = {
            mode: "information",
            text: f
        };
    } else if (s) {
        y = {
            mode: s.type,
            onPress: s.isPressable ? () => d.statusActions.notifyPress(d.id) : undefined
        };
    } else if (i && S) {
        if (i.indicatorVisible && (g || i.isPaused)) {
            if (i.isPaused) {
                y = {
                    mode: b ? "resumeLoading" : "loadingCanceled",
                    "aria-label": u({
                        key: "ObjectStatus.resumeLoading.txt"
                    })
                };
            } else if (i.canPause) {
                y = {
                    mode: b ? "cancelLoading" : "busy",
                    "aria-label": u({
                        key: "ObjectStatus.cancelLoading.txt"
                    })
                };
            } else {
                y = {
                    mode: "busy"
                };
            }
            if (i.canPause) {
                y.onMouseEnter = () => v(true);
                y.onMouseLeave = () => v(false);
                y.onPress = () => d.busyActions.togglePaused(d.id);
            }
        }
    } else {
        x = false;
    }
    a((() => {
        if (!S) {
            h(false);
            return;
        }
        const e = setTimeout((() => h(true)), 350);
        return () => {
            clearTimeout(e);
        };
    }), [ S ]);
    const w = x && y && !(l === null || l === void 0 ? void 0 : l.isBusy) ? .3 : undefined;
    const C = c(null);
    const E = c(false);
    const I = !!y;
    a((() => {
        var e;
        if (!I && E.current && C.current) {
            (e = RF(C.current)) === null || e === void 0 ? void 0 : e.focus();
        }
    }), [ I ]);
    const _ = ELe();
    return e.createElement(o, null, e.createElement("div", {
        ref: C,
        className: xLe.content,
        style: {
            visibility: m ? "hidden" : undefined,
            opacity: w
        }
    }, e.createElement(CLe.Provider, {
        value: _ || x
    }, d.children)), p ? e.createElement(bLe, {
        warning: p,
        iconStyle: {
            position: "absolute",
            insetInlineEnd: "2px",
            bottom: "2px",
            opacity: w
        }
    }) : null, x ? e.createElement("div", {
        className: xLe.statusOverlay,
        "data-testid": S && Xg() ? "busyOverlay" : undefined,
        onFocus: () => E.current = true,
        onBlur: () => E.current = false,
        style: {
            pointerEvents: d.isContainer ? "none" : undefined
        }
    }, y ? e.createElement(WSe, Object.assign({
        style: {
            pointerEvents: "auto"
        }
    }, y)) : null) : null);
};

const wLe = yo(((e, t) => ({
    busyState: gfe(e, t.id),
    parentBusyState: gfe(e, bfe(e, t.id).compositeParentKey || ""),
    statusState: zfe(e, t.id),
    warningState: Pfe(e, t.id)
})), (e => ({
    statusActions: bo(Vme.actions, e),
    busyActions: bo(Uue.actions, e)
})))(SLe);

const CLe = e.createContext(false);

function ELe() {
    return l(CLe);
}

const ILe = t => {
    const {onKeyDown: o, onContextMenu: r} = xye(t.onReportContextMenu);
    a((() => {
        if (t.autofocusMaximizeButton) {
            t.actions.setMaximizeAutofocusVisualId(null);
        }
    }), [ t.autofocusMaximizeButton, t.actions ]);
    const s = MSe(t.layoutState.promptConstraints);
    const i = Object.assign(Object.assign(Object.assign({}, t.layoutState.position), t.layoutState.style), {
        boxSizing: "border-box",
        isolation: "isolate"
    });
    if (t.autoLayout) {
        i.position = "relative";
        i.flexShrink = 0;
        i.overflow = "hidden";
        i.display = "flex";
        if (t.layoutState.constraints) {
            const e = t.layoutState.constraints.minWidth || 100;
            const o = t.layoutState.constraints.minHeight || 0;
            const {padding: n = 0, borderWidth: a = 0} = t.layoutState.style || {};
            const r = (n + a) * 2;
            i.minWidth = e + r;
            i.minHeight = o + r;
        }
    } else {
        i.position = "absolute";
    }
    Object.assign(i, t.style);
    if (i.position === "absolute" && !t.layoutState.position) {
        i.display = "none";
    }
    const [l, d] = n(false);
    const u = pSe();
    const m = c(null);
    const p = c(false);
    const f = ELe();
    let g = null;
    if (f && !t.isContainer) {
        g = e.createElement("div", {
            style: {
                position: "absolute",
                width: "100%",
                height: "100%",
                top: 0,
                left: 0
            }
        });
    }
    return e.createElement("div", {
        ref: m,
        style: Object.assign(Object.assign({}, i), s),
        "data-testid": Xg() ? t.id : null,
        onFocusCapture: () => t.actions.focusVisual(t.id),
        onBlur: () => t.actions.focusVisual(null),
        onMouseEnter: () => d(true),
        onMouseLeave: () => d(false),
        onContextMenu: r,
        onKeyDown: o,
        tabIndex: -1,
        onMouseDown: () => p.current = true,
        onMouseUp: () => p.current = false,
        onFocus: e => {
            var t;
            if (e.target === m.current && !p.current) {
                (t = RF(m.current)) === null || t === void 0 ? void 0 : t.focus();
            }
        }
    }, e.createElement("div", {
        style: {
            position: "relative",
            width: "100%",
            height: "100%",
            display: "flex",
            outline: "none"
        }
    }, e.createElement("div", {
        style: {
            width: "100%",
            display: "flex",
            flexDirection: "column",
            flexGrow: 1,
            flexShrink: 1,
            flexBasis: t.layoutState.constraints ? t.layoutState.constraints.preferredWidth : undefined,
            justifyContent: t.contentJustification
        }
    }, t.children)), e.createElement(hLe, {
        id: t.id,
        hasMouseHover: l && !g,
        autofocusMaximizeButton: t.autofocusMaximizeButton
    }), u && e.createElement(u, {
        id: t.id
    }), g);
};

const _Le = yo(((e, t) => ({
    layoutState: bfe(e, t.id),
    autofocusMaximizeButton: e.bird.maximizeAutofocusVisualId === t.id,
    isContainer: !!e.birdElements.Container[t.id]
})), (e => ({
    actions: bo(Fue.actions, e)
})))(ILe);

function DLe(e) {
    const t = new DOMParser;
    const o = t.parseFromString(e.__html, "text/html");
    for (const e of o.querySelectorAll('[style*="text-align"]')) {
        if (!(e instanceof HTMLElement)) {
            continue;
        }
        const t = e.style.textAlign;
        if (t === "left") {
            e.style.textAlign = "start";
        } else if (t === "right") {
            e.style.textAlign = "end";
        }
    }
    return {
        __html: o.body.innerHTML
    };
}

const LLe = ({id: t, title: o, actions: n, additionalInformation: a, customPadding: s}) => {
    const i = C_();
    const l = RLe();
    const c = r((() => !o ? undefined : DLe({
        __html: o
    })), [ o ]);
    return !c ? null : e.createElement("div", {
        style: I_({
            fg: i.c.colorTextDefault,
            "font-size": i.font.size.xxl,
            "custom-padding": typeof s === "number" ? s + "px" : s
        }, "title"),
        className: a ? Cpe.titleContainerFlex : Cpe.titleContainer,
        onDoubleClick: () => {
            n.notifyDoubleClick(t);
        }
    }, e.createElement("div", {
        className: Cpe.title,
        "data-testid": Xg() ? t + "-title" : null,
        dangerouslySetInnerHTML: c
    }), a && e.createElement(ALe, {
        titleId: l,
        popupContent: e.createElement(MLe, {
            titleId: l,
            title: a.title,
            text: a.text
        })
    }));
};

const TLe = yo(((e, t) => {
    var o, n;
    const {title: a, additionalInformation: r} = (o = Cfe(e, t.id)) !== null && o !== void 0 ? o : {};
    const {titlePadding: s} = (n = bfe(e, t.id)) !== null && n !== void 0 ? n : {};
    return {
        title: a,
        additionalInformation: r,
        customPadding: s
    };
}), (e => ({
    actions: bo(Pue.actions, e)
})))(LLe);

const RLe = MA("vaReactCore_InfoButtonTitle");

const kLe = {
    key: "TitleInfoButton.tooltip.txt"
};

const ALe = t => {
    const [a, r] = n(false);
    const s = c(null);
    const i = $be(kLe);
    return e.createElement(o, null, e.createElement(QM, {
        ref: s,
        variant: oN.Icon,
        icon: {
            icon: iR
        },
        tooltip: i,
        ariaLabel: i,
        "aria-haspopup": true,
        onPress: () => {
            r(true);
        }
    }), e.createElement(zO, {
        role: "dialog",
        focusable: true,
        referenceElementRef: s,
        placement: "auto",
        ariaLabelledby: t.titleId,
        isOpen: a,
        onClose: () => {
            r(false);
        }
    }, t.popupContent));
};

const MLe = t => {
    const o = C_();
    const n = {
        fg: o.c.colorTextDefault,
        "title-fg": o.c.colorTextPrimary,
        "font-weight-default": o.fontNova.weight.default,
        "font-weight-thick": o.fontNova.weight.thick,
        "font-size-m": o.fontNova.size.m,
        pd: o.spacing.core.m,
        "tiny-pd": o.spacing.core.xs,
        "small-pd": o.spacing.core.s
    };
    return e.createElement("div", {
        className: Cpe.helpContent,
        style: I_(n, "info-popup-content")
    }, e.createElement("span", {
        id: t.titleId,
        className: Cpe.helpContentHeader
    }, t.title), e.createElement("p", {
        className: Cpe.helpContentText
    }, t.text));
};

const NLe = t => {
    const [o, a] = n(0);
    const [r] = kN((e => {
        a(e.contentRect.height);
    }));
    return e.createElement(_Le, {
        style: Object.assign({
            height: o + (t.childHeight || 0),
            minHeight: o + (t.childMinHeight || 0)
        }, t.style),
        id: t.id,
        autoLayout: true,
        onReportContextMenu: t.onReportContextMenu,
        "test-id": Xg() ? t.id : undefined
    }, e.createElement("div", {
        ref: r
    }, e.createElement(TLe, {
        id: t.id
    })), t.children);
};

const OLe = yo(((e, t) => {
    const o = e.ui.birdLayout.byId[t.id];
    const {minHeight: n = undefined, preferredHeight: a = undefined} = o && o.constraints || {};
    const {padding: r = 0, borderWidth: s = 0} = o && o.style || {};
    const i = (r + s) * 2;
    return {
        childMinHeight: n !== undefined ? n + i : undefined,
        childHeight: a !== undefined ? a + i : undefined
    };
}))(NLe);

function PLe(e, t) {
    return !!(t.CheckboxList[e] || t.RadioList[e] || t.ButtonBar[e] && t.ButtonBar[e].orientation === "vertical");
}

const BLe = function({id: t, actions: o, host: n, iframeSandbox: a, state: r, accessibilityLabel: s}) {
    const {jobResultsUri: i, jobResultsContentSrc: l, jobResultsContentSrcDoc: c} = r;
    const u = 100;
    d((() => {
        o.setConstraints(t, {
            minWidth: u,
            minHeight: u
        });
    }), [ o, t ]);
    if (!l && !c && (!n || !i)) {
        return null;
    }
    const m = c ? undefined : l || `${n}${i}`;
    return e.createElement("iframe", {
        style: {
            borderWidth: 0,
            flexGrow: 1,
            flexShrink: 0,
            minWidth: u + "px",
            minHeight: u + "px"
        },
        srcDoc: c,
        src: m,
        sandbox: a || "allow-presentation allow-scripts allow-same-origin allow-forms",
        "aria-label": s
    });
};

const zLe = yo(((e, t) => ({
    state: Afe(e, t.id),
    host: e.transport.serverHost,
    iframeSandbox: e.transport.iframeSandbox,
    accessibilityLabel: Gfe(e, t.id)
})), (e => ({
    actions: bo({
        setConstraints: Vde
    }, e)
})))(BLe);

var FLe = "sas_components-InfoBar-InfoBar_menu-button-container";

var jLe = "sas_components-InfoBar-InfoBar_read-only-container";

var VLe = "sas_components-InfoBar-InfoBar_menu-button";

var HLe = "sas_components-InfoBar-InfoBar_menu-button-label";

var ULe = "sas_components-InfoBar-InfoBar_italic";

var GLe = "sas_components-InfoBar-InfoBar_menu-button-value";

var KLe = "sas_components-InfoBar-InfoBar_menu-button-arrow";

var WLe = {
    menuButtonContainer: FLe,
    readOnlyContainer: jLe,
    menuButton: VLe,
    menuButtonLabel: HLe,
    italic: ULe,
    menuButtonValue: GLe,
    menuButtonArrow: KLe
};

const $Le = MA("InfoBarMenuButtonLabel");

const YLe = t => {
    var o, n, a, r, s, i, l, c, d;
    const u = C_();
    const m = $Le();
    const p = (a = (n = (o = t.style) === null || o === void 0 ? void 0 : o.font) === null || n === void 0 ? void 0 : n.fontSize) !== null && a !== void 0 ? a : u.font.size.m;
    const f = (i = (s = (r = t.style) === null || r === void 0 ? void 0 : r.normal) === null || s === void 0 ? void 0 : s.fg) !== null && i !== void 0 ? i : u.c.colorTextDefault;
    const g = I_({
        fg: f,
        "font-size": p,
        "font-family": (c = (l = t.style) === null || l === void 0 ? void 0 : l.font) === null || c === void 0 ? void 0 : c.fontFamily
    }, "info");
    if (t.state === undefined) {
        return null;
    } else if (t.state.sections === undefined) {
        return e.createElement("div", {
            className: WLe.readOnlyContainer,
            style: g
        }, !!t.state.field && e.createElement("span", {
            className: ke(WLe.menuButtonLabel, t.state.italicizeField && WLe.italic)
        }, t.state.field), !!t.state.value && e.createElement("span", {
            className: WLe.menuButtonValue,
            title: (d = t.state) === null || d === void 0 ? void 0 : d.tooltip
        }, t.state.value));
    } else {
        return e.createElement(eP, {
            sections: t.state.sections,
            onItemSelected: e => {
                if (t.state) {
                    const o = t.actions.notifyMenuButtonSelection;
                    o(t.id, {
                        menuButtonIndex: t.index,
                        location: e,
                        menu: t.state
                    });
                }
            },
            text: t.state.value,
            renderButton: o => {
                var n, a, r;
                var {setButtonRef: s, menuIsOpen: i, text: l} = o, c = T(o, [ "setButtonRef", "menuIsOpen", "text" ]);
                return e.createElement(ZM, Object.assign({
                    tokens: () => tP(!!i, c.variant, l, u)
                }, c, {
                    className: ke(WLe.menuButton, c.className),
                    ref: s,
                    variant: oN.Light,
                    "aria-haspopup": true,
                    ariaLabelledBy: m
                }), e.createElement("span", {
                    id: m,
                    className: ke(WLe.menuButtonLabel, ((n = t.state) === null || n === void 0 ? void 0 : n.italicizeField) && WLe.italic),
                    style: g
                }, (a = t.state) === null || a === void 0 ? void 0 : a.field), e.createElement("span", {
                    style: g,
                    className: WLe.menuButtonValue,
                    title: (r = t.state) === null || r === void 0 ? void 0 : r.tooltip
                }, l), e.createElement(MM, {
                    tokens: () => ({
                        fg: f
                    }),
                    className: WLe.menuButtonArrow,
                    icon: kL,
                    tooltip: "",
                    ariaHidden: true
                }));
            }
        });
    }
};

const qLe = yo(((e, t) => {
    var o;
    const n = (o = Vfe(e, t.id).menuButtons) === null || o === void 0 ? void 0 : o[t.index];
    return {
        state: n,
        style: yfe(e, t.id)
    };
}), (e => ({
    actions: bo(Nue.actions, e)
})))(YLe);

const XLe = t => t.menuButtonCount === 0 ? null : e.createElement("div", {
    className: WLe.menuButtonContainer
}, [ ...Array(t.menuButtonCount).keys() ].map((o => e.createElement(qLe, {
    key: o,
    id: t.id,
    index: o
}))));

const ZLe = yo(((e, t) => {
    var o, n;
    return {
        menuButtonCount: (n = (o = Vfe(e, t.id).menuButtons) === null || o === void 0 ? void 0 : o.length) !== null && n !== void 0 ? n : 0
    };
}))(XLe);

const JLe = ({id: t, style: o, breadcrumbs: n, setBreadcumbLayout: s, breadcrumbActions: i, warningState: l}) => {
    const c = C_();
    const d = r((() => Qbe(o === null || o === void 0 ? void 0 : o.font, c)), [ o === null || o === void 0 ? void 0 : o.font, c ]);
    const u = pve(d.fontFamily);
    const m = n.reduce(((e, t) => e + (t.items.length > 0 ? 1 : 0)), 0);
    a((() => {
        const e = Math.max(28, eve(d) + 8 + 2);
        s(t, {
            height: m * e
        });
    }), [ u, m, s, t, d ]);
    const p = l.type === "error";
    return !p && n.length ? e.createElement("div", null, n.map((n => e.createElement(eTe, Object.assign({
        id: t
    }, n, {
        actions: i,
        key: n.name,
        tokens: () => {
            var e, t;
            return {
                fg: (e = o === null || o === void 0 ? void 0 : o.normal) === null || e === void 0 ? void 0 : e.fg,
                fontFamily: (t = o === null || o === void 0 ? void 0 : o.font) === null || t === void 0 ? void 0 : t.fontFamily
            };
        }
    }))))) : null;
};

const QLe = yo(((e, t) => ({
    style: yfe(e, t.id),
    breadcrumbs: Ife(e, t.id),
    warningState: Pfe(e, t.id)
})), (e => ({
    setBreadcumbLayout: bo(jde.actions.setBreadcumbLayout, e),
    breadcrumbActions: bo(fue.actions, e)
})))(JLe);

const eTe = ({id: t, items: o, name: n, label: a, actions: s, tokens: i}) => {
    const l = $be();
    const c = r((() => ({
        values: [ l(a) ],
        selectedIndex: 0,
        isSingle: true
    })), [ l, a ]);
    const d = r((() => [ c, ...o || [] ]), [ c, o ]);
    return o.length ? e.createElement(uZ, {
        tokens: i,
        orientation: "AUTO",
        values: d,
        selectCrumb: e => {
            s.selectBreadcrumb(t, {
                name: n,
                index: e - 1
            });
        },
        openCrumb: e => {
            s.openBreadcrumb(t, {
                name: n,
                index: e - 1
            });
        },
        selectCrumbValue: (e, o) => {
            s.selectBreadcrumbItem(t, {
                name: n,
                index: e - 1,
                valueIndex: o
            });
        }
    }) : null;
};

function tTe(t, o, n) {
    if (!o || !t) {
        return null;
    }
    const a = [];
    for (const r of t) {
        a.push(e.createElement(nTe, Object.assign({
            key: r,
            id: r,
            state: o
        }, n)));
    }
    return a;
}

const oTe = ({id: t, state: o, includePreferredSizing: n, style: a, contentJustification: r, actions: s}) => {
    const i = c(null);
    const l = e => {
        var o;
        s.setReportContextMenuTarget(t, e.nativeEvent.timeStamp);
        (o = i.current) === null || o === void 0 ? void 0 : o.call(i, e);
    };
    const d = r === "center";
    const u = !!n && PLe(t, o);
    return e.createElement(JSe, {
        visualId: t,
        errorMessageKey: {
            key: "ReportContainer.component.renderError.txt"
        }
    }, u ? e.createElement(OLe, {
        style: a,
        id: t,
        onReportContextMenu: l
    }, sTe(t, o, !!n, true)) : e.createElement(_Le, {
        style: a,
        id: t,
        autoLayout: n,
        onReportContextMenu: l,
        "test-id": Xg() ? t : undefined,
        contentJustification: r
    }, e.createElement(TLe, {
        id: t
    }), sTe(t, o, !!n, !d)));
};

const nTe = yo(undefined, (e => ({
    actions: bo(yme.actions, e)
})))(oTe);

function aTe(t, o, n) {
    if (o.ButtonBar[t]) {
        return e.createElement(Hxe, {
            id: t,
            preferredSizing: n
        });
    }
    if (o.CheckboxList[t]) {
        return e.createElement(Bye, {
            id: t,
            preferredSizing: n
        });
    }
    if (o.RadioList[t]) {
        return e.createElement(Lxe, {
            id: t,
            preferredSizing: n
        });
    }
    if (o.ComboBox[t]) {
        return e.createElement(hve, {
            id: t,
            preferredSizing: n
        });
    }
    if (o.Slider[t]) {
        return e.createElement(xxe, {
            id: t,
            preferredSizing: n
        });
    }
    if (o.TextField[t]) {
        return e.createElement(Vye, {
            id: t,
            preferredSizing: n
        });
    }
    if (o.Container[t]) {
        return e.createElement(Vbe, {
            id: t
        });
    }
    if (o.Crosstab[t]) {
        return e.createElement(Pxe, {
            id: t
        });
    }
    if (o.DataVisualizations[t]) {
        return e.createElement(Rye, {
            id: t
        });
    }
    if (o.Image[t]) {
        return e.createElement(Wye, {
            id: t
        });
    }
    if (o.StackContainer[t]) {
        return e.createElement(uSe, {
            id: t
        });
    }
    if (o.PromptContainer[t]) {
        return e.createElement(BSe, {
            id: t
        });
    }
    if (o.Table[t]) {
        return e.createElement(Axe, {
            id: t
        });
    }
    if (o.Text[t]) {
        return e.createElement(Ixe, {
            id: t
        });
    }
    if (o.WebContent[t]) {
        return e.createElement(jSe, {
            id: t
        });
    }
    if (o.JobContent[t]) {
        return e.createElement(zLe, {
            id: t
        });
    }
    if (o.InfoBar[t]) {
        return e.createElement(ZLe, {
            id: t
        });
    }
    return e.createElement(zbe, {
        id: t
    });
}

function rTe(t, o, n, a) {
    const r = !!o.Container[t];
    let s = {
        position: "relative",
        width: "100%",
        height: a ? "100%" : undefined,
        display: "flex",
        outline: "none"
    };
    if (a) {
        s = Object.assign(Object.assign({}, s), {
            height: "100%",
            flexShrink: 1,
            overflow: "hidden"
        });
    }
    return e.createElement("div", {
        style: s
    }, e.createElement(wLe, {
        id: t,
        isContainer: r
    }, aTe(t, o, n)));
}

function sTe(t, n, a, r) {
    if (n.Crosstab[t] || n.DataVisualizations[t]) {
        return e.createElement(o, null, e.createElement(QLe, {
            id: t
        }), rTe(t, n, a, r));
    } else {
        return rTe(t, n, a, r);
    }
}

var iTe = "sas_components-PromptHeader-PromptHeader_emptyText";

var lTe = "sas_components-PromptHeader-PromptHeader_vertical";

var cTe = "sas_components-PromptHeader-PromptHeader_header";

var dTe = "sas_components-PromptHeader-PromptHeader_hover";

var uTe = "sas_components-PromptHeader-PromptHeader_headerContent";

var mTe = "sas_components-PromptHeader-PromptHeader_transitioning";

var pTe = "sas_components-PromptHeader-PromptHeader_buttonContainer";

var fTe = "sas_components-PromptHeader-PromptHeader_button";

var gTe = "sas_components-PromptHeader-PromptHeader_paddingVisible";

var hTe = "sas_components-PromptHeader-PromptHeader_paddingHidden";

var bTe = {
    emptyText: iTe,
    vertical: lTe,
    header: cTe,
    hover: dTe,
    headerContent: uTe,
    transitioning: mTe,
    buttonContainer: pTe,
    button: fTe,
    paddingVisible: gTe,
    paddingHidden: hTe
};

const vTe = Hn("VASDK_PROMPT-HEADER-EDIT-MODE", false);

const yTe = t => {
    var o, r, s, i, l, d, u;
    const m = C_();
    const p = gSe();
    const f = $be();
    const g = t.status;
    const h = t.location === "left" || t.location === "right";
    const b = h || t.location === "bottom";
    const v = !!((o = t.childKeys) === null || o === void 0 ? void 0 : o.length);
    const y = g === "open" || g === "auto" && v;
    const x = t.viewMode && !vTe;
    const S = t.type === "report" && t.hiddenNavigation && (!x || ((r = t.pagePromptState) === null || r === void 0 ? void 0 : r.hasContent));
    const [w, C] = n(false);
    const E = c(null);
    const [I, _] = n({
        isOpen: y
    });
    const {open: D, close: L} = t.actions;
    const T = (s = t.pagePromptState) === null || s === void 0 ? void 0 : s.status;
    const R = T === "open" || T === "auto" && ((i = t.pagePromptState) === null || i === void 0 ? void 0 : i.hasContent);
    const k = [ "left", "right", "bottom" ].includes(((l = t.pagePromptState) === null || l === void 0 ? void 0 : l.location) || "");
    const A = !v ? e.createElement("span", {
        className: ke(bTe.emptyText, h && bTe.vertical)
    }, t.type === "report" ? f({
        key: "PromptHeader.emptyReport.txt"
    }) : f({
        key: "PromptHeader.emptyPage.txt"
    })) : e.createElement(ASe, {
        direction: h ? "vertical" : "horizontal"
    }, tTe(t.childKeys, t.elementState, {
        includePreferredSizing: true,
        style: !h ? {
            flexShrink: 1
        } : undefined,
        contentJustification: "center"
    }));
    let M;
    if (t.type === "report") {
        if (t.hiddenNavigation) {
            M = {
                items: [ {
                    text: f({
                        key: "PromptHeader.allControlAreas.txt"
                    }),
                    checked: y && R
                } ]
            };
        } else {
            M = {
                items: [ {
                    text: f({
                        key: "PromptHeader.reportControlArea.txt"
                    }),
                    checked: y
                }, {
                    text: f({
                        key: "PromptHeader.allControlAreas.txt"
                    }),
                    checked: y && R
                } ]
            };
        }
    } else {
        M = {
            items: [ {
                text: f({
                    key: "PromptHeader.pageControlArea.txt"
                }),
                checked: y
            } ]
        };
    }
    const N = (e, t) => {
        t ? D(e) : L(e);
    };
    let O;
    if (t.type === "page") {
        O = y ? f({
            key: "PromptHeader.collapsePageControlArea.txt"
        }) : f({
            key: "PromptHeader.expandPageControlArea.txt"
        });
    } else {
        if (t.hiddenNavigation && !k) {
            O = y && R ? f({
                key: "PromptHeader.collapseControlArea.txt"
            }) : f({
                key: "PromptHeader.expandControlArea.txt"
            });
        } else {
            O = y ? f({
                key: "PromptHeader.collapseReportControlArea.txt"
            }) : f({
                key: "PromptHeader.expandReportControlArea.txt"
            });
        }
    }
    const P = (() => {
        var o, n;
        if (!t.hideArrow) {
            if (b) {
                return null;
            }
            if (x && !v) {
                return null;
            }
            if (t.hiddenNavigation && t.type === "page" && !(x && !((o = t.reportPromptState) === null || o === void 0 ? void 0 : o.hasContent)) && ![ "left", "right", "bottom" ].includes((n = t.reportPromptState) === null || n === void 0 ? void 0 : n.location)) {
                return null;
            }
            return e.createElement(bee, {
                sections: [ M ],
                onItemSelect: e => {
                    var o;
                    for (const [, n] of e) {
                        const e = !M.items[n].checked;
                        N(t.id, e);
                        if (t.type === "report" && ((o = t.pagePromptState) === null || o === void 0 ? void 0 : o.id) && (n === 1 || t.hiddenNavigation)) {
                            N(t.pagePromptState.id, e);
                        }
                        M.items[n].checked = e;
                    }
                }
            }, e.createElement("div", {
                onMouseEnter: () => {
                    C(true);
                    if (t.hiddenNavigation && t.onHover) {
                        t.onHover(true);
                    }
                },
                onMouseLeave: () => {
                    C(false);
                    if (t.hiddenNavigation && t.onHover) {
                        t.onHover(false);
                    }
                },
                className: bTe.buttonContainer
            }, e.createElement(QM, {
                icon: {
                    icon: y && (!S || R) ? zL : kL
                },
                variant: oN.LightSmall,
                onPress: () => {
                    var e, o, n;
                    if (y) {
                        if (S && !k) {
                            if (!R) {
                                D(((e = t.pagePromptState) === null || e === void 0 ? void 0 : e.id) || "");
                            } else {
                                L(((o = t.pagePromptState) === null || o === void 0 ? void 0 : o.id) || "");
                                L(t.id);
                            }
                        } else {
                            L(t.id);
                        }
                    } else {
                        D(t.id);
                        if (S && !k) {
                            D(((n = t.pagePromptState) === null || n === void 0 ? void 0 : n.id) || "");
                        }
                    }
                },
                tooltip: O,
                tokens: () => ({
                    bg: "transparent"
                }),
                className: bTe.button
            })));
        } else {
            return null;
        }
    })();
    a((() => {
        if (y === I.isOpen || !E.current) return;
        let e;
        if (h) {
            if (y) {
                E.current.style.display = "";
                E.current.getBoundingClientRect();
                e = {
                    opacity: 1
                };
            } else {
                e = {
                    opacity: 0,
                    display: undefined
                };
            }
        } else {
            if (y) {
                E.current.style.height = "auto";
                E.current.style.display = "";
                const t = E.current.clientHeight;
                E.current.style.height = "0px";
                E.current.getBoundingClientRect();
                e = {
                    height: t
                };
            } else {
                const t = E.current.clientHeight;
                E.current.style.height = `${t}px`;
                E.current.getBoundingClientRect();
                e = {
                    height: 0,
                    display: undefined
                };
            }
        }
        _({
            isOpen: y,
            className: bTe.transitioning,
            style: e
        });
    }), [ y, I.isOpen, h ]);
    return e.createElement("div", {
        style: Object.assign(Object.assign({}, I_({
            bg: t.reportPromptHeaderHasHover && y && !b ? m.c.colorUiMedium : (d = t.tokenOverrides) === null || d === void 0 ? void 0 : d.call(t, m).bg,
            "hover-bg": y ? m.c.colorUiMedium : (u = t.tokenOverrides) === null || u === void 0 ? void 0 : u.call(t, m).bg
        }, "prompt-header")), {
            width: h && y ? t.width : undefined
        }),
        className: ke(bTe.header, h && bTe.vertical, w && bTe.hover),
        "data-testid": t.id
    }, P, e.createElement("div", {
        className: ke(bTe.headerContent, h && bTe.vertical, I === null || I === void 0 ? void 0 : I.className),
        style: h ? Object.assign({
            display: I.isOpen ? undefined : "none",
            opacity: I.isOpen ? 1 : 0
        }, I.style) : Object.assign({
            visibility: I.isOpen ? undefined : "hidden",
            height: I.isOpen ? "auto" : 0,
            padding: t.type === "page" && t.location === "top" ? `${t.padding} ${t.padding} 0` : undefined
        }, I.style),
        ref: E,
        onTransitionEnd: () => {
            _({
                isOpen: y
            });
        }
    }, A), !t.hiddenNavigation && t.type === "report" && e.createElement("div", {
        className: !I.isOpen ? bTe.paddingVisible : bTe.paddingHidden
    }), p && e.createElement(p, {
        id: t.id,
        type: "header"
    }));
};

const xTe = yo(((e, t) => {
    var o;
    const n = t.type === "page" ? t.id : ghe(((o = e.sections.byId[e.sections.currentSection || ""]) === null || o === void 0 ? void 0 : o.rootContainerId) || "");
    return Object.assign(Object.assign({
        childKeys: vfe(e, t.id),
        elementState: Efe(e)
    }, Yfe(e, t.id)), {
        reportPromptState: Object.assign({
            id: hhe,
            hasContent: !!vfe(e, hhe)
        }, Yfe(e, hhe)),
        pagePromptState: Object.assign({
            id: n,
            hasContent: !!vfe(e, n)
        }, Yfe(e, n))
    });
}), (e => ({
    actions: bo(jme.actions, e)
})), undefined, {
    areStatePropsEqual: (e, t) => {
        const {reportPromptState: o, pagePromptState: n} = e, a = T(e, [ "reportPromptState", "pagePromptState" ]);
        const {reportPromptState: r, pagePromptState: s} = t, i = T(t, [ "reportPromptState", "pagePromptState" ]);
        return xo(a, i) && xo(o, r) && xo(n, s);
    }
})(yTe);

function STe(e, t) {
    return {
        text: e(t.text),
        subSections: t.subSections && wTe(e, t.subSections),
        checked: t.checked,
        disabled: t.disabled,
        icon: t.icon,
        testId: t.testId
    };
}

function wTe(e, t) {
    return t.map((t => {
        const o = t.items.map((t => STe(e, t)));
        return {
            items: o
        };
    }));
}

const CTe = t => {
    var o, i, l, u;
    var {actions: m, birdActions: p, dispatch: f} = t, g = T(t, [ "actions", "birdActions", "dispatch" ]);
    const h = $be();
    const [b, v] = n({
        report: [],
        object: []
    });
    const y = twe();
    a((() => {
        var e;
        v({
            report: y({
                type: "report"
            }),
            object: ((e = g.target) === null || e === void 0 ? void 0 : e.id) ? y({
                type: "object",
                name: g.target.id
            }) : []
        });
    }), [ g.target, y ]);
    const x = (i = (o = g.reportItemSortKeys) === null || o === void 0 ? void 0 : o.map((e => g.reportItems[e])).filter((e => !!e))) !== null && i !== void 0 ? i : [];
    const S = (u = (l = g.objectItemSortKeys) === null || l === void 0 ? void 0 : l.map((e => e ? g.objectItems[e] : {})).filter((e => !!e))) !== null && u !== void 0 ? u : [];
    let w;
    {
        const e = [ ...x, ...b.report, {
            type: "separator"
        }, ...S, ...b.object ];
        w = [ {
            items: []
        } ];
        e.forEach((e => {
            if (e.type === "separator") {
                w.push({
                    items: []
                });
            } else {
                w[w.length - 1].items.push(e);
            }
        }));
        w = w.filter((e => e.items.length > 0));
    }
    const C = s((e => {
        if (!e.length) return;
        const [[t, o], ...n] = e;
        let a = w[t].items[o];
        for (const [e, t] of n) {
            if (!a.subSections) return;
            a = a.subSections[e].items[t];
        }
        if (a.action) {
            f(a.action);
            m.close();
        }
        if (a.callback) {
            a.callback();
            m.close();
        }
    }), [ m, w, f ]);
    const E = r((() => wTe(h, w)), [ w, h ]);
    const I = g.open && w.length > 0;
    const _ = c(null);
    d((() => {
        if (I) {
            _.current = document.activeElement;
        }
    }), [ I ]);
    function D() {
        var e;
        (e = _.current) === null || e === void 0 ? void 0 : e.focus();
        _.current = null;
    }
    return e.createElement(Hz, {
        isOpen: I,
        position: g.position,
        sections: I ? E : [],
        onItemSelected: e => {
            D();
            C(e);
        },
        onDismiss: () => {
            D();
            m.close();
        }
    });
};

const ETe = yo((e => e.ui.reportContextMenu), (e => ({
    actions: bo(yme.actions, e),
    birdActions: bo(Fue.actions, e),
    dispatch: e
})))(CTe);

const ITe = "report-container/transitionSection";

const _Te = "report-container/transitionComplete";

function DTe(e) {
    return {
        current: e
    };
}

const LTe = {
    Transition: ITe,
    createTransition(e) {
        return rD(LTe.Transition, e);
    },
    TransitionComplete: _Te,
    createTransitionComplete() {
        return rD(LTe.TransitionComplete);
    }
};

function TTe(e, t) {
    const o = t;
    switch (o.type) {
      case LTe.Transition:
        {
            if (e.current === o.payload) {
                return e;
            }
            return Object.assign(Object.assign({}, e), {
                next: o.payload
            });
        }

      case LTe.TransitionComplete:
        {
            if (e.next === undefined) {
                return e;
            }
            const t = e.next;
            return {
                current: t,
                next: undefined
            };
        }

      default:
        return e;
    }
}

const RTe = {
    actions: LTe,
    init: DTe,
    reducer: TTe,
    selectors: {
        getLatest(e) {
            if (e.next !== undefined) {
                return e.next;
            }
            return e.current;
        },
        getOrderedSections(e) {
            if (e.next === undefined) {
                return [ e.current ];
            }
            return [ e.current, e.next ];
        },
        transitioning(e) {
            return e.next !== undefined;
        }
    }
};

var kTe = "sas_components-ReportContainer-internal-PageTransition_container";

var ATe = "sas_components-ReportContainer-internal-PageTransition_base";

var MTe = "sas_components-ReportContainer-internal-PageTransition_container-start";

var NTe = "sas_components-ReportContainer-internal-PageTransition_container-final";

var OTe = "sas_components-ReportContainer-internal-PageTransition_container-animate";

var PTe = "sas_components-ReportContainer-internal-PageTransition_fade";

var BTe = {
    container: kTe,
    base: ATe,
    containerStart: MTe,
    containerFinal: NTe,
    containerAnimate: OTe,
    fade: PTe
};

const zTe = u((function t({children: o, onTransitionComplete: n, transitioning: s, fadeTransition: i}, l) {
    const d = c(undefined);
    const u = c(null);
    const m = c(n);
    m.current = n;
    r((() => {
        d.current = s ? BTe.containerStart : undefined;
    }), [ s ]);
    a((() => {
        if (!u.current || !s) {
            return;
        }
        const e = setTimeout((() => m.current()), i ? 600 : 100);
        u.current.classList.add(BTe.containerAnimate);
        if (i) {
            u.current.classList.add(BTe.fade);
        }
        u.current.classList.add(BTe.containerFinal);
        d.current = u.current.classList.value;
        return () => clearTimeout(e);
    }), [ s, i ]);
    return e.createElement("div", {
        className: BTe.base,
        ref: l
    }, e.createElement("div", {
        className: ke(BTe.container, d.current),
        ref: u
    }, o));
}));

var FTe = "sas_components-Pane-Pane_pane";

var jTe = {
    pane: FTe
};

const VTe = u(((t, o) => {
    const n = C_();
    const a = I_(HTe(n), "pane");
    return e.createElement("div", Object.assign({}, t, {
        className: ke(jTe.pane, t.className),
        ref: o,
        style: Object.assign(Object.assign({}, a), t.style)
    }), t.children);
}));

function HTe(e) {
    if (e.enableNovaTokens) {
        return {
            bg: e.backgroundsNova.panes.bg
        };
    } else {
        return {
            bg: e.backgrounds.panes.bg
        };
    }
}

var UTe = "sas_components-AutoInteractionBar-AutoInteractionBar_bar";

var GTe = "sas_components-AutoInteractionBar-AutoInteractionBar_tokenizer";

var KTe = "sas_components-AutoInteractionBar-AutoInteractionBar_label";

var WTe = "sas_components-AutoInteractionBar-AutoInteractionBar_placeholder";

var $Te = {
    bar: UTe,
    tokenizer: GTe,
    label: KTe,
    placeholder: WTe
};

const YTe = ({id: t, actions: o, state: n}) => {
    const a = $be();
    const r = {};
    const s = [];
    const i = new Map;
    n === null || n === void 0 ? void 0 : n.items.forEach((({values: e, readonly: t, label: o}, n) => {
        const a = "" + n;
        r[a] = `${o}`;
        e.forEach(((e, o) => {
            const n = {
                groupId: a,
                value: e,
                readOnly: t
            };
            s.push(n);
            i.set(n, o);
        }));
    }));
    const l = e => {
        const n = i.get(e);
        if (n === undefined) {
            console.warn("Attempted to remove an unknown token");
        } else {
            o.deleteValue(t, {
                itemIndex: Number(e.groupId),
                valueIndex: n
            });
        }
    };
    const c = e => {
        const n = Number(e);
        o.deleteItem(t, {
            itemIndex: n
        });
    };
    const d = C_();
    if (!n || !n.showControl) {
        return null;
    } else {
        return e.createElement("div", {
            style: {
                "--auto-interaction-bar-fg": d.c.n_1
            },
            className: $Te.bar,
            "data-testid": Xg() ? "autoInteractionBar" : undefined
        }, e.createElement("div", {
            className: $Te.label
        }, e.createElement("span", null, a({
            key: "SectionSelectionBar.title.txt"
        }))), n.items.length ? e.createElement(_0, {
            className: $Te.tokenizer,
            tokens: s,
            groupLabelMap: r,
            hasBreadcrumbs: n.mode === "onewayfilter",
            onCloseGroup: c,
            onCloseToken: l,
            onRemoveTokens: () => {},
            groupEnabled: true,
            groupingThreshold: 2
        }) : e.createElement("label", {
            className: $Te.placeholder
        }, e.createElement("span", null, a({
            key: "SectionSelectionBar.noSelections.txt"
        }))));
    }
};

const qTe = yo(((e, t) => ({
    state: wfe(e, t.id)
})), (e => ({
    actions: bo(Ime.actions, e)
})))(YTe);

const XTe = ({id: t, setPosition: o}) => {
    const [n] = kN((({contentRect: e}) => {
        o(t, e);
    }));
    return e.createElement("div", {
        style: {
            display: "flex",
            flexShrink: 1,
            flexDirection: "column",
            width: "100%",
            height: "100%",
            boxSizing: "border-box"
        },
        ref: n
    }, e.createElement(Vbe, {
        id: t
    }));
};

const ZTe = yo(null, {
    setPosition: jde.actions.setPosition
})(XTe);

const JTe = ({objectName: t, birdElements: o}) => e.createElement("div", {
    style: {
        display: "flex",
        justifyContent: "stretch",
        flexDirection: "row",
        flexGrow: 1
    }
}, t ? tTe([ t ], o, {
    includePreferredSizing: true,
    style: {
        flexGrow: 1,
        flexShrink: 1
    }
}) : null);

const QTe = yo(((e, t) => {
    const o = e.ui.birdLayout.byId[t.id];
    return {
        birdElements: e.birdElements,
        objectName: o && o.childKeys ? o.childKeys[0] : undefined
    };
}))(JTe);

const eRe = t => {
    var o;
    const {supplementalKeys: a = [], supplementalVisualLabels: r = {}, mediaKey: s} = (o = t.maximizeState) !== null && o !== void 0 ? o : {};
    const i = s ? e.createElement(ZTe, {
        id: s
    }) : e.createElement(nTe, {
        id: t.id,
        state: t.elementState,
        style: {
            position: "relative",
            top: 0,
            left: 0,
            height: "100%",
            width: "100%",
            overflow: "hidden"
        }
    });
    const [l, c] = n(0);
    const d = a[l];
    if (a.length === 0 || !d) {
        return i;
    }
    return e.createElement(z5, {
        orientation: "vertical",
        sections: [ {}, {
            defaultSize: "25%",
            collapsible: true,
            fullyCollapsible: true
        } ],
        hideGripIcon: false,
        style: {
            height: "100%",
            width: "100%"
        }
    }, e.createElement("div", {
        style: {
            height: "100%",
            width: "100%",
            display: "flex",
            flexDirection: "column",
            paddingBottom: "0.5rem",
            boxSizing: "border-box"
        }
    }, i), e.createElement("div", {
        style: {
            height: "100%",
            width: "100%",
            display: "flex",
            flexDirection: "column",
            padding: "0.75rem 0.25rem 0.25rem 0.25rem",
            boxSizing: "border-box"
        }
    }, a.length > 1 ? e.createElement(ene, {
        selectedIndex: l,
        onItemSelected: ({index: e}) => c(e),
        overflowMenuButtonDisplay: "onVisibleScrollbar",
        items: a.map((e => {
            var t;
            return {
                label: (t = r[e]) !== null && t !== void 0 ? t : e
            };
        }))
    }) : undefined, e.createElement(nTe, {
        key: d,
        id: d,
        state: t.elementState,
        style: {
            position: "relative",
            flexGrow: 1,
            overflow: "hidden"
        }
    })));
};

const tRe = yo(((e, t) => ({
    layoutState: bfe(e, t.id),
    maximizeState: $fe(e, t.id),
    elementState: Efe(e)
})))(eRe);

var oRe = "sas_components-ReportSectionZeroState-ReportSectionZeroState_zero-state";

var nRe = {
    zeroState: oRe
};

const aRe = t => {
    const o = $be();
    const n = C_();
    const {emptyViewEditable: a, hideAutoChartButton: r, onPressCreateAutoChart: s, onPressSelectTemplate: i, onPressExploreSuggestions: l} = t;
    if (a) {
        const t = {
            text: o({
                key: "ReportSectionZeroState.autoChartButton.label"
            }),
            onPress: () => {
                s === null || s === void 0 ? void 0 : s();
            }
        };
        const a = {
            text: o({
                key: "ReportSectionZeroState.selectTemplateButton.label"
            }),
            onPress: () => {
                i === null || i === void 0 ? void 0 : i();
            }
        };
        const c = {
            text: o({
                key: "ReportSectionZeroState.exploreSuggestions.label"
            }),
            onPress: () => {
                l === null || l === void 0 ? void 0 : l();
            }
        };
        return e.createElement(g2, {
            tokens: {
                text: {
                    color: n.stateStandard.normal.fg,
                    fontSize: n.font.size.h5
                },
                heading: {
                    color: n.stateStandard.normal.fg,
                    fontSize: n.font.size.h5
                }
            },
            className: nRe.zeroState,
            icon: EA,
            heading: o({
                key: "ReportSectionZeroState.heading.label"
            }),
            text: o({
                key: r ? "ReportSectionZeroState.hideAutoChartButton.description.label" : "ReportSectionZeroState.description.label"
            }),
            actionButtonOneProps: r ? a : t,
            actionButtonTwoProps: r ? undefined : a,
            actionButtonThreeProps: r ? undefined : c
        });
    } else {
        return e.createElement(g2, {
            tokens: {
                text: {
                    color: n.stateStandard.normal.fg,
                    fontSize: n.font.size.h5
                }
            },
            className: nRe.zeroState,
            text: o({
                key: "ZeroState.viewMode.txt"
            }),
            icon: EA
        });
    }
};

const rRe = u((function(t, o) {
    let n;
    {
        let e;
        const {hiddenSection: o, currentSection: a} = t.sectionState;
        if (o) {
            e = o;
        } else {
            e = a ? t.sectionState.byId[a] : undefined;
        }
        n = (e === null || e === void 0 ? void 0 : e.id) === t.data.id;
    }
    const a = gSe();
    const r = () => {
        if (!t.hasContent) {
            return e.createElement(aRe, {
                hideAutoChartButton: !t.sectionState.showCreateAutoChart,
                emptyViewEditable: t.sectionState.emptyViewEditable,
                onPressCreateAutoChart: () => {
                    t.actions.notifyPressCreateAutoChart(t.data.id);
                },
                onPressSelectTemplate: () => {
                    t.actions.notifyPressSelectTemplate(t.data.id);
                },
                onPressExploreSuggestions: () => {
                    t.actions.notifyPressExploreSuggestions(t.data.id);
                }
            });
        } else {
            return e.createElement(ZTe, {
                id: t.data.rootContainerId
            });
        }
    };
    const s = parseInt(t.data.padding || "") < 16;
    if (!t.data.rootContainerId) return null;
    return e.createElement(VTe, {
        style: Object.assign({
            display: t.hide ? "none" : "flex",
            flexGrow: 1,
            flexBasis: 0,
            overflow: "hidden",
            flexDirection: t.headerFlexDirection,
            backgroundColor: t.reportBackgroundColor
        }, t.style),
        ref: o,
        onContextMenu: t.onContextMenu,
        "data-testid": Xg() ? t.data.id : undefined
    }, e.createElement(xTe, {
        id: ghe(t.data.rootContainerId),
        type: "page",
        viewMode: !t.sectionState.emptyViewEditable,
        hiddenNavigation: t.hideNavigation,
        reportPromptHeaderHasHover: t.promptHeaderHover,
        hideArrow: s,
        padding: t.data.padding
    }), e.createElement("div", {
        "data-testid": Xg() ? t.data.rootContainerId : undefined,
        style: {
            position: "relative",
            display: "flex",
            flexBasis: 0,
            flexGrow: 1,
            flexDirection: "column",
            padding: t.headerLocation === "top" ? `0 ${t.data.padding} ${t.data.padding}` : t.data.padding
        }
    }, e.createElement(qTe, {
        id: t.data.rootContainerId
    }), n && t.maximizedVisual ? e.createElement(tRe, {
        id: t.maximizedVisual
    }) : r(), a && e.createElement(a, {
        id: t.data.rootContainerId,
        type: "section"
    })));
}));

const sRe = yo(((e, t) => {
    var o, n, a, r, s;
    const i = ghe(t.data.rootContainerId || "");
    return {
        maximizedVisual: e.bird.maximizedVisual,
        sectionState: e.sections,
        reportBackgroundColor: (o = e.bird.reportBackgroundColor) !== null && o !== void 0 ? o : undefined,
        hasContent: !!((a = bfe(e, (n = t.data.rootContainerId) !== null && n !== void 0 ? n : "").childKeys) === null || a === void 0 ? void 0 : a.length) || !!((r = bfe(e, i).childKeys) === null || r === void 0 ? void 0 : r.length),
        headerFlexDirection: Zfe(e, i),
        headerLocation: (s = Yfe(e, i)) === null || s === void 0 ? void 0 : s.location
    };
}), (e => ({
    actions: bo(gme.actions, e)
})), undefined, {
    forwardRef: true
})(rRe);

const iRe = Hn("VASDK_FADETRANSITION", false);

const lRe = fb(Wt);

const cRe = u(((t, r) => {
    const [s, i] = m(RTe.reducer, null, (() => RTe.init(t.currentSection)));
    const l = RTe.selectors.getLatest(s);
    if (l !== t.currentSection) {
        i(RTe.actions.createTransition(t.currentSection));
    }
    const d = t.sectionIds.indexOf(t.currentSection);
    const u = RTe.selectors.getOrderedSections(s);
    const p = RTe.selectors.transitioning(s);
    const f = Sye(t.onTransitionsComplete);
    const h = c();
    a((() => {
        if (!p) {
            f.current();
        }
    }), [ p, f ]);
    Cye(t.onTransitionsComplete);
    const [b, v] = n(false);
    const y = c(null);
    const x = c(null);
    g(r, (() => ({
        focusCurrentSection() {
            var e;
            const t = x.current;
            (e = RF(t !== null && t !== void 0 ? t : undefined)) === null || e === void 0 ? void 0 : e.focus();
        }
    })), []);
    a((() => {
        var e;
        const t = document.activeElement === document.body;
        v(p && (t || !!((e = y.current) === null || e === void 0 ? void 0 : e.contains(document.activeElement))));
    }), [ p ]);
    const S = t.promptHeaderHover;
    const w = t.tabsEditable;
    const C = $be();
    const E = lRe();
    const {editState: I, onTabLabelChange: _} = dRe({
        validate: (e, t) => {
            const o = L.some(((o, n) => {
                var a;
                if (n === e) return false;
                return ((a = o.label) === null || a === void 0 ? void 0 : a.trim().toUpperCase()) === t.trim().toUpperCase();
            }));
            if (o) {
                return {
                    message: E("tab.labelEdit.duplicateLabel.errorMessage.label", {
                        label: t
                    }),
                    status: "alert"
                };
            }
            return {
                message: undefined,
                status: undefined
            };
        },
        onCommit: (e, o, n, a) => {
            var r;
            if (n !== "") {
                (r = t.onTabLabelChange) === null || r === void 0 ? void 0 : r.call(t, e, o, n, a);
            }
        }
    });
    const D = [];
    const L = [];
    for (const e of t.sectionIds) {
        const o = t.sections[e];
        if (!(o === null || o === void 0 ? void 0 : o.hidden) && (o === null || o === void 0 ? void 0 : o.label)) {
            D.push(e);
            const t = L.length === (I === null || I === void 0 ? void 0 : I.itemIndex);
            L.push(Object.assign(Object.assign({}, t ? I.result : {}), {
                label: o.label,
                menuSections: o.menuSections,
                hidden: o.hiddenStyle,
                allowDrag: w,
                closable: o.closable
            }));
        }
    }
    const T = C({
        key: "ReportSections.newPageButton.txt"
    });
    const R = t.hideNavigation === true || (t.hideNavigation === "auto" || t.hideNavigation === undefined) && t.sectionIds.length <= 1;
    let k = R ? null : e.createElement(ene, {
        "data-testId": Xg() ? "reportPageTabs" : undefined,
        selectedIndex: d,
        items: L,
        onItemSelected: e => {
            const o = D[e.index];
            const n = t.sections[o];
            if (n) {
                t.onSectionChanged(n, o);
            }
        },
        visualStyle: "standard",
        overflowMenuButtonDisplay: "onVisibleScrollbar",
        tokenOverrides: t.tabBarTokens,
        tabOverrides: t.tabTokens,
        editable: t.tabsEditable,
        allowDrop: w,
        onTabLabelChange: _,
        reorderTabs: t.onReorderTabs,
        addNewTabButtonProps: !t.tabsEditable || !t.onAddNewTab ? undefined : {
            onPress: t.onAddNewTab,
            ariaLabel: T,
            title: T
        },
        onTabMenuOpen: (e, o) => {
            var n;
            (n = t.onTabMenuOpen) === null || n === void 0 ? void 0 : n.call(t, {
                itemIndex: e,
                item: o
            });
        },
        onTabMenuItemSelect: (e, o, n) => {
            var a;
            (a = t.onTabMenuItemSelect) === null || a === void 0 ? void 0 : a.call(t, {
                itemIndex: e,
                item: o,
                location: n
            });
        },
        onDrop: t.onTabDrop,
        dropTypes: t.tabDropTypes,
        showCloseMenuOption: false,
        hideCloseAllTabOption: true,
        closeTabButtonTooltip: C({
            key: "ReportSections.closeTab.tooltip.txt"
        }),
        onTabClose: e => {
            var o;
            (o = t.onTabClose) === null || o === void 0 ? void 0 : o.call(t, e);
        }
    });
    if (w) {
        k = e.createElement(lSe, {
            enableDragDrop: true
        }, k);
    }
    return e.createElement(o, null, k, e.createElement(zTe, {
        ref: y,
        key: "sectionsContainer",
        transitioning: p,
        onTransitionComplete: () => i(RTe.actions.createTransitionComplete()),
        fadeTransition: iRe || t.fadeTransition
    }, Object.keys(t.sections).map((o => {
        var n;
        const a = h.current = (n = h.current) !== null && n !== void 0 ? n : new Set;
        a.add(t.currentSection);
        const r = t.sections[o];
        if (!a.has(o) || !r) {
            return undefined;
        }
        return e.createElement(De, {
            key: r.id,
            as: sRe,
            ref: o === l ? x : undefined,
            lockProps: {
                data: r,
                hideNavigation: R,
                promptHeaderHover: S,
                hide: !u.includes(o)
            },
            disabled: !b,
            noFocusGuards: true
        });
    }))));
}));

function dRe({validate: e, onCommit: t}) {
    const [o, a] = n(undefined);
    const r = (o, n, r, s) => {
        if (s === "Cancel") {
            a(undefined);
        } else if (s === "Commit") {
            a(undefined);
            const {status: i} = e(o, r);
            if (i === null || i === undefined) {
                t === null || t === void 0 ? void 0 : t(o, n, r, s);
            }
        } else if (s === "Change") {
            const t = e(o, r);
            a({
                itemIndex: o,
                result: t
            });
        }
    };
    return {
        editState: o,
        onTabLabelChange: r
    };
}

const uRe = ({actions: t, hiddenSection: o, onContextMenu: n, reportBackgroundColor: a}) => {
    var r;
    const s = $be();
    const i = C_();
    return e.createElement(zF, Object.assign({
        theme: a ? () => ({
            "--dialog-content-bg": a
        }) : undefined,
        isOpen: !!o,
        title: (r = o === null || o === void 0 ? void 0 : o.label) !== null && r !== void 0 ? r : "",
        dismissAction: {
            text: s({
                key: "HiddenSectionDialog.close.txt"
            }),
            onPress: () => t.closeHiddenSection()
        },
        contentPadding: 0,
        resizable: true,
        hideAnimation: true,
        footerControls: (o === null || o === void 0 ? void 0 : o.exportEnabled) ? e.createElement(QM, {
            style: {
                marginLeft: i.spacing.core.m
            },
            variant: oN.Light,
            text: s({
                key: "HiddenSectionDialog.export.txt"
            }),
            onPress: () => t.notifyExportHiddenSection({
                id: o.id
            })
        }) : undefined
    }, o), o && e.createElement(bSe, {
        value: null
    }, e.createElement(sRe, {
        data: o,
        style: {
            height: "100%",
            boxSizing: "border-box"
        },
        onContextMenu: n
    })));
};

const mRe = yo((e => {
    var t;
    return {
        hiddenSection: e.sections.hiddenSection,
        reportBackgroundColor: (t = e.bird.reportBackgroundColor) !== null && t !== void 0 ? t : undefined
    };
}), (e => ({
    actions: bo(gme.actions, e)
})))(uRe);

const pRe = ({actions: t, state: o}) => {
    const n = $be(o.title || "");
    const a = $be();
    const r = o.items.map((e => ({
        text: a(e.text),
        icon: e.icon
    })));
    const s = [ {
        title: n || undefined,
        items: r
    } ];
    const i = o.position.x;
    const l = o.position.y;
    const u = !!o.items.length;
    const m = c(null);
    d((() => {
        if (u) {
            m.current = document.activeElement;
        }
    }), [ u ]);
    function p() {
        var e;
        (e = m.current) === null || e === void 0 ? void 0 : e.focus();
        m.current = null;
    }
    return e.createElement(Hz, {
        isOpen: u,
        position: {
            x: i,
            y: l
        },
        sections: s,
        onItemSelected: e => {
            const [[, n], ...a] = e;
            if (a.length > 0) {
                return;
            }
            p();
            t.select(o.context, n);
        },
        onDismiss: () => {
            p();
            t.close();
        }
    });
};

const fRe = yo((e => ({
    state: e.ui.birdActionMenu
})), (e => ({
    actions: bo(Eme.actions, e)
})))(pRe);

const gRe = {
    BackgroundColor: "--sas-report-background-color",
    Padding: "--sas-report-padding"
};

const hRe = t => {
    var o;
    const r = $be();
    const s = C_();
    const i = ay();
    const [l, c] = n(false);
    a((() => {
        c(false);
        if (t.explanationData.dataItem) {
            const e = setTimeout((() => c(true)), 2e3);
            return () => clearTimeout(e);
        }
    }), [ t.explanationData.dataItem ]);
    const d = ywe();
    let u;
    const m = (o = t.explanationData.content) !== null && o !== void 0 ? o : t.explanationData.warning;
    if (m && t.explanationData.dataItem) {
        const o = i ? "rtl" : "ltr";
        u = {
            isOpen: true,
            title: r({
                key: `ExplanationInfoDialog.title.fmt`,
                args: {
                    label: t.explanationData.dataItem.label
                }
            }),
            dismissAction: {
                text: r({
                    key: "ExplanationInfoDialog.close.txt"
                }),
                onPress: () => t.actions.reset(),
                initialFocus: true
            },
            children: e.createElement(jP, {
                tokens: () => ({
                    fg: s.text.basic.fg
                }),
                tabIndex: -1,
                dir: o
            }, m)
        };
    } else if (l) {
        u = {
            isOpen: true,
            title: r({
                key: "ExplanationInfoDialog.loading.txt"
            }),
            dismissAction: {
                text: r({
                    key: "ExplanationInfoDialog.cancel.txt"
                }),
                onPress: () => t.actions.reset(),
                initialFocus: true
            },
            children: e.createElement(DN, {
                active: true,
                animationTokens: d
            })
        };
    } else {
        u = {
            isOpen: false,
            title: ""
        };
    }
    return e.createElement(zF, Object.assign({
        hideAnimation: true,
        resizable: true,
        onOpen: t.contextMenuActions.close
    }, u));
};

const bRe = yo((e => ({
    explanationData: e.ui.explanation
})), (e => ({
    actions: bo(Fme.actions, e),
    contextMenuActions: bo(yme.actions, e)
})))(hRe);

const vRe = t => {
    const o = $be();
    const [a, r] = n(undefined);
    return e.createElement(zF, {
        hideAnimation: true,
        resizable: true,
        style: {
            width: "80%"
        },
        onOpen: t.contextMenuActions.close,
        isOpen: t.columnsData.isOpen || false,
        title: o({
            key: "ManageColumns.title.txt"
        }),
        firstAction: {
            text: o({
                key: "ManageColumns.ok.txt"
            }),
            onPress: () => {
                t.actions.notifyUpdateDisplayedColumns(a || []);
                t.actions.update({
                    isOpen: false,
                    displayedItems: undefined,
                    hiddenItems: undefined
                });
                r(undefined);
            },
            isDefault: true,
            disabled: a === undefined
        },
        dismissAction: {
            text: o({
                key: "ManageColumns.cancel.txt"
            }),
            onPress: () => {
                t.actions.update({
                    isOpen: false,
                    displayedItems: undefined,
                    hiddenItems: undefined
                });
                r(undefined);
            }
        }
    }, e.createElement(c6, {
        type: "list",
        mode: "move",
        dataFieldKeys: [ "label", "column" ],
        sourceAttribute: [ {
            label: o({
                key: "ManageColumns.hiddenColumns.txt"
            }),
            data: t.columnsData.hiddenItems,
            hideSearch: true
        } ],
        targetAttribute: [ {
            label: o({
                key: "ManageColumns.displayedColumns.txt"
            }),
            data: t.columnsData.displayedItems,
            hideSearch: true
        } ],
        onTargetChange: e => {
            r(e);
        }
    }));
};

const yRe = yo((e => ({
    columnsData: e.ui.manageColumns
})), (e => ({
    actions: bo(Ume.actions, e),
    contextMenuActions: bo(yme.actions, e)
})))(vRe);

var xRe = "sas_components-ReportContainer-ReportContainer_surface";

var SRe = "sas_components-ReportContainer-ReportContainer_report-container-inner";

var wRe = "sas_components-ReportContainer-ReportContainer_report-container-wrapper";

var CRe = "sas_components-ReportContainer-ReportContainer_report-object";

var ERe = {
    surface: xRe,
    reportContainerInner: SRe,
    reportContainerWrapper: wRe,
    reportObject: CRe
};

var IRe = "sas_components-ReportContainer-BreadcrumbHack_hack";

var _Re = {
    hack: IRe
};

const DRe = u(((t, o) => {
    var r, s, i;
    var {hideNavigation: l, onReportLoad: c, actions: d, contextMenuActions: u, headerFlexDirection: m} = t, p = T(t, [ "hideNavigation", "onReportLoad", "actions", "contextMenuActions", "headerFlexDirection" ]);
    const [f, g] = n(false);
    const h = C_();
    const b = e => {
        var t, o;
        return {
            bg: `var(${gRe.BackgroundColor}, ${e.backgrounds.panes.bg})`,
            fontFamily: (o = (t = p.pageTabStyle) === null || t === void 0 ? void 0 : t.font) === null || o === void 0 ? void 0 : o.fontFamily
        };
    };
    const v = p.currentSection ? p.sections[p.currentSection] : undefined;
    const y = v ? v.rootContainerId : null;
    a((() => {
        if (!f && !!y && c) {
            c();
            g(true);
        }
    }), [ f, y, c ]);
    const {onContextMenu: x, onKeyDown: S} = xye((e => {
        u.setReportContextMenuTarget(null, e.nativeEvent.timeStamp);
        u.open(e);
    }));
    const w = p.currentSection && ((r = p.sections[p.currentSection]) === null || r === void 0 ? void 0 : r.label) || "";
    const C = ((s = p.linkLabels) === null || s === void 0 ? void 0 : s.length) ? e.createElement(uZ, {
        orientation: "HORIZONTAL",
        className: _Re.hack,
        selectCrumb: e => {
            const t = p.linkLabels.length - 1;
            if (p.transitioning || e > t) {
                return;
            }
            d.notifyLinkNavigation(t - e);
        },
        values: [ {
            isSingle: true,
            selectedIndex: 0,
            values: [ p.reportLabel ]
        }, ...p.linkLabels.map((e => ({
            isSingle: true,
            values: [ e ],
            selectedIndex: 0
        }))).reverse().slice(1), {
            isSingle: true,
            selectedIndex: 0,
            values: [ w ]
        } ]
    }) : undefined;
    const E = p.maximizedVisual && !p.hiddenSection;
    const [I, _] = n(undefined);
    if (!p.currentSection || !v || !v.rootContainerId) {
        return null;
    } else {
        return e.createElement("div", {
            className: ERe.reportContainerWrapper
        }, e.createElement("div", {
            className: ERe.reportContainerInner,
            onContextMenu: x,
            onKeyDown: S,
            style: {
                backgroundColor: b(h).bg,
                padding: `var(${gRe.Padding})`
            },
            "data-testid": Xg() ? "reportContainer" : undefined,
            "data-reportthemename": Xg() ? h.baseReportThemeName : undefined
        }, C, e.createElement("div", {
            className: ERe.surface,
            style: {
                flexDirection: m
            }
        }, e.createElement(xTe, {
            id: "reportHeader",
            type: "report",
            viewMode: !p.emptyViewEditable,
            tokenOverrides: b,
            hiddenNavigation: l === true || (l === undefined || l === "auto") && p.sectionTabOrder.length <= 1 || ((i = p.sections[p.currentSection]) === null || i === void 0 ? void 0 : i.hidden),
            onHover: e => _(e)
        }), e.createElement("div", {
            style: {
                display: "flex",
                flexGrow: 1,
                flexBasis: 0,
                flexDirection: "column",
                overflow: "hidden"
            },
            "data-testid": Xg() ? "reportSections" : undefined
        }, e.createElement(cRe, {
            ref: o,
            onTransitionsComplete: d.sectionSwitchComplete,
            hideNavigation: C || E ? true : l,
            promptHeaderHover: I,
            currentSection: p.currentSection,
            sections: p.sections || [],
            sectionIds: p.sectionTabOrder,
            onSectionChanged: (e, t) => d.setNextSection(t),
            fadeTransition: p.fadeTransition,
            tabBarTokens: b,
            tabTokens: () => {
                var e, t;
                return {
                    fg: (t = (e = p.pageTabStyle) === null || e === void 0 ? void 0 : e.normal) === null || t === void 0 ? void 0 : t.fg
                };
            },
            tabsEditable: p.tabsEditable,
            onAddNewTab: () => {
                d.addNewSection();
            },
            onTabLabelChange: (e, t, o, n) => {
                d.editTabLabel({
                    itemIndex: e,
                    item: t,
                    value: o,
                    type: n
                });
            },
            onTabMenuOpen: e => {
                d.notifyTabMenuOpen(e);
            },
            onTabMenuItemSelect: e => {
                d.selectTabMenuItem(e);
            },
            onReorderTabs: d.notifyReorderTabs,
            tabDropTypes: p.tabDropTypes,
            onTabDrop: ({dropIndex: e, droppedItem: t, monitor: o}) => d.notifyDrop({
                itemIndex: e,
                item: t,
                monitor: o
            }),
            onTabClose: e => {
                d.notifyTabClose(e);
            }
        }))), e.createElement(ETe, null), e.createElement(mRe, {
            onContextMenu: x
        }), e.createElement(fRe, null), e.createElement(bRe, null), e.createElement(yRe, null)));
    }
}));

const LRe = yo((e => ({
    objectName: e.bird.name,
    sections: e.sections.byId,
    sectionTabOrder: e.sections.sectionTabOrder,
    currentSection: e.sections.currentSection,
    headerFlexDirection: Zfe(e, hhe),
    tabsEditable: e.sections.tabsEditable,
    linkLabels: e.sections.linkLabels,
    reportLabel: e.bird.reportLabel,
    transitioning: e.sections.transitioning,
    hiddenSection: e.sections.hiddenSection,
    maximizedVisual: e.bird.maximizedVisual,
    fadeTransition: e.sections.fadeTransition,
    emptyViewEditable: e.sections.emptyViewEditable,
    tabDropTypes: e.sections.tabDropTypes,
    pageTabStyle: e.bird.pageTabStyle
})), (e => ({
    actions: bo(gme.actions, e),
    contextMenuActions: bo(yme.actions, e)
})), undefined, {
    forwardRef: true
})(DRe);

const TRe = function(t) {
    const [o, r] = n(null);
    const [s, i] = n(false);
    const [l, d] = n("");
    const [u, m] = n(false);
    const p = c(null);
    const f = Ybe();
    const [g, h] = Cwe();
    const [b, v] = Ewe();
    a((() => {
        var e, n;
        const a = t.onError;
        const r = Gce(t.host, t.authenticationType);
        const s = t.objectName ? (e = r.getObjectImage(t.reportUri, t.objectName, o)) === null || e === void 0 ? void 0 : e.subscribe((e => {
            if (e.imageURL) {
                d(e.imageURL);
            } else {
                a === null || a === void 0 ? void 0 : a(e.error);
            }
        })) : (n = r.getReportImage(t.reportUri, o, t.sectionIndex)) === null || n === void 0 ? void 0 : n.subscribe((e => {
            if (e.imageURL) {
                d(e.imageURL);
            } else {
                a === null || a === void 0 ? void 0 : a(e.error);
            }
        }));
        return () => s === null || s === void 0 ? void 0 : s.unsubscribe();
    }), [ t.host, t.authenticationType, t.reportUri, t.objectName, t.sectionIndex, t.onError, o ]);
    const [y] = kN((({contentRect: e}) => {
        if (e && !o) {
            const t = e.width;
            const o = e.height;
            if (t > 0 && o > 0) {
                r({
                    width: t,
                    height: o
                });
            }
        }
    }));
    const x = () => {
        if (!s && p.current && o) {
            i(true);
        }
    };
    return e.createElement(c_, {
        currentTheme: g
    }, e.createElement(VTe, {
        ref: y,
        style: {
            position: "relative",
            display: "flex",
            flexShrink: 1,
            flexDirection: "column",
            height: "100%",
            justifyContent: "center",
            backgroundColor: h === null || h === void 0 ? void 0 : h.backgroundColor,
            fontFamily: h === null || h === void 0 ? void 0 : h.fontFamily
        }
    }, e.createElement("img", {
        ref: p,
        src: l,
        style: {
            position: "absolute",
            width: "100%",
            height: "100%",
            visibility: s ? "visible" : "hidden"
        },
        onLoad: x,
        onMouseDown: () => m(!t.mobileView && s),
        "data-testid": Xg() ? t.objectName + "-image" : undefined
    }), e.createElement("div", {
        style: {
            width: "100%",
            height: "100%",
            position: "absolute",
            backgroundColor: "#FFFFFFA0",
            visibility: s && u ? "visible" : "hidden"
        }
    }), e.createElement(DN, {
        style: {
            zIndex: 1
        },
        active: u || !s,
        text: f,
        animationTokens: b,
        tokens: v,
        delay: 0
    })));
};

const RRe = () => {
    var t;
    const n = Ybe();
    const [a, r] = Cwe();
    const [s, i] = Ewe();
    return e.createElement(c_, {
        currentTheme: a
    }, e.createElement(o, null, e.createElement("span", {
        style: {
            visibility: "hidden",
            position: "absolute",
            fontFamily: (t = r === null || r === void 0 ? void 0 : r.fontFamily) !== null && t !== void 0 ? t : '"AvenirNext"'
        }
    }, "Mg"), e.createElement(VTe, {
        style: {
            display: "flex",
            flexShrink: 1,
            flexDirection: "column",
            height: "100%",
            justifyContent: "center",
            backgroundColor: r === null || r === void 0 ? void 0 : r.backgroundColor,
            fontFamily: r === null || r === void 0 ? void 0 : r.fontFamily
        }
    }, e.createElement(DN, {
        tokens: i,
        animationTokens: s,
        active: true,
        text: n,
        delay: 0
    }))));
};

const kRe = t => e.createElement(o, null, e.createElement("span", {
    style: {
        visibility: "hidden",
        position: "absolute"
    }
}, "Mg"), e.createElement(TRe, {
    host: t.url,
    reportUri: t.reportUri,
    objectName: t.objectName,
    authenticationType: t.authenticationType
}));

const ARe = ({onReportObjectLoad: t, onContentComplete: r, objectName: s, authenticationType: i, objectHasError: l, isSingleObject: c, url: d, reportUri: u, reportLoaded: m, contentComplete: p, contextMenuActions: f, reportBackgroundColor: g, hideLoadImage: h}) => {
    const [b, v] = n(false);
    const [y, x] = n(false);
    const S = !l && !p && m !== "reload" && !h;
    a((() => {
        if (!b && t) {
            t();
            v(true);
        }
        if (r && p && !y) {
            x(true);
            r();
        }
    }), [ b, t, y, r, p ]);
    const w = c ? e.createElement(QTe, {
        id: `media-${s}`
    }) : e.createElement(ZTe, {
        id: `media-${s}`
    });
    const {onContextMenu: C, onKeyDown: E} = xye(f.open);
    if (S && d && u && i) {
        return e.createElement(o, null, m ? e.createElement("div", {
            style: {
                position: "absolute",
                width: "100%",
                height: "100%",
                visibility: "hidden"
            }
        }, w) : undefined, e.createElement(kRe, {
            url: d,
            reportUri: u,
            objectName: s,
            authenticationType: i
        }));
    }
    if (m !== true) {
        return e.createElement(RRe, null);
    }
    return e.createElement(VTe, {
        className: ERe.reportObject,
        onContextMenu: C,
        onKeyDown: E,
        style: {
            backgroundColor: g
        },
        "data-testid": Xg() ? "reportObjectContainer" : undefined
    }, w, e.createElement(ETe, null), e.createElement(mRe, {
        onContextMenu: C
    }), e.createElement(fRe, null), e.createElement(bRe, null), e.createElement(yRe, null));
};

const MRe = yo(((e, t) => {
    var o;
    const n = `media-${t.objectName}`;
    const a = bfe(e, n);
    const r = e.ui.warning[t.objectName];
    return {
        isSingleObject: !!(a && a.isSingleObject),
        objectHasError: r ? r.type === "error" && !!r.message : false,
        reportLoaded: e.transport.reportLoaded,
        contentComplete: e.transport.reportLoaded && e.transport.reportObjectContentComplete,
        reportBackgroundColor: (o = e.bird.reportBackgroundColor) !== null && o !== void 0 ? o : undefined
    };
}), (e => ({
    contextMenuActions: bo(yme.actions, e)
})))(ARe);

const NRe = t => {
    const [, o] = Cwe();
    const n = s((() => {
        const e = {};
        if (o === null || o === void 0 ? void 0 : o.primary) {
            e.bg = o.primary;
            e.bd = "transparent";
        }
        if (o === null || o === void 0 ? void 0 : o.textColorInverse) {
            e.fg = o.textColorInverse;
        }
        return e;
    }), [ o ]);
    const a = {};
    if (o === null || o === void 0 ? void 0 : o.backgroundColor) {
        a.backgroundColor = o.backgroundColor;
    }
    if (o === null || o === void 0 ? void 0 : o.fontFamily) {
        a.fontFamily = o.fontFamily;
    }
    if (o === null || o === void 0 ? void 0 : o.textColor) {
        a.color = o.textColor;
    }
    return e.createElement(Tce, {
        url: t.url,
        authenticationType: t.authenticationType,
        buttonTokens: n,
        loadingFallback: () => e.createElement(RRe, null),
        style: a
    });
};

const ORe = t => e.createElement(VTe, {
    style: {
        display: "flex",
        flexShrink: 1,
        height: "100%",
        justifyContent: "center",
        alignItems: "center"
    }
}, e.createElement(WSe, {
    mode: "error",
    text: t.error,
    style: {
        flexShrink: 1,
        margin: "0 1rem"
    }
}));

const PRe = t => {
    const o = $be();
    const [n] = Cwe();
    if (t.transportError) {
        return e.createElement(c_, {
            currentTheme: n
        }, e.createElement(ORe, {
            error: t.transportError
        }));
    } else if (t.transportErrorKey) {
        return e.createElement(c_, {
            currentTheme: n
        }, e.createElement(ORe, {
            error: o(t.transportErrorKey)
        }));
    } else if (t.url && t.authenticationType && t.connectionStatus === "credentials-invalid") {
        return e.createElement(c_, {
            currentTheme: n
        }, e.createElement(NRe, {
            authenticationType: t.authenticationType,
            url: t.url
        }));
    } else if (t.fallback && (t.reportLoaded !== true || !t.themeLoaded)) {
        return e.createElement(c_, {
            currentTheme: n
        }, t.fallback());
    } else {
        return e.createElement(JSe, {
            errorMessageKey: {
                key: "ReportContainer.renderError.txt"
            },
            style: {
                height: "100%",
                width: "100%"
            },
            respondToWASMCrash: true
        }, t.children);
    }
};

const BRe = yo((e => ({
    transportError: e.transport.transportError,
    transportErrorKey: e.transport.transportErrorKey,
    connectionStatus: e.transport.connectionStatus,
    reportLoaded: e.transport.reportLoaded,
    themeLoaded: e.transport.themeLoaded
})))(PRe);

const zRe = ({onPageLoad: t, state: o, contextMenuActions: r}) => {
    const [s, i] = n(false);
    a((() => {
        if (!s && t && o.sectionData) {
            t();
            i(true);
        }
    }), [ s, t, o.sectionData ]);
    const {onContextMenu: l, onKeyDown: c} = xye(r.open);
    if (!o.sectionData) {
        return null;
    } else {
        return e.createElement("div", {
            className: ERe.reportContainerWrapper
        }, e.createElement("div", {
            className: ERe.reportContainerInner,
            onContextMenu: l,
            onKeyDown: c
        }, e.createElement(sRe, {
            data: o.sectionData
        }), e.createElement(ETe, null), e.createElement(mRe, {
            onContextMenu: l
        }), e.createElement(fRe, null), e.createElement(bRe, null), e.createElement(yRe, null)));
    }
};

const FRe = yo((e => {
    const t = e.sections.currentSection;
    return {
        state: {
            sectionData: t && e.sections.byId[t] || undefined
        }
    };
}), (e => ({
    contextMenuActions: bo(yme.actions, e)
})))(zRe);

function jRe() {
    jy({
        disableConfigurationEndPoint: true
    });
    window.sas.axiosPreventFetchAcceptLocale = true;
}

let VRe;

let HRe;

let URe = "loading";

let GRe;

function KRe(e) {
    const t = document.createElement("link");
    t.rel = "stylesheet";
    t.href = e;
    if (Uo.jest) {
        URe = "loaded";
    } else {
        document.head.appendChild(t);
    }
    t.onload = function() {
        URe = "loaded";
        VRe?.();
    };
    t.onerror = function() {
        console.error("va-sdk:ERROR: css failed to load");
        URe = "error";
        HRe?.();
    };
}

function WRe() {
    if (URe === "loaded") {
        return Promise.resolve();
    } else if (URe === "error") {
        return Promise.reject();
    }
    if (!GRe) {
        GRe = new Promise(((e, t) => {
            VRe = e;
            HRe = t;
        }));
    }
    return GRe;
}

function $Re({resourceUrl: e, getResourceUrl: t}) {
    if (!e && !t) {
        throw new Error("Invalid config");
    }
    if (e) {
        t = function(t) {
            return e + t;
        };
    }
    Uo.getResourceUrl = t;
    Uo.useBrowserCollation = true;
    vs([]);
}

const YRe = {
    "ltjslib/assets/NLS/af-ZA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/af-ZA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/af-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/af-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/af-ZA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/af-ZA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-AE-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-AE-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/af-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/af-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-AE-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-AE-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-BH-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-BH-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-BH-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-BH-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-EG-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-EG-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-DZ-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-DZ-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-DZ-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-DZ-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-EG-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-EG-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-IN-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-IN-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-IQ-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-IQ-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-IN-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-IN-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-IQ-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-IQ-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-JO-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-JO-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-JO-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-JO-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-KW-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-KW-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-LB-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-LB-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-LB-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-LB-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-LY-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-LY-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-KW-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-KW-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-LY-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-LY-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-MA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-MA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-MA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-MA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-OM-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-OM-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-OM-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-OM-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-QA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-QA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-QA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-QA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-SA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-SA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-SD-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-SD-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-SD-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-SD-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-SY-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-SY-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-TN-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-TN-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-SY-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-SY-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-YE-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-YE-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-SA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-SA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-YE-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-YE-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ar-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/be-BY-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/be-BY-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/bg-BG-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/bg-BG-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ar-TN-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-TN-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/bg-BG-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/bg-BG-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/be-BY-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/be-BY-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/bg-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/bg-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/bg-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/bg-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/bn-IN-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/bn-IN-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/bn-IN-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/bn-IN-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ar-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ar-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/bn-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/bn-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/bs-BA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/bs-BA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/be-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/be-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/bn-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/bn-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/bs-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/bs-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ca-ES-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ca-ES-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/bs-BA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/bs-BA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ca-ES-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ca-ES-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ca-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ca-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/bs-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/bs-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ca-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ca-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/cs-CZ-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/cs-CZ-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/cs-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/cs-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/da-DK-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/da-DK-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/da-DK-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/da-DK-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/de-AT-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/de-AT-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/be-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/be-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/cs-CZ-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/cs-CZ-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/de-AT-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/de-AT-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/cs-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/cs-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/da-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/da-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/de-CH-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/de-CH-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/de-DE-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/de-DE-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/de-DE-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/de-DE-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/de-LI-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/de-LI-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/da-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/da-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/de-LU-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/de-LU-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/de-LU-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/de-LU-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/de-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/de-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/el-CY-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/el-CY-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/de-CH-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/de-CH-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/el-CY-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/el-CY-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-AU-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-AU-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/el-GR-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/el-GR-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/el-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/el-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-BE-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-BE-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/de-LI-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/de-LI-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-AU-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-AU-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/de-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/de-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-BE-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-BE-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-BW-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-BW-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-BW-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-BW-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/el-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/el-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-CA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-CA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-CB-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-CB-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-GB-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-GB-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-CB-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-CB-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-CA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-CA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/el-GR-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/el-GR-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-GB-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-GB-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-HK-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-HK-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-IE-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-IE-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-JM-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-JM-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-IE-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-IE-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-HK-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-HK-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-IN-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-IN-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-NZ-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-NZ-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-IN-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-IN-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-JM-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-JM-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-PH-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-PH-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-NZ-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-NZ-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-PH-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-PH-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-MT-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-MT-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-MT-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-MT-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-SG-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-SG-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-SG-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-SG-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-US-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-US-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-ZA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-ZA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-ZW-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-ZW-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-ZW-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-ZW-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-AR-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-AR-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-AR-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-AR-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/en-ZA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/en-ZA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-BO-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-BO-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-CL-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-CL-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/en-US-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/en-US-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-CO-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-CO-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-CO-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-CO-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-CR-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-CR-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-CL-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-CL-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-EC-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-EC-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-DO-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-DO-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-DO-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-DO-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-EC-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-EC-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-GT-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-GT-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-ES-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-ES-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-ES-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-ES-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-BO-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-BO-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-GT-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-GT-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-HN-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-HN-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-NI-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-NI-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-NI-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-NI-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-CR-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-CR-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-MX-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-MX-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-HN-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-HN-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-PA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-PA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-PA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-PA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-PE-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-PE-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-MX-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-MX-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-PR-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-PR-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-PR-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-PR-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-PE-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-PE-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-SV-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-SV-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-US-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-US-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-SV-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-SV-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-PY-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-PY-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-UY-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-UY-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-UY-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-UY-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-VE-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-VE-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/et-EE-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/et-EE-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/es-PY-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-PY-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/et-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/et-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/et-EE-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/et-EE-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/et-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/et-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-VE-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-VE-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-US-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/es-US-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/eu-ES-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/eu-ES-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/eu-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/eu-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/eu-ES-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/eu-ES-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/es-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/es-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/fa-IR-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/fa-IR-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/fa-IN-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/fa-IN-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/eu-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/eu-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/fa-IN-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/fa-IN-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/fa-IR-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/fa-IR-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/fi-FI-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/fi-FI-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/fi-FI-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/fi-FI-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/fo-FO-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/fo-FO-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/fo-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/fo-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/fi-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/fi-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/fi-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/fi-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/fr-BE-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/fr-BE-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/fr-BE-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/fr-BE-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/fo-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/fo-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/fr-CA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/fr-CA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/fo-FO-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/fo-FO-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/fr-CA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/fr-CA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/fr-CH-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/fr-CH-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/fr-FR-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/fr-FR-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/fr-LU-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/fr-LU-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/fr-CH-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/fr-CH-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/fr-FR-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/fr-FR-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/fr-LU-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/fr-LU-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ga-IE-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ga-IE-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ga-IE-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ga-IE-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/he-IL-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/he-IL-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/he-IL-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/he-IL-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ga-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ga-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/fr-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/fr-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ga-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ga-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/fr-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/fr-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/he-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/he-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/hi-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/hi-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/hi-IN-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/hi-IN-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/hi-IN-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/hi-IN-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/hi-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/hi-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/hr-BA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/hr-BA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/he-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/he-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/hr-HR-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/hr-HR-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/hr-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/hr-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/hr-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/hr-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/hr-BA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/hr-BA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/hu-HU-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/hu-HU-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/hu-HU-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/hu-HU-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/id-ID-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/id-ID-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/hu-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/hu-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/id-ID-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/id-ID-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/id-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/id-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/is-IS-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/is-IS-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/id-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/id-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/is-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/is-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/is-IS-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/is-IS-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/is-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/is-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/it-CH-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/it-CH-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/it-IT-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/it-IT-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/it-IT-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/it-IT-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/hu-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/hu-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/it-CH-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/it-CH-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/it-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/it-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/hr-HR-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/hr-HR-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/iw-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/iw-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ja-JP-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ja-JP-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ja-JP-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ja-JP-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ja-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ja-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/kk-KZ-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/kk-KZ-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/it-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/it-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/kk-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/kk-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/iw-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/iw-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/kl-GL-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/kl-GL-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/kk-KZ-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/kk-KZ-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/kl-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/kl-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/kk-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/kk-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ko-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ko-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ko-KR-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ko-KR-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/kl-GL-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/kl-GL-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ko-KR-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ko-KR-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/kw-GB-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/kw-GB-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/kw-GB-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/kw-GB-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/kl-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/kl-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/kw-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/kw-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/kw-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/kw-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/lt-LT-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/lt-LT-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/lt-LT-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/lt-LT-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ko-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ko-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/lv-LV-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/lv-LV-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/lt-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/lt-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/lt-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/lt-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/lv-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/lv-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/lv-LV-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/lv-LV-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/mk-MK-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/mk-MK-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/lv-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/lv-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/mk-MK-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/mk-MK-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/mk-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/mk-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/mk-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/mk-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/mr-IN-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/mr-IN-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/mr-IN-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/mr-IN-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/mr-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/mr-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/mr-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/mr-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ms-MY-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ms-MY-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ms-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ms-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ms-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ms-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/mt-MT-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/mt-MT-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/mt-MT-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/mt-MT-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/mt-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/mt-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/mt-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/mt-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/nb-NO-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/nb-NO-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/nb-NO-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/nb-NO-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/nb-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/nb-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ms-MY-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ms-MY-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ja-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ja-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/nl-BE-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/nl-BE-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/nl-NL-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/nl-NL-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/nl-BE-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/nl-BE-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/nl-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/nl-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/nl-NL-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/nl-NL-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/nn-NO-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/nn-NO-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/nn-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/nn-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/nb-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/nb-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/nn-NO-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/nn-NO-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/nn-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/nn-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/no-NO-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/no-NO-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/no-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/no-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/pl-PL-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/pl-PL-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/pl-PL-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/pl-PL-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/pt-BR-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/pt-BR-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/nl-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/nl-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/pt-PT-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/pt-PT-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/no-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/no-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/no-NO-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/no-NO-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/pl-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/pl-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/pt-PT-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/pt-PT-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/pt-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/pt-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/pt-BR-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/pt-BR-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ro-RO-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ro-RO-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/pl-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/pl-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ru-RU-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ru-RU-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ro-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ro-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/pt-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/pt-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ro-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ro-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ru-RU-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ru-RU-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ru-UA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ru-UA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ru-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ru-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ru-UA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ru-UA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sh-BA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sh-BA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sh-BA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sh-BA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sh-ME-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sh-ME-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sh-ME-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sh-ME-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sh-RS-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sh-RS-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sh-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sh-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sh-RS-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sh-RS-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ru-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ru-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sk-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sk-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sk-SK-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sk-SK-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sk-SK-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sk-SK-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sl-SI-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sl-SI-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sh-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sh-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sl-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sl-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sq-AL-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sq-AL-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sq-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sq-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sl-SI-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sl-SI-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sk-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sk-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sq-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sq-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sq-AL-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sq-AL-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sr-BA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sr-BA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sr-BA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sr-BA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sr-ME-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sr-ME-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sl-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sl-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sr-ME-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sr-ME-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sr-RS-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sr-RS-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ro-RO-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ro-RO-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sv-SE-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sv-SE-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sr-RS-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sr-RS-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sr-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sr-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sv-SE-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sv-SE-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ta-IN-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ta-IN-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/sr-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sr-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ta-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ta-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/ta-IN-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/ta-IN-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sv-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/sv-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/sv-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/sv-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/te-IN-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/te-IN-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/ta-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/ta-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/te-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/te-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/te-IN-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/te-IN-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/te-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/te-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/th-TH-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/th-TH-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/th-TH-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/th-TH-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/tl-PH-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/tl-PH-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/tl-PH-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/tl-PH-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/th-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/th-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/tr-TR-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/tr-TR-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/tl-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/tl-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/tl-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/tl-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/tr-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/tr-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/tr-TR-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/tr-TR-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/uk-UA-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/uk-UA-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/uk-UA-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/uk-UA-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/th-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/th-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/uk-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/uk-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/vi-VN-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/vi-VN-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/vi-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/vi-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/vi-VN-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/vi-VN-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/tr-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/tr-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/uk-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/uk-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/vi-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/vi-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/zh-HK-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/zh-HK-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/zh-CN-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/zh-CN-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/zh-MO-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/zh-MO-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/zh-MO-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/zh-MO-properties.txt", import.meta.url).href,
    "ltjslib/assets/NLS/zh-SG-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/zh-SG-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/zh-TW-metadata.json": new URL("../umd/assets/ltjslib/assets/NLS/zh-TW-metadata.json", import.meta.url).href,
    "ltjslib/assets/NLS/zh-CN-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/zh-CN-properties.txt", import.meta.url).href,
    "ltjslib/themes/sas_base/library-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_base/library-RTL.css", import.meta.url).href,
    "ltjslib/assets/NLS/zh-SG-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/zh-SG-properties.txt", import.meta.url).href,
    "ltjslib/themes/sas_base/library.css": new URL("../umd/assets/ltjslib/themes/sas_base/library.css", import.meta.url).href,
    "ltjslib/assets/NLS/zh-TW-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/zh-TW-properties.txt", import.meta.url).href,
    "ltjslib/themes/sas_corporate/graph-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_corporate/graph-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_corporate/graph.css": new URL("../umd/assets/ltjslib/themes/sas_corporate/graph.css", import.meta.url).href,
    "ltjslib/themes/sas_corporate/library.css": new URL("../umd/assets/ltjslib/themes/sas_corporate/library.css", import.meta.url).href,
    "ltjslib/themes/sas_hcb/graph-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_hcb/graph-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_hcb/graph.css": new URL("../umd/assets/ltjslib/themes/sas_hcb/graph.css", import.meta.url).href,
    "ltjslib/themes/sas_hcb/library.css": new URL("../umd/assets/ltjslib/themes/sas_hcb/library.css", import.meta.url).href,
    "ltjslib/themes/sas_corporate/library-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_corporate/library-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_hcb/library-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_hcb/library-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_ignite/library-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_ignite/library-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_ignite/graph-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_ignite/graph-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_ignite/graph.css": new URL("../umd/assets/ltjslib/themes/sas_ignite/graph.css", import.meta.url).href,
    "ltjslib/themes/sas_ignite/library.css": new URL("../umd/assets/ltjslib/themes/sas_ignite/library.css", import.meta.url).href,
    "ltjslib/assets/NLS/zh-HK-properties.txt": new URL("../umd/assets/ltjslib/assets/NLS/zh-HK-properties.txt", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/BlurryCircle.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/BlurryCircle.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/ArrowNormalAtlas.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/ArrowNormalAtlas.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/BubbleAtlasGlow.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/BubbleAtlasGlow.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/DataTipAtlas.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/DataTipAtlas.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Hatch256.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Hatch256.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/BubbleAtlas.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/BubbleAtlas.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPIBasicHorizontal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPIBasicHorizontal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPIBasicSpeedometer.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPIBasicSpeedometer.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPIBasicVertical.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPIBasicVertical.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPIBasicDial.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPIBasicDial.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/GlassReflection.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/GlassReflection.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPICharcoalVertical.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPICharcoalVertical.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPICharcoalSpeedometer.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPICharcoalSpeedometer.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPIModernDial.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPIModernDial.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPIModernHorizontal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPIModernHorizontal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPICharcoalDial.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPICharcoalDial.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPIModernSpeedometer.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPIModernSpeedometer.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPINoneSpeedometer.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPINoneSpeedometer.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPIModernVertical.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPIModernVertical.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPINoneDial.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPINoneDial.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPINoneVertical.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPINoneVertical.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPICharcoalHorizontal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPICharcoalHorizontal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPINoneHorizontal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPINoneHorizontal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPIOnyxHorizontal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPIOnyxHorizontal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPIOnyxVertical.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPIOnyxVertical.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPIOnyxDial.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPIOnyxDial.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPIOnyxSpeedometer.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPIOnyxSpeedometer.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPISatinDial.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPISatinDial.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPISatinHorizontal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPISatinHorizontal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LineBlur.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LineBlur.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPITrafficSquare.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPITrafficSquare.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LegendSelection.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LegendSelection.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern10.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern10.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPISatinSpeedometer.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPISatinSpeedometer.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/KPISatinVertical.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/KPISatinVertical.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern11.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern11.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern12.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern12.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern13.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern13.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern15.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern15.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern20.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern20.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern17.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern17.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern14.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern14.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern19.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern19.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern18.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern18.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern23.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern23.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern16.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern16.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern21.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern21.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern25.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern25.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern24.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern24.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern28.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern28.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern26.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern26.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern32.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern32.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern33.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern33.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern3.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern3.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern30.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern30.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern36.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern36.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern34.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern34.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern37.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern37.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern35.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern35.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern39.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern39.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern41.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern41.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern38.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern38.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern42.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern42.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern43.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern43.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern40.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern40.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern31.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern31.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern44.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern44.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePatternAtlas.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePatternAtlas.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern45.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern45.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern7.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern7.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MapPinGeoSelection_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MapPinGeoSelection_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern6.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern6.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MapPinLocation_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MapPinLocation_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MapPinGeoSelection_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MapPinGeoSelection_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MapMarker.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MapMarker.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern9.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/LinePattern9.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MapPinLocation_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MapPinLocation_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MapPinRouteFrom_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MapPinRouteFrom_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MapPinRouteFrom_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MapPinRouteFrom_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MapPinRouteTo_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MapPinRouteTo_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MapPinRouteTo_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MapPinRouteTo_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MapPinShadow.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MapPinShadow.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MapPinRouteTarget.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MapPinRouteTarget.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MarkerNormalAtlas128.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MarkerNormalAtlas128.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MarkerNormalAtlas256.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MarkerNormalAtlas256.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/NormalBrushSteel01.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/NormalBrushSteel01.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MarkerNormalAtlas.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MarkerNormalAtlas.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/NormalCarbonFiber03.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/NormalCarbonFiber03.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/NormalCarbonFiber04.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/NormalCarbonFiber04.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/NormalCarbonFiber05.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/NormalCarbonFiber05.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/NormalBoards01.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/NormalBoards01.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/MarkerNormalAtlas512.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/MarkerNormalAtlas512.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/OutlineBlur.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/OutlineBlur.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/NormalCarbonFiber20.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/NormalCarbonFiber20.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternL2.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternL2.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternL1.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternL1.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/OutlineSquare.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/OutlineSquare.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/NormalJean01.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/NormalJean01.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternL3.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternL3.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternL4.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternL4.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternR3.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternR3.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternR4.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternR4.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternR1.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternR1.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternL5.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternL5.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternR2.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternR2.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternSelection.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternSelection.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternX1.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternX1.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternX2.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternX2.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternR5.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternR5.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternX5.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternX5.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternX3.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternX3.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PieNormal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PieNormal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PatternX4.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PatternX4.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PieSelector.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PieSelector.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PieReflection.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PieReflection.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PieNormal4.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PieNormal4.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PieReflecGlass.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PieReflecGlass.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Reflection3DFrank.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Reflection3DFrank.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/RingColor512.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/RingColor512.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/PieReflecButton.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/PieReflecButton.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Reflection3D.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Reflection3D.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Selection256.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Selection256.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Reflection3DPolar.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Reflection3DPolar.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Siding45.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Siding45.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/SphereNormalSquare.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/SphereNormalSquare.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Ring512.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Ring512.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/SidingH.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/SidingH.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-AnimatedProgress.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-AnimatedProgress.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Clustered.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Clustered.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Complete.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Complete.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/SphereNormal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/SphereNormal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-CompleteWithWarnings.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-CompleteWithWarnings.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-ConditionalComplete.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-ConditionalComplete.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Debug.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Debug.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-AttentionNeeded.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-AttentionNeeded.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Flagged.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Flagged.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Embedded.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Embedded.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Error.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Error.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Incomplete.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Incomplete.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Important.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Important.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Information.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Information.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Invalid.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Invalid.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-MediumPriority.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-MediumPriority.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-LowPriority.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-LowPriority.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Locked.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Locked.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Neutral.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Neutral.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Canceled.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Canceled.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Paused.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Paused.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Progress.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Progress.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Scheduled.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Scheduled.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-New.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-New.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Submitted.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Submitted.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Review.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Review.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/Status-Warning.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/Status-Warning.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/ZoomAtlas.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/ZoomAtlas.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_geoAreaCentroid.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_geoAreaCentroid.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/StoneNormals.gif": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/StoneNormals.gif", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_geoAreaCentroidStroke_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_geoAreaCentroidStroke_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_geoAreaCentroidStroke_hover.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_geoAreaCentroidStroke_hover.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_geoAreaCentroidStroke_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_geoAreaCentroidStroke_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_pinShadow.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_pinShadow.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_pinHole.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_pinHole.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_pinStroke_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_pinStroke_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_pinStroke_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_pinStroke_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_pin.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_pin.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_routeLocation.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_routeLocation.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_pinStroke_hover.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_pinStroke_hover.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_searchResultStroke_hover.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_searchResultStroke_hover.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_routeLocationStroke_hover.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_routeLocationStroke_hover.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_routeLocationStroke_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_routeLocationStroke_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_routeLocationStroke_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_routeLocationStroke_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_searchResult.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_searchResult.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_searchResultStroke_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_searchResultStroke_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_searchResultStroke_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/darkTheme_searchResultStroke_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_geoAreaCentroidStroke_hover.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_geoAreaCentroidStroke_hover.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/esri.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/esri.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_geoAreaCentroidStroke_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_geoAreaCentroidStroke_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_geoAreaCentroidStroke_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_geoAreaCentroidStroke_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_pinHole.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_pinHole.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_geoAreaCentroid.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_geoAreaCentroid.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_pin.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_pin.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_pinShadow.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_pinShadow.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_pinStroke_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_pinStroke_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_pinStroke_hover.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_pinStroke_hover.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_routeLocation.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_routeLocation.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_pinStroke_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_pinStroke_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_routeLocationStroke_hover.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_routeLocationStroke_hover.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_routeLocationStroke_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_routeLocationStroke_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_routeLocationStroke_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_routeLocationStroke_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_searchResult.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_searchResult.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_searchResultStroke_hover.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_searchResultStroke_hover.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_searchResultStroke_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_searchResultStroke_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_geoAreaCentroid.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_geoAreaCentroid.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_geoAreaCentroidStroke_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_geoAreaCentroidStroke_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_searchResultStroke_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/highContrastTheme_searchResultStroke_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_pin.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_pin.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_geoAreaCentroidStroke_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_geoAreaCentroidStroke_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_pinHole.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_pinHole.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_geoAreaCentroidStroke_hover.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_geoAreaCentroidStroke_hover.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_pinStroke_hover.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_pinStroke_hover.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_pinStroke_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_pinStroke_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_pinShadow.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_pinShadow.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_routeLocation.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_routeLocation.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_pinStroke_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_pinStroke_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_routeLocationStroke_hover.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_routeLocationStroke_hover.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_routeLocationStroke_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_routeLocationStroke_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_routeLocationStroke_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_routeLocationStroke_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_searchResultStroke_hover.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_searchResultStroke_hover.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_searchResultStroke_normal.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_searchResultStroke_normal.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_searchResultStroke_selected.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_searchResultStroke_selected.png", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/uvmap256.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/uvmap256.png", import.meta.url).href,
    "ltjslib/assets/Commons/assets/clog/Portable_clog.properties": new URL("../umd/assets/ltjslib/assets/Commons/assets/clog/Portable_clog.properties", import.meta.url).href,
    "ltjslib/assets/Commons/assets/styles/SAS_Report_HTMLEncore.css": new URL("../umd/assets/ltjslib/assets/Commons/assets/styles/SAS_Report_HTMLEncore.css", import.meta.url).href,
    "ltjslib/assets/Commons/assets/styles/SAS_Report_Dove.css": new URL("../umd/assets/ltjslib/assets/Commons/assets/styles/SAS_Report_Dove.css", import.meta.url).href,
    "ltjslib/assets/Commons/assets/styles/SAS_Report_Midnight.css": new URL("../umd/assets/ltjslib/assets/Commons/assets/styles/SAS_Report_Midnight.css", import.meta.url).href,
    "ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_searchResult.png": new URL("../umd/assets/ltjslib/assets/OpenGLES2DisplayList/Images/lightTheme_searchResult.png", import.meta.url).href,
    "ltjslib/assets/Commons/assets/styles/SAS_Report_HighContrast.css": new URL("../umd/assets/ltjslib/assets/Commons/assets/styles/SAS_Report_HighContrast.css", import.meta.url).href,
    "ltjslib/assets/Commons/assets/styles/SAS_Report_Opal.css": new URL("../umd/assets/ltjslib/assets/Commons/assets/styles/SAS_Report_Opal.css", import.meta.url).href,
    "ltjslib/assets/Commons/assets/styles/SAS_Report_Raven.css": new URL("../umd/assets/ltjslib/assets/Commons/assets/styles/SAS_Report_Raven.css", import.meta.url).href,
    "ltjslib/assets/Commons/assets/styles/SAS_Report_Raven2.css": new URL("../umd/assets/ltjslib/assets/Commons/assets/styles/SAS_Report_Raven2.css", import.meta.url).href,
    "ltjslib/ltjs-wasm.js": new URL("../umd/assets/ltjslib/ltjs-wasm.js", import.meta.url).href,
    "ltjslib/assets/Commons/assets/styles/SAS_Report_Umstead.css": new URL("../umd/assets/ltjslib/assets/Commons/assets/styles/SAS_Report_Umstead.css", import.meta.url).href,
    "ltjslib/assets/Commons/assets/tzrules/sas_historictimezone.txt": new URL("../umd/assets/ltjslib/assets/Commons/assets/tzrules/sas_historictimezone.txt", import.meta.url).href,
    "ltjslib/assets/Commons/assets/esri.wkid": new URL("../umd/assets/ltjslib/assets/Commons/assets/esri.wkid", import.meta.url).href,
    "ltjslib/assets/Commons/assets/tzrules/sas_saving.txt": new URL("../umd/assets/ltjslib/assets/Commons/assets/tzrules/sas_saving.txt", import.meta.url).href,
    "ltjslib/ltjs-wasmSymData.json": new URL("../umd/assets/ltjslib/ltjs-wasmSymData.json", import.meta.url).href,
    "ltjslib/ltjs-wasm.wasm": new URL("../umd/assets/ltjslib/ltjs-wasm.wasm", import.meta.url).href,
    "ltjslib/themes/sas_base/library-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_base/library-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_base/library.css": new URL("../umd/assets/ltjslib/themes/sas_base/library.css", import.meta.url).href,
    "ltjslib/themes/sas_corporate/graph.css": new URL("../umd/assets/ltjslib/themes/sas_corporate/graph.css", import.meta.url).href,
    "ltjslib/themes/sas_corporate/library-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_corporate/library-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_corporate/graph-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_corporate/graph-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_corporate/library.css": new URL("../umd/assets/ltjslib/themes/sas_corporate/library.css", import.meta.url).href,
    "ltjslib/themes/sas_hcb/library-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_hcb/library-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_hcb/graph-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_hcb/graph-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_hcb/graph.css": new URL("../umd/assets/ltjslib/themes/sas_hcb/graph.css", import.meta.url).href,
    "ltjslib/themes/sas_hcb/library.css": new URL("../umd/assets/ltjslib/themes/sas_hcb/library.css", import.meta.url).href,
    "ltjslib/themes/sas_ignite/graph-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_ignite/graph-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_ignite/graph.css": new URL("../umd/assets/ltjslib/themes/sas_ignite/graph.css", import.meta.url).href,
    "ltjslib/themes/sas_ignite/library-RTL.css": new URL("../umd/assets/ltjslib/themes/sas_ignite/library-RTL.css", import.meta.url).href,
    "ltjslib/themes/sas_ignite/library.css": new URL("../umd/assets/ltjslib/themes/sas_ignite/library.css", import.meta.url).href
};

function qRe(e) {
    return YRe[e] ?? null;
}

async function XRe(e) {
    const t = new FontFace("sas-icons", `url(${e})`, {
        weight: "normal",
        style: "normal"
    });
    document.fonts.add(t);
    return t.load();
}

jRe();

$Re({
    getResourceUrl: qRe
});

KRe(new URL("index.css", import.meta.url).href);

XRe(new URL("../umd/assets/fonts/sas-icons-regular.ttf", import.meta.url).href);

zo({
    async initialize(e) {
        if (e.type === "dynamic") {
            e.setupLtjsRuntime();
            e.setupLtjsEnvironment();
            e.initRootStyles("sas-va-sdk");
            e.setHonorLocalFormatSettings(true);
            e.initNovaI18n();
        }
        await WRe();
    }
});

export { Mbe as $, Eue as A, lpe as B, rD as C, nb as D, L_ as E, Kie as F, zT as G, Cx as H, l_ as I, tL as J, Hbe as K, NRe as L, oW as M, Pf as N, WSe as O, VTe as P, tb as Q, TRe as R, Bg as S, c_ as T, fg as U, Wbe as V, oy as W, ay as X, ly as Y, sy as Z, Fo as _, aS as a, Lo as a0, Fue as a1, kwe as a2, BRe as a3, LRe as a4, MRe as a5, FRe as a6, Mo as a7, Oo as a8, Po as a9, Ide as aa, Obe as ab, ob as ac, Gie as ad, nh as ae, Qh as af, Qg as ag, qie as ah, Yie as ai, ab as aj, mb as ak, lh as al, ib as am, Hv as an, cn as ao, hd as ap, py as aq, Ube as ar, $h as b, Fh as c, Ay as d, bb as e, My as f, Gh as g, tS as h, jh as i, Fy as j, jy as k, Uh as l, Hg as m, Cwe as n, Wh as o, Nce as p, Fl as q, RRe as r, Kh as s, NA as t, Xie as u, eW as v, Hh as w, Sg as x, rb as y, xO as z };
