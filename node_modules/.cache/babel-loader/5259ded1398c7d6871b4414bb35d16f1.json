{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amyeoz\\\\Downloads\\\\timetable_schedule\\\\src\\\\calendar\\\\Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { DayPilotCalendar, DayPilot } from \"@daypilot/daypilot-lite-react\"; // Import DayPilot\n\nimport \"./Calendar.css\";\nimport { convertToDayDateTime, processFormDates, convertToCSV, downloadCSV, getDateForSelectedDay } from './days.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  wrap: {\n    display: \"flex\"\n  },\n  main: {\n    flexGrow: \"1\"\n  }\n};\n\nconst Calendar = () => {\n  _s();\n\n  const [calendar, setCalendar] = useState(null);\n  const [events, setEvents] = useState([]);\n  const startDate = \"2024-10-07\"; // Fixed start date for the week (Monday)\n\n  const config = {\n    viewType: \"days\",\n    durationBarVisible: false,\n    days: 5,\n    // Show only Monday to Friday\n    timeRangeSelectedHandling: \"Enabled\",\n    businessBeginsHour: 7,\n    businessEndsHour: 20,\n    // Time range selection and event creation logic goes here...\n    events: events\n  }; // Helper function to read the CSV file and parse it into event objects\n\n  const parseCSVFile = file => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      const csvContent = e.target.result;\n      console.log(\"CSV Content:\", csvContent); // Log the CSV content for debugging\n      // Split rows and remove any empty lines\n\n      const rows = csvContent.split(\"\\n\").filter(row => row.trim() !== \"\");\n      const parsedEvents = rows.map((row, index) => {\n        // Remove the trailing '\\r' from each row and split it into columns\n        const columns = row.replace(/\\r$/, \"\").split(\",\").map(col => col.trim()); // Check if we have the expected number of columns\n\n        if (columns.length < 8) {\n          console.error(`Row ${index + 1} has missing columns`, columns);\n          return null; // Skip this row\n        }\n\n        const [module, classInfo, classType, timeSlot, room, timeslotDay, timeslotStart, timeslotEnd] = columns; // Log parsed data for debugging\n\n        console.log(`Row ${index + 1}:`, {\n          timeslotDay,\n          timeslotStart,\n          timeslotEnd\n        }); // Check for undefined values and log them\n\n        if (!timeslotStart || !timeslotEnd || !timeslotDay) {\n          console.error(`Row ${index + 1} has missing timeslot data:`, {\n            timeslotStart,\n            timeslotEnd,\n            timeslotDay\n          });\n          return null; // Skip this row\n        }\n\n        console.log(timeslotStart); // Log the CSV content for debugging\n        // Process start and end times\n\n        const {\n          startDateTime,\n          endDateTime\n        } = processFormDates(timeslotDay, timeslotStart.trim(), timeslotEnd.trim());\n        return {\n          id: DayPilot.guid(),\n          start: new DayPilot.Date(startDateTime),\n          end: new DayPilot.Date(endDateTime),\n          text: module,\n          classroom: room,\n          class: classInfo,\n          classType: classType\n        };\n      }).filter(event => event !== null); // Filter out invalid rows\n\n      setEvents(parsedEvents); // Update the events state\n\n      calendar.update(); // Force the calendar to update\n    };\n\n    reader.readAsText(file); // Read the CSV file as text\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.buttonWrap,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          const csvContent = convertToCSV(events); // Convert events to CSV format\n\n          downloadCSV(csvContent, 'schedule.csv'); // Trigger the download\n        },\n        children: \"Export to CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        onChange: e => {\n          const file = e.target.files[0];\n\n          if (file) {\n            parseCSVFile(file);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Import from CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.main,\n      children: /*#__PURE__*/_jsxDEV(DayPilotCalendar, { ...config,\n        startDate: startDate,\n        controlRef: setCalendar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calendar, \"zuRJhdDuPNajtmGWqS48/Wqf5uw=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useEffect","useState","DayPilotCalendar","DayPilot","convertToDayDateTime","processFormDates","convertToCSV","downloadCSV","getDateForSelectedDay","styles","wrap","display","main","flexGrow","Calendar","calendar","setCalendar","events","setEvents","startDate","config","viewType","durationBarVisible","days","timeRangeSelectedHandling","businessBeginsHour","businessEndsHour","parseCSVFile","file","reader","FileReader","onload","e","csvContent","target","result","console","log","rows","split","filter","row","trim","parsedEvents","map","index","columns","replace","col","length","error","module","classInfo","classType","timeSlot","room","timeslotDay","timeslotStart","timeslotEnd","startDateTime","endDateTime","id","guid","start","Date","end","text","classroom","class","event","update","readAsText","buttonWrap","files"],"sources":["C:/Users/amyeoz/Downloads/timetable_schedule/src/calendar/Calendar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { DayPilotCalendar, DayPilot } from \"@daypilot/daypilot-lite-react\"; // Import DayPilot\nimport \"./Calendar.css\";\nimport { convertToDayDateTime, processFormDates, convertToCSV, downloadCSV, getDateForSelectedDay } from './days.js';\n\nconst styles = {\n  wrap: {\n    display: \"flex\"\n  },\n  main: {\n    flexGrow: \"1\"\n  }\n};\n\nconst Calendar = () => {\n  const [calendar, setCalendar] = useState(null);\n  const [events, setEvents] = useState([]);\n\n  const startDate = \"2024-10-07\"; // Fixed start date for the week (Monday)\n\n  const config = {\n    viewType: \"days\",\n    durationBarVisible: false,\n    days: 5, // Show only Monday to Friday\n    timeRangeSelectedHandling: \"Enabled\",\n    businessBeginsHour: 7,\n    businessEndsHour: 20,\n    // Time range selection and event creation logic goes here...\n    events: events\n  };\n\n  // Helper function to read the CSV file and parse it into event objects\n  const parseCSVFile = (file) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const csvContent = e.target.result;\n      console.log(\"CSV Content:\", csvContent); // Log the CSV content for debugging\n  \n      // Split rows and remove any empty lines\n      const rows = csvContent.split(\"\\n\").filter(row => row.trim() !== \"\");\n  \n      const parsedEvents = rows.map((row, index) => {\n        // Remove the trailing '\\r' from each row and split it into columns\n        const columns = row.replace(/\\r$/, \"\").split(\",\").map(col => col.trim());\n  \n        // Check if we have the expected number of columns\n        if (columns.length < 8) {\n          console.error(`Row ${index + 1} has missing columns`, columns);\n          return null; // Skip this row\n        }\n  \n        const [module, classInfo, classType, timeSlot, room, timeslotDay, timeslotStart, timeslotEnd] = columns;\n  \n        // Log parsed data for debugging\n        console.log(`Row ${index + 1}:`, { timeslotDay, timeslotStart, timeslotEnd });\n  \n        // Check for undefined values and log them\n        if (!timeslotStart || !timeslotEnd || !timeslotDay) {\n          console.error(`Row ${index + 1} has missing timeslot data:`, { timeslotStart, timeslotEnd, timeslotDay });\n          return null; // Skip this row\n        }\n        console.log(timeslotStart); // Log the CSV content for debugging\n\n  \n        // Process start and end times\n        const { startDateTime, endDateTime } = processFormDates(timeslotDay, timeslotStart.trim(), timeslotEnd.trim());\n  \n        return {\n          id: DayPilot.guid(),\n          start: new DayPilot.Date(startDateTime),\n          end: new DayPilot.Date(endDateTime),\n          text: module,\n          classroom: room,\n          class: classInfo,\n          classType: classType\n        };\n      }).filter(event => event !== null); // Filter out invalid rows\n      setEvents(parsedEvents); // Update the events state\n      calendar.update(); // Force the calendar to update\n    };\n  \n    reader.readAsText(file); // Read the CSV file as text\n  };\n  \n\n  return (\n    <div>\n      <div style={styles.buttonWrap}>\n        <button onClick={() => {\n          const csvContent = convertToCSV(events);  // Convert events to CSV format\n          downloadCSV(csvContent, 'schedule.csv');  // Trigger the download\n        }}>\n          Export to CSV\n        </button>\n\n        {/* Add the file input for CSV import */}\n        <input\n          type=\"file\"\n          accept=\".csv\"\n          onChange={(e) => {\n            const file = e.target.files[0];\n            if (file) {\n              parseCSVFile(file);\n            }\n          }}\n        />\n        <button>Import from CSV</button>\n      </div>\n\n      <div style={styles.main}>\n        <DayPilotCalendar\n          {...config}\n          startDate={startDate}\n          controlRef={setCalendar}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Calendar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}