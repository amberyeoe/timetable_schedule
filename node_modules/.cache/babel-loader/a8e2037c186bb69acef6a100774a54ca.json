{"ast":null,"code":"// Base reference date: 07/10/2024 is Monday\nexport const baseDate = new Date(2024, 9, 7); // October is month 9 (zero-indexed)\n\nexport const getDateForSelectedDay = day => {\n  const dayMap = {\n    \"Monday\": 0,\n    \"Tuesday\": 1,\n    \"Wednesday\": 2,\n    \"Thursday\": 3,\n    \"Friday\": 4\n  };\n  const offset = dayMap[day];\n  const selectedDate = new Date(baseDate);\n  selectedDate.setDate(baseDate.getDate() + offset); // Add the offset to 07/10/2024 (Monday)\n\n  return selectedDate;\n};\nexport const convertToDayDateTime = (isoString, num) => {\n  const date = new Date(isoString);\n  const dayOfWeek = date.toLocaleDateString('en-US', {\n    weekday: 'long'\n  });\n  const time = date.toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: false\n  }); // Example: 10:30\n\n  if (num === 1) {\n    return time;\n  } else {\n    return {\n      dayOfWeek,\n      time\n    };\n  }\n\n  ;\n};\nexport const processFormDates = (day, startTime, endTime) => {\n  // Get the selected day and map it to a real date starting from 07/10/2024\n  const selectedDay = day;\n  const selectedDate = getDateForSelectedDay(selectedDay); // Parse the selected start and end times\n\n  const [startHour, startMinute] = startTime.split(':').map(Number);\n  const [endHour, endMinute] = endTime.split(':').map(Number); // Create the full start and end dates with the selected times\n\n  const startDateTime = new Date(selectedDate);\n  startDateTime.setHours(startHour + 8, startMinute, 0, 0);\n  const endDateTime = new Date(selectedDate);\n  endDateTime.setHours(endHour + 8, endMinute, 0, 0);\n  return {\n    startDateTime,\n    endDateTime\n  };\n};\nexport const convertToCSV = events => {\n  const headers = ['Module Name', 'Class', 'Class Type', 'Classroom', 'Day', 'Start Time', 'End Time'];\n  const {\n    dayOfWeek,\n    time: startTime\n  } = convertToDayDateTime(args.start, 2);\n  const endTime = convertToDayDateTime(args.end, 1);\n  const rows = events.map(event => [event.text, event.class || 'N/A', event.classType || 'N/A', event.classroom || 'N/A', event.start, event.end]);\n  const csvContent = [headers.join(','), // Join headers with commas\n  ...rows.map(row => row.join(',')) // Join each row with commas\n  ].join('\\n'); // Join rows with newlines\n\n  return csvContent;\n}; // Function to trigger CSV file download\n\nexport const downloadCSV = (csvContent, filename) => {\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.setAttribute('download', filename);\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};","map":{"version":3,"names":["baseDate","Date","getDateForSelectedDay","day","dayMap","offset","selectedDate","setDate","getDate","convertToDayDateTime","isoString","num","date","dayOfWeek","toLocaleDateString","weekday","time","toLocaleTimeString","hour","minute","hour12","processFormDates","startTime","endTime","selectedDay","startHour","startMinute","split","map","Number","endHour","endMinute","startDateTime","setHours","endDateTime","convertToCSV","events","headers","args","start","end","rows","event","text","class","classType","classroom","csvContent","join","row","downloadCSV","filename","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild"],"sources":["C:/Users/amyeoz/Downloads/schedule/src/calendar/days.js"],"sourcesContent":["// Base reference date: 07/10/2024 is Monday\r\nexport const baseDate = new Date(2024, 9, 7); // October is month 9 (zero-indexed)\r\n\r\nexport const getDateForSelectedDay = (day) => {\r\n    const dayMap = { \"Monday\": 0, \"Tuesday\": 1, \"Wednesday\": 2, \"Thursday\": 3, \"Friday\": 4 };\r\n    const offset = dayMap[day];\r\n    const selectedDate = new Date(baseDate);\r\n    selectedDate.setDate(baseDate.getDate() + offset); // Add the offset to 07/10/2024 (Monday)\r\n    return selectedDate;\r\n  };\r\n\r\nexport const convertToDayDateTime = (isoString, num) => {\r\n    const date = new Date(isoString);\r\n    const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });\r\n    const time = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false }); // Example: 10:30\r\n    if (num === 1){\r\n        return time;\r\n    } else {\r\n        return { dayOfWeek, time };\r\n    };\r\n}\r\n\r\nexport const processFormDates = (day, startTime, endTime) => {\r\n    // Get the selected day and map it to a real date starting from 07/10/2024\r\n    const selectedDay = day;\r\n    const selectedDate = getDateForSelectedDay(selectedDay);\r\n  \r\n    // Parse the selected start and end times\r\n    const [startHour, startMinute] = startTime.split(':').map(Number);\r\n    const [endHour, endMinute] = endTime.split(':').map(Number);\r\n  \r\n    // Create the full start and end dates with the selected times\r\n    const startDateTime = new Date(selectedDate);\r\n    startDateTime.setHours(startHour + 8, startMinute, 0, 0);\r\n  \r\n    const endDateTime = new Date(selectedDate);\r\n    endDateTime.setHours(endHour + 8, endMinute, 0, 0);\r\n\r\n    return {startDateTime, endDateTime};\r\n};\r\n\r\nexport const convertToCSV = (events) => {\r\n    const headers = ['Module Name', 'Class', 'Class Type', 'Classroom', 'Day', 'Start Time', 'End Time'];\r\n    const { dayOfWeek, time: startTime } = convertToDayDateTime(args.start, 2);\r\n    const endTime = convertToDayDateTime(args.end, 1);\r\n    const rows = events.map(event => [\r\n      event.text,\r\n      event.class || 'N/A',\r\n      event.classType || 'N/A',\r\n      event.classroom || 'N/A',\r\n      event.start,\r\n      event.end,\r\n    ]);\r\n  \r\n    const csvContent = [\r\n      headers.join(','),  // Join headers with commas\r\n      ...rows.map(row => row.join(','))  // Join each row with commas\r\n    ].join('\\n');  // Join rows with newlines\r\n  \r\n    return csvContent;\r\n  };\r\n  \r\n  // Function to trigger CSV file download\r\n  export const downloadCSV = (csvContent, filename) => {\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', filename);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module"}