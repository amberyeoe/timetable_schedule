{"ast":null,"code":"const parseCSVFile = file => {\n  const reader = new FileReader();\n\n  reader.onload = e => {\n    const csvContent = e.target.result;\n    console.log(\"CSV Content:\", csvContent); // Log the CSV content for debugging\n    // Split rows and remove any empty lines\n\n    const rows = csvContent.split(\"\\n\").filter(row => row.trim() !== \"\");\n    const parsedEvents = rows.map((row, index) => {\n      // Remove the trailing '\\r' from each row and split it into columns\n      const columns = row.replace(/\\r$/, \"\").split(\",\").map(col => col.trim()); // Check if we have the expected number of columns\n\n      if (columns.length < 8) {\n        console.error(`Row ${index + 1} has missing columns`, columns);\n        return null; // Skip this row\n      }\n\n      const [module, classInfo, classType, timeSlot, room, timeslotDay, timeslotStart, timeslotEnd] = columns; // Log parsed data for debugging\n\n      console.log(`Row ${index + 1}:`, {\n        timeslotDay,\n        timeslotStart,\n        timeslotEnd\n      }); // Skip rows where timeslotStart or timeslotEnd is missing or invalid\n\n      if (!timeslotStart || !timeslotEnd || timeslotStart.trim() === \"\" || timeslotEnd.trim() === \"\") {\n        console.error(`Invalid timeslot data on row ${index + 1}:`, {\n          timeslotStart,\n          timeslotEnd\n        });\n        return null; // Skip this row\n      } // Process start and end times\n\n\n      const {\n        startDateTime,\n        endDateTime\n      } = processFormDates(timeslotDay, timeslotStart.trim(), timeslotEnd.trim());\n      return {\n        id: DayPilot.guid(),\n        start: new DayPilot.Date(startDateTime),\n        end: new DayPilot.Date(endDateTime),\n        text: module,\n        classroom: room,\n        class: classInfo,\n        classType: classType\n      };\n    }).filter(event => event !== null); // Filter out invalid rows\n\n    setEvents(parsedEvents); // Update the events state\n\n    calendar.update(); // Force the calendar to update\n  };\n\n  reader.readAsText(file); // Read the CSV file as text\n};","map":{"version":3,"names":["parseCSVFile","file","reader","FileReader","onload","e","csvContent","target","result","console","log","rows","split","filter","row","trim","parsedEvents","map","index","columns","replace","col","length","error","module","classInfo","classType","timeSlot","room","timeslotDay","timeslotStart","timeslotEnd","startDateTime","endDateTime","processFormDates","id","DayPilot","guid","start","Date","end","text","classroom","class","event","setEvents","calendar","update","readAsText"],"sources":["C:/Users/amyeoz/Downloads/timetable_schedule/src/calendar/Calendar.js"],"sourcesContent":["const parseCSVFile = (file) => {\n  const reader = new FileReader();\n  reader.onload = (e) => {\n    const csvContent = e.target.result;\n    console.log(\"CSV Content:\", csvContent); // Log the CSV content for debugging\n\n    // Split rows and remove any empty lines\n    const rows = csvContent.split(\"\\n\").filter(row => row.trim() !== \"\");\n\n    const parsedEvents = rows.map((row, index) => {\n      // Remove the trailing '\\r' from each row and split it into columns\n      const columns = row.replace(/\\r$/, \"\").split(\",\").map(col => col.trim());\n\n      // Check if we have the expected number of columns\n      if (columns.length < 8) {\n        console.error(`Row ${index + 1} has missing columns`, columns);\n        return null; // Skip this row\n      }\n\n      const [module, classInfo, classType, timeSlot, room, timeslotDay, timeslotStart, timeslotEnd] = columns;\n\n      // Log parsed data for debugging\n      console.log(`Row ${index + 1}:`, { timeslotDay, timeslotStart, timeslotEnd });\n\n      // Skip rows where timeslotStart or timeslotEnd is missing or invalid\n      if (!timeslotStart || !timeslotEnd || timeslotStart.trim() === \"\" || timeslotEnd.trim() === \"\") {\n        console.error(`Invalid timeslot data on row ${index + 1}:`, { timeslotStart, timeslotEnd });\n        return null; // Skip this row\n      }\n\n      // Process start and end times\n      const { startDateTime, endDateTime } = processFormDates(timeslotDay, timeslotStart.trim(), timeslotEnd.trim());\n\n      return {\n        id: DayPilot.guid(),\n        start: new DayPilot.Date(startDateTime),\n        end: new DayPilot.Date(endDateTime),\n        text: module,\n        classroom: room,\n        class: classInfo,\n        classType: classType\n      };\n    }).filter(event => event !== null); // Filter out invalid rows\n\n    setEvents(parsedEvents); // Update the events state\n    calendar.update(); // Force the calendar to update\n  };\n\n  reader.readAsText(file); // Read the CSV file as text\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,IAAD,IAAU;EAC7B,MAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;EACAD,MAAM,CAACE,MAAP,GAAiBC,CAAD,IAAO;IACrB,MAAMC,UAAU,GAAGD,CAAC,CAACE,MAAF,CAASC,MAA5B;IACAC,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BJ,UAA5B,EAFqB,CAEoB;IAEzC;;IACA,MAAMK,IAAI,GAAGL,UAAU,CAACM,KAAX,CAAiB,IAAjB,EAAuBC,MAAvB,CAA8BC,GAAG,IAAIA,GAAG,CAACC,IAAJ,OAAe,EAApD,CAAb;IAEA,MAAMC,YAAY,GAAGL,IAAI,CAACM,GAAL,CAAS,CAACH,GAAD,EAAMI,KAAN,KAAgB;MAC5C;MACA,MAAMC,OAAO,GAAGL,GAAG,CAACM,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,EAAuBR,KAAvB,CAA6B,GAA7B,EAAkCK,GAAlC,CAAsCI,GAAG,IAAIA,GAAG,CAACN,IAAJ,EAA7C,CAAhB,CAF4C,CAI5C;;MACA,IAAII,OAAO,CAACG,MAAR,GAAiB,CAArB,EAAwB;QACtBb,OAAO,CAACc,KAAR,CAAe,OAAML,KAAK,GAAG,CAAE,sBAA/B,EAAsDC,OAAtD;QACA,OAAO,IAAP,CAFsB,CAET;MACd;;MAED,MAAM,CAACK,MAAD,EAASC,SAAT,EAAoBC,SAApB,EAA+BC,QAA/B,EAAyCC,IAAzC,EAA+CC,WAA/C,EAA4DC,aAA5D,EAA2EC,WAA3E,IAA0FZ,OAAhG,CAV4C,CAY5C;;MACAV,OAAO,CAACC,GAAR,CAAa,OAAMQ,KAAK,GAAG,CAAE,GAA7B,EAAiC;QAAEW,WAAF;QAAeC,aAAf;QAA8BC;MAA9B,CAAjC,EAb4C,CAe5C;;MACA,IAAI,CAACD,aAAD,IAAkB,CAACC,WAAnB,IAAkCD,aAAa,CAACf,IAAd,OAAyB,EAA3D,IAAiEgB,WAAW,CAAChB,IAAZ,OAAuB,EAA5F,EAAgG;QAC9FN,OAAO,CAACc,KAAR,CAAe,gCAA+BL,KAAK,GAAG,CAAE,GAAxD,EAA4D;UAAEY,aAAF;UAAiBC;QAAjB,CAA5D;QACA,OAAO,IAAP,CAF8F,CAEjF;MACd,CAnB2C,CAqB5C;;;MACA,MAAM;QAAEC,aAAF;QAAiBC;MAAjB,IAAiCC,gBAAgB,CAACL,WAAD,EAAcC,aAAa,CAACf,IAAd,EAAd,EAAoCgB,WAAW,CAAChB,IAAZ,EAApC,CAAvD;MAEA,OAAO;QACLoB,EAAE,EAAEC,QAAQ,CAACC,IAAT,EADC;QAELC,KAAK,EAAE,IAAIF,QAAQ,CAACG,IAAb,CAAkBP,aAAlB,CAFF;QAGLQ,GAAG,EAAE,IAAIJ,QAAQ,CAACG,IAAb,CAAkBN,WAAlB,CAHA;QAILQ,IAAI,EAAEjB,MAJD;QAKLkB,SAAS,EAAEd,IALN;QAMLe,KAAK,EAAElB,SANF;QAOLC,SAAS,EAAEA;MAPN,CAAP;IASD,CAjCoB,EAiClBb,MAjCkB,CAiCX+B,KAAK,IAAIA,KAAK,KAAK,IAjCR,CAArB,CAPqB,CAwCe;;IAEpCC,SAAS,CAAC7B,YAAD,CAAT,CA1CqB,CA0CI;;IACzB8B,QAAQ,CAACC,MAAT,GA3CqB,CA2CF;EACpB,CA5CD;;EA8CA7C,MAAM,CAAC8C,UAAP,CAAkB/C,IAAlB,EAhD6B,CAgDJ;AAC1B,CAjDD"},"metadata":{},"sourceType":"module"}