{"ast":null,"code":"// Base reference date: 07/10/2024 is Monday\nexport const baseDate = new Date(2024, 9, 7); // October is month 9 (zero-indexed)\n\nexport const getDateForSelectedDay = day => {\n  const dayMap = {\n    \"Monday\": 0,\n    \"Tuesday\": 1,\n    \"Wednesday\": 2,\n    \"Thursday\": 3,\n    \"Friday\": 4\n  };\n  const offset = dayMap[day];\n  const selectedDate = new Date(baseDate);\n  selectedDate.setDate(baseDate.getDate() + offset); // Add the offset to 07/10/2024 (Monday)\n\n  return selectedDate;\n};\nexport const convertToDayDateTime = isoString => {\n  const date = new Date(isoString);\n  const dayOfWeek = date.toLocaleDateString('en-US', {\n    weekday: 'long'\n  });\n  const time = date.toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: false\n  }); // Example: 10:30\n\n  return {\n    dayOfWeek,\n    date,\n    time\n  };\n};\nexport const processFormDates = (day, startTime, endTime) => {\n  // Get the selected day and map it to a real date starting from 07/10/2024\n  const selectedDay = day;\n  const selectedDate = getDateForSelectedDay(selectedDay); // Parse the selected start and end times\n\n  const [startHour, startMinute] = startTime.split(':').map(Number);\n  const [endHour, endMinute] = endTime.split(':').map(Number); // Create the full start and end dates with the selected times\n\n  const startDateTime = new Date(selectedDate);\n  startDateTime.setHours(startHour + 8, startMinute, 0, 0);\n  const endDateTime = new Date(selectedDate);\n  endDateTime.setHours(endHour + 8, endMinute, 0, 0);\n  return {};\n};","map":{"version":3,"names":["baseDate","Date","getDateForSelectedDay","day","dayMap","offset","selectedDate","setDate","getDate","convertToDayDateTime","isoString","date","dayOfWeek","toLocaleDateString","weekday","time","toLocaleTimeString","hour","minute","hour12","processFormDates","startTime","endTime","selectedDay","startHour","startMinute","split","map","Number","endHour","endMinute","startDateTime","setHours","endDateTime"],"sources":["C:/Users/amyeoz/Downloads/testing/src/calendar/days.js"],"sourcesContent":["// Base reference date: 07/10/2024 is Monday\r\nexport const baseDate = new Date(2024, 9, 7); // October is month 9 (zero-indexed)\r\n\r\nexport const getDateForSelectedDay = (day) => {\r\n    const dayMap = { \"Monday\": 0, \"Tuesday\": 1, \"Wednesday\": 2, \"Thursday\": 3, \"Friday\": 4 };\r\n    const offset = dayMap[day];\r\n    const selectedDate = new Date(baseDate);\r\n    selectedDate.setDate(baseDate.getDate() + offset); // Add the offset to 07/10/2024 (Monday)\r\n    return selectedDate;\r\n  };\r\n\r\nexport const convertToDayDateTime = (isoString) => {\r\n    const date = new Date(isoString);\r\n    const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });\r\n    const time = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false }); // Example: 10:30\r\n    return { dayOfWeek, date, time };\r\n}\r\n\r\nexport const processFormDates = (day, startTime, endTime) => {\r\n    // Get the selected day and map it to a real date starting from 07/10/2024\r\n    const selectedDay = day;\r\n    const selectedDate = getDateForSelectedDay(selectedDay);\r\n  \r\n    // Parse the selected start and end times\r\n    const [startHour, startMinute] = startTime.split(':').map(Number);\r\n    const [endHour, endMinute] = endTime.split(':').map(Number);\r\n  \r\n    // Create the full start and end dates with the selected times\r\n    const startDateTime = new Date(selectedDate);\r\n    startDateTime.setHours(startHour + 8, startMinute, 0, 0);\r\n  \r\n    const endDateTime = new Date(selectedDate);\r\n    endDateTime.setHours(endHour + 8, endMinute, 0, 0);\r\n\r\n    return {}\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,QAAQ,GAAG,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAAjB,C,CAAuC;;AAE9C,OAAO,MAAMC,qBAAqB,GAAIC,GAAD,IAAS;EAC1C,MAAMC,MAAM,GAAG;IAAE,UAAU,CAAZ;IAAe,WAAW,CAA1B;IAA6B,aAAa,CAA1C;IAA6C,YAAY,CAAzD;IAA4D,UAAU;EAAtE,CAAf;EACA,MAAMC,MAAM,GAAGD,MAAM,CAACD,GAAD,CAArB;EACA,MAAMG,YAAY,GAAG,IAAIL,IAAJ,CAASD,QAAT,CAArB;EACAM,YAAY,CAACC,OAAb,CAAqBP,QAAQ,CAACQ,OAAT,KAAqBH,MAA1C,EAJ0C,CAIS;;EACnD,OAAOC,YAAP;AACD,CANI;AAQP,OAAO,MAAMG,oBAAoB,GAAIC,SAAD,IAAe;EAC/C,MAAMC,IAAI,GAAG,IAAIV,IAAJ,CAASS,SAAT,CAAb;EACA,MAAME,SAAS,GAAGD,IAAI,CAACE,kBAAL,CAAwB,OAAxB,EAAiC;IAAEC,OAAO,EAAE;EAAX,CAAjC,CAAlB;EACA,MAAMC,IAAI,GAAGJ,IAAI,CAACK,kBAAL,CAAwB,OAAxB,EAAiC;IAAEC,IAAI,EAAE,SAAR;IAAmBC,MAAM,EAAE,SAA3B;IAAsCC,MAAM,EAAE;EAA9C,CAAjC,CAAb,CAH+C,CAGuD;;EACtG,OAAO;IAAEP,SAAF;IAAaD,IAAb;IAAmBI;EAAnB,CAAP;AACH,CALM;AAOP,OAAO,MAAMK,gBAAgB,GAAG,CAACjB,GAAD,EAAMkB,SAAN,EAAiBC,OAAjB,KAA6B;EACzD;EACA,MAAMC,WAAW,GAAGpB,GAApB;EACA,MAAMG,YAAY,GAAGJ,qBAAqB,CAACqB,WAAD,CAA1C,CAHyD,CAKzD;;EACA,MAAM,CAACC,SAAD,EAAYC,WAAZ,IAA2BJ,SAAS,CAACK,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,CAAyBC,MAAzB,CAAjC;EACA,MAAM,CAACC,OAAD,EAAUC,SAAV,IAAuBR,OAAO,CAACI,KAAR,CAAc,GAAd,EAAmBC,GAAnB,CAAuBC,MAAvB,CAA7B,CAPyD,CASzD;;EACA,MAAMG,aAAa,GAAG,IAAI9B,IAAJ,CAASK,YAAT,CAAtB;EACAyB,aAAa,CAACC,QAAd,CAAuBR,SAAS,GAAG,CAAnC,EAAsCC,WAAtC,EAAmD,CAAnD,EAAsD,CAAtD;EAEA,MAAMQ,WAAW,GAAG,IAAIhC,IAAJ,CAASK,YAAT,CAApB;EACA2B,WAAW,CAACD,QAAZ,CAAqBH,OAAO,GAAG,CAA/B,EAAkCC,SAAlC,EAA6C,CAA7C,EAAgD,CAAhD;EAEA,OAAO,EAAP;AACH,CAjBM"},"metadata":{},"sourceType":"module"}