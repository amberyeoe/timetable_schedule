{"ast":null,"code":"// Base reference date: 07/10/2024 is Monday\nexport const baseDate = new Date(2024, 9, 7); // October is month 9 (zero-indexed)\n\nexport const getDateForSelectedDay = day => {\n  const dayMap = {\n    \"Monday\": 0,\n    \"Tuesday\": 1,\n    \"Wednesday\": 2,\n    \"Thursday\": 3,\n    \"Friday\": 4\n  };\n  const offset = dayMap[day];\n  const selectedDate = new Date(baseDate);\n  selectedDate.setDate(baseDate.getDate() + offset); // Add the offset to 07/10/2024 (Monday)\n\n  return selectedDate;\n};\nexport const convertToDayDateTime = (isoString, num) => {\n  const date = new Date(isoString);\n  const dayOfWeek = date.toLocaleDateString('en-US', {\n    weekday: 'long'\n  });\n  const time = date.toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: false\n  }); // Example: 10:30\n\n  if (num === 1) {\n    return time;\n  } else {\n    return {\n      dayOfWeek,\n      time\n    };\n  }\n\n  ;\n};\nexport const processFormDates = (day, startTime, endTime) => {\n  // Get the selected day and map it to a real date starting from 07/10/2024\n  const selectedDay = day;\n  const selectedDate = getDateForSelectedDay(selectedDay); // Parse the selected start and end times\n\n  const [startHour, startMinute] = startTime.split(':').map(Number);\n  const [endHour, endMinute] = endTime.split(':').map(Number); // Create the full start and end dates with the selected times\n\n  const startDateTime = new Date(selectedDate);\n  startDateTime.setHours(startHour + 8, startMinute, 0, 0);\n  const endDateTime = new Date(selectedDate);\n  endDateTime.setHours(endHour + 8, endMinute, 0, 0);\n  return {\n    startDateTime,\n    endDateTime\n  };\n}; // time slot id look up\n\nconst timeSlotLookup = {\n  \"Monday\": {\n    \"08:00\": \"TS1\",\n    \"09:00\": \"TS2\",\n    \"10:00\": \"TS3\",\n    \"11:00\": \"TS4\",\n    \"13:00\": \"TS5\",\n    \"14:00\": \"TS6\",\n    \"15:00\": \"TS7\",\n    \"16:00\": \"TS8\",\n    \"17:00\": \"TS9\"\n  },\n  \"Tuesday\": {\n    \"08:00\": \"TS10\",\n    \"09:00\": \"TS11\",\n    \"10:00\": \"TS12\",\n    \"11:00\": \"TS13\",\n    \"13:00\": \"TS14\",\n    \"14:00\": \"TS15\",\n    \"15:00\": \"TS16\",\n    \"16:00\": \"TS17\",\n    \"17:00\": \"TS18\"\n  },\n  \"Wednesday\": {\n    \"8:00\": \"TS19\",\n    \"9:00\": \"TS20\",\n    \"10:00\": \"TS21\",\n    \"11:00\": \"TS22\",\n    \"13:00\": \"TS23\",\n    \"14:00\": \"TS24\",\n    \"15:00\": \"TS25\",\n    \"16:00\": \"TS26\",\n    \"17:00\": \"TS27\"\n  },\n  \"Thursday\": {\n    \"8:00\": \"TS28\",\n    \"9:00\": \"TS29\",\n    \"10:00\": \"TS30\",\n    \"11:00\": \"TS31\",\n    \"13:00\": \"TS32\",\n    \"14:00\": \"TS33\",\n    \"15:00\": \"TS34\",\n    \"16:00\": \"TS35\",\n    \"17:00\": \"TS36\"\n  },\n  \"Friday\": {\n    \"8:00\": \"TS37\",\n    \"9:00\": \"TS38\",\n    \"10:00\": \"TS39\",\n    \"11:00\": \"TS40\",\n    \"13:00\": \"TS41\",\n    \"14:00\": \"TS42\",\n    \"15:00\": \"TS43\",\n    \"16:00\": \"TS44\",\n    \"17:00\": \"TS45\"\n  }\n};\nexport const convertToCSV = events => {\n  // Convert events to CSV format\n  const header = \"Module,Class,Class_Type,Time_Slot,Room,timeslot_day,timeslot_start,timeslot_end\\n\";\n  const rows = events.map(event => {\n    const {\n      dayOfWeek,\n      time: startTime\n    } = convertToDayDateTime(event.start, 2);\n    const endTime = convertToDayDateTime(event.end, 1); // Lookup the time_slot_id based on the day and start time\n\n    const timeSlotId = timeSlotLookup[dayOfWeek] && timeSlotLookup[dayOfWeek][startTime] ? timeSlotLookup[dayOfWeek][startTime] : \"\";\n    return [event.text, // Module\n    event.class, // Class\n    event.classType, // Class Type\n    timeSlotId, // Time Slot (if you have this in your event)\n    event.classroom.replace(/[\\u200B-\\u200D\\uFEFF]/g, '').trim(), // Remove zero-width spaces and trim\n    dayOfWeek, // timeslot_day (date part only, adjust as needed)\n    startTime, // timeslot_start (time part)\n    endTime // timeslot_end (time part)\n    ].join(\",\");\n  });\n  return header + rows.join(\"\\n\");\n}; // Function to trigger CSV file download\n//   export const downloadCSV = (csvContent, filename) => {\n//     const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n//     const url = URL.createObjectURL(blob);\n//     const link = document.createElement('a');\n//     link.href = url;\n//     link.setAttribute('download', filename);\n//     document.body.appendChild(link);\n//     link.click();\n//     document.body.removeChild(link);\n//   };\n\nexport const downloadCSV = (csvContent, filename) => {\n  // Encode CSV content as a URI component\n  const csvDataUri = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csvContent); // Create an anchor element\n\n  const link = document.createElement('a');\n  link.href = csvDataUri;\n  link.setAttribute('download', filename); // Set the filename for download\n  // Append the anchor to the document, trigger the click, and remove the anchor\n\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}; // Testing \n// export const downloadCSV = (csvContent, filename) => {\n//     const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n//     // Check if the iframe sandbox allows downloads\n//     if (window.parent === window) {\n//         // If no iframe, proceed with normal download\n//         const url = URL.createObjectURL(blob);\n//         const link = document.createElement('a');\n//         link.href = url;\n//         link.setAttribute('download', filename);\n//         document.body.appendChild(link);\n//         link.click();\n//         document.body.removeChild(link);\n//     } else {\n//         // If inside an iframe, try to communicate with parent window\n//         try {\n//             const data = { csvContent, filename, type: 'csvDownload' };\n//             window.parent.postMessage(data, '*');\n//         } catch (error) {\n//             console.error('Unable to trigger download within SAS VA:', error);\n//         }\n//     }\n// };","map":{"version":3,"names":["baseDate","Date","getDateForSelectedDay","day","dayMap","offset","selectedDate","setDate","getDate","convertToDayDateTime","isoString","num","date","dayOfWeek","toLocaleDateString","weekday","time","toLocaleTimeString","hour","minute","hour12","processFormDates","startTime","endTime","selectedDay","startHour","startMinute","split","map","Number","endHour","endMinute","startDateTime","setHours","endDateTime","timeSlotLookup","convertToCSV","events","header","rows","event","start","end","timeSlotId","text","class","classType","classroom","replace","trim","join","downloadCSV","csvContent","filename","csvDataUri","encodeURIComponent","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild"],"sources":["C:/Users/amyeoz/Downloads/timetable_schedule/src/calendar/days.js"],"sourcesContent":["// Base reference date: 07/10/2024 is Monday\r\nexport const baseDate = new Date(2024, 9, 7); // October is month 9 (zero-indexed)\r\n\r\nexport const getDateForSelectedDay = (day) => {\r\n    const dayMap = { \"Monday\": 0, \"Tuesday\": 1, \"Wednesday\": 2, \"Thursday\": 3, \"Friday\": 4 };\r\n    const offset = dayMap[day];\r\n    const selectedDate = new Date(baseDate);\r\n    selectedDate.setDate(baseDate.getDate() + offset); // Add the offset to 07/10/2024 (Monday)\r\n    return selectedDate;\r\n  };\r\n\r\nexport const convertToDayDateTime = (isoString, num) => {\r\n    const date = new Date(isoString);\r\n    const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });\r\n    const time = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false }); // Example: 10:30\r\n    if (num === 1){\r\n        return time;\r\n    } else {\r\n        return { dayOfWeek, time };\r\n    };\r\n}\r\n\r\nexport const processFormDates = (day, startTime, endTime) => {\r\n    // Get the selected day and map it to a real date starting from 07/10/2024\r\n    const selectedDay = day;\r\n    const selectedDate = getDateForSelectedDay(selectedDay);\r\n  \r\n    // Parse the selected start and end times\r\n    const [startHour, startMinute] = startTime.split(':').map(Number);\r\n    const [endHour, endMinute] = endTime.split(':').map(Number);\r\n  \r\n    // Create the full start and end dates with the selected times\r\n    const startDateTime = new Date(selectedDate);\r\n    startDateTime.setHours(startHour + 8, startMinute, 0, 0);\r\n  \r\n    const endDateTime = new Date(selectedDate);\r\n    endDateTime.setHours(endHour + 8, endMinute, 0, 0);\r\n\r\n    return {startDateTime, endDateTime};\r\n};\r\n\r\n// time slot id look up\r\nconst timeSlotLookup = {\r\n    \"Monday\": {\r\n      \"08:00\": \"TS1\",\r\n      \"09:00\": \"TS2\",\r\n      \"10:00\": \"TS3\",\r\n      \"11:00\": \"TS4\",\r\n      \"13:00\": \"TS5\",\r\n      \"14:00\": \"TS6\",\r\n      \"15:00\": \"TS7\",\r\n      \"16:00\": \"TS8\",\r\n      \"17:00\": \"TS9\"\r\n    },\r\n    \"Tuesday\": {\r\n      \"08:00\": \"TS10\",\r\n      \"09:00\": \"TS11\",\r\n      \"10:00\": \"TS12\",\r\n      \"11:00\": \"TS13\",\r\n      \"13:00\": \"TS14\",\r\n      \"14:00\": \"TS15\",\r\n      \"15:00\": \"TS16\",\r\n      \"16:00\": \"TS17\",\r\n      \"17:00\": \"TS18\"\r\n    },\r\n    \"Wednesday\": {\r\n      \"8:00\": \"TS19\",\r\n      \"9:00\": \"TS20\",\r\n      \"10:00\": \"TS21\",\r\n      \"11:00\": \"TS22\",\r\n      \"13:00\": \"TS23\",\r\n      \"14:00\": \"TS24\",\r\n      \"15:00\": \"TS25\",\r\n      \"16:00\": \"TS26\",\r\n      \"17:00\": \"TS27\"\r\n    },\r\n    \"Thursday\": {\r\n      \"8:00\": \"TS28\",\r\n      \"9:00\": \"TS29\",\r\n      \"10:00\": \"TS30\",\r\n      \"11:00\": \"TS31\",\r\n      \"13:00\": \"TS32\",\r\n      \"14:00\": \"TS33\",\r\n      \"15:00\": \"TS34\",\r\n      \"16:00\": \"TS35\",\r\n      \"17:00\": \"TS36\"\r\n    },\r\n    \"Friday\": {\r\n      \"8:00\": \"TS37\",\r\n      \"9:00\": \"TS38\",\r\n      \"10:00\": \"TS39\",\r\n      \"11:00\": \"TS40\",\r\n      \"13:00\": \"TS41\",\r\n      \"14:00\": \"TS42\",\r\n      \"15:00\": \"TS43\",\r\n      \"16:00\": \"TS44\",\r\n      \"17:00\": \"TS45\"\r\n    }\r\n  };\r\n  \r\n\r\nexport const convertToCSV = (events) => {\r\n    // Convert events to CSV format\r\n    const header = \"Module,Class,Class_Type,Time_Slot,Room,timeslot_day,timeslot_start,timeslot_end\\n\";\r\n    \r\n    const rows = events.map(event => {\r\n        const {dayOfWeek, time: startTime} = convertToDayDateTime(event.start, 2);\r\n        const endTime = convertToDayDateTime(event.end, 1);\r\n\r\n        // Lookup the time_slot_id based on the day and start time\r\n        const timeSlotId = timeSlotLookup[dayOfWeek] && timeSlotLookup[dayOfWeek][startTime] ? timeSlotLookup[dayOfWeek][startTime] : \"\";\r\n\r\n\r\n        return [\r\n            event.text, // Module\r\n            event.class, // Class\r\n            event.classType, // Class Type\r\n            timeSlotId, // Time Slot (if you have this in your event)\r\n            event.classroom.replace(/[\\u200B-\\u200D\\uFEFF]/g, '').trim(), // Remove zero-width spaces and trim\r\n            dayOfWeek, // timeslot_day (date part only, adjust as needed)\r\n            startTime, // timeslot_start (time part)\r\n            endTime, // timeslot_end (time part)\r\n        ].join(\",\");\r\n    });\r\n  \r\n    return header + rows.join(\"\\n\");\r\n  };\r\n\r\n  \r\n  // Function to trigger CSV file download\r\n//   export const downloadCSV = (csvContent, filename) => {\r\n//     const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n//     const url = URL.createObjectURL(blob);\r\n//     const link = document.createElement('a');\r\n//     link.href = url;\r\n//     link.setAttribute('download', filename);\r\n//     document.body.appendChild(link);\r\n//     link.click();\r\n//     document.body.removeChild(link);\r\n//   };\r\n\r\nexport const downloadCSV = (csvContent, filename) => {\r\n    // Encode CSV content as a URI component\r\n    const csvDataUri = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csvContent);\r\n    \r\n    // Create an anchor element\r\n    const link = document.createElement('a');\r\n    link.href = csvDataUri;\r\n    link.setAttribute('download', filename); // Set the filename for download\r\n    \r\n    // Append the anchor to the document, trigger the click, and remove the anchor\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n};\r\n\r\n  // Testing \r\n// export const downloadCSV = (csvContent, filename) => {\r\n//     const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    \r\n//     // Check if the iframe sandbox allows downloads\r\n//     if (window.parent === window) {\r\n//         // If no iframe, proceed with normal download\r\n//         const url = URL.createObjectURL(blob);\r\n//         const link = document.createElement('a');\r\n//         link.href = url;\r\n//         link.setAttribute('download', filename);\r\n//         document.body.appendChild(link);\r\n//         link.click();\r\n//         document.body.removeChild(link);\r\n//     } else {\r\n//         // If inside an iframe, try to communicate with parent window\r\n//         try {\r\n//             const data = { csvContent, filename, type: 'csvDownload' };\r\n//             window.parent.postMessage(data, '*');\r\n//         } catch (error) {\r\n//             console.error('Unable to trigger download within SAS VA:', error);\r\n//         }\r\n//     }\r\n// };\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}