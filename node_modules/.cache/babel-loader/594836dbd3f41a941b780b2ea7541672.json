{"ast":null,"code":"import { startTime, convertToDayDateTime } from './days.js'; // time slot id look up\n\nconst timeSlotLookup = {\n  \"Monday\": {\n    \"08:00\": \"TS1\",\n    \"09:00\": \"TS2\",\n    \"10:00\": \"TS3\",\n    \"11:00\": \"TS4\",\n    \"12:00\": \"BREAK\",\n    \"13:00\": \"TS5\",\n    \"14:00\": \"TS6\",\n    \"15:00\": \"TS7\",\n    \"16:00\": \"TS8\",\n    \"17:00\": \"TS9\"\n  },\n  \"Tuesday\": {\n    \"08:00\": \"TS10\",\n    \"09:00\": \"TS11\",\n    \"10:00\": \"TS12\",\n    \"11:00\": \"TS13\",\n    \"12:00\": \"BREAK\",\n    \"13:00\": \"TS14\",\n    \"14:00\": \"TS15\",\n    \"15:00\": \"TS16\",\n    \"16:00\": \"TS17\",\n    \"17:00\": \"TS18\"\n  },\n  \"Wednesday\": {\n    \"08:00\": \"TS19\",\n    \"09:00\": \"TS20\",\n    \"10:00\": \"TS21\",\n    \"11:00\": \"TS22\",\n    \"12:00\": \"BREAK\",\n    \"13:00\": \"TS23\",\n    \"14:00\": \"TS24\",\n    \"15:00\": \"TS25\",\n    \"16:00\": \"TS26\",\n    \"17:00\": \"TS27\"\n  },\n  \"Thursday\": {\n    \"08:00\": \"TS28\",\n    \"09:00\": \"TS29\",\n    \"10:00\": \"TS30\",\n    \"11:00\": \"TS31\",\n    \"12:00\": \"BREAK\",\n    \"13:00\": \"TS32\",\n    \"14:00\": \"TS33\",\n    \"15:00\": \"TS34\",\n    \"16:00\": \"TS35\",\n    \"17:00\": \"TS36\"\n  },\n  \"Friday\": {\n    \"08:00\": \"TS37\",\n    \"09:00\": \"TS38\",\n    \"10:00\": \"TS39\",\n    \"11:00\": \"TS40\",\n    \"12:00\": \"BREAK\",\n    \"13:00\": \"TS41\",\n    \"14:00\": \"TS42\",\n    \"15:00\": \"TS43\",\n    \"16:00\": \"TS44\",\n    \"17:00\": \"TS45\"\n  }\n};\nexport const convertToCSV = (events, lecturer) => {\n  console.log(events);\n\n  const getDayValue = day => {\n    const dayValues = {\n      Monday: 1,\n      Tuesday: 2,\n      Wednesday: 3,\n      Thursday: 4,\n      Friday: 5\n    };\n    return dayValues[day] || 6; // Default to 6 for any invalid day\n  }; // Convert events to CSV format\n  // 'Working_Day', 'start_time', 'end_time', 'Module', 'Lecturer', 'Class_Type', 'Class', 'Room'\n\n\n  const header = \"Working_Day,Start_time,end_time,Module,Lecturer,Class_Type,Class,Room\\n\"; // Added Lecturer to the header\n\n  const rows = events.flatMap(event => {\n    const {\n      dayOfWeek,\n      time: startTime\n    } = convertToDayDateTime(event.start, 2);\n    const startDateTime = new Date(event.start);\n    const endDateTime = new Date(event.end);\n    const eventRows = []; // Loop through each hour from start to end\n\n    for (let dt = startDateTime; dt < endDateTime; dt.setHours(dt.getHours() + 1)) {\n      const currentStartTime = dt.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      });\n      const currentEndTime = new Date(dt);\n      currentEndTime.setHours(currentEndTime.getHours() + 1);\n      const formattedEndTime = currentEndTime.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      }); // Lookup the time_slot_id based on the day and current start time\n\n      const timeSlotId = timeSlotLookup[dayOfWeek] && timeSlotLookup[dayOfWeek][currentStartTime] ? timeSlotLookup[dayOfWeek][currentStartTime] : \"\";\n      eventRows.push([dayOfWeek, // timeslot_day\n      currentStartTime, // timeslot_start\n      formattedEndTime, // timeslot_end\n      event.module, // Module\n      lecturer, // Include lecturer name in each row\n      event.classType || 'N/A', // Class Type\n      event.class || 'N/A', // Class\n      timeSlotId, // Time Slot\n      event.classroom.replace(/[\\u200B-\\u200D\\uFEFF]/g, '').trim() // Remove zero-width spaces and trim\n      ].join(\",\"));\n    }\n\n    return eventRows; // Return all rows generated for this event\n  }); // Sort the rows based on the day of the week and then by start time\n\n  rows.sort((a, b) => {\n    const dayComparison = getDayValue(a.split(\",\")[5]) - getDayValue(b.split(\",\")[5]); // Compare by day of the week\n\n    if (dayComparison !== 0) {\n      return dayComparison; // If days are different, sort by day\n    } // If days are the same, compare by start time\n\n\n    return a.split(\",\")[6].localeCompare(b.split(\",\")[6]); // Use localeCompare for time comparison\n  });\n  return header + rows.join(\"\\n\"); // Return the complete CSV content\n}; // Function to trigger CSV file download\n\nexport const downloadCSV = (csvContent, filename) => {\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.setAttribute('download', filename);\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}; // export const downloadCSV = (csvContent, filename) => {\n//     // Encode CSV content as a URI component\n//     const csvDataUri = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csvContent);\n//     // Create an anchor element\n//     const link = document.createElement('a');\n//     link.href = csvDataUri;\n//     link.setAttribute('download', filename); // Set the filename for download\n//     // Append the anchor to the document, trigger the click, and remove the anchor\n//     document.body.appendChild(link);\n//     link.click();\n//     document.body.removeChild(link);\n// };\n// Testing \n// export const downloadCSV = (csvContent, filename) => {\n//     const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n//     // Check if the iframe sandbox allows downloads\n//     if (window.parent === window) {\n//         // If no iframe, proceed with normal download\n//         const url = URL.createObjectURL(blob);\n//         const link = document.createElement('a');\n//         link.href = url;\n//         link.setAttribute('download', filename);\n//         document.body.appendChild(link);\n//         link.click();\n//         document.body.removeChild(link);\n//     } else {\n//         // If inside an iframe, try to communicate with parent window\n//         try {\n//             const data = { csvContent, filename, type: 'csvDownload' };\n//             window.parent.postMessage(data, '*');\n//         } catch (error) {\n//             console.error('Unable to trigger download within SAS VA:', error);\n//         }\n//     }\n// };","map":{"version":3,"names":["startTime","convertToDayDateTime","timeSlotLookup","convertToCSV","events","lecturer","console","log","getDayValue","day","dayValues","Monday","Tuesday","Wednesday","Thursday","Friday","header","rows","flatMap","event","dayOfWeek","time","start","startDateTime","Date","endDateTime","end","eventRows","dt","setHours","getHours","currentStartTime","toLocaleTimeString","hour","minute","hour12","currentEndTime","formattedEndTime","timeSlotId","push","module","classType","class","classroom","replace","trim","join","sort","a","b","dayComparison","split","localeCompare","downloadCSV","csvContent","filename","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild"],"sources":["C:/Users/amyeoz/Downloads/timetable_schedule/src/calendar/handledata.js"],"sourcesContent":["import { startTime, convertToDayDateTime } from './days.js';\r\n\r\n// time slot id look up\r\nconst timeSlotLookup = {\r\n    \"Monday\": {\r\n      \"08:00\": \"TS1\",\r\n      \"09:00\": \"TS2\",\r\n      \"10:00\": \"TS3\",\r\n      \"11:00\": \"TS4\",\r\n      \"12:00\": \"BREAK\",\r\n      \"13:00\": \"TS5\",\r\n      \"14:00\": \"TS6\",\r\n      \"15:00\": \"TS7\",\r\n      \"16:00\": \"TS8\",\r\n      \"17:00\": \"TS9\"\r\n    },\r\n    \"Tuesday\": {\r\n      \"08:00\": \"TS10\",\r\n      \"09:00\": \"TS11\",\r\n      \"10:00\": \"TS12\",\r\n      \"11:00\": \"TS13\",\r\n      \"12:00\": \"BREAK\",\r\n      \"13:00\": \"TS14\",\r\n      \"14:00\": \"TS15\",\r\n      \"15:00\": \"TS16\",\r\n      \"16:00\": \"TS17\",\r\n      \"17:00\": \"TS18\"\r\n    },\r\n    \"Wednesday\": {\r\n      \"08:00\": \"TS19\",\r\n      \"09:00\": \"TS20\",\r\n      \"10:00\": \"TS21\",\r\n      \"11:00\": \"TS22\",\r\n      \"12:00\": \"BREAK\",\r\n      \"13:00\": \"TS23\",\r\n      \"14:00\": \"TS24\",\r\n      \"15:00\": \"TS25\",\r\n      \"16:00\": \"TS26\",\r\n      \"17:00\": \"TS27\"\r\n    },\r\n    \"Thursday\": {\r\n      \"08:00\": \"TS28\",\r\n      \"09:00\": \"TS29\",\r\n      \"10:00\": \"TS30\",\r\n      \"11:00\": \"TS31\",\r\n      \"12:00\": \"BREAK\",\r\n      \"13:00\": \"TS32\",\r\n      \"14:00\": \"TS33\",\r\n      \"15:00\": \"TS34\",\r\n      \"16:00\": \"TS35\",\r\n      \"17:00\": \"TS36\"\r\n    },\r\n    \"Friday\": {\r\n      \"08:00\": \"TS37\",\r\n      \"09:00\": \"TS38\",\r\n      \"10:00\": \"TS39\",\r\n      \"11:00\": \"TS40\",\r\n      \"12:00\": \"BREAK\",\r\n      \"13:00\": \"TS41\",\r\n      \"14:00\": \"TS42\",\r\n      \"15:00\": \"TS43\",\r\n      \"16:00\": \"TS44\",\r\n      \"17:00\": \"TS45\"\r\n    }\r\n  };\r\n  \r\n\r\n  export const convertToCSV = (events, lecturer) => {\r\n    console.log(events);\r\n    const getDayValue = (day) => {\r\n        const dayValues = {\r\n            Monday: 1,\r\n            Tuesday: 2,\r\n            Wednesday: 3,\r\n            Thursday: 4,\r\n            Friday: 5,\r\n        };\r\n        return dayValues[day] || 6; // Default to 6 for any invalid day\r\n    };\r\n\r\n    // Convert events to CSV format\r\n    // 'Working_Day', 'start_time', 'end_time', 'Module', 'Lecturer', 'Class_Type', 'Class', 'Room'\r\n    const header = \"Working_Day,Start_time,end_time,Module,Lecturer,Class_Type,Class,Room\\n\"; // Added Lecturer to the header\r\n    \r\n    const rows = events.flatMap(event => {\r\n        const { dayOfWeek, time: startTime } = convertToDayDateTime(event.start, 2);\r\n        const startDateTime = new Date(event.start);\r\n        const endDateTime = new Date(event.end);\r\n\r\n        const eventRows = [];\r\n        \r\n        // Loop through each hour from start to end\r\n        for (let dt = startDateTime; dt < endDateTime; dt.setHours(dt.getHours() + 1)) {\r\n            const currentStartTime = dt.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });\r\n            const currentEndTime = new Date(dt);\r\n            currentEndTime.setHours(currentEndTime.getHours() + 1);\r\n            const formattedEndTime = currentEndTime.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });\r\n\r\n            // Lookup the time_slot_id based on the day and current start time\r\n            const timeSlotId = timeSlotLookup[dayOfWeek] && timeSlotLookup[dayOfWeek][currentStartTime] ? timeSlotLookup[dayOfWeek][currentStartTime] : \"\";\r\n\r\n            eventRows.push([\r\n                dayOfWeek, // timeslot_day\r\n                currentStartTime, // timeslot_start\r\n                formattedEndTime, // timeslot_end\r\n                event.module, // Module\r\n                lecturer, // Include lecturer name in each row\r\n                event.classType || 'N/A', // Class Type\r\n                event.class || 'N/A', // Class\r\n                timeSlotId, // Time Slot\r\n                event.classroom.replace(/[\\u200B-\\u200D\\uFEFF]/g, '').trim(), // Remove zero-width spaces and trim\r\n            ].join(\",\"));\r\n        }\r\n\r\n        return eventRows; // Return all rows generated for this event\r\n    });\r\n\r\n    // Sort the rows based on the day of the week and then by start time\r\n    rows.sort((a, b) => {\r\n        const dayComparison = getDayValue(a.split(\",\")[5]) - getDayValue(b.split(\",\")[5]); // Compare by day of the week\r\n        if (dayComparison !== 0) {\r\n            return dayComparison; // If days are different, sort by day\r\n        }\r\n        // If days are the same, compare by start time\r\n        return a.split(\",\")[6].localeCompare(b.split(\",\")[6]); // Use localeCompare for time comparison\r\n    });\r\n\r\n    return header + rows.join(\"\\n\"); // Return the complete CSV content\r\n};\r\n\r\n\r\n  \r\n  // Function to trigger CSV file download\r\n  export const downloadCSV = (csvContent, filename) => {\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', filename);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n// export const downloadCSV = (csvContent, filename) => {\r\n//     // Encode CSV content as a URI component\r\n//     const csvDataUri = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csvContent);\r\n    \r\n//     // Create an anchor element\r\n//     const link = document.createElement('a');\r\n//     link.href = csvDataUri;\r\n//     link.setAttribute('download', filename); // Set the filename for download\r\n    \r\n//     // Append the anchor to the document, trigger the click, and remove the anchor\r\n//     document.body.appendChild(link);\r\n//     link.click();\r\n//     document.body.removeChild(link);\r\n// };\r\n\r\n  // Testing \r\n// export const downloadCSV = (csvContent, filename) => {\r\n//     const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    \r\n//     // Check if the iframe sandbox allows downloads\r\n//     if (window.parent === window) {\r\n//         // If no iframe, proceed with normal download\r\n//         const url = URL.createObjectURL(blob);\r\n//         const link = document.createElement('a');\r\n//         link.href = url;\r\n//         link.setAttribute('download', filename);\r\n//         document.body.appendChild(link);\r\n//         link.click();\r\n//         document.body.removeChild(link);\r\n//     } else {\r\n//         // If inside an iframe, try to communicate with parent window\r\n//         try {\r\n//             const data = { csvContent, filename, type: 'csvDownload' };\r\n//             window.parent.postMessage(data, '*');\r\n//         } catch (error) {\r\n//             console.error('Unable to trigger download within SAS VA:', error);\r\n//         }\r\n//     }\r\n// };\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}