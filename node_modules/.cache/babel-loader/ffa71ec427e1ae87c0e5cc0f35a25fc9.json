{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amyeoz\\\\Downloads\\\\timetable_schedule\\\\src\\\\calendar\\\\Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { DayPilotCalendar, DayPilot } from \"@daypilot/daypilot-lite-react\"; // Import DayPilot\n\nimport \"./Calendar.css\";\nimport { convertToDayDateTime, toDateTime } from './days.js';\nimport { convertToCSV, downloadCSV } from './handledata.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  wrap: {\n    display: \"flex\"\n  },\n  main: {\n    flexGrow: \"1\"\n  }\n};\n\nconst Calendar = () => {\n  _s();\n\n  const [calendar, setCalendar] = useState(null);\n  const [events, setEvents] = useState([]);\n  const [lecturer, setLecturer] = useState(\"\"); // State to hold the lecturer name\n\n  const startDate = \"2024-10-07\"; // Fixed start date for the week (Monday)\n\n  const config = {\n    viewType: \"days\",\n    durationBarVisible: false,\n    days: 5,\n    // Show only Monday to Friday\n    timeRangeSelectedHandling: \"Enabled\",\n    businessBeginsHour: 8,\n    businessEndsHour: 18,\n    cellDuration: 60,\n    events: events,\n    onTimeRangeSelected: async args => {\n      const {\n        dayOfWeek,\n        time: startTime\n      } = convertToDayDateTime(args.start);\n      const {\n        time: endTime\n      } = convertToDayDateTime(args.end); // Check if the selected time range falls within 12:00 - 13:00\n\n      if (startTime < 13 && endTime > 12) {\n        alert(\"This time range is not available for selection.\");\n        calendar.clearSelection();\n        return; // Prevent selection\n      } // Prompt user to enter event details\n\n\n      const form = await DayPilot.Modal.form([{\n        name: \"Module Name\",\n        id: \"ModuleName\",\n        type: \"text\"\n      }, {\n        name: \"Class\",\n        id: \"Class\",\n        type: \"text\"\n      }, {\n        name: \"Class Type\",\n        id: \"ClassType\",\n        type: \"text\"\n      }, {\n        name: \"Classroom\",\n        id: \"Classroom\",\n        type: \"text\"\n      }, {\n        name: \"Day of the Week\",\n        id: \"Day\",\n        type: \"select\",\n        options: [{\n          name: \"Monday\",\n          id: \"Monday\"\n        }, {\n          name: \"Tuesday\",\n          id: \"Tuesday\"\n        }, {\n          name: \"Wednesday\",\n          id: \"Wednesday\"\n        }, {\n          name: \"Thursday\",\n          id: \"Thursday\"\n        }, {\n          name: \"Friday\",\n          id: \"Friday\"\n        }]\n      }, {\n        name: \"Start Time\",\n        id: \"StartTime\",\n        type: \"time\"\n      }, // Default start time\n      {\n        name: \"End Time\",\n        id: \"EndTime\",\n        type: \"time\"\n      } // Default end time\n      ], {\n        ModuleName: \"\",\n        // You can set this if needed\n        Class: \"\",\n        ClassType: \"\",\n        Classroom: \"\",\n        Day: dayOfWeek,\n        // Initialize with the extracted day of the week\n        StartTime: startTime,\n        // Set the initial value for Start Time\n        EndTime: endTime // Set the initial value for End Time\n\n      });\n\n      if (!form.result) {\n        return; // If form is cancelled, do nothing\n      }\n\n      const {\n        startDateTime,\n        endDateTime\n      } = toDateTime(form.result.Day, form.result.StartTime, form.result.EndTime); // Clear the selection on the calendar\n\n      calendar.clearSelection(); // Add the event to the calendar\n\n      calendar.events.add({\n        start: new DayPilot.Date(startDateTime),\n        // Set start date and time\n        end: new DayPilot.Date(endDateTime),\n        // Set end date and time\n        id: DayPilot.guid(),\n        // Generate a unique ID for the event\n        module: form.result.ModuleName,\n        // Module name entered by the user\n        classroom: form.result.Classroom,\n        // Classroom entered by the user\n        class: form.result.Class,\n        classType: form.result.ClassType\n      });\n    },\n    onEventClick: async args => {\n      await editEvent(args.e);\n    },\n    contextMenu: new DayPilot.Menu({\n      items: [{\n        text: \"Delete\",\n        onClick: async args => {\n          calendar.events.remove(args.source);\n        }\n      }, {\n        text: \"-\"\n      }, {\n        text: \"Edit...\",\n        onClick: async args => {\n          await editEvent(args.source);\n        }\n      }]\n    }),\n    onBeforeEventRender: args => {\n      args.data.areas = [{\n        top: 3,\n        right: 3,\n        width: 20,\n        height: 20,\n        symbol: \"icons/daypilot.svg#minichevron-down-2\",\n        fontColor: \"#fff\",\n        toolTip: \"Show context menu\",\n        action: \"ContextMenu\"\n      }, {\n        top: 3,\n        right: 25,\n        width: 20,\n        height: 20,\n        symbol: \"icons/daypilot.svg#x-circle\",\n        fontColor: \"#fff\",\n        action: \"None\",\n        toolTip: \"Delete event\",\n        onClick: async args => {\n          calendar.events.remove(args.source);\n        }\n      }]; // Display classroom information visually in the event text\n\n      args.data.html = `<div>\n        <strong>Module: ${args.data.module}</strong><br/>\n        <span style=\"font-size: 12px; color: #FFF;\">Class: ${args.data.class || 'N/A'} <br/> Class Type: ${args.data.classType || 'N/A'} <br/> Classroom: ${args.data.classroom || 'N/A'}</span>\n      </div>`;\n    },\n    onBeforeHeaderRender: args => {\n      // Override header to only show the day names (Monday, Tuesday, etc.)\n      const dayNames = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n      const dayIndex = args.header.start.getDayOfWeek() - 1; // Monday is index 0\n\n      args.header.html = dayNames[dayIndex];\n    }\n  };\n\n  const editEvent = async e => {\n    const {\n      dayOfWeek,\n      time: startTime\n    } = convertToDayDateTime(e.data.start);\n    const {\n      time: endTime\n    } = convertToDayDateTime(e.data.end); // Open modal form with dropdown for day selection and time inputs\n\n    const form = await DayPilot.Modal.form([{\n      name: \"Module Name\",\n      id: \"ModuleName\",\n      type: \"text\"\n    }, {\n      name: \"Class\",\n      id: \"Class\",\n      type: \"text\"\n    }, {\n      name: \"Class Type\",\n      id: \"ClassType\",\n      type: \"text\"\n    }, {\n      name: \"Classroom\",\n      id: \"Classroom\",\n      type: \"text\"\n    }, {\n      name: \"Day of the Week\",\n      id: \"Day\",\n      type: \"select\",\n      options: [{\n        name: \"Monday\",\n        id: \"Monday\"\n      }, {\n        name: \"Tuesday\",\n        id: \"Tuesday\"\n      }, {\n        name: \"Wednesday\",\n        id: \"Wednesday\"\n      }, {\n        name: \"Thursday\",\n        id: \"Thursday\"\n      }, {\n        name: \"Friday\",\n        id: \"Friday\"\n      }]\n    }, {\n      name: \"Start Time\",\n      id: \"StartTime\",\n      type: \"time\"\n    }, {\n      name: \"End Time\",\n      id: \"EndTime\",\n      type: \"time\"\n    }], {\n      ModuleName: e.data.module,\n      Class: e.data.class,\n      ClassType: e.data.classType,\n      Classroom: e.data.classroom,\n      Day: dayOfWeek,\n      // Initialize with the extracted day of the week\n      StartTime: startTime,\n      // Set the initial value for Start Time\n      EndTime: endTime // Set the initial value for End Time    }\n\n    }); // If the form was canceled, stop the process\n\n    if (!form.result) {\n      return;\n    }\n\n    const {\n      startDateTime,\n      endDateTime\n    } = toDateTime(form.result.Day, form.result.StartTime, form.result.EndTime); // Update event data\n\n    e.data.module = form.result.ModuleName;\n    e.data.classroom = form.result.Classroom;\n    e.data.start = startDateTime;\n    e.data.end = endDateTime;\n    e.data.class = form.result.Class;\n    e.data.classType = form.result.ClassType; // Update the event in the calendar\n\n    calendar.events.update(e);\n  }; // Helper function to read the CSV file and parse it into event objects\n\n\n  const getDayValue = day => {\n    const dayValues = {\n      Monday: 1,\n      Tuesday: 2,\n      Wednesday: 3,\n      Thursday: 4,\n      Friday: 5\n    };\n    return dayValues[day] || 6; // Default to 6 for any invalid day (e.g., Saturday, Sunday)\n  };\n\n  const parseCSVFile = file => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      const csvContent = e.target.result; // Split rows, remove any empty lines\n\n      const rows = csvContent.split(\"\\n\").filter(row => row.trim() !== \"\"); // Get the first row (headers)\n\n      const headers = rows[0].replace(/\\r$/, \"\").split(\",\").map(col => col.trim().replace(/^\"|\"$/g, \"\")); // Parse the remaining rows into objects using the headers\n\n      const parsedRows = rows.slice(1).map((row, index) => {\n        const columns = row.replace(/\\r$/, \"\").split(\",\").map(col => col.trim().replace(/^\"|\"$/g, \"\")); // Remove leading and trailing quotes\n\n        if (columns.length !== headers.length) {\n          console.error(`Row ${index + 2} has a different number of columns`, columns);\n          return null;\n        } // Create an object where the keys are the headers and values are the corresponding columns\n\n\n        const rowObject = headers.reduce((obj, header, i) => {\n          obj[header] = columns[i];\n          return obj;\n        }, {});\n        return rowObject;\n      }).filter(row => row !== null); // console.log(\"Parsed Rows:\", parsedRows); // Debugging parsed rows\n      // Process the rows for sorting or merging\n\n      const rowsForSorting = parsedRows.map(event => {\n        // Ensure the correct property names match those in the parsedRows\n        const {\n          Working_Day: timeslotDay,\n          start_time: timeslotStart,\n          end_time: timeslotEnd,\n          Module: module,\n          Lecturer: lecturer,\n          Class_Type: classType,\n          Class: classInfo,\n          Room: room\n        } = event;\n        setLecturer(lecturer);\n        return {\n          timeslotDay,\n          // Day of the week\n          timeslotStart,\n          // Start time\n          timeslotEnd,\n          // End time\n          module,\n          // Module name\n          lecturer,\n          // lecturer name\n          classInfo: classInfo || 'N/A',\n          // Class, default to 'N/A' if missing\n          classType: classType || 'N/A',\n          // Class type, default to 'N/A' if missing\n          room: room || 'N/A' // Classroom, default to 'N/A' if missing\n\n        };\n      }); // Sort the rows by day of the week and then by start time\n\n      rowsForSorting.sort((a, b) => {\n        const dayComparison = getDayValue(a.timeslotDay) - getDayValue(b.timeslotDay); // Compare by day of the week\n\n        if (dayComparison !== 0) {\n          return dayComparison; // If days are different, sort by day\n        } // If days are the same, compare by start time\n\n\n        return a.timeslotStart.localeCompare(b.timeslotStart); // Use localeCompare for time comparison\n      }); // Helper function to check if two rows should be merged\n\n      const shouldMerge = (row1, row2) => {\n        return row1.module === row2.module && row1.classInfo === row2.classInfo && row1.classType === row2.classType && row1.room === row2.room && row1.timeslotDay === row2.timeslotDay && row1.timeslotEnd === row2.timeslotStart;\n      }; // Merge consecutive rows into single events\n\n\n      const mergedEvents = [];\n      let currentEvent = null;\n      rowsForSorting.forEach((row, index) => {\n        if (!currentEvent) {\n          currentEvent = { ...row\n          };\n        } else {\n          if (shouldMerge(currentEvent, row)) {\n            currentEvent.timeslotEnd = row.timeslotEnd;\n          } else {\n            mergedEvents.push(currentEvent);\n            currentEvent = { ...row\n            };\n          }\n        }\n\n        if (index === rowsForSorting.length - 1) {\n          mergedEvents.push(currentEvent);\n        }\n      });\n      const parsedEvents = mergedEvents.map(event => {\n        const {\n          startDateTime,\n          endDateTime\n        } = toDateTime(event.timeslotDay, event.timeslotStart, event.timeslotEnd);\n        return {\n          id: DayPilot.guid(),\n          start: new DayPilot.Date(startDateTime),\n          end: new DayPilot.Date(endDateTime),\n          module: event.module,\n          classroom: event.room,\n          class: event.classInfo,\n          classType: event.classType\n        };\n      });\n      setEvents(parsedEvents);\n      calendar.update(); // Force the calendar to update\n    };\n\n    reader.readAsText(file); // Read the CSV file as text\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container\",\n    children: [lecturer && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Timetable for \", lecturer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 20\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.buttonWrap,\n        className: \"csv-btn\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".csv\",\n          onChange: e => {\n            const file = e.target.files[0];\n\n            if (file) {\n              parseCSVFile(file);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"csv-export-btn\",\n          onClick: () => {\n            const csvContent = convertToCSV(events, lecturer); // Convert events to CSV format\n\n            downloadCSV(csvContent, 'schedule.csv'); // Trigger the download\n          },\n          children: \"Export to CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.main,\n      children: /*#__PURE__*/_jsxDEV(DayPilotCalendar, { ...config,\n        startDate: startDate,\n        controlRef: setCalendar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 348,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calendar, \"tgyp6J3Eck5KOOxwuljyZ94eS2E=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useEffect","useState","DayPilotCalendar","DayPilot","convertToDayDateTime","toDateTime","convertToCSV","downloadCSV","styles","wrap","display","main","flexGrow","Calendar","calendar","setCalendar","events","setEvents","lecturer","setLecturer","startDate","config","viewType","durationBarVisible","days","timeRangeSelectedHandling","businessBeginsHour","businessEndsHour","cellDuration","onTimeRangeSelected","args","dayOfWeek","time","startTime","start","endTime","end","alert","clearSelection","form","Modal","name","id","type","options","ModuleName","Class","ClassType","Classroom","Day","StartTime","EndTime","result","startDateTime","endDateTime","add","Date","guid","module","classroom","class","classType","onEventClick","editEvent","e","contextMenu","Menu","items","text","onClick","remove","source","onBeforeEventRender","data","areas","top","right","width","height","symbol","fontColor","toolTip","action","html","onBeforeHeaderRender","dayNames","dayIndex","header","getDayOfWeek","update","getDayValue","day","dayValues","Monday","Tuesday","Wednesday","Thursday","Friday","parseCSVFile","file","reader","FileReader","onload","csvContent","target","rows","split","filter","row","trim","headers","replace","map","col","parsedRows","slice","index","columns","length","console","error","rowObject","reduce","obj","i","rowsForSorting","event","Working_Day","timeslotDay","start_time","timeslotStart","end_time","timeslotEnd","Module","Lecturer","Class_Type","classInfo","Room","room","sort","a","b","dayComparison","localeCompare","shouldMerge","row1","row2","mergedEvents","currentEvent","forEach","push","parsedEvents","readAsText","buttonWrap","files"],"sources":["C:/Users/amyeoz/Downloads/timetable_schedule/src/calendar/Calendar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { DayPilotCalendar, DayPilot } from \"@daypilot/daypilot-lite-react\"; // Import DayPilot\nimport \"./Calendar.css\";\nimport { convertToDayDateTime, toDateTime } from './days.js';\nimport { convertToCSV, downloadCSV } from './handledata.js';\n\nconst styles = {\n  wrap: {\n    display: \"flex\"\n  },\n  main: {\n    flexGrow: \"1\"\n  }\n};\n\nconst Calendar = () => {\n  const [calendar, setCalendar] = useState(null);\n  const [events, setEvents] = useState([]);\n  const [lecturer, setLecturer] = useState(\"\"); // State to hold the lecturer name\n\n\n  const startDate = \"2024-10-07\"; // Fixed start date for the week (Monday)\n\n  const config = {\n    viewType: \"days\",\n    durationBarVisible: false,\n    days: 5, // Show only Monday to Friday\n    timeRangeSelectedHandling: \"Enabled\",\n    businessBeginsHour: 8,\n    businessEndsHour: 18,\n    cellDuration: 60,\n    events: events,\n    onTimeRangeSelected: async args => {\n      const { dayOfWeek, time: startTime } = convertToDayDateTime(args.start);\n      const {time: endTime} = convertToDayDateTime(args.end);\n\n      // Check if the selected time range falls within 12:00 - 13:00\n      if (startTime < 13 && endTime > 12) {\n        alert(\"This time range is not available for selection.\");\n        calendar.clearSelection();\n        return; // Prevent selection\n      }\n\n      // Prompt user to enter event details\n      const form = await DayPilot.Modal.form([\n        { name: \"Module Name\", id: \"ModuleName\", type: \"text\" },\n        { name: \"Class\", id: \"Class\", type: \"text\" },\n        { name: \"Class Type\", id: \"ClassType\", type: \"text\" },\n        { name: \"Classroom\", id: \"Classroom\", type: \"text\" },\n        { \n          name: \"Day of the Week\", \n          id: \"Day\", \n          type: \"select\", \n          options: [\n            { name: \"Monday\", id: \"Monday\" },\n            { name: \"Tuesday\", id: \"Tuesday\" },\n            { name: \"Wednesday\", id: \"Wednesday\" },\n            { name: \"Thursday\", id: \"Thursday\" },\n            { name: \"Friday\", id: \"Friday\" }\n          ]\n        },\n        { name: \"Start Time\", id: \"StartTime\", type: \"time\" }, // Default start time\n        { name: \"End Time\", id: \"EndTime\", type: \"time\" } // Default end time\n      ], \n      { \n        ModuleName: \"\",  // You can set this if needed\n        Class: \"\",\n        ClassType: \"\",\n        Classroom: \"\",\n        Day: dayOfWeek,  // Initialize with the extracted day of the week\n        StartTime: startTime,  // Set the initial value for Start Time\n        EndTime: endTime        // Set the initial value for End Time\n      });\n    \n      if (!form.result) {\n        return; // If form is cancelled, do nothing\n      }\n\n      const {startDateTime, endDateTime} = toDateTime(form.result.Day, form.result.StartTime, form.result.EndTime)\n    \n      // Clear the selection on the calendar\n      calendar.clearSelection();\n    \n      // Add the event to the calendar\n      calendar.events.add({\n        start: new DayPilot.Date(startDateTime), // Set start date and time\n        end: new DayPilot.Date(endDateTime),     // Set end date and time\n        id: DayPilot.guid(),                 // Generate a unique ID for the event\n        module: form.result.ModuleName,         // Module name entered by the user\n        classroom: form.result.Classroom,     // Classroom entered by the user\n        class: form.result.Class,\n        classType: form.result.ClassType\n      });\n    },\n    \n    \n    onEventClick: async args => {\n      await editEvent(args.e);\n    },\n    contextMenu: new DayPilot.Menu({\n      items: [\n        {\n          text: \"Delete\",\n          onClick: async args => {\n            calendar.events.remove(args.source);\n          },\n        },\n        {\n          text: \"-\"\n        },\n        {\n          text: \"Edit...\",\n          onClick: async args => {\n            await editEvent(args.source);\n          }\n        }\n      ]\n    }),\n    onBeforeEventRender: args => {\n      args.data.areas = [\n        {\n          top: 3,\n          right: 3,\n          width: 20,\n          height: 20,\n          symbol: \"icons/daypilot.svg#minichevron-down-2\",\n          fontColor: \"#fff\",\n          toolTip: \"Show context menu\",\n          action: \"ContextMenu\",\n        },\n        {\n          top: 3,\n          right: 25,\n          width: 20,\n          height: 20,\n          symbol: \"icons/daypilot.svg#x-circle\",\n          fontColor: \"#fff\",\n          action: \"None\",\n          toolTip: \"Delete event\",\n          onClick: async args => {\n            calendar.events.remove(args.source);\n          }\n        }\n      ];\n\n      // Display classroom information visually in the event text\n      args.data.html = `<div>\n        <strong>Module: ${args.data.module}</strong><br/>\n        <span style=\"font-size: 12px; color: #FFF;\">Class: ${args.data.class || 'N/A'} <br/> Class Type: ${args.data.classType || 'N/A'} <br/> Classroom: ${args.data.classroom || 'N/A'}</span>\n      </div>`;\n    },\n    onBeforeHeaderRender: args => {\n      // Override header to only show the day names (Monday, Tuesday, etc.)\n      const dayNames = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n      const dayIndex = args.header.start.getDayOfWeek() - 1; // Monday is index 0\n      args.header.html = dayNames[dayIndex];\n    }\n  };\n\n  const editEvent = async (e) => {\n    const { dayOfWeek, time: startTime } = convertToDayDateTime(e.data.start);\n    const {time: endTime} = convertToDayDateTime(e.data.end);\n\n    // Open modal form with dropdown for day selection and time inputs\n    const form = await DayPilot.Modal.form([\n      { name: \"Module Name\", id: \"ModuleName\", type: \"text\" },\n      { name: \"Class\", id: \"Class\", type: \"text\" },\n      { name: \"Class Type\", id: \"ClassType\", type: \"text\" },\n      { name: \"Classroom\", id: \"Classroom\", type: \"text\" },\n\n      { \n        name: \"Day of the Week\", \n        id: \"Day\", \n        type: \"select\", \n        options: [\n          { name: \"Monday\", id: \"Monday\" },\n          { name: \"Tuesday\", id: \"Tuesday\" },\n          { name: \"Wednesday\", id: \"Wednesday\" },\n          { name: \"Thursday\", id: \"Thursday\" },\n          { name: \"Friday\", id: \"Friday\" }\n        ], \n      },\n      { \n        name: \"Start Time\", \n        id: \"StartTime\", \n        type: \"time\", \n      },\n      { \n        name: \"End Time\", \n        id: \"EndTime\", \n        type: \"time\", \n      },\n    ], {\n      ModuleName: e.data.module,\n      Class: e.data.class ,\n      ClassType: e.data.classType ,\n      Classroom: e.data.classroom ,\n      Day: dayOfWeek,  // Initialize with the extracted day of the week\n      StartTime: startTime,  // Set the initial value for Start Time\n      EndTime: endTime        // Set the initial value for End Time    }\n    });\n  \n    // If the form was canceled, stop the process\n    if (!form.result) {\n      return;\n    }\n\n    const {startDateTime, endDateTime} = toDateTime(form.result.Day, form.result.StartTime, form.result.EndTime)\n  \n    // Update event data\n    e.data.module = form.result.ModuleName;\n    e.data.classroom = form.result.Classroom;\n    e.data.start = startDateTime;\n    e.data.end = endDateTime;\n    e.data.class = form.result.Class;\n    e.data.classType = form.result.ClassType;\n  \n    // Update the event in the calendar\n    calendar.events.update(e);\n  };\n  // Helper function to read the CSV file and parse it into event objects\n  const getDayValue = (day) => {\n    const dayValues = {\n      Monday: 1,\n      Tuesday: 2,\n      Wednesday: 3,\n      Thursday: 4,\n      Friday: 5,\n    };\n    return dayValues[day] || 6; // Default to 6 for any invalid day (e.g., Saturday, Sunday)\n  };\n  \n  const parseCSVFile = (file) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const csvContent = e.target.result;\n  \n      // Split rows, remove any empty lines\n      const rows = csvContent.split(\"\\n\").filter(row => row.trim() !== \"\");\n      \n      // Get the first row (headers)\n      const headers = rows[0].replace(/\\r$/, \"\").split(\",\").map(col => col.trim().replace(/^\"|\"$/g, \"\"));\n  \n      // Parse the remaining rows into objects using the headers\n      const parsedRows = rows.slice(1).map((row, index) => {\n        const columns = row.replace(/\\r$/, \"\").split(\",\").map(col => col.trim().replace(/^\"|\"$/g, \"\")); // Remove leading and trailing quotes\n  \n        if (columns.length !== headers.length) {\n          console.error(`Row ${index + 2} has a different number of columns`, columns);\n          return null;\n        }\n  \n        // Create an object where the keys are the headers and values are the corresponding columns\n        const rowObject = headers.reduce((obj, header, i) => {\n          obj[header] = columns[i];\n          return obj;\n        }, {});\n  \n        return rowObject;\n      }).filter(row => row !== null);\n  \n      // console.log(\"Parsed Rows:\", parsedRows); // Debugging parsed rows\n  \n      // Process the rows for sorting or merging\n      const rowsForSorting = parsedRows.map(event => {\n        // Ensure the correct property names match those in the parsedRows\n        const { Working_Day: timeslotDay, start_time: timeslotStart, end_time: timeslotEnd, Module: module, Lecturer: lecturer, Class_Type: classType, Class: classInfo, Room: room } = event;\n        setLecturer(lecturer);\n\n        return {\n          timeslotDay,          // Day of the week\n          timeslotStart,        // Start time\n          timeslotEnd,          // End time\n          module,               // Module name\n          lecturer,             // lecturer name\n          classInfo: classInfo || 'N/A',   // Class, default to 'N/A' if missing\n          classType: classType || 'N/A',   // Class type, default to 'N/A' if missing\n          room: room || 'N/A'              // Classroom, default to 'N/A' if missing\n        };\n      });\n  \n      // Sort the rows by day of the week and then by start time\n      rowsForSorting.sort((a, b) => {\n        const dayComparison = getDayValue(a.timeslotDay) - getDayValue(b.timeslotDay); // Compare by day of the week\n        if (dayComparison !== 0) {\n          return dayComparison; // If days are different, sort by day\n        }\n        // If days are the same, compare by start time\n        return a.timeslotStart.localeCompare(b.timeslotStart); // Use localeCompare for time comparison\n      });\n  \n      // Helper function to check if two rows should be merged\n      const shouldMerge = (row1, row2) => {\n        return (\n          row1.module === row2.module &&\n          row1.classInfo === row2.classInfo &&\n          row1.classType === row2.classType &&\n          row1.room === row2.room &&\n          row1.timeslotDay === row2.timeslotDay &&\n          row1.timeslotEnd === row2.timeslotStart\n        );\n      };\n  \n      // Merge consecutive rows into single events\n      const mergedEvents = [];\n      let currentEvent = null;\n  \n      rowsForSorting.forEach((row, index) => {\n        if (!currentEvent) {\n          currentEvent = { ...row };\n        } else {\n          if (shouldMerge(currentEvent, row)) {\n            currentEvent.timeslotEnd = row.timeslotEnd;\n          } else {\n            mergedEvents.push(currentEvent);\n            currentEvent = { ...row };\n          }\n        }\n        if (index === rowsForSorting.length - 1) {\n          mergedEvents.push(currentEvent);\n        }\n      });\n    \n      const parsedEvents = mergedEvents.map(event => {\n        const { startDateTime, endDateTime } = toDateTime(event.timeslotDay, event.timeslotStart, event.timeslotEnd);\n        return {\n          id: DayPilot.guid(),\n          start: new DayPilot.Date(startDateTime),\n          end: new DayPilot.Date(endDateTime),\n          module: event.module,\n          classroom: event.room,\n          class: event.classInfo,\n          classType: event.classType\n        };\n      });\n  \n      setEvents(parsedEvents);\n  \n      calendar.update(); // Force the calendar to update\n    };\n  \n    reader.readAsText(file); // Read the CSV file as text\n  };\n  \n  \n\n  return ( \n    <div className=\"calendar-container\">\n      {/* Display the lecturer's timetable heading */}\n      {lecturer && <h2>Timetable for {lecturer}</h2>} {/* Conditionally render the heading */}\n      <div>\n        <div style={styles.buttonWrap} className=\"csv-btn\">\n\n          {/* Add the file input for CSV import */}\n          <input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={(e) => {\n              const file = e.target.files[0];\n              if (file) {\n                parseCSVFile(file);\n              }\n            }}\n          />\n        <button className=\"csv-export-btn\" onClick={() => {\n            const csvContent = convertToCSV(events, lecturer);  // Convert events to CSV format\n            downloadCSV(csvContent, 'schedule.csv');  // Trigger the download\n          }}>\n            Export to CSV\n          </button>\n          {/* <button>Import from CSV</button> */}\n        </div>\n      </div>\n\n      <div style={styles.main}>\n        <DayPilotCalendar\n          {...config}\n          startDate={startDate}\n          controlRef={setCalendar}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Calendar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}